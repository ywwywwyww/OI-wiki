{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 OI Wiki \u3002 \u00b6 OI \uff08Olympiad in Informatics\uff0c\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff09\u5728\u4e2d\u56fd\u8d77\u6e90\u4e8e 1984 \u5e74\uff0c\u662f\u4e94\u5927\u9ad8\u4e2d\u5b66\u79d1\u7ade\u8d5b\u4e4b\u4e00\u3002\u81ea 1989 \u5e74\u8d77\uff0c\u6bcf\u5e74\u8fd8\u4f1a\u9009\u62d4\u51fa\u56fd\u5bb6\u96c6\u8bad\u961f\u9009\u624b\u51c6\u5907 IOI (International Olympiad in Informatics\uff0c\u56fd\u9645\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b)\u3002 ACM-ICPC \uff08ACM International Collegiate Programming Contest, ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\uff09\u7531\u7f8e\u56fd\u8ba1\u7b97\u673a\u534f\u4f1a\uff08ACM\uff09\u4e3b\u529e\uff0c\u7531 ICPC \u57fa\u91d1\u4f1a\u8d1f\u8d23\u7ec4\u7ec7\uff0c\u662f\u6700\u5177\u5f71\u54cd\u529b\u7684\u5927\u5b66\u751f\u8ba1\u7b97\u673a\u7ade\u8d5b\u3002ICPC \u4e3b\u8981\u5206\u4e3a\u533a\u57df\u8d5b\uff08Regional\uff09\u548c\u603b\u51b3\u8d5b\uff08World Finals\uff09\u4e24\u90e8\u5206\u3002 OI Wiki \u81f4\u529b\u4e8e\u6210\u4e3a\u4e00\u4e2a\u514d\u8d39\u5f00\u653e\u4e14\u6301\u7eed\u66f4\u65b0\u7684\u77e5\u8bc6\u6574\u5408\u7ad9\u70b9\uff0c\u5927\u5bb6\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u53d6\u5173\u4e8e \u7f16\u7a0b\u7ade\u8d5b (competitive programming) \u6709\u8da3\u53c8\u5b9e\u7528\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u4e3a\u5927\u5bb6\u51c6\u5907\u4e86\u7ade\u8d5b\u4e2d\u7684\u57fa\u7840\u77e5\u8bc6\u3001\u5e38\u89c1\u9898\u578b\u3001\u89e3\u9898\u601d\u8def\u4ee5\u53ca\u5e38\u7528\u5de5\u5177\u7b49\u5185\u5bb9\uff0c\u5e2e\u52a9\u5927\u5bb6\u66f4\u5feb\u901f\u6df1\u5165\u5730\u5b66\u4e60\u7f16\u7a0b\u7ade\u8d5b\u3002 \u672c\u9879\u76ee\u53d7 CTF Wiki \u7684\u542f\u53d1\uff0c\u5728\u7f16\u5199\u8fc7\u7a0b\u4e2d\u53c2\u8003\u4e86\u8bf8\u591a\u8d44\u6599\uff0c\u5728\u6b64\u4e00\u5e76\u81f4\u8c22\u3002 \u672c\u9879\u76ee\u6587\u6863\u5185\u5bb9\u6258\u7ba1\u5728 GitHub \uff0c\u4e3b\u8981\u4f7f\u7528 Issues / QQ / Telegram / Discord \u8fdb\u884c\u4ea4\u6d41\u6c9f\u901a\uff0c\u671f\u5f85\u4f60\u7684\u52a0\u5165\u3002 Telegram \u7fa4\u7ec4\u94fe\u63a5\u4e3a @OIwiki \uff0c QQ \u7fa4\u53f7\u7801\u4e3a 588793226 \uff0c\u6b22\u8fce\u52a0\u5165\u3002 Material color palette \u989c\u8272\u4e3b\u9898 \u00b6 Primary colors \u4e3b\u8272 \u00b6 \u9ed8\u8ba4 white \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors \u8f85\u52a9\u8272 \u00b6 \u9ed8\u8ba4 red \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","title":"Getting Started"},{"location":"#oi-wiki","text":"OI \uff08Olympiad in Informatics\uff0c\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff09\u5728\u4e2d\u56fd\u8d77\u6e90\u4e8e 1984 \u5e74\uff0c\u662f\u4e94\u5927\u9ad8\u4e2d\u5b66\u79d1\u7ade\u8d5b\u4e4b\u4e00\u3002\u81ea 1989 \u5e74\u8d77\uff0c\u6bcf\u5e74\u8fd8\u4f1a\u9009\u62d4\u51fa\u56fd\u5bb6\u96c6\u8bad\u961f\u9009\u624b\u51c6\u5907 IOI (International Olympiad in Informatics\uff0c\u56fd\u9645\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b)\u3002 ACM-ICPC \uff08ACM International Collegiate Programming Contest, ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\uff09\u7531\u7f8e\u56fd\u8ba1\u7b97\u673a\u534f\u4f1a\uff08ACM\uff09\u4e3b\u529e\uff0c\u7531 ICPC \u57fa\u91d1\u4f1a\u8d1f\u8d23\u7ec4\u7ec7\uff0c\u662f\u6700\u5177\u5f71\u54cd\u529b\u7684\u5927\u5b66\u751f\u8ba1\u7b97\u673a\u7ade\u8d5b\u3002ICPC \u4e3b\u8981\u5206\u4e3a\u533a\u57df\u8d5b\uff08Regional\uff09\u548c\u603b\u51b3\u8d5b\uff08World Finals\uff09\u4e24\u90e8\u5206\u3002 OI Wiki \u81f4\u529b\u4e8e\u6210\u4e3a\u4e00\u4e2a\u514d\u8d39\u5f00\u653e\u4e14\u6301\u7eed\u66f4\u65b0\u7684\u77e5\u8bc6\u6574\u5408\u7ad9\u70b9\uff0c\u5927\u5bb6\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u53d6\u5173\u4e8e \u7f16\u7a0b\u7ade\u8d5b (competitive programming) \u6709\u8da3\u53c8\u5b9e\u7528\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u4e3a\u5927\u5bb6\u51c6\u5907\u4e86\u7ade\u8d5b\u4e2d\u7684\u57fa\u7840\u77e5\u8bc6\u3001\u5e38\u89c1\u9898\u578b\u3001\u89e3\u9898\u601d\u8def\u4ee5\u53ca\u5e38\u7528\u5de5\u5177\u7b49\u5185\u5bb9\uff0c\u5e2e\u52a9\u5927\u5bb6\u66f4\u5feb\u901f\u6df1\u5165\u5730\u5b66\u4e60\u7f16\u7a0b\u7ade\u8d5b\u3002 \u672c\u9879\u76ee\u53d7 CTF Wiki \u7684\u542f\u53d1\uff0c\u5728\u7f16\u5199\u8fc7\u7a0b\u4e2d\u53c2\u8003\u4e86\u8bf8\u591a\u8d44\u6599\uff0c\u5728\u6b64\u4e00\u5e76\u81f4\u8c22\u3002 \u672c\u9879\u76ee\u6587\u6863\u5185\u5bb9\u6258\u7ba1\u5728 GitHub \uff0c\u4e3b\u8981\u4f7f\u7528 Issues / QQ / Telegram / Discord \u8fdb\u884c\u4ea4\u6d41\u6c9f\u901a\uff0c\u671f\u5f85\u4f60\u7684\u52a0\u5165\u3002 Telegram \u7fa4\u7ec4\u94fe\u63a5\u4e3a @OIwiki \uff0c QQ \u7fa4\u53f7\u7801\u4e3a 588793226 \uff0c\u6b22\u8fce\u52a0\u5165\u3002","title":"\u6b22\u8fce\u6765\u5230 OI Wiki\u3002"},{"location":"#material-color-palette","text":"","title":"Material color palette \u989c\u8272\u4e3b\u9898"},{"location":"#primary-colors","text":"\u9ed8\u8ba4 white \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"Primary colors \u4e3b\u8272"},{"location":"#accent-colors","text":"\u9ed8\u8ba4 red \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","title":"Accent colors \u8f85\u52a9\u8272"},{"location":"basic/","text":"\u57fa\u7840\u90e8\u5206\u7b80\u4ecb \u4ecb\u7ecd\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\uff0c\u4e3a\u4e4b\u540e\u7684\u8fdb\u9636\u5185\u5bb9\u505a\u94fa\u57ab\u3002 \u679a\u4e3e \u6a21\u62df \u5206\u6cbb \u8d2a\u5fc3 \u6392\u5e8f \u8868\u8fbe\u5f0f\u6c42\u503c \u4e8c\u5206 \u6784\u9020","title":"\u57fa\u7840\u90e8\u5206\u7b80\u4ecb"},{"location":"basic/binary/","text":"\u4e8c\u5206\u641c\u7d22 \u00b6 \u4e8c\u5206\u641c\u7d22\uff0c\u4e5f\u79f0\u6298\u534a\u641c\u7d22\uff0c\u662f\u7528\u6765\u5728\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u67d0\u4e00\u5143\u7d20\u7684\u7b97\u6cd5\u3002 \u4ee5\u5728\u4e00\u4e2a\u5347\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u6570\u4e3a\u4f8b\u3002 \u5b83\u6bcf\u6b21\u8003\u5bdf\u6570\u7ec4\u5f53\u524d\u90e8\u5206\u7684\u4e2d\u95f4\u5143\u7d20\uff0c\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u521a\u597d\u662f\u8981\u627e\u7684\uff0c\u5c31\u7ed3\u675f\u641c\u7d22\u8fc7\u7a0b\uff1b\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u5c0f\u4e8e\u6240\u67e5\u627e\u7684\u503c\uff0c\u90a3\u4e48\u5de6\u4fa7\u7684\u53ea\u4f1a\u66f4\u5c0f\uff0c\u4e0d\u4f1a\u6709\u6240\u67e5\u627e\u7684\u5143\u7d20\uff0c\u53ea\u9700\u8981\u5230\u53f3\u4fa7\u53bb\u627e\u5c31\u597d\u4e86\uff1b\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u5927\u4e8e\u6240\u67e5\u627e\u7684\u503c\uff0c\u540c\u7406\uff0c\u53f3\u4fa7\u7684\u53ea\u4f1a\u66f4\u5927\u800c\u4e0d\u4f1a\u6709\u6240\u67e5\u627e\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5230\u5de6\u4fa7\u53bb\u627e\u3002 \u5728\u4e8c\u5206\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u90fd\u628a\u67e5\u8be2\u7684\u533a\u95f4\u51cf\u534a\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4\uff0c\u81f3\u591a\u4f1a\u8fdb\u884c O(\\log n) O(\\log n) \u6b21\u67e5\u627e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int binary_search ( int start , int end , int key ) { int ret = - 1 ; // \u672a\u641c\u7d22\u5230\u6570\u636e\u8fd4\u56de-1\u4e0b\u6807 int mid ; while ( start <= end ) { mid = start + (( end - start ) >> 1 ); //\u76f4\u63a5\u5e73\u5747\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u7528\u8fd9\u4e2a\u7b97\u6cd5 if ( arr [ mid ] < key ) start = mid + 1 ; else if ( arr [ mid ] > key ) end = mid - 1 ; else { // \u6700\u540e\u68c0\u6d4b\u76f8\u7b49\u662f\u56e0\u4e3a\u591a\u6570\u641c\u7d22\u60c5\u51b5\u4e0d\u662f\u5927\u4e8e\u5c31\u662f\u5c0f\u4e8e ret = mid ; break ; } } return ret ; // \u5355\u4e00\u51fa\u53e3 } Note >> 1 \u6bd4 / 2 \u901f\u5ea6\u5feb\u4e00\u4e9b \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u6709\u5e8f\u662f\u5e7f\u4e49\u7684\u6709\u5e8f\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u5de6\u4fa7\u6216\u8005\u53f3\u4fa7\u90fd\u6ee1\u8db3\u67d0\u4e00\u79cd\u6761\u4ef6\uff0c\u800c\u53e6\u4e00\u4fa7\u90fd\u4e0d\u6ee1\u8db3\u8fd9\u79cd\u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u6709\u5e8f\uff08\u5982\u679c\u628a\u6ee1\u8db3\u6761\u4ef6\u770b\u505a 1 1 \uff0c\u4e0d\u6ee1\u8db3\u770b\u505a 0 0 \uff0c\u81f3\u5c11\u5bf9\u4e8e\u8fd9\u4e2a\u6761\u4ef6\u7684\u8fd9\u4e00\u7ef4\u5ea6\u662f\u6709\u5e8f\u7684\uff09\u3002\u6362\u8a00\u4e4b\uff0c\u4e8c\u5206\u641c\u7d22\u6cd5\u53ef\u4ee5\u7528\u6765\u67e5\u627e\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u6700\u5927\uff08\u6700\u5c0f\uff09\u7684\u503c\u3002 \u5982\u679c\u6211\u4eec\u8981\u6c42\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u53ef\u80fd\u60c5\u51b5\uff08\u6700\u5927\u503c\u6700\u5c0f\u5316\uff09\u5462\uff1f\u9996\u5148\u7684\u60f3\u6cd5\u662f\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8fd9\u4e2a\u4f5c\u4e3a\u7b54\u6848\u7684\u300c\u6700\u5927\u503c\u300d\uff0c\u7136\u540e\u53bb\u5224\u65ad\u662f\u5426\u5408\u6cd5\u3002\u8981\u662f\u8fd9\u4e2a\u7b54\u6848\u662f\u5355\u8c03\u7684\u5c31\u597d\u4e86\uff0c\u90a3\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6cd5\u6765\u66f4\u5feb\u5730\u627e\u5230\u7b54\u6848\u3002 \u8981\u60f3\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6cd5\u6765\u89e3\u8fd9\u79cd\u300c\u6700\u5927\u503c\u6700\u5c0f\u5316\u300d\u7684\u9898\u76ee\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a \u7b54\u6848\u5728\u4e00\u4e2a\u56fa\u5b9a\u533a\u95f4\u5185\uff1b \u53ef\u80fd\u67e5\u627e\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u503c\u4e0d\u662f\u5f88\u5bb9\u6613\uff0c\u4f46\u662f\u8981\u6c42\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u662f\u7b26\u5408\u6761\u4ef6\u7684\uff1b \u53ef\u884c\u89e3\u5bf9\u4e8e\u533a\u95f4\u6ee1\u8db3\u4e00\u5b9a\u7684\u5355\u8c03\u6027\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c x x \u662f\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u90a3\u4e48\u6709 x + 1 x + 1 \u6216\u8005 x - 1 x - 1 \u4e5f\u7b26\u5408\u6761\u4ef6\u3002\uff08\u8fd9\u6837\u4e0b\u6765\u5c31\u6ee1\u8db3\u4e86\u4e0a\u9762\u63d0\u5230\u7684\u5355\u8c03\u6027\uff09 \u5f53\u7136\uff0c\u6700\u5c0f\u503c\u6700\u5927\u5316\u662f\u540c\u7406\u7684\u3002 \u4e8c\u5206\u6cd5\u628a\u4e00\u4e2a\u5bfb\u627e\u6781\u503c\u7684\u95ee\u9898\u8f6c\u5316\u6210\u4e00\u4e2a\u5224\u5b9a\u7684\u95ee\u9898\uff08\u7528\u4e8c\u5206\u641c\u7d22\u6765\u627e\u8fd9\u4e2a\u6781\u503c\uff09\u3002\u7c7b\u6bd4\u679a\u4e3e\u6cd5\uff0c\u6211\u4eec\u5f53\u65f6\u662f\u679a\u4e3e\u7b54\u6848\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u73b0\u5728\u7531\u4e8e\u5355\u8c03\u6027\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u4e00\u4e2a\u4e2a\u679a\u4e3e\uff0c\u5229\u7528\u4e8c\u5206\u7684\u601d\u8def\uff0c\u5c31\u53ef\u4ee5\u7528\u66f4\u4f18\u7684\u65b9\u6cd5\u89e3\u51b3\u300c\u6700\u5927\u503c\u6700\u5c0f\u300d\u3001\u300c\u6700\u5c0f\u503c\u6700\u5927\u300d\u3002\u8fd9\u79cd\u89e3\u6cd5\u4e5f\u6210\u4e3a\u662f\u300c\u4e8c\u5206\u7b54\u6848\u300d\uff0c\u5e38\u89c1\u4e8e\u89e3\u9898\u62a5\u544a\u4e2d\u3002 STL \u7684\u4e8c\u5206\u67e5\u627e \u00b6 \u8865\u5145\u4e00\u4e2a\u5c0f\u77e5\u8bc6\u70b9\uff0c \u5bf9\u4e8e\u4e00\u4e2a\u6709\u5e8f\u7684 array \u4f60\u53ef\u4ee5\u4f7f\u7528 std::lower_bound() \u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u4f60\u7684\u503c\u7684\u6570\uff0c std::upper_bound() \u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u4f60\u7684\u503c\u7684\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u5426\u5219\u7b54\u6848\u662f\u9519\u8bef\u7684\u3002 \u5173\u4e8e\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\uff0c\u8bf7\u53c2\u89c1 STL \u9875\u9762 \u3002 \u4e09\u5206\u6cd5 \u00b6 1 2 3 4 5 6 mid = left + ( right - left >> 1 ); midmid = mid + ( right - mid >> 1 ); // \u5bf9\u53f3\u4fa7\u533a\u95f4\u53d6\u534a if ( cal ( mid ) > cal ( midmid )) right = midmid ; else left = mid ; \u4e09\u5206\u6cd5\u53ef\u4ee5\u7528\u6765\u67e5\u627e\u51f8\u51fd\u6570\u7684\u6700\u5927\uff08\u5c0f\uff09\u503c\u3002 \u753b\u4e00\u4e0b\u56fe\u597d\u7406\u89e3\u4e00\u4e9b\uff08\u56fe\u5f85\u8865\uff09 \u5982\u679c mid \u548c midmid \u5728\u6700\u5927\uff08\u5c0f\uff09\u503c\u7684\u540c\u4e00\u4fa7\uff1a \u90a3\u4e48\u7531\u4e8e\u5355\u8c03\u6027\uff0c\u4e00\u5b9a\u662f\u4e8c\u8005\u4e2d\u8f83\u5927\uff08\u5c0f\uff09\u7684\u90a3\u4e2a\u79bb\u6700\u503c\u8fd1\u4e00\u4e9b\uff0c\u8f83\u8fdc\u7684\u90a3\u4e2a\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u4e0d\u53ef\u80fd\u5305\u542b\u6700\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u820d\u5f03\u3002 \u5982\u679c\u5728\u4e24\u4fa7\uff1a \u7531\u4e8e\u6700\u503c\u5728\u4e8c\u8005\u4e2d\u95f4\uff0c\u6211\u4eec\u820d\u5f03\u4e24\u4fa7\u7684\u4e00\u4e2a\u533a\u95f4\u540e\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u6700\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u820d\u5f03\u3002 \u5206\u6570\u89c4\u5212 \u00b6 \u5206\u6570\u89c4\u5212\u662f\u8fd9\u6837\u4e00\u7c7b\u95ee\u9898\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e24\u4e2a\u4ee3\u4ef7 c_i c_i \uff0c d_i d_i \uff0c\u8981\u6c42\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u9009\u51fa\u82e5\u5e72\u4e2a\uff0c\u4f7f\u5f97 \\frac{\\sum{c_i}}{\\sum{d_i}} \\frac{\\sum{c_i}}{\\sum{d_i}} \u6700\u5927\u6216\u6700\u5c0f\u3002 \u7ecf\u5178\u7684\u4f8b\u5b50\u662f \u6700\u4f18\u6bd4\u7387\u73af\u3001\u6700\u4f18\u6bd4\u7387\u751f\u6210\u6811 \u7b49\u7b49\u3002 \u4e8c\u5206\u6cd5 \u00b6 \u6bd4\u5982\u8bf4\u6211\u4eec\u8981\u6c42\u7684\u662f\u6700\u5c0f\u7684\uff0c\u8bb0 L L \u4e3a\u6700\u4f18\u7684\u7b54\u6848\uff0c\u5bf9\u8fd9\u4e2a\u5f0f\u5b50\u505a\u4e00\u4e9b\u53d8\u6362\uff1a L \\geq \\frac{\\sum{c_i}}{\\sum{d_i}} L \\geq \\frac{\\sum{c_i}}{\\sum{d_i}} \u628a\u5206\u6bcd\u4e58\u8fc7\u53bb\uff0c\u628a\u53f3\u4fa7\u5316\u4e3a 0 0 \uff1a {\\sum{d_i}} \\times L - {\\sum{c_i}} \\geq 0 {\\sum{d_i}} \\times L - {\\sum{c_i}} \\geq 0 \u5373\uff1a {\\sum_{i=1}^N{d_i}} \\times L - {\\sum_{i=1}^N{c_i}} \\geq 0 {\\sum_{i=1}^N{d_i}} \\times L - {\\sum_{i=1}^N{c_i}} \\geq 0 \\sum_{i=1}^N{d_i \\times L - c_i} \\geq 0 \\sum_{i=1}^N{d_i \\times L - c_i} \\geq 0 \u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c L' L' \u6bd4 L L \u8981\u5c0f\uff0c\u4e0a\u5f0f\u5de6\u7aef\u7684\u503c\u4f1a\u66f4\u5927\u4e00\u4e9b\u3002 \u6240\u4ee5\u8981\u6c42\u5f97\u6700\u5c0f\u7684 L L \uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u53d8\u6210\u4e86\u8ba9\u4e0a\u5f0f\u5de6\u7aef\u6700\u63a5\u8fd1 0 0 \u7684 L L \u3002 \u4e0d\u96be\u53d1\u73b0\u5de6\u7aef\u7684\u5f0f\u5b50\u662f\u968f L L \u53d8\u5316\u800c\u5355\u8c03\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6cd5\u6765\u89e3\u51b3\u3002 Dinkelbach \u7b97\u6cd5 \u00b6 Dinkelbach \u7b97\u6cd5\u662f\u6bcf\u6b21\u7528\u4e0a\u4e00\u8f6e\u7684\u7b54\u6848\u5f53\u505a\u65b0\u7684 L L \u6765\u8f93\u5165\uff0c\u4e0d\u65ad\u5730\u8fed\u4ee3\uff0c\u76f4\u81f3\u7b54\u6848\u6536\u655b\u3002","title":"\u4e8c\u5206"},{"location":"basic/binary/#_1","text":"\u4e8c\u5206\u641c\u7d22\uff0c\u4e5f\u79f0\u6298\u534a\u641c\u7d22\uff0c\u662f\u7528\u6765\u5728\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u67d0\u4e00\u5143\u7d20\u7684\u7b97\u6cd5\u3002 \u4ee5\u5728\u4e00\u4e2a\u5347\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u6570\u4e3a\u4f8b\u3002 \u5b83\u6bcf\u6b21\u8003\u5bdf\u6570\u7ec4\u5f53\u524d\u90e8\u5206\u7684\u4e2d\u95f4\u5143\u7d20\uff0c\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u521a\u597d\u662f\u8981\u627e\u7684\uff0c\u5c31\u7ed3\u675f\u641c\u7d22\u8fc7\u7a0b\uff1b\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u5c0f\u4e8e\u6240\u67e5\u627e\u7684\u503c\uff0c\u90a3\u4e48\u5de6\u4fa7\u7684\u53ea\u4f1a\u66f4\u5c0f\uff0c\u4e0d\u4f1a\u6709\u6240\u67e5\u627e\u7684\u5143\u7d20\uff0c\u53ea\u9700\u8981\u5230\u53f3\u4fa7\u53bb\u627e\u5c31\u597d\u4e86\uff1b\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u5927\u4e8e\u6240\u67e5\u627e\u7684\u503c\uff0c\u540c\u7406\uff0c\u53f3\u4fa7\u7684\u53ea\u4f1a\u66f4\u5927\u800c\u4e0d\u4f1a\u6709\u6240\u67e5\u627e\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5230\u5de6\u4fa7\u53bb\u627e\u3002 \u5728\u4e8c\u5206\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u90fd\u628a\u67e5\u8be2\u7684\u533a\u95f4\u51cf\u534a\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4\uff0c\u81f3\u591a\u4f1a\u8fdb\u884c O(\\log n) O(\\log n) \u6b21\u67e5\u627e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int binary_search ( int start , int end , int key ) { int ret = - 1 ; // \u672a\u641c\u7d22\u5230\u6570\u636e\u8fd4\u56de-1\u4e0b\u6807 int mid ; while ( start <= end ) { mid = start + (( end - start ) >> 1 ); //\u76f4\u63a5\u5e73\u5747\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u7528\u8fd9\u4e2a\u7b97\u6cd5 if ( arr [ mid ] < key ) start = mid + 1 ; else if ( arr [ mid ] > key ) end = mid - 1 ; else { // \u6700\u540e\u68c0\u6d4b\u76f8\u7b49\u662f\u56e0\u4e3a\u591a\u6570\u641c\u7d22\u60c5\u51b5\u4e0d\u662f\u5927\u4e8e\u5c31\u662f\u5c0f\u4e8e ret = mid ; break ; } } return ret ; // \u5355\u4e00\u51fa\u53e3 } Note >> 1 \u6bd4 / 2 \u901f\u5ea6\u5feb\u4e00\u4e9b \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u6709\u5e8f\u662f\u5e7f\u4e49\u7684\u6709\u5e8f\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u5de6\u4fa7\u6216\u8005\u53f3\u4fa7\u90fd\u6ee1\u8db3\u67d0\u4e00\u79cd\u6761\u4ef6\uff0c\u800c\u53e6\u4e00\u4fa7\u90fd\u4e0d\u6ee1\u8db3\u8fd9\u79cd\u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u6709\u5e8f\uff08\u5982\u679c\u628a\u6ee1\u8db3\u6761\u4ef6\u770b\u505a 1 1 \uff0c\u4e0d\u6ee1\u8db3\u770b\u505a 0 0 \uff0c\u81f3\u5c11\u5bf9\u4e8e\u8fd9\u4e2a\u6761\u4ef6\u7684\u8fd9\u4e00\u7ef4\u5ea6\u662f\u6709\u5e8f\u7684\uff09\u3002\u6362\u8a00\u4e4b\uff0c\u4e8c\u5206\u641c\u7d22\u6cd5\u53ef\u4ee5\u7528\u6765\u67e5\u627e\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u6700\u5927\uff08\u6700\u5c0f\uff09\u7684\u503c\u3002 \u5982\u679c\u6211\u4eec\u8981\u6c42\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u53ef\u80fd\u60c5\u51b5\uff08\u6700\u5927\u503c\u6700\u5c0f\u5316\uff09\u5462\uff1f\u9996\u5148\u7684\u60f3\u6cd5\u662f\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8fd9\u4e2a\u4f5c\u4e3a\u7b54\u6848\u7684\u300c\u6700\u5927\u503c\u300d\uff0c\u7136\u540e\u53bb\u5224\u65ad\u662f\u5426\u5408\u6cd5\u3002\u8981\u662f\u8fd9\u4e2a\u7b54\u6848\u662f\u5355\u8c03\u7684\u5c31\u597d\u4e86\uff0c\u90a3\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6cd5\u6765\u66f4\u5feb\u5730\u627e\u5230\u7b54\u6848\u3002 \u8981\u60f3\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6cd5\u6765\u89e3\u8fd9\u79cd\u300c\u6700\u5927\u503c\u6700\u5c0f\u5316\u300d\u7684\u9898\u76ee\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a \u7b54\u6848\u5728\u4e00\u4e2a\u56fa\u5b9a\u533a\u95f4\u5185\uff1b \u53ef\u80fd\u67e5\u627e\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u503c\u4e0d\u662f\u5f88\u5bb9\u6613\uff0c\u4f46\u662f\u8981\u6c42\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u662f\u7b26\u5408\u6761\u4ef6\u7684\uff1b \u53ef\u884c\u89e3\u5bf9\u4e8e\u533a\u95f4\u6ee1\u8db3\u4e00\u5b9a\u7684\u5355\u8c03\u6027\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c x x \u662f\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u90a3\u4e48\u6709 x + 1 x + 1 \u6216\u8005 x - 1 x - 1 \u4e5f\u7b26\u5408\u6761\u4ef6\u3002\uff08\u8fd9\u6837\u4e0b\u6765\u5c31\u6ee1\u8db3\u4e86\u4e0a\u9762\u63d0\u5230\u7684\u5355\u8c03\u6027\uff09 \u5f53\u7136\uff0c\u6700\u5c0f\u503c\u6700\u5927\u5316\u662f\u540c\u7406\u7684\u3002 \u4e8c\u5206\u6cd5\u628a\u4e00\u4e2a\u5bfb\u627e\u6781\u503c\u7684\u95ee\u9898\u8f6c\u5316\u6210\u4e00\u4e2a\u5224\u5b9a\u7684\u95ee\u9898\uff08\u7528\u4e8c\u5206\u641c\u7d22\u6765\u627e\u8fd9\u4e2a\u6781\u503c\uff09\u3002\u7c7b\u6bd4\u679a\u4e3e\u6cd5\uff0c\u6211\u4eec\u5f53\u65f6\u662f\u679a\u4e3e\u7b54\u6848\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u73b0\u5728\u7531\u4e8e\u5355\u8c03\u6027\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u4e00\u4e2a\u4e2a\u679a\u4e3e\uff0c\u5229\u7528\u4e8c\u5206\u7684\u601d\u8def\uff0c\u5c31\u53ef\u4ee5\u7528\u66f4\u4f18\u7684\u65b9\u6cd5\u89e3\u51b3\u300c\u6700\u5927\u503c\u6700\u5c0f\u300d\u3001\u300c\u6700\u5c0f\u503c\u6700\u5927\u300d\u3002\u8fd9\u79cd\u89e3\u6cd5\u4e5f\u6210\u4e3a\u662f\u300c\u4e8c\u5206\u7b54\u6848\u300d\uff0c\u5e38\u89c1\u4e8e\u89e3\u9898\u62a5\u544a\u4e2d\u3002","title":"\u4e8c\u5206\u641c\u7d22"},{"location":"basic/binary/#stl","text":"\u8865\u5145\u4e00\u4e2a\u5c0f\u77e5\u8bc6\u70b9\uff0c \u5bf9\u4e8e\u4e00\u4e2a\u6709\u5e8f\u7684 array \u4f60\u53ef\u4ee5\u4f7f\u7528 std::lower_bound() \u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u4f60\u7684\u503c\u7684\u6570\uff0c std::upper_bound() \u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u4f60\u7684\u503c\u7684\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u5426\u5219\u7b54\u6848\u662f\u9519\u8bef\u7684\u3002 \u5173\u4e8e\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\uff0c\u8bf7\u53c2\u89c1 STL \u9875\u9762 \u3002","title":"STL \u7684\u4e8c\u5206\u67e5\u627e"},{"location":"basic/binary/#_2","text":"1 2 3 4 5 6 mid = left + ( right - left >> 1 ); midmid = mid + ( right - mid >> 1 ); // \u5bf9\u53f3\u4fa7\u533a\u95f4\u53d6\u534a if ( cal ( mid ) > cal ( midmid )) right = midmid ; else left = mid ; \u4e09\u5206\u6cd5\u53ef\u4ee5\u7528\u6765\u67e5\u627e\u51f8\u51fd\u6570\u7684\u6700\u5927\uff08\u5c0f\uff09\u503c\u3002 \u753b\u4e00\u4e0b\u56fe\u597d\u7406\u89e3\u4e00\u4e9b\uff08\u56fe\u5f85\u8865\uff09 \u5982\u679c mid \u548c midmid \u5728\u6700\u5927\uff08\u5c0f\uff09\u503c\u7684\u540c\u4e00\u4fa7\uff1a \u90a3\u4e48\u7531\u4e8e\u5355\u8c03\u6027\uff0c\u4e00\u5b9a\u662f\u4e8c\u8005\u4e2d\u8f83\u5927\uff08\u5c0f\uff09\u7684\u90a3\u4e2a\u79bb\u6700\u503c\u8fd1\u4e00\u4e9b\uff0c\u8f83\u8fdc\u7684\u90a3\u4e2a\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u4e0d\u53ef\u80fd\u5305\u542b\u6700\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u820d\u5f03\u3002 \u5982\u679c\u5728\u4e24\u4fa7\uff1a \u7531\u4e8e\u6700\u503c\u5728\u4e8c\u8005\u4e2d\u95f4\uff0c\u6211\u4eec\u820d\u5f03\u4e24\u4fa7\u7684\u4e00\u4e2a\u533a\u95f4\u540e\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u6700\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u820d\u5f03\u3002","title":"\u4e09\u5206\u6cd5"},{"location":"basic/binary/#_3","text":"\u5206\u6570\u89c4\u5212\u662f\u8fd9\u6837\u4e00\u7c7b\u95ee\u9898\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e24\u4e2a\u4ee3\u4ef7 c_i c_i \uff0c d_i d_i \uff0c\u8981\u6c42\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u9009\u51fa\u82e5\u5e72\u4e2a\uff0c\u4f7f\u5f97 \\frac{\\sum{c_i}}{\\sum{d_i}} \\frac{\\sum{c_i}}{\\sum{d_i}} \u6700\u5927\u6216\u6700\u5c0f\u3002 \u7ecf\u5178\u7684\u4f8b\u5b50\u662f \u6700\u4f18\u6bd4\u7387\u73af\u3001\u6700\u4f18\u6bd4\u7387\u751f\u6210\u6811 \u7b49\u7b49\u3002","title":"\u5206\u6570\u89c4\u5212"},{"location":"basic/binary/#_4","text":"\u6bd4\u5982\u8bf4\u6211\u4eec\u8981\u6c42\u7684\u662f\u6700\u5c0f\u7684\uff0c\u8bb0 L L \u4e3a\u6700\u4f18\u7684\u7b54\u6848\uff0c\u5bf9\u8fd9\u4e2a\u5f0f\u5b50\u505a\u4e00\u4e9b\u53d8\u6362\uff1a L \\geq \\frac{\\sum{c_i}}{\\sum{d_i}} L \\geq \\frac{\\sum{c_i}}{\\sum{d_i}} \u628a\u5206\u6bcd\u4e58\u8fc7\u53bb\uff0c\u628a\u53f3\u4fa7\u5316\u4e3a 0 0 \uff1a {\\sum{d_i}} \\times L - {\\sum{c_i}} \\geq 0 {\\sum{d_i}} \\times L - {\\sum{c_i}} \\geq 0 \u5373\uff1a {\\sum_{i=1}^N{d_i}} \\times L - {\\sum_{i=1}^N{c_i}} \\geq 0 {\\sum_{i=1}^N{d_i}} \\times L - {\\sum_{i=1}^N{c_i}} \\geq 0 \\sum_{i=1}^N{d_i \\times L - c_i} \\geq 0 \\sum_{i=1}^N{d_i \\times L - c_i} \\geq 0 \u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c L' L' \u6bd4 L L \u8981\u5c0f\uff0c\u4e0a\u5f0f\u5de6\u7aef\u7684\u503c\u4f1a\u66f4\u5927\u4e00\u4e9b\u3002 \u6240\u4ee5\u8981\u6c42\u5f97\u6700\u5c0f\u7684 L L \uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u53d8\u6210\u4e86\u8ba9\u4e0a\u5f0f\u5de6\u7aef\u6700\u63a5\u8fd1 0 0 \u7684 L L \u3002 \u4e0d\u96be\u53d1\u73b0\u5de6\u7aef\u7684\u5f0f\u5b50\u662f\u968f L L \u53d8\u5316\u800c\u5355\u8c03\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6cd5\u6765\u89e3\u51b3\u3002","title":"\u4e8c\u5206\u6cd5"},{"location":"basic/binary/#dinkelbach","text":"Dinkelbach \u7b97\u6cd5\u662f\u6bcf\u6b21\u7528\u4e0a\u4e00\u8f6e\u7684\u7b54\u6848\u5f53\u505a\u65b0\u7684 L L \u6765\u8f93\u5165\uff0c\u4e0d\u65ad\u5730\u8fed\u4ee3\uff0c\u76f4\u81f3\u7b54\u6848\u6536\u655b\u3002","title":"Dinkelbach \u7b97\u6cd5"},{"location":"basic/construction/","text":"\u6784\u9020\u9898\u662f\u6bd4\u8d5b\u4e2d\u5e38\u89c1\u7684\u4e00\u7c7b\u9898\u578b\u3002 \u4ece\u5f62\u5f0f\u4e0a\u6765\u770b\uff0c\u95ee\u9898\u7684\u7b54\u6848\u5f80\u5f80\u5177\u6709\u67d0\u79cd\u89c4\u5f8b\u6027\uff0c\u4f7f\u5f97\u5728\u95ee\u9898\u89c4\u6a21\u8fc5\u901f\u589e\u5927\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u6709\u673a\u4f1a\u6bd4\u8f83\u5bb9\u6613\u5730\u5f97\u5230\u7b54\u6848\u3002 \u8fd9\u8981\u6c42\u6211\u4eec\u5728\u89e3\u9898\u65f6\uff0c\u8981\u601d\u8003\u95ee\u9898\u89c4\u6a21\u589e\u957f\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\uff0c\u8fd9\u79cd\u5f71\u54cd\u662f\u5426\u53ef\u4ee5\u63a8\u5e7f\u3002\uff08\u6bd4\u5982\u5728\u8bbe\u8ba1\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u8981\u8003\u8651\u4ece\u4e00\u4e2a\u72b6\u6001\u5230\u540e\u7ee7\u72b6\u6001\u7684\u8f6c\u79fb\u4f1a\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff09\u3002","title":"\u6784\u9020"},{"location":"basic/divide-and-conquer/","text":"\u9012\u5f52 \u00b6 \u4ecb\u7ecd\u5206\u6cbb\u4e4b\u524d\uff0c\u9996\u5148\u8981\u5f04\u6e05\u695a\u9012\u5f52\u8fd9\u4e2a\u6982\u5ff5\u3002 \u9012\u5f52\u662f\u4ec0\u4e48\u5462\uff1f\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u8001\u548c\u5c1a\u7ed9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1a\u201c\u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u8001\u548c\u5c1a\u7ed9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1a\u2018\u4ece\u524d\u6709\u5ea7\u5c71......\u2019\u201d \u8fd9\u4e2a\u6545\u4e8b\u4e0e\u9012\u5f52\u7b97\u6cd5\u6709\u7740\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\u3002 \u9012\u5f52\u7684\u57fa\u672c\u601d\u60f3\u662f\u67d0\u4e2a\u51fd\u6570\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u8c03\u7528\u81ea\u8eab\uff0c\u8fd9\u6837\u5c31\u628a\u539f\u95ee\u9898\u7684\u6c42\u89e3\u8f6c\u6362\u4e3a\u8bb8\u591a\u6027\u8d28\u76f8\u540c\u4f46\u662f\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8\u5982\u4f55\u628a\u539f\u95ee\u9898\u5212\u5206\u6210\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u9700\u8981\u53bb\u7814\u7a76\u8fd9\u4e2a\u5b50\u95ee\u9898\u662f\u5982\u4f55\u88ab\u89e3\u51b3\u7684\u3002 \u9012\u5f52\u548c\u679a\u4e3e\u7684\u533a\u522b\u5728\u4e8e\uff1a\u679a\u4e3e\u662f\u6a2a\u5411\u5730\u628a\u95ee\u9898\u5212\u5206\uff0c\u7136\u540e\u4f9d\u6b21\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u800c\u9012\u5f52\u662f\u628a\u95ee\u9898\u9010\u7ea7\u5206\u89e3\uff0c\u662f\u7eb5\u5411\u7684\u62c6\u5206\u3002 \u9012\u5f52\u4e09\u8981\u7d20 \u00b6 \u5728\u7528\u9012\u5f52\u601d\u60f3\u89e3\u9898\u7684\u65f6\u5019\uff0c\u8981\u8003\u8651\u4e09\u4e2a\u8981\u7d20\u3002 \u9012\u5f52\u5f0f \u00b6 \u5982\u4f55\u5c06\u539f\u95ee\u9898\u5212\u5206\u4e3a\u5b50\u95ee\u9898\uff1f\u5982\u4f55\u79d1\u5b66\u5730\u8fdb\u884c\u9012\u5f52\uff1f \u9012\u5f52\u51fa\u53e3 \u00b6 \u7ec8\u6b62\u7684\u6761\u4ef6\u662f\u4ec0\u4e48\uff1f\u6362\u8a00\u4e4b\uff0c\u6700\u5c0f\u7684\u5b50\u95ee\u9898\u662f\u600e\u4e48\u6c42\u89e3\u7684\u3002 \u51fa\u53e3\u53ef\u4ee5\u4e0d\u6b62\u4e00\u4e2a\u3002 \u754c\u51fd\u6570 \u00b6 \u6211\u4eec\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u8868\u793a\u95ee\u9898\u89c4\u6a21\u53d8\u5316\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u4fdd\u8bc1\u9012\u5f52\u7684\u6761\u4ef6\u662f\u5728\u50cf\u51fa\u53e3\u6761\u4ef6\u9760\u62e2\u3002 \u9012\u5f52\u6a21\u677f \u00b6 1 2 3 4 int f ( \u4f20\u5165\u6570\u503c ) { if ( \u7ec8\u6b62\u6761\u4ef6 ) return \u6700\u5c0f\u5b50\u95ee\u9898\u89e3 ; return f ( \u7f29\u5c0f\u89c4\u6a21 ); } \u9012\u5f52\u4f18\u5316 \u00b6 \u5148\u6765\u4e00\u9053\u4f8b\u9898\uff1a \u4e09\u8fde\u51fb \u3002 \u8fd9\u9053\u9898\u6734\u7d20\u7684\u9012\u5f52\u5199\u6cd5\u53ea\u80fd\u5f97\u5230 25 \u5206\uff0c\u56e0\u4e3a\u9012\u5f52\u6b21\u6570\u592a\u591a\uff0c\u6240\u4ee5\u8d85\u65f6\u3002 \u600e\u4e48\u4f18\u5316\u5462\uff1f\u8be6\u89c1 \u641c\u7d22\u4f18\u5316 \u548c \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002 \u5206\u6cbb \u00b6 \u5206\u6cbb\u662f\u4e00\u79cd\u6781\u4e3a\u91cd\u8981\u7684\u601d\u60f3\u3002\u987e\u540d\u601d\u4e49\uff0c\u5206\u800c\u6cbb\u4e4b\uff0c\u5c31\u662f\u628a\u5927\u95ee\u9898\u5316\u5c0f\uff0c\u518d\u5404\u4e2a\u51fb\u7834\u7684\u8fc7\u7a0b\u3002 \u82f1\u6587\u540d\u662f divide and conquer. \u4f8b\u9898 \u6c42\u6570\u5217\u4e2d\u6709\u591a\u5c11\u4e2a\u9006\u5e8f\u5bf9\uff0c\u6240\u8c13\u9006\u5e8f\u5bf9\uff0c\u662f\u6ee1\u8db3 i < j i < j \u800c\u4e14 a[i] > a[j] a[i] > a[j] \u7684\u6570\u5bf9 (i, j) (i, j) \u7684\u4e2a\u6570\u3002 \u8003\u8651\u628a\u6570\u5217\u7b49\u5206\u6210\u4e24\u90e8\u5206\uff0c\u90a3\u4e48\u539f\u6570\u5217\u7684\u9006\u5e8f\u5bf9\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4e00\u79cd\u662f\u4e24\u4e2a\u6570\u5b8c\u5168\u5305\u542b\u5728\u67d0\u4e00\u4fa7\u7684\u5b50\u6570\u5217\u4e2d\uff0c\u53e6\u4e00\u79cd\u662f\u4e24\u4e2a\u6570\u4e00\u5de6\u4e00\u53f3\u88ab\u5206\u5f00\u4e86\u3002 \u4e0d\u96be\u53d1\u73b0\u524d\u8005\u53ea\u9700\u8981\u9012\u5f52\u5730\u6c42\u51fa\uff0c\u540e\u8005\u53ea\u9700\u8981\u5bf9\u4e8e\u5de6\u4fa7\u7684\u6bcf\u4e2a\u6570\uff0c\u7edf\u8ba1\u53f3\u4fa7\u6709\u591a\u5c11\u4e2a\u6bd4\u5b83\u5c0f\u7684\u3002","title":"\u9012\u5f52 & \u5206\u6cbb"},{"location":"basic/divide-and-conquer/#_1","text":"\u4ecb\u7ecd\u5206\u6cbb\u4e4b\u524d\uff0c\u9996\u5148\u8981\u5f04\u6e05\u695a\u9012\u5f52\u8fd9\u4e2a\u6982\u5ff5\u3002 \u9012\u5f52\u662f\u4ec0\u4e48\u5462\uff1f\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u8001\u548c\u5c1a\u7ed9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1a\u201c\u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u8001\u548c\u5c1a\u7ed9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1a\u2018\u4ece\u524d\u6709\u5ea7\u5c71......\u2019\u201d \u8fd9\u4e2a\u6545\u4e8b\u4e0e\u9012\u5f52\u7b97\u6cd5\u6709\u7740\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\u3002 \u9012\u5f52\u7684\u57fa\u672c\u601d\u60f3\u662f\u67d0\u4e2a\u51fd\u6570\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u8c03\u7528\u81ea\u8eab\uff0c\u8fd9\u6837\u5c31\u628a\u539f\u95ee\u9898\u7684\u6c42\u89e3\u8f6c\u6362\u4e3a\u8bb8\u591a\u6027\u8d28\u76f8\u540c\u4f46\u662f\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8\u5982\u4f55\u628a\u539f\u95ee\u9898\u5212\u5206\u6210\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u9700\u8981\u53bb\u7814\u7a76\u8fd9\u4e2a\u5b50\u95ee\u9898\u662f\u5982\u4f55\u88ab\u89e3\u51b3\u7684\u3002 \u9012\u5f52\u548c\u679a\u4e3e\u7684\u533a\u522b\u5728\u4e8e\uff1a\u679a\u4e3e\u662f\u6a2a\u5411\u5730\u628a\u95ee\u9898\u5212\u5206\uff0c\u7136\u540e\u4f9d\u6b21\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u800c\u9012\u5f52\u662f\u628a\u95ee\u9898\u9010\u7ea7\u5206\u89e3\uff0c\u662f\u7eb5\u5411\u7684\u62c6\u5206\u3002","title":"\u9012\u5f52"},{"location":"basic/divide-and-conquer/#_2","text":"\u5728\u7528\u9012\u5f52\u601d\u60f3\u89e3\u9898\u7684\u65f6\u5019\uff0c\u8981\u8003\u8651\u4e09\u4e2a\u8981\u7d20\u3002","title":"\u9012\u5f52\u4e09\u8981\u7d20"},{"location":"basic/divide-and-conquer/#_3","text":"\u5982\u4f55\u5c06\u539f\u95ee\u9898\u5212\u5206\u4e3a\u5b50\u95ee\u9898\uff1f\u5982\u4f55\u79d1\u5b66\u5730\u8fdb\u884c\u9012\u5f52\uff1f","title":"\u9012\u5f52\u5f0f"},{"location":"basic/divide-and-conquer/#_4","text":"\u7ec8\u6b62\u7684\u6761\u4ef6\u662f\u4ec0\u4e48\uff1f\u6362\u8a00\u4e4b\uff0c\u6700\u5c0f\u7684\u5b50\u95ee\u9898\u662f\u600e\u4e48\u6c42\u89e3\u7684\u3002 \u51fa\u53e3\u53ef\u4ee5\u4e0d\u6b62\u4e00\u4e2a\u3002","title":"\u9012\u5f52\u51fa\u53e3"},{"location":"basic/divide-and-conquer/#_5","text":"\u6211\u4eec\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u8868\u793a\u95ee\u9898\u89c4\u6a21\u53d8\u5316\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u4fdd\u8bc1\u9012\u5f52\u7684\u6761\u4ef6\u662f\u5728\u50cf\u51fa\u53e3\u6761\u4ef6\u9760\u62e2\u3002","title":"\u754c\u51fd\u6570"},{"location":"basic/divide-and-conquer/#_6","text":"1 2 3 4 int f ( \u4f20\u5165\u6570\u503c ) { if ( \u7ec8\u6b62\u6761\u4ef6 ) return \u6700\u5c0f\u5b50\u95ee\u9898\u89e3 ; return f ( \u7f29\u5c0f\u89c4\u6a21 ); }","title":"\u9012\u5f52\u6a21\u677f"},{"location":"basic/divide-and-conquer/#_7","text":"\u5148\u6765\u4e00\u9053\u4f8b\u9898\uff1a \u4e09\u8fde\u51fb \u3002 \u8fd9\u9053\u9898\u6734\u7d20\u7684\u9012\u5f52\u5199\u6cd5\u53ea\u80fd\u5f97\u5230 25 \u5206\uff0c\u56e0\u4e3a\u9012\u5f52\u6b21\u6570\u592a\u591a\uff0c\u6240\u4ee5\u8d85\u65f6\u3002 \u600e\u4e48\u4f18\u5316\u5462\uff1f\u8be6\u89c1 \u641c\u7d22\u4f18\u5316 \u548c \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002","title":"\u9012\u5f52\u4f18\u5316"},{"location":"basic/divide-and-conquer/#_8","text":"\u5206\u6cbb\u662f\u4e00\u79cd\u6781\u4e3a\u91cd\u8981\u7684\u601d\u60f3\u3002\u987e\u540d\u601d\u4e49\uff0c\u5206\u800c\u6cbb\u4e4b\uff0c\u5c31\u662f\u628a\u5927\u95ee\u9898\u5316\u5c0f\uff0c\u518d\u5404\u4e2a\u51fb\u7834\u7684\u8fc7\u7a0b\u3002 \u82f1\u6587\u540d\u662f divide and conquer. \u4f8b\u9898 \u6c42\u6570\u5217\u4e2d\u6709\u591a\u5c11\u4e2a\u9006\u5e8f\u5bf9\uff0c\u6240\u8c13\u9006\u5e8f\u5bf9\uff0c\u662f\u6ee1\u8db3 i < j i < j \u800c\u4e14 a[i] > a[j] a[i] > a[j] \u7684\u6570\u5bf9 (i, j) (i, j) \u7684\u4e2a\u6570\u3002 \u8003\u8651\u628a\u6570\u5217\u7b49\u5206\u6210\u4e24\u90e8\u5206\uff0c\u90a3\u4e48\u539f\u6570\u5217\u7684\u9006\u5e8f\u5bf9\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4e00\u79cd\u662f\u4e24\u4e2a\u6570\u5b8c\u5168\u5305\u542b\u5728\u67d0\u4e00\u4fa7\u7684\u5b50\u6570\u5217\u4e2d\uff0c\u53e6\u4e00\u79cd\u662f\u4e24\u4e2a\u6570\u4e00\u5de6\u4e00\u53f3\u88ab\u5206\u5f00\u4e86\u3002 \u4e0d\u96be\u53d1\u73b0\u524d\u8005\u53ea\u9700\u8981\u9012\u5f52\u5730\u6c42\u51fa\uff0c\u540e\u8005\u53ea\u9700\u8981\u5bf9\u4e8e\u5de6\u4fa7\u7684\u6bcf\u4e2a\u6570\uff0c\u7edf\u8ba1\u53f3\u4fa7\u6709\u591a\u5c11\u4e2a\u6bd4\u5b83\u5c0f\u7684\u3002","title":"\u5206\u6cbb"},{"location":"basic/enumerate/","text":"\u679a\u4e3e\u662f\u57fa\u4e8e\u5df2\u6709\u77e5\u8bc6\u6765\u731c\u6d4b\u7b54\u6848\u7684\u4e00\u79cd\u95ee\u9898\u6c42\u89e3\u7b56\u7565\u3002 \u4f8b\u9898 \u6c42\u5c0f\u4e8e N \u7684\u6700\u5927\u7d20\u6570 \u627e\u4e0d\u5230\u5408\u9002\u7684\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f\u6765\u76f4\u63a5\u8ba1\u7b97\u7b54\u6848\uff0c\u4e0d\u59a8\u4f9d\u6b21\u5c1d\u8bd5\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7b54\u6848\u3002 \u5982\u679c\u6211\u4eec\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u5c0f\u4e8e N N \u7684\u6570\uff0c\u90a3\u4e48\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u7d20\u6570\u3002 \u6ce8\u610f\u5230\u7d20\u6570\u7684\u6027\u8d28\u8981\u6c42\u4e0d\u80fd\u88ab 1 1 \u548c\u5b83\u672c\u8eab\u4e4b\u5916\u7684\u6570\u6574\u9664\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u5224\u65ad\u3002 \u679a\u4e3e\u7684\u601d\u60f3\u662f\u4e0d\u65ad\u5730\u731c\u6d4b\uff0c\u4ece\u53ef\u80fd\u7684\u96c6\u5408\u4e2d\u4e00\u4e00\u5c1d\u8bd5\uff0c\u7136\u540e\u518d\u5224\u65ad\u9898\u76ee\u7684\u6761\u4ef6\u662f\u5426\u6210\u7acb\u3002 \u7ed9\u51fa\u89e3\u7a7a\u95f4 \u00b6 \u5efa\u7acb\u7b80\u6d01\u7684\u6570\u5b66\u6a21\u578b\u3002 \u679a\u4e3e\u7684\u65f6\u5019\u8981\u60f3\u6e05\u695a\u53ef\u80fd\u7684\u60c5\u51b5\u662f\u4ec0\u4e48\uff0c\u8981\u679a\u4e3e\u54ea\u4e9b\u8981\u7d20\uff1f \u51cf\u5c11\u679a\u4e3e\u7684\u7a7a\u95f4 \u00b6 \u679a\u4e3e\u7684\u8303\u56f4\u662f\u4ec0\u4e48\uff1f\u662f\u6240\u6709\u7684\u5185\u5bb9\u90fd\u9700\u8981\u679a\u4e3e\u5417\uff1f \u5728\u7528\u679a\u4e3e\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u60f3\u6e05\u695a\u8fd9\u4e24\u4ef6\u4e8b\uff0c\u5426\u5219\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u65f6\u95f4\u5f00\u9500\u3002 \u4f8b\u9898 \u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u4e92\u4e0d\u76f8\u540c\uff0c\u6c42\u5176\u4e2d\u548c\u4e3a 0 0 \u7684\u6570\u5bf9\u7684\u4e2a\u6570 \u679a\u4e3e\u4e24\u4e2a\u6570\u7684\u4ee3\u7801\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u5199\u51fa\u6765\u3002 1 2 3 for ( int i = 0 ; i < n ; ++ i ) for ( int j = 0 ; j < n ; ++ j ) if ( a [ i ] + a [ j ] == 0 ) ++ ans ; \u6211\u4eec\u6765\u770b\u770b\u679a\u4e3e\u7684\u8303\u56f4\u5982\u4f55\u4f18\u5316\u3002\u539f\u95ee\u9898\u7684\u7b54\u6848\u7531\u4e24\u90e8\u5206\u6784\u6210\uff0c\u4e24\u4e2a\u6570\u76f8\u7b49\u7684\u60c5\u51b5\u548c\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\u3002\u76f8\u7b49\u7684\u60c5\u51b5\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6570\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u5408\u6cd5\u3002\u81f3\u4e8e\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u7531\u4e8e\u9898\u4e2d\u6ca1\u8981\u6c42\u6570\u5bf9\u662f\u6709\u5e8f\u7684\uff0c\u7b54\u6848\u5c31\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u7684\u4e24\u500d\uff08\u8003\u8651\u5982\u679c (a, b) \u662f\u7b54\u6848\uff0c\u90a3\u4e48 (b, a) \u4e5f\u662f\u7b54\u6848\uff09\u3002\u6211\u4eec\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u53ea\u9700\u7edf\u8ba1\u4eba\u4e3a\u8981\u6c42\u6709\u987a\u5e8f\u4e4b\u540e\u7684\u7b54\u6848\uff0c\u6700\u540e\u518d\u4e58\u4e0a 2 2 \u5c31\u597d\u4e86\u3002 \u6211\u4eec\u4e0d\u59a8\u8981\u6c42\u7b2c\u4e00\u4e2a\u6570\u8981\u51fa\u73b0\u5728\u9760\u524d\u7684\u4f4d\u7f6e\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 0 ; i < n ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) if ( a [ i ] + a [ j ] == 0 ) ++ ans ; \u4e0d\u96be\u53d1\u73b0\u8fd9\u91cc\u5df2\u7ecf\u51cf\u5c11\u4e86 j j \u7684\u679a\u4e3e\u8303\u56f4\uff0c\u51cf\u5c11\u4e86\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u5f00\u9500\u3002 \u7136\u800c\u8fd9\u5e76\u4e0d\u662f\u6700\u4f18\u7684\u7ed3\u679c\u3002 \u4e24\u4e2a\u6570\u662f\u5426\u90fd\u4e00\u5b9a\u8981\u679a\u4e3e\u51fa\u6765\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u679a\u4e3e\u5176\u4e2d\u4e00\u4e2a\u6570\u4e4b\u540e\uff0c\u9898\u76ee\u7684\u6761\u4ef6\u5df2\u7ecf\u5e2e\u6211\u4eec\u786e\u5b9a\u4e86\u5176\u4ed6\u7684\u8981\u7d20\uff08\u53e6\u4e00\u4e2a\u6570\uff09\uff0c\u5982\u679c\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u76f4\u63a5\u5224\u65ad\u9898\u76ee\u8981\u6c42\u7684\u90a3\u4e2a\u6570\u662f\u5426\u5b58\u5728\uff0c\u5c31\u53ef\u4ee5\u7701\u6389\u679a\u4e3e\u540e\u4e00\u4e2a\u6570\u7684\u65f6\u95f4\u4e86\u3002 1 2 3 4 5 6 7 8 9 // \u8981\u6c42 a \u6570\u7ec4\u4e2d\u7684\u6570\u7684\u7edd\u5bf9\u503c\u90fd\u5c0f\u4e8e MAXN bool met [ MAXN * 2 ]; // \u521d\u59cb\u5316 met \u6570\u7ec4\u4e3a 0\uff1b memset ( met , 0 , sizeof ( met )); for ( int i = 0 ; i < n ; ++ i ) { if ( met [ a [ i ] + MAXN ]) ++ ans ; // \u4e3a\u4e86\u907f\u514d\u8d1f\u6570\u4e0b\u6807 met [ a [ i ] + MAXN ] = 1 ; } \u9009\u62e9\u5408\u9002\u7684\u679a\u4e3e\u987a\u5e8f \u00b6 \u6bd4\u5982\u7b2c\u4e00\u4e2a\u4f8b\u9898\u4e2d\u8981\u6c42\u7684\u662f\u6700\u5927\u7684\u7b26\u5408\u6761\u4ef6\u7684\u7d20\u6570\u3002\u81ea\u7136\u662f\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bd4\u8f83\u5408\u9002\u3002","title":"\u679a\u4e3e"},{"location":"basic/enumerate/#_1","text":"\u5efa\u7acb\u7b80\u6d01\u7684\u6570\u5b66\u6a21\u578b\u3002 \u679a\u4e3e\u7684\u65f6\u5019\u8981\u60f3\u6e05\u695a\u53ef\u80fd\u7684\u60c5\u51b5\u662f\u4ec0\u4e48\uff0c\u8981\u679a\u4e3e\u54ea\u4e9b\u8981\u7d20\uff1f","title":"\u7ed9\u51fa\u89e3\u7a7a\u95f4"},{"location":"basic/enumerate/#_2","text":"\u679a\u4e3e\u7684\u8303\u56f4\u662f\u4ec0\u4e48\uff1f\u662f\u6240\u6709\u7684\u5185\u5bb9\u90fd\u9700\u8981\u679a\u4e3e\u5417\uff1f \u5728\u7528\u679a\u4e3e\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u60f3\u6e05\u695a\u8fd9\u4e24\u4ef6\u4e8b\uff0c\u5426\u5219\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u65f6\u95f4\u5f00\u9500\u3002 \u4f8b\u9898 \u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u4e92\u4e0d\u76f8\u540c\uff0c\u6c42\u5176\u4e2d\u548c\u4e3a 0 0 \u7684\u6570\u5bf9\u7684\u4e2a\u6570 \u679a\u4e3e\u4e24\u4e2a\u6570\u7684\u4ee3\u7801\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u5199\u51fa\u6765\u3002 1 2 3 for ( int i = 0 ; i < n ; ++ i ) for ( int j = 0 ; j < n ; ++ j ) if ( a [ i ] + a [ j ] == 0 ) ++ ans ; \u6211\u4eec\u6765\u770b\u770b\u679a\u4e3e\u7684\u8303\u56f4\u5982\u4f55\u4f18\u5316\u3002\u539f\u95ee\u9898\u7684\u7b54\u6848\u7531\u4e24\u90e8\u5206\u6784\u6210\uff0c\u4e24\u4e2a\u6570\u76f8\u7b49\u7684\u60c5\u51b5\u548c\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\u3002\u76f8\u7b49\u7684\u60c5\u51b5\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6570\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u5408\u6cd5\u3002\u81f3\u4e8e\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u7531\u4e8e\u9898\u4e2d\u6ca1\u8981\u6c42\u6570\u5bf9\u662f\u6709\u5e8f\u7684\uff0c\u7b54\u6848\u5c31\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u7684\u4e24\u500d\uff08\u8003\u8651\u5982\u679c (a, b) \u662f\u7b54\u6848\uff0c\u90a3\u4e48 (b, a) \u4e5f\u662f\u7b54\u6848\uff09\u3002\u6211\u4eec\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u53ea\u9700\u7edf\u8ba1\u4eba\u4e3a\u8981\u6c42\u6709\u987a\u5e8f\u4e4b\u540e\u7684\u7b54\u6848\uff0c\u6700\u540e\u518d\u4e58\u4e0a 2 2 \u5c31\u597d\u4e86\u3002 \u6211\u4eec\u4e0d\u59a8\u8981\u6c42\u7b2c\u4e00\u4e2a\u6570\u8981\u51fa\u73b0\u5728\u9760\u524d\u7684\u4f4d\u7f6e\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 0 ; i < n ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) if ( a [ i ] + a [ j ] == 0 ) ++ ans ; \u4e0d\u96be\u53d1\u73b0\u8fd9\u91cc\u5df2\u7ecf\u51cf\u5c11\u4e86 j j \u7684\u679a\u4e3e\u8303\u56f4\uff0c\u51cf\u5c11\u4e86\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u5f00\u9500\u3002 \u7136\u800c\u8fd9\u5e76\u4e0d\u662f\u6700\u4f18\u7684\u7ed3\u679c\u3002 \u4e24\u4e2a\u6570\u662f\u5426\u90fd\u4e00\u5b9a\u8981\u679a\u4e3e\u51fa\u6765\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u679a\u4e3e\u5176\u4e2d\u4e00\u4e2a\u6570\u4e4b\u540e\uff0c\u9898\u76ee\u7684\u6761\u4ef6\u5df2\u7ecf\u5e2e\u6211\u4eec\u786e\u5b9a\u4e86\u5176\u4ed6\u7684\u8981\u7d20\uff08\u53e6\u4e00\u4e2a\u6570\uff09\uff0c\u5982\u679c\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u76f4\u63a5\u5224\u65ad\u9898\u76ee\u8981\u6c42\u7684\u90a3\u4e2a\u6570\u662f\u5426\u5b58\u5728\uff0c\u5c31\u53ef\u4ee5\u7701\u6389\u679a\u4e3e\u540e\u4e00\u4e2a\u6570\u7684\u65f6\u95f4\u4e86\u3002 1 2 3 4 5 6 7 8 9 // \u8981\u6c42 a \u6570\u7ec4\u4e2d\u7684\u6570\u7684\u7edd\u5bf9\u503c\u90fd\u5c0f\u4e8e MAXN bool met [ MAXN * 2 ]; // \u521d\u59cb\u5316 met \u6570\u7ec4\u4e3a 0\uff1b memset ( met , 0 , sizeof ( met )); for ( int i = 0 ; i < n ; ++ i ) { if ( met [ a [ i ] + MAXN ]) ++ ans ; // \u4e3a\u4e86\u907f\u514d\u8d1f\u6570\u4e0b\u6807 met [ a [ i ] + MAXN ] = 1 ; }","title":"\u51cf\u5c11\u679a\u4e3e\u7684\u7a7a\u95f4"},{"location":"basic/enumerate/#_3","text":"\u6bd4\u5982\u7b2c\u4e00\u4e2a\u4f8b\u9898\u4e2d\u8981\u6c42\u7684\u662f\u6700\u5927\u7684\u7b26\u5408\u6761\u4ef6\u7684\u7d20\u6570\u3002\u81ea\u7136\u662f\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bd4\u8f83\u5408\u9002\u3002","title":"\u9009\u62e9\u5408\u9002\u7684\u679a\u4e3e\u987a\u5e8f"},{"location":"basic/expression/","text":"\u8868\u8fbe\u5f0f\u6c42\u503c\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e00\u822c\u662f\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u8868\u8fbe\u5f0f\uff0c\u8981\u6c42\u8f93\u51fa\u5b83\u7684\u503c\u3002\u5f53\u7136\u4e5f\u6709\u53d8\u79cd\u6bd4\u5982\u8868\u8fbe\u5f0f\u4e2d\u662f\u5426\u5305\u542b\u62ec\u53f7\uff0c\u6307\u6570\u8fd0\u7b97\uff0c\u542b\u591a\u5c11\u53d8\u91cf\uff0c\u5224\u65ad\u591a\u4e2a\u8868\u8fbe\u5f0f\u662f\u5426\u7b49\u4ef7\uff0c\u7b49\u7b49\u3002 \u5176\u4e2d\u5224\u65ad\u8868\u8fbe\u5f0f\u7b49\u4ef7\u7684\u90e8\u5206\u4f7f\u7528\u4e86\u62c9\u683c\u6717\u65e5\u63d2\u503c\u6cd5\u7b49\u6570\u5b66\u5de5\u5177\uff0c\u5728\u6b64\u6682\u4e0d\u8fdb\u884c\u5c55\u5f00\u3002 \u4e00\u822c\u7684\u601d\u8def\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u9012\u5f52\u4e00\u79cd\u975e\u9012\u5f52\u3002 \u9012\u5f52 \u00b6 \u9012\u5f52\u7684\u65b9\u6cd5\u662f\u628a\u8868\u8fbe\u5f0f\u62c6\u5206\u6210\u5982\u56fe\u6240\u793a\u7684\u8868\u8fbe\u5f0f\u6811\uff0c\u7136\u540e\u5728\u6811\u7ed3\u6784\u4e0a\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u8fd0\u7b97\u3002 \u8868\u8fbe\u5f0f\u6811\u4e0a\u8fdb\u884c \u6811\u7684\u904d\u5386 \u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f \u524d\u5e8f\u904d\u5386\u5bf9\u5e94\u524d\u7f00\u8868\u8fbe\u5f0f\uff08\u6ce2\u5170\u5f0f\uff09 \u4e2d\u5e8f\u904d\u5386\u5bf9\u5e94\u4e2d\u7f00\u8868\u8fbe\u5f0f \u540e\u5e8f\u904d\u5386\u5bf9\u5e94\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u9006\u6ce2\u5170\u5f0f\uff09 \u975e\u9012\u5f52 \u00b6 \u975e\u9012\u5f52\u7684\u65b9\u6cd5\u662f\u5b9a\u4e49\u4e24\u4e2a \u6808 \u6765\u5206\u522b\u5b58\u50a8\u8fd0\u7b97\u7b26\u548c\u8fd0\u7b97\u6570\u3002\u6bcf\u5f53\u9047\u5230\u4e00\u4e2a\u6570\u76f4\u63a5\u653e\u8fdb\u6570\u7684\u6808\uff1b\u6bcf\u5f53\u9047\u5230\u4e00\u4e2a\u64cd\u4f5c\u7b26\u65f6\uff0c\u8981\u67e5\u627e\u4e4b\u524d\u8fd0\u7b97\u7b26\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u6309\u7167\u9884\u5148\u5b9a\u4e49\u597d\u7684\u4f18\u5148\u7ea7\u6765\u8fdb\u884c\u9002\u5f53\u7684\u5f39\u51fa\u64cd\u4f5c\uff08\u5f39\u51fa\u7684\u540c\u65f6\u6c42\u51fa\u5bf9\u5e94\u7684\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff09\u3002 \u6211\u4eec\u8981\u77e5\u9053\uff1a\u7b97\u672f\u8868\u8fbe\u5f0f\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u524d\u7f00\u8868\u8fbe\u5f0f\u3001\u4e2d\u7f00\u8868\u8fbe\u5f0f\u3001\u540e\u7f00\u8868\u8fbe\u5f0f\u3002\u5176\u4e2d\uff0c\u4e2d\u7f00\u8868\u8fbe\u5f0f\u662f\u6211\u4eec\u65e5\u5e38\u751f\u6d3b\u4e2d\u6700\u5e38\u7528\u7684\u8868\u8fbe\u5f0f\uff1b\u540e\u7f00\u8868\u8fbe\u5f0f\u662f\u8ba1\u7b97\u673a\u6700\u5bb9\u6613\u7406\u89e3\u7684\u8868\u8fbe\u5f0f\u3002\u4e3a\u4ec0\u4e48\u8bf4\u540e\u7f00\u8868\u8fbe\u5f0f\u6700\u5bb9\u6613\u88ab\u8ba1\u7b97\u673a\u7406\u89e3\u5462\uff1f\u56e0\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u4e0d\u9700\u8981\u62ec\u53f7\u8868\u793a\uff0c\u5b83\u7684\u8fd0\u7b97\u987a\u5e8f\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5728\u540e\u7f00\u8868\u8fbe\u5f0f 3 2 * 1 - 3 2 * 1 - \u4e2d\uff0c\u9996\u5148\u8ba1\u7b97 3 \\times 2 = 6 3 \\times 2 = 6 \uff08\u4f7f\u7528\u6700\u540e\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5373\u6808\u9876\u8fd0\u7b97\u7b26\uff09\uff0c\u7136\u540e\u8ba1\u7b97 6 - 1 = 5 6 - 1 = 5 \u3002\u53ef\u4ee5\u770b\u5230\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u8981 \u7ef4\u62a4\u4e00\u4e2a\u6570\u5b57\u6808\uff0c\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5c31\u53d6\u51fa\u4e24\u4e2a\u6808\u9876\u5143\u7d20\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u91cd\u65b0\u538b\u5165\u6808\u4e2d \u3002\u6700\u540e\uff0c\u6808\u4e2d\u552f\u4e00\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u6539\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u7ed3\u679c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u6240\u4ee5\u8bf4\uff0c\u5bf9\u4e8e\u666e\u901a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u518d\u8fdb\u884c\u8ba1\u7b97\u3002\u8f6c\u6362\u65b9\u6cd5\u4e5f\u5341\u5206\u7b80\u5355\u3002\u53ea\u8981\u5efa\u7acb\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u8fd0\u7b97\u7b26\u7684\u6808\uff0c\u626b\u63cf\u8be5\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff1a \u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u76f4\u63a5\u5c06\u8be5\u6570\u5b57\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u4ee5\u4e0b\u90e8\u5206\u7528\u300c\u8f93\u51fa\u300d\u8868\u793a\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff09 \u5982\u679c\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5165\u6808 \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u4e0d\u65ad\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u81f3\u9047\u5230\u5de6\u62ec\u53f7\u3002\uff08\u5de6\u62ec\u53f7\u51fa\u6808\uff0c\u4f46\u4e0d\u8f93\u51fa\uff09 \u5982\u679c\u9047\u5230\u5176\u4ed6\u8fd0\u7b97\u7b26\uff0c\u4e0d\u65ad\u53bb\u9664\u6240\u6709\u8fd0\u7b97\u4f18\u5148\u7ea7\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\u3002\u6700\u540e\uff0c\u65b0\u7684\u7b26\u53f7\u5165\u6808\u3002 \u628a\u6808\u4e2d\u5269\u4e0b\u7684\u7b26\u53f7\u4f9d\u6b21\u8f93\u51fa\uff0c\u8868\u8fbe\u5f0f\u8f6c\u6362\u7ed3\u675f\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n) O(n) . \u793a\u4f8b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // \u4e0b\u9762\u4ee3\u7801\u6458\u81ea\u7b14\u8005 NOIP2005 \u7b49\u4ef7\u8868\u8fbe\u5f0f std :: string convert ( const std :: string & s ) { // \u628a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f std :: stack < char > oper ; std :: stringstream ss ; ss << s ; std :: string t , tmp ; while ( ss >> tmp ) { if ( isdigit ( tmp [ 0 ])) t += tmp + \" \" ; // 1. \u5982\u679c\u9047\u5230\u4e00\u4e2a\u6570\uff0c\u8f93\u51fa\u8be5\u6570 else if ( tmp [ 0 ] == '(' ) oper . push ( tmp [ 0 ]); // 2. \u5982\u679c\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u628a\u5de6\u62ec\u53f7\u5165\u6808 else if ( tmp [ 0 ] == ' ) ' ) { // 3. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c while ( ! oper . empty () && oper . top () != '(' ) t += std :: string ( 1 , oper . top ()) + \" \" , oper . pop (); // \u4e0d\u65ad\u53d6\u51fa\u6808\u9876\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u6808\u9876\u4e3a\u5de6\u62ec\u53f7\uff0c oper . pop (); // \u7136\u540e\u628a\u5de6\u62ec\u53f7\u51fa\u6808 } else { // 4. \u5982\u679c\u9047\u5230\u8fd0\u7b97\u7b26 while ( ! oper . empty () && level [ oper . top ()] >= level [ tmp [ 0 ]]) t += std :: string ( 1 , oper . top ()) + \" \" , oper . pop (); // \u53ea\u8981\u6808\u9876\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u4e0d\u4f4e\u4e8e\u65b0\u7b26\u53f7\uff0c\u5c31\u4e0d\u65ad\u53d6\u51fa\u6808\u9876\u5e76\u8f93\u51fa oper . push ( tmp [ 0 ]); // \u6700\u540e\u628a\u65b0\u7b26\u53f7\u8fdb\u6808 } } while ( ! oper . empty ()) t += std :: string ( 1 , oper . top ()) + \" \" , oper . pop (); return t ; } int calc ( const std :: string & s ) { // \u8ba1\u7b97\u8f6c\u6362\u597d\u7684\u540e\u7f00\u8868\u8fbe\u5f0f std :: stack < int > num ; std :: stringstream ss ; ss << s ; std :: string t , tmp ; while ( ss >> tmp ) { if ( isdigit ( tmp [ 0 ])) num . push ( stoi ( tmp )); else { int b , a ; // \u53d6\u51fa\u6808\u9876\u5143\u7d20\uff0c\u6ce8\u610f\u987a\u5e8f if ( ! num . empty ()) b = num . top (); num . pop (); if ( ! num . empty ()) a = num . top (); num . pop (); if ( tmp [ 0 ] == '+' ) num . push ( a + b ); if ( tmp [ 0 ] == '-' ) num . push ( a - b ); if ( tmp [ 0 ] == '*' ) num . push ( a * b ); if ( tmp [ 0 ] == '^' ) num . push ( qpow ( a , b )); } } return num . top (); } \u4e60\u9898 \u00b6 \u8868\u8fbe\u5f0f\u6c42\u503c \uff08NOIP2013\uff09 \u540e\u7f00\u8868\u8fbe\u5f0f Transform the Expression","title":"\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"basic/expression/#_1","text":"\u9012\u5f52\u7684\u65b9\u6cd5\u662f\u628a\u8868\u8fbe\u5f0f\u62c6\u5206\u6210\u5982\u56fe\u6240\u793a\u7684\u8868\u8fbe\u5f0f\u6811\uff0c\u7136\u540e\u5728\u6811\u7ed3\u6784\u4e0a\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u8fd0\u7b97\u3002 \u8868\u8fbe\u5f0f\u6811\u4e0a\u8fdb\u884c \u6811\u7684\u904d\u5386 \u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f \u524d\u5e8f\u904d\u5386\u5bf9\u5e94\u524d\u7f00\u8868\u8fbe\u5f0f\uff08\u6ce2\u5170\u5f0f\uff09 \u4e2d\u5e8f\u904d\u5386\u5bf9\u5e94\u4e2d\u7f00\u8868\u8fbe\u5f0f \u540e\u5e8f\u904d\u5386\u5bf9\u5e94\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u9006\u6ce2\u5170\u5f0f\uff09","title":"\u9012\u5f52"},{"location":"basic/expression/#_2","text":"\u975e\u9012\u5f52\u7684\u65b9\u6cd5\u662f\u5b9a\u4e49\u4e24\u4e2a \u6808 \u6765\u5206\u522b\u5b58\u50a8\u8fd0\u7b97\u7b26\u548c\u8fd0\u7b97\u6570\u3002\u6bcf\u5f53\u9047\u5230\u4e00\u4e2a\u6570\u76f4\u63a5\u653e\u8fdb\u6570\u7684\u6808\uff1b\u6bcf\u5f53\u9047\u5230\u4e00\u4e2a\u64cd\u4f5c\u7b26\u65f6\uff0c\u8981\u67e5\u627e\u4e4b\u524d\u8fd0\u7b97\u7b26\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u6309\u7167\u9884\u5148\u5b9a\u4e49\u597d\u7684\u4f18\u5148\u7ea7\u6765\u8fdb\u884c\u9002\u5f53\u7684\u5f39\u51fa\u64cd\u4f5c\uff08\u5f39\u51fa\u7684\u540c\u65f6\u6c42\u51fa\u5bf9\u5e94\u7684\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff09\u3002 \u6211\u4eec\u8981\u77e5\u9053\uff1a\u7b97\u672f\u8868\u8fbe\u5f0f\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u524d\u7f00\u8868\u8fbe\u5f0f\u3001\u4e2d\u7f00\u8868\u8fbe\u5f0f\u3001\u540e\u7f00\u8868\u8fbe\u5f0f\u3002\u5176\u4e2d\uff0c\u4e2d\u7f00\u8868\u8fbe\u5f0f\u662f\u6211\u4eec\u65e5\u5e38\u751f\u6d3b\u4e2d\u6700\u5e38\u7528\u7684\u8868\u8fbe\u5f0f\uff1b\u540e\u7f00\u8868\u8fbe\u5f0f\u662f\u8ba1\u7b97\u673a\u6700\u5bb9\u6613\u7406\u89e3\u7684\u8868\u8fbe\u5f0f\u3002\u4e3a\u4ec0\u4e48\u8bf4\u540e\u7f00\u8868\u8fbe\u5f0f\u6700\u5bb9\u6613\u88ab\u8ba1\u7b97\u673a\u7406\u89e3\u5462\uff1f\u56e0\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u4e0d\u9700\u8981\u62ec\u53f7\u8868\u793a\uff0c\u5b83\u7684\u8fd0\u7b97\u987a\u5e8f\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5728\u540e\u7f00\u8868\u8fbe\u5f0f 3 2 * 1 - 3 2 * 1 - \u4e2d\uff0c\u9996\u5148\u8ba1\u7b97 3 \\times 2 = 6 3 \\times 2 = 6 \uff08\u4f7f\u7528\u6700\u540e\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5373\u6808\u9876\u8fd0\u7b97\u7b26\uff09\uff0c\u7136\u540e\u8ba1\u7b97 6 - 1 = 5 6 - 1 = 5 \u3002\u53ef\u4ee5\u770b\u5230\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u8981 \u7ef4\u62a4\u4e00\u4e2a\u6570\u5b57\u6808\uff0c\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5c31\u53d6\u51fa\u4e24\u4e2a\u6808\u9876\u5143\u7d20\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u91cd\u65b0\u538b\u5165\u6808\u4e2d \u3002\u6700\u540e\uff0c\u6808\u4e2d\u552f\u4e00\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u6539\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u7ed3\u679c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u6240\u4ee5\u8bf4\uff0c\u5bf9\u4e8e\u666e\u901a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u518d\u8fdb\u884c\u8ba1\u7b97\u3002\u8f6c\u6362\u65b9\u6cd5\u4e5f\u5341\u5206\u7b80\u5355\u3002\u53ea\u8981\u5efa\u7acb\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u8fd0\u7b97\u7b26\u7684\u6808\uff0c\u626b\u63cf\u8be5\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff1a \u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u76f4\u63a5\u5c06\u8be5\u6570\u5b57\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u4ee5\u4e0b\u90e8\u5206\u7528\u300c\u8f93\u51fa\u300d\u8868\u793a\u8f93\u51fa\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff09 \u5982\u679c\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5165\u6808 \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u4e0d\u65ad\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u81f3\u9047\u5230\u5de6\u62ec\u53f7\u3002\uff08\u5de6\u62ec\u53f7\u51fa\u6808\uff0c\u4f46\u4e0d\u8f93\u51fa\uff09 \u5982\u679c\u9047\u5230\u5176\u4ed6\u8fd0\u7b97\u7b26\uff0c\u4e0d\u65ad\u53bb\u9664\u6240\u6709\u8fd0\u7b97\u4f18\u5148\u7ea7\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\u3002\u6700\u540e\uff0c\u65b0\u7684\u7b26\u53f7\u5165\u6808\u3002 \u628a\u6808\u4e2d\u5269\u4e0b\u7684\u7b26\u53f7\u4f9d\u6b21\u8f93\u51fa\uff0c\u8868\u8fbe\u5f0f\u8f6c\u6362\u7ed3\u675f\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n) O(n) . \u793a\u4f8b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // \u4e0b\u9762\u4ee3\u7801\u6458\u81ea\u7b14\u8005 NOIP2005 \u7b49\u4ef7\u8868\u8fbe\u5f0f std :: string convert ( const std :: string & s ) { // \u628a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f std :: stack < char > oper ; std :: stringstream ss ; ss << s ; std :: string t , tmp ; while ( ss >> tmp ) { if ( isdigit ( tmp [ 0 ])) t += tmp + \" \" ; // 1. \u5982\u679c\u9047\u5230\u4e00\u4e2a\u6570\uff0c\u8f93\u51fa\u8be5\u6570 else if ( tmp [ 0 ] == '(' ) oper . push ( tmp [ 0 ]); // 2. \u5982\u679c\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u628a\u5de6\u62ec\u53f7\u5165\u6808 else if ( tmp [ 0 ] == ' ) ' ) { // 3. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c while ( ! oper . empty () && oper . top () != '(' ) t += std :: string ( 1 , oper . top ()) + \" \" , oper . pop (); // \u4e0d\u65ad\u53d6\u51fa\u6808\u9876\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u6808\u9876\u4e3a\u5de6\u62ec\u53f7\uff0c oper . pop (); // \u7136\u540e\u628a\u5de6\u62ec\u53f7\u51fa\u6808 } else { // 4. \u5982\u679c\u9047\u5230\u8fd0\u7b97\u7b26 while ( ! oper . empty () && level [ oper . top ()] >= level [ tmp [ 0 ]]) t += std :: string ( 1 , oper . top ()) + \" \" , oper . pop (); // \u53ea\u8981\u6808\u9876\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u4e0d\u4f4e\u4e8e\u65b0\u7b26\u53f7\uff0c\u5c31\u4e0d\u65ad\u53d6\u51fa\u6808\u9876\u5e76\u8f93\u51fa oper . push ( tmp [ 0 ]); // \u6700\u540e\u628a\u65b0\u7b26\u53f7\u8fdb\u6808 } } while ( ! oper . empty ()) t += std :: string ( 1 , oper . top ()) + \" \" , oper . pop (); return t ; } int calc ( const std :: string & s ) { // \u8ba1\u7b97\u8f6c\u6362\u597d\u7684\u540e\u7f00\u8868\u8fbe\u5f0f std :: stack < int > num ; std :: stringstream ss ; ss << s ; std :: string t , tmp ; while ( ss >> tmp ) { if ( isdigit ( tmp [ 0 ])) num . push ( stoi ( tmp )); else { int b , a ; // \u53d6\u51fa\u6808\u9876\u5143\u7d20\uff0c\u6ce8\u610f\u987a\u5e8f if ( ! num . empty ()) b = num . top (); num . pop (); if ( ! num . empty ()) a = num . top (); num . pop (); if ( tmp [ 0 ] == '+' ) num . push ( a + b ); if ( tmp [ 0 ] == '-' ) num . push ( a - b ); if ( tmp [ 0 ] == '*' ) num . push ( a * b ); if ( tmp [ 0 ] == '^' ) num . push ( qpow ( a , b )); } } return num . top (); }","title":"\u975e\u9012\u5f52"},{"location":"basic/expression/#_3","text":"\u8868\u8fbe\u5f0f\u6c42\u503c \uff08NOIP2013\uff09 \u540e\u7f00\u8868\u8fbe\u5f0f Transform the Expression","title":"\u4e60\u9898"},{"location":"basic/file-operation/","text":"\u6587\u4ef6\u7684\u6982\u5ff5 \u00b6 \u6587\u4ef6\u662f\u6839\u636e\u7279\u5b9a\u7684\u76ee\u7684\u800c\u6536\u96c6\u5728\u4e00\u8d77\u7684\u6709\u5173\u6570\u636e\u7684\u96c6\u5408\u3002C/C++ \u628a\u6bcf\u4e00\u4e2a\u6587\u4ef6\u90fd\u770b\u6210\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u5b57\u8282\u6d41\uff0c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u662f\u4ee5 \u6587\u4ef6\u7ed3\u675f\u6807\u5fd7 \uff08EOF\uff09\u7ed3\u675f\uff0c\u5982\u679c\u8981\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6\uff0c\u7a0b\u5e8f\u5e94\u8be5\u9996\u5148\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u6bcf\u5f53\u4e00\u4e2a\u6587\u4ef6\u88ab\u6253\u5f00\u540e\uff08\u8bf7\u8bb0\u5f97\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\uff09\uff0c\u8be5\u6587\u4ef6\u5c31\u548c\u4e00\u4e2a\u6d41\u5173\u8054\u8d77\u6765\uff0c\u8fd9\u91cc\u7684\u6d41\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217\u3002 C/C++ \u5c06\u6587\u4ef6\u5206\u4e3a\u6587\u672c\u6587\u4ef6\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u6587\u672c\u6587\u4ef6\u5c31\u662f\u7b80\u5355\u7684\u6587\u672c\u6587\u4ef6\uff08\u91cd\u70b9\uff09\uff0c\u53e6\u5916\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c31\u662f\u7279\u6b8a\u683c\u5f0f\u7684\u6587\u4ef6\u6216\u8005\u53ef\u6267\u884c\u4ee3\u7801\u6587\u4ef6\u7b49\u3002 \u6587\u4ef6\u7684\u64cd\u4f5c\u6b65\u9aa4 \u00b6 1\u3001\u6253\u5f00\u6587\u4ef6\uff0c\u5c06\u6587\u4ef6\u6307\u9488\u6307\u5411\u6587\u4ef6\uff0c\u51b3\u5b9a\u6253\u5f00\u6587\u4ef6\u7c7b\u578b\uff1b 2\u3001\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u3001\u5199\u64cd\u4f5c\uff08\u6bd4\u8d5b\u4e2d\u4e3b\u8981\u7528\u5230\u7684\u64cd\u4f5c\uff0c\u5176\u4ed6\u4e00\u4e9b\u64cd\u4f5c\u6682\u65f6\u4e0d\u5199\uff09\uff1b 3\u3001\u5728\u4f7f\u7528\u5b8c\u6587\u4ef6\u540e\uff0c\u5173\u95ed\u6587\u4ef6\u3002 freopen \u51fd\u6570 \u00b6 \u547d\u4ee4\u683c\u5f0f \u00b6 1 FILE * freopen ( const char * filename , const char * mode , FILE * stream ); \u53c2\u6570\u8bf4\u660e \u00b6 filename : \u8981\u6253\u5f00\u7684\u6587\u4ef6\u540d mode : \u6587\u4ef6\u6253\u5f00\u7684\u6a21\u5f0f stream : \u6587\u4ef6\u6307\u9488\uff0c\u901a\u5e38\u4f7f\u7528\u6807\u51c6\u6587\u4ef6\u6d41 ( stdin/stdout/stderr ) \u4f7f\u7528\u65b9\u6cd5 \u00b6 \u8bfb\u5165\u6587\u4ef6\u5185\u5bb9\uff1a 1 2 freopen ( \"data.in\" , \"r\" , stdin ); // data.in \u5c31\u662f\u8bfb\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u8981\u548c\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u8f93\u51fa\u5230\u6587\u4ef6\uff1a 1 2 freopen ( \"data.out\" , \"w\" , stdout ); // data.out \u5c31\u662f\u8f93\u51fa\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u548c\u53ef\u6267\u884c\u6587\u4ef6\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u5173\u95ed\u6807\u51c6\u8f93\u5165 / \u8f93\u51fa\u6d41 1 2 fclose ( stdin ); fclose ( stdout ); \u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 #include <cstdio> #include <iostream> int main ( void ) { freopen ( \"data.in\" , \"r\" , stdin ); freopen ( \"data.out\" , \"w\" , stdout ); /* \u4e2d\u95f4\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u6539\u53d8\uff0c\u76f4\u63a5\u4f7f\u7528 cin \u548c cout \u5373\u53ef */ fclose ( stdin ); fclose ( stdout ); return 0 ; } \u53c2\u8003\u4e66\u76ee\uff1a\u4fe1\u606f\u5b66\u5965\u8d5b\u4e00\u672c\u901a C++ \u7684 ifstream/ofstream \u6587\u4ef6\u8f93\u5165\u8f93\u51fa\u6d41 \u00b6 \u4f7f\u7528\u65b9\u6cd5 \u00b6 \u8bfb\u5165\u6587\u4ef6\u5185\u5bb9\uff1a 1 2 ifstream fin ( \"data.in\" ); // data.in \u5c31\u662f\u8bfb\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u8981\u548c\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u8f93\u51fa\u5230\u6587\u4ef6\uff1a 1 2 ofstream fout ( \"data.out\" ); // data.out \u5c31\u662f\u8f93\u51fa\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u548c\u53ef\u6267\u884c\u6587\u4ef6\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u5173\u95ed\u6807\u51c6\u8f93\u5165 \\ \u8f93\u51fa\u6d41 1 2 fin . close (); fout . close (); \u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 #include <cstdio> #include <fstream> ifstream fin ( \"data.in\" ); ofstream fout ( \"data.out\" ); int main ( void ) { /* \u4e2d\u95f4\u7684\u4ee3\u7801\u6539\u53d8 cin \u4e3a fin \uff0ccout \u4e3a fout \u5373\u53ef */ fin . close (); fout . close (); return 0 ; }","title":"\u6587\u4ef6\u64cd\u4f5c"},{"location":"basic/file-operation/#_1","text":"\u6587\u4ef6\u662f\u6839\u636e\u7279\u5b9a\u7684\u76ee\u7684\u800c\u6536\u96c6\u5728\u4e00\u8d77\u7684\u6709\u5173\u6570\u636e\u7684\u96c6\u5408\u3002C/C++ \u628a\u6bcf\u4e00\u4e2a\u6587\u4ef6\u90fd\u770b\u6210\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u5b57\u8282\u6d41\uff0c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u662f\u4ee5 \u6587\u4ef6\u7ed3\u675f\u6807\u5fd7 \uff08EOF\uff09\u7ed3\u675f\uff0c\u5982\u679c\u8981\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6\uff0c\u7a0b\u5e8f\u5e94\u8be5\u9996\u5148\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u6bcf\u5f53\u4e00\u4e2a\u6587\u4ef6\u88ab\u6253\u5f00\u540e\uff08\u8bf7\u8bb0\u5f97\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\uff09\uff0c\u8be5\u6587\u4ef6\u5c31\u548c\u4e00\u4e2a\u6d41\u5173\u8054\u8d77\u6765\uff0c\u8fd9\u91cc\u7684\u6d41\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217\u3002 C/C++ \u5c06\u6587\u4ef6\u5206\u4e3a\u6587\u672c\u6587\u4ef6\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u6587\u672c\u6587\u4ef6\u5c31\u662f\u7b80\u5355\u7684\u6587\u672c\u6587\u4ef6\uff08\u91cd\u70b9\uff09\uff0c\u53e6\u5916\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c31\u662f\u7279\u6b8a\u683c\u5f0f\u7684\u6587\u4ef6\u6216\u8005\u53ef\u6267\u884c\u4ee3\u7801\u6587\u4ef6\u7b49\u3002","title":"\u6587\u4ef6\u7684\u6982\u5ff5"},{"location":"basic/file-operation/#_2","text":"1\u3001\u6253\u5f00\u6587\u4ef6\uff0c\u5c06\u6587\u4ef6\u6307\u9488\u6307\u5411\u6587\u4ef6\uff0c\u51b3\u5b9a\u6253\u5f00\u6587\u4ef6\u7c7b\u578b\uff1b 2\u3001\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u3001\u5199\u64cd\u4f5c\uff08\u6bd4\u8d5b\u4e2d\u4e3b\u8981\u7528\u5230\u7684\u64cd\u4f5c\uff0c\u5176\u4ed6\u4e00\u4e9b\u64cd\u4f5c\u6682\u65f6\u4e0d\u5199\uff09\uff1b 3\u3001\u5728\u4f7f\u7528\u5b8c\u6587\u4ef6\u540e\uff0c\u5173\u95ed\u6587\u4ef6\u3002","title":"\u6587\u4ef6\u7684\u64cd\u4f5c\u6b65\u9aa4"},{"location":"basic/file-operation/#freopen","text":"","title":"freopen \u51fd\u6570"},{"location":"basic/file-operation/#_3","text":"1 FILE * freopen ( const char * filename , const char * mode , FILE * stream );","title":"\u547d\u4ee4\u683c\u5f0f"},{"location":"basic/file-operation/#_4","text":"filename : \u8981\u6253\u5f00\u7684\u6587\u4ef6\u540d mode : \u6587\u4ef6\u6253\u5f00\u7684\u6a21\u5f0f stream : \u6587\u4ef6\u6307\u9488\uff0c\u901a\u5e38\u4f7f\u7528\u6807\u51c6\u6587\u4ef6\u6d41 ( stdin/stdout/stderr )","title":"\u53c2\u6570\u8bf4\u660e"},{"location":"basic/file-operation/#_5","text":"\u8bfb\u5165\u6587\u4ef6\u5185\u5bb9\uff1a 1 2 freopen ( \"data.in\" , \"r\" , stdin ); // data.in \u5c31\u662f\u8bfb\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u8981\u548c\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u8f93\u51fa\u5230\u6587\u4ef6\uff1a 1 2 freopen ( \"data.out\" , \"w\" , stdout ); // data.out \u5c31\u662f\u8f93\u51fa\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u548c\u53ef\u6267\u884c\u6587\u4ef6\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u5173\u95ed\u6807\u51c6\u8f93\u5165 / \u8f93\u51fa\u6d41 1 2 fclose ( stdin ); fclose ( stdout );","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"basic/file-operation/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 #include <cstdio> #include <iostream> int main ( void ) { freopen ( \"data.in\" , \"r\" , stdin ); freopen ( \"data.out\" , \"w\" , stdout ); /* \u4e2d\u95f4\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u6539\u53d8\uff0c\u76f4\u63a5\u4f7f\u7528 cin \u548c cout \u5373\u53ef */ fclose ( stdin ); fclose ( stdout ); return 0 ; } \u53c2\u8003\u4e66\u76ee\uff1a\u4fe1\u606f\u5b66\u5965\u8d5b\u4e00\u672c\u901a","title":"\u6a21\u677f"},{"location":"basic/file-operation/#c-ifstreamofstream","text":"","title":"C++ \u7684 ifstream/ofstream \u6587\u4ef6\u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"basic/file-operation/#_7","text":"\u8bfb\u5165\u6587\u4ef6\u5185\u5bb9\uff1a 1 2 ifstream fin ( \"data.in\" ); // data.in \u5c31\u662f\u8bfb\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u8981\u548c\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u8f93\u51fa\u5230\u6587\u4ef6\uff1a 1 2 ofstream fout ( \"data.out\" ); // data.out \u5c31\u662f\u8f93\u51fa\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u548c\u53ef\u6267\u884c\u6587\u4ef6\u5728\u540c\u4e00\u76ee\u5f55\u4e0b \u5173\u95ed\u6807\u51c6\u8f93\u5165 \\ \u8f93\u51fa\u6d41 1 2 fin . close (); fout . close ();","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"basic/file-operation/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 #include <cstdio> #include <fstream> ifstream fin ( \"data.in\" ); ofstream fout ( \"data.out\" ); int main ( void ) { /* \u4e2d\u95f4\u7684\u4ee3\u7801\u6539\u53d8 cin \u4e3a fin \uff0ccout \u4e3a fout \u5373\u53ef */ fin . close (); fout . close (); return 0 ; }","title":"\u6a21\u677f"},{"location":"basic/greedy/","text":"\u8d2a\u5fc3\u7b97\u6cd5\u987e\u540d\u601d\u4e49\u5c31\u662f\u7528\u8ba1\u7b97\u673a\u6765\u6a21\u62df\u4e00\u4e2a \u201c\u8d2a\u5fc3\u201d \u7684\u4eba\u505a\u51fa\u51b3\u7b56\u7684\u8fc7\u7a0b\u3002 \u8fd9\u4e2a\u4eba\u6bcf\u4e00\u6b65\u884c\u52a8\u603b\u662f\u6309\u67d0\u79cd\u6307\u6807\u9009\u53d6\u6700\u4f18\u7684\u64cd\u4f5c\uff0c\u4ed6\u603b\u662f \u53ea\u770b\u773c\u524d\uff0c\u5e76\u4e0d\u8003\u8651\u4ee5\u540e\u53ef\u80fd\u9020\u6210\u7684\u5f71\u54cd \u3002 \u53ef\u60f3\u800c\u77e5\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u65f6\u5019\u8d2a\u5fc3\u6cd5\u90fd\u80fd\u83b7\u5f97\u6700\u4f18\u89e3\uff0c\u6240\u4ee5\u4e00\u822c\u4f7f\u7528\u8d2a\u5fc3\u6cd5\u7684\u65f6\u5019\uff0c\u90fd\u8981\u786e\u4fdd\u81ea\u5df1\u80fd\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002 \u5e38\u89c1\u505a\u6cd5 \u00b6 \u5728\u63d0\u9ad8\u7ec4\u96be\u5ea6\u4ee5\u4e0b\u7684\u9898\u76ee\u4e2d\uff0c\u6700\u5e38\u89c1\u7684\u8d2a\u5fc3\u6709\u4e24\u79cd\u3002\u4e00\u79cd\u662f\uff1a\u300c\u6211\u4eec\u5c06 XXX \u6309\u7167\u67d0\u67d0\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6309\u67d0\u79cd\u987a\u5e8f\uff08\u4f8b\u5982\u4ece\u5c0f\u5230\u5927\uff09\u5904\u7406\u300d\u3002\u53e6\u4e00\u79cd\u662f\uff1a\u300c\u6211\u4eec\u6bcf\u6b21\u90fd\u53d6 XXX \u4e2d\u6700\u5927 / \u5c0f\u7684\u4e1c\u897f\uff0c\u5e76\u66f4\u65b0 XXX\u300d\uff0c\u6709\u65f6\u300cXXX \u4e2d\u6700\u5927 / \u5c0f\u7684\u4e1c\u897f\u300d\u53ef\u4ee5\u4f18\u5316\uff0c\u6bd4\u5982\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002 \u4e3a\u5565\u5206\u6210\u4e24\u79cd\uff1f\u4f60\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u79cd\u662f\u79bb\u7ebf\u7684\uff0c\u4e00\u79cd\u662f\u5728\u7ebf\u7684\u3002 \u8bc1\u660e\u65b9\u6cd5 \u00b6 \u4ece\u6765\u90fd\u662f\u5927\u80c6\u731c\u60f3\uff0c\u4ece\u6765\u4e0d\u4f1a\u5c0f\u5fc3\u6c42\u8bc1 \u4ee5\u4e0b\u5957\u8def\u8bf7\u6309\u7167\u9898\u76ee\u81ea\u884c\u659f\u914c\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e00\u9053\u9898\u53ea\u4f1a\u7528\u5230\u5176\u4e2d\u7684\u4e00\u79cd\u65b9\u6cd5\u6765\u8bc1\u660e\u3002 \u8fd0\u7528\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u4ea4\u6362\u65b9\u6848\u4e2d\u4efb\u610f\u4e24\u4e2a\u5143\u7d20 / \u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u540e\uff0c\u7b54\u6848\u4e0d\u4f1a\u53d8\u5f97\u66f4\u597d\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u76ee\u524d\u7684\u89e3\u5df2\u7ecf\u662f\u6700\u4f18\u89e3\u4e86\u3002 \u8fd0\u7528\u5f52\u7eb3\u6cd5\uff0c\u5148\u624b\u7b97\u5f97\u51fa\u8fb9\u754c\u60c5\u51b5\uff08\u4f8b\u5982 n = 1 n = 1 \uff09\u7684\u6700\u4f18\u89e3 F_1 F_1 \uff0c\u7136\u540e\u518d\u8bc1\u660e\uff1a\u5bf9\u4e8e\u6bcf\u4e2a n n \uff0c F_{n+1} F_{n+1} \u90fd\u53ef\u4ee5\u7531 F_{n} F_{n} \u63a8\u5bfc\u51fa\u7ed3\u679c\u3002 \u6392\u5e8f\u6cd5 \u00b6 \u7528\u6392\u5e8f\u6cd5\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u8f93\u5165\u4e00\u4e2a\u5305\u542b\u51e0\u4e2a\uff08\u4e00\u822c\u4e00\u5230\u4e24\u4e2a\uff09\u6743\u503c\u7684\u6570\u7ec4\uff0c\u901a\u8fc7\u6392\u5e8f\u7136\u540e\u904d\u5386\u6a21\u62df\u8ba1\u7b97\u7684\u65b9\u6cd5\u6c42\u51fa\u6700\u4f18\u503c\u3002 \u6709\u4e9b\u9898\u7684\u6392\u5e8f\u65b9\u6cd5\u975e\u5e38\u663e\u7136\uff0c\u5982 luogu P1209 \u5c31\u662f\u5c06\u8f93\u5165\u6570\u7ec4\u5dee\u5206\u540e\u6392\u5e8f\u6a21\u62df\u6c42\u503c\u3002 \u7136\u800c\u6709\u4e9b\u65f6\u5019\u5f88\u96be\u76f4\u63a5\u4e00\u4e0b\u5b50\u770b\u51fa\u6392\u5e8f\u65b9\u6cd5\uff0c\u6bd4\u5982 luogu P1080 \u5c31\u5f88\u5bb9\u6613\u51ed\u76f4\u89c9\u800c\u9519\u8bef\u5730\u4ee5 a a \u6216 b b \u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u8fc7\u6837\u4f8b\u4e4b\u540e\u63d0\u4ea4\u5c31\u53d1\u73b0 WA \u4e86 QAQ\u3002\u4e00\u4e2a \u4f17\u6240\u5468\u77e5\u7684 \u5e38\u89c1\u529e\u6cd5\u5c31\u662f\u5c1d\u8bd5\u4ea4\u6362\u6570\u7ec4\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u6765 \u63a8\u5bfc \u51fa\u6b63\u786e\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u6211\u4eec\u5047\u8bbe\u8fd9\u9898\u8f93\u5165\u7684\u4fe9\u4e2a\u6570\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u4fdd\u5b58 1 2 3 struct { int a , b ; } v [ n ]; \u7528 m m \u8868\u793a i i \u524d\u9762\u6240\u6709\u7684 a a \u7684\u4e58\u79ef\uff0c\u90a3\u4e48\u7b2c i i \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u8d4f\u5c31\u662f \\frac{m} {v[i].b} \\frac{m} {v[i].b} \u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u8d4f\u5c31\u662f \\frac{m \\cdot v[i].a} {v[i + 1].b} \\frac{m \\cdot v[i].a} {v[i + 1].b} \u5982\u679c\u6211\u4eec\u4ea4\u6362\u7b2c i i \u4e2a\u5927\u81e3\u4e0e\u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u8d4f\u5c31\u662f \\frac{m} {v[i + 1].b} \\frac{m} {v[i + 1].b} \u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u52b1\u5c31\u662f \\frac{m \\cdot v[i + 1].a} {v[i].b} \\frac{m \\cdot v[i + 1].a} {v[i].b} \u5982\u679c\u4ea4\u524d\u66f4\u4f18\u5f53\u4e14\u4ec5\u5f53 \\max (\\frac{m} {v[i].b}, \\frac{m \\times v[i].a} {v[i + 1].b}) < \\max (\\frac{m} {v[i + 1].b}, \\frac{m \\times v[i + 1].a} {v[i].b}) \\max (\\frac{m} {v[i].b}, \\frac{m \\times v[i].a} {v[i + 1].b}) < \\max (\\frac{m} {v[i + 1].b}, \\frac{m \\times v[i + 1].a} {v[i].b}) \u63d0\u53d6\u51fa\u76f8\u540c\u7684 m m \u5e76\u7ea6\u5206\u5f97\u5230 \\max(\\frac{1} {v[i].b}, \\frac{v[i].a} {v[i + 1].b}) < \\max(\\frac{1} {v[i + 1].b}, \\frac{v[i + 1].a} {v[i].b}) \\max(\\frac{1} {v[i].b}, \\frac{v[i].a} {v[i + 1].b}) < \\max(\\frac{1} {v[i + 1].b}, \\frac{v[i + 1].a} {v[i].b}) \u7136\u540e\u5206\u5f0f\u5316\u6210\u6574\u5f0f\u5f97\u5230 \\max(v[i + 1].b, v[i].a \\times v[i].b) < \\max(v[i].b, v[i + 1].a \\times v[i + 1].b) \\max(v[i + 1].b, v[i].a \\times v[i].b) < \\max(v[i].b, v[i + 1].a \\times v[i + 1].b) \u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5f97\u5230\u6392\u5e8f\u51fd\u6570\u4e86\uff01 1 2 3 4 5 6 struct uv { int a , b ; bool operator < ( const uv & x ) const { return max ( x . b , a * b ) < max ( b , x . a * x . b ); } }; \u770b\u4e0a\u53bb\u662f\u4e0d\u662f\u5f88\u7b80\u5355\u5462\uff08\u8fd9\u9898\u9ad8\u7cbe\u5ea6\u5361\u5e38\u2026\u2026\uff09 \uff0c\u5982\u679c\u770b\u61c2\u4e86\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u4e00\u9053\u7c7b\u4f3c\u7684\u9898 luogu P2123 \uff08\u8bf7\u4e0d\u8981\u7ffb\u9898\u89e3\u2026\u2026\u3002 \u540e\u6094\u6cd5 \u00b6 \u4f8b\u9898 luogu P2949 [USACO09OPEN] \u5de5\u4f5c\u8c03\u5ea6 Work Scheduling \u8d2a\u5fc3\u601d\u60f3\uff1a 1 . \u5148\u5047\u8bbe\u6bcf\u4e00\u9879\u5de5\u4f5c\u90fd\u505a\uff0c\u5c06\u5404\u9879\u5de5\u4f5c\u6309\u622a\u6b62\u65f6\u95f4\u6392\u5e8f\u540e\u5165\u961f\u3002 2 . \u5728\u5224\u65ad\u7b2c i \u9879\u5de5\u4f5c\u505a\u4e0e\u4e0d\u505a\u65f6\uff0c\u82e5\u5176\u622a\u81f3\u65f6\u95f4\u7b26\u5408\u6761\u4ef6\uff0c\u5219\u5c06\u5176\u4e0e\u961f\u4e2d\u62a5\u916c\u6700\u5c0f\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u82e5\u7b2c i \u9879\u5de5\u4f5c\u62a5\u916c\u8f83\u9ad8\uff08\u540e\u6094\uff09\uff0c\u5219 ans+=a[i].p-q.top()\u3002 PS \uff1a \u7528\u4f18\u5148\u961f\u5217\uff08\u5c0f\u6839\u5806\uff09\u6765\u7ef4\u62a4\u961f\u9996\u5143\u7d20\u6700\u5c0f\u3002 Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std ; struct f { long long d ; long long x ; } a [ 100005 ]; bool cmp ( f A , f B ) { return A . d < B . d ; } priority_queue < long long , vector < long long > , greater < long long > > q ; int main () { long long n , i , j ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & a [ i ]. d , & a [ i ]. x ); } sort ( a + 1 , a + n + 1 , cmp ); long long ans = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ]. d <= q . size ()) { if ( q . top () < a [ i ]. x ) { ans += a [ i ]. x - q . top (); q . pop (); q . push ( a [ i ]. x ); } } else { ans += a [ i ]. x ; q . push ( a [ i ]. x ); } } cout << ans << endl ; return 0 ; }","title":"\u8d2a\u5fc3"},{"location":"basic/greedy/#_1","text":"\u5728\u63d0\u9ad8\u7ec4\u96be\u5ea6\u4ee5\u4e0b\u7684\u9898\u76ee\u4e2d\uff0c\u6700\u5e38\u89c1\u7684\u8d2a\u5fc3\u6709\u4e24\u79cd\u3002\u4e00\u79cd\u662f\uff1a\u300c\u6211\u4eec\u5c06 XXX \u6309\u7167\u67d0\u67d0\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6309\u67d0\u79cd\u987a\u5e8f\uff08\u4f8b\u5982\u4ece\u5c0f\u5230\u5927\uff09\u5904\u7406\u300d\u3002\u53e6\u4e00\u79cd\u662f\uff1a\u300c\u6211\u4eec\u6bcf\u6b21\u90fd\u53d6 XXX \u4e2d\u6700\u5927 / \u5c0f\u7684\u4e1c\u897f\uff0c\u5e76\u66f4\u65b0 XXX\u300d\uff0c\u6709\u65f6\u300cXXX \u4e2d\u6700\u5927 / \u5c0f\u7684\u4e1c\u897f\u300d\u53ef\u4ee5\u4f18\u5316\uff0c\u6bd4\u5982\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002 \u4e3a\u5565\u5206\u6210\u4e24\u79cd\uff1f\u4f60\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u79cd\u662f\u79bb\u7ebf\u7684\uff0c\u4e00\u79cd\u662f\u5728\u7ebf\u7684\u3002","title":"\u5e38\u89c1\u505a\u6cd5"},{"location":"basic/greedy/#_2","text":"\u4ece\u6765\u90fd\u662f\u5927\u80c6\u731c\u60f3\uff0c\u4ece\u6765\u4e0d\u4f1a\u5c0f\u5fc3\u6c42\u8bc1 \u4ee5\u4e0b\u5957\u8def\u8bf7\u6309\u7167\u9898\u76ee\u81ea\u884c\u659f\u914c\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e00\u9053\u9898\u53ea\u4f1a\u7528\u5230\u5176\u4e2d\u7684\u4e00\u79cd\u65b9\u6cd5\u6765\u8bc1\u660e\u3002 \u8fd0\u7528\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u4ea4\u6362\u65b9\u6848\u4e2d\u4efb\u610f\u4e24\u4e2a\u5143\u7d20 / \u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u540e\uff0c\u7b54\u6848\u4e0d\u4f1a\u53d8\u5f97\u66f4\u597d\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u76ee\u524d\u7684\u89e3\u5df2\u7ecf\u662f\u6700\u4f18\u89e3\u4e86\u3002 \u8fd0\u7528\u5f52\u7eb3\u6cd5\uff0c\u5148\u624b\u7b97\u5f97\u51fa\u8fb9\u754c\u60c5\u51b5\uff08\u4f8b\u5982 n = 1 n = 1 \uff09\u7684\u6700\u4f18\u89e3 F_1 F_1 \uff0c\u7136\u540e\u518d\u8bc1\u660e\uff1a\u5bf9\u4e8e\u6bcf\u4e2a n n \uff0c F_{n+1} F_{n+1} \u90fd\u53ef\u4ee5\u7531 F_{n} F_{n} \u63a8\u5bfc\u51fa\u7ed3\u679c\u3002","title":"\u8bc1\u660e\u65b9\u6cd5"},{"location":"basic/greedy/#_3","text":"\u7528\u6392\u5e8f\u6cd5\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u8f93\u5165\u4e00\u4e2a\u5305\u542b\u51e0\u4e2a\uff08\u4e00\u822c\u4e00\u5230\u4e24\u4e2a\uff09\u6743\u503c\u7684\u6570\u7ec4\uff0c\u901a\u8fc7\u6392\u5e8f\u7136\u540e\u904d\u5386\u6a21\u62df\u8ba1\u7b97\u7684\u65b9\u6cd5\u6c42\u51fa\u6700\u4f18\u503c\u3002 \u6709\u4e9b\u9898\u7684\u6392\u5e8f\u65b9\u6cd5\u975e\u5e38\u663e\u7136\uff0c\u5982 luogu P1209 \u5c31\u662f\u5c06\u8f93\u5165\u6570\u7ec4\u5dee\u5206\u540e\u6392\u5e8f\u6a21\u62df\u6c42\u503c\u3002 \u7136\u800c\u6709\u4e9b\u65f6\u5019\u5f88\u96be\u76f4\u63a5\u4e00\u4e0b\u5b50\u770b\u51fa\u6392\u5e8f\u65b9\u6cd5\uff0c\u6bd4\u5982 luogu P1080 \u5c31\u5f88\u5bb9\u6613\u51ed\u76f4\u89c9\u800c\u9519\u8bef\u5730\u4ee5 a a \u6216 b b \u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u8fc7\u6837\u4f8b\u4e4b\u540e\u63d0\u4ea4\u5c31\u53d1\u73b0 WA \u4e86 QAQ\u3002\u4e00\u4e2a \u4f17\u6240\u5468\u77e5\u7684 \u5e38\u89c1\u529e\u6cd5\u5c31\u662f\u5c1d\u8bd5\u4ea4\u6362\u6570\u7ec4\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u6765 \u63a8\u5bfc \u51fa\u6b63\u786e\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u6211\u4eec\u5047\u8bbe\u8fd9\u9898\u8f93\u5165\u7684\u4fe9\u4e2a\u6570\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u4fdd\u5b58 1 2 3 struct { int a , b ; } v [ n ]; \u7528 m m \u8868\u793a i i \u524d\u9762\u6240\u6709\u7684 a a \u7684\u4e58\u79ef\uff0c\u90a3\u4e48\u7b2c i i \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u8d4f\u5c31\u662f \\frac{m} {v[i].b} \\frac{m} {v[i].b} \u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u8d4f\u5c31\u662f \\frac{m \\cdot v[i].a} {v[i + 1].b} \\frac{m \\cdot v[i].a} {v[i + 1].b} \u5982\u679c\u6211\u4eec\u4ea4\u6362\u7b2c i i \u4e2a\u5927\u81e3\u4e0e\u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u8d4f\u5c31\u662f \\frac{m} {v[i + 1].b} \\frac{m} {v[i + 1].b} \u7b2c i + 1 i + 1 \u4e2a\u5927\u81e3\u5f97\u5230\u7684\u5956\u52b1\u5c31\u662f \\frac{m \\cdot v[i + 1].a} {v[i].b} \\frac{m \\cdot v[i + 1].a} {v[i].b} \u5982\u679c\u4ea4\u524d\u66f4\u4f18\u5f53\u4e14\u4ec5\u5f53 \\max (\\frac{m} {v[i].b}, \\frac{m \\times v[i].a} {v[i + 1].b}) < \\max (\\frac{m} {v[i + 1].b}, \\frac{m \\times v[i + 1].a} {v[i].b}) \\max (\\frac{m} {v[i].b}, \\frac{m \\times v[i].a} {v[i + 1].b}) < \\max (\\frac{m} {v[i + 1].b}, \\frac{m \\times v[i + 1].a} {v[i].b}) \u63d0\u53d6\u51fa\u76f8\u540c\u7684 m m \u5e76\u7ea6\u5206\u5f97\u5230 \\max(\\frac{1} {v[i].b}, \\frac{v[i].a} {v[i + 1].b}) < \\max(\\frac{1} {v[i + 1].b}, \\frac{v[i + 1].a} {v[i].b}) \\max(\\frac{1} {v[i].b}, \\frac{v[i].a} {v[i + 1].b}) < \\max(\\frac{1} {v[i + 1].b}, \\frac{v[i + 1].a} {v[i].b}) \u7136\u540e\u5206\u5f0f\u5316\u6210\u6574\u5f0f\u5f97\u5230 \\max(v[i + 1].b, v[i].a \\times v[i].b) < \\max(v[i].b, v[i + 1].a \\times v[i + 1].b) \\max(v[i + 1].b, v[i].a \\times v[i].b) < \\max(v[i].b, v[i + 1].a \\times v[i + 1].b) \u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5f97\u5230\u6392\u5e8f\u51fd\u6570\u4e86\uff01 1 2 3 4 5 6 struct uv { int a , b ; bool operator < ( const uv & x ) const { return max ( x . b , a * b ) < max ( b , x . a * x . b ); } }; \u770b\u4e0a\u53bb\u662f\u4e0d\u662f\u5f88\u7b80\u5355\u5462\uff08\u8fd9\u9898\u9ad8\u7cbe\u5ea6\u5361\u5e38\u2026\u2026\uff09 \uff0c\u5982\u679c\u770b\u61c2\u4e86\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u4e00\u9053\u7c7b\u4f3c\u7684\u9898 luogu P2123 \uff08\u8bf7\u4e0d\u8981\u7ffb\u9898\u89e3\u2026\u2026\u3002","title":"\u6392\u5e8f\u6cd5"},{"location":"basic/greedy/#_4","text":"\u4f8b\u9898 luogu P2949 [USACO09OPEN] \u5de5\u4f5c\u8c03\u5ea6 Work Scheduling \u8d2a\u5fc3\u601d\u60f3\uff1a 1 . \u5148\u5047\u8bbe\u6bcf\u4e00\u9879\u5de5\u4f5c\u90fd\u505a\uff0c\u5c06\u5404\u9879\u5de5\u4f5c\u6309\u622a\u6b62\u65f6\u95f4\u6392\u5e8f\u540e\u5165\u961f\u3002 2 . \u5728\u5224\u65ad\u7b2c i \u9879\u5de5\u4f5c\u505a\u4e0e\u4e0d\u505a\u65f6\uff0c\u82e5\u5176\u622a\u81f3\u65f6\u95f4\u7b26\u5408\u6761\u4ef6\uff0c\u5219\u5c06\u5176\u4e0e\u961f\u4e2d\u62a5\u916c\u6700\u5c0f\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u82e5\u7b2c i \u9879\u5de5\u4f5c\u62a5\u916c\u8f83\u9ad8\uff08\u540e\u6094\uff09\uff0c\u5219 ans+=a[i].p-q.top()\u3002 PS \uff1a \u7528\u4f18\u5148\u961f\u5217\uff08\u5c0f\u6839\u5806\uff09\u6765\u7ef4\u62a4\u961f\u9996\u5143\u7d20\u6700\u5c0f\u3002","title":"\u540e\u6094\u6cd5"},{"location":"basic/greedy/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std ; struct f { long long d ; long long x ; } a [ 100005 ]; bool cmp ( f A , f B ) { return A . d < B . d ; } priority_queue < long long , vector < long long > , greater < long long > > q ; int main () { long long n , i , j ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & a [ i ]. d , & a [ i ]. x ); } sort ( a + 1 , a + n + 1 , cmp ); long long ans = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ]. d <= q . size ()) { if ( q . top () < a [ i ]. x ) { ans += a [ i ]. x - q . top (); q . pop (); q . push ( a [ i ]. x ); } } else { ans += a [ i ]. x ; q . push ( a [ i ]. x ); } } cout << ans << endl ; return 0 ; }","title":"Code"},{"location":"basic/prefix-sum/","text":"\u524d\u7f00\u548c \u00b6 \u524d\u7f00\u548c\u662f\u4e00\u79cd\u8f83\u4e3a\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a \u201c\u6570\u5217\u7684\u524d n \u9879\u7684\u548c\u201d\u3002\u4e0b\u9762\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u9898\u6765\u4e86\u89e3\u4e00\u4e0b\u524d\u7f00\u548c\u7684\u4e3b\u8981\u601d\u8def\u3002 \u4f8b\u9898 \u6709 N \u4e2a\u7684\u6b63\u6574\u6570\u653e\u5230\u6570\u7ec4 A \u91cc\uff0c\u73b0\u5728\u8981\u6c42\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4 B\uff0c\u65b0\u6570\u7ec4\u7684\u7b2c i \u4e2a\u6570 B[i] \u662f\u539f\u6570\u7ec4 A \u7b2c 0 \u5230\u7b2c i \u4e2a\u6570\u7684\u548c\u3002 \u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u505a\u6cd5\uff1a \u628a\u5bf9\u6570\u7ec4 A \u7684\u7d2f\u52a0\u4f9d\u6b21\u653e\u5165\u6570\u7ec4 B \u4e2d\u3002 \u9012\u63a8\uff1a B[i] = B[i-1] + A[i] \uff0c\u524d\u63d0 B[0] = A[0] \u3002 \u53c2\u8003\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> using namespace std ; int N , A [ 10000 ], B [ 10000 ]; int main () { cin >> N ; for ( int i = 0 ; i < N ; i ++ ) { cin >> A [ i ]; } B [ 0 ] = A [ 0 ]; for ( int i = 1 ; i < N ; i ++ ) { B [ i ] = B [ i - 1 ] + A [ i ]; } for ( int i = 0 ; i < N ; i ++ ) { cout << B [ i ] << \" \" ; } return 0 ; } \u8f93\u5165\uff1a 1 2 5 1 2 3 4 5 \u8f93\u51fa\uff1a 1 1 3 6 10 15 \u9996\u5148\uff0c B[0] = A[0]; \uff0c\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2c\u4e00\u9879\u548c\u539f\u6570\u7ec4\u7684\u7b2c\u4e00\u9879\u662f\u76f8\u7b49\u7684\u3002 B[i] = B[i-1] + A[i] \u76f8\u4fe1\u5927\u5bb6\u4e5f\u80fd\u7406\u89e3\u8fd9\u4e2a\u5f0f\u5b50\u3002\u610f\u601d\u5c31\u662f\uff1a\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2c i \u9879\u7b49\u4e8e\u6570\u7ec4 A \u7684 0 \u5230 i-1 \u9879\u7684\u548c\u52a0\u6570\u7ec4 A \u7684\u7b2c i \u9879\u3002 \u4e60\u9898 \u00b6 U53525 \u524d\u7f00\u548c\uff08\u4f8b\u9898\uff09 \u53c2\u8003 \u00b6 \u611f\u8c22\u5357\u6d77\u533a\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u5185\u90e8\u8bad\u7ec3\u6559\u6750\u3002","title":"\u524d\u7f00\u548c & \u5dee\u5206"},{"location":"basic/prefix-sum/#_1","text":"\u524d\u7f00\u548c\u662f\u4e00\u79cd\u8f83\u4e3a\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a \u201c\u6570\u5217\u7684\u524d n \u9879\u7684\u548c\u201d\u3002\u4e0b\u9762\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u9898\u6765\u4e86\u89e3\u4e00\u4e0b\u524d\u7f00\u548c\u7684\u4e3b\u8981\u601d\u8def\u3002 \u4f8b\u9898 \u6709 N \u4e2a\u7684\u6b63\u6574\u6570\u653e\u5230\u6570\u7ec4 A \u91cc\uff0c\u73b0\u5728\u8981\u6c42\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4 B\uff0c\u65b0\u6570\u7ec4\u7684\u7b2c i \u4e2a\u6570 B[i] \u662f\u539f\u6570\u7ec4 A \u7b2c 0 \u5230\u7b2c i \u4e2a\u6570\u7684\u548c\u3002 \u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u505a\u6cd5\uff1a \u628a\u5bf9\u6570\u7ec4 A \u7684\u7d2f\u52a0\u4f9d\u6b21\u653e\u5165\u6570\u7ec4 B \u4e2d\u3002 \u9012\u63a8\uff1a B[i] = B[i-1] + A[i] \uff0c\u524d\u63d0 B[0] = A[0] \u3002 \u53c2\u8003\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> using namespace std ; int N , A [ 10000 ], B [ 10000 ]; int main () { cin >> N ; for ( int i = 0 ; i < N ; i ++ ) { cin >> A [ i ]; } B [ 0 ] = A [ 0 ]; for ( int i = 1 ; i < N ; i ++ ) { B [ i ] = B [ i - 1 ] + A [ i ]; } for ( int i = 0 ; i < N ; i ++ ) { cout << B [ i ] << \" \" ; } return 0 ; } \u8f93\u5165\uff1a 1 2 5 1 2 3 4 5 \u8f93\u51fa\uff1a 1 1 3 6 10 15 \u9996\u5148\uff0c B[0] = A[0]; \uff0c\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2c\u4e00\u9879\u548c\u539f\u6570\u7ec4\u7684\u7b2c\u4e00\u9879\u662f\u76f8\u7b49\u7684\u3002 B[i] = B[i-1] + A[i] \u76f8\u4fe1\u5927\u5bb6\u4e5f\u80fd\u7406\u89e3\u8fd9\u4e2a\u5f0f\u5b50\u3002\u610f\u601d\u5c31\u662f\uff1a\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2c i \u9879\u7b49\u4e8e\u6570\u7ec4 A \u7684 0 \u5230 i-1 \u9879\u7684\u548c\u52a0\u6570\u7ec4 A \u7684\u7b2c i \u9879\u3002","title":"\u524d\u7f00\u548c"},{"location":"basic/prefix-sum/#_2","text":"U53525 \u524d\u7f00\u548c\uff08\u4f8b\u9898\uff09","title":"\u4e60\u9898"},{"location":"basic/prefix-sum/#_3","text":"\u611f\u8c22\u5357\u6d77\u533a\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u5185\u90e8\u8bad\u7ec3\u6559\u6750\u3002","title":"\u53c2\u8003"},{"location":"basic/simulate/","text":"\u6a21\u62df\u3002\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u7528\u8ba1\u7b97\u673a\u6765\u6a21\u62df\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982 NOIP 2014 \u7684 \u751f\u6d3b\u5927\u7206\u70b8\u7248\u77f3\u5934\u526a\u5200\u5e03 \uff0c\u53ea\u9700\u8981\u6309\u7167\u9898\u9762\u7684\u610f\u601d\u6765\u5199\u5c31\u53ef\u4ee5\u4e86\u3002 \u5f53\u7136\uff0c\u6a21\u62df\u4e00\u822c\u4e5f\u4e0d\u662f\u5f88\u597d\u5199\uff0c\u53c2\u89c1\u7ecf\u5178\u9898\u76ee \u9b54\u517d\u4e16\u754c \u548c \u732a\u56fd\u6740 \u3002 \u6a21\u62df\u9898\u76ee\u901a\u5e38\u5177\u6709\u7801\u91cf\u5927\u3001\u64cd\u4f5c\u591a\u3001\u601d\u8def\u7e41\u590d\u7684\u7279\u70b9\u3002\u5e76\u4e14\u7531\u4e8e\u5b83\u7801\u91cf\u5927\uff0c\u4f1a\u5bfc\u81f4\u5f88\u96be\u67e5\u9519\uff0c\u5982\u679c\u662f\u5728\u8003\u8bd5\u4e0a\u662f\u76f8\u5f53\u6d6a\u8d39\u65f6\u95f4\u7684\u3002 \u6240\u4ee5\u5199\u6a21\u62df\u9898\uff0c\u9075\u5faa\u4ee5\u4e0b\u7684\u5efa\u8bae\u6709\u53ef\u80fd\u4f1a\u5e2e\u52a9\u4f60\u51cf\u5c11\u6d6a\u8d39\u65f6\u95f4 \u5728\u52a8\u624b\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u5728\u8349\u7eb8\u4e0a\u5c3d\u53ef\u80fd\u7684\u5199\u597d\u8981\u5b9e\u73b0\u7684\u6d41\u7a0b \u5728\u4ee3\u7801\u4e2d\uff0c\u5c3d\u91cf\u628a\u6bcf\u4e2a\u90e8\u5206\u6a21\u5757\u5316\u3001\u5199\u6210\u51fd\u6570\u3001\u7ed3\u6784\u4f53\u6216\u7c7b \u5bf9\u4e8e\u4e00\u4e9b\u53ef\u80fd\u91cd\u590d\u7528\u5230\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u7edf\u4e00\u8f6c\u5316\uff0c\u65b9\u4fbf\u5904\u7406 \uff1a \u5982\uff0c\u67d0\u9898\u7ed9\u4f60 \"YY-MM-DD \u65f6: \u5206\" \u628a\u5b83\u6254\u5230\u4e00\u4e2a\u51fd\u6570\u5904\u7406\u6210\u79d2\uff0c\u4f1a\u51cf\u5c11\u6982\u5ff5\u6df7\u6dc6 \u8c03\u8bd5\u65f6\u5206\u5757\u8c03\u8bd5\uff0c\u6a21\u5757\u5316\u7684\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u65b9\u4fbf\u7684\u5355\u72ec\u8c03\u67d0\u4e00\u90e8\u5206 \u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u601d\u8def\u6e05\u6670\uff0c\u4e0d\u8981\u60f3\u5230\u4ec0\u4e48\u5199\u4ec0\u4e48\uff0c\u8981\u6309\u7167\u843d\u5728\u7eb8\u4e0a\u7684\u6b65\u9aa4\u5199\u3002","title":"\u6a21\u62df"},{"location":"basic/sort/","text":"\u6392\u5e8f\u7b97\u6cd5\u591a\u79cd\u591a\u6837\uff0c\u6027\u8d28\u4e5f\u5927\u591a\u4e0d\u540c\u3002 \u7a33\u5b9a\u6027 \u00b6 \u7a33\u5b9a\u6027\u662f\u6307\u76f8\u7b49\u7684\u5143\u7d20\u7ecf\u8fc7\u6392\u5e8f\u4e4b\u540e\u76f8\u5bf9\u987a\u5e8f\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8\u3002 \u6211\u4eec\u5e38\u7528\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u6392\u5e8f\uff0c\u800c\u5feb\u901f\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u7528\u6765\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u548c\u8f93\u5165\u89c4\u6a21\u7684\u5173\u7cfb\uff0c\u7c7b\u4f3c\u7684\u6709\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u7528\u6765\u63cf\u8ff0\u7b97\u6cd5\u7684\u7a7a\u95f4\u6d88\u8017\u7684\u89c4\u6a21\u3002 \u7b80\u5355\u8ba1\u7b97\u590d\u6742\u5ea6\u7684\u65b9\u6cd5\u4e00\u822c\u662f\u7edf\u8ba1 \u201c\u7b80\u5355\u64cd\u4f5c\u201d \u7684\u6267\u884c\u6b21\u6570\uff0c\u6709\u65f6\u5019\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6570\u5faa\u73af\u7684\u5c42\u6570\u6765\u8fd1\u4f3c\u4f30\u8ba1\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u4e3a\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\u7b49\u3002OI \u7ade\u8d5b\u4e2d\u8981\u8003\u8651\u7684\u4e00\u822c\u662f\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5b83\u4ee3\u8868\u7684\u662f\u7b97\u6cd5\u8fd0\u884c\u6c34\u5e73\u7684\u4e0b\u754c\uff0c\u5728\u8bc4\u6d4b\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u66f4\u5dee\u7684\u7ed3\u679c\u4e86\u3002 \u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u9650\u662f O(n\\log n) O(n\\log n) \u7684\u3002 \u5f53\u7136\u4e5f\u6709\u4e0d\u662f O(n\\log n) O(n\\log n) \u7684\uff0c\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \uff0c\u4f46\u662f\u5b83\u662f\u5728\u300c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u300d\uff0c\u5b83\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O( O( \u6240\u6392\u5e8f\u7684\u6700\u5927\u6570 ) ) \u5192\u6ce1\u6392\u5e8f \u00b6 \u5192\u6ce1\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u65b9\u6cd5\u3002 \u4ee5\u5347\u5e8f\u4e3a\u4f8b\uff0c\u5192\u6ce1\u6392\u5e8f\u6bcf\u6b21\u68c0\u67e5\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u9762\u7684\u5143\u7d20\u5927\u4e8e\u540e\u9762\u7684\u5143\u7d20\uff0c\u5c31\u5c06\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u3002\u5f53\u6ca1\u6709\u76f8\u90bb\u7684\u5143\u7d20\u9700\u8981\u4ea4\u6362\u65f6\uff0c\u6392\u5e8f\u5c31\u5b8c\u6210\u4e86\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u626b\u63cf n n \u904d\u6570\u7ec4\u624d\u80fd\u5b8c\u6210\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 void bubble_sort () { for ( int i = 1 ; i <= n ; i ++ ) { bool flag = false ; for ( int j = 1 ; j < n ; j ++ ) if ( a [ j ] > a [ j + 1 ]) { flag = true ; int t = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = t ; } if ( ! flag ) break ; //\u5982\u679c\u6ca1\u6709\u6267\u884c\u4ea4\u6362\u64cd\u4f5c\uff0c\u8bf4\u660e\u6570\u5217\u5df2\u7ecf\u6709\u5e8f } } \u5728\u5e8f\u5217\u5b8c\u5168\u6709\u5e8f\u65f6\uff0c\u8be5\u7b97\u6cd5\u53ea\u9700\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u4e0d\u7528\u6267\u884c\u4efb\u4f55\u4ea4\u6362\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5192\u6ce1\u6392\u5e8f\u8981\u6267\u884c (n-1) \\* n/2 (n-1) \\* n/2 \u6b21\u4ea4\u6362\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u5192\u6ce1\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(n^2) O(n^2) \u3002 \u5f52\u5e76\u6392\u5e8f \u00b6 \u5f52\u5e76\u6392\u5e8f\u662f \u5206\u6cbb \u5730\u6765\u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\u3002 \u5f52\u5e76\u6392\u5e8f\u5206\u4e3a\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5c06\u6570\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff08\u76f4\u63a5\u5206\uff0c\u800c\u4e0d\u662f\u50cf\u5feb\u901f\u6392\u5e8f\u90a3\u6837\u8981\u6c42\u4fdd\u8bc1\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff09 \u9012\u5f52\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u4e2d\u5206\u522b\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f \u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217 \u4e0d\u96be\u53d1\u73b0\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u662f\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u524d\u4e24\u6b65\u90fd\u5f88\u597d\u5b9e\u73b0\u3002 \u5176\u5b9e\u5408\u5e76\u7684\u65f6\u5019\u4e5f\u4e0d\u96be\u64cd\u4f5c\u3002\u6ce8\u610f\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u5728\u7b2c\u4e8c\u6b65\u4e2d\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u90fd\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u7b2c\u4e09\u6b65\u4e2d\u5b9e\u9645\u4e0a\u662f\u60f3\u8981\u628a\u4e24\u4e2a \u6709\u5e8f \u6570\u5217\u5408\u5e76\u8d77\u6765\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void merge ( int ll , int rr ) { // \u7528\u6765\u628a a[ll.. rr - 1] \u8fd9\u4e00\u533a\u95f4\u7684\u6570\u6392\u5e8f\u3002 t \u6570\u7ec4\u662f\u4e34\u65f6\u5b58\u653e\u6709\u5e8f\u7684\u7248\u672c\u7528\u7684\u3002 if ( rr - ll <= 1 ) return ; int md = ll + ( rr - ll >> 1 ); merge ( ll , md ); merge ( md , rr ); int p = ll , q = md , s = ll ; while ( s < rr ) { if ( p >= md || ( q < rr && a [ p ] > a [ q ])) { t [ s ++ ] = a [ q ++ ]; // ans += md - p; } else t [ s ++ ] = a [ p ++ ]; } for ( int i = ll ; i < rr ; ++ i ) a [ i ] = t [ i ]; } \u7531\u4e8e || \u662f\u77ed\u8def\u8fd0\u7b97\u7b26\uff0c\u8fd9\u91cc\u9762 if \u5224\u65ad\u7684\u60c5\u51b5\u662f \u201c\u7b2c\u4e00\u90e8\u5206\u5df2\u7ecf\u5b8c\u5168\u5408\u5e76\u5b8c\u4e86\u201d \u6216\u8005 \u201c\u4e24\u4e2a\u90fd\u6ca1\u6709\u5408\u5e76\u5b8c\uff0c\u4e14\u524d\u4e00\u4e2a\u7684\u961f\u9996\u8981\u5927\u4e8e\u540e\u4e00\u4e2a\u201d\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u662f\u8981\u628a\u540e\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u961f\u9996\u653e\u5230\u65b0\u5e8f\u5217\u7684\u5f53\u524d\u4f4d\u7f6e\u4e2d\u3002 \u9006\u5e8f\u5bf9 \u00b6 \u5f52\u5e76\u6392\u5e8f\u8fd8\u53ef\u4ee5\u7528\u6765\u6c42\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002 \u6240\u8c13\u9006\u5e8f\u5bf9\uff0c\u5c31\u662f\u6570\u5bf9 (i, j) (i, j) \uff0c\u6ee1\u8db3 a[i] > a[j] a[i] > a[j] \u4e14 i < j i < j \u3002 \u53ef\u4ee5\u7528 \u6811\u72b6\u6570\u7ec4 \u3001 \u7ebf\u6bb5\u6811 \u7b49\u6570\u636e\u7ed3\u6784\u6765\u6c42\uff0c\u4e5f\u53ef\u4ee5\u7528\u5f52\u5e76\u6392\u5e8f\u6765\u6c42\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u4e0a\u9762\u5f52\u5e76\u6392\u5e8f\u4e2d\u95f4\u6ce8\u91ca\u6389\u7684 ans += md - p \u5c31\u662f\u5728\u7edf\u8ba1\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u662f\u56e0\u4e3a\uff0c\u90a3\u91cc\u628a\u9760\u540e\u7684\u6570\u653e\u5230\u524d\u9762\u4e86\uff08\u8f83\u5c0f\u7684\u6570\u653e\u5728\u524d\u9762\uff09\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u7684\u539f\u6765\u4f4d\u7f6e\u4ee5\u524d\u7684\u3001\u6bd4\u5b83\u5927\u7684\u6570\u90fd\u4f1a\u548c\u4ed6\u5f62\u6210\u9006\u5e8f\u5bf9\uff0c\u800c\u8fd9\u4e2a\u4e2a\u6570\u5c31\u662f\u8fd8\u6ca1\u6709\u5408\u5e76\u8fdb\u53bb\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5373\u4e3a md - p \u3002 \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(n \\log n) O(n \\log n) \u3002 \u53c2\u8003 \u00b6 https://www.geeksforgeeks.org/merge-sort/ \u5feb\u901f\u6392\u5e8f \u00b6 \u5feb\u901f\u6392\u5e8f\u662f \u5206\u6cbb \u5730\u6765\u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\u3002 \u5feb\u901f\u6392\u5e8f\u5206\u4e3a\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5c06\u6570\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff08\u4e0d\u662f\u76f4\u63a5\u5206\uff0c\u8981\u6c42\u4fdd\u8bc1\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff09 \u9012\u5f52\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u4e2d\u5206\u522b\u8fdb\u884c\u5feb\u901f\u6392\u5e8f \u4e0d\u7528\u5408\u5e76\uff0c\u56e0\u4e3a\u6b64\u65f6\u6570\u5217\u5df2\u7ecf\u5b8c\u5168\u6709\u5e8f \u548c\u5f52\u5e76\u6392\u5e8f\u4e0d\u540c\uff0c\u7b2c\u4e00\u6b65\u5e76\u4e0d\u662f\u76f4\u63a5\u5206\u6210\u524d\u540e\u4e24\u4e2a\u5e8f\u5217\uff0c\u800c\u662f\u5728\u5206\u7684\u8fc7\u7a0b\u4e2d\u8981\u4fdd\u8bc1\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\u3002 \u7b2c\u4e09\u6b65\u4e2d\u7684\u5e8f\u5217\u5df2\u7ecf\u5206\u522b\u6709\u5e8f\u4e14\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7684\u6570\u90fd\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u6570\uff0c\u6240\u4ee5\u76f4\u63a5\u62fc\u63a5\u8d77\u6765\u5c31\u597d\u4e86\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u7b2c\u4e00\u6b65\u8981\u662f\u8981\u628a\u6570\u5217\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u7136\u540e\u4fdd\u8bc1\u524d\u4e00\u4e2a\u5b50\u6570\u5217\u4e2d\u7684\u6570\u90fd\u5c0f\u4e8e\u540e\u4e00\u4e2a\u5b50\u6570\u5217\u4e2d\u7684\u6570\u3002 \u600e\u4e48\u64cd\u4f5c\u5462\uff1f\u4e3a\u4e86\u4fdd\u8bc1\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e00\u822c\u662f\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6570 m \u6765\u5f53\u505a\u4e24\u4e2a\u5b50\u6570\u5217\u7684\u5206\u754c\u3002 \u4e4b\u540e\uff0c\u7ef4\u62a4\u4e00\u524d\u4e00\u540e\u4e24\u4e2a\u6307\u9488 p \u548c q\uff0c\u4f9d\u6b21\u8003\u8651\u5f53\u524d\u7684\u6570\u662f\u5426\u653e\u5728\u4e86\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\uff08\u524d\u8fd8\u662f\u540e\uff09\uff0c\u5f53\u524d\u4f4d\u7f6e\u653e\u5bf9\u4e86\u4e4b\u540e\uff0c\u518d\u79fb\u52a8\u6307\u9488\u7ee7\u7eed\u5904\u7406\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u3002 \u5982\u679c\u5f53\u524d\u7684\u6570\u6ca1\u653e\u5bf9\u5462\uff1f\u6bd4\u5982\u8bf4\u5982\u679c\u540e\u9762\u7684\u6307\u9488 q \u9047\u5230\u4e86\u4e00\u4e2a\u6bd4 m \u5c0f\u7684\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u4ea4\u6362 p \u548c q \u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u518d\u628a p \u5411\u540e\u79fb\u4e00\u4f4d\u3002 \u5176\u5b9e\uff0c\u5feb\u901f\u6392\u5e8f\u6ca1\u6709\u6307\u5b9a\u5e94\u5982\u4f55\u5177\u4f53\u5b9e\u73b0\u7b2c\u4e00\u6b65\uff0c\u4e0d\u8bba\u662f\u9009\u62e9 m \u7684\u8fc7\u7a0b\u8fd8\u662f\u5212\u5206\u7684\u8fc7\u7a0b\uff0c\u90fd\u4e0d\u662f\u53ea\u6709\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u4e00\u822c\u6211\u4eec\u8bf4\u7684\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5e73\u5747\u4e3a O(N\\log N) O(N\\log N) \uff0c\u6700\u574f\u662f O(n^2) O(n^2) \uff0c\u53ea\u4e0d\u8fc7\u5b9e\u8df5\u4e2d\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8fbe\u5230\u6700\u574f\u60c5\u51b5\u3002 \u5176\u5b9e\uff0c\u5728\u9009\u62e9 m \u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528 Median of Medians \u7b97\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N\\log N) O(N\\log N) \uff0c\u4f46\u662f\u7531\u4e8e j \u5c0f\u5fae\u590d\u6742\uff0c\u5b9e\u8df5\u4e2d\u4e00\u822c\u4e0d\u4f7f\u7528\u3002 STL \u00b6 C \u51fd\u6570\u6a21\u677f\u5e93\u5b9e\u73b0\u4e86\u5feb\u901f\u6392\u5e8f\uff0c\u5373 stdlib.h \u5f53\u4e2d\u7684 qsort \u3002 \u4f46\u5728 OI \u76f8\u5173\u6bd4\u8d5b\u5f53\u4e2d\uff0c\u66f4\u4e3a\u5e38\u89c1\u7684\u5e93\u6392\u5e8f\u51fd\u6570\u662f C++ algorithm \u5e93\u4e2d\u7684 std::sort \u51fd\u6570\u3002 C++ \u6807\u51c6\u5e76\u672a\u4e25\u683c\u8981\u6c42\u6b64\u51fd\u6570\u7684\u5b9e\u73b0\u7b97\u6cd5\uff0c\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u3002 \u65e7\u7248 C++ \u6807\u51c6\u4e2d\u4ec5\u8981\u6c42\u5b83\u7684 \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \u7684\uff0c\u4f46\u5728 C++11 \u4e2d\u8981\u6c42\u5b83\u7684 \u6700\u574f \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \u7684\u3002\u53ef\u4ee5\u67e5\u9605 std::sort() \u5728 libstdc++ \u548c libc++ \u4e2d\u4f7f\u7528\u7684\u90fd\u662f Introsort \u3002 Introsort \u9650\u5236\u4e86\u5feb\u901f\u6392\u5e8f\u7684\u5206\u6cbb\u6df1\u5ea6\uff0c\u5f53\u5206\u6cbb\u8fbe\u5230\u4e00\u5b9a\u6df1\u5ea6\u4e4b\u540e\uff0c\u6539\u7528\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N\\log N) O(N\\log N) \u7684\u6392\u5e8f\u7b97\u6cd5\uff08\u6bd4\u5982\u5806\u6392\u5e8f\uff09\u6765\u7ed9\u5b50\u6570\u7ec4\u6392\u5e8f\u3002 Introsort \u7684\u8fd9\u4e2a\u9650\u5236\u4f7f\u5f97\u5b83\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \u7684\u3002 \u5feb\u901f\u7528\u6cd5\uff1a 1 2 3 // a[0] .. a[n - 1] \u662f\u653e\u4e86\u5143\u7d20\u7684 std :: sort ( a , a + n ); // \u8fd9\u53e5\u4ee3\u7801\u76f4\u63a5\u4fee\u6539 a \u6570\u7ec4\u91cc\u7684\u5143\u7d20\u987a\u5e8f\uff0c\u4f7f\u5f97\u73b0\u5728\u5b83\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684 \u7ebf\u6027\u627e\u7b2c k \u5927\u7684\u6570 \u00b6 \u627e\u7b2c k \u5927\u7684\u6570\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5148\u6392\u5e8f\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u7b2c k \u5927\u7684\u4f4d\u7f6e\u7684\u5143\u7d20\u3002\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u6765\u8bf4\u5f88\u4e0d\u5212\u7b97\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6709 O(n) O(n) \u7684\u89e3\u6cd5\u3002 \u8003\u8651\u5feb\u901f\u6392\u5e8f\u7684\u5212\u5206\u8fc7\u7a0b\uff0c\u5728\u5feb\u901f\u6392\u5e8f\u7684 \u201c\u5212\u5206\u201d \u7ed3\u675f\u540e\uff0c\u6570\u5217 A[p \\cdots r]] A[p \\cdots r]] \u88ab\u5206\u6210\u4e86 A[p \\cdots q] A[p \\cdots q] \u548c A[q+1 \\cdots r] A[q+1 \\cdots r] \uff0c\u6b64\u65f6\u53ef\u4ee5\u6309\u7167\u5de6\u8fb9\u5143\u7d20\u7684\u4e2a\u6570\uff08 q - p + 1 q - p + 1 \uff09\u548c k \u7684\u5927\u5c0f\u5173\u7cfb\u6765\u5224\u65ad\u662f\u53ea\u5728\u5de6\u8fb9\u8fd8\u662f\u53ea\u5728\u53f3\u8fb9\u9012\u5f52\u5730\u6c42\u89e3\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u5728\u671f\u671b\u610f\u4e49\u4e0b\uff0c\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 \u53c2\u8003 \u00b6 https://stackoverflow.com/questions/22339240/what-algorithms-are-used-in-c11-stdsort-in-different-stl-implementations https://en.cppreference.com/w/cpp/algorithm/sort \u8ba1\u6570\u6392\u5e8f \u00b6 \u8ba1\u6570\u6392\u5e8f\u53ef\u4ee5\u5728 O(n) O(n) \u7684\u65f6\u95f4\u5185\u6392\u5e8f\uff0c\u4f46\u662f\u5b83\u8981\u6c42\u6240\u6709\u7684\u6570\u90fd\u51fa\u73b0\u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\u3002 \u6ce8 \u6ce8\u610f\u533a\u5206 \u57fa\u6570\u6392\u5e8f \u7b97\u6cd5\u6d41\u7a0b\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u8f93\u51fa\u3002 \u4e00\u822c\u8003\u8651\u7684\u662f\u67d0\u4e00\u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u4f46\u662f\u8ba1\u6570\u6392\u5e8f\u4e5f\u53ef\u4ee5\u548c \u79bb\u6563\u5316 \u4e00\u8d77\u4f7f\u7528\uff0c\u6765\u5bf9\u6d6e\u70b9\u6570\u3001\u5927\u6574\u6570\u8fdb\u884c\u8ba1\u6570\u6392\u5e8f\u3002 \u53c2\u8003 \u00b6 http://atool.org/sort.php ATool \u7684\u6392\u5e8f\u6f14\u793a\u52a8\u753b https://www.geeksforgeeks.org/counting-sort/ \u6392\u5e8f\u7684\u5e94\u7528 \u00b6 \u501f\u52a9\u6392\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u964d\u4f4e\u6c42\u89e3\u95ee\u9898\u6240\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5217\uff0c\u4f60\u9700\u8981\u68c0\u67e5\u5176\u4e2d\u662f\u5426\u6709\u5143\u7d20\u76f8\u7b49\u3002 \u4e00\u4e2a\u6734\u7d20\u7684\u505a\u6cd5\u662f\u68c0\u67e5\u6bcf\u4e00\u4e2a\u6570\u5bf9\uff0c\u5e76\u5224\u65ad\u8fd9\u4e00\u5bf9\u6570\u662f\u5426\u76f8\u7b49\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u3002 \u6211\u4eec\u4e0d\u59a8\u5148\u5bf9\u8fd9\u4e00\u5217\u6570\u6392\u5e8f\uff0c\u4e4b\u540e\u4e0d\u96be\u53d1\u73b0\uff1a\u5982\u679c\u6709\u76f8\u7b49\u7684\u4e24\u4e2a\u6570\uff0c\u5b83\u4eec\u4e00\u5b9a\u5728\u65b0\u6570\u5217\u4e2d\u5904\u4e8e\u76f8\u90bb\u7684\u4f4d\u7f6e\u4e0a\u3002\u8fd9\u65f6\uff0c\u53ea\u9700\u8981 O(n) O(n) \u5730\u626b\u4e00\u904d\u65b0\u6570\u5217\u4e86\u3002\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6392\u5e8f\u7684\u590d\u6742\u5ea6\uff08 O(n\\log n) O(n\\log n) \uff09\u3002 \u6392\u5e8f\u4e5f\u662f \u4e8c\u5206\u67e5\u627e \u6240\u8981\u505a\u7684\u9884\u5904\u7406\u5de5\u4f5c\u3002\u5728\u6392\u5e8f\u540e\u4f7f\u7528 \u4e8c\u5206\u67e5\u627e \uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5728\u5e8f\u5217\u4e2d\u67e5\u627e\u6307\u5b9a\u7684\u5143\u7d20\u3002","title":"\u6392\u5e8f"},{"location":"basic/sort/#_1","text":"\u7a33\u5b9a\u6027\u662f\u6307\u76f8\u7b49\u7684\u5143\u7d20\u7ecf\u8fc7\u6392\u5e8f\u4e4b\u540e\u76f8\u5bf9\u987a\u5e8f\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8\u3002 \u6211\u4eec\u5e38\u7528\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u6392\u5e8f\uff0c\u800c\u5feb\u901f\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f\u3002","title":"\u7a33\u5b9a\u6027"},{"location":"basic/sort/#_2","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u7528\u6765\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u548c\u8f93\u5165\u89c4\u6a21\u7684\u5173\u7cfb\uff0c\u7c7b\u4f3c\u7684\u6709\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u7528\u6765\u63cf\u8ff0\u7b97\u6cd5\u7684\u7a7a\u95f4\u6d88\u8017\u7684\u89c4\u6a21\u3002 \u7b80\u5355\u8ba1\u7b97\u590d\u6742\u5ea6\u7684\u65b9\u6cd5\u4e00\u822c\u662f\u7edf\u8ba1 \u201c\u7b80\u5355\u64cd\u4f5c\u201d \u7684\u6267\u884c\u6b21\u6570\uff0c\u6709\u65f6\u5019\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6570\u5faa\u73af\u7684\u5c42\u6570\u6765\u8fd1\u4f3c\u4f30\u8ba1\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u4e3a\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u6700\u597d\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\u7b49\u3002OI \u7ade\u8d5b\u4e2d\u8981\u8003\u8651\u7684\u4e00\u822c\u662f\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5b83\u4ee3\u8868\u7684\u662f\u7b97\u6cd5\u8fd0\u884c\u6c34\u5e73\u7684\u4e0b\u754c\uff0c\u5728\u8bc4\u6d4b\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u66f4\u5dee\u7684\u7ed3\u679c\u4e86\u3002 \u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u9650\u662f O(n\\log n) O(n\\log n) \u7684\u3002 \u5f53\u7136\u4e5f\u6709\u4e0d\u662f O(n\\log n) O(n\\log n) \u7684\uff0c\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \uff0c\u4f46\u662f\u5b83\u662f\u5728\u300c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u300d\uff0c\u5b83\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O( O( \u6240\u6392\u5e8f\u7684\u6700\u5927\u6570 ) )","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"basic/sort/#_3","text":"\u5192\u6ce1\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u65b9\u6cd5\u3002 \u4ee5\u5347\u5e8f\u4e3a\u4f8b\uff0c\u5192\u6ce1\u6392\u5e8f\u6bcf\u6b21\u68c0\u67e5\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u9762\u7684\u5143\u7d20\u5927\u4e8e\u540e\u9762\u7684\u5143\u7d20\uff0c\u5c31\u5c06\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u3002\u5f53\u6ca1\u6709\u76f8\u90bb\u7684\u5143\u7d20\u9700\u8981\u4ea4\u6362\u65f6\uff0c\u6392\u5e8f\u5c31\u5b8c\u6210\u4e86\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u626b\u63cf n n \u904d\u6570\u7ec4\u624d\u80fd\u5b8c\u6210\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 void bubble_sort () { for ( int i = 1 ; i <= n ; i ++ ) { bool flag = false ; for ( int j = 1 ; j < n ; j ++ ) if ( a [ j ] > a [ j + 1 ]) { flag = true ; int t = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = t ; } if ( ! flag ) break ; //\u5982\u679c\u6ca1\u6709\u6267\u884c\u4ea4\u6362\u64cd\u4f5c\uff0c\u8bf4\u660e\u6570\u5217\u5df2\u7ecf\u6709\u5e8f } } \u5728\u5e8f\u5217\u5b8c\u5168\u6709\u5e8f\u65f6\uff0c\u8be5\u7b97\u6cd5\u53ea\u9700\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u4e0d\u7528\u6267\u884c\u4efb\u4f55\u4ea4\u6362\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5192\u6ce1\u6392\u5e8f\u8981\u6267\u884c (n-1) \\* n/2 (n-1) \\* n/2 \u6b21\u4ea4\u6362\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u5192\u6ce1\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(n^2) O(n^2) \u3002","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"basic/sort/#_4","text":"\u5f52\u5e76\u6392\u5e8f\u662f \u5206\u6cbb \u5730\u6765\u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\u3002 \u5f52\u5e76\u6392\u5e8f\u5206\u4e3a\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5c06\u6570\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff08\u76f4\u63a5\u5206\uff0c\u800c\u4e0d\u662f\u50cf\u5feb\u901f\u6392\u5e8f\u90a3\u6837\u8981\u6c42\u4fdd\u8bc1\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff09 \u9012\u5f52\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u4e2d\u5206\u522b\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f \u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217 \u4e0d\u96be\u53d1\u73b0\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u662f\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u524d\u4e24\u6b65\u90fd\u5f88\u597d\u5b9e\u73b0\u3002 \u5176\u5b9e\u5408\u5e76\u7684\u65f6\u5019\u4e5f\u4e0d\u96be\u64cd\u4f5c\u3002\u6ce8\u610f\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u5728\u7b2c\u4e8c\u6b65\u4e2d\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u90fd\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u7b2c\u4e09\u6b65\u4e2d\u5b9e\u9645\u4e0a\u662f\u60f3\u8981\u628a\u4e24\u4e2a \u6709\u5e8f \u6570\u5217\u5408\u5e76\u8d77\u6765\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void merge ( int ll , int rr ) { // \u7528\u6765\u628a a[ll.. rr - 1] \u8fd9\u4e00\u533a\u95f4\u7684\u6570\u6392\u5e8f\u3002 t \u6570\u7ec4\u662f\u4e34\u65f6\u5b58\u653e\u6709\u5e8f\u7684\u7248\u672c\u7528\u7684\u3002 if ( rr - ll <= 1 ) return ; int md = ll + ( rr - ll >> 1 ); merge ( ll , md ); merge ( md , rr ); int p = ll , q = md , s = ll ; while ( s < rr ) { if ( p >= md || ( q < rr && a [ p ] > a [ q ])) { t [ s ++ ] = a [ q ++ ]; // ans += md - p; } else t [ s ++ ] = a [ p ++ ]; } for ( int i = ll ; i < rr ; ++ i ) a [ i ] = t [ i ]; } \u7531\u4e8e || \u662f\u77ed\u8def\u8fd0\u7b97\u7b26\uff0c\u8fd9\u91cc\u9762 if \u5224\u65ad\u7684\u60c5\u51b5\u662f \u201c\u7b2c\u4e00\u90e8\u5206\u5df2\u7ecf\u5b8c\u5168\u5408\u5e76\u5b8c\u4e86\u201d \u6216\u8005 \u201c\u4e24\u4e2a\u90fd\u6ca1\u6709\u5408\u5e76\u5b8c\uff0c\u4e14\u524d\u4e00\u4e2a\u7684\u961f\u9996\u8981\u5927\u4e8e\u540e\u4e00\u4e2a\u201d\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u662f\u8981\u628a\u540e\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u961f\u9996\u653e\u5230\u65b0\u5e8f\u5217\u7684\u5f53\u524d\u4f4d\u7f6e\u4e2d\u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"basic/sort/#_5","text":"\u5f52\u5e76\u6392\u5e8f\u8fd8\u53ef\u4ee5\u7528\u6765\u6c42\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002 \u6240\u8c13\u9006\u5e8f\u5bf9\uff0c\u5c31\u662f\u6570\u5bf9 (i, j) (i, j) \uff0c\u6ee1\u8db3 a[i] > a[j] a[i] > a[j] \u4e14 i < j i < j \u3002 \u53ef\u4ee5\u7528 \u6811\u72b6\u6570\u7ec4 \u3001 \u7ebf\u6bb5\u6811 \u7b49\u6570\u636e\u7ed3\u6784\u6765\u6c42\uff0c\u4e5f\u53ef\u4ee5\u7528\u5f52\u5e76\u6392\u5e8f\u6765\u6c42\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u4e0a\u9762\u5f52\u5e76\u6392\u5e8f\u4e2d\u95f4\u6ce8\u91ca\u6389\u7684 ans += md - p \u5c31\u662f\u5728\u7edf\u8ba1\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u662f\u56e0\u4e3a\uff0c\u90a3\u91cc\u628a\u9760\u540e\u7684\u6570\u653e\u5230\u524d\u9762\u4e86\uff08\u8f83\u5c0f\u7684\u6570\u653e\u5728\u524d\u9762\uff09\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u7684\u539f\u6765\u4f4d\u7f6e\u4ee5\u524d\u7684\u3001\u6bd4\u5b83\u5927\u7684\u6570\u90fd\u4f1a\u548c\u4ed6\u5f62\u6210\u9006\u5e8f\u5bf9\uff0c\u800c\u8fd9\u4e2a\u4e2a\u6570\u5c31\u662f\u8fd8\u6ca1\u6709\u5408\u5e76\u8fdb\u53bb\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5373\u4e3a md - p \u3002 \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(n \\log n) O(n \\log n) \u3002","title":"\u9006\u5e8f\u5bf9"},{"location":"basic/sort/#_6","text":"https://www.geeksforgeeks.org/merge-sort/","title":"\u53c2\u8003"},{"location":"basic/sort/#_7","text":"\u5feb\u901f\u6392\u5e8f\u662f \u5206\u6cbb \u5730\u6765\u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\u3002 \u5feb\u901f\u6392\u5e8f\u5206\u4e3a\u4e09\u4e2a\u8fc7\u7a0b\uff1a \u5c06\u6570\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff08\u4e0d\u662f\u76f4\u63a5\u5206\uff0c\u8981\u6c42\u4fdd\u8bc1\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff09 \u9012\u5f52\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u4e2d\u5206\u522b\u8fdb\u884c\u5feb\u901f\u6392\u5e8f \u4e0d\u7528\u5408\u5e76\uff0c\u56e0\u4e3a\u6b64\u65f6\u6570\u5217\u5df2\u7ecf\u5b8c\u5168\u6709\u5e8f \u548c\u5f52\u5e76\u6392\u5e8f\u4e0d\u540c\uff0c\u7b2c\u4e00\u6b65\u5e76\u4e0d\u662f\u76f4\u63a5\u5206\u6210\u524d\u540e\u4e24\u4e2a\u5e8f\u5217\uff0c\u800c\u662f\u5728\u5206\u7684\u8fc7\u7a0b\u4e2d\u8981\u4fdd\u8bc1\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\u3002 \u7b2c\u4e09\u6b65\u4e2d\u7684\u5e8f\u5217\u5df2\u7ecf\u5206\u522b\u6709\u5e8f\u4e14\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7684\u6570\u90fd\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u6570\uff0c\u6240\u4ee5\u76f4\u63a5\u62fc\u63a5\u8d77\u6765\u5c31\u597d\u4e86\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u7b2c\u4e00\u6b65\u8981\u662f\u8981\u628a\u6570\u5217\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u7136\u540e\u4fdd\u8bc1\u524d\u4e00\u4e2a\u5b50\u6570\u5217\u4e2d\u7684\u6570\u90fd\u5c0f\u4e8e\u540e\u4e00\u4e2a\u5b50\u6570\u5217\u4e2d\u7684\u6570\u3002 \u600e\u4e48\u64cd\u4f5c\u5462\uff1f\u4e3a\u4e86\u4fdd\u8bc1\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e00\u822c\u662f\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6570 m \u6765\u5f53\u505a\u4e24\u4e2a\u5b50\u6570\u5217\u7684\u5206\u754c\u3002 \u4e4b\u540e\uff0c\u7ef4\u62a4\u4e00\u524d\u4e00\u540e\u4e24\u4e2a\u6307\u9488 p \u548c q\uff0c\u4f9d\u6b21\u8003\u8651\u5f53\u524d\u7684\u6570\u662f\u5426\u653e\u5728\u4e86\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\uff08\u524d\u8fd8\u662f\u540e\uff09\uff0c\u5f53\u524d\u4f4d\u7f6e\u653e\u5bf9\u4e86\u4e4b\u540e\uff0c\u518d\u79fb\u52a8\u6307\u9488\u7ee7\u7eed\u5904\u7406\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u3002 \u5982\u679c\u5f53\u524d\u7684\u6570\u6ca1\u653e\u5bf9\u5462\uff1f\u6bd4\u5982\u8bf4\u5982\u679c\u540e\u9762\u7684\u6307\u9488 q \u9047\u5230\u4e86\u4e00\u4e2a\u6bd4 m \u5c0f\u7684\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u4ea4\u6362 p \u548c q \u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u518d\u628a p \u5411\u540e\u79fb\u4e00\u4f4d\u3002 \u5176\u5b9e\uff0c\u5feb\u901f\u6392\u5e8f\u6ca1\u6709\u6307\u5b9a\u5e94\u5982\u4f55\u5177\u4f53\u5b9e\u73b0\u7b2c\u4e00\u6b65\uff0c\u4e0d\u8bba\u662f\u9009\u62e9 m \u7684\u8fc7\u7a0b\u8fd8\u662f\u5212\u5206\u7684\u8fc7\u7a0b\uff0c\u90fd\u4e0d\u662f\u53ea\u6709\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u4e00\u822c\u6211\u4eec\u8bf4\u7684\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5e73\u5747\u4e3a O(N\\log N) O(N\\log N) \uff0c\u6700\u574f\u662f O(n^2) O(n^2) \uff0c\u53ea\u4e0d\u8fc7\u5b9e\u8df5\u4e2d\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8fbe\u5230\u6700\u574f\u60c5\u51b5\u3002 \u5176\u5b9e\uff0c\u5728\u9009\u62e9 m \u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528 Median of Medians \u7b97\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N\\log N) O(N\\log N) \uff0c\u4f46\u662f\u7531\u4e8e j \u5c0f\u5fae\u590d\u6742\uff0c\u5b9e\u8df5\u4e2d\u4e00\u822c\u4e0d\u4f7f\u7528\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"basic/sort/#stl","text":"C \u51fd\u6570\u6a21\u677f\u5e93\u5b9e\u73b0\u4e86\u5feb\u901f\u6392\u5e8f\uff0c\u5373 stdlib.h \u5f53\u4e2d\u7684 qsort \u3002 \u4f46\u5728 OI \u76f8\u5173\u6bd4\u8d5b\u5f53\u4e2d\uff0c\u66f4\u4e3a\u5e38\u89c1\u7684\u5e93\u6392\u5e8f\u51fd\u6570\u662f C++ algorithm \u5e93\u4e2d\u7684 std::sort \u51fd\u6570\u3002 C++ \u6807\u51c6\u5e76\u672a\u4e25\u683c\u8981\u6c42\u6b64\u51fd\u6570\u7684\u5b9e\u73b0\u7b97\u6cd5\uff0c\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u3002 \u65e7\u7248 C++ \u6807\u51c6\u4e2d\u4ec5\u8981\u6c42\u5b83\u7684 \u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \u7684\uff0c\u4f46\u5728 C++11 \u4e2d\u8981\u6c42\u5b83\u7684 \u6700\u574f \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \u7684\u3002\u53ef\u4ee5\u67e5\u9605 std::sort() \u5728 libstdc++ \u548c libc++ \u4e2d\u4f7f\u7528\u7684\u90fd\u662f Introsort \u3002 Introsort \u9650\u5236\u4e86\u5feb\u901f\u6392\u5e8f\u7684\u5206\u6cbb\u6df1\u5ea6\uff0c\u5f53\u5206\u6cbb\u8fbe\u5230\u4e00\u5b9a\u6df1\u5ea6\u4e4b\u540e\uff0c\u6539\u7528\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N\\log N) O(N\\log N) \u7684\u6392\u5e8f\u7b97\u6cd5\uff08\u6bd4\u5982\u5806\u6392\u5e8f\uff09\u6765\u7ed9\u5b50\u6570\u7ec4\u6392\u5e8f\u3002 Introsort \u7684\u8fd9\u4e2a\u9650\u5236\u4f7f\u5f97\u5b83\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \u7684\u3002 \u5feb\u901f\u7528\u6cd5\uff1a 1 2 3 // a[0] .. a[n - 1] \u662f\u653e\u4e86\u5143\u7d20\u7684 std :: sort ( a , a + n ); // \u8fd9\u53e5\u4ee3\u7801\u76f4\u63a5\u4fee\u6539 a \u6570\u7ec4\u91cc\u7684\u5143\u7d20\u987a\u5e8f\uff0c\u4f7f\u5f97\u73b0\u5728\u5b83\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684","title":"STL"},{"location":"basic/sort/#k","text":"\u627e\u7b2c k \u5927\u7684\u6570\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5148\u6392\u5e8f\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u7b2c k \u5927\u7684\u4f4d\u7f6e\u7684\u5143\u7d20\u3002\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\log N) O(N\\log N) \uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u6765\u8bf4\u5f88\u4e0d\u5212\u7b97\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6709 O(n) O(n) \u7684\u89e3\u6cd5\u3002 \u8003\u8651\u5feb\u901f\u6392\u5e8f\u7684\u5212\u5206\u8fc7\u7a0b\uff0c\u5728\u5feb\u901f\u6392\u5e8f\u7684 \u201c\u5212\u5206\u201d \u7ed3\u675f\u540e\uff0c\u6570\u5217 A[p \\cdots r]] A[p \\cdots r]] \u88ab\u5206\u6210\u4e86 A[p \\cdots q] A[p \\cdots q] \u548c A[q+1 \\cdots r] A[q+1 \\cdots r] \uff0c\u6b64\u65f6\u53ef\u4ee5\u6309\u7167\u5de6\u8fb9\u5143\u7d20\u7684\u4e2a\u6570\uff08 q - p + 1 q - p + 1 \uff09\u548c k \u7684\u5927\u5c0f\u5173\u7cfb\u6765\u5224\u65ad\u662f\u53ea\u5728\u5de6\u8fb9\u8fd8\u662f\u53ea\u5728\u53f3\u8fb9\u9012\u5f52\u5730\u6c42\u89e3\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u5728\u671f\u671b\u610f\u4e49\u4e0b\uff0c\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002","title":"\u7ebf\u6027\u627e\u7b2c k \u5927\u7684\u6570"},{"location":"basic/sort/#_8","text":"https://stackoverflow.com/questions/22339240/what-algorithms-are-used-in-c11-stdsort-in-different-stl-implementations https://en.cppreference.com/w/cpp/algorithm/sort","title":"\u53c2\u8003"},{"location":"basic/sort/#_9","text":"\u8ba1\u6570\u6392\u5e8f\u53ef\u4ee5\u5728 O(n) O(n) \u7684\u65f6\u95f4\u5185\u6392\u5e8f\uff0c\u4f46\u662f\u5b83\u8981\u6c42\u6240\u6709\u7684\u6570\u90fd\u51fa\u73b0\u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\u3002 \u6ce8 \u6ce8\u610f\u533a\u5206 \u57fa\u6570\u6392\u5e8f \u7b97\u6cd5\u6d41\u7a0b\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u8f93\u51fa\u3002 \u4e00\u822c\u8003\u8651\u7684\u662f\u67d0\u4e00\u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u4f46\u662f\u8ba1\u6570\u6392\u5e8f\u4e5f\u53ef\u4ee5\u548c \u79bb\u6563\u5316 \u4e00\u8d77\u4f7f\u7528\uff0c\u6765\u5bf9\u6d6e\u70b9\u6570\u3001\u5927\u6574\u6570\u8fdb\u884c\u8ba1\u6570\u6392\u5e8f\u3002","title":"\u8ba1\u6570\u6392\u5e8f"},{"location":"basic/sort/#_10","text":"http://atool.org/sort.php ATool \u7684\u6392\u5e8f\u6f14\u793a\u52a8\u753b https://www.geeksforgeeks.org/counting-sort/","title":"\u53c2\u8003"},{"location":"basic/sort/#_11","text":"\u501f\u52a9\u6392\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u964d\u4f4e\u6c42\u89e3\u95ee\u9898\u6240\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5217\uff0c\u4f60\u9700\u8981\u68c0\u67e5\u5176\u4e2d\u662f\u5426\u6709\u5143\u7d20\u76f8\u7b49\u3002 \u4e00\u4e2a\u6734\u7d20\u7684\u505a\u6cd5\u662f\u68c0\u67e5\u6bcf\u4e00\u4e2a\u6570\u5bf9\uff0c\u5e76\u5224\u65ad\u8fd9\u4e00\u5bf9\u6570\u662f\u5426\u76f8\u7b49\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u3002 \u6211\u4eec\u4e0d\u59a8\u5148\u5bf9\u8fd9\u4e00\u5217\u6570\u6392\u5e8f\uff0c\u4e4b\u540e\u4e0d\u96be\u53d1\u73b0\uff1a\u5982\u679c\u6709\u76f8\u7b49\u7684\u4e24\u4e2a\u6570\uff0c\u5b83\u4eec\u4e00\u5b9a\u5728\u65b0\u6570\u5217\u4e2d\u5904\u4e8e\u76f8\u90bb\u7684\u4f4d\u7f6e\u4e0a\u3002\u8fd9\u65f6\uff0c\u53ea\u9700\u8981 O(n) O(n) \u5730\u626b\u4e00\u904d\u65b0\u6570\u5217\u4e86\u3002\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6392\u5e8f\u7684\u590d\u6742\u5ea6\uff08 O(n\\log n) O(n\\log n) \uff09\u3002 \u6392\u5e8f\u4e5f\u662f \u4e8c\u5206\u67e5\u627e \u6240\u8981\u505a\u7684\u9884\u5904\u7406\u5de5\u4f5c\u3002\u5728\u6392\u5e8f\u540e\u4f7f\u7528 \u4e8c\u5206\u67e5\u627e \uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5728\u5e8f\u5217\u4e2d\u67e5\u627e\u6307\u5b9a\u7684\u5143\u7d20\u3002","title":"\u6392\u5e8f\u7684\u5e94\u7528"},{"location":"dp/","text":"\u52a8\u6001\u89c4\u5212\u5e94\u7528\u4e8e\u5b50\u95ee\u9898\u91cd\u53e0\u7684\u60c5\u51b5\uff1a \u8981\u53bb\u523b\u753b\u6700\u4f18\u89e3\u7684\u7ed3\u6784\u7279\u5f81\uff1b \u5c1d\u8bd5\u9012\u5f52\u5730\u5b9a\u4e49\u6700\u4f18\u89e3\u7684\u503c\uff08\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u8003\u8651\u4ece i - 1 i - 1 \u8f6c\u79fb\u5230 i i \uff09\uff1b \u8ba1\u7b97\u6700\u4f18\u89e3\uff1b \u5229\u7528\u8ba1\u7b97\u51fa\u7684\u4fe1\u606f\u6784\u9020\u4e00\u4e2a\u6700\u4f18\u89e3\u3002 \u94a2\u6761\u5207\u5272 \u00b6 \u7ed9\u5b9a\u4e00\u6bb5\u94a2\u6761\uff0c\u548c\u4e0d\u540c\u957f\u5ea6\u7684\u4ef7\u683c\uff0c\u95ee\u5982\u4f55\u5207\u5272\u4f7f\u5f97\u603b\u4ef7\u683c\u6700\u5927\u3002 \u4e3a\u4e86\u6c42\u89e3\u89c4\u6a21\u4e3a n n \u7684\u539f\u95ee\u9898\uff0c\u6211\u4eec\u5148\u6c42\u89e3\u5f62\u5f0f\u5b8c\u5168\u4e00\u6837\uff0c\u4f46\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002 \u5373\u5f53\u5b8c\u6210\u9996\u6b21\u5207\u5272\u540e\uff0c\u6211\u4eec\u5c06\u4e24\u6bb5\u94a2\u6761\u770b\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u94a2\u6761\u5207\u5272\u95ee\u9898\u5b9e\u4f8b\u3002 \u6211\u4eec\u901a\u8fc7\u7ec4\u5408\u76f8\u5173\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u5e76\u5728\u6240\u6709\u53ef\u80fd\u7684\u4e24\u6bb5\u5207\u5272\u65b9\u6848\u4e2d\u9009\u53d6\u7ec4\u5408\u6536\u76ca\u6700\u5927\u8005\uff0c\u6784\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002 \u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7531\u76f8\u5173\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7ec4\u5408\u800c\u6210\uff0c\u800c\u8fd9\u4e9b\u5b50\u95ee\u9898\u53ef\u4ee5\u72ec\u7acb\u6c42\u89e3\u3002 \u52a8\u6001\u89c4\u5212\u7684\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff1a \u5e26\u5907\u5fd8\u7684\u81ea\u9876\u5411\u4e0b\u6cd5 \uff08\u8bb0\u5fc6\u5316\u641c\u7d22\uff09\uff1b \u81ea\u5e95\u5411\u4e0a\u6cd5 \uff08\u5c06\u5b50\u95ee\u9898\u6309\u89c4\u6a21\u6392\u5e8f\uff0c\u7c7b\u4f3c\u4e8e\u9012\u63a8\uff09\u3002 \u7b97\u5bfc\u7528\u5b50\u95ee\u9898\u56fe\u4e0a\u6309\u7167\u9006\u62d3\u6251\u5e8f\u6c42\u89e3\u95ee\u9898\uff0c\u5f15\u51fa\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 \u91cd\u6784\u89e3\uff08\u8f93\u51fa\u65b9\u6848\uff09\uff1a\u8f6c\u79fb\u7684\u65f6\u5019\u8bb0\u5f55\u6700\u4f18\u5b50\u7ed3\u6784\u7684\u4f4d\u7f6e\u3002 \u77e9\u9635\u94fe\u4e58\u6cd5 \u00b6 \u7ed9\u51fa n n \u4e2a\u77e9\u9635\u7684\u5e8f\u5217\uff0c\u5e0c\u671b\u8ba1\u7b97\u4ed6\u4eec\u7684\u4e58\u79ef\uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u4e58\u6cd5\u8fd0\u7b97\uff1f \uff08\u8ba4\u4e3a p \\times q p \\times q \u7684\u77e9\u9635\u4e0e q\\times r q\\times r \u7684\u77e9\u9635\u76f8\u4e58\u4ee3\u4ef7\u662f p\\times q\\times r p\\times q\\times r \u3002\uff09 \u5b8c\u5168\u62ec\u53f7\u5316\u65b9\u6848\u662f\u6307\u8981\u7ed9\u51fa\u8c01\u5148\u548c\u8c01\u4e58\u3002 \u52a8\u6001\u89c4\u5212\u539f\u7406 \u00b6 \u4e24\u4e2a\u8981\u7d20\uff1a \u6700\u4f18\u5b50\u7ed3\u6784 \u00b6 \u5177\u6709\u6700\u4f18\u5b50\u7ed3\u6784\u4e5f\u53ef\u80fd\u662f\u9002\u5408\u7528\u8d2a\u5fc3\u7684\u65b9\u6cd5\u6c42\u89e3\u3002 \u6ce8\u610f\u8981\u786e\u4fdd\u6211\u4eec\u8003\u5bdf\u4e86\u6700\u4f18\u89e3\u4e2d\u7528\u5230\u7684\u6240\u6709\u5b50\u95ee\u9898\u3002 \u8bc1\u660e\u95ee\u9898\u6700\u4f18\u89e3\u7684\u7b2c\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u662f\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\uff1b \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u95ee\u9898\uff0c\u5728\u5176\u53ef\u80fd\u7684\u7b2c\u4e00\u6b65\u9009\u62e9\u4e2d\uff0c\u4f60\u754c\u5b9a\u5df2\u7ecf\u77e5\u9053\u54ea\u79cd\u9009\u62e9\u624d\u4f1a\u5f97\u5230\u6700\u4f18\u89e3\u3002\u4f60\u73b0\u5728\u5e76\u4e0d\u5173\u5fc3\u8fd9\u79cd\u9009\u62e9\u5177\u4f53\u662f\u5982\u4f55\u5f97\u5230\u7684\uff0c\u53ea\u662f\u5047\u5b9a\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u79cd\u9009\u62e9\uff1b \u7ed9\u5b9a\u53ef\u83b7\u5f97\u7684\u6700\u4f18\u89e3\u7684\u9009\u62e9\u540e\uff0c\u786e\u5b9a\u8fd9\u6b21\u9009\u62e9\u4f1a\u4ea7\u751f\u54ea\u4e9b\u5b50\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u6700\u597d\u5730\u523b\u753b\u5b50\u95ee\u9898\u7a7a\u95f4\uff1b \u8bc1\u660e\u4f5c\u4e3a\u6784\u6210\u539f\u95ee\u9898\u6700\u4f18\u89e3\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u5c31\u662f\u5b83\u672c\u8eab\u7684\u6700\u4f18\u89e3\u3002\u65b9\u6cd5\u662f\u53cd\u8bc1\u6cd5\uff0c\u8003\u8651\u52a0\u5165\u67d0\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u4e0d\u662f\u5176\u81ea\u8eab\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4ece\u539f\u95ee\u9898\u7684\u89e3\u4e2d\u7528\u8be5\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u66ff\u6362\u6389\u5f53\u524d\u7684\u975e\u6700\u4f18\u89e3\uff0c\u4ece\u800c\u5f97\u5230\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u66f4\u4f18\u7684\u89e3\uff0c\u4ece\u800c\u4e0e\u539f\u95ee\u9898\u6700\u4f18\u89e3\u7684\u5047\u8bbe\u77db\u76fe\u3002 \u8981\u4fdd\u6301\u5b50\u95ee\u9898\u7a7a\u95f4\u5c3d\u91cf\u7b80\u5355\uff0c\u53ea\u5728\u5fc5\u8981\u65f6\u6269\u5c55\u3002 \u6700\u4f18\u5b50\u7ed3\u6784\u7684\u4e0d\u540c\u4f53\u73b0\u5728\u4e24\u4e2a\u65b9\u9762\uff1a \u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u4e2d\u6d89\u53ca\u591a\u5c11\u4e2a\u5b50\u95ee\u9898\uff1b \u786e\u5b9a\u6700\u4f18\u89e3\u4f7f\u7528\u54ea\u4e9b\u5b50\u95ee\u9898\u65f6\uff0c\u9700\u8981\u8003\u5bdf\u591a\u5c11\u79cd\u9009\u62e9\u3002 \u5b50\u95ee\u9898\u56fe\u4e2d\u6bcf\u4e2a\u5b9a\u70b9\u5bf9\u5e94\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u800c\u9700\u8981\u8003\u5bdf\u7684\u9009\u62e9\u5bf9\u5e94\u5173\u8054\u81f3\u5b50\u95ee\u9898\u9876\u70b9\u7684\u8fb9\u3002 \u7ecf\u5178\u95ee\u9898\uff1a \u65e0\u6743\u6700\u77ed\u8def\u5f84\uff1a \u5177\u6709\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\u3002 \u65e0\u6743\u6700\u957f\uff08\u7b80\u5355\uff09\u8def\u5f84\uff1a \u6b64\u95ee\u9898\u4e0d\u5177\u6709\uff0c\u662f NPC \u7684\u3002\u533a\u522b\u5728\u4e8e\uff0c\u8981\u4fdd\u8bc1\u5b50\u95ee\u9898\u65e0\u5173\uff0c\u5373\u540c\u4e00\u4e2a\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u4e0d\u5f71\u54cd\u53e6\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u3002\u76f8\u5173\uff1a\u6c42\u89e3\u4e00\u4e2a\u5b50\u95ee\u9898\u65f6\u7528\u5230\u4e86\u67d0\u4e9b\u8d44\u6e90\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u8d44\u6e90\u5728\u6c42\u89e3\u5176\u4ed6\u5b50\u95ee\u9898\u65f6\u4e0d\u53ef\u7528\u3002 \u5b50\u95ee\u9898\u91cd\u53e0 \u00b6 \u5b50\u95ee\u9898\u7a7a\u95f4\u8981\u8db3\u591f\u5c0f\uff0c\u5373\u95ee\u9898\u7684\u9012\u5f52\u7b97\u6cd5\u4f1a\u53cd\u590d\u5730\u6c42\u89e3\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u751f\u6210\u65b0\u7684\u5b50\u95ee\u9898\u3002 \u91cd\u6784\u6700\u4f18\u89e3 \u00b6 \u5b58\u8868\u8bb0\u5f55\u6700\u4f18\u5206\u5272\u7684\u4f4d\u7f6e\uff0c\u5c31\u4e0d\u7528\u91cd\u65b0\u6309\u7167\u4ee3\u4ef7\u6765\u91cd\u6784\u3002 \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u00b6 \u5b50\u5e8f\u5217\u5141\u8bb8\u4e0d\u8fde\u7eed\u3002 \u6bcf\u4e2a c[i][j] c[i][j] \u53ea\u4f9d\u8d56\u4e8e c[i - 1][j] c[i - 1][j] \u3001 c[i][j - 1] c[i][j - 1] \u548c c[i - 1][j - 1] c[i - 1][j - 1] \u3002 \u8bb0\u5f55\u6700\u4f18\u65b9\u6848\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u9700\u8981\u989d\u5916\u5efa\u8868\uff08\u4f18\u5316\u7a7a\u95f4\uff09\uff0c\u56e0\u4e3a\u91cd\u65b0\u9009\u62e9\u4e00\u904d\uff08\u8f6c\u79fb\u8fc7\u7a0b\uff09\u4e5f\u662f O(1) O(1) \u7684\u3002 \u6700\u4f18\u4e8c\u53c9\u641c\u7d22\u6811 \u00b6 \u7ed9\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5b9a\u4e49\u4e00\u4e2a\u6743\u503c\uff0c\u95ee\u5982\u4f55\u5b89\u6392\u4f7f\u5f97\u6743\u503c\u548c\u6df1\u5ea6\u7684\u4e58\u79ef\u6700\u5c0f\u3002 \u8003\u8651\u5f53\u4e00\u68f5\u5b50\u6811\u6210\u4e3a\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u65f6\uff0c\u7b54\u6848\uff08\u671f\u671b\u641c\u7d22\u4ee3\u4ef7\uff09\u6709\u4f55\u53d8\u5316\uff1f \u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u90fd\u589e\u52a0\u4e86 1\uff0c\u8fd9\u68f5\u5b50\u6811\u7684\u671f\u671b\u641c\u7d22\u4ee3\u4ef7\u7684\u589e\u52a0\u503c\u5e94\u4e3a\u6240\u6709\u6982\u7387\u4e4b\u548c\u3002 tD / eD \u52a8\u6001\u89c4\u5212\uff1a \u72b6\u6001\u7a7a\u95f4\u662f O(n^t) O(n^t) \u7684\uff0c\u6bcf\u4e00\u9879\u4f9d\u8d56\u5176\u4ed6 O(n^e) O(n^e) \u9879\u3002 \u6700\u957f\u8fde\u7eed\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217 \u00b6 \u5bf9 n \u4e2a\u6570\u6c42\u5b83\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u6c42\u6700\u957f\u7684\u4e0a\u5347\uff08\u4e00\u4e2a\u6570\u6bd4\u4e00\u4e2a\u6570\u5927\uff09\u5b50\u5e8f\u5217\u6709\u591a\u957f\u3002 \u56e0\u4e3a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u4e0e\u4e0a\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 int a [ MAXN ]; int dp () { int now = 0 , ans = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( a [ i ] > a [ i - 1 ]) ans ++ ; now = max ( now , ans ); } return ans ; } \u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217 \u00b6 \u5bf9 n \u4e2a\u6570\u6c42\u5b83\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u6c42\u6700\u957f\u7684\u4e0a\u5347\uff08\u4e00\u4e2a\u6570\u6bd4\u4e00\u4e2a\u6570\u5927\uff09\u5b50\u5e8f\u5217\u6709\u591a\u957f\u3002\u4e0e\u6700\u957f\u8fde\u7eed\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u9700\u8981\u8fd9\u4e2a\u5b50\u5e8f\u5217\u662f\u8fde\u7eed\u7684\u4e86\u3002 \u6c42\u6700\u957f\u5b50\u5e8f\u5217\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\u3002 \u6700\u7b80\u5355\u7684\u7b2c\u4e00\u79cd \u00b6 O\\left(n^2\\right) O\\left(n^2\\right) \u7684\u7b97\u6cd5\u3002\u6bcf\u4e00\u6b21\u91cd\u5934\u626b\u63cf\u627e\u51fa\u6700\u4f73\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [ MAXN ], d [ MAXN ]; int dp () { d [ 1 ] = 1 ; int ans = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = i - 1 ; j < i ; j ++ ) if ( a [ j ] < a [ i ]) { d [ i ] = max ( d [ i ], d [ j ] + 1 ); ans = max ( ans , d [ i ]); } } return ans ; } \u7a0d\u590d\u6742\u7684\u7b2c\u4e8c\u79cd \u00b6 O\\left(n log n\\right) O\\left(n log n\\right) \u7684\u7b97\u6cd5\uff0c\u53c2\u8003\u4e86\u8fd9\u7bc7\u6587\u7ae0 https://www.cnblogs.com/itlqs/p/5743114.html \u3002 \u9996\u5148\uff0c\u5b9a\u4e49 a_1 \\dots a_n a_1 \\dots a_n \u4e3a\u539f\u59cb\u5e8f\u5217\uff0c d d \u4e3a\u5f53\u524d\u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c len len \u4e3a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u90a3\u4e48 d_{len} d_{len} \u5c31\u662f\u957f\u5ea6\u4e3a len len \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u672b\u5c3e\u5143\u7d20\u3002 \u521d\u59cb\u5316\uff1a d_1=a_1,len=1 d_1=a_1,len=1 \u3002 \u73b0\u5728\u6211\u4eec\u5df2\u77e5\u6700\u957f\u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3a 1\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9 i i \u4ece 2 \u5230 n n \u5faa\u73af\uff0c\u4f9d\u6b21\u6c42\u51fa\u524d i i \u4e2a\u5143\u7d20\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u5faa\u73af\u7684\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u597d d d \u8fd9\u4e2a\u6570\u7ec4\u8fd8\u6709 len len \u5c31\u53ef\u4ee5\u4e86\u3002 \u5173\u952e\u5728\u4e8e\u5982\u4f55\u7ef4\u62a4\u3002 \u8003\u8651\u8fdb\u6765\u4e00\u4e2a\u5143\u7d20 a_i a_i \uff1a \u5143\u7d20\u5927\u4e8e d_{len} d_{len} \uff0c\u76f4\u63a5 d_{++len}=a_i d_{++len}=a_i \u5373\u53ef\uff0c\u8fd9\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u3002 \u5143\u7d20\u7b49\u4e8e d_{len} d_{len} \uff0c\u56e0\u4e3a\u524d\u9762\u7684\u5143\u7d20\u90fd\u5c0f\u4e8e\u5b83\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5143\u7d20\u53ef\u4ee5\u76f4\u63a5\u629b\u5f03\u3002 \u5143\u7d20\u5c0f\u4e8e d_{len} d_{len} \uff0c\u627e\u5230 \u7b2c\u4e00\u4e2a \u5927\u4e8e\u5b83\u7684\u5143\u7d20\uff0c\u63d2\u5165\u8fdb\u53bb\uff0c\u5176\u4ed6\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u4e0d\u8981\u3002 \u90a3\u4e48\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 for ( int i = 0 ; i < n ; ++ i ) scanf ( \"%d\" , a + i ); memset ( dp , 0x1f , sizeof dp ); mx = dp [ 0 ]; for ( int i = 0 ; i < n ; ++ i ) { * std :: lower_bound ( dp , dp + n , a [ i ]) = a [ i ]; } ans = 0 ; while ( dp [ ans ] != mx ) ++ ans ; \u7ecf\u5178\u95ee\u9898\uff08\u6765\u81ea\u4e60\u9898\uff09 \u00b6 DAG \u4e2d\u7684\u6700\u957f\u7b80\u5355\u8def\u5f84 \u00b6 dp[i] = \\max(dp[j] + 1), ((j, i) \\in E) dp[i] = \\max(dp[j] + 1), ((j, i) \\in E) \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 \u00b6 dp[i][i + len] = \\begin{cases} dp[i + 1][i + len - 1] + 2, & \\text{if $s[i] = s[i + len]$} \\\\[2ex] \\max(dp[i + 1][i + len], dp[i][i + len - 1]), & \\text{else} \\end{cases} dp[i][i + len] = \\begin{cases} dp[i + 1][i + len - 1] + 2, & \\text{if $s[i] = s[i + len]$} \\\\[2ex] \\max(dp[i + 1][i + len], dp[i][i + len - 1]), & \\text{else} \\end{cases} \u8fb9\u754c\uff1a dp[i][i] = 1 dp[i][i] = 1 \u3002 \u6ce8\u610f\uff1a dp[i][j] dp[i][j] \u8868\u793a\u7684\u662f\u95ed\u533a\u95f4\u3002 \u4e5f\u53ef\u4ee5\u8f6c\u5316\u4e3a LCS \u95ee\u9898\uff0c\u53ea\u9700\u8981\u628a a a \u4e32\u53cd\u8f6c\u5f53\u505a b b \uff0c\u5bf9 a a \u548c b b \u6c42 LCS \u5373\u53ef\u3002 \u8bc1\u660e\u5728 \u8fd9\u91cc \u3002 \u6ce8\u610f\u533a\u5206\u5b50\u4e32\uff08\u8981\u6c42\u8fde\u7eed\uff09\u7684\u95ee\u9898\u3002 \u6700\u957f\u56de\u6587\u5b50\u4e32 \u00b6 O(n^2) O(n^2) \uff1a dp[i] = \\max(dp[j] + 1), s(j + 1 \\cdots i) dp[i] = \\max(dp[j] + 1), s(j + 1 \\cdots i) \u662f\u56de\u6587 O(n) O(n) \uff1a Manacher p[i] p[i] \u8868\u793a\u4ece i i \u5411\u4e24\u4fa7\u5ef6\u4f38\uff08\u5f53\u7136\u8981\u4fdd\u8bc1\u4e24\u4fa7\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u7b49\uff09\u7684\u6700\u5927\u957f\u5ea6\u3002 \u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u539f\u4e32\u6bcf\u4e24\u4e2a\u5b57\u7b26\u4e4b\u95f4\u52a0\u4e00\u4e2a\uff08\u4e0d\u5305\u542b\u5728\u539f\u4e32\u4e2d\u7684\uff09 # \uff0c\u5f00\u5934\u52a0\u4e00\u4e2a $ \u3002 \u8fd9\u6837\u5f97\u5230\u7684\u56de\u6587\u4e32\u957f\u5ea6\u5c31\u4fdd\u8bc1\u662f\u5947\u6570\u4e86 \u8003\u8651\u5982\u679c\u6309\u987a\u5e8f\u5f97\u5230\u4e86 p[1 \\cdots i - 1] p[1 \\cdots i - 1] \uff0c\u5982\u4f55\u8ba1\u7b97 p[i] p[i] \u7684\u503c\uff1f \u5982\u679c\u4e4b\u524d\u6709\u4e00\u4e2a\u4f4d\u7f6e\u6bd4\u5982\u8bf4\u662f id id \uff0c\u6709 p[id] + id > i p[id] + id > i \u90a3\u4e48 i i \u8fd9\u4e2a\u4f4d\u7f6e\u662f\u88ab\u8986\u76d6\u4e86\u7684\uff0c\u6839\u636e id id \u5904\u7684\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u627e p[id \\times 2 - i] p[id \\times 2 - i] \u5ef6\u4f38\u7684\u90e8\u5206\u88ab p[id] p[id] \u5ef6\u4f38\u7684\u90e8\u5206\u6240\u8986\u76d6\u7684\u90a3\u6bb5\uff0c\u663e\u7136\u8fd9\u6bb5\u5bf9\u79f0\u56de\u53bb\u4e4b\u540e\u662f\u53ef\u4ee5\u4ece i i \u5904\u5ef6\u4f38\u51fa\u53bb\u7684\u957f\u5ea6\u3002 \u5982\u679c\u627e\u4e0d\u5230\u5462\uff1f\u5c31\u5148\u8ba9 p[i] = 1 p[i] = 1 \u5427\u3002 \u4e4b\u540e\u518d\u66b4\u529b\u5ef6\u4f38\u4e00\u4e0b\u3002 \u53ef\u4ee5\u8bc1\u660e\u662f O(n) O(n) \u7684\u3002 \u81f3\u4e8e\u5982\u4f55\u627e\u662f\u5426\u6709\u8fd9\u4e48\u4e00\u4e2a id id \u5462\uff1f\u9012\u63a8\u7684\u65f6\u5019\u5b58\u4e00\u4e2a max max \u5c31\u597d\u4e86\u3002 \u4ee3\u7801\u5728\uff1a https://github.com/Ir1d/Fantasy/blob/master/HDU/3068.cpp \u53cc\u8c03\u6b27\u51e0\u91cc\u5f97\u65c5\u884c\u5546\u95ee\u9898 \u00b6 \u597d\u50cf\u51fa\u6210\u4e86\u67d0\u4e00\u5e74\u7a0b\u8bbe\u671f\u672b\u3002 upd\uff1a\u5176\u5b9e\u662f \u7a0b\u8bbe\u671f\u672b\u63a8\u8350\u7ec3\u4e60 \u91cc\u9762\u7684\u3002 \u4e66\u4e0a\u7684\u63d0\u793a\u662f\uff1a\u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u5bf9\u5de1\u6e38\u8def\u7ebf\u7684\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u7ef4\u62a4\u53ef\u80fd\u7684\u6700\u4f18\u89e3\u3002 \u8bf4\u7684\u5c31\u662f\u628a\u56de\u8def\u7ed9\u62c6\u5f00\u5427\u3002 \u601d\u8def\u4e00 \u00b6 dp[i][j] dp[i][j] \u8868\u793a 1 \\cdots i 1 \\cdots i \u548c 1 \\cdots j 1 \\cdots j \u4e24\u6761\u8def\u5f84\u3002 \u6211\u4eec\u53ef\u4ee5\u4eba\u4e3a\u8981\u6c42 1 \\cdots i 1 \\cdots i \u662f\u66f4\u5feb\u7684\u90a3\u4e00\u6761\u8def\u5f84\u3002 \u8fd9\u6837\u8003\u8651\u7b2c i i \u4e2a\u70b9\u5206\u7ed9\u8c01\u3002 \u5982\u679c\u662f\u5206\u7ed9\u5feb\u7684\u90a3\u6761\uff1a dp[i][j] = \\min(dp[i - 1][j] + dis[i - 1][i]),\\ j = 1 \\cdots i dp[i][j] = \\min(dp[i - 1][j] + dis[i - 1][i]),\\ j = 1 \\cdots i \u5982\u679c\u662f\u6162\u7684\uff0c\u539f\u6765\u662f\u6162\u7684\u90a3\u6761\u5c31\u53d8\u6210\u4e86\u5feb\u7684\uff0c\u6240\u4ee5\u53e6\u4e00\u6761\u662f\u5230 i - 1 i - 1 \u90a3\u4e2a\u70b9\uff1a dp[i][j] = \\min(dp[i - 1][j] + dis[j][i]),\\ j = 1 \\cdots i dp[i][j] = \\min(dp[i - 1][j] + dis[j][i]),\\ j = 1 \\cdots i \u7b54\u6848\u662f \\min(dp[n][i] + dis[n][i]) \\min(dp[n][i] + dis[n][i]) \u3002 \uff08\u4ece\u4e00\u5f00\u59cb\u7f16\u53f7\uff0c\u7ec8\u70b9\u662f n n \uff09 \u4ee3\u7801\uff1a https://github.com/Ir1d/Fantasy/blob/master/openjudge/cssx/2018rec/11.cpp \u601d\u8def\u4e8c \u00b6 \u628a dp[i][j] dp[i][j] \u5b9a\u4e49\u53cd\u8fc7\u6765\uff0c\u4e0d\u662f 1 \\cdots i 1 \\cdots i \u548c 1 \\cdots j 1 \\cdots j \u3002 \u6539\u6210\u662f i..n i..n \u548c j \\cdots n j \\cdots n \uff0c\u4e0d\u8981\u6c42\u54ea\u4e2a\u66f4\u5feb\u3002 \u8fd9\u6837\u7684\u8f6c\u79fb\u66f4\u597d\u5199\uff1a \u6211\u4eec\u8bb0 k = \\max(i, j) + 1 k = \\max(i, j) + 1 k k \u8fd9\u4e2a\u70b9\u80af\u5b9a\u5728\u4e24\u6761\u8def\u4e2d\u7684\u4e00\u4e2a\u4e0a\uff0c dp[i][j] dp[i][j] \u53d6\u4e24\u79cd\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 dp[i][j] = \\min(dp[i][k] + dis[k][j], dp[k][j] + dis[i][k]) dp[i][j] = \\min(dp[i][k] + dis[k][j], dp[k][j] + dis[i][k]) \u8fb9\u754c\u662f\uff1a dp[i][n] = dp[n][i] = dis[n][i] dp[i][n] = dp[n][i] = dis[n][i] \u3002 \u7b54\u6848\u662f dp[1][1] dp[1][1] \u3002 \u6574\u9f50\u6253\u5370 \u00b6 \u5e0c\u671b\u6700\u5c0f\u5316\u6240\u6709\u884c\u7684\u989d\u5916\u7a7a\u683c\u6570\u7684\u7acb\u65b9\u4e4b\u548c\u3002 \u6ce8\u610f\u5230\u5b9e\u9645\u95ee\u9898\u8981\u6c42\u5355\u8bcd\u4e0d\u80fd\u6253\u4e71\u987a\u5e8f\uff0c\u6240\u4ee5\u5c31\u597d\u505a\u4e86\u8d77\u6765\u3002 \u4e0d\u8981\u628a\u9898\u76ee\u770b\u590d\u6742\u3002 dp[i] = \\min(dp[j] + cost[j][i]) dp[i] = \\min(dp[j] + cost[j][i]) \u4e0d\u77e5\u9053\u8fd9\u6837\u53ef\u4e0d\u53ef\u505a\uff1a\u6709 n n \u4e2a\u5355\u8bcd\uff0c\u53ef\u4ee5\u4e0d\u6309\u987a\u5e8f\u6253\u5370\uff0c\u95ee\u600e\u4e48\u5b89\u6392\uff0c\u4f7f\u5f97\u628a\u4ed6\u4eec\u6253\u5370\u6210 m m \u884c\u4e4b\u540e\uff0c\u6bcf\u884c\u7684\u7a7a\u683c\u4e4b\u548c\u6700\u5c0f\u3002 \u7f16\u8f91\u8ddd\u79bb \u00b6 \u53d8\u6362\u64cd\u4f5c\u6709 6 6 \u79cd\uff0c\u590d\u5236\u3001\u66ff\u6362\u3001\u5220\u9664\u3001\u63d2\u5165\u3001\u65cb\u8f6c\u3001\u7ec8\u6b62\uff08\u7ed3\u675f\u8f6c\u6362\u8fc7\u7a0b\uff09\u3002 \u6700\u4f18\u5bf9\u9f50\u95ee\u9898 \u00b6 \u628a\u7a7a\u683c\u7b26\u63d2\u5165\u5230\u5b57\u7b26\u4e32\u91cc\uff0c\u4f7f\u5f97\u76f8\u4f3c\u5ea6\u6700\u5927\u3002 \u5b9a\u4e49\u4e86\u6309\u5b57\u7b26\u6bd4\u8f83\u7684\u76f8\u4f3c\u5ea6\u3002 \u7136\u540e\u53d1\u73b0\u6700\u4f18\u5bf9\u9f50\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u4e3a\u7f16\u8f91\u8ddd\u79bb\u95ee\u9898\u3002 \u76f8\u5f53\u4e8e\u4ec5\u6709\u4e09\u4e2a\u64cd\u4f5c\u7684\u5e26\u6743\u7f16\u8f91\u8ddd\u79bb\u3002 1 2 3 copy : 1 replace : -1 insert : -2 \u516c\u53f8\u805a\u4f1a\u8ba1\u5212 \u00b6 \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\u3002 dp[x][0] dp[x][0] \u662f\u6ca1\u53bb\uff0c dp[x][1] dp[x][1] \u662f\u53bb\u4e86\u3002 dp[u][0] = \\max(dp[v][0], dp[v][1]), v \\in son(u) dp[u][0] = \\max(dp[v][0], dp[v][1]), v \\in son(u) dp[u][1] = w[u] + dp[v][0], v \\in son(u) dp[u][1] = w[u] + dp[v][0], v \\in son(u) \u8bd1\u7801\u7b97\u6cd5 \u00b6 Viterbi algorithm \u4e4b\u524d\u5199\u8bcd\u6027\u6807\u6ce8\u7684\u65f6\u5019\u6709\u7528\u5230\uff0c\u597d\u50cf\u7528\u5728\u8f93\u5165\u6cd5\u91cc\u9762\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002 \u672c\u9898\u4e2d\u7528\u6765\u5b9e\u73b0\u8bed\u97f3\u8bc6\u522b\uff0c\u5176\u5b9e\u5c31\u662f\u627e\u4e00\u6761\u5bf9\u5e94\u7684\u6982\u7387\u6700\u5927\u7684\u8def\u5f84\u3002 ref\uff1a https://segmentfault.com/a/1190000008720143 \u57fa\u4e8e\u63a5\u7f1d\u88c1\u526a\u7684\u56fe\u50cf\u538b\u7f29 \u00b6 \u73a9\u8fc7 opencv \u7684\u5e94\u8be5\u6709\u5370\u8c61\uff0cseam carving \u5c31\u662f\u5728\u505a dp\u3002 \u9898\u4e2d\u8981\u6c42\u6bcf\u4e00\u884c\u5220\u9664\u4e00\u4e2a\u50cf\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u4ee3\u4ef7\uff0c\u8981\u6c42\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u9650\u5236\uff1a\u8981\u6c42\u76f8\u90bb\u4e24\u884c\u4e2d\u5220\u9664\u7684\u50cf\u7d20\u5fc5\u987b\u4f4d\u4e8e\u540c\u4e00\u5217\u6216\u76f8\u90bb\u5217\u3002 dp[i][j] = \\min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + cost[i][j] dp[i][j] = \\min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + cost[i][j] \u8fb9\u754c\uff1a dp[1][i] = cost[1][i] dp[1][i] = cost[1][i] \u3002 \u5b57\u7b26\u4e32\u62c6\u5206 \u00b6 \u76f8\u5f53\u4e8e\u95ee\u600e\u4e48\u6309\u987a\u5e8f\u62fc\u8d77\u6765\u4f7f\u5f97\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u7b49\u4ef7\u4e8e\u4e4b\u524d\u90a3\u4e2a\u6700\u4f18\u4e8c\u53c9\u641c\u7d22\u6811\u3002 dp[i][j] = \\min(dp[i][k] + dp[k][j]) + l[j] - l[i] + 1,\\ k = i + 1 \\cdots j - 1 dp[i][j] = \\min(dp[i][k] + dp[k][j]) + l[j] - l[i] + 1,\\ k = i + 1 \\cdots j - 1 \u6ce8\u610f l[i] l[i] \u8868\u793a\u7684\u662f\u7b2c i \u4e2a\u5207\u5206\u70b9\u7684\u4f4d\u7f6e\u3002 \u8fb9\u754c\uff1a dp[i][i] = 0 dp[i][i] = 0 \u3002 \u5c31\u6309\u7167\u533a\u95f4 dp \u7684\u59ff\u52bf\u6765\u5199\u5c31\u597d\u4e86\u3002 \u6295\u8d44\u7b56\u7565\u89c4\u5212 \u00b6 \u5f15\u7406\uff1a\u5b58\u5728\u6700\u4f18\u6295\u8d44\u7b56\u7565\uff0c\u6bcf\u5e74\u90fd\u5c06\u6240\u6709\u94b1\u6295\u5165\u5230\u5355\u4e00\u6295\u8d44\u4e2d\u3002 \u8fd9\u662f\u4e2a\u5f88\u6709\u8da3\u7684\u7ed3\u8bba\uff0cdp \u95ee\u9898\u4e2d\u5f88\u5e38\u89c1\u3002 https://fogsail.github.io/2017/05/08/20170508/ \u5269\u4e0b\u7684\u5c31\u662f\u4e2a\u4e8c\u7ef4 dp\uff0c\u60f3\u6210\u4ece (1, i) (1, i) \u8d70\u5230 (n, m) (n, m) \u7684\u8def\u5f84\u7684\u95ee\u9898\uff0c\u7136\u540e\u6536\u76ca\u548c\u4ee3\u4ef7\u5c31\u662f\u8fb9\u6743\uff0c\u7f51\u683c\u56fe\u53ea\u80fd\u5f80\u53f3\u4e0b\u65b9\u8d70\u3002 \u5e93\u5b58\u89c4\u5212 \u00b6 \u751f\u4ea7\u591a\u4e86\u5c11\u4e86\u90fd\u6709\u989d\u5916\u7684\u6210\u672c\uff0c\u95ee\u600e\u4e48\u5b89\u6392\u751f\u4ea7\u7b56\u7565\u4f7f\u5f97\u989d\u5916\u7684\u6210\u672c\u5c3d\u53ef\u80fd\u5730\u5c11\u3002 cost[i][j] cost[i][j] \u8868\u793a\u5269\u4e0b i i \u4e2a\u6708\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u6709 j j \u53f0\u5e93\u5b58\u7684\u6700\u5c0f\u6210\u672c\u3002 https://walkccc.github.io/CLRS/Chap15/Problems/15-11/ \u7b7e\u7ea6\u68d2\u7403\u81ea\u7531\u7403\u5458 \u00b6 v[i][j] v[i][j] \u662f\u8003\u8651 i i \u4e4b\u540e\u7684\u4f4d\u7f6e\uff0c\u603b\u8d39\u7528\u4e3a x x \u7684\u6700\u5927\u6536\u76ca\u3002 https://walkccc.github.io/CLRS/Chap15/Problems/15-12/ \u7c7b\u4f3c\u4e8e\u80cc\u5305\u95ee\u9898\u3002 \u5f53\u9009\u53d6\u7684\u72b6\u6001\u96be\u4ee5\u8fdb\u884c\u9012\u63a8\u65f6\uff08\u5206\u89e3\u51fa\u7684\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u5f62\u5f0f\u4e0d\u4e00\u6837\uff09\uff0c\u8003\u8651\u5c06\u95ee\u9898\u72b6\u6001\u5206\u7c7b\u7ec6\u5316\uff0c\u589e\u52a0\u7ef4\u5ea6\u3002","title":"\u52a8\u6001\u89c4\u5212\u90e8\u5206\u7b80\u4ecb"},{"location":"dp/#_1","text":"\u7ed9\u5b9a\u4e00\u6bb5\u94a2\u6761\uff0c\u548c\u4e0d\u540c\u957f\u5ea6\u7684\u4ef7\u683c\uff0c\u95ee\u5982\u4f55\u5207\u5272\u4f7f\u5f97\u603b\u4ef7\u683c\u6700\u5927\u3002 \u4e3a\u4e86\u6c42\u89e3\u89c4\u6a21\u4e3a n n \u7684\u539f\u95ee\u9898\uff0c\u6211\u4eec\u5148\u6c42\u89e3\u5f62\u5f0f\u5b8c\u5168\u4e00\u6837\uff0c\u4f46\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002 \u5373\u5f53\u5b8c\u6210\u9996\u6b21\u5207\u5272\u540e\uff0c\u6211\u4eec\u5c06\u4e24\u6bb5\u94a2\u6761\u770b\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u94a2\u6761\u5207\u5272\u95ee\u9898\u5b9e\u4f8b\u3002 \u6211\u4eec\u901a\u8fc7\u7ec4\u5408\u76f8\u5173\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u5e76\u5728\u6240\u6709\u53ef\u80fd\u7684\u4e24\u6bb5\u5207\u5272\u65b9\u6848\u4e2d\u9009\u53d6\u7ec4\u5408\u6536\u76ca\u6700\u5927\u8005\uff0c\u6784\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002 \u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7531\u76f8\u5173\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7ec4\u5408\u800c\u6210\uff0c\u800c\u8fd9\u4e9b\u5b50\u95ee\u9898\u53ef\u4ee5\u72ec\u7acb\u6c42\u89e3\u3002 \u52a8\u6001\u89c4\u5212\u7684\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff1a \u5e26\u5907\u5fd8\u7684\u81ea\u9876\u5411\u4e0b\u6cd5 \uff08\u8bb0\u5fc6\u5316\u641c\u7d22\uff09\uff1b \u81ea\u5e95\u5411\u4e0a\u6cd5 \uff08\u5c06\u5b50\u95ee\u9898\u6309\u89c4\u6a21\u6392\u5e8f\uff0c\u7c7b\u4f3c\u4e8e\u9012\u63a8\uff09\u3002 \u7b97\u5bfc\u7528\u5b50\u95ee\u9898\u56fe\u4e0a\u6309\u7167\u9006\u62d3\u6251\u5e8f\u6c42\u89e3\u95ee\u9898\uff0c\u5f15\u51fa\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 \u91cd\u6784\u89e3\uff08\u8f93\u51fa\u65b9\u6848\uff09\uff1a\u8f6c\u79fb\u7684\u65f6\u5019\u8bb0\u5f55\u6700\u4f18\u5b50\u7ed3\u6784\u7684\u4f4d\u7f6e\u3002","title":"\u94a2\u6761\u5207\u5272"},{"location":"dp/#_2","text":"\u7ed9\u51fa n n \u4e2a\u77e9\u9635\u7684\u5e8f\u5217\uff0c\u5e0c\u671b\u8ba1\u7b97\u4ed6\u4eec\u7684\u4e58\u79ef\uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u4e58\u6cd5\u8fd0\u7b97\uff1f \uff08\u8ba4\u4e3a p \\times q p \\times q \u7684\u77e9\u9635\u4e0e q\\times r q\\times r \u7684\u77e9\u9635\u76f8\u4e58\u4ee3\u4ef7\u662f p\\times q\\times r p\\times q\\times r \u3002\uff09 \u5b8c\u5168\u62ec\u53f7\u5316\u65b9\u6848\u662f\u6307\u8981\u7ed9\u51fa\u8c01\u5148\u548c\u8c01\u4e58\u3002","title":"\u77e9\u9635\u94fe\u4e58\u6cd5"},{"location":"dp/#_3","text":"\u4e24\u4e2a\u8981\u7d20\uff1a","title":"\u52a8\u6001\u89c4\u5212\u539f\u7406"},{"location":"dp/#_4","text":"\u5177\u6709\u6700\u4f18\u5b50\u7ed3\u6784\u4e5f\u53ef\u80fd\u662f\u9002\u5408\u7528\u8d2a\u5fc3\u7684\u65b9\u6cd5\u6c42\u89e3\u3002 \u6ce8\u610f\u8981\u786e\u4fdd\u6211\u4eec\u8003\u5bdf\u4e86\u6700\u4f18\u89e3\u4e2d\u7528\u5230\u7684\u6240\u6709\u5b50\u95ee\u9898\u3002 \u8bc1\u660e\u95ee\u9898\u6700\u4f18\u89e3\u7684\u7b2c\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u662f\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\uff1b \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u95ee\u9898\uff0c\u5728\u5176\u53ef\u80fd\u7684\u7b2c\u4e00\u6b65\u9009\u62e9\u4e2d\uff0c\u4f60\u754c\u5b9a\u5df2\u7ecf\u77e5\u9053\u54ea\u79cd\u9009\u62e9\u624d\u4f1a\u5f97\u5230\u6700\u4f18\u89e3\u3002\u4f60\u73b0\u5728\u5e76\u4e0d\u5173\u5fc3\u8fd9\u79cd\u9009\u62e9\u5177\u4f53\u662f\u5982\u4f55\u5f97\u5230\u7684\uff0c\u53ea\u662f\u5047\u5b9a\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u79cd\u9009\u62e9\uff1b \u7ed9\u5b9a\u53ef\u83b7\u5f97\u7684\u6700\u4f18\u89e3\u7684\u9009\u62e9\u540e\uff0c\u786e\u5b9a\u8fd9\u6b21\u9009\u62e9\u4f1a\u4ea7\u751f\u54ea\u4e9b\u5b50\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u6700\u597d\u5730\u523b\u753b\u5b50\u95ee\u9898\u7a7a\u95f4\uff1b \u8bc1\u660e\u4f5c\u4e3a\u6784\u6210\u539f\u95ee\u9898\u6700\u4f18\u89e3\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u5c31\u662f\u5b83\u672c\u8eab\u7684\u6700\u4f18\u89e3\u3002\u65b9\u6cd5\u662f\u53cd\u8bc1\u6cd5\uff0c\u8003\u8651\u52a0\u5165\u67d0\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u4e0d\u662f\u5176\u81ea\u8eab\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4ece\u539f\u95ee\u9898\u7684\u89e3\u4e2d\u7528\u8be5\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u66ff\u6362\u6389\u5f53\u524d\u7684\u975e\u6700\u4f18\u89e3\uff0c\u4ece\u800c\u5f97\u5230\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u66f4\u4f18\u7684\u89e3\uff0c\u4ece\u800c\u4e0e\u539f\u95ee\u9898\u6700\u4f18\u89e3\u7684\u5047\u8bbe\u77db\u76fe\u3002 \u8981\u4fdd\u6301\u5b50\u95ee\u9898\u7a7a\u95f4\u5c3d\u91cf\u7b80\u5355\uff0c\u53ea\u5728\u5fc5\u8981\u65f6\u6269\u5c55\u3002 \u6700\u4f18\u5b50\u7ed3\u6784\u7684\u4e0d\u540c\u4f53\u73b0\u5728\u4e24\u4e2a\u65b9\u9762\uff1a \u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u4e2d\u6d89\u53ca\u591a\u5c11\u4e2a\u5b50\u95ee\u9898\uff1b \u786e\u5b9a\u6700\u4f18\u89e3\u4f7f\u7528\u54ea\u4e9b\u5b50\u95ee\u9898\u65f6\uff0c\u9700\u8981\u8003\u5bdf\u591a\u5c11\u79cd\u9009\u62e9\u3002 \u5b50\u95ee\u9898\u56fe\u4e2d\u6bcf\u4e2a\u5b9a\u70b9\u5bf9\u5e94\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u800c\u9700\u8981\u8003\u5bdf\u7684\u9009\u62e9\u5bf9\u5e94\u5173\u8054\u81f3\u5b50\u95ee\u9898\u9876\u70b9\u7684\u8fb9\u3002 \u7ecf\u5178\u95ee\u9898\uff1a \u65e0\u6743\u6700\u77ed\u8def\u5f84\uff1a \u5177\u6709\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\u3002 \u65e0\u6743\u6700\u957f\uff08\u7b80\u5355\uff09\u8def\u5f84\uff1a \u6b64\u95ee\u9898\u4e0d\u5177\u6709\uff0c\u662f NPC \u7684\u3002\u533a\u522b\u5728\u4e8e\uff0c\u8981\u4fdd\u8bc1\u5b50\u95ee\u9898\u65e0\u5173\uff0c\u5373\u540c\u4e00\u4e2a\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u4e0d\u5f71\u54cd\u53e6\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u3002\u76f8\u5173\uff1a\u6c42\u89e3\u4e00\u4e2a\u5b50\u95ee\u9898\u65f6\u7528\u5230\u4e86\u67d0\u4e9b\u8d44\u6e90\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u8d44\u6e90\u5728\u6c42\u89e3\u5176\u4ed6\u5b50\u95ee\u9898\u65f6\u4e0d\u53ef\u7528\u3002","title":"\u6700\u4f18\u5b50\u7ed3\u6784"},{"location":"dp/#_5","text":"\u5b50\u95ee\u9898\u7a7a\u95f4\u8981\u8db3\u591f\u5c0f\uff0c\u5373\u95ee\u9898\u7684\u9012\u5f52\u7b97\u6cd5\u4f1a\u53cd\u590d\u5730\u6c42\u89e3\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u751f\u6210\u65b0\u7684\u5b50\u95ee\u9898\u3002","title":"\u5b50\u95ee\u9898\u91cd\u53e0"},{"location":"dp/#_6","text":"\u5b58\u8868\u8bb0\u5f55\u6700\u4f18\u5206\u5272\u7684\u4f4d\u7f6e\uff0c\u5c31\u4e0d\u7528\u91cd\u65b0\u6309\u7167\u4ee3\u4ef7\u6765\u91cd\u6784\u3002","title":"\u91cd\u6784\u6700\u4f18\u89e3"},{"location":"dp/#_7","text":"\u5b50\u5e8f\u5217\u5141\u8bb8\u4e0d\u8fde\u7eed\u3002 \u6bcf\u4e2a c[i][j] c[i][j] \u53ea\u4f9d\u8d56\u4e8e c[i - 1][j] c[i - 1][j] \u3001 c[i][j - 1] c[i][j - 1] \u548c c[i - 1][j - 1] c[i - 1][j - 1] \u3002 \u8bb0\u5f55\u6700\u4f18\u65b9\u6848\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u9700\u8981\u989d\u5916\u5efa\u8868\uff08\u4f18\u5316\u7a7a\u95f4\uff09\uff0c\u56e0\u4e3a\u91cd\u65b0\u9009\u62e9\u4e00\u904d\uff08\u8f6c\u79fb\u8fc7\u7a0b\uff09\u4e5f\u662f O(1) O(1) \u7684\u3002","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217"},{"location":"dp/#_8","text":"\u7ed9\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5b9a\u4e49\u4e00\u4e2a\u6743\u503c\uff0c\u95ee\u5982\u4f55\u5b89\u6392\u4f7f\u5f97\u6743\u503c\u548c\u6df1\u5ea6\u7684\u4e58\u79ef\u6700\u5c0f\u3002 \u8003\u8651\u5f53\u4e00\u68f5\u5b50\u6811\u6210\u4e3a\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u65f6\uff0c\u7b54\u6848\uff08\u671f\u671b\u641c\u7d22\u4ee3\u4ef7\uff09\u6709\u4f55\u53d8\u5316\uff1f \u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u90fd\u589e\u52a0\u4e86 1\uff0c\u8fd9\u68f5\u5b50\u6811\u7684\u671f\u671b\u641c\u7d22\u4ee3\u4ef7\u7684\u589e\u52a0\u503c\u5e94\u4e3a\u6240\u6709\u6982\u7387\u4e4b\u548c\u3002 tD / eD \u52a8\u6001\u89c4\u5212\uff1a \u72b6\u6001\u7a7a\u95f4\u662f O(n^t) O(n^t) \u7684\uff0c\u6bcf\u4e00\u9879\u4f9d\u8d56\u5176\u4ed6 O(n^e) O(n^e) \u9879\u3002","title":"\u6700\u4f18\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"dp/#_9","text":"\u5bf9 n \u4e2a\u6570\u6c42\u5b83\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u6c42\u6700\u957f\u7684\u4e0a\u5347\uff08\u4e00\u4e2a\u6570\u6bd4\u4e00\u4e2a\u6570\u5927\uff09\u5b50\u5e8f\u5217\u6709\u591a\u957f\u3002 \u56e0\u4e3a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u4e0e\u4e0a\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 int a [ MAXN ]; int dp () { int now = 0 , ans = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( a [ i ] > a [ i - 1 ]) ans ++ ; now = max ( now , ans ); } return ans ; }","title":"\u6700\u957f\u8fde\u7eed\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217"},{"location":"dp/#_10","text":"\u5bf9 n \u4e2a\u6570\u6c42\u5b83\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u6c42\u6700\u957f\u7684\u4e0a\u5347\uff08\u4e00\u4e2a\u6570\u6bd4\u4e00\u4e2a\u6570\u5927\uff09\u5b50\u5e8f\u5217\u6709\u591a\u957f\u3002\u4e0e\u6700\u957f\u8fde\u7eed\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u9700\u8981\u8fd9\u4e2a\u5b50\u5e8f\u5217\u662f\u8fde\u7eed\u7684\u4e86\u3002 \u6c42\u6700\u957f\u5b50\u5e8f\u5217\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\u3002","title":"\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217"},{"location":"dp/#_11","text":"O\\left(n^2\\right) O\\left(n^2\\right) \u7684\u7b97\u6cd5\u3002\u6bcf\u4e00\u6b21\u91cd\u5934\u626b\u63cf\u627e\u51fa\u6700\u4f73\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [ MAXN ], d [ MAXN ]; int dp () { d [ 1 ] = 1 ; int ans = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = i - 1 ; j < i ; j ++ ) if ( a [ j ] < a [ i ]) { d [ i ] = max ( d [ i ], d [ j ] + 1 ); ans = max ( ans , d [ i ]); } } return ans ; }","title":"\u6700\u7b80\u5355\u7684\u7b2c\u4e00\u79cd"},{"location":"dp/#_12","text":"O\\left(n log n\\right) O\\left(n log n\\right) \u7684\u7b97\u6cd5\uff0c\u53c2\u8003\u4e86\u8fd9\u7bc7\u6587\u7ae0 https://www.cnblogs.com/itlqs/p/5743114.html \u3002 \u9996\u5148\uff0c\u5b9a\u4e49 a_1 \\dots a_n a_1 \\dots a_n \u4e3a\u539f\u59cb\u5e8f\u5217\uff0c d d \u4e3a\u5f53\u524d\u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c len len \u4e3a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u90a3\u4e48 d_{len} d_{len} \u5c31\u662f\u957f\u5ea6\u4e3a len len \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u672b\u5c3e\u5143\u7d20\u3002 \u521d\u59cb\u5316\uff1a d_1=a_1,len=1 d_1=a_1,len=1 \u3002 \u73b0\u5728\u6211\u4eec\u5df2\u77e5\u6700\u957f\u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3a 1\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9 i i \u4ece 2 \u5230 n n \u5faa\u73af\uff0c\u4f9d\u6b21\u6c42\u51fa\u524d i i \u4e2a\u5143\u7d20\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u5faa\u73af\u7684\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u597d d d \u8fd9\u4e2a\u6570\u7ec4\u8fd8\u6709 len len \u5c31\u53ef\u4ee5\u4e86\u3002 \u5173\u952e\u5728\u4e8e\u5982\u4f55\u7ef4\u62a4\u3002 \u8003\u8651\u8fdb\u6765\u4e00\u4e2a\u5143\u7d20 a_i a_i \uff1a \u5143\u7d20\u5927\u4e8e d_{len} d_{len} \uff0c\u76f4\u63a5 d_{++len}=a_i d_{++len}=a_i \u5373\u53ef\uff0c\u8fd9\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u3002 \u5143\u7d20\u7b49\u4e8e d_{len} d_{len} \uff0c\u56e0\u4e3a\u524d\u9762\u7684\u5143\u7d20\u90fd\u5c0f\u4e8e\u5b83\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5143\u7d20\u53ef\u4ee5\u76f4\u63a5\u629b\u5f03\u3002 \u5143\u7d20\u5c0f\u4e8e d_{len} d_{len} \uff0c\u627e\u5230 \u7b2c\u4e00\u4e2a \u5927\u4e8e\u5b83\u7684\u5143\u7d20\uff0c\u63d2\u5165\u8fdb\u53bb\uff0c\u5176\u4ed6\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u4e0d\u8981\u3002 \u90a3\u4e48\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 for ( int i = 0 ; i < n ; ++ i ) scanf ( \"%d\" , a + i ); memset ( dp , 0x1f , sizeof dp ); mx = dp [ 0 ]; for ( int i = 0 ; i < n ; ++ i ) { * std :: lower_bound ( dp , dp + n , a [ i ]) = a [ i ]; } ans = 0 ; while ( dp [ ans ] != mx ) ++ ans ;","title":"\u7a0d\u590d\u6742\u7684\u7b2c\u4e8c\u79cd"},{"location":"dp/#_13","text":"","title":"\u7ecf\u5178\u95ee\u9898\uff08\u6765\u81ea\u4e60\u9898\uff09"},{"location":"dp/#dag","text":"dp[i] = \\max(dp[j] + 1), ((j, i) \\in E) dp[i] = \\max(dp[j] + 1), ((j, i) \\in E)","title":"DAG \u4e2d\u7684\u6700\u957f\u7b80\u5355\u8def\u5f84"},{"location":"dp/#_14","text":"dp[i][i + len] = \\begin{cases} dp[i + 1][i + len - 1] + 2, & \\text{if $s[i] = s[i + len]$} \\\\[2ex] \\max(dp[i + 1][i + len], dp[i][i + len - 1]), & \\text{else} \\end{cases} dp[i][i + len] = \\begin{cases} dp[i + 1][i + len - 1] + 2, & \\text{if $s[i] = s[i + len]$} \\\\[2ex] \\max(dp[i + 1][i + len], dp[i][i + len - 1]), & \\text{else} \\end{cases} \u8fb9\u754c\uff1a dp[i][i] = 1 dp[i][i] = 1 \u3002 \u6ce8\u610f\uff1a dp[i][j] dp[i][j] \u8868\u793a\u7684\u662f\u95ed\u533a\u95f4\u3002 \u4e5f\u53ef\u4ee5\u8f6c\u5316\u4e3a LCS \u95ee\u9898\uff0c\u53ea\u9700\u8981\u628a a a \u4e32\u53cd\u8f6c\u5f53\u505a b b \uff0c\u5bf9 a a \u548c b b \u6c42 LCS \u5373\u53ef\u3002 \u8bc1\u660e\u5728 \u8fd9\u91cc \u3002 \u6ce8\u610f\u533a\u5206\u5b50\u4e32\uff08\u8981\u6c42\u8fde\u7eed\uff09\u7684\u95ee\u9898\u3002","title":"\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217"},{"location":"dp/#_15","text":"O(n^2) O(n^2) \uff1a dp[i] = \\max(dp[j] + 1), s(j + 1 \\cdots i) dp[i] = \\max(dp[j] + 1), s(j + 1 \\cdots i) \u662f\u56de\u6587 O(n) O(n) \uff1a Manacher p[i] p[i] \u8868\u793a\u4ece i i \u5411\u4e24\u4fa7\u5ef6\u4f38\uff08\u5f53\u7136\u8981\u4fdd\u8bc1\u4e24\u4fa7\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u7b49\uff09\u7684\u6700\u5927\u957f\u5ea6\u3002 \u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u539f\u4e32\u6bcf\u4e24\u4e2a\u5b57\u7b26\u4e4b\u95f4\u52a0\u4e00\u4e2a\uff08\u4e0d\u5305\u542b\u5728\u539f\u4e32\u4e2d\u7684\uff09 # \uff0c\u5f00\u5934\u52a0\u4e00\u4e2a $ \u3002 \u8fd9\u6837\u5f97\u5230\u7684\u56de\u6587\u4e32\u957f\u5ea6\u5c31\u4fdd\u8bc1\u662f\u5947\u6570\u4e86 \u8003\u8651\u5982\u679c\u6309\u987a\u5e8f\u5f97\u5230\u4e86 p[1 \\cdots i - 1] p[1 \\cdots i - 1] \uff0c\u5982\u4f55\u8ba1\u7b97 p[i] p[i] \u7684\u503c\uff1f \u5982\u679c\u4e4b\u524d\u6709\u4e00\u4e2a\u4f4d\u7f6e\u6bd4\u5982\u8bf4\u662f id id \uff0c\u6709 p[id] + id > i p[id] + id > i \u90a3\u4e48 i i \u8fd9\u4e2a\u4f4d\u7f6e\u662f\u88ab\u8986\u76d6\u4e86\u7684\uff0c\u6839\u636e id id \u5904\u7684\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u627e p[id \\times 2 - i] p[id \\times 2 - i] \u5ef6\u4f38\u7684\u90e8\u5206\u88ab p[id] p[id] \u5ef6\u4f38\u7684\u90e8\u5206\u6240\u8986\u76d6\u7684\u90a3\u6bb5\uff0c\u663e\u7136\u8fd9\u6bb5\u5bf9\u79f0\u56de\u53bb\u4e4b\u540e\u662f\u53ef\u4ee5\u4ece i i \u5904\u5ef6\u4f38\u51fa\u53bb\u7684\u957f\u5ea6\u3002 \u5982\u679c\u627e\u4e0d\u5230\u5462\uff1f\u5c31\u5148\u8ba9 p[i] = 1 p[i] = 1 \u5427\u3002 \u4e4b\u540e\u518d\u66b4\u529b\u5ef6\u4f38\u4e00\u4e0b\u3002 \u53ef\u4ee5\u8bc1\u660e\u662f O(n) O(n) \u7684\u3002 \u81f3\u4e8e\u5982\u4f55\u627e\u662f\u5426\u6709\u8fd9\u4e48\u4e00\u4e2a id id \u5462\uff1f\u9012\u63a8\u7684\u65f6\u5019\u5b58\u4e00\u4e2a max max \u5c31\u597d\u4e86\u3002 \u4ee3\u7801\u5728\uff1a https://github.com/Ir1d/Fantasy/blob/master/HDU/3068.cpp","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"dp/#_16","text":"\u597d\u50cf\u51fa\u6210\u4e86\u67d0\u4e00\u5e74\u7a0b\u8bbe\u671f\u672b\u3002 upd\uff1a\u5176\u5b9e\u662f \u7a0b\u8bbe\u671f\u672b\u63a8\u8350\u7ec3\u4e60 \u91cc\u9762\u7684\u3002 \u4e66\u4e0a\u7684\u63d0\u793a\u662f\uff1a\u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u5bf9\u5de1\u6e38\u8def\u7ebf\u7684\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u7ef4\u62a4\u53ef\u80fd\u7684\u6700\u4f18\u89e3\u3002 \u8bf4\u7684\u5c31\u662f\u628a\u56de\u8def\u7ed9\u62c6\u5f00\u5427\u3002","title":"\u53cc\u8c03\u6b27\u51e0\u91cc\u5f97\u65c5\u884c\u5546\u95ee\u9898"},{"location":"dp/#_17","text":"dp[i][j] dp[i][j] \u8868\u793a 1 \\cdots i 1 \\cdots i \u548c 1 \\cdots j 1 \\cdots j \u4e24\u6761\u8def\u5f84\u3002 \u6211\u4eec\u53ef\u4ee5\u4eba\u4e3a\u8981\u6c42 1 \\cdots i 1 \\cdots i \u662f\u66f4\u5feb\u7684\u90a3\u4e00\u6761\u8def\u5f84\u3002 \u8fd9\u6837\u8003\u8651\u7b2c i i \u4e2a\u70b9\u5206\u7ed9\u8c01\u3002 \u5982\u679c\u662f\u5206\u7ed9\u5feb\u7684\u90a3\u6761\uff1a dp[i][j] = \\min(dp[i - 1][j] + dis[i - 1][i]),\\ j = 1 \\cdots i dp[i][j] = \\min(dp[i - 1][j] + dis[i - 1][i]),\\ j = 1 \\cdots i \u5982\u679c\u662f\u6162\u7684\uff0c\u539f\u6765\u662f\u6162\u7684\u90a3\u6761\u5c31\u53d8\u6210\u4e86\u5feb\u7684\uff0c\u6240\u4ee5\u53e6\u4e00\u6761\u662f\u5230 i - 1 i - 1 \u90a3\u4e2a\u70b9\uff1a dp[i][j] = \\min(dp[i - 1][j] + dis[j][i]),\\ j = 1 \\cdots i dp[i][j] = \\min(dp[i - 1][j] + dis[j][i]),\\ j = 1 \\cdots i \u7b54\u6848\u662f \\min(dp[n][i] + dis[n][i]) \\min(dp[n][i] + dis[n][i]) \u3002 \uff08\u4ece\u4e00\u5f00\u59cb\u7f16\u53f7\uff0c\u7ec8\u70b9\u662f n n \uff09 \u4ee3\u7801\uff1a https://github.com/Ir1d/Fantasy/blob/master/openjudge/cssx/2018rec/11.cpp","title":"\u601d\u8def\u4e00"},{"location":"dp/#_18","text":"\u628a dp[i][j] dp[i][j] \u5b9a\u4e49\u53cd\u8fc7\u6765\uff0c\u4e0d\u662f 1 \\cdots i 1 \\cdots i \u548c 1 \\cdots j 1 \\cdots j \u3002 \u6539\u6210\u662f i..n i..n \u548c j \\cdots n j \\cdots n \uff0c\u4e0d\u8981\u6c42\u54ea\u4e2a\u66f4\u5feb\u3002 \u8fd9\u6837\u7684\u8f6c\u79fb\u66f4\u597d\u5199\uff1a \u6211\u4eec\u8bb0 k = \\max(i, j) + 1 k = \\max(i, j) + 1 k k \u8fd9\u4e2a\u70b9\u80af\u5b9a\u5728\u4e24\u6761\u8def\u4e2d\u7684\u4e00\u4e2a\u4e0a\uff0c dp[i][j] dp[i][j] \u53d6\u4e24\u79cd\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 dp[i][j] = \\min(dp[i][k] + dis[k][j], dp[k][j] + dis[i][k]) dp[i][j] = \\min(dp[i][k] + dis[k][j], dp[k][j] + dis[i][k]) \u8fb9\u754c\u662f\uff1a dp[i][n] = dp[n][i] = dis[n][i] dp[i][n] = dp[n][i] = dis[n][i] \u3002 \u7b54\u6848\u662f dp[1][1] dp[1][1] \u3002","title":"\u601d\u8def\u4e8c"},{"location":"dp/#_19","text":"\u5e0c\u671b\u6700\u5c0f\u5316\u6240\u6709\u884c\u7684\u989d\u5916\u7a7a\u683c\u6570\u7684\u7acb\u65b9\u4e4b\u548c\u3002 \u6ce8\u610f\u5230\u5b9e\u9645\u95ee\u9898\u8981\u6c42\u5355\u8bcd\u4e0d\u80fd\u6253\u4e71\u987a\u5e8f\uff0c\u6240\u4ee5\u5c31\u597d\u505a\u4e86\u8d77\u6765\u3002 \u4e0d\u8981\u628a\u9898\u76ee\u770b\u590d\u6742\u3002 dp[i] = \\min(dp[j] + cost[j][i]) dp[i] = \\min(dp[j] + cost[j][i]) \u4e0d\u77e5\u9053\u8fd9\u6837\u53ef\u4e0d\u53ef\u505a\uff1a\u6709 n n \u4e2a\u5355\u8bcd\uff0c\u53ef\u4ee5\u4e0d\u6309\u987a\u5e8f\u6253\u5370\uff0c\u95ee\u600e\u4e48\u5b89\u6392\uff0c\u4f7f\u5f97\u628a\u4ed6\u4eec\u6253\u5370\u6210 m m \u884c\u4e4b\u540e\uff0c\u6bcf\u884c\u7684\u7a7a\u683c\u4e4b\u548c\u6700\u5c0f\u3002","title":"\u6574\u9f50\u6253\u5370"},{"location":"dp/#_20","text":"\u53d8\u6362\u64cd\u4f5c\u6709 6 6 \u79cd\uff0c\u590d\u5236\u3001\u66ff\u6362\u3001\u5220\u9664\u3001\u63d2\u5165\u3001\u65cb\u8f6c\u3001\u7ec8\u6b62\uff08\u7ed3\u675f\u8f6c\u6362\u8fc7\u7a0b\uff09\u3002","title":"\u7f16\u8f91\u8ddd\u79bb"},{"location":"dp/#_21","text":"\u628a\u7a7a\u683c\u7b26\u63d2\u5165\u5230\u5b57\u7b26\u4e32\u91cc\uff0c\u4f7f\u5f97\u76f8\u4f3c\u5ea6\u6700\u5927\u3002 \u5b9a\u4e49\u4e86\u6309\u5b57\u7b26\u6bd4\u8f83\u7684\u76f8\u4f3c\u5ea6\u3002 \u7136\u540e\u53d1\u73b0\u6700\u4f18\u5bf9\u9f50\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u4e3a\u7f16\u8f91\u8ddd\u79bb\u95ee\u9898\u3002 \u76f8\u5f53\u4e8e\u4ec5\u6709\u4e09\u4e2a\u64cd\u4f5c\u7684\u5e26\u6743\u7f16\u8f91\u8ddd\u79bb\u3002 1 2 3 copy : 1 replace : -1 insert : -2","title":"\u6700\u4f18\u5bf9\u9f50\u95ee\u9898"},{"location":"dp/#_22","text":"\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\u3002 dp[x][0] dp[x][0] \u662f\u6ca1\u53bb\uff0c dp[x][1] dp[x][1] \u662f\u53bb\u4e86\u3002 dp[u][0] = \\max(dp[v][0], dp[v][1]), v \\in son(u) dp[u][0] = \\max(dp[v][0], dp[v][1]), v \\in son(u) dp[u][1] = w[u] + dp[v][0], v \\in son(u) dp[u][1] = w[u] + dp[v][0], v \\in son(u)","title":"\u516c\u53f8\u805a\u4f1a\u8ba1\u5212"},{"location":"dp/#_23","text":"Viterbi algorithm \u4e4b\u524d\u5199\u8bcd\u6027\u6807\u6ce8\u7684\u65f6\u5019\u6709\u7528\u5230\uff0c\u597d\u50cf\u7528\u5728\u8f93\u5165\u6cd5\u91cc\u9762\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002 \u672c\u9898\u4e2d\u7528\u6765\u5b9e\u73b0\u8bed\u97f3\u8bc6\u522b\uff0c\u5176\u5b9e\u5c31\u662f\u627e\u4e00\u6761\u5bf9\u5e94\u7684\u6982\u7387\u6700\u5927\u7684\u8def\u5f84\u3002 ref\uff1a https://segmentfault.com/a/1190000008720143","title":"\u8bd1\u7801\u7b97\u6cd5"},{"location":"dp/#_24","text":"\u73a9\u8fc7 opencv \u7684\u5e94\u8be5\u6709\u5370\u8c61\uff0cseam carving \u5c31\u662f\u5728\u505a dp\u3002 \u9898\u4e2d\u8981\u6c42\u6bcf\u4e00\u884c\u5220\u9664\u4e00\u4e2a\u50cf\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u4ee3\u4ef7\uff0c\u8981\u6c42\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u9650\u5236\uff1a\u8981\u6c42\u76f8\u90bb\u4e24\u884c\u4e2d\u5220\u9664\u7684\u50cf\u7d20\u5fc5\u987b\u4f4d\u4e8e\u540c\u4e00\u5217\u6216\u76f8\u90bb\u5217\u3002 dp[i][j] = \\min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + cost[i][j] dp[i][j] = \\min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + cost[i][j] \u8fb9\u754c\uff1a dp[1][i] = cost[1][i] dp[1][i] = cost[1][i] \u3002","title":"\u57fa\u4e8e\u63a5\u7f1d\u88c1\u526a\u7684\u56fe\u50cf\u538b\u7f29"},{"location":"dp/#_25","text":"\u76f8\u5f53\u4e8e\u95ee\u600e\u4e48\u6309\u987a\u5e8f\u62fc\u8d77\u6765\u4f7f\u5f97\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u7b49\u4ef7\u4e8e\u4e4b\u524d\u90a3\u4e2a\u6700\u4f18\u4e8c\u53c9\u641c\u7d22\u6811\u3002 dp[i][j] = \\min(dp[i][k] + dp[k][j]) + l[j] - l[i] + 1,\\ k = i + 1 \\cdots j - 1 dp[i][j] = \\min(dp[i][k] + dp[k][j]) + l[j] - l[i] + 1,\\ k = i + 1 \\cdots j - 1 \u6ce8\u610f l[i] l[i] \u8868\u793a\u7684\u662f\u7b2c i \u4e2a\u5207\u5206\u70b9\u7684\u4f4d\u7f6e\u3002 \u8fb9\u754c\uff1a dp[i][i] = 0 dp[i][i] = 0 \u3002 \u5c31\u6309\u7167\u533a\u95f4 dp \u7684\u59ff\u52bf\u6765\u5199\u5c31\u597d\u4e86\u3002","title":"\u5b57\u7b26\u4e32\u62c6\u5206"},{"location":"dp/#_26","text":"\u5f15\u7406\uff1a\u5b58\u5728\u6700\u4f18\u6295\u8d44\u7b56\u7565\uff0c\u6bcf\u5e74\u90fd\u5c06\u6240\u6709\u94b1\u6295\u5165\u5230\u5355\u4e00\u6295\u8d44\u4e2d\u3002 \u8fd9\u662f\u4e2a\u5f88\u6709\u8da3\u7684\u7ed3\u8bba\uff0cdp \u95ee\u9898\u4e2d\u5f88\u5e38\u89c1\u3002 https://fogsail.github.io/2017/05/08/20170508/ \u5269\u4e0b\u7684\u5c31\u662f\u4e2a\u4e8c\u7ef4 dp\uff0c\u60f3\u6210\u4ece (1, i) (1, i) \u8d70\u5230 (n, m) (n, m) \u7684\u8def\u5f84\u7684\u95ee\u9898\uff0c\u7136\u540e\u6536\u76ca\u548c\u4ee3\u4ef7\u5c31\u662f\u8fb9\u6743\uff0c\u7f51\u683c\u56fe\u53ea\u80fd\u5f80\u53f3\u4e0b\u65b9\u8d70\u3002","title":"\u6295\u8d44\u7b56\u7565\u89c4\u5212"},{"location":"dp/#_27","text":"\u751f\u4ea7\u591a\u4e86\u5c11\u4e86\u90fd\u6709\u989d\u5916\u7684\u6210\u672c\uff0c\u95ee\u600e\u4e48\u5b89\u6392\u751f\u4ea7\u7b56\u7565\u4f7f\u5f97\u989d\u5916\u7684\u6210\u672c\u5c3d\u53ef\u80fd\u5730\u5c11\u3002 cost[i][j] cost[i][j] \u8868\u793a\u5269\u4e0b i i \u4e2a\u6708\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u6709 j j \u53f0\u5e93\u5b58\u7684\u6700\u5c0f\u6210\u672c\u3002 https://walkccc.github.io/CLRS/Chap15/Problems/15-11/","title":"\u5e93\u5b58\u89c4\u5212"},{"location":"dp/#_28","text":"v[i][j] v[i][j] \u662f\u8003\u8651 i i \u4e4b\u540e\u7684\u4f4d\u7f6e\uff0c\u603b\u8d39\u7528\u4e3a x x \u7684\u6700\u5927\u6536\u76ca\u3002 https://walkccc.github.io/CLRS/Chap15/Problems/15-12/ \u7c7b\u4f3c\u4e8e\u80cc\u5305\u95ee\u9898\u3002 \u5f53\u9009\u53d6\u7684\u72b6\u6001\u96be\u4ee5\u8fdb\u884c\u9012\u63a8\u65f6\uff08\u5206\u89e3\u51fa\u7684\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u5f62\u5f0f\u4e0d\u4e00\u6837\uff09\uff0c\u8003\u8651\u5c06\u95ee\u9898\u72b6\u6001\u5206\u7c7b\u7ec6\u5316\uff0c\u589e\u52a0\u7ef4\u5ea6\u3002","title":"\u7b7e\u7ea6\u68d2\u7403\u81ea\u7531\u7403\u5458"},{"location":"dp/backpack/","text":"\u5728\u5b66\u4e60\u672c\u7ae0\u524d\u8bf7\u786e\u8ba4\u4f60\u5df2\u7ecf\u5b66\u4e60\u4e86 \u52a8\u6001\u89c4\u5212\u90e8\u5206\u7b80\u4ecb \u5728\u5177\u4f53\u8bb2\u4f55\u4e3a \"\u80cc\u5305 dp\" \u524d\uff0c\u5148\u6765\u770b\u5982\u4e0b\u7684\u4f8b\u9898 \u4f8b\u9898 [USACO07DEC] \u624b\u94fe Charm Bracelet \u672c\u9898\u9898\u610f\u53ef\u6982\u62ec\u4e3a\u2014\u2014N \u7269\u4f53\uff0c\u653e\u5165\u5bb9\u91cf\u4e3a M \u7684\u80cc\u5305\uff0c\u8981\u6c42\u4f7f\u603b\u4ef7\u503c\u6700\u5927\u3002\u7531\u4e8e\u6bcf\u4e2a\u7269\u4f53\u53ea\u6709 2 \u79cd\u60c5\u51b5\u2014\u2014\u53d6\u4e0e\u4e0d\u53d6\uff0c\u6b63\u5982\u4e8c\u8fdb\u5236\u4e2d\u7684 0 \u548c 1\u2014\u2014\u8fd9\u7c7b\u95ee\u9898\u4fbf\u88ab\u79f0\u4e3a \u201c0-1 \u80cc\u5305\u95ee\u9898\u201d\u3002 0-1 \u80cc\u5305 \u00b6 \u4f8b\u9898\u4e2d\u5df2\u77e5\u6761\u4ef6\u6709\u7b2c i \u4e2a\u7269\u4f53\u7684\u4f53\u79ef v[i] \u548c\u4ef7\u503c w[i], \u80cc\u5305\u603b\u5bb9\u91cf \u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u53ef\u4ee5\u8ba1\u7b97\u603b\u4ef7\u503c\u7684\uff0c\u53ea\u6709\u5df2\u7ecf\u653e\u5165\u80cc\u5305\u7684\u7269\u4f53\uff0c\u56e0\u6b64\u8be5\u9898\u4e2d\u5bf9 \"\u662f\u5426\u4e3a\u6700\u5927\u503c\" \u7684\u5224\u65ad\u662f\u5efa\u7acb\u5728 \"\u5df2\u7ecf\u653e\u5165\u80cc\u5305\u4e4b\u4e2d\" \u7684\u57fa\u7840\u4e4b\u4e0a\u7684 \u5df2\u77e5\u5bf9\u4e8e\u4e00\u4e2a\u5bb9\u91cf\u4e3a v1\uff0c\u53ef\u4ee5\u653e\u7f6e\u7b2c 1 \u5230\u7b2c i \u4ef6\u7269\u4f53\u7684\u80cc\u5305\uff0c\u5176\u6700\u5927\u603b\u4ef7\u503c\u5f88\u660e\u663e\u7b49\u4e8e\u5bb9\u91cf\u4e3a v1 \u7684\u80cc\u5305\uff0c\u653e\u6709\u7b2c 1 \u5230\u7b2c (i-1) \u4ef6\u7269\u4f53\u65f6\u7684\u6700\u5927\u503c (\u7b2c i \u4ef6\u7269\u4f53\u4e0d\u53d6\u65f6) \u6216\u8005\u662f\u5bb9\u91cf\u4e3a v1-v[i]\u7684\u80cc\u5305\uff0c\u653e\u6709\u7b2c 1 \u5230\u7b2c (i-1) \u4ef6\u7269\u4f53\u65f6\u7684\u6700\u5927\u503c + w i \u7531\u6b64\u53ef\u4ee5\u5f97\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[v1][i]=max(dp[v1][i-1],dp[v1-v[i]][i-1]+w[i]) \u6709\u4e86\u8fd9\u6837\u7684\u601d\u8def\uff0c\u5c31\u53ef\u4ee5\u987a\u5229\u5730\u5199\u51fa\u4ee3\u7801\u4e86 1 2 for ( int i = 1 ; i <= v1 ; i ++ ) for ( int l = 0 ; l <= v1 - i ; l ++ ) dp [ l + i ] = max ( dp [ l ] + w [ i ], dp [ l + i ]); \u6309\u7167\u6b63\u786e\u7684\u601d\u8def\uff0c\u5199\u51fa\u4e86\u8fd9\u6837\u7684\u6838\u5fc3\u4ee3\u7801\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u63d0\u4ea4...... \u9519\uff01 \u8ba9\u6211\u4eec\u518d\u56de\u5934\u770b\u4e00\u4e0b\u4ee3\u7801\uff0ci \u8868\u793a\u5f53\u524d\u5224\u65ad\u7684\u662f\u7b2c i \u4e2a\u7269\u4f53\uff0cl \u5219\u7a77\u4e3e\u4f53\u79ef\uff0c\u53ef\u662f\u6ce8\u610f\u4e00\u4e2a\u5730\u65b9\u2014\u2014l \u662f\u4ece 0 \u5230 v1-v[i] \u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f\u4e3e\u4e2a\u6817\u5b50\uff0c\u53ef\u80fd\u5728\u4f53\u79ef\u4e3a (l) \u5904\u53d6\u7269\u4f53 i \u65b0\u7684 dp \u503c\u5b58\u5230\u4f53\u79ef\u4e3a (l+v[i]) \u5904, \u800c\u5728\u4f53\u79ef\u4e3a (l+v[i]) \u5904\uff0c\u7269\u4f53 i \u518d\u6b21\u88ab\u53d6 \u6240\u4ee5\uff0c\u5f53\u4ee5 0~v1-v[i]\u7684\u987a\u5e8f\u7a77\u4e3e\u65f6\uff0c\u7269\u4f53\u5b9e\u9645\u4e0a\u53ef\u80fd\u88ab\u52a0\u5165\u591a\u904d\uff0c\u8fd9\u663e\u7136\u4e0e\u9898\u610f\u4e0d\u7b26 \u56e0\u6b64\u4e3a\u4e86\u907f\u514d\u591a\u53d6\uff0c\u7a77\u4e3e\u987a\u5e8f\u5e94\u4e3a v1-v[i]~0 \u56e0\u6b64\u5b9e\u9645\u6838\u5fc3\u4ee3\u7801\u4e3a 1 2 for ( int i = 1 ; i <= v1 ; i ++ ) for ( int l = v1 - i ; l >= 0 ; l -- ) dp [ l + i ] = max ( dp [ l ] + w [ i ], dp [ l + i ]); \u4f8b\u9898\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; const int maxn = 13010 ; int n , v , c [ maxn ], w [ maxn ], most [ maxn ]; int main () { cin >> n >> v ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> c [ i ] >> w [ i ]; } for ( int i = 1 ; i <= n ; i ++ ) for ( int l = v ; l >= c [ i ]; l -- ) { if ( most [ l - c [ i ]] + w [ i ] > most [ l ]) most [ l ] = most [ l - c [ i ]] + w [ i ]; } cout << most [ v ]; return 0 ; } Ps. \u4e8b\u5b9e\u4e0a\uff0c\u7531\u5c0f\u5230\u5927\u7a77\u4e3e\u662f\u53e6\u4e00\u79cd\u80cc\u5305\u95ee\u9898\u7684\u89e3\u6cd5\uff0c\u7a0d\u540e\u4f1a\u63d0\u5230 \u5b8c\u5168\u80cc\u5305 \u00b6 \u591a\u91cd\u80cc\u5305 \u00b6","title":"\u80cc\u5305 DP"},{"location":"dp/backpack/#0-1","text":"\u4f8b\u9898\u4e2d\u5df2\u77e5\u6761\u4ef6\u6709\u7b2c i \u4e2a\u7269\u4f53\u7684\u4f53\u79ef v[i] \u548c\u4ef7\u503c w[i], \u80cc\u5305\u603b\u5bb9\u91cf \u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u53ef\u4ee5\u8ba1\u7b97\u603b\u4ef7\u503c\u7684\uff0c\u53ea\u6709\u5df2\u7ecf\u653e\u5165\u80cc\u5305\u7684\u7269\u4f53\uff0c\u56e0\u6b64\u8be5\u9898\u4e2d\u5bf9 \"\u662f\u5426\u4e3a\u6700\u5927\u503c\" \u7684\u5224\u65ad\u662f\u5efa\u7acb\u5728 \"\u5df2\u7ecf\u653e\u5165\u80cc\u5305\u4e4b\u4e2d\" \u7684\u57fa\u7840\u4e4b\u4e0a\u7684 \u5df2\u77e5\u5bf9\u4e8e\u4e00\u4e2a\u5bb9\u91cf\u4e3a v1\uff0c\u53ef\u4ee5\u653e\u7f6e\u7b2c 1 \u5230\u7b2c i \u4ef6\u7269\u4f53\u7684\u80cc\u5305\uff0c\u5176\u6700\u5927\u603b\u4ef7\u503c\u5f88\u660e\u663e\u7b49\u4e8e\u5bb9\u91cf\u4e3a v1 \u7684\u80cc\u5305\uff0c\u653e\u6709\u7b2c 1 \u5230\u7b2c (i-1) \u4ef6\u7269\u4f53\u65f6\u7684\u6700\u5927\u503c (\u7b2c i \u4ef6\u7269\u4f53\u4e0d\u53d6\u65f6) \u6216\u8005\u662f\u5bb9\u91cf\u4e3a v1-v[i]\u7684\u80cc\u5305\uff0c\u653e\u6709\u7b2c 1 \u5230\u7b2c (i-1) \u4ef6\u7269\u4f53\u65f6\u7684\u6700\u5927\u503c + w i \u7531\u6b64\u53ef\u4ee5\u5f97\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[v1][i]=max(dp[v1][i-1],dp[v1-v[i]][i-1]+w[i]) \u6709\u4e86\u8fd9\u6837\u7684\u601d\u8def\uff0c\u5c31\u53ef\u4ee5\u987a\u5229\u5730\u5199\u51fa\u4ee3\u7801\u4e86 1 2 for ( int i = 1 ; i <= v1 ; i ++ ) for ( int l = 0 ; l <= v1 - i ; l ++ ) dp [ l + i ] = max ( dp [ l ] + w [ i ], dp [ l + i ]); \u6309\u7167\u6b63\u786e\u7684\u601d\u8def\uff0c\u5199\u51fa\u4e86\u8fd9\u6837\u7684\u6838\u5fc3\u4ee3\u7801\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u63d0\u4ea4...... \u9519\uff01 \u8ba9\u6211\u4eec\u518d\u56de\u5934\u770b\u4e00\u4e0b\u4ee3\u7801\uff0ci \u8868\u793a\u5f53\u524d\u5224\u65ad\u7684\u662f\u7b2c i \u4e2a\u7269\u4f53\uff0cl \u5219\u7a77\u4e3e\u4f53\u79ef\uff0c\u53ef\u662f\u6ce8\u610f\u4e00\u4e2a\u5730\u65b9\u2014\u2014l \u662f\u4ece 0 \u5230 v1-v[i] \u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f\u4e3e\u4e2a\u6817\u5b50\uff0c\u53ef\u80fd\u5728\u4f53\u79ef\u4e3a (l) \u5904\u53d6\u7269\u4f53 i \u65b0\u7684 dp \u503c\u5b58\u5230\u4f53\u79ef\u4e3a (l+v[i]) \u5904, \u800c\u5728\u4f53\u79ef\u4e3a (l+v[i]) \u5904\uff0c\u7269\u4f53 i \u518d\u6b21\u88ab\u53d6 \u6240\u4ee5\uff0c\u5f53\u4ee5 0~v1-v[i]\u7684\u987a\u5e8f\u7a77\u4e3e\u65f6\uff0c\u7269\u4f53\u5b9e\u9645\u4e0a\u53ef\u80fd\u88ab\u52a0\u5165\u591a\u904d\uff0c\u8fd9\u663e\u7136\u4e0e\u9898\u610f\u4e0d\u7b26 \u56e0\u6b64\u4e3a\u4e86\u907f\u514d\u591a\u53d6\uff0c\u7a77\u4e3e\u987a\u5e8f\u5e94\u4e3a v1-v[i]~0 \u56e0\u6b64\u5b9e\u9645\u6838\u5fc3\u4ee3\u7801\u4e3a 1 2 for ( int i = 1 ; i <= v1 ; i ++ ) for ( int l = v1 - i ; l >= 0 ; l -- ) dp [ l + i ] = max ( dp [ l ] + w [ i ], dp [ l + i ]); \u4f8b\u9898\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; const int maxn = 13010 ; int n , v , c [ maxn ], w [ maxn ], most [ maxn ]; int main () { cin >> n >> v ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> c [ i ] >> w [ i ]; } for ( int i = 1 ; i <= n ; i ++ ) for ( int l = v ; l >= c [ i ]; l -- ) { if ( most [ l - c [ i ]] + w [ i ] > most [ l ]) most [ l ] = most [ l - c [ i ]] + w [ i ]; } cout << most [ v ]; return 0 ; } Ps. \u4e8b\u5b9e\u4e0a\uff0c\u7531\u5c0f\u5230\u5927\u7a77\u4e3e\u662f\u53e6\u4e00\u79cd\u80cc\u5305\u95ee\u9898\u7684\u89e3\u6cd5\uff0c\u7a0d\u540e\u4f1a\u63d0\u5230","title":"0-1 \u80cc\u5305"},{"location":"dp/backpack/#_1","text":"","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"dp/backpack/#_2","text":"","title":"\u591a\u91cd\u80cc\u5305"},{"location":"dp/dag/","text":"DAG \u5373 \u6709\u5411\u65e0\u73af\u56fe \uff0c\u4e00\u4e9b\u5b9e\u9645\u95ee\u9898\u4e2d\u7684\u4e8c\u5143\u5173\u7cfb\u90fd\u53ef\u4f7f\u7528 DAG \u6765\u5efa\u6a21\u3002 \u4f8b\u5b50 \u00b6 \u4ee5\u8fd9\u9053\u9898\u4e3a\u4f8b\u5b50\uff0c\u6765\u5206\u6790\u4e00\u4e0b DAG \u5efa\u6a21\u7684\u8fc7\u7a0b\u3002 \u4f8b\u9898 UVa 437 \u5df4\u6bd4\u4f26\u5854 The Tower of Babylon \u6709 n (n\\leqslant 30) n (n\\leqslant 30) \u79cd\u7816\u5757\uff0c\u5df2\u77e5\u4e09\u6761\u8fb9\u957f\uff0c\u6bcf\u79cd\u90fd\u6709\u65e0\u7a77\u591a\u4e2a\u3002\u8981\u6c42\u9009\u4e00\u4e9b\u7acb\u65b9\u4f53\u645e\u6210\u4e00\u6839\u5c3d\u91cf\u9ad8\u7684\u67f1\u5b50\uff08\u6bcf\u4e2a\u7816\u5757\u53ef\u4ee5\u81ea\u884c\u9009\u62e9\u4e00\u6761\u8fb9\u4f5c\u4e3a\u9ad8\uff09\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\u5206\u522b\u4e25\u683c\u5c0f\u4e8e\u5b83\u4e0b\u65b9\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\uff0c\u6c42\u5854\u7684\u6700\u5927\u9ad8\u5ea6\u3002 \u5efa\u7acb DAG \u00b6 \u7531\u4e8e\u6bcf\u4e2a\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\u5206\u522b\u4e25\u683c\u5c0f\u4e8e\u5b83\u4e0b\u65b9\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\uff0c\u56e0\u6b64\u4e0d\u96be\u5c06\u8fd9\u6837\u4e00\u79cd\u5173\u7cfb\u4f5c\u4e3a\u5efa\u56fe\u7684\u4f9d\u636e\uff0c\u800c\u672c\u9898\u4e5f\u5c31\u8f6c\u5316\u4e3a\u6700\u957f\u8def\u95ee\u9898\u3002 \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u7816\u5757 j j \u80fd\u653e\u5728\u7816\u5757 i i \u4e0a\uff0c\u90a3\u4e48 i i \u548c j j \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8fb9 (i, j) (i, j) \uff0c\u4e14\u8fb9\u6743\u5c31\u662f\u7816\u5757 j j \u6240\u9009\u53d6\u7684\u9ad8\u3002 \u672c\u9898\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u6bcf\u4e2a\u7816\u5757\u7684\u9ad8\u6709\u4e09\u79cd\u9009\u6cd5\uff0c\u600e\u6837\u5efa\u56fe\u66f4\u5408\u9002\u5462\uff1f \u4e0d\u59a8\u5c06\u6bcf\u4e2a\u7816\u5757\u62c6\u89e3\u4e3a\u4e09\u79cd\u5806\u53e0\u65b9\u5f0f\uff0c\u5373\u5c06\u4e00\u4e2a\u7816\u5757\u5206\u89e3\u4e3a\u4e09\u4e2a\u7816\u5757\uff0c\u6bcf\u4e00\u4e2a\u62c6\u89e3\u5f97\u5230\u7684\u7816\u5757\u90fd\u9009\u53d6\u4e0d\u540c\u7684\u9ad8\u3002 \u521d\u59cb\u7684\u8d77\u70b9\u662f\u5927\u5730\uff0c\u5927\u5730\u7684\u5e95\u9762\u662f\u65e0\u7a77\u5927\u7684\uff0c\u5219\u5927\u5730\u53ef\u8fbe\u4efb\u610f\u7816\u5757\uff0c\u5f53\u7136\u6211\u4eec\u5199\u7a0b\u5e8f\u65f6\u4e0d\u5fc5\u7279\u610f\u5199\u4e0a\u65e0\u7a77\u5927\u3002 \u5047\u8bbe\u6709\u4e24\u4e2a\u7816\u5757\uff0c\u4e09\u6761\u8fb9\u5206\u522b\u4e3a 31, 41, 59 31, 41, 59 \u548c 33, 83, 27 33, 83, 27 \uff0c\u90a3\u4e48\u6574\u5f20 DAG \u5e94\u8be5\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56fe\u4e2d\u84dd\u5b9e\u6846\u6240\u8868\u793a\u7684\u662f\u4e00\u4e2a\u7816\u5757\u62c6\u89e3\u5f97\u5230\u7684\u4e00\u7ec4\u7816\u5757\uff0c\u4e4b\u6240\u4ee5\u7528 \\{\\} \\{\\} \u8868\u793a\u5e95\u9762\u8fb9\u957f\uff0c\u662f\u56e0\u4e3a\u7816\u5757\u4e00\u65e6\u9009\u53d6\u4e86\u9ad8\uff0c\u5e95\u9762\u8fb9\u957f\u5c31\u662f\u65e0\u5e8f\u7684\u3002 \u56fe\u4e2d\u9ec4\u865a\u6846\u8868\u793a\u7684\u662f\u91cd\u590d\u8ba1\u7b97\u90e8\u5206\uff0c\u4e3a\u4e0b\u6587\u505a\u94fa\u57ab\u3002 \u8f6c\u79fb \u00b6 \u9898\u76ee\u8981\u6c42\u7684\u662f\u5854\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u5df2\u7ecf\u8f6c\u5316\u4e3a\u6700\u957f\u8def\u95ee\u9898\uff0c\u5176\u8d77\u70b9\u4e0a\u6587\u5df2\u6307\u51fa\u662f\u5927\u5730\uff0c\u90a3\u4e48\u7ec8\u70b9\u5462\uff1f \u663e\u7136\u7ec8\u70b9\u5df2\u7ecf\u81ea\u7136\u786e\u5b9a\uff0c\u90a3\u5c31\u662f\u67d0\u7816\u5757\u4e0a\u4e0d\u80fd\u518d\u642d\u522b\u7684\u7816\u5757\u7684\u65f6\u5019\u3002 \u4e4b\u524d\u5728\u56fe\u4e0a\u6807\u8bb0\u7684\u9ec4\u865a\u6846\u8868\u660e\u6709\u91cd\u590d\u8ba1\u7b97\uff0c\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u8003\u8651\u8f6c\u79fb\u65b9\u7a0b\u3002 \u663e\u7136\uff0c\u7816\u5757\u4e00\u65e6\u9009\u53d6\u4e86\u9ad8\uff0c\u90a3\u4e48\u8fd9\u5757\u7816\u5757\u4e0a\u6700\u5927\u80fd\u653e\u7684\u9ad8\u5ea6\u662f\u786e\u5b9a\u7684\u3002 \u67d0\u4e2a\u7816\u5757 i i \u6709\u4e09\u79cd\u5806\u53e0\u65b9\u5f0f\u5206\u522b\u8bb0\u4e3a 0, 1, 2 0, 1, 2 \uff0c\u90a3\u4e48\u5bf9\u4e8e\u7816\u5757 i i \u548c\u5176\u5806\u53e0\u65b9\u5f0f r r \u6765\u8bf4\u5219\u6709\u5982\u4e0b\u8f6c\u79fb\u65b9\u7a0b d(i, r) = \\max\\left\\{d(j, r') + h'\\right\\} d(i, r) = \\max\\left\\{d(j, r') + h'\\right\\} \u5176\u4e2d j j \u662f\u6240\u6709\u90a3\u4e9b\u5728\u7816\u5757 i i \u4ee5 r r \u65b9\u5f0f\u5806\u53e0\u65f6\u53ef\u653e\u4e0a\u7684\u7816\u5757\uff0c r' r' \u5bf9\u5e94 j j \u6b64\u65f6\u7684\u6446\u653e\u65b9\u5f0f\uff0c\u4e5f\u5c31\u786e\u5b9a\u4e86\u6b64\u65f6\u552f\u4e00\u7684\u9ad8\u5ea6 h' h' \u3002 \u5728\u5b9e\u9645\u7f16\u5199\u65f6\uff0c\u5c06\u6240\u6709 d(i, r) d(i, r) \u90fd\u521d\u59cb\u5316\u4e3a -1 -1 \uff0c\u8868\u793a\u672a\u8ba1\u7b97\u8fc7\u3002 \u5728\u8bd5\u56fe\u8ba1\u7b97\u524d\uff0c\u5982\u679c\u53d1\u73b0\u5df2\u7ecf\u8ba1\u7b97\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de\u4fdd\u5b58\u7684\u503c\uff1b\u5426\u5219\u5c31\u6309\u6b65\u8ba1\u7b97\uff0c\u5e76\u4fdd\u5b58\u3002 \u6700\u7ec8\u7b54\u6848\u662f\u6240\u6709 d(i, r) d(i, r) \u7684\u6700\u5927\u503c\u3002 \u9898\u89e3 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <cstring> #include <iostream> #define MAXN (30 + 5) #define MAXV (500 + 5) #define MAX(a, b) (((a) > (b)) ? (a) : (b)) int d [ MAXN ][ 3 ]; int x [ MAXN ], y [ MAXN ], z [ MAXN ]; int babylon_sub ( int c , int rot , int n ) { if ( d [ c ][ rot ] != - 1 ) { return d [ c ][ rot ]; } d [ c ][ rot ] = 0 ; int base1 , base2 ; if ( rot == 0 ) { base1 = x [ c ]; base2 = y [ c ]; } if ( rot == 1 ) { base1 = y [ c ]; base2 = z [ c ]; } if ( rot == 2 ) { base1 = x [ c ]; base2 = z [ c ]; } for ( int i = 0 ; i < n ; i ++ ) { if (( x [ i ] < base1 && y [ i ] < base2 ) || ( y [ i ] < base1 && x [ i ] < base2 )) d [ c ][ rot ] = MAX ( d [ c ][ rot ], babylon_sub ( i , 0 , n ) + z [ i ]); if (( y [ i ] < base1 && z [ i ] < base2 ) || ( z [ i ] < base1 && y [ i ] < base2 )) d [ c ][ rot ] = MAX ( d [ c ][ rot ], babylon_sub ( i , 1 , n ) + x [ i ]); if (( x [ i ] < base1 && z [ i ] < base2 ) || ( z [ i ] < base1 && x [ i ] < base2 )) d [ c ][ rot ] = MAX ( d [ c ][ rot ], babylon_sub ( i , 2 , n ) + y [ i ]); } return d [ c ][ rot ]; } int babylon ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { d [ i ][ 0 ] = - 1 ; d [ i ][ 1 ] = - 1 ; d [ i ][ 2 ] = - 1 ; } int r = 0 ; for ( int i = 0 ; i < n ; i ++ ) { r = MAX ( r , babylon_sub ( i , 0 , n ) + z [ i ]); r = MAX ( r , babylon_sub ( i , 1 , n ) + x [ i ]); r = MAX ( r , babylon_sub ( i , 2 , n ) + y [ i ]); } return r ; } int main () { int t = 0 ; while ( true ) { int n ; std :: cin >> n ; if ( n == 0 ) break ; t ++ ; for ( int i = 0 ; i < n ; i ++ ) { std :: cin >> x [ i ] >> y [ i ] >> z [ i ]; } std :: cout << \"Case \" << t << \":\" << \" maximum height = \" << babylon ( n ); std :: cout << std :: endl ; } return 0 ; }","title":"DAG \u4e0a\u7684 DP"},{"location":"dp/dag/#_1","text":"\u4ee5\u8fd9\u9053\u9898\u4e3a\u4f8b\u5b50\uff0c\u6765\u5206\u6790\u4e00\u4e0b DAG \u5efa\u6a21\u7684\u8fc7\u7a0b\u3002 \u4f8b\u9898 UVa 437 \u5df4\u6bd4\u4f26\u5854 The Tower of Babylon \u6709 n (n\\leqslant 30) n (n\\leqslant 30) \u79cd\u7816\u5757\uff0c\u5df2\u77e5\u4e09\u6761\u8fb9\u957f\uff0c\u6bcf\u79cd\u90fd\u6709\u65e0\u7a77\u591a\u4e2a\u3002\u8981\u6c42\u9009\u4e00\u4e9b\u7acb\u65b9\u4f53\u645e\u6210\u4e00\u6839\u5c3d\u91cf\u9ad8\u7684\u67f1\u5b50\uff08\u6bcf\u4e2a\u7816\u5757\u53ef\u4ee5\u81ea\u884c\u9009\u62e9\u4e00\u6761\u8fb9\u4f5c\u4e3a\u9ad8\uff09\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\u5206\u522b\u4e25\u683c\u5c0f\u4e8e\u5b83\u4e0b\u65b9\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\uff0c\u6c42\u5854\u7684\u6700\u5927\u9ad8\u5ea6\u3002","title":"\u4f8b\u5b50"},{"location":"dp/dag/#dag","text":"\u7531\u4e8e\u6bcf\u4e2a\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\u5206\u522b\u4e25\u683c\u5c0f\u4e8e\u5b83\u4e0b\u65b9\u7816\u5757\u7684\u5e95\u9762\u957f\u5bbd\uff0c\u56e0\u6b64\u4e0d\u96be\u5c06\u8fd9\u6837\u4e00\u79cd\u5173\u7cfb\u4f5c\u4e3a\u5efa\u56fe\u7684\u4f9d\u636e\uff0c\u800c\u672c\u9898\u4e5f\u5c31\u8f6c\u5316\u4e3a\u6700\u957f\u8def\u95ee\u9898\u3002 \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u7816\u5757 j j \u80fd\u653e\u5728\u7816\u5757 i i \u4e0a\uff0c\u90a3\u4e48 i i \u548c j j \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8fb9 (i, j) (i, j) \uff0c\u4e14\u8fb9\u6743\u5c31\u662f\u7816\u5757 j j \u6240\u9009\u53d6\u7684\u9ad8\u3002 \u672c\u9898\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u6bcf\u4e2a\u7816\u5757\u7684\u9ad8\u6709\u4e09\u79cd\u9009\u6cd5\uff0c\u600e\u6837\u5efa\u56fe\u66f4\u5408\u9002\u5462\uff1f \u4e0d\u59a8\u5c06\u6bcf\u4e2a\u7816\u5757\u62c6\u89e3\u4e3a\u4e09\u79cd\u5806\u53e0\u65b9\u5f0f\uff0c\u5373\u5c06\u4e00\u4e2a\u7816\u5757\u5206\u89e3\u4e3a\u4e09\u4e2a\u7816\u5757\uff0c\u6bcf\u4e00\u4e2a\u62c6\u89e3\u5f97\u5230\u7684\u7816\u5757\u90fd\u9009\u53d6\u4e0d\u540c\u7684\u9ad8\u3002 \u521d\u59cb\u7684\u8d77\u70b9\u662f\u5927\u5730\uff0c\u5927\u5730\u7684\u5e95\u9762\u662f\u65e0\u7a77\u5927\u7684\uff0c\u5219\u5927\u5730\u53ef\u8fbe\u4efb\u610f\u7816\u5757\uff0c\u5f53\u7136\u6211\u4eec\u5199\u7a0b\u5e8f\u65f6\u4e0d\u5fc5\u7279\u610f\u5199\u4e0a\u65e0\u7a77\u5927\u3002 \u5047\u8bbe\u6709\u4e24\u4e2a\u7816\u5757\uff0c\u4e09\u6761\u8fb9\u5206\u522b\u4e3a 31, 41, 59 31, 41, 59 \u548c 33, 83, 27 33, 83, 27 \uff0c\u90a3\u4e48\u6574\u5f20 DAG \u5e94\u8be5\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56fe\u4e2d\u84dd\u5b9e\u6846\u6240\u8868\u793a\u7684\u662f\u4e00\u4e2a\u7816\u5757\u62c6\u89e3\u5f97\u5230\u7684\u4e00\u7ec4\u7816\u5757\uff0c\u4e4b\u6240\u4ee5\u7528 \\{\\} \\{\\} \u8868\u793a\u5e95\u9762\u8fb9\u957f\uff0c\u662f\u56e0\u4e3a\u7816\u5757\u4e00\u65e6\u9009\u53d6\u4e86\u9ad8\uff0c\u5e95\u9762\u8fb9\u957f\u5c31\u662f\u65e0\u5e8f\u7684\u3002 \u56fe\u4e2d\u9ec4\u865a\u6846\u8868\u793a\u7684\u662f\u91cd\u590d\u8ba1\u7b97\u90e8\u5206\uff0c\u4e3a\u4e0b\u6587\u505a\u94fa\u57ab\u3002","title":"\u5efa\u7acb DAG"},{"location":"dp/dag/#_2","text":"\u9898\u76ee\u8981\u6c42\u7684\u662f\u5854\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u5df2\u7ecf\u8f6c\u5316\u4e3a\u6700\u957f\u8def\u95ee\u9898\uff0c\u5176\u8d77\u70b9\u4e0a\u6587\u5df2\u6307\u51fa\u662f\u5927\u5730\uff0c\u90a3\u4e48\u7ec8\u70b9\u5462\uff1f \u663e\u7136\u7ec8\u70b9\u5df2\u7ecf\u81ea\u7136\u786e\u5b9a\uff0c\u90a3\u5c31\u662f\u67d0\u7816\u5757\u4e0a\u4e0d\u80fd\u518d\u642d\u522b\u7684\u7816\u5757\u7684\u65f6\u5019\u3002 \u4e4b\u524d\u5728\u56fe\u4e0a\u6807\u8bb0\u7684\u9ec4\u865a\u6846\u8868\u660e\u6709\u91cd\u590d\u8ba1\u7b97\uff0c\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u8003\u8651\u8f6c\u79fb\u65b9\u7a0b\u3002 \u663e\u7136\uff0c\u7816\u5757\u4e00\u65e6\u9009\u53d6\u4e86\u9ad8\uff0c\u90a3\u4e48\u8fd9\u5757\u7816\u5757\u4e0a\u6700\u5927\u80fd\u653e\u7684\u9ad8\u5ea6\u662f\u786e\u5b9a\u7684\u3002 \u67d0\u4e2a\u7816\u5757 i i \u6709\u4e09\u79cd\u5806\u53e0\u65b9\u5f0f\u5206\u522b\u8bb0\u4e3a 0, 1, 2 0, 1, 2 \uff0c\u90a3\u4e48\u5bf9\u4e8e\u7816\u5757 i i \u548c\u5176\u5806\u53e0\u65b9\u5f0f r r \u6765\u8bf4\u5219\u6709\u5982\u4e0b\u8f6c\u79fb\u65b9\u7a0b d(i, r) = \\max\\left\\{d(j, r') + h'\\right\\} d(i, r) = \\max\\left\\{d(j, r') + h'\\right\\} \u5176\u4e2d j j \u662f\u6240\u6709\u90a3\u4e9b\u5728\u7816\u5757 i i \u4ee5 r r \u65b9\u5f0f\u5806\u53e0\u65f6\u53ef\u653e\u4e0a\u7684\u7816\u5757\uff0c r' r' \u5bf9\u5e94 j j \u6b64\u65f6\u7684\u6446\u653e\u65b9\u5f0f\uff0c\u4e5f\u5c31\u786e\u5b9a\u4e86\u6b64\u65f6\u552f\u4e00\u7684\u9ad8\u5ea6 h' h' \u3002 \u5728\u5b9e\u9645\u7f16\u5199\u65f6\uff0c\u5c06\u6240\u6709 d(i, r) d(i, r) \u90fd\u521d\u59cb\u5316\u4e3a -1 -1 \uff0c\u8868\u793a\u672a\u8ba1\u7b97\u8fc7\u3002 \u5728\u8bd5\u56fe\u8ba1\u7b97\u524d\uff0c\u5982\u679c\u53d1\u73b0\u5df2\u7ecf\u8ba1\u7b97\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de\u4fdd\u5b58\u7684\u503c\uff1b\u5426\u5219\u5c31\u6309\u6b65\u8ba1\u7b97\uff0c\u5e76\u4fdd\u5b58\u3002 \u6700\u7ec8\u7b54\u6848\u662f\u6240\u6709 d(i, r) d(i, r) \u7684\u6700\u5927\u503c\u3002","title":"\u8f6c\u79fb"},{"location":"dp/dag/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <cstring> #include <iostream> #define MAXN (30 + 5) #define MAXV (500 + 5) #define MAX(a, b) (((a) > (b)) ? (a) : (b)) int d [ MAXN ][ 3 ]; int x [ MAXN ], y [ MAXN ], z [ MAXN ]; int babylon_sub ( int c , int rot , int n ) { if ( d [ c ][ rot ] != - 1 ) { return d [ c ][ rot ]; } d [ c ][ rot ] = 0 ; int base1 , base2 ; if ( rot == 0 ) { base1 = x [ c ]; base2 = y [ c ]; } if ( rot == 1 ) { base1 = y [ c ]; base2 = z [ c ]; } if ( rot == 2 ) { base1 = x [ c ]; base2 = z [ c ]; } for ( int i = 0 ; i < n ; i ++ ) { if (( x [ i ] < base1 && y [ i ] < base2 ) || ( y [ i ] < base1 && x [ i ] < base2 )) d [ c ][ rot ] = MAX ( d [ c ][ rot ], babylon_sub ( i , 0 , n ) + z [ i ]); if (( y [ i ] < base1 && z [ i ] < base2 ) || ( z [ i ] < base1 && y [ i ] < base2 )) d [ c ][ rot ] = MAX ( d [ c ][ rot ], babylon_sub ( i , 1 , n ) + x [ i ]); if (( x [ i ] < base1 && z [ i ] < base2 ) || ( z [ i ] < base1 && x [ i ] < base2 )) d [ c ][ rot ] = MAX ( d [ c ][ rot ], babylon_sub ( i , 2 , n ) + y [ i ]); } return d [ c ][ rot ]; } int babylon ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { d [ i ][ 0 ] = - 1 ; d [ i ][ 1 ] = - 1 ; d [ i ][ 2 ] = - 1 ; } int r = 0 ; for ( int i = 0 ; i < n ; i ++ ) { r = MAX ( r , babylon_sub ( i , 0 , n ) + z [ i ]); r = MAX ( r , babylon_sub ( i , 1 , n ) + x [ i ]); r = MAX ( r , babylon_sub ( i , 2 , n ) + y [ i ]); } return r ; } int main () { int t = 0 ; while ( true ) { int n ; std :: cin >> n ; if ( n == 0 ) break ; t ++ ; for ( int i = 0 ; i < n ; i ++ ) { std :: cin >> x [ i ] >> y [ i ] >> z [ i ]; } std :: cout << \"Case \" << t << \":\" << \" maximum height = \" << babylon ( n ); std :: cout << std :: endl ; } return 0 ; }","title":"\u9898\u89e3"},{"location":"dp/interval/","text":"\u4ec0\u4e48\u662f\u533a\u95f4 DP\uff1f \u00b6 \u533a\u95f4\u7c7b\u52a8\u6001\u89c4\u5212\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u6269\u5c55\uff0c\u5b83\u5728\u5206\u9636\u6bb5\u5730\u5212\u5206\u95ee\u9898\u65f6\uff0c\u4e0e\u9636\u6bb5\u4e2d\u5143\u7d20\u51fa\u73b0\u7684\u987a\u5e8f\u548c\u7531\u524d\u4e00\u9636\u6bb5\u7684\u54ea\u4e9b\u5143\u7d20\u5408\u5e76\u800c\u6765\u7531\u5f88\u5927\u7684\u5173\u7cfb\u3002\u4ee4\u72b6\u6001 f(i,j) f(i,j) \u8868\u793a\u5c06\u4e0b\u6807\u4f4d\u7f6e i i \u5230 j j \u7684\u6240\u6709\u5143\u7d20\u5408\u5e76\u80fd\u83b7\u5f97\u7684\u4ef7\u503c\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48 f(i,j)=\\max\\{f(i,k)+f(k+1,j)+cost\\} f(i,j)=\\max\\{f(i,k)+f(k+1,j)+cost\\} \uff0c cost cost \u4e3a\u5c06\u8fd9\u4e24\u7ec4\u5143\u7d20\u5408\u5e76\u8d77\u6765\u7684\u4ee3\u4ef7\u3002 \u533a\u95f4 DP \u7684\u7279\u70b9\uff1a \u5408\u5e76 \uff1a\u5373\u5c06\u4e24\u4e2a\u6216\u591a\u4e2a\u90e8\u5206\u8fdb\u884c\u6574\u5408\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\uff1b \u7279\u5f81 \uff1a\u80fd\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u80fd\u4e24\u4e24\u5408\u5e76\u7684\u5f62\u5f0f\uff1b \u6c42\u89e3 \uff1a\u5bf9\u6574\u4e2a\u95ee\u9898\u8bbe\u6700\u4f18\u503c\uff0c\u679a\u4e3e\u5408\u5e76\u70b9\uff0c\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\uff0c\u6700\u540e\u5408\u5e76\u4e24\u4e2a\u90e8\u5206\u7684\u6700\u4f18\u503c\u5f97\u5230\u539f\u95ee\u9898\u7684\u6700\u4f18\u503c\u3002 \u4f8b\u9898 \u6d1b\u8c37 P1880 [NOI1995] \u77f3\u5b50\u5408\u5e76 \u9898\u76ee\u5927\u610f\uff1a\u5728\u4e00\u4e2a\u73af\u4e0a\u6709 n n \u4e2a\u6570 a_1,a_2,...,a_n a_1,a_2,...,a_n \uff0c\u8fdb\u884c n-1 n-1 \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u76f8\u90bb\u7684\u4e24\u5806\u5408\u5e76\u6210\u4e00\u5806\uff0c\u80fd\u83b7\u5f97\u65b0\u7684\u4e00\u5806\u4e2d\u7684\u77f3\u5b50\u6570\u91cf\u7684\u548c\u7684\u5f97\u5206\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u4f60\u7684\u5f97\u5206\u3002 \u8003\u8651\u4e0d\u5728\u73af\u4e0a\uff0c\u800c\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u60c5\u51b5\u3002 \u4ee4 f(i,j) f(i,j) \u8868\u793a\u5c06\u533a\u95f4 [i,j] [i,j] \u5185\u7684\u6240\u6709\u77f3\u5b50\u5408\u5e76\u5230\u4e00\u8d77\u7684\u6700\u5927\u5f97\u5206\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f(i,j)=max\\{f(i,k)+f(k+1,j)+\\sum_{t=i}^{j} a_t \\}~(i\\le k<j) f(i,j)=max\\{f(i,k)+f(k+1,j)+\\sum_{t=i}^{j} a_t \\}~(i\\le k<j) \u4ee4 sum_i sum_i \u8868\u793a a a \u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u53d8\u5f62\u4e3a f(i,j)=max\\{f(i,k)+f(k+1,j)+sum_j-sum_{i-1} \\} f(i,j)=max\\{f(i,k)+f(k+1,j)+sum_j-sum_{i-1} \\} \u3002 \u600e\u6837\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb \u00b6 \u7531\u4e8e\u8ba1\u7b97 f(i,j) f(i,j) \u7684\u503c\u65f6\u9700\u8981\u77e5\u9053\u6240\u6709 f(i,k) f(i,k) \u548c f(k+1,j) f(k+1,j) \u7684\u503c\uff0c\u800c\u8fd9\u4e24\u4e2a\u4e2d\u5305\u542b\u7684\u5143\u7d20\u7684\u6570\u91cf\u90fd\u5c0f\u4e8e f(i,j) f(i,j) \uff0c\u6240\u4ee5\u6211\u4eec\u4ee5 len=j-i+1 len=j-i+1 \u4f5c\u4e3a DP \u7684\u9636\u6bb5\u3002\u9996\u5148\u4ece\u5c0f\u5230\u5927\u679a\u4e3e len len \uff0c\u7136\u540e\u679a\u4e3e i i \u7684\u503c\uff0c\u6839\u636e len len \u548c i i \u7528\u516c\u5f0f\u8ba1\u7b97\u51fa j j \u7684\u503c\uff0c\u7136\u540e\u679a\u4e3e k k \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3) \u600e\u6837\u5904\u7406\u73af \u00b6 \u9898\u76ee\u4e2d\u77f3\u5b50\u56f4\u6210\u4e00\u4e2a\u73af\uff0c\u800c\u4e0d\u662f\u4e00\u6761\u94fe\uff0c\u600e\u4e48\u529e\u5462\uff1f \u65b9\u6cd5\u4e00 \uff1a\u7531\u4e8e\u77f3\u5b50\u56f4\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5206\u5f00\u7684\u4f4d\u7f6e\uff0c\u5c06\u8fd9\u4e2a\u73af\u8f6c\u5316\u6210\u4e00\u4e2a\u94fe\uff0c\u7531\u4e8e\u8981\u679a\u4e3e n n \u6b21\uff0c\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^4) O(n^4) \u3002 \u65b9\u6cd5\u4e8c \uff1a\u6211\u4eec\u5c06\u8fd9\u6761\u94fe\u5ef6\u957f\u4e24\u500d\uff0c\u53d8\u6210 2\\times n 2\\times n \u5806\uff0c\u5176\u4e2d\u7b2c i i \u5806\u4e0e\u7b2c n+i n+i \u5806\u76f8\u540c\uff0c\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u540e\uff0c\u53d6 f(1,n),f(2,n+1),...,f(i,n+i-1) f(1,n),f(2,n+1),...,f(i,n+i-1) \u4e2d\u7684\u6700\u4f18\u503c\uff0c\u5373\u4e3a\u6700\u540e\u7684\u7b54\u6848\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(n^3) O(n^3) \u3002 \u6838\u5fc3\u4ee3\u7801 \u00b6 1 2 3 4 5 6 for ( len = 1 ; len <= n ; len ++ ) for ( i = 1 ; i <= 2 * n - 1 ; i ++ ) { int j = len + i - 1 ; for ( k = i ; k <= j && k <= 2 * n - 1 ; k ++ ) f [ i ][ j ] = max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ] + sum [ j ] - sum [ i - 1 ]); } \u51e0\u9053\u7ec3\u4e60\u9898 \u00b6 \u6d1b\u8c37 P1063 \u80fd\u91cf\u9879\u94fe \u6d1b\u8c37 P1005 \u77e9\u9635\u53d6\u6570\u6e38\u620f \u6d1b\u8c37 P4767 [IOI2000] \u90ae\u5c40","title":"\u533a\u95f4 DP"},{"location":"dp/interval/#dp","text":"\u533a\u95f4\u7c7b\u52a8\u6001\u89c4\u5212\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u6269\u5c55\uff0c\u5b83\u5728\u5206\u9636\u6bb5\u5730\u5212\u5206\u95ee\u9898\u65f6\uff0c\u4e0e\u9636\u6bb5\u4e2d\u5143\u7d20\u51fa\u73b0\u7684\u987a\u5e8f\u548c\u7531\u524d\u4e00\u9636\u6bb5\u7684\u54ea\u4e9b\u5143\u7d20\u5408\u5e76\u800c\u6765\u7531\u5f88\u5927\u7684\u5173\u7cfb\u3002\u4ee4\u72b6\u6001 f(i,j) f(i,j) \u8868\u793a\u5c06\u4e0b\u6807\u4f4d\u7f6e i i \u5230 j j \u7684\u6240\u6709\u5143\u7d20\u5408\u5e76\u80fd\u83b7\u5f97\u7684\u4ef7\u503c\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48 f(i,j)=\\max\\{f(i,k)+f(k+1,j)+cost\\} f(i,j)=\\max\\{f(i,k)+f(k+1,j)+cost\\} \uff0c cost cost \u4e3a\u5c06\u8fd9\u4e24\u7ec4\u5143\u7d20\u5408\u5e76\u8d77\u6765\u7684\u4ee3\u4ef7\u3002 \u533a\u95f4 DP \u7684\u7279\u70b9\uff1a \u5408\u5e76 \uff1a\u5373\u5c06\u4e24\u4e2a\u6216\u591a\u4e2a\u90e8\u5206\u8fdb\u884c\u6574\u5408\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\uff1b \u7279\u5f81 \uff1a\u80fd\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u80fd\u4e24\u4e24\u5408\u5e76\u7684\u5f62\u5f0f\uff1b \u6c42\u89e3 \uff1a\u5bf9\u6574\u4e2a\u95ee\u9898\u8bbe\u6700\u4f18\u503c\uff0c\u679a\u4e3e\u5408\u5e76\u70b9\uff0c\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\uff0c\u6700\u540e\u5408\u5e76\u4e24\u4e2a\u90e8\u5206\u7684\u6700\u4f18\u503c\u5f97\u5230\u539f\u95ee\u9898\u7684\u6700\u4f18\u503c\u3002 \u4f8b\u9898 \u6d1b\u8c37 P1880 [NOI1995] \u77f3\u5b50\u5408\u5e76 \u9898\u76ee\u5927\u610f\uff1a\u5728\u4e00\u4e2a\u73af\u4e0a\u6709 n n \u4e2a\u6570 a_1,a_2,...,a_n a_1,a_2,...,a_n \uff0c\u8fdb\u884c n-1 n-1 \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u76f8\u90bb\u7684\u4e24\u5806\u5408\u5e76\u6210\u4e00\u5806\uff0c\u80fd\u83b7\u5f97\u65b0\u7684\u4e00\u5806\u4e2d\u7684\u77f3\u5b50\u6570\u91cf\u7684\u548c\u7684\u5f97\u5206\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u4f60\u7684\u5f97\u5206\u3002 \u8003\u8651\u4e0d\u5728\u73af\u4e0a\uff0c\u800c\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u60c5\u51b5\u3002 \u4ee4 f(i,j) f(i,j) \u8868\u793a\u5c06\u533a\u95f4 [i,j] [i,j] \u5185\u7684\u6240\u6709\u77f3\u5b50\u5408\u5e76\u5230\u4e00\u8d77\u7684\u6700\u5927\u5f97\u5206\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f(i,j)=max\\{f(i,k)+f(k+1,j)+\\sum_{t=i}^{j} a_t \\}~(i\\le k<j) f(i,j)=max\\{f(i,k)+f(k+1,j)+\\sum_{t=i}^{j} a_t \\}~(i\\le k<j) \u4ee4 sum_i sum_i \u8868\u793a a a \u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u53d8\u5f62\u4e3a f(i,j)=max\\{f(i,k)+f(k+1,j)+sum_j-sum_{i-1} \\} f(i,j)=max\\{f(i,k)+f(k+1,j)+sum_j-sum_{i-1} \\} \u3002","title":"\u4ec0\u4e48\u662f\u533a\u95f4 DP\uff1f"},{"location":"dp/interval/#_1","text":"\u7531\u4e8e\u8ba1\u7b97 f(i,j) f(i,j) \u7684\u503c\u65f6\u9700\u8981\u77e5\u9053\u6240\u6709 f(i,k) f(i,k) \u548c f(k+1,j) f(k+1,j) \u7684\u503c\uff0c\u800c\u8fd9\u4e24\u4e2a\u4e2d\u5305\u542b\u7684\u5143\u7d20\u7684\u6570\u91cf\u90fd\u5c0f\u4e8e f(i,j) f(i,j) \uff0c\u6240\u4ee5\u6211\u4eec\u4ee5 len=j-i+1 len=j-i+1 \u4f5c\u4e3a DP \u7684\u9636\u6bb5\u3002\u9996\u5148\u4ece\u5c0f\u5230\u5927\u679a\u4e3e len len \uff0c\u7136\u540e\u679a\u4e3e i i \u7684\u503c\uff0c\u6839\u636e len len \u548c i i \u7528\u516c\u5f0f\u8ba1\u7b97\u51fa j j \u7684\u503c\uff0c\u7136\u540e\u679a\u4e3e k k \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3)","title":"\u600e\u6837\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb"},{"location":"dp/interval/#_2","text":"\u9898\u76ee\u4e2d\u77f3\u5b50\u56f4\u6210\u4e00\u4e2a\u73af\uff0c\u800c\u4e0d\u662f\u4e00\u6761\u94fe\uff0c\u600e\u4e48\u529e\u5462\uff1f \u65b9\u6cd5\u4e00 \uff1a\u7531\u4e8e\u77f3\u5b50\u56f4\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5206\u5f00\u7684\u4f4d\u7f6e\uff0c\u5c06\u8fd9\u4e2a\u73af\u8f6c\u5316\u6210\u4e00\u4e2a\u94fe\uff0c\u7531\u4e8e\u8981\u679a\u4e3e n n \u6b21\uff0c\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^4) O(n^4) \u3002 \u65b9\u6cd5\u4e8c \uff1a\u6211\u4eec\u5c06\u8fd9\u6761\u94fe\u5ef6\u957f\u4e24\u500d\uff0c\u53d8\u6210 2\\times n 2\\times n \u5806\uff0c\u5176\u4e2d\u7b2c i i \u5806\u4e0e\u7b2c n+i n+i \u5806\u76f8\u540c\uff0c\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u540e\uff0c\u53d6 f(1,n),f(2,n+1),...,f(i,n+i-1) f(1,n),f(2,n+1),...,f(i,n+i-1) \u4e2d\u7684\u6700\u4f18\u503c\uff0c\u5373\u4e3a\u6700\u540e\u7684\u7b54\u6848\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(n^3) O(n^3) \u3002","title":"\u600e\u6837\u5904\u7406\u73af"},{"location":"dp/interval/#_3","text":"1 2 3 4 5 6 for ( len = 1 ; len <= n ; len ++ ) for ( i = 1 ; i <= 2 * n - 1 ; i ++ ) { int j = len + i - 1 ; for ( k = i ; k <= j && k <= 2 * n - 1 ; k ++ ) f [ i ][ j ] = max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ] + sum [ j ] - sum [ i - 1 ]); }","title":"\u6838\u5fc3\u4ee3\u7801"},{"location":"dp/interval/#_4","text":"\u6d1b\u8c37 P1063 \u80fd\u91cf\u9879\u94fe \u6d1b\u8c37 P1005 \u77e9\u9635\u53d6\u6570\u6e38\u620f \u6d1b\u8c37 P4767 [IOI2000] \u90ae\u5c40","title":"\u51e0\u9053\u7ec3\u4e60\u9898"},{"location":"dp/memo/","text":"\u60f3\u4f53\u9a8c\u628a\u66b4\u641c\u6539\u6539\u5c31\u662f\u6b63\u89e3\u7684\u5feb\u611f\u5417? \u60f3\u4f53\u9a8c\u72b6\u538b dp \u770b\u4f3c\u72b6\u6001\u591a\u5230\u7206\u70b8\u5b9e\u9645\u4e00\u8dd1\u5374\u55f7\u55f7\u5feb (\u5b9e\u9645\u6709\u6548\u7684\u72b6\u6001\u6570\u5f88\u5c11) \u7684\u8363\u8000\u5417? \u8bb0\u5fc6\u5316\u641c\u7d22, \u7b26\u5408\u60a8\u7684\u9700\u6c42! \u53ea\u8981 998 , \u8bb0\u5fc6\u5316\u641c\u7d22\u5e26\u56de\u5bb6! \u8bb0\u5fc6\u5316\u641c\u7d22, \u8bb0\u5fc6\u5316\u641c\u7d22, \u518d\u8bf4\u4e00\u904d, \u8bb0\u5fc6\u5316\u641c\u7d22! \u8bb0\u5fc6\u5316\u641c\u7d22\u662f\u5565 \u00b6 \u597d\uff0c\u5c31\u4ee5 \u6d1b\u8c37 P1048 \u91c7\u836f \u4e3a\u4f8b\uff0c\u6211\u4e0d\u4f1a\u52a8\u6001\u89c4\u5212\uff0c\u53ea\u4f1a\u641c\u7d22\uff0c\u6211\u5c31\u4f1a\u76f4\u63a5\u5199\u4e00\u4e2a\u7c97\u66b4\u7684 DFS : \u6ce8: \u4e3a\u4e86\u65b9\u4fbf\u98df\u7528, \u672c\u6587\u4e2d\u6240\u6709\u4ee3\u7801\u7701\u7565\u5934\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int n , t ; int tcost [ 103 ], mget [ 103 ]; int ans = 0 ; void dfs ( int pos , int tleft , int tans ) { if ( tleft < 0 ) return ; if ( pos == n + 1 ) { ans = max ( ans , tans ); return ; } dfs ( pos + 1 , tleft , tans ); dfs ( pos + 1 , tleft - tcost [ pos ], tans + mget [ pos ]); } int main () { cin >> t >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> tcost [ i ] >> mget [ i ]; dfs ( 1 , t , 0 ); cout << ans << endl ; return 0 ; } \u8fd9\u5c31\u662f\u4e2a\u5341\u5206\u667a\u969c\u7684\u5927\u66b4\u641c\u662f\u5427 ...... emmmmmm....... 30 30 \u5206 \u7136\u540e\u6211\u5fc3\u8840\u6765\u6f6e, \u60f3\u4e0d\u501f\u52a9\u4efb\u4f55 \"\u5916\u90e8\u53d8\u91cf\"(\u5c31\u662f dfs \u51fd\u6570\u5916\u4e14 \u503c\u968f dfs \u8fd0\u884c\u800c\u6539\u53d8\u7684\u53d8\u91cf ), \u6bd4\u5982 ans \u628a ans \u5220\u4e86\u4e4b\u540e\u5c31\u6709\u4e00\u4e2a\u95ee\u9898: \u6211\u4eec\u62ff\u4ec0\u4e48\u6765\u8bb0\u5f55\u7b54\u6848? \u7b54\u6848\u5f88\u7b80\u5355: \u8fd4\u56de\u503c! \u6b64\u65f6 dfs(pos,tleft) dfs(pos,tleft) \u8fd4\u56de\u5728\u65f6\u95f4 tleft tleft \u5185\u91c7\u96c6 \u540e pos pos \u4e2a\u8349\u836f, \u80fd\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca \u4e0d\u7406\u89e3\u5c31\u770b\u770b\u4ee3\u7801\u5427: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int n , time ; int tcost [ 103 ], mget [ 103 ]; int dfs ( int pos , int tleft ) { if ( pos == n + 1 ) return 0 ; int dfs1 , dfs2 = - INF ; dfs1 = dfs ( pos + 1 , tleft ); if ( tleft >= tcost [ pos ]) dfs2 = dfs ( pos + 1 , tleft - tcost [ pos ]) + mget [ pos ]; return max ( dfs1 , dfs2 ); } int main () { cin >> time >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> tcost [ i ] >> mget [ i ]; cout << dfs ( 1 , time ) << endl ; return 0 ; } emmmmmm....... \u8fd8\u662f {30} {30} \u5206 \u4f46\u8fd9\u4e2a\u65f6\u5019, \u6211\u4eec\u7684\u7a0b\u5e8f\u5df2\u7ecf\u4e0d\u4f9d\u8d56\u4efb\u4f55\u5916\u90e8\u53d8\u91cf\u4e86. \u7136\u540e\u6211\u975e\u5e38\u65e0\u804a, \u5c06\u6240\u6709 dfs \u7684\u8fd4\u56de\u503c\u90fd\u8bb0\u5f55\u4e0b\u6765, \u7adf\u7136\u53d1\u73b0...... \u9707\u60ca, \u5bf9\u4e8e\u76f8\u540c\u7684 pos \u548c tleft,dfs \u7684\u8fd4\u56de\u503c\u603b\u662f\u76f8\u540c\u7684! \u60f3\u4e00\u60f3\u4e5f\u4e0d\u5947\u602a, \u56e0\u4e3a\u6211\u4eec\u7684 dfs \u6ca1\u6709\u4f9d\u8d56\u4efb\u4f55\u5916\u90e8\u53d8\u91cf. \u65c1\u767d: \u50cf tcost[103] tcost[103] , mget[103] mget[103] \u8fd9\u79cd\u4e1c\u897f\u4e0d\u7b97\u662f\u5916\u90e8\u53d8\u91cf, \u56e0\u4e3a\u5979\u4eec\u5728 dfs \u8fc7\u7a0b\u4e2d\u4e0d\u53d8. \u7136\u540e? \u5f00\u4e2a\u6570\u7ec4 mem mem , \u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e2a dfs(pos,tleft) dfs(pos,tleft) \u7684\u8fd4\u56de\u503c. \u521a\u5f00\u59cb\u628a mem mem \u4e2d\u6bcf\u4e2a\u503c\u90fd\u8bbe\u6210 -1 -1 (\u4ee3\u8868\u6ca1\u8bbf\u95ee\u8fc7). \u6bcf\u6b21\u521a\u521a\u8fdb\u5165\u4e00\u4e2a dfs \u524d (\u6211\u4eec\u7684 dfs \u662f\u9012\u5f52\u8c03\u7528\u7684\u561b), \u90fd\u68c0\u6d4b mem[pos][tleft] mem[pos][tleft] \u662f\u5426\u4e3a -1 -1 , \u5982\u679c\u662f\u5c31\u6b63\u5e38\u6267\u884c\u5e76\u628a\u7b54\u6848\u8bb0\u5f55\u5230 mem mem \u4e2d, \u5426\u5219? \u76f4\u63a5\u8fd4\u56de mem mem \u4e2d\u7684\u503c! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int n , t ; int tcost [ 103 ], mget [ 103 ]; int mem [ 103 ][ 1003 ]; int dfs ( int pos , int tleft ) { if ( mem [ pos ][ tleft ] != - 1 ) return mem [ pos ][ tleft ]; if ( pos == n + 1 ) return mem [ pos ][ tleft ] = 0 ; int dfs1 , dfs2 = - INF ; dfs1 = dfs ( pos + 1 , tleft ); if ( tleft >= tcost [ pos ]) dfs2 = dfs ( pos + 1 , tleft - tcost [ pos ]) + mget [ pos ]; return mem [ pos ][ tleft ] = max ( dfs1 , dfs2 ); } int main () { memset ( mem , - 1 , sizeof ( mem )); cin >> t >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> tcost [ i ] >> mget [ i ]; cout << dfs ( 1 , t ) << endl ; return 0 ; } \u6b64\u65f6 mem mem \u7684\u610f\u4e49\u4e0e dfs \u76f8\u540c: \u5728\u65f6\u95f4 tleft tleft \u5185\u91c7\u96c6 \u540e pos pos \u4e2a\u8349\u836f, \u80fd\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca \u8fd9\u80fd ac ? \u80fd. \u8fd9\u5c31\u662f \"\u91c7\u836f\" \u90a3\u9898\u7684 AC \u4ee3\u7801 \u597d\u6211\u4eec yy \u51fa\u4e86\u8bb0\u5fc6\u5316\u641c\u7d22 \u603b\u7ed3\u4e00\u4e0b\u8bb0\u5fc6\u5316\u641c\u7d22\u662f\u5565: \u00b6 \u4e0d\u4f9d\u8d56\u4efb\u4f55 \u5916\u90e8\u53d8\u91cf \u7b54\u6848\u4ee5\u8fd4\u56de\u503c\u7684\u5f62\u5f0f\u5b58\u5728, \u800c\u4e0d\u80fd\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u5b58\u5728 (\u5c31\u662f\u4e0d\u80fd\u5c06 dfs \u5b9a\u4e49\u6210 dfs(pos ,tleft , nowans ) dfs(pos ,tleft , nowans ) , \u8fd9\u91cc\u9762\u7684 nowans \u4e0d\u7b26\u5408\u8981\u6c42). \u5bf9\u4e8e\u76f8\u540c\u4e00\u7ec4\u53c2\u6570, dfs \u8fd4\u56de\u503c\u603b\u662f\u76f8\u540c\u7684 \u8bb0\u5fc6\u5316\u641c\u7d22\u4e0e\u52a8\u6001\u89c4\u5212\u7684\u5173\u7cfb: \u00b6 \u6709\u4eba\u4f1a\u95ee: \u8bb0\u5fc6\u5316\u641c\u7d22\u96be\u9053\u4e0d\u662f\u641c\u7d22? \u662f\u641c\u7d22. \u4f46\u4e2a\u4eba\u8ba4\u4e3a\u5979\u66f4\u50cf dp : \u4e0d\u4fe1\u4f60\u770b mem mem \u7684\u610f\u4e49: \u5728\u65f6\u95f4 tleft tleft \u5185\u91c7\u96c6 \u540e pos pos \u4e2a\u8349\u836f, \u80fd\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca \u8fd9\u4e0d\u5c31\u662f dp \u7684\u72b6\u6001? \u7531\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa: mem[pos][tleft] = max(mem[pos+1][tleft-tcost[pos]]+mget[pos]\\ ,\\ mem[pos+1][tleft]) mem[pos][tleft] = max(mem[pos+1][tleft-tcost[pos]]+mget[pos]\\ ,\\ mem[pos+1][tleft]) \u8fd9\u4e0d\u5c31\u662f dp \u7684\u72b6\u6001\u8f6c\u79fb? \u4e2a\u4eba\u8ba4\u4e3a: \u8bb0\u5fc6\u5316\u641c\u7d22\u7ea6\u7b49\u4e8e\u52a8\u6001\u89c4\u5212, (\u5370\u8c61\u4e2d) \u4efb\u4f55\u4e00\u4e2a dp \u65b9\u7a0b\u90fd\u80fd\u8f6c\u4e3a\u8bb0\u5fc6\u5316\u641c\u7d22 \u5927\u90e8\u5206\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u72b6\u6001 / \u8f6c\u79fb\u65b9\u7a0b\u4e0e dp \u90fd\u4e00\u6837, \u65f6\u95f4\u590d\u6742\u5ea6 / \u7a7a\u95f4\u590d\u6742\u5ea6\u4e0e \u4e0d\u52a0\u4f18\u5316\u7684 dp \u5b8c\u5168\u76f8\u540c \u6bd4\u5982: dp[i][j][k] = dp[i+1][j+1][k-a[j]] + dp[i+1][j][k] dp[i][j][k] = dp[i+1][j+1][k-a[j]] + dp[i+1][j][k] \u8f6c\u4e3a 1 2 3 4 5 6 7 8 9 10 int dfs ( int i , int j , int k ) { \u8fb9\u754c\u6761\u4ef6 if ( mem [ i ][ j ][ k ] != - 1 ) return mem [ i ][ j ][ k ]; return mem [ i ][ j ][ k ] = dfs ( i + 1 , j + 1 , k - a [ j ]) + dfs ( i + 1 , j , k ); } int main () { memset ( mem , - 1 , sizeof ( mem )); \u8bfb\u5165 cout << dfs ( 1 , 0 , 0 ) << endl ; } \u5982\u4f55\u5199\u8bb0\u5fc6\u5316\u641c\u7d22 \u00b6 \u65b9\u6cd5 I \u00b6 \u628a\u8fd9\u9053\u9898\u7684 dp \u72b6\u6001\u548c\u65b9\u7a0b\u5199\u51fa\u6765 \u6839\u636e\u4ed6\u4eec\u5199\u51fa dfs \u51fd\u6570 \u6dfb\u52a0\u8bb0\u5fc6\u5316\u6570\u7ec4 \u4e3e\u4f8b: dp[i] = max\\{dp[j]+1\\}\\quad 1 \\leq j < i \\text{\u4e14}a[j]<a[i] dp[i] = max\\{dp[j]+1\\}\\quad 1 \\leq j < i \\text{\u4e14}a[j]<a[i] (\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217) \u8f6c\u4e3a 1 2 3 4 5 6 7 8 9 10 11 12 int dfs ( int i ) { if ( mem [ i ] != - 1 ) return mem [ i ]; int ret = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ j ] < a [ i ]) ret = max ( ret , dfs ( j ) + 1 ); return mem [ i ] = ret ; } int main () { memset ( mem , - 1 , sizeof ( mem )); \u8bfb\u5165 cout << dfs ( n ) << endl ; } \u65b9\u6cd5 II \u00b6 \u5199\u51fa\u8fd9\u9053\u9898\u7684\u66b4\u641c\u7a0b\u5e8f (\u6700\u597d\u662f dfs ) \u5c06\u8fd9\u4e2a dfs \u6539\u6210 \"\u65e0\u9700\u5916\u90e8\u53d8\u91cf\" \u7684 dfs \u6dfb\u52a0\u8bb0\u5fc6\u5316\u6570\u7ec4 \u4e3e\u4f8b: \u672c\u6587\u6700\u5f00\u59cb\u4ecb\u7ecd \"\u4ec0\u4e48\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\" \u65f6\u4e3e\u7684 \"\u91c7\u836f\" \u90a3\u9898\u7684\u4f8b\u5b50 \u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9: \u8bb0\u5fc6\u5316\u641c\u7d22\u53ef\u4ee5\u907f\u514d\u641c\u5230\u65e0\u7528\u72b6\u6001, \u7279\u522b\u662f\u5728\u6709\u72b6\u6001\u538b\u7f29\u65f6 \u4e3e\u4f8b: \u7ed9\u4f60\u4e00\u4e2a\u6709\u5411\u56fe (\u6ce8\u610f\u4e0d\u662f\u5b8c\u5168\u56fe), \u7ecf\u8fc7\u6bcf\u6761\u8fb9\u90fd\u6709\u82b1\u8d39, \u6c42\u4ece\u70b9 1 \u51fa\u53d1, \u7ecf\u8fc7\u6bcf\u4e2a\u70b9 \u6070\u597d\u4e00\u6b21 \u540e\u7684\u6700\u5c0f\u82b1\u8d39 (\u6700\u540e\u4e0d\u7528\u56de\u5230\u8d77\u70b9), \u4fdd\u8bc1\u8def\u5f84\u5b58\u5728. dp \u72b6\u6001\u5f88\u663e\u7136: \u8bbe dp[pos][mask] dp[pos][mask] \u8868\u793a\u8eab\u5904\u5728 pos pos \u5904, \u8d70\u8fc7 mask mask (mask \u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570) \u4e2d\u7684\u9876\u70b9\u540e\u7684\u6700\u5c0f\u82b1\u8d39 \u5e38\u89c4 dp dp \u7684\u72b6\u6001\u4e3a O(n\\cdot 2^n) O(n\\cdot 2^n) , \u8f6c\u79fb\u590d\u6742\u5ea6 (\u6240\u6709\u7684\u52a0\u5728\u4e00\u8d77) \u4e3a O(m) O(m) \u4f46\u662f! \u5982\u679c\u6211\u4eec\u7528\u8bb0\u5fc6\u5316\u641c\u7d22, \u5c31\u53ef\u4ee5\u907f\u514d\u5230\u5f88\u591a\u65e0\u7528\u7684\u72b6\u6001, \u6bd4\u5982 pos pos \u4e3a\u8d77\u70b9\u5374\u5df2\u7ecf\u7ecf\u8fc7\u4e86 >1 >1 \u4e2a\u70b9\u7684\u60c5\u51b5. \u4e0d\u9700\u8981\u6ce8\u610f\u8f6c\u79fb\u987a\u5e8f (\u8fd9\u91cc\u7684 \"\u8f6c\u79fb\u987a\u5e8f\" \u6307\u6b63\u5e38 dp \u4e2d for \u5faa\u73af\u7684\u5d4c\u5957\u987a\u5e8f\u4ee5\u53ca\u5faa\u73af\u53d8\u91cf\u662f\u9012\u589e\u8fd8\u662f\u9012\u51cf) \u4e3e\u4f8b: \u7528\u5e38\u89c4 dp \u5199 \"\u5408\u5e76\u77f3\u5b50\" \u9700\u8981\u5148\u679a\u4e3e\u533a\u95f4\u957f\u5ea6\u7136\u540e\u679a\u4e3e\u8d77\u70b9, \u4f46\u8bb0\u5fc6\u5316\u641c\u7d22\u76f4\u63a5\u679a\u4e3e\u65ad\u70b9 (\u5c31\u662f\u679a\u4e3e\u5f53\u524d\u533a\u95f4\u7531\u54ea\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u800c\u6210) \u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5c31\u884c \u8fb9\u754c\u60c5\u51b5\u975e\u5e38\u597d\u5904\u7406, \u4e14\u80fd\u6709\u6548\u9632\u6b62\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c \u6709\u4e9b dp (\u5982\u533a\u95f4 dp) \u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5199\u5f88\u7b80\u5355\u4f46\u6b63\u5e38 dp \u5f88\u96be \u8bb0\u5fc6\u5316\u641c\u7d22\u5929\u751f\u643a\u5e26\u641c\u7d22\u5929\u8d4b, \u53ef\u4ee5\u4f7f\u7528\u6280\u80fd \"\u526a\u679d\"! \u7f3a\u70b9: \u81f4\u547d\u4f24: \u4e0d\u80fd\u6eda\u52a8\u6570\u7ec4! \u6709\u4e9b\u4f18\u5316\u6bd4\u8f83\u96be\u52a0 \u7531\u4e8e\u9012\u5f52, \u6709\u65f6\u6548\u7387\u8f83\u4f4e\u4f46\u4e0d\u81f3\u4e8e TLE (\u72b6\u538b dp \u9664\u5916) \u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u6ce8\u610f\u4e8b\u9879 \u00b6 \u5343\u4e07\u522b\u5fd8\u4e86\u52a0\u8bb0\u5fc6\u5316! (\u522b\u7b11, \u8ba4\u771f\u7684 \u8fb9\u754c\u6761\u4ef6\u8981\u52a0\u5728\u68c0\u67e5\u5f53\u524d\u6570\u7ec4\u503c\u662f\u5426\u4e3a\u975e\u6cd5\u6570\u503c (\u9632\u6b62\u8d8a\u754c) \u6570\u7ec4\u4e0d\u8981\u5f00\u5c0f\u4e86 (\u9003 \u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 int g [ MAXN ] \uff1b int f ( \u4f20\u5165\u6570\u503c ) { if ( g [ \u89c4\u6a21 ] != \u65e0\u6548\u6570\u503c ) return g [ \u89c4\u6a21 ]; if ( \u7ec8\u6b62\u6761\u4ef6 ) return \u6700\u5c0f\u5b50\u95ee\u9898\u89e3 ; g [ \u89c4\u6a21 ] = f ( \u7f29\u5c0f\u89c4\u6a21 ); return g [ \u89c4\u6a21 ]; } int main () { ... memset ( g , \u65e0\u6548\u6570\u503c , sizeof ( g )); ... }","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"dp/memo/#_1","text":"\u597d\uff0c\u5c31\u4ee5 \u6d1b\u8c37 P1048 \u91c7\u836f \u4e3a\u4f8b\uff0c\u6211\u4e0d\u4f1a\u52a8\u6001\u89c4\u5212\uff0c\u53ea\u4f1a\u641c\u7d22\uff0c\u6211\u5c31\u4f1a\u76f4\u63a5\u5199\u4e00\u4e2a\u7c97\u66b4\u7684 DFS : \u6ce8: \u4e3a\u4e86\u65b9\u4fbf\u98df\u7528, \u672c\u6587\u4e2d\u6240\u6709\u4ee3\u7801\u7701\u7565\u5934\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int n , t ; int tcost [ 103 ], mget [ 103 ]; int ans = 0 ; void dfs ( int pos , int tleft , int tans ) { if ( tleft < 0 ) return ; if ( pos == n + 1 ) { ans = max ( ans , tans ); return ; } dfs ( pos + 1 , tleft , tans ); dfs ( pos + 1 , tleft - tcost [ pos ], tans + mget [ pos ]); } int main () { cin >> t >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> tcost [ i ] >> mget [ i ]; dfs ( 1 , t , 0 ); cout << ans << endl ; return 0 ; } \u8fd9\u5c31\u662f\u4e2a\u5341\u5206\u667a\u969c\u7684\u5927\u66b4\u641c\u662f\u5427 ...... emmmmmm....... 30 30 \u5206 \u7136\u540e\u6211\u5fc3\u8840\u6765\u6f6e, \u60f3\u4e0d\u501f\u52a9\u4efb\u4f55 \"\u5916\u90e8\u53d8\u91cf\"(\u5c31\u662f dfs \u51fd\u6570\u5916\u4e14 \u503c\u968f dfs \u8fd0\u884c\u800c\u6539\u53d8\u7684\u53d8\u91cf ), \u6bd4\u5982 ans \u628a ans \u5220\u4e86\u4e4b\u540e\u5c31\u6709\u4e00\u4e2a\u95ee\u9898: \u6211\u4eec\u62ff\u4ec0\u4e48\u6765\u8bb0\u5f55\u7b54\u6848? \u7b54\u6848\u5f88\u7b80\u5355: \u8fd4\u56de\u503c! \u6b64\u65f6 dfs(pos,tleft) dfs(pos,tleft) \u8fd4\u56de\u5728\u65f6\u95f4 tleft tleft \u5185\u91c7\u96c6 \u540e pos pos \u4e2a\u8349\u836f, \u80fd\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca \u4e0d\u7406\u89e3\u5c31\u770b\u770b\u4ee3\u7801\u5427: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int n , time ; int tcost [ 103 ], mget [ 103 ]; int dfs ( int pos , int tleft ) { if ( pos == n + 1 ) return 0 ; int dfs1 , dfs2 = - INF ; dfs1 = dfs ( pos + 1 , tleft ); if ( tleft >= tcost [ pos ]) dfs2 = dfs ( pos + 1 , tleft - tcost [ pos ]) + mget [ pos ]; return max ( dfs1 , dfs2 ); } int main () { cin >> time >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> tcost [ i ] >> mget [ i ]; cout << dfs ( 1 , time ) << endl ; return 0 ; } emmmmmm....... \u8fd8\u662f {30} {30} \u5206 \u4f46\u8fd9\u4e2a\u65f6\u5019, \u6211\u4eec\u7684\u7a0b\u5e8f\u5df2\u7ecf\u4e0d\u4f9d\u8d56\u4efb\u4f55\u5916\u90e8\u53d8\u91cf\u4e86. \u7136\u540e\u6211\u975e\u5e38\u65e0\u804a, \u5c06\u6240\u6709 dfs \u7684\u8fd4\u56de\u503c\u90fd\u8bb0\u5f55\u4e0b\u6765, \u7adf\u7136\u53d1\u73b0...... \u9707\u60ca, \u5bf9\u4e8e\u76f8\u540c\u7684 pos \u548c tleft,dfs \u7684\u8fd4\u56de\u503c\u603b\u662f\u76f8\u540c\u7684! \u60f3\u4e00\u60f3\u4e5f\u4e0d\u5947\u602a, \u56e0\u4e3a\u6211\u4eec\u7684 dfs \u6ca1\u6709\u4f9d\u8d56\u4efb\u4f55\u5916\u90e8\u53d8\u91cf. \u65c1\u767d: \u50cf tcost[103] tcost[103] , mget[103] mget[103] \u8fd9\u79cd\u4e1c\u897f\u4e0d\u7b97\u662f\u5916\u90e8\u53d8\u91cf, \u56e0\u4e3a\u5979\u4eec\u5728 dfs \u8fc7\u7a0b\u4e2d\u4e0d\u53d8. \u7136\u540e? \u5f00\u4e2a\u6570\u7ec4 mem mem , \u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e2a dfs(pos,tleft) dfs(pos,tleft) \u7684\u8fd4\u56de\u503c. \u521a\u5f00\u59cb\u628a mem mem \u4e2d\u6bcf\u4e2a\u503c\u90fd\u8bbe\u6210 -1 -1 (\u4ee3\u8868\u6ca1\u8bbf\u95ee\u8fc7). \u6bcf\u6b21\u521a\u521a\u8fdb\u5165\u4e00\u4e2a dfs \u524d (\u6211\u4eec\u7684 dfs \u662f\u9012\u5f52\u8c03\u7528\u7684\u561b), \u90fd\u68c0\u6d4b mem[pos][tleft] mem[pos][tleft] \u662f\u5426\u4e3a -1 -1 , \u5982\u679c\u662f\u5c31\u6b63\u5e38\u6267\u884c\u5e76\u628a\u7b54\u6848\u8bb0\u5f55\u5230 mem mem \u4e2d, \u5426\u5219? \u76f4\u63a5\u8fd4\u56de mem mem \u4e2d\u7684\u503c! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int n , t ; int tcost [ 103 ], mget [ 103 ]; int mem [ 103 ][ 1003 ]; int dfs ( int pos , int tleft ) { if ( mem [ pos ][ tleft ] != - 1 ) return mem [ pos ][ tleft ]; if ( pos == n + 1 ) return mem [ pos ][ tleft ] = 0 ; int dfs1 , dfs2 = - INF ; dfs1 = dfs ( pos + 1 , tleft ); if ( tleft >= tcost [ pos ]) dfs2 = dfs ( pos + 1 , tleft - tcost [ pos ]) + mget [ pos ]; return mem [ pos ][ tleft ] = max ( dfs1 , dfs2 ); } int main () { memset ( mem , - 1 , sizeof ( mem )); cin >> t >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> tcost [ i ] >> mget [ i ]; cout << dfs ( 1 , t ) << endl ; return 0 ; } \u6b64\u65f6 mem mem \u7684\u610f\u4e49\u4e0e dfs \u76f8\u540c: \u5728\u65f6\u95f4 tleft tleft \u5185\u91c7\u96c6 \u540e pos pos \u4e2a\u8349\u836f, \u80fd\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca \u8fd9\u80fd ac ? \u80fd. \u8fd9\u5c31\u662f \"\u91c7\u836f\" \u90a3\u9898\u7684 AC \u4ee3\u7801 \u597d\u6211\u4eec yy \u51fa\u4e86\u8bb0\u5fc6\u5316\u641c\u7d22","title":"\u8bb0\u5fc6\u5316\u641c\u7d22\u662f\u5565"},{"location":"dp/memo/#_2","text":"\u4e0d\u4f9d\u8d56\u4efb\u4f55 \u5916\u90e8\u53d8\u91cf \u7b54\u6848\u4ee5\u8fd4\u56de\u503c\u7684\u5f62\u5f0f\u5b58\u5728, \u800c\u4e0d\u80fd\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u5b58\u5728 (\u5c31\u662f\u4e0d\u80fd\u5c06 dfs \u5b9a\u4e49\u6210 dfs(pos ,tleft , nowans ) dfs(pos ,tleft , nowans ) , \u8fd9\u91cc\u9762\u7684 nowans \u4e0d\u7b26\u5408\u8981\u6c42). \u5bf9\u4e8e\u76f8\u540c\u4e00\u7ec4\u53c2\u6570, dfs \u8fd4\u56de\u503c\u603b\u662f\u76f8\u540c\u7684","title":"\u603b\u7ed3\u4e00\u4e0b\u8bb0\u5fc6\u5316\u641c\u7d22\u662f\u5565:"},{"location":"dp/memo/#_3","text":"\u6709\u4eba\u4f1a\u95ee: \u8bb0\u5fc6\u5316\u641c\u7d22\u96be\u9053\u4e0d\u662f\u641c\u7d22? \u662f\u641c\u7d22. \u4f46\u4e2a\u4eba\u8ba4\u4e3a\u5979\u66f4\u50cf dp : \u4e0d\u4fe1\u4f60\u770b mem mem \u7684\u610f\u4e49: \u5728\u65f6\u95f4 tleft tleft \u5185\u91c7\u96c6 \u540e pos pos \u4e2a\u8349\u836f, \u80fd\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca \u8fd9\u4e0d\u5c31\u662f dp \u7684\u72b6\u6001? \u7531\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa: mem[pos][tleft] = max(mem[pos+1][tleft-tcost[pos]]+mget[pos]\\ ,\\ mem[pos+1][tleft]) mem[pos][tleft] = max(mem[pos+1][tleft-tcost[pos]]+mget[pos]\\ ,\\ mem[pos+1][tleft]) \u8fd9\u4e0d\u5c31\u662f dp \u7684\u72b6\u6001\u8f6c\u79fb? \u4e2a\u4eba\u8ba4\u4e3a: \u8bb0\u5fc6\u5316\u641c\u7d22\u7ea6\u7b49\u4e8e\u52a8\u6001\u89c4\u5212, (\u5370\u8c61\u4e2d) \u4efb\u4f55\u4e00\u4e2a dp \u65b9\u7a0b\u90fd\u80fd\u8f6c\u4e3a\u8bb0\u5fc6\u5316\u641c\u7d22 \u5927\u90e8\u5206\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u72b6\u6001 / \u8f6c\u79fb\u65b9\u7a0b\u4e0e dp \u90fd\u4e00\u6837, \u65f6\u95f4\u590d\u6742\u5ea6 / \u7a7a\u95f4\u590d\u6742\u5ea6\u4e0e \u4e0d\u52a0\u4f18\u5316\u7684 dp \u5b8c\u5168\u76f8\u540c \u6bd4\u5982: dp[i][j][k] = dp[i+1][j+1][k-a[j]] + dp[i+1][j][k] dp[i][j][k] = dp[i+1][j+1][k-a[j]] + dp[i+1][j][k] \u8f6c\u4e3a 1 2 3 4 5 6 7 8 9 10 int dfs ( int i , int j , int k ) { \u8fb9\u754c\u6761\u4ef6 if ( mem [ i ][ j ][ k ] != - 1 ) return mem [ i ][ j ][ k ]; return mem [ i ][ j ][ k ] = dfs ( i + 1 , j + 1 , k - a [ j ]) + dfs ( i + 1 , j , k ); } int main () { memset ( mem , - 1 , sizeof ( mem )); \u8bfb\u5165 cout << dfs ( 1 , 0 , 0 ) << endl ; }","title":"\u8bb0\u5fc6\u5316\u641c\u7d22\u4e0e\u52a8\u6001\u89c4\u5212\u7684\u5173\u7cfb:"},{"location":"dp/memo/#_4","text":"","title":"\u5982\u4f55\u5199\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"dp/memo/#i","text":"\u628a\u8fd9\u9053\u9898\u7684 dp \u72b6\u6001\u548c\u65b9\u7a0b\u5199\u51fa\u6765 \u6839\u636e\u4ed6\u4eec\u5199\u51fa dfs \u51fd\u6570 \u6dfb\u52a0\u8bb0\u5fc6\u5316\u6570\u7ec4 \u4e3e\u4f8b: dp[i] = max\\{dp[j]+1\\}\\quad 1 \\leq j < i \\text{\u4e14}a[j]<a[i] dp[i] = max\\{dp[j]+1\\}\\quad 1 \\leq j < i \\text{\u4e14}a[j]<a[i] (\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217) \u8f6c\u4e3a 1 2 3 4 5 6 7 8 9 10 11 12 int dfs ( int i ) { if ( mem [ i ] != - 1 ) return mem [ i ]; int ret = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ j ] < a [ i ]) ret = max ( ret , dfs ( j ) + 1 ); return mem [ i ] = ret ; } int main () { memset ( mem , - 1 , sizeof ( mem )); \u8bfb\u5165 cout << dfs ( n ) << endl ; }","title":"\u65b9\u6cd5 I"},{"location":"dp/memo/#ii","text":"\u5199\u51fa\u8fd9\u9053\u9898\u7684\u66b4\u641c\u7a0b\u5e8f (\u6700\u597d\u662f dfs ) \u5c06\u8fd9\u4e2a dfs \u6539\u6210 \"\u65e0\u9700\u5916\u90e8\u53d8\u91cf\" \u7684 dfs \u6dfb\u52a0\u8bb0\u5fc6\u5316\u6570\u7ec4 \u4e3e\u4f8b: \u672c\u6587\u6700\u5f00\u59cb\u4ecb\u7ecd \"\u4ec0\u4e48\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\" \u65f6\u4e3e\u7684 \"\u91c7\u836f\" \u90a3\u9898\u7684\u4f8b\u5b50","title":"\u65b9\u6cd5 II"},{"location":"dp/memo/#_5","text":"\u4f18\u70b9: \u8bb0\u5fc6\u5316\u641c\u7d22\u53ef\u4ee5\u907f\u514d\u641c\u5230\u65e0\u7528\u72b6\u6001, \u7279\u522b\u662f\u5728\u6709\u72b6\u6001\u538b\u7f29\u65f6 \u4e3e\u4f8b: \u7ed9\u4f60\u4e00\u4e2a\u6709\u5411\u56fe (\u6ce8\u610f\u4e0d\u662f\u5b8c\u5168\u56fe), \u7ecf\u8fc7\u6bcf\u6761\u8fb9\u90fd\u6709\u82b1\u8d39, \u6c42\u4ece\u70b9 1 \u51fa\u53d1, \u7ecf\u8fc7\u6bcf\u4e2a\u70b9 \u6070\u597d\u4e00\u6b21 \u540e\u7684\u6700\u5c0f\u82b1\u8d39 (\u6700\u540e\u4e0d\u7528\u56de\u5230\u8d77\u70b9), \u4fdd\u8bc1\u8def\u5f84\u5b58\u5728. dp \u72b6\u6001\u5f88\u663e\u7136: \u8bbe dp[pos][mask] dp[pos][mask] \u8868\u793a\u8eab\u5904\u5728 pos pos \u5904, \u8d70\u8fc7 mask mask (mask \u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570) \u4e2d\u7684\u9876\u70b9\u540e\u7684\u6700\u5c0f\u82b1\u8d39 \u5e38\u89c4 dp dp \u7684\u72b6\u6001\u4e3a O(n\\cdot 2^n) O(n\\cdot 2^n) , \u8f6c\u79fb\u590d\u6742\u5ea6 (\u6240\u6709\u7684\u52a0\u5728\u4e00\u8d77) \u4e3a O(m) O(m) \u4f46\u662f! \u5982\u679c\u6211\u4eec\u7528\u8bb0\u5fc6\u5316\u641c\u7d22, \u5c31\u53ef\u4ee5\u907f\u514d\u5230\u5f88\u591a\u65e0\u7528\u7684\u72b6\u6001, \u6bd4\u5982 pos pos \u4e3a\u8d77\u70b9\u5374\u5df2\u7ecf\u7ecf\u8fc7\u4e86 >1 >1 \u4e2a\u70b9\u7684\u60c5\u51b5. \u4e0d\u9700\u8981\u6ce8\u610f\u8f6c\u79fb\u987a\u5e8f (\u8fd9\u91cc\u7684 \"\u8f6c\u79fb\u987a\u5e8f\" \u6307\u6b63\u5e38 dp \u4e2d for \u5faa\u73af\u7684\u5d4c\u5957\u987a\u5e8f\u4ee5\u53ca\u5faa\u73af\u53d8\u91cf\u662f\u9012\u589e\u8fd8\u662f\u9012\u51cf) \u4e3e\u4f8b: \u7528\u5e38\u89c4 dp \u5199 \"\u5408\u5e76\u77f3\u5b50\" \u9700\u8981\u5148\u679a\u4e3e\u533a\u95f4\u957f\u5ea6\u7136\u540e\u679a\u4e3e\u8d77\u70b9, \u4f46\u8bb0\u5fc6\u5316\u641c\u7d22\u76f4\u63a5\u679a\u4e3e\u65ad\u70b9 (\u5c31\u662f\u679a\u4e3e\u5f53\u524d\u533a\u95f4\u7531\u54ea\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u800c\u6210) \u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5c31\u884c \u8fb9\u754c\u60c5\u51b5\u975e\u5e38\u597d\u5904\u7406, \u4e14\u80fd\u6709\u6548\u9632\u6b62\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c \u6709\u4e9b dp (\u5982\u533a\u95f4 dp) \u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5199\u5f88\u7b80\u5355\u4f46\u6b63\u5e38 dp \u5f88\u96be \u8bb0\u5fc6\u5316\u641c\u7d22\u5929\u751f\u643a\u5e26\u641c\u7d22\u5929\u8d4b, \u53ef\u4ee5\u4f7f\u7528\u6280\u80fd \"\u526a\u679d\"! \u7f3a\u70b9: \u81f4\u547d\u4f24: \u4e0d\u80fd\u6eda\u52a8\u6570\u7ec4! \u6709\u4e9b\u4f18\u5316\u6bd4\u8f83\u96be\u52a0 \u7531\u4e8e\u9012\u5f52, \u6709\u65f6\u6548\u7387\u8f83\u4f4e\u4f46\u4e0d\u81f3\u4e8e TLE (\u72b6\u538b dp \u9664\u5916)","title":"\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u4f18\u7f3a\u70b9"},{"location":"dp/memo/#_6","text":"\u5343\u4e07\u522b\u5fd8\u4e86\u52a0\u8bb0\u5fc6\u5316! (\u522b\u7b11, \u8ba4\u771f\u7684 \u8fb9\u754c\u6761\u4ef6\u8981\u52a0\u5728\u68c0\u67e5\u5f53\u524d\u6570\u7ec4\u503c\u662f\u5426\u4e3a\u975e\u6cd5\u6570\u503c (\u9632\u6b62\u8d8a\u754c) \u6570\u7ec4\u4e0d\u8981\u5f00\u5c0f\u4e86 (\u9003","title":"\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"dp/memo/#_7","text":"1 2 3 4 5 6 7 8 9 10 int g [ MAXN ] \uff1b int f ( \u4f20\u5165\u6570\u503c ) { if ( g [ \u89c4\u6a21 ] != \u65e0\u6548\u6570\u503c ) return g [ \u89c4\u6a21 ]; if ( \u7ec8\u6b62\u6761\u4ef6 ) return \u6700\u5c0f\u5b50\u95ee\u9898\u89e3 ; g [ \u89c4\u6a21 ] = f ( \u7f29\u5c0f\u89c4\u6a21 ); return g [ \u89c4\u6a21 ]; } int main () { ... memset ( g , \u65e0\u6548\u6570\u503c , sizeof ( g )); ... }","title":"\u6a21\u677f"},{"location":"dp/misc/","text":"","title":"\u5176\u5b83 DP \u65b9\u6cd5"},{"location":"dp/number/","text":"\u7ecf\u5178\u9898\u578b \u00b6 \u6570\u4f4d DP \u95ee\u9898\u5f80\u5f80\u90fd\u662f\u8fd9\u6837\u7684\u9898\u578b\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u95ed\u533a\u95f4 [l,r] [l,r] \uff0c\u8ba9\u4f60\u6c42\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6ee1\u8db3 \u67d0\u79cd\u6761\u4ef6 \u7684\u6570\u7684\u603b\u6570\u3002 \u4f8b\u9898 \u6d1b\u8c37 P2657 [SCOI2009] windy \u6570 \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4 [l,r] [l,r] \uff0c\u6c42\u5176\u4e2d\u6ee1\u8db3\u6761\u4ef6 \u4e0d\u542b\u524d\u5bfc 0 0 \u4e14\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u76f8\u5dee\u81f3\u5c11\u4e3a 2 2 \u7684\u6570\u5b57\u4e2a\u6570\u3002 \u9996\u5148\u6211\u4eec\u5c06\u95ee\u9898\u8f6c\u5316\u6210\u66f4\u52a0\u7b80\u5355\u7684\u5f62\u5f0f\u3002\u8bbe ans_i ans_i \u8868\u793a\u5728\u533a\u95f4 [1,i] [1,i] \u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u6240\u6c42\u7684\u7b54\u6848\u5c31\u662f ans_r-ans_{l-1} ans_r-ans_{l-1} \u3002 \u5206\u5f00\u6c42\u89e3\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5c0f\u4e8e n n \u7684\u6570\uff0c\u5b83\u4ece\u9ad8\u5230\u4f4e\u80af\u5b9a\u51fa\u73b0\u67d0\u4e00\u4f4d\uff0c\u4f7f\u5f97\u8fd9\u4e00\u4f4d\u4e0a\u7684\u6570\u503c\u5c0f\u4e8e n n \u8fd9\u4e00\u4f4d\u4e0a\u5bf9\u5e94\u7684\u6570\u503c\u3002\u800c\u4e4b\u524d\u7684\u6240\u6709\u4f4d\u90fd\u548c n n \u4e0a\u7684\u4f4d\u76f8\u7b49\u3002 \u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 f(i,st,op) f(i,st,op) \u8868\u793a\u5f53\u524d\u5c06\u8981\u8003\u8651\u7684\u662f\u4ece\u9ad8\u5230\u4f4e\u7684\u7b2c i i \u4f4d\uff0c\u5f53\u524d\u8be5\u524d\u7f00\u7684\u72b6\u6001\u4e3a st st \u4e14\u524d\u7f00\u548c\u5f53\u524d\u6c42\u89e3\u7684\u6570\u5b57\u7684\u5927\u5c0f\u5173\u7cfb\u662f op op \uff08 op=1 op=1 \u8868\u793a\u7b49\u4e8e\uff0c op=0 op=0 \u8868\u793a\u5c0f\u4e8e\uff09\u65f6\u7684\u6570\u5b57\u4e2a\u6570\u3002\u5728\u672c\u9898\u4e2d\uff0c\u8fd9\u4e2a\u524d\u7f00\u7684\u72b6\u6001\u5c31\u662f\u4e0a\u4e00\u4f4d\u7684\u503c\uff0c\u56e0\u4e3a\u5f53\u524d\u5c06\u8981\u786e\u5b9a\u7684\u4f4d\u4e0d\u80fd\u53d6\u54ea\u4e9b\u6570\u53ea\u548c\u4e0a\u4e00\u4f4d\u6709\u5173\u3002\u5728\u5176\u4ed6\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e2a\u503c\u53ef\u4ee5\u662f\uff1a\u524d\u7f00\u7684\u6570\u5b57\u548c\uff0c\u524d\u7f00\u6240\u6709\u6570\u5b57\u7684 \\gcd \\gcd \uff0c\u8be5\u524d\u7f00\u53d6\u6a21\u67d0\u4e2a\u6570\u7684\u4f59\u6570\uff0c\u4e5f\u6709\u4e24\u79cd\u6216\u591a\u79cd\u5408\u7528\u7684\u60c5\u51b5\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f(i,st,op)=\\sum_{i=1}^{maxx} f(i+1,k,op=1~ \\operatorname{and}~ i=maxx )\\quad (|st-k|\\ge 2) f(i,st,op)=\\sum_{i=1}^{maxx} f(i+1,k,op=1~ \\operatorname{and}~ i=maxx )\\quad (|st-k|\\ge 2) \u8fd9\u91cc\u7684 k k \u5c31\u662f\u5f53\u524d\u679a\u4e3e\u7684\u4e0b\u4e00\u4f4d\u7684\u503c\uff0c\u800c maxx maxx \u5c31\u662f\u5f53\u524d\u80fd\u53d6\u5230\u7684\u6700\u9ad8\u4f4d\u3002\u56e0\u4e3a\u5982\u679c op=1 op=1 \uff0c\u90a3\u4e48\u4f60\u5728\u8fd9\u4e00\u4f4d\u4e0a\u53d6\u7684\u503c\u4e00\u5b9a\u4e0d\u80fd\u5927\u4e8e\u6c42\u89e3\u7684\u6570\u5b57\u4e0a\u8be5\u4f4d\u7684\u503c\uff0c\u5426\u5219\u5219\u6ca1\u6709\u9650\u5236\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5c3d\u7ba1\u524d\u7f00\u6240\u9009\u62e9\u7684\u72b6\u6001\u4e0d\u540c\uff0c\u800c f f \u7684\u4e09\u4e2a\u53c2\u6570\u76f8\u540c\uff0c\u7b54\u6848\u5c31\u662f\u4e00\u6837\u7684\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u4e2a\u7b54\u6848\u88ab\u8ba1\u7b97\u591a\u6b21\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002 \u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int dfs ( int x , int st , int op ) // op = 1 = ; op = 0 < { if ( ! x ) return 1 ; if ( ! op && ~ f [ x ][ st ]) return f [ x ][ st ]; int maxx = op ? dim [ x ] : 9 , ret = 0 ; for ( int i = 0 ; i <= maxx ; i ++ ) { if ( abs ( st - i ) < 2 ) continue ; if ( st == 11 && i == 0 ) ret += dfs ( x - 1 , 11 , op & ( i == maxx )); else ret += dfs ( x - 1 , i , op & ( i == maxx )); } if ( ! op ) f [ x ][ st ] = ret ; return ret ; } int solve ( int x ) { memset ( f , - 1 , sizeof f ); dim . clear (); dim . push_back ( - 1 ); int t = x ; while ( x ) { dim . push_back ( x % 10 ); x /= 10 ; } return dfs ( dim . size () - 1 , 11 , 1 ); } \u51e0\u9053\u7ec3\u4e60\u9898 \u00b6 BZOJ 3679 \u6570\u5b57\u4e4b\u79ef \u6d1b\u8c37 P2602 [ZJOI2010] \u6570\u5b57\u8ba1\u6570 \u6d1b\u8c37 P4127 [AHOI2009] \u540c\u7c7b\u5206\u5e03 \u6d1b\u8c37 P3413 SAC#1 - \u840c\u6570 HDU 6148 Valley Number CF55D Beautiful numbers CF628D Magic Numbers CF401D Roman and Numbers","title":"\u6570\u4f4d DP"},{"location":"dp/number/#_1","text":"\u6570\u4f4d DP \u95ee\u9898\u5f80\u5f80\u90fd\u662f\u8fd9\u6837\u7684\u9898\u578b\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u95ed\u533a\u95f4 [l,r] [l,r] \uff0c\u8ba9\u4f60\u6c42\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6ee1\u8db3 \u67d0\u79cd\u6761\u4ef6 \u7684\u6570\u7684\u603b\u6570\u3002 \u4f8b\u9898 \u6d1b\u8c37 P2657 [SCOI2009] windy \u6570 \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4 [l,r] [l,r] \uff0c\u6c42\u5176\u4e2d\u6ee1\u8db3\u6761\u4ef6 \u4e0d\u542b\u524d\u5bfc 0 0 \u4e14\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u76f8\u5dee\u81f3\u5c11\u4e3a 2 2 \u7684\u6570\u5b57\u4e2a\u6570\u3002 \u9996\u5148\u6211\u4eec\u5c06\u95ee\u9898\u8f6c\u5316\u6210\u66f4\u52a0\u7b80\u5355\u7684\u5f62\u5f0f\u3002\u8bbe ans_i ans_i \u8868\u793a\u5728\u533a\u95f4 [1,i] [1,i] \u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u6240\u6c42\u7684\u7b54\u6848\u5c31\u662f ans_r-ans_{l-1} ans_r-ans_{l-1} \u3002 \u5206\u5f00\u6c42\u89e3\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5c0f\u4e8e n n \u7684\u6570\uff0c\u5b83\u4ece\u9ad8\u5230\u4f4e\u80af\u5b9a\u51fa\u73b0\u67d0\u4e00\u4f4d\uff0c\u4f7f\u5f97\u8fd9\u4e00\u4f4d\u4e0a\u7684\u6570\u503c\u5c0f\u4e8e n n \u8fd9\u4e00\u4f4d\u4e0a\u5bf9\u5e94\u7684\u6570\u503c\u3002\u800c\u4e4b\u524d\u7684\u6240\u6709\u4f4d\u90fd\u548c n n \u4e0a\u7684\u4f4d\u76f8\u7b49\u3002 \u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 f(i,st,op) f(i,st,op) \u8868\u793a\u5f53\u524d\u5c06\u8981\u8003\u8651\u7684\u662f\u4ece\u9ad8\u5230\u4f4e\u7684\u7b2c i i \u4f4d\uff0c\u5f53\u524d\u8be5\u524d\u7f00\u7684\u72b6\u6001\u4e3a st st \u4e14\u524d\u7f00\u548c\u5f53\u524d\u6c42\u89e3\u7684\u6570\u5b57\u7684\u5927\u5c0f\u5173\u7cfb\u662f op op \uff08 op=1 op=1 \u8868\u793a\u7b49\u4e8e\uff0c op=0 op=0 \u8868\u793a\u5c0f\u4e8e\uff09\u65f6\u7684\u6570\u5b57\u4e2a\u6570\u3002\u5728\u672c\u9898\u4e2d\uff0c\u8fd9\u4e2a\u524d\u7f00\u7684\u72b6\u6001\u5c31\u662f\u4e0a\u4e00\u4f4d\u7684\u503c\uff0c\u56e0\u4e3a\u5f53\u524d\u5c06\u8981\u786e\u5b9a\u7684\u4f4d\u4e0d\u80fd\u53d6\u54ea\u4e9b\u6570\u53ea\u548c\u4e0a\u4e00\u4f4d\u6709\u5173\u3002\u5728\u5176\u4ed6\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e2a\u503c\u53ef\u4ee5\u662f\uff1a\u524d\u7f00\u7684\u6570\u5b57\u548c\uff0c\u524d\u7f00\u6240\u6709\u6570\u5b57\u7684 \\gcd \\gcd \uff0c\u8be5\u524d\u7f00\u53d6\u6a21\u67d0\u4e2a\u6570\u7684\u4f59\u6570\uff0c\u4e5f\u6709\u4e24\u79cd\u6216\u591a\u79cd\u5408\u7528\u7684\u60c5\u51b5\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f(i,st,op)=\\sum_{i=1}^{maxx} f(i+1,k,op=1~ \\operatorname{and}~ i=maxx )\\quad (|st-k|\\ge 2) f(i,st,op)=\\sum_{i=1}^{maxx} f(i+1,k,op=1~ \\operatorname{and}~ i=maxx )\\quad (|st-k|\\ge 2) \u8fd9\u91cc\u7684 k k \u5c31\u662f\u5f53\u524d\u679a\u4e3e\u7684\u4e0b\u4e00\u4f4d\u7684\u503c\uff0c\u800c maxx maxx \u5c31\u662f\u5f53\u524d\u80fd\u53d6\u5230\u7684\u6700\u9ad8\u4f4d\u3002\u56e0\u4e3a\u5982\u679c op=1 op=1 \uff0c\u90a3\u4e48\u4f60\u5728\u8fd9\u4e00\u4f4d\u4e0a\u53d6\u7684\u503c\u4e00\u5b9a\u4e0d\u80fd\u5927\u4e8e\u6c42\u89e3\u7684\u6570\u5b57\u4e0a\u8be5\u4f4d\u7684\u503c\uff0c\u5426\u5219\u5219\u6ca1\u6709\u9650\u5236\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5c3d\u7ba1\u524d\u7f00\u6240\u9009\u62e9\u7684\u72b6\u6001\u4e0d\u540c\uff0c\u800c f f \u7684\u4e09\u4e2a\u53c2\u6570\u76f8\u540c\uff0c\u7b54\u6848\u5c31\u662f\u4e00\u6837\u7684\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u4e2a\u7b54\u6848\u88ab\u8ba1\u7b97\u591a\u6b21\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002 \u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int dfs ( int x , int st , int op ) // op = 1 = ; op = 0 < { if ( ! x ) return 1 ; if ( ! op && ~ f [ x ][ st ]) return f [ x ][ st ]; int maxx = op ? dim [ x ] : 9 , ret = 0 ; for ( int i = 0 ; i <= maxx ; i ++ ) { if ( abs ( st - i ) < 2 ) continue ; if ( st == 11 && i == 0 ) ret += dfs ( x - 1 , 11 , op & ( i == maxx )); else ret += dfs ( x - 1 , i , op & ( i == maxx )); } if ( ! op ) f [ x ][ st ] = ret ; return ret ; } int solve ( int x ) { memset ( f , - 1 , sizeof f ); dim . clear (); dim . push_back ( - 1 ); int t = x ; while ( x ) { dim . push_back ( x % 10 ); x /= 10 ; } return dfs ( dim . size () - 1 , 11 , 1 ); }","title":"\u7ecf\u5178\u9898\u578b"},{"location":"dp/number/#_2","text":"BZOJ 3679 \u6570\u5b57\u4e4b\u79ef \u6d1b\u8c37 P2602 [ZJOI2010] \u6570\u5b57\u8ba1\u6570 \u6d1b\u8c37 P4127 [AHOI2009] \u540c\u7c7b\u5206\u5e03 \u6d1b\u8c37 P3413 SAC#1 - \u840c\u6570 HDU 6148 Valley Number CF55D Beautiful numbers CF628D Magic Numbers CF401D Roman and Numbers","title":"\u51e0\u9053\u7ec3\u4e60\u9898"},{"location":"dp/optimization/","text":"\u672c\u7ae0\u4e3b\u8981\u8bb2\u89e3\u52a8\u6001\u89c4\u5212\u7684\u51e0\u79cd\u57fa\u7840 \u4f18\u5316 \u65b9\u6cd5\u3002 \u4e8c\u8fdb\u5236\u4f18\u5316\u89e3\u591a\u91cd\u80cc\u5305 \u00b6 \u4f8b\u9898 \u7ecf\u5178\u95ee\u9898 - \u591a\u91cd\u80cc\u5305 \u9898\u76ee\u5927\u610f\uff1a\u6709 n n \u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709 a_i a_i \u4ef6\uff0c\u8d2d\u4e70\u4e00\u4ef6\u8fd9\u79cd\u7269\u54c1\u7684\u8d39\u7528\u4e3a c_i c_i \uff0c\u4ef7\u503c\u4e3a v_i v_i \u3002\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a t t \u7684\u80cc\u5305\uff0c\u73b0\u5728\u8ba9\u4f60\u627e\u5230\u6700\u4f18\u7684\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u88c5\u5165\u80cc\u5305\u7684\u7269\u54c1\u7684\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8003\u8651\u5e38\u89c4\u7684\u52a8\u89c4\u65b9\u5f0f\uff0c\u5b9a\u4e49 f_{i,j} f_{i,j} \u4e3a\u5f53\u524d\u8003\u8651\u5230\u7b2c i i \u4e2a\u7269\u54c1\uff0c\u80cc\u5305\u5bb9\u91cf\u4e3a j j \u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff0c f_{i,j}=\\max\\{f_{i-1,j},f_{i-1,j-c_i}+v_i\\} f_{i,j}=\\max\\{f_{i-1,j},f_{i-1,j-c_i}+v_i\\} \u3002 \u5bf9\u4e8e \u6bcf\u4ef6 \u7269\u54c1\uff0c\u90fd\u8981\u8fd9\u6837\u5faa\u73af\u4e00\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a t\\times \\sum_{i=1}^n a_i t\\times \\sum_{i=1}^n a_i \uff0c\u67d0\u4e9b\u65f6\u5019\u53ef\u80fd\u4e0d\u53ef\u63a5\u53d7\uff0c\u9700\u8981\u4f18\u5316\u3002 \u8003\u8651\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u6211\u4eec\u6709 17 17 \u4e2a\u786c\u5e01\uff0c\u8981\u53bb\u4e70 1 1 \u5230 17 17 \u5143\u94b1\u7684\u7269\u54c1\uff0c\u53ea\u9700\u5c06\u8fd9\u4e9b\u786c\u5e01\u6253\u5305\u6210 1,2,4,8 1,2,4,8 \u548c 2 2 \u8fd9\u6837\u7684\u51e0\u5305\u3002\u524d\u9762\u7684 4 4 \u5305\u80fd\u4fdd\u8bc1\u8986\u76d6 1 1 \u5230 15 15 \u6240\u6709\u7684\u60c5\u51b5\uff0c\u6700\u540e\u4e00\u5305\u5728\u4e4b\u524d\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0a\u4e00\u4e2a\u503c\uff0c\u80fd\u4fdd\u8bc1\u5b9e\u73b0\u652f\u4ed8\u7684\u65f6\u5019\u53d6\u6574\u5305\uff0c\u80af\u5b9a\u80fd\u4fdd\u8bc1\u652f\u4ed8\u3002\u8fd9\u5c31\u662f\u4e8c\u8fdb\u5236\u4f18\u5316\u7684\u539f\u7406\u548c\u57fa\u672c\u601d\u60f3\u3002 \u7528\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u628a k k \u4ef6\u76f8\u540c\u7684\u7269\u54c1\u770b\u4f5c\u662f O(log_2 k) O(log_2 k) \u4ef6\u7269\u54c1\u4e86\u3002\u4f18\u5316\u540e \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , a + i ); tot += c [ i ] * a [ i ]; for ( int j = 1 ; j <= a [ i ]; j *= 2 ) if ( a [ i ] >= j ) a [ i ] -= j , v [ ++ cur ] = c [ i ] * j ; if ( a [ i ]) v [ ++ cur ] = c [ i ] * a [ i ]; } for ( int i = 1 ; i <= cur ; i ++ ) for ( int j = m ; j >= v [ i ]; j -- ) if ( f [ j - v [ i ]]) f [ j ] = true ; \u51e0\u9053\u7ec3\u4e60\u9898 \u00b6 HDU 2844 Coins \u5355\u8c03\u961f\u5217 & \u5355\u8c03\u6808\u4f18\u5316 \u00b6 \u5b66\u4e60\u672c\u8282\u524d\uff0c\u8bf7\u52a1\u5fc5\u5148\u5b66\u4e60 \u5355\u8c03\u961f\u5217 \u3002 \u4f8b\u9898 CF372C Watching Fireworks is Fun \u9898\u76ee\u5927\u610f\uff1a\u57ce\u9547\u4e2d\u6709 n n \u4e2a\u4f4d\u7f6e\uff0c\u6709 m m \u4e2a\u70df\u82b1\u8981\u653e\u3002\u7b2c i i \u4e2a\u70df\u82b1\u653e\u51fa\u7684\u65f6\u95f4\u8bb0\u4e3a t_i t_i \uff0c\u653e\u51fa\u7684\u4f4d\u7f6e\u8bb0\u4e3a a_i a_i \u3002\u5982\u679c\u70df\u82b1\u653e\u51fa\u7684\u65f6\u5019\uff0c\u4f60\u5904\u5728\u4f4d\u7f6e x x \uff0c\u90a3\u4e48\u4f60\u5c06\u6536\u83b7 b_i-|a_i-x| b_i-|a_i-x| \u70b9\u5feb\u4e50\u503c\u3002 \u521d\u59cb\u4f60\u53ef\u5728\u4efb\u610f\u4f4d\u7f6e\uff0c\u4f60\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u53ef\u4ee5\u79fb\u52a8\u4e0d\u5927\u4e8e d d \u4e2a\u5355\u4f4d\u8ddd\u79bb\u3002\u73b0\u5728\u4f60\u9700\u8981\u6700\u5927\u5316\u4f60\u80fd\u83b7\u5f97\u7684\u5feb\u4e50\u503c\u3002 \u8bbe f_{i,j} f_{i,j} \u8868\u793a\u5728\u653e\u7b2c i i \u4e2a\u70df\u82b1\u65f6\uff0c\u4f60\u7684\u4f4d\u7f6e\u5728 j j \u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5feb\u4e50\u503c\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_{i,j}=\\max\\{f_{i-1,k}+b_i-|a_i-j|\\} f_{i,j}=\\max\\{f_{i-1,k}+b_i-|a_i-j|\\} \u8fd9\u91cc\u7684 k k \u662f\u6709\u8303\u56f4\u7684\uff0c j-(t_{i+1}-t_i)\\times d\\le k\\le j+(t_{i+1}-t_i)\\times d j-(t_{i+1}-t_i)\\times d\\le k\\le j+(t_{i+1}-t_i)\\times d \u3002 \u6211\u4eec\u5c1d\u8bd5\u5c06\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u8fdb\u884c\u53d8\u5f62\uff1a \u7531\u4e8e \\max \\max \u91cc\u51fa\u73b0\u4e86\u4e00\u4e2a\u786e\u5b9a\u7684\u5e38\u91cf b_i b_i \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u63d0\u5230\u5916\u9762\u53bb\u3002 f_{i,j}=\\max\\{f_{i-1,k}+b_i+|a_i-j|\\}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i f_{i,j}=\\max\\{f_{i-1,k}+b_i+|a_i-j|\\}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i \u5982\u679c\u786e\u5b9a\u4e86 i i \u548c j j \u7684\u503c\uff0c\u90a3\u4e48 |a_i-j| |a_i-j| \u7684\u503c\u4e5f\u662f\u786e\u5b9a\u7684\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e00\u90e8\u5206\u63d0\u5230\u5916\u9762\u53bb\u3002 \u6700\u540e\uff0c\u5f0f\u5b50\u53d8\u6210\u4e86\u8fd9\u4e2a\u6837\u5b50\uff1a f_{i,j}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i=\\max\\{f_{i-1,k}\\}-|a_i-j|+b_i f_{i,j}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i=\\max\\{f_{i-1,k}\\}-|a_i-j|+b_i \u770b\u5230\u8fd9\u4e00\u719f\u6089\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f \u5355\u8c03\u961f\u5217\u4f18\u5316 \u3002\u7531\u4e8e\u6700\u7ec8\u5f0f\u5b50\u4e2d\u7684 \\max \\max \u53ea\u548c\u4e0a\u4e00\u72b6\u6001\u4e2d\u8fde\u7eed\u7684\u4e00\u6bb5\u7684\u6700\u5927\u503c\u6709\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8ba1\u7b97\u4e00\u4e2a\u65b0\u7684 i i \u7684\u72b6\u6001\u503c\u65f6\u5019\u53ea\u9700\u5c06\u539f\u6765\u7684 f_{i-1} f_{i-1} \u6784\u9020\u6210\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u5e76\u7ef4\u62a4\u5355\u8c03\u961f\u5217\uff0c\u4f7f\u5f97\u5176\u80fd\u5728\u5747\u644a O(1) O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u51fa \\max\\{f_{i-1,k}\\} \\max\\{f_{i-1,k}\\} \u7684\u503c\uff0c\u4ece\u800c\u6839\u636e\u516c\u5f0f\u8ba1\u7b97\u51fa f_{i,j} f_{i,j} \u7684\u503c\u3002 \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\times m) O(n\\times m) \u3002 \u8bb2\u5b8c\u4e86\uff0c\u8ba9\u6211\u4eec\u5f52\u7eb3\u4e00\u4e0b\u5355\u8c03\u961f\u5217\u4f18\u5316\u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u57fa\u672c\u5f62\u6001\uff1a\u5f53\u524d\u72b6\u6001\u7684\u6240\u6709\u503c\u53ef\u4ee5\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u67d0\u4e2a\u8fde\u7eed\u7684\u6bb5\u7684\u503c\u5f97\u5230\uff0c\u8981\u5bf9\u8fd9\u4e2a\u8fde\u7eed\u7684\u6bb5\u8fdb\u884c RMQ \u64cd\u4f5c\uff0c\u76f8\u90bb\u72b6\u6001\u7684\u6bb5\u7684\u5de6\u53f3\u533a\u95f4\u6ee1\u8db3\u975e\u964d\u7684\u5173\u7cfb\u3002 \u51e0\u9053\u7ec3\u4e60\u9898 \u00b6 \u6d1b\u8c37 P1886 \u6ed1\u52a8\u7a97\u53e3 \u6d1b\u8c37 P2254 [NOI2005] \u7470\u4e3d\u534e\u5c14\u5179 \u6d1b\u8c37 P2569 [SCOI2010] \u80a1\u7968\u4ea4\u6613 \u659c\u7387\u4f18\u5316 \u00b6 \u4f8b\u9898 \u6d1b\u8c37 P3195 [HNOI2008] \u73a9\u5177\u88c5\u7bb1 TOY \u4ee4 f_i f_i \u8868\u793a\u524d i i \u4e2a\u7269\u54c1\uff0c\u968f\u610f\u5206\u7ec4\u88c5\u5728\u4efb\u610f\u591a\u4e2a\u5bb9\u5668\u91cc\u6240\u80fd\u5f97\u5230\u7684\u6700\u5c0f\u8d39\u7528\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_i=max\\{f_j+(pre_i-pre_i+i-j-1-L)^2\\} f_i=max\\{f_j+(pre_i-pre_i+i-j-1-L)^2\\} \uff0c\u5176\u4e2d pre_i pre_i \u8868\u793a\u524d i i \u4e2a\u6570\u7684\u524d\u7f00\u548c\u3002 \u6362\u5143\u8bd5\u56fe\u7b80\u5316\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5f0f\uff1a \u4ee4 s_i=pre_i+i,L'=L+1 s_i=pre_i+i,L'=L+1 \uff0c\u5219 f_i=f_j+(s_i-s_j-L')^2 f_i=f_j+(s_i-s_j-L')^2 \uff0c\u5c55\u5f00\uff0c\u79fb\u9879\u5f97 f_i=f_j+(s_i-s_j-L')^2 f_i=f_j+(s_i-s_j-L')^2 f_i+2\\times s_i\\times (s_j+L')=f_j+s_i^2+(s_j+L')^2 f_i+2\\times s_i\\times (s_j+L')=f_j+s_i^2+(s_j+L')^2 \u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u5f0f\u5b50\u7684\u53f3\u7aef\u7684\u6240\u6709\u9879\u90fd\u53ea\u548c i i \u6709\u5173\u6216\u53ea\u548c j j \u6709\u5173\uff0c\u5f0f\u5b50\u5de6\u7aef\u7684\u7b2c\u4e00\u9879\u662f\u6211\u4eec\u8981\u6c42\u7684\u76ee\u6807\u503c\uff0c\u5f0f\u5b50\u5de6\u7aef\u7684\u5176\u4f59\u9879\u90fd\u540c\u65f6\u548c i i \u548c j j \u6709\u5173\u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u5f0f\u5b50\u770b\u4f5c\u4e00\u6761\u76f4\u7ebf\u7684\u51fd\u6570\u89e3\u6790\u5f0f\uff0c\u5f62\u5982 b+k\\times x=y b+k\\times x=y \uff0c\u548c\u4e0a\u5f0f\u4e00\u4e00\u5bf9\u5e94\u3002\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6211\u4eec\u8981\u6700\u5c0f\u5316 f_i f_i \uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u6700\u5c0f\u5316\u8fd9\u4e2a\u76f4\u7ebf\u7684\u622a\u8ddd\uff0c\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u786e\u5b9a\u7684 i i \uff0c\u8fd9\u4e2a\u76f4\u7ebf\u7684\u659c\u7387 s_i s_i \u90fd\u662f\u786e\u5b9a\u7684\u3002 \u5982\u56fe\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u659c\u7387\u56fa\u5b9a\u7684\u76f4\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u5e73\u79fb\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u70b9\u5728\u8fd9\u6761\u76f4\u7ebf\u4e0a\uff0c\u7136\u540e\u5c06\u65b0\u7684\u70b9\u52a0\u5165\u70b9\u96c6\uff0c\u8fd9\u6837\u80af\u5b9a\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u76f4\u7ebf\u7684\u659c\u7387\u90fd\u662f\u5355\u8c03\u9012\u5347\u7684\uff08\u56e0\u4e3a\u5982\u679c\u65b0\u7684\u76f4\u7ebf\u659c\u7387\u5c0f\u4e8e\u659c\u7387\u6700\u5927\u7684\u76f4\u7ebf\uff0c\u90a3\u4e48\u5176\u4e00\u5b9a\u4e0d\u6210\u88ab\u9009\u62e9\u6210\u4e3a\u65b0\u7684\u51b3\u7b56\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e0b\u51f8\u5305\u3002\uff08\u5982\u679c\u6c42\u7684\u662f \\max \\max \u90a3\u4e48\u5c31\u8981\u7ef4\u62a4\u4e00\u4e2a \u4e0a\u51f8\u5305 \u3002\u8fd9\u79cd\u4e1c\u897f\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff0c\u5982\u679c\u76f4\u7ebf\u7684\u659c\u7387\u4e0d\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u90a3\u5c31\u8981\u7ef4\u62a4\u6574\u4e2a\u51f8\u5305 / \u4e8c\u5206\u7b49\u5947\u6280\u6deb\u5de7\u3002\uff09 \u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u4e0b\u51f8\u5305\u3002 \u51e0\u9053\u7ec3\u4e60\u9898 \u00b6 \u6d1b\u8c37 P4072 [SDOI2016] \u5f81\u9014 \u6d1b\u8c37 P2120 [ZJOI2007] \u4ed3\u5e93\u5efa\u8bbe \u6d1b\u8c37 P3628 [APIO2010] \u7279\u522b\u884c\u52a8\u961f bzoj 4709 [Jsoi2011] \u67e0\u6aac CF311B Cats Transport \u6d1b\u8c37 P4027 [NOI2007] \u8d27\u5e01\u5151\u6362 \u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u4f18\u5316 \u00b6 \u4f8b\u9898 \u6d1b\u8c37 P1880 [NOI1995] \u77f3\u5b50\u5408\u5e76 \u9898\u76ee\u5927\u610f\uff1a\u5728\u4e00\u4e2a\u73af\u4e0a\u6709 n n \u4e2a\u6570\uff0c\u8fdb\u884c n-1 n-1 \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u76f8\u90bb\u7684\u4e24\u5806\u5408\u5e76\u6210\u4e00\u5806\uff0c\u80fd\u83b7\u5f97\u65b0\u7684\u4e00\u5806\u4e2d\u7684\u77f3\u5b50\u6570\u91cf\u7684\u548c\u7684\u5f97\u5206\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u4f60\u7684\u5f97\u5206\u3002 \u6211\u4eec\u9996\u5148 \u7834\u73af\u6210\u94fe \uff0c\u7136\u540e\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u3002\u8bbe f_{i,j} f_{i,j} \u8868\u793a\u4ece\u4f4d\u7f6e i i \u5408\u5e76\u5230\u4f4d\u7f6e j j \u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u5f97\u5206\uff0c sum_i sum_i \u4e3a\u524d i i \u5806\u77f3\u5b50\u6570\u7684\u524d\u7f00\u548c\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+(sum_j-sum_i)\\}(i\\le k\\le j) f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+(sum_j-sum_i)\\}(i\\le k\\le j) \u8003\u8651\u5e38\u89c4\u7684\u8f6c\u79fb\u65b9\u6cd5\uff0c\u679a\u4e3e i i \u3001 j j \u548c k k \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3) \u3002 \u4ec0\u4e48\u662f\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff1f \u00b6 \u5bf9\u4e8e a<b\\le c<d a<b\\le c<d \uff0c\u5982\u679c\u6709 f_{a,c}+f_{b,d}\\le f_{b,c}+f_{a,d} f_{a,c}+f_{b,d}\\le f_{b,c}+f_{a,d} \uff0c\u5219\u79f0\u8be5\u6570\u7ec4\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u53ef\u4ee5\u7528\u901a\u4fd7\u7684\u65b9\u6cd5\u8868\u8ff0\u4e3a \u201c\u4ea4\u53c9\u5c0f\u4e8e\u5305\u542b\u201d\u3002 \u4e24\u4e2a\u5b9a\u7406\uff1a \u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u80fd\u4f18\u5316\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u80fd\u8868\u793a\u4e3a f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+cost(i,j)\\}(i\\le k\\le j) f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+cost(i,j)\\}(i\\le k\\le j) \u3002\u5982\u679c cost cost \u51fd\u6570\u540c\u65f6\u6ee1\u8db3\u5355\u8c03\u6027\u548c\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48\u6570\u7ec4 f f \u4e5f\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u3002 \u5b9a\u4e49 idx_{i,j} idx_{i,j} \u4e3a\u5728\u8f6c\u79fb f_{i,j} f_{i,j} \u7684\u8fc7\u7a0b\u4e2d\u5728 k=idx_{i,j} k=idx_{i,j} \u65f6\u53d6\u5f97\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u5982\u679c f f \u6570\u7ec4\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48 idx idx \u51fd\u6570\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u5373\u6709 idx_{i,j}\\le idx_{i,j+1}\\le idx_{i+1,j+1} idx_{i,j}\\le idx_{i,j+1}\\le idx_{i+1,j+1} \u3002 \u8bc1\u660e\u4f1a\u548c\u9898\u76ee\u89e3\u6cd5\u4e00\u8d77 qwq qwq \u56de\u5230\u9898\u76ee \u00b6 \u7b2c\u4e00\u6b65\uff1a\u8bc1\u660e cost cost \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f \u8981\u8bc1\u660e\uff0c\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 i<i+1\\le j<j+1 i<i+1\\le j<j+1 \u7684 i,j i,j \uff0c \u5747\u6709 cost_{i,j}+cost_{i+1,j+1}\\le cost_{i+1,j}+cost_{i,j+1} cost_{i,j}+cost_{i+1,j+1}\\le cost_{i+1,j}+cost_{i,j+1} \u3002 \u79fb\u9879\u5f97 cost_{i,j}-cost_{i+1,j}\\le cost_{i,j+1}-cost_{i+1,j+1} cost_{i,j}-cost_{i+1,j}\\le cost_{i,j+1}-cost_{i+1,j+1} \u8bbe F(j)=cost_{i,j}-cost{i+1,j} F(j)=cost_{i,j}-cost{i+1,j} \uff0c\u5982\u679c\u8981\u4f7f\u8fd9\u4e2a\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u6210\u7acb\uff0c\u90a3\u4e48\u5c31\u8981\u8bc1\u660e F(j) F(j) \u5355\u8c03\u975e\u964d\u3002 \u5728\u672c\u9898\u4e2d\uff0c F(j)=(sum_j-sum_{i-1})-(sum_j-sum_i)=sum_i-sum_{i-1}=a_i F(j)=(sum_j-sum_{i-1})-(sum_j-sum_i)=sum_i-sum_{i-1}=a_i \uff0c\u4e0e j j \u65e0\u5173\uff0c\u81ea\u7136\u4e00\u5b9a\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u3002 \u8bc1\u6bd5\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8bc1\u660e f f \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f \u540c\u6837\u7684\uff0c\u5e94\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 i<i+1\\le j<j+1 i<i+1\\le j<j+1 \u7684 i,j i,j \uff0c \u5747\u6709 f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} \u6211\u4eec\u5047\u8bbe x=idx_{i+1,j},y=idx_{i,j+1} x=idx_{i+1,j},y=idx_{i,j+1} \u3002\u4e0d\u59a8\u8bbe x<=y x<=y \u3002 \u5c06 x,y x,y \u5e26\u5165\u5f97\uff0c f_{i,j}+f_{i+1,j+1}=f_{i,x}+f_{x+1,j}+cost_{i,j}+f_{i+1,y}+f_{y+1,j+1}+cost_{i+1,j+1} f_{i,j}+f_{i+1,j+1}=f_{i,x}+f_{x+1,j}+cost_{i,j}+f_{i+1,y}+f_{y+1,j+1}+cost_{i+1,j+1} \u7531\u4e8e\u4e0a\u4e00\u6b65\u5df2\u7ecf\u8bc1\u660e\u51fa\u4e86 cost cost \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u800c\u8be5\u4e0d\u7b49\u5f0f\u7684\u5de6\u8fb9\u5728\u4e0a\u5f0f\u51fa\u73b0\u8fc7\uff0c\u5c06\u5176\u66ff\u6362\u5f97 \\begin{aligned} &&f_{i,\\,x}+f_{x+1,\\,j}+cost_{i,\\,j}+f_{i+1,\\,y}+f_{y+1,\\,j+1}+cost_{i+1,\\,j+1}\\\\ &\\le&f_{i,\\,x}+f_{x+1,\\,j+1}+cost_{i,\\,j+1}+f_{i+1,\\,y}+f_{y+1,\\,j}+cost_{i+1,\\,j}\\\\ \\end{aligned} \\begin{aligned} &&f_{i,\\,x}+f_{x+1,\\,j}+cost_{i,\\,j}+f_{i+1,\\,y}+f_{y+1,\\,j+1}+cost_{i+1,\\,j+1}\\\\ &\\le&f_{i,\\,x}+f_{x+1,\\,j+1}+cost_{i,\\,j+1}+f_{i+1,\\,y}+f_{y+1,\\,j}+cost_{i+1,\\,j}\\\\ \\end{aligned} \u6d88\u53bb\u516c\u5171\u9879\u53ef\u5f97 f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} \u8bc1\u6bd5\u3002 \u7b2c\u4e09\u6b65\uff1a\u8bc1\u660e\u51b3\u7b56\u7684\u5355\u8c03\u6027 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86 cost cost \u548c f f \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u8981\u8bc1\u660e\u51b3\u7b56\u7684\u5355\u8c03\u6027\u4ee5\u8bc1\u660e\u4f18\u5316\u7684\u6b63\u786e\u6027\u3002 \u5373\u8bc1 idx_{i,j-1}\\le idx_{i,j}\\le idx_{i+1,j} idx_{i,j-1}\\le idx_{i,j}\\le idx_{i+1,j} \u6211\u4eec\u53ea\u8bc1\u660e\u5f0f\u5b50\u7684\u524d\u534a\u90e8\u5206\uff0c\u540e\u534a\u90e8\u5206\u53ef\u4ee5\u6709\u7c7b\u4f3c\u7684\u65b9\u6cd5\u63a8\u51fa\u3002 \u8bbe y=idx_{i,j-1},x\\le y y=idx_{i,j-1},x\\le y \uff0c\u56e0\u4e3a x+1\\le y+1\\le j-1<j x+1\\le y+1\\le j-1<j \uff0c\u7531\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u53ef\u5f97\uff0c f_{x+1,j-1}+f_{y+1,j}\\le f_{y+1,j-1}+f_{x+1,j} f_{x+1,j-1}+f_{y+1,j}\\le f_{y+1,j-1}+f_{x+1,j} \u7531\u4e8e\u6211\u4eec\u662f\u4ee4 y=idx_{i,j-1},x\\le y y=idx_{i,j-1},x\\le y \u65f6 f_{i,j-1} f_{i,j-1} \u53d6\u5f97\u6700\u5c0f\u503c\uff0c\u90a3\u4e48 f_{i,j-1}(idx_{i,j-1}=x) f_{i,j-1}(idx_{i,j-1}=x) \u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e f_{i,j-1}(idx_{i,j-1}=y) f_{i,j-1}(idx_{i,j-1}=y) \uff0c\u6240\u4ee5\u5bf9\u4e8e f_{i,j-1} f_{i,j-1} \u53ef\u4ee5\u53d6\u5230\u6700\u4f18\u503c\u7684 y y \uff0c\u6240\u6709\u5c0f\u4e8e\u5b83\u7684\u503c\uff0c\u5bf9\u4e8e f_{i,j} f_{i,j} \u6765\u8bf4\uff0c\u90fd\u6ca1\u6709 y y \u4f18\uff0c\u6240\u4ee5\u6700\u4f18\u51b3\u7b56\u4e00\u5b9a\u4e0d\u662f\u5c0f\u4e8e y y \u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 idx_{i,j-1}\\le idx_{i,j} idx_{i,j-1}\\le idx_{i,j} \u8bc1\u6bd5\u3002 \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u600e\u4e48\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u5462\uff1f \u00b6 \u7ed9\u51fa\u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 for ( int i = n ; i >= 1 ; i -- ) { for ( int j = i + 1 ; j <= n ; j ++ ) { f [ i ][ j ] = inf ; for ( int k = s [ i ][ j - 1 ]; k <= s [ i + 1 ][ j ]; k ++ ) { if ( f [ i ][ j ] < f [ i ][ k ] + f [ k + 1 ][ j ] + sum [ j ] - sum [ i - 1 ]) { f [ i ][ j ] = f [ i ][ k ] + f [ k + 1 ][ j ] + sum [ j ] - sum [ i - 1 ]; idx [ i ][ j ] = k ; } } } } \u6ce8\u610f\uff1a\u7531\u4e8e\u5728\u8ba1\u7b97 f_{i,j} f_{i,j} \u7684\u65f6\u5019\u9700\u8981\u77e5\u9053 idx_{i,j-1} idx_{i,j-1} \u548c idx_{i+1,j} idx_{i+1,j} \u7684\u503c\uff0c\u6240\u4ee5 i i \u7684\u5faa\u73af\u9006\u5e8f\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e \u00b6 \u8ba1\u7b97 f_{i,j} f_{i,j} \u65f6\uff0c\u6211\u4eec\u8981\u5faa\u73af idx_{i+1,j}-idx_{i,j-1} idx_{i+1,j}-idx_{i,j-1} \u6b21\uff0c\u90a3\u4e48\u4e00\u5171\u52a0\u8d77\u6765\u4f1a\u5faa\u73af\u591a\u5c11\u6b21\u5462\uff1f \u56e0\u4e3a \\sum_{i=1}^{n-1}(idx_{i+1,i+1}-idx_{i,i})=idx_{n,n}-idx_{1,1} \\sum_{i=1}^{n-1}(idx_{i+1,i+1}-idx_{i,i})=idx_{n,n}-idx_{1,1} \u5f88\u663e\u7136\u548c n n \u540c\u9636\uff0c\u90a3\u4e48\u5b83\u7684 n n \u500d\u5c31\u548c n^2 n^2 \u540c\u9636\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u3002 \u4e00\u9053\u7ec3\u4e60\u9898 \u00b6 \u6d1b\u8c37 P4767 [IOI2000] \u90ae\u5c40 \u53c2\u8003\u8d44\u6599 \u00b6 NOIAu \u7684 CSDN \u535a\u5ba2","title":"DP \u4f18\u5316"},{"location":"dp/optimization/#_1","text":"\u4f8b\u9898 \u7ecf\u5178\u95ee\u9898 - \u591a\u91cd\u80cc\u5305 \u9898\u76ee\u5927\u610f\uff1a\u6709 n n \u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709 a_i a_i \u4ef6\uff0c\u8d2d\u4e70\u4e00\u4ef6\u8fd9\u79cd\u7269\u54c1\u7684\u8d39\u7528\u4e3a c_i c_i \uff0c\u4ef7\u503c\u4e3a v_i v_i \u3002\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a t t \u7684\u80cc\u5305\uff0c\u73b0\u5728\u8ba9\u4f60\u627e\u5230\u6700\u4f18\u7684\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u88c5\u5165\u80cc\u5305\u7684\u7269\u54c1\u7684\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8003\u8651\u5e38\u89c4\u7684\u52a8\u89c4\u65b9\u5f0f\uff0c\u5b9a\u4e49 f_{i,j} f_{i,j} \u4e3a\u5f53\u524d\u8003\u8651\u5230\u7b2c i i \u4e2a\u7269\u54c1\uff0c\u80cc\u5305\u5bb9\u91cf\u4e3a j j \u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff0c f_{i,j}=\\max\\{f_{i-1,j},f_{i-1,j-c_i}+v_i\\} f_{i,j}=\\max\\{f_{i-1,j},f_{i-1,j-c_i}+v_i\\} \u3002 \u5bf9\u4e8e \u6bcf\u4ef6 \u7269\u54c1\uff0c\u90fd\u8981\u8fd9\u6837\u5faa\u73af\u4e00\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a t\\times \\sum_{i=1}^n a_i t\\times \\sum_{i=1}^n a_i \uff0c\u67d0\u4e9b\u65f6\u5019\u53ef\u80fd\u4e0d\u53ef\u63a5\u53d7\uff0c\u9700\u8981\u4f18\u5316\u3002 \u8003\u8651\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u6211\u4eec\u6709 17 17 \u4e2a\u786c\u5e01\uff0c\u8981\u53bb\u4e70 1 1 \u5230 17 17 \u5143\u94b1\u7684\u7269\u54c1\uff0c\u53ea\u9700\u5c06\u8fd9\u4e9b\u786c\u5e01\u6253\u5305\u6210 1,2,4,8 1,2,4,8 \u548c 2 2 \u8fd9\u6837\u7684\u51e0\u5305\u3002\u524d\u9762\u7684 4 4 \u5305\u80fd\u4fdd\u8bc1\u8986\u76d6 1 1 \u5230 15 15 \u6240\u6709\u7684\u60c5\u51b5\uff0c\u6700\u540e\u4e00\u5305\u5728\u4e4b\u524d\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0a\u4e00\u4e2a\u503c\uff0c\u80fd\u4fdd\u8bc1\u5b9e\u73b0\u652f\u4ed8\u7684\u65f6\u5019\u53d6\u6574\u5305\uff0c\u80af\u5b9a\u80fd\u4fdd\u8bc1\u652f\u4ed8\u3002\u8fd9\u5c31\u662f\u4e8c\u8fdb\u5236\u4f18\u5316\u7684\u539f\u7406\u548c\u57fa\u672c\u601d\u60f3\u3002 \u7528\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u628a k k \u4ef6\u76f8\u540c\u7684\u7269\u54c1\u770b\u4f5c\u662f O(log_2 k) O(log_2 k) \u4ef6\u7269\u54c1\u4e86\u3002\u4f18\u5316\u540e \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , a + i ); tot += c [ i ] * a [ i ]; for ( int j = 1 ; j <= a [ i ]; j *= 2 ) if ( a [ i ] >= j ) a [ i ] -= j , v [ ++ cur ] = c [ i ] * j ; if ( a [ i ]) v [ ++ cur ] = c [ i ] * a [ i ]; } for ( int i = 1 ; i <= cur ; i ++ ) for ( int j = m ; j >= v [ i ]; j -- ) if ( f [ j - v [ i ]]) f [ j ] = true ;","title":"\u4e8c\u8fdb\u5236\u4f18\u5316\u89e3\u591a\u91cd\u80cc\u5305"},{"location":"dp/optimization/#_2","text":"HDU 2844 Coins","title":"\u51e0\u9053\u7ec3\u4e60\u9898"},{"location":"dp/optimization/#_3","text":"\u5b66\u4e60\u672c\u8282\u524d\uff0c\u8bf7\u52a1\u5fc5\u5148\u5b66\u4e60 \u5355\u8c03\u961f\u5217 \u3002 \u4f8b\u9898 CF372C Watching Fireworks is Fun \u9898\u76ee\u5927\u610f\uff1a\u57ce\u9547\u4e2d\u6709 n n \u4e2a\u4f4d\u7f6e\uff0c\u6709 m m \u4e2a\u70df\u82b1\u8981\u653e\u3002\u7b2c i i \u4e2a\u70df\u82b1\u653e\u51fa\u7684\u65f6\u95f4\u8bb0\u4e3a t_i t_i \uff0c\u653e\u51fa\u7684\u4f4d\u7f6e\u8bb0\u4e3a a_i a_i \u3002\u5982\u679c\u70df\u82b1\u653e\u51fa\u7684\u65f6\u5019\uff0c\u4f60\u5904\u5728\u4f4d\u7f6e x x \uff0c\u90a3\u4e48\u4f60\u5c06\u6536\u83b7 b_i-|a_i-x| b_i-|a_i-x| \u70b9\u5feb\u4e50\u503c\u3002 \u521d\u59cb\u4f60\u53ef\u5728\u4efb\u610f\u4f4d\u7f6e\uff0c\u4f60\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u53ef\u4ee5\u79fb\u52a8\u4e0d\u5927\u4e8e d d \u4e2a\u5355\u4f4d\u8ddd\u79bb\u3002\u73b0\u5728\u4f60\u9700\u8981\u6700\u5927\u5316\u4f60\u80fd\u83b7\u5f97\u7684\u5feb\u4e50\u503c\u3002 \u8bbe f_{i,j} f_{i,j} \u8868\u793a\u5728\u653e\u7b2c i i \u4e2a\u70df\u82b1\u65f6\uff0c\u4f60\u7684\u4f4d\u7f6e\u5728 j j \u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5feb\u4e50\u503c\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_{i,j}=\\max\\{f_{i-1,k}+b_i-|a_i-j|\\} f_{i,j}=\\max\\{f_{i-1,k}+b_i-|a_i-j|\\} \u8fd9\u91cc\u7684 k k \u662f\u6709\u8303\u56f4\u7684\uff0c j-(t_{i+1}-t_i)\\times d\\le k\\le j+(t_{i+1}-t_i)\\times d j-(t_{i+1}-t_i)\\times d\\le k\\le j+(t_{i+1}-t_i)\\times d \u3002 \u6211\u4eec\u5c1d\u8bd5\u5c06\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u8fdb\u884c\u53d8\u5f62\uff1a \u7531\u4e8e \\max \\max \u91cc\u51fa\u73b0\u4e86\u4e00\u4e2a\u786e\u5b9a\u7684\u5e38\u91cf b_i b_i \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u63d0\u5230\u5916\u9762\u53bb\u3002 f_{i,j}=\\max\\{f_{i-1,k}+b_i+|a_i-j|\\}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i f_{i,j}=\\max\\{f_{i-1,k}+b_i+|a_i-j|\\}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i \u5982\u679c\u786e\u5b9a\u4e86 i i \u548c j j \u7684\u503c\uff0c\u90a3\u4e48 |a_i-j| |a_i-j| \u7684\u503c\u4e5f\u662f\u786e\u5b9a\u7684\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e00\u90e8\u5206\u63d0\u5230\u5916\u9762\u53bb\u3002 \u6700\u540e\uff0c\u5f0f\u5b50\u53d8\u6210\u4e86\u8fd9\u4e2a\u6837\u5b50\uff1a f_{i,j}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i=\\max\\{f_{i-1,k}\\}-|a_i-j|+b_i f_{i,j}=\\max\\{f_{i-1,k}-|a_i-j|\\}+b_i=\\max\\{f_{i-1,k}\\}-|a_i-j|+b_i \u770b\u5230\u8fd9\u4e00\u719f\u6089\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f \u5355\u8c03\u961f\u5217\u4f18\u5316 \u3002\u7531\u4e8e\u6700\u7ec8\u5f0f\u5b50\u4e2d\u7684 \\max \\max \u53ea\u548c\u4e0a\u4e00\u72b6\u6001\u4e2d\u8fde\u7eed\u7684\u4e00\u6bb5\u7684\u6700\u5927\u503c\u6709\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8ba1\u7b97\u4e00\u4e2a\u65b0\u7684 i i \u7684\u72b6\u6001\u503c\u65f6\u5019\u53ea\u9700\u5c06\u539f\u6765\u7684 f_{i-1} f_{i-1} \u6784\u9020\u6210\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u5e76\u7ef4\u62a4\u5355\u8c03\u961f\u5217\uff0c\u4f7f\u5f97\u5176\u80fd\u5728\u5747\u644a O(1) O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u51fa \\max\\{f_{i-1,k}\\} \\max\\{f_{i-1,k}\\} \u7684\u503c\uff0c\u4ece\u800c\u6839\u636e\u516c\u5f0f\u8ba1\u7b97\u51fa f_{i,j} f_{i,j} \u7684\u503c\u3002 \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\times m) O(n\\times m) \u3002 \u8bb2\u5b8c\u4e86\uff0c\u8ba9\u6211\u4eec\u5f52\u7eb3\u4e00\u4e0b\u5355\u8c03\u961f\u5217\u4f18\u5316\u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u57fa\u672c\u5f62\u6001\uff1a\u5f53\u524d\u72b6\u6001\u7684\u6240\u6709\u503c\u53ef\u4ee5\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u67d0\u4e2a\u8fde\u7eed\u7684\u6bb5\u7684\u503c\u5f97\u5230\uff0c\u8981\u5bf9\u8fd9\u4e2a\u8fde\u7eed\u7684\u6bb5\u8fdb\u884c RMQ \u64cd\u4f5c\uff0c\u76f8\u90bb\u72b6\u6001\u7684\u6bb5\u7684\u5de6\u53f3\u533a\u95f4\u6ee1\u8db3\u975e\u964d\u7684\u5173\u7cfb\u3002","title":"\u5355\u8c03\u961f\u5217 &amp; \u5355\u8c03\u6808\u4f18\u5316"},{"location":"dp/optimization/#_4","text":"\u6d1b\u8c37 P1886 \u6ed1\u52a8\u7a97\u53e3 \u6d1b\u8c37 P2254 [NOI2005] \u7470\u4e3d\u534e\u5c14\u5179 \u6d1b\u8c37 P2569 [SCOI2010] \u80a1\u7968\u4ea4\u6613","title":"\u51e0\u9053\u7ec3\u4e60\u9898"},{"location":"dp/optimization/#_5","text":"\u4f8b\u9898 \u6d1b\u8c37 P3195 [HNOI2008] \u73a9\u5177\u88c5\u7bb1 TOY \u4ee4 f_i f_i \u8868\u793a\u524d i i \u4e2a\u7269\u54c1\uff0c\u968f\u610f\u5206\u7ec4\u88c5\u5728\u4efb\u610f\u591a\u4e2a\u5bb9\u5668\u91cc\u6240\u80fd\u5f97\u5230\u7684\u6700\u5c0f\u8d39\u7528\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_i=max\\{f_j+(pre_i-pre_i+i-j-1-L)^2\\} f_i=max\\{f_j+(pre_i-pre_i+i-j-1-L)^2\\} \uff0c\u5176\u4e2d pre_i pre_i \u8868\u793a\u524d i i \u4e2a\u6570\u7684\u524d\u7f00\u548c\u3002 \u6362\u5143\u8bd5\u56fe\u7b80\u5316\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5f0f\uff1a \u4ee4 s_i=pre_i+i,L'=L+1 s_i=pre_i+i,L'=L+1 \uff0c\u5219 f_i=f_j+(s_i-s_j-L')^2 f_i=f_j+(s_i-s_j-L')^2 \uff0c\u5c55\u5f00\uff0c\u79fb\u9879\u5f97 f_i=f_j+(s_i-s_j-L')^2 f_i=f_j+(s_i-s_j-L')^2 f_i+2\\times s_i\\times (s_j+L')=f_j+s_i^2+(s_j+L')^2 f_i+2\\times s_i\\times (s_j+L')=f_j+s_i^2+(s_j+L')^2 \u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u5f0f\u5b50\u7684\u53f3\u7aef\u7684\u6240\u6709\u9879\u90fd\u53ea\u548c i i \u6709\u5173\u6216\u53ea\u548c j j \u6709\u5173\uff0c\u5f0f\u5b50\u5de6\u7aef\u7684\u7b2c\u4e00\u9879\u662f\u6211\u4eec\u8981\u6c42\u7684\u76ee\u6807\u503c\uff0c\u5f0f\u5b50\u5de6\u7aef\u7684\u5176\u4f59\u9879\u90fd\u540c\u65f6\u548c i i \u548c j j \u6709\u5173\u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u5f0f\u5b50\u770b\u4f5c\u4e00\u6761\u76f4\u7ebf\u7684\u51fd\u6570\u89e3\u6790\u5f0f\uff0c\u5f62\u5982 b+k\\times x=y b+k\\times x=y \uff0c\u548c\u4e0a\u5f0f\u4e00\u4e00\u5bf9\u5e94\u3002\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6211\u4eec\u8981\u6700\u5c0f\u5316 f_i f_i \uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u6700\u5c0f\u5316\u8fd9\u4e2a\u76f4\u7ebf\u7684\u622a\u8ddd\uff0c\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u786e\u5b9a\u7684 i i \uff0c\u8fd9\u4e2a\u76f4\u7ebf\u7684\u659c\u7387 s_i s_i \u90fd\u662f\u786e\u5b9a\u7684\u3002 \u5982\u56fe\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u659c\u7387\u56fa\u5b9a\u7684\u76f4\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u5e73\u79fb\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u70b9\u5728\u8fd9\u6761\u76f4\u7ebf\u4e0a\uff0c\u7136\u540e\u5c06\u65b0\u7684\u70b9\u52a0\u5165\u70b9\u96c6\uff0c\u8fd9\u6837\u80af\u5b9a\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u76f4\u7ebf\u7684\u659c\u7387\u90fd\u662f\u5355\u8c03\u9012\u5347\u7684\uff08\u56e0\u4e3a\u5982\u679c\u65b0\u7684\u76f4\u7ebf\u659c\u7387\u5c0f\u4e8e\u659c\u7387\u6700\u5927\u7684\u76f4\u7ebf\uff0c\u90a3\u4e48\u5176\u4e00\u5b9a\u4e0d\u6210\u88ab\u9009\u62e9\u6210\u4e3a\u65b0\u7684\u51b3\u7b56\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e0b\u51f8\u5305\u3002\uff08\u5982\u679c\u6c42\u7684\u662f \\max \\max \u90a3\u4e48\u5c31\u8981\u7ef4\u62a4\u4e00\u4e2a \u4e0a\u51f8\u5305 \u3002\u8fd9\u79cd\u4e1c\u897f\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff0c\u5982\u679c\u76f4\u7ebf\u7684\u659c\u7387\u4e0d\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u90a3\u5c31\u8981\u7ef4\u62a4\u6574\u4e2a\u51f8\u5305 / \u4e8c\u5206\u7b49\u5947\u6280\u6deb\u5de7\u3002\uff09 \u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u4e0b\u51f8\u5305\u3002","title":"\u659c\u7387\u4f18\u5316"},{"location":"dp/optimization/#_6","text":"\u6d1b\u8c37 P4072 [SDOI2016] \u5f81\u9014 \u6d1b\u8c37 P2120 [ZJOI2007] \u4ed3\u5e93\u5efa\u8bbe \u6d1b\u8c37 P3628 [APIO2010] \u7279\u522b\u884c\u52a8\u961f bzoj 4709 [Jsoi2011] \u67e0\u6aac CF311B Cats Transport \u6d1b\u8c37 P4027 [NOI2007] \u8d27\u5e01\u5151\u6362","title":"\u51e0\u9053\u7ec3\u4e60\u9898"},{"location":"dp/optimization/#_7","text":"\u4f8b\u9898 \u6d1b\u8c37 P1880 [NOI1995] \u77f3\u5b50\u5408\u5e76 \u9898\u76ee\u5927\u610f\uff1a\u5728\u4e00\u4e2a\u73af\u4e0a\u6709 n n \u4e2a\u6570\uff0c\u8fdb\u884c n-1 n-1 \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u76f8\u90bb\u7684\u4e24\u5806\u5408\u5e76\u6210\u4e00\u5806\uff0c\u80fd\u83b7\u5f97\u65b0\u7684\u4e00\u5806\u4e2d\u7684\u77f3\u5b50\u6570\u91cf\u7684\u548c\u7684\u5f97\u5206\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u4f60\u7684\u5f97\u5206\u3002 \u6211\u4eec\u9996\u5148 \u7834\u73af\u6210\u94fe \uff0c\u7136\u540e\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u3002\u8bbe f_{i,j} f_{i,j} \u8868\u793a\u4ece\u4f4d\u7f6e i i \u5408\u5e76\u5230\u4f4d\u7f6e j j \u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u5f97\u5206\uff0c sum_i sum_i \u4e3a\u524d i i \u5806\u77f3\u5b50\u6570\u7684\u524d\u7f00\u548c\u3002 \u5199\u51fa \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+(sum_j-sum_i)\\}(i\\le k\\le j) f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+(sum_j-sum_i)\\}(i\\le k\\le j) \u8003\u8651\u5e38\u89c4\u7684\u8f6c\u79fb\u65b9\u6cd5\uff0c\u679a\u4e3e i i \u3001 j j \u548c k k \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3) \u3002","title":"\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u4f18\u5316"},{"location":"dp/optimization/#_8","text":"\u5bf9\u4e8e a<b\\le c<d a<b\\le c<d \uff0c\u5982\u679c\u6709 f_{a,c}+f_{b,d}\\le f_{b,c}+f_{a,d} f_{a,c}+f_{b,d}\\le f_{b,c}+f_{a,d} \uff0c\u5219\u79f0\u8be5\u6570\u7ec4\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u53ef\u4ee5\u7528\u901a\u4fd7\u7684\u65b9\u6cd5\u8868\u8ff0\u4e3a \u201c\u4ea4\u53c9\u5c0f\u4e8e\u5305\u542b\u201d\u3002 \u4e24\u4e2a\u5b9a\u7406\uff1a \u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u80fd\u4f18\u5316\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u80fd\u8868\u793a\u4e3a f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+cost(i,j)\\}(i\\le k\\le j) f_{i,j}=\\max\\{f_{i,k}+f_{k+1,j}+cost(i,j)\\}(i\\le k\\le j) \u3002\u5982\u679c cost cost \u51fd\u6570\u540c\u65f6\u6ee1\u8db3\u5355\u8c03\u6027\u548c\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48\u6570\u7ec4 f f \u4e5f\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u3002 \u5b9a\u4e49 idx_{i,j} idx_{i,j} \u4e3a\u5728\u8f6c\u79fb f_{i,j} f_{i,j} \u7684\u8fc7\u7a0b\u4e2d\u5728 k=idx_{i,j} k=idx_{i,j} \u65f6\u53d6\u5f97\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u5982\u679c f f \u6570\u7ec4\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48 idx idx \u51fd\u6570\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u5373\u6709 idx_{i,j}\\le idx_{i,j+1}\\le idx_{i+1,j+1} idx_{i,j}\\le idx_{i,j+1}\\le idx_{i+1,j+1} \u3002 \u8bc1\u660e\u4f1a\u548c\u9898\u76ee\u89e3\u6cd5\u4e00\u8d77 qwq qwq","title":"\u4ec0\u4e48\u662f\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff1f"},{"location":"dp/optimization/#_9","text":"\u7b2c\u4e00\u6b65\uff1a\u8bc1\u660e cost cost \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f \u8981\u8bc1\u660e\uff0c\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 i<i+1\\le j<j+1 i<i+1\\le j<j+1 \u7684 i,j i,j \uff0c \u5747\u6709 cost_{i,j}+cost_{i+1,j+1}\\le cost_{i+1,j}+cost_{i,j+1} cost_{i,j}+cost_{i+1,j+1}\\le cost_{i+1,j}+cost_{i,j+1} \u3002 \u79fb\u9879\u5f97 cost_{i,j}-cost_{i+1,j}\\le cost_{i,j+1}-cost_{i+1,j+1} cost_{i,j}-cost_{i+1,j}\\le cost_{i,j+1}-cost_{i+1,j+1} \u8bbe F(j)=cost_{i,j}-cost{i+1,j} F(j)=cost_{i,j}-cost{i+1,j} \uff0c\u5982\u679c\u8981\u4f7f\u8fd9\u4e2a\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u6210\u7acb\uff0c\u90a3\u4e48\u5c31\u8981\u8bc1\u660e F(j) F(j) \u5355\u8c03\u975e\u964d\u3002 \u5728\u672c\u9898\u4e2d\uff0c F(j)=(sum_j-sum_{i-1})-(sum_j-sum_i)=sum_i-sum_{i-1}=a_i F(j)=(sum_j-sum_{i-1})-(sum_j-sum_i)=sum_i-sum_{i-1}=a_i \uff0c\u4e0e j j \u65e0\u5173\uff0c\u81ea\u7136\u4e00\u5b9a\u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u3002 \u8bc1\u6bd5\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8bc1\u660e f f \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f \u540c\u6837\u7684\uff0c\u5e94\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 i<i+1\\le j<j+1 i<i+1\\le j<j+1 \u7684 i,j i,j \uff0c \u5747\u6709 f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} \u6211\u4eec\u5047\u8bbe x=idx_{i+1,j},y=idx_{i,j+1} x=idx_{i+1,j},y=idx_{i,j+1} \u3002\u4e0d\u59a8\u8bbe x<=y x<=y \u3002 \u5c06 x,y x,y \u5e26\u5165\u5f97\uff0c f_{i,j}+f_{i+1,j+1}=f_{i,x}+f_{x+1,j}+cost_{i,j}+f_{i+1,y}+f_{y+1,j+1}+cost_{i+1,j+1} f_{i,j}+f_{i+1,j+1}=f_{i,x}+f_{x+1,j}+cost_{i,j}+f_{i+1,y}+f_{y+1,j+1}+cost_{i+1,j+1} \u7531\u4e8e\u4e0a\u4e00\u6b65\u5df2\u7ecf\u8bc1\u660e\u51fa\u4e86 cost cost \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u800c\u8be5\u4e0d\u7b49\u5f0f\u7684\u5de6\u8fb9\u5728\u4e0a\u5f0f\u51fa\u73b0\u8fc7\uff0c\u5c06\u5176\u66ff\u6362\u5f97 \\begin{aligned} &&f_{i,\\,x}+f_{x+1,\\,j}+cost_{i,\\,j}+f_{i+1,\\,y}+f_{y+1,\\,j+1}+cost_{i+1,\\,j+1}\\\\ &\\le&f_{i,\\,x}+f_{x+1,\\,j+1}+cost_{i,\\,j+1}+f_{i+1,\\,y}+f_{y+1,\\,j}+cost_{i+1,\\,j}\\\\ \\end{aligned} \\begin{aligned} &&f_{i,\\,x}+f_{x+1,\\,j}+cost_{i,\\,j}+f_{i+1,\\,y}+f_{y+1,\\,j+1}+cost_{i+1,\\,j+1}\\\\ &\\le&f_{i,\\,x}+f_{x+1,\\,j+1}+cost_{i,\\,j+1}+f_{i+1,\\,y}+f_{y+1,\\,j}+cost_{i+1,\\,j}\\\\ \\end{aligned} \u6d88\u53bb\u516c\u5171\u9879\u53ef\u5f97 f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} f_{i,j}+f_{i+1,j+1}\\le f_{i+1,j}+f_{i,j+1} \u8bc1\u6bd5\u3002 \u7b2c\u4e09\u6b65\uff1a\u8bc1\u660e\u51b3\u7b56\u7684\u5355\u8c03\u6027 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86 cost cost \u548c f f \u6ee1\u8db3\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\uff0c\u8981\u8bc1\u660e\u51b3\u7b56\u7684\u5355\u8c03\u6027\u4ee5\u8bc1\u660e\u4f18\u5316\u7684\u6b63\u786e\u6027\u3002 \u5373\u8bc1 idx_{i,j-1}\\le idx_{i,j}\\le idx_{i+1,j} idx_{i,j-1}\\le idx_{i,j}\\le idx_{i+1,j} \u6211\u4eec\u53ea\u8bc1\u660e\u5f0f\u5b50\u7684\u524d\u534a\u90e8\u5206\uff0c\u540e\u534a\u90e8\u5206\u53ef\u4ee5\u6709\u7c7b\u4f3c\u7684\u65b9\u6cd5\u63a8\u51fa\u3002 \u8bbe y=idx_{i,j-1},x\\le y y=idx_{i,j-1},x\\le y \uff0c\u56e0\u4e3a x+1\\le y+1\\le j-1<j x+1\\le y+1\\le j-1<j \uff0c\u7531\u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u53ef\u5f97\uff0c f_{x+1,j-1}+f_{y+1,j}\\le f_{y+1,j-1}+f_{x+1,j} f_{x+1,j-1}+f_{y+1,j}\\le f_{y+1,j-1}+f_{x+1,j} \u7531\u4e8e\u6211\u4eec\u662f\u4ee4 y=idx_{i,j-1},x\\le y y=idx_{i,j-1},x\\le y \u65f6 f_{i,j-1} f_{i,j-1} \u53d6\u5f97\u6700\u5c0f\u503c\uff0c\u90a3\u4e48 f_{i,j-1}(idx_{i,j-1}=x) f_{i,j-1}(idx_{i,j-1}=x) \u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e f_{i,j-1}(idx_{i,j-1}=y) f_{i,j-1}(idx_{i,j-1}=y) \uff0c\u6240\u4ee5\u5bf9\u4e8e f_{i,j-1} f_{i,j-1} \u53ef\u4ee5\u53d6\u5230\u6700\u4f18\u503c\u7684 y y \uff0c\u6240\u6709\u5c0f\u4e8e\u5b83\u7684\u503c\uff0c\u5bf9\u4e8e f_{i,j} f_{i,j} \u6765\u8bf4\uff0c\u90fd\u6ca1\u6709 y y \u4f18\uff0c\u6240\u4ee5\u6700\u4f18\u51b3\u7b56\u4e00\u5b9a\u4e0d\u662f\u5c0f\u4e8e y y \u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 idx_{i,j-1}\\le idx_{i,j} idx_{i,j-1}\\le idx_{i,j} \u8bc1\u6bd5\u3002","title":"\u56de\u5230\u9898\u76ee"},{"location":"dp/optimization/#_10","text":"\u7ed9\u51fa\u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 for ( int i = n ; i >= 1 ; i -- ) { for ( int j = i + 1 ; j <= n ; j ++ ) { f [ i ][ j ] = inf ; for ( int k = s [ i ][ j - 1 ]; k <= s [ i + 1 ][ j ]; k ++ ) { if ( f [ i ][ j ] < f [ i ][ k ] + f [ k + 1 ][ j ] + sum [ j ] - sum [ i - 1 ]) { f [ i ][ j ] = f [ i ][ k ] + f [ k + 1 ][ j ] + sum [ j ] - sum [ i - 1 ]; idx [ i ][ j ] = k ; } } } } \u6ce8\u610f\uff1a\u7531\u4e8e\u5728\u8ba1\u7b97 f_{i,j} f_{i,j} \u7684\u65f6\u5019\u9700\u8981\u77e5\u9053 idx_{i,j-1} idx_{i,j-1} \u548c idx_{i+1,j} idx_{i+1,j} \u7684\u503c\uff0c\u6240\u4ee5 i i \u7684\u5faa\u73af\u9006\u5e8f\u3002","title":"\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u600e\u4e48\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u5462\uff1f"},{"location":"dp/optimization/#_11","text":"\u8ba1\u7b97 f_{i,j} f_{i,j} \u65f6\uff0c\u6211\u4eec\u8981\u5faa\u73af idx_{i+1,j}-idx_{i,j-1} idx_{i+1,j}-idx_{i,j-1} \u6b21\uff0c\u90a3\u4e48\u4e00\u5171\u52a0\u8d77\u6765\u4f1a\u5faa\u73af\u591a\u5c11\u6b21\u5462\uff1f \u56e0\u4e3a \\sum_{i=1}^{n-1}(idx_{i+1,i+1}-idx_{i,i})=idx_{n,n}-idx_{1,1} \\sum_{i=1}^{n-1}(idx_{i+1,i+1}-idx_{i,i})=idx_{n,n}-idx_{1,1} \u5f88\u663e\u7136\u548c n n \u540c\u9636\uff0c\u90a3\u4e48\u5b83\u7684 n n \u500d\u5c31\u548c n^2 n^2 \u540c\u9636\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"dp/optimization/#_12","text":"\u6d1b\u8c37 P4767 [IOI2000] \u90ae\u5c40","title":"\u4e00\u9053\u7ec3\u4e60\u9898"},{"location":"dp/optimization/#_13","text":"NOIAu \u7684 CSDN \u535a\u5ba2","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dp/plug/","text":"","title":"\u63d2\u5934 DP"},{"location":"dp/state/","text":"\u5b66\u4e60\u72b6\u538b dp \u4e4b\u524d\uff0c\u8bf7\u786e\u8ba4\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 \u52a8\u6001\u89c4\u5212\u521d\u6b65 \u90e8\u5206\u5185\u5bb9\u7684\u5b66\u4e60 (\u5efa\u8bae\u5b66\u4e60 \u4f4d\u8fd0\u7b97 \u90e8\u5206\u7684\u5185\u5bb9) \u72b6\u538b DP \u7b80\u4ecb \u00b6 \u72b6\u538b dp \u662f\u52a8\u6001\u89c4\u5212\u7684\u4e00\u79cd\uff0c\u501f\u7531\u5c06\u72b6\u6001\u538b\u7f29\uff08\u901a\u5e38\u538b\u7f29\u4e3a\u67d0\u6574\u5f62\uff09\u4ee5\u8fbe\u5230\u8282\u7ea6\u7a7a\u95f4\u548c\u65f6\u95f4\u7684\u76ee\u7684 \u5e38\u7528\u683c\u5f0f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int maxn = 1 << n ; //\u89c4\u5b9a\u72b6\u6001\u7684\u4e0a\u754c for ( int i = 0 ; i < maxn ; i ++ ) { if ( i & ( i << 1 )) continue ; //\u5982\u679ci\u60c5\u51b5\u4e0d\u6210\u7acb\u5c31\u5ffd\u7565 Type [ ++ top ] = i ; //\u8bb0\u5f55\u60c5\u51b5i\u5230Type\u6570\u7ec4\u4e2d } for ( int i = 1 ; i <= top ; i ++ ) { if ( fit ( situation [ 1 ], Type [ i ])) dp [ 1 ][ Type [ i ]] = 1 ; //\u521d\u59cb\u5316\u7b2c\u4e00\u5c42 } for ( int i = 2 ; i <= \u5c42\u6570 ( dp\u4e0a\u754c ); i ++ ) { for ( int l = 1 ; l <= top ; l ++ ) //\u7a77\u4e3e\u672c\u5c42\u60c5\u51b5 for ( int j = 1 ; j <= top ; j ++ ) //\u7a77\u4e3e\u4e0a\u4e00\u5c42\u60c5\u51b5(\u4e0a\u4e00\u5c42\u5bf9\u672c\u5c42\u6709\u5f71\u54cd\u65f6) if ( situation [ i ], Type [ l ] \u548c Type [ j ] \u7b26\u5408\u9898\u610f ) dp [ i ][ l ] = dp [ i ][ l ] + dp [ i - 1 ][ j ]; //\u6539\u53d8\u5f53\u524d\u5c42(i)\u7684\u72b6\u6001(l)\u7684\u65b9\u6848\u79cd\u6570 } for ( int i = 1 ; i <= top ; i ++ ) ans += dp [ \u4e0a\u754c ][ Type [ i ]]; \u5178\u578b\u4f8b\u9898 \u00b6 [USACO06NOV] \u7389\u7c73\u7530 Corn Fields \u663e\u7136\uff0c\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u52a8\u6001\u89c4\u5212\u9898\u76ee\uff0c\u4f46\u7531\u4e8e\u65b9\u6848\u6570\u8fc7\u591a\uff0c\u5e94\u4f7f\u7528\u72b6\u538b dp \u907f\u514d\u8d85\u65f6 \u672c\u9898\u6240 \"\u538b\u7f29\" \u7684\u662f \"\u6bcf\u884c\u53ef\u884c\u7684\u72b6\u6001\" \u548c \"\u6bcf\u884c\u571f\u5730\u7684\u72b6\u6001\", \u800c\u50a8\u5b58\u7b54\u6848\u7684 dp \u6570\u7ec4\u5c31\u5e94\u540c\u65f6\u4f53\u73b0\u8fd9\u4e24\u4e2a\u7279\u70b9 (\u6240\u4ee5\u672c\u9898 dp \u6570\u7ec4\u4e3a\u4e8c\u7ef4) \u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u540c\u4e0a\u65b9\u4f2a\u4ee3\u7801 \u4f8b\u9898\u4ee3\u7801","title":"\u72b6\u538b DP"},{"location":"dp/state/#dp","text":"\u72b6\u538b dp \u662f\u52a8\u6001\u89c4\u5212\u7684\u4e00\u79cd\uff0c\u501f\u7531\u5c06\u72b6\u6001\u538b\u7f29\uff08\u901a\u5e38\u538b\u7f29\u4e3a\u67d0\u6574\u5f62\uff09\u4ee5\u8fbe\u5230\u8282\u7ea6\u7a7a\u95f4\u548c\u65f6\u95f4\u7684\u76ee\u7684","title":"\u72b6\u538b DP \u7b80\u4ecb"},{"location":"dp/state/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int maxn = 1 << n ; //\u89c4\u5b9a\u72b6\u6001\u7684\u4e0a\u754c for ( int i = 0 ; i < maxn ; i ++ ) { if ( i & ( i << 1 )) continue ; //\u5982\u679ci\u60c5\u51b5\u4e0d\u6210\u7acb\u5c31\u5ffd\u7565 Type [ ++ top ] = i ; //\u8bb0\u5f55\u60c5\u51b5i\u5230Type\u6570\u7ec4\u4e2d } for ( int i = 1 ; i <= top ; i ++ ) { if ( fit ( situation [ 1 ], Type [ i ])) dp [ 1 ][ Type [ i ]] = 1 ; //\u521d\u59cb\u5316\u7b2c\u4e00\u5c42 } for ( int i = 2 ; i <= \u5c42\u6570 ( dp\u4e0a\u754c ); i ++ ) { for ( int l = 1 ; l <= top ; l ++ ) //\u7a77\u4e3e\u672c\u5c42\u60c5\u51b5 for ( int j = 1 ; j <= top ; j ++ ) //\u7a77\u4e3e\u4e0a\u4e00\u5c42\u60c5\u51b5(\u4e0a\u4e00\u5c42\u5bf9\u672c\u5c42\u6709\u5f71\u54cd\u65f6) if ( situation [ i ], Type [ l ] \u548c Type [ j ] \u7b26\u5408\u9898\u610f ) dp [ i ][ l ] = dp [ i ][ l ] + dp [ i - 1 ][ j ]; //\u6539\u53d8\u5f53\u524d\u5c42(i)\u7684\u72b6\u6001(l)\u7684\u65b9\u6848\u79cd\u6570 } for ( int i = 1 ; i <= top ; i ++ ) ans += dp [ \u4e0a\u754c ][ Type [ i ]];","title":"\u5e38\u7528\u683c\u5f0f"},{"location":"dp/state/#_2","text":"[USACO06NOV] \u7389\u7c73\u7530 Corn Fields \u663e\u7136\uff0c\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u52a8\u6001\u89c4\u5212\u9898\u76ee\uff0c\u4f46\u7531\u4e8e\u65b9\u6848\u6570\u8fc7\u591a\uff0c\u5e94\u4f7f\u7528\u72b6\u538b dp \u907f\u514d\u8d85\u65f6 \u672c\u9898\u6240 \"\u538b\u7f29\" \u7684\u662f \"\u6bcf\u884c\u53ef\u884c\u7684\u72b6\u6001\" \u548c \"\u6bcf\u884c\u571f\u5730\u7684\u72b6\u6001\", \u800c\u50a8\u5b58\u7b54\u6848\u7684 dp \u6570\u7ec4\u5c31\u5e94\u540c\u65f6\u4f53\u73b0\u8fd9\u4e24\u4e2a\u7279\u70b9 (\u6240\u4ee5\u672c\u9898 dp \u6570\u7ec4\u4e3a\u4e8c\u7ef4) \u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u540c\u4e0a\u65b9\u4f2a\u4ee3\u7801 \u4f8b\u9898\u4ee3\u7801","title":"\u5178\u578b\u4f8b\u9898"},{"location":"dp/tree/","text":"\u5728\u5b66\u4e60\u672c\u7ae0\u524d\u8bf7\u786e\u8ba4\u4f60\u5df2\u7ecf\u5b66\u4e60\u4e86 \u52a8\u6001\u89c4\u5212\u90e8\u5206\u7b80\u4ecb \u6811\u5f62 DP\uff0c\u5373\u5728\u6811\u4e0a\u8fdb\u884c\u7684 DP\u3002\u7531\u4e8e\u6811\u56fa\u6709\u7684\u9012\u5f52\u6027\u8d28\uff0c\u6811\u5f62 DP \u4e00\u822c\u90fd\u662f\u9012\u5f52\u8fdb\u884c\u7684\u3002 \u4f8b\u9898 \u00b6 \u4ee5\u4e0b\u9762\u8fd9\u9053\u9898\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u4e00\u4e0b\u6811\u5f62 DP \u7684\u4e00\u822c\u8fc7\u7a0b\u3002 \u4f8b\u9898 \u6d1b\u8c37 P1352 \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a \u67d0\u5927\u5b66\u6709 n n \u4e2a\u804c\u5458\uff0c\u7f16\u53f7\u4e3a 1\\text{~} N 1\\text{~} N \u3002\u4ed6\u4eec\u4e4b\u95f4\u6709\u4ece\u5c5e\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u7684\u5173\u7cfb\u5c31\u50cf\u4e00\u68f5\u4ee5\u6821\u957f\u4e3a\u6839\u7684\u6811\uff0c\u7236\u7ed3\u70b9\u5c31\u662f\u5b50\u7ed3\u70b9\u7684\u76f4\u63a5\u4e0a\u53f8\u3002\u73b0\u5728\u6709\u4e2a\u5468\u5e74\u5e86\u5bb4\u4f1a\uff0c\u5bb4\u4f1a\u6bcf\u9080\u8bf7\u6765\u4e00\u4e2a\u804c\u5458\u90fd\u4f1a\u589e\u52a0\u4e00\u5b9a\u7684\u5feb\u4e50\u6307\u6570 a_i a_i \uff0c\u4f46\u662f\u5462\uff0c\u5982\u679c\u67d0\u4e2a\u804c\u5458\u7684\u4e0a\u53f8\u6765\u53c2\u52a0\u821e\u4f1a\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u804c\u5458\u5c31\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u80af\u6765\u53c2\u52a0\u821e\u4f1a\u4e86\u3002\u6240\u4ee5\uff0c\u8bf7\u4f60\u7f16\u7a0b\u8ba1\u7b97\uff0c\u9080\u8bf7\u54ea\u4e9b\u804c\u5458\u53ef\u4ee5\u4f7f\u5feb\u4e50\u6307\u6570\u6700\u5927\uff0c\u6c42\u6700\u5927\u7684\u5feb\u4e50\u6307\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 f(i,0/1) f(i,0/1) \u4ee3\u8868\u4ee5 i i \u4e3a\u6839\u7684\u5b50\u6811\u7684\u6700\u4f18\u89e3\uff08\u7b2c\u4e8c\u7ef4\u7684\u503c\u4e3a 0 \u4ee3\u8868 i i \u4e0d\u53c2\u52a0\u821e\u4f1a\u7684\u60c5\u51b5\uff0c1 \u4ee3\u8868 i i \u53c2\u52a0\u821e\u4f1a\u7684\u60c5\u51b5\uff09\u3002 \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u4e0b\u9762\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff08\u5176\u4e2d\u4e0b\u9762\u7684 x x \u90fd\u662f i i \u7684\u513f\u5b50\uff09\uff1a f(i,0) = \\sum\\max \\{f(x,1),f(x,0)\\} f(i,0) = \\sum\\max \\{f(x,1),f(x,0)\\} \uff08\u4e0a\u53f8\u4e0d\u53c2\u52a0\u821e\u4f1a\u65f6\uff0c\u4e0b\u5c5e\u53ef\u4ee5\u53c2\u52a0\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53c2\u52a0\uff09 f(i,1) = \\sum{f(x,0)} + a_i f(i,1) = \\sum{f(x,0)} + a_i \uff08\u4e0a\u53f8\u53c2\u52a0\u821e\u4f1a\u65f6\uff0c\u4e0b\u5c5e\u90fd\u4e0d\u4f1a\u53c2\u52a0\uff09 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DFS\uff0c\u5728\u8fd4\u56de\u4e0a\u4e00\u5c42\u65f6\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u6700\u4f18\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <algorithm> #include <cstdio> using namespace std ; struct edge { int v , next ; } e [ 6005 ]; int head [ 6005 ], n , cnt , f [ 6005 ][ 2 ], ans , is_h [ 6005 ], vis [ 6005 ]; void addedge ( int u , int v ) { e [ ++ cnt ]. v = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ; } void calc ( int k ) { vis [ k ] = 1 ; for ( int i = head [ k ]; i ; i = e [ i ]. next ) //\u679a\u4e3e\u8be5\u8282\u70b9\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9 { if ( vis [ e [ i ]. v ]) continue ; calc ( e [ i ]. v ); f [ k ][ 1 ] += f [ e [ i ]. v ][ 0 ]; f [ k ][ 0 ] += max ( f [ e [ i ]. v ][ 0 ], f [ e [ i ]. v ][ 1 ]); } return ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & f [ i ][ 1 ]); for ( int i = 1 ; i < n ; i ++ ) { int l , k ; scanf ( \"%d%d\" , & l , & k ); is_h [ l ] = 1 ; addedge ( k , l ); } for ( int i = 1 ; i <= n ; i ++ ) if ( ! is_h [ i ]) //\u4ece\u6839\u8282\u70b9\u5f00\u59cbDFS { calc ( i ); printf ( \"%d\" , max ( f [ i ][ 1 ], f [ i ][ 0 ])); return 0 ; } } \u4e60\u9898 \u00b6 HDU 2196 Computer POJ 1463 Strategic game POJ 3585 Accumulation Degree","title":"\u6811\u5f62 DP"},{"location":"dp/tree/#_1","text":"\u4ee5\u4e0b\u9762\u8fd9\u9053\u9898\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u4e00\u4e0b\u6811\u5f62 DP \u7684\u4e00\u822c\u8fc7\u7a0b\u3002 \u4f8b\u9898 \u6d1b\u8c37 P1352 \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a \u67d0\u5927\u5b66\u6709 n n \u4e2a\u804c\u5458\uff0c\u7f16\u53f7\u4e3a 1\\text{~} N 1\\text{~} N \u3002\u4ed6\u4eec\u4e4b\u95f4\u6709\u4ece\u5c5e\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u7684\u5173\u7cfb\u5c31\u50cf\u4e00\u68f5\u4ee5\u6821\u957f\u4e3a\u6839\u7684\u6811\uff0c\u7236\u7ed3\u70b9\u5c31\u662f\u5b50\u7ed3\u70b9\u7684\u76f4\u63a5\u4e0a\u53f8\u3002\u73b0\u5728\u6709\u4e2a\u5468\u5e74\u5e86\u5bb4\u4f1a\uff0c\u5bb4\u4f1a\u6bcf\u9080\u8bf7\u6765\u4e00\u4e2a\u804c\u5458\u90fd\u4f1a\u589e\u52a0\u4e00\u5b9a\u7684\u5feb\u4e50\u6307\u6570 a_i a_i \uff0c\u4f46\u662f\u5462\uff0c\u5982\u679c\u67d0\u4e2a\u804c\u5458\u7684\u4e0a\u53f8\u6765\u53c2\u52a0\u821e\u4f1a\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u804c\u5458\u5c31\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u80af\u6765\u53c2\u52a0\u821e\u4f1a\u4e86\u3002\u6240\u4ee5\uff0c\u8bf7\u4f60\u7f16\u7a0b\u8ba1\u7b97\uff0c\u9080\u8bf7\u54ea\u4e9b\u804c\u5458\u53ef\u4ee5\u4f7f\u5feb\u4e50\u6307\u6570\u6700\u5927\uff0c\u6c42\u6700\u5927\u7684\u5feb\u4e50\u6307\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 f(i,0/1) f(i,0/1) \u4ee3\u8868\u4ee5 i i \u4e3a\u6839\u7684\u5b50\u6811\u7684\u6700\u4f18\u89e3\uff08\u7b2c\u4e8c\u7ef4\u7684\u503c\u4e3a 0 \u4ee3\u8868 i i \u4e0d\u53c2\u52a0\u821e\u4f1a\u7684\u60c5\u51b5\uff0c1 \u4ee3\u8868 i i \u53c2\u52a0\u821e\u4f1a\u7684\u60c5\u51b5\uff09\u3002 \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u4e0b\u9762\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff08\u5176\u4e2d\u4e0b\u9762\u7684 x x \u90fd\u662f i i \u7684\u513f\u5b50\uff09\uff1a f(i,0) = \\sum\\max \\{f(x,1),f(x,0)\\} f(i,0) = \\sum\\max \\{f(x,1),f(x,0)\\} \uff08\u4e0a\u53f8\u4e0d\u53c2\u52a0\u821e\u4f1a\u65f6\uff0c\u4e0b\u5c5e\u53ef\u4ee5\u53c2\u52a0\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53c2\u52a0\uff09 f(i,1) = \\sum{f(x,0)} + a_i f(i,1) = \\sum{f(x,0)} + a_i \uff08\u4e0a\u53f8\u53c2\u52a0\u821e\u4f1a\u65f6\uff0c\u4e0b\u5c5e\u90fd\u4e0d\u4f1a\u53c2\u52a0\uff09 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DFS\uff0c\u5728\u8fd4\u56de\u4e0a\u4e00\u5c42\u65f6\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u6700\u4f18\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <algorithm> #include <cstdio> using namespace std ; struct edge { int v , next ; } e [ 6005 ]; int head [ 6005 ], n , cnt , f [ 6005 ][ 2 ], ans , is_h [ 6005 ], vis [ 6005 ]; void addedge ( int u , int v ) { e [ ++ cnt ]. v = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ; } void calc ( int k ) { vis [ k ] = 1 ; for ( int i = head [ k ]; i ; i = e [ i ]. next ) //\u679a\u4e3e\u8be5\u8282\u70b9\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9 { if ( vis [ e [ i ]. v ]) continue ; calc ( e [ i ]. v ); f [ k ][ 1 ] += f [ e [ i ]. v ][ 0 ]; f [ k ][ 0 ] += max ( f [ e [ i ]. v ][ 0 ], f [ e [ i ]. v ][ 1 ]); } return ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & f [ i ][ 1 ]); for ( int i = 1 ; i < n ; i ++ ) { int l , k ; scanf ( \"%d%d\" , & l , & k ); is_h [ l ] = 1 ; addedge ( k , l ); } for ( int i = 1 ; i <= n ; i ++ ) if ( ! is_h [ i ]) //\u4ece\u6839\u8282\u70b9\u5f00\u59cbDFS { calc ( i ); printf ( \"%d\" , max ( f [ i ][ 1 ], f [ i ][ 0 ])); return 0 ; } }","title":"\u4f8b\u9898"},{"location":"dp/tree/#_2","text":"HDU 2196 Computer POJ 1463 Strategic game POJ 3585 Accumulation Degree","title":"\u4e60\u9898"},{"location":"ds/","text":"","title":"\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7b80\u4ecb"},{"location":"ds/avl/","text":"","title":"AVL \u6811"},{"location":"ds/balanced-in-seg/","text":"\u5e38\u89c1\u7528\u9014 \u00b6 \u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u9700\u8981\u7ef4\u62a4\u591a\u7ef4\u5ea6\u4fe1\u606f\u3002\u5728\u8fd9\u79cd\u65f6\u5019\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u6811\u5957\u6811\u6765\u8bb0\u5f55\u4fe1\u606f\u3002\u5f53\u9700\u8981\u7ef4\u62a4\u524d\u9a71\uff0c\u540e\u7ee7\uff0c\u7b2c k k \u5927\uff0c\u67d0\u4e2a\u6570\u7684\u6392\u540d\uff0c\u6216\u8005\u63d2\u5165\u5220\u9664\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811\u6765\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u5373\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u3002 \u5b9e\u73b0\u539f\u7406 \u00b6 \u6211\u4eec\u4ee5 \u4e8c\u903c\u5e73\u8861\u6811 \u4e3a\u4f8b\uff0c\u6765\u89e3\u91ca\u5b9e\u73b0\u539f\u7406\u3002 \u5173\u4e8e\u6811\u5957\u6811\u7684\u6784\u5efa\uff0c\u6211\u4eec\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u6b63\u5e38\u5efa\u6811\uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u5efa\u7acb\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u5305\u542b\u8be5\u8282\u70b9\u6240\u8986\u76d6\u7684\u5e8f\u5217\u3002\u5177\u4f53\u64cd\u4f5c\u65f6\u6211\u4eec\u53ef\u4ee5\u5c06\u5e8f\u5217\u5143\u7d20\u4e00\u4e2a\u4e2a\u63d2\u5165\uff0c\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u5c31\u5c06\u8be5\u5143\u7d20\u52a0\u5165\u5230\u8be5\u8282\u70b9\u7684\u5e73\u8861\u6811\u4e2d\u3002 \u64cd\u4f5c\u4e00\uff0c\u6c42\u67d0\u533a\u95f4\u4e2d\u67d0\u503c\u7684\u6392\u540d\uff1a\u6211\u4eec\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u6b63\u5e38\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u5728\u67d0\u533a\u95f4\u4e2d\u7684\u8282\u70b9\u7684\u5e73\u8861\u6811\uff0c\u6211\u4eec\u8fd4\u56de\u5e73\u8861\u6811\u4e2d\u6bd4\u8be5\u503c\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u5408\u5e76\u533a\u95f4\u65f6\uff0c\u6211\u4eec\u5c06\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\u6c42\u548c\u5373\u53ef\u3002\u6700\u540e\u5c06\u8fd4\u56de\u503c +1 +1 \uff0c\u5373\u4e3a\u67d0\u503c\u5728\u67d0\u533a\u95f4\u4e2d\u7684\u6392\u540d\u3002 \u64cd\u4f5c\u4e8c\uff0c\u6c42\u67d0\u533a\u95f4\u4e2d\u6392\u540d\u4e3a k k \u7684\u503c\uff1a\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e8c\u5206\u7b56\u7565\u3002\u56e0\u4e3a\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\uff0c\u5176\u6392\u540d\u4e3a\u4e00\u533a\u95f4\uff0c\u4e14\u6709\u4e9b\u5143\u7d20\u539f\u5e8f\u5217\u4e0d\u5b58\u5728\u3002\u6240\u4ee5\u6211\u4eec\u91c7\u53d6\u548c\u64cd\u4f5c\u4e00\u7c7b\u4f3c\u7684\u601d\u8def\uff0c\u6211\u4eec\u7528\u5c0f\u4e8e\u8be5\u503c\u7684\u5143\u7d20\u4e2a\u6570\u4f5c\u4e3a\u53c2\u8003\u8fdb\u884c\u4e8c\u5206\uff0c\u5373\u53ef\u5f97\u89e3\u3002 \u64cd\u4f5c\u4e09\uff0c\u5c06\u67d0\u4e2a\u6570\u66ff\u6362\u4e3a\u53e6\u5916\u4e00\u4e2a\u6570\uff1a\u6211\u4eec\u53ea\u8981\u5728\u6240\u6709\u5305\u542b\u67d0\u6570\u7684\u5e73\u8861\u6811\u4e2d\u5220\u9664\u67d0\u6570\uff0c\u7136\u540e\u518d\u63d2\u5165\u53e6\u5916\u4e00\u4e2a\u6570\u5373\u53ef\u3002\u5916\u5c42\u4f9d\u65e7\u6b63\u5e38\u7ebf\u6bb5\u6811\u64cd\u4f5c\u3002 \u64cd\u4f5c\u56db\uff0c\u6c42\u67d0\u533a\u95f4\u4e2d\u67d0\u503c\u7684\u524d\u9a71\uff1a\u6211\u4eec\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u6b63\u5e38\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u5728\u67d0\u533a\u95f4\u4e2d\u7684\u8282\u70b9\u7684\u5e73\u8861\u6811\uff0c\u6211\u4eec\u8fd4\u56de\u67d0\u503c\u5728\u8be5\u5e73\u8861\u6811\u4e2d\u7684\u524d\u9a71\uff0c\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u7ed3\u679c\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u6211\u4eec\u6bcf\u4e2a\u5143\u7d20\u52a0\u5165 \\log n \\log n \u4e2a\u5e73\u8861\u6811\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a (n + q)\\log{n} (n + q)\\log{n} \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5bf9\u4e8e 1,2,4 1,2,4 \u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u6211\u4eec\u5728\u5916\u5c42\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f1a\u5728\u4e00\u4e2a\u5185\u5c42\u5e73\u8861\u6811\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\log^2{n} \\log^2{n} \u3002 \u5bf9\u4e8e 3 3 \u64cd\u4f5c\uff0c\u591a\u4e00\u4e2a\u4e8c\u5206\u8fc7\u7a0b\uff0c\u4e3a \\log^3{n} \\log^3{n} \u3002 \u7ecf\u5178\u4f8b\u9898 \u00b6 \u4e8c\u903c\u5e73\u8861\u6811 \u5916\u5c42\u7ebf\u6bb5\u6811\uff0c\u5185\u5c42\u5e73\u8861\u6811\u3002 \u793a\u4f8b\u4ee3\u7801 \u00b6 \u5e73\u8861\u6811\u90e8\u5206\u4ee3\u7801\u8bf7\u53c2\u8003 Splay \u7b49\u5176\u4ed6\u6761\u76ee\u3002 \u4f20\u9001\u81f3 Splay \u6761\u76ee \u64cd\u4f5c\u4e00 1 2 3 4 5 6 7 8 9 10 11 int vec_rank ( int k , int l , int r , int x , int y , int t ) { if ( x <= l && r <= y ) { return spy [ k ]. chk_rank ( t ); } int mid = l + r >> 1 ; int res = 0 ; if ( x <= mid ) res += vec_rank ( k << 1 , l , mid , x , y , t ); if ( y > mid ) res += vec_rank ( k << 1 | 1 , mid + 1 , r , x , y , t ); if ( x <= mid && y > mid ) res -- ; return res ; } \u64cd\u4f5c\u4e8c 1 2 3 4 5 6 7 8 9 int el = 0 , er = 100000001 , emid ; while ( el != er ) { emid = el + er >> 1 ; if ( vec_rank ( 1 , 1 , n , tl , tr , emid ) - 1 < tk ) el = emid + 1 ; else er = emid ; } printf ( \"%d \\n \" , el - 1 ); \u64cd\u4f5c\u4e09 1 2 3 4 5 6 7 8 9 void vec_chg ( int k , int l , int r , int loc , int x ) { int t = spy [ k ]. find ( dat [ loc ]); spy [ k ]. dele ( t ); spy [ k ]. insert ( x ); if ( l == r ) return ; int mid = l + r >> 1 ; if ( loc <= mid ) vec_chg ( k << 1 , l , mid , loc , x ); if ( loc > mid ) vec_chg ( k << 1 | 1 , mid + 1 , r , loc , x ); } \u64cd\u4f5c\u56db 1 2 3 4 5 6 7 8 int vec_front ( int k , int l , int r , int x , int y , int t ) { if ( x <= l && r <= y ) return spy [ k ]. chk_front ( t ); int mid = l + r >> 1 ; int res = 0 ; if ( x <= mid ) res = max ( res , vec_front ( k << 1 , l , mid , x , y , t )); if ( y > mid ) res = max ( res , vec_front ( k << 1 | 1 , mid + 1 , r , x , y , t )); return res ; } \u76f8\u5173\u7b97\u6cd5 \u00b6 \u9762\u5bf9\u591a\u7ef4\u5ea6\u4fe1\u606f\u7684\u9898\u76ee\u65f6\uff0c\u5982\u679c\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651 CDQ \u5206\u6cbb \uff0c\u6216\u8005 \u6574\u4f53\u4e8c\u5206 \u7b49\u5206\u6cbb\u7b97\u6cd5\uff0c\u6765\u907f\u514d\u4f7f\u7528\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u51cf\u5c11\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u3002","title":"\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811"},{"location":"ds/balanced-in-seg/#_1","text":"\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u9700\u8981\u7ef4\u62a4\u591a\u7ef4\u5ea6\u4fe1\u606f\u3002\u5728\u8fd9\u79cd\u65f6\u5019\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u6811\u5957\u6811\u6765\u8bb0\u5f55\u4fe1\u606f\u3002\u5f53\u9700\u8981\u7ef4\u62a4\u524d\u9a71\uff0c\u540e\u7ee7\uff0c\u7b2c k k \u5927\uff0c\u67d0\u4e2a\u6570\u7684\u6392\u540d\uff0c\u6216\u8005\u63d2\u5165\u5220\u9664\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811\u6765\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u5373\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u3002","title":"\u5e38\u89c1\u7528\u9014"},{"location":"ds/balanced-in-seg/#_2","text":"\u6211\u4eec\u4ee5 \u4e8c\u903c\u5e73\u8861\u6811 \u4e3a\u4f8b\uff0c\u6765\u89e3\u91ca\u5b9e\u73b0\u539f\u7406\u3002 \u5173\u4e8e\u6811\u5957\u6811\u7684\u6784\u5efa\uff0c\u6211\u4eec\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u6b63\u5e38\u5efa\u6811\uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u5efa\u7acb\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u5305\u542b\u8be5\u8282\u70b9\u6240\u8986\u76d6\u7684\u5e8f\u5217\u3002\u5177\u4f53\u64cd\u4f5c\u65f6\u6211\u4eec\u53ef\u4ee5\u5c06\u5e8f\u5217\u5143\u7d20\u4e00\u4e2a\u4e2a\u63d2\u5165\uff0c\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u5c31\u5c06\u8be5\u5143\u7d20\u52a0\u5165\u5230\u8be5\u8282\u70b9\u7684\u5e73\u8861\u6811\u4e2d\u3002 \u64cd\u4f5c\u4e00\uff0c\u6c42\u67d0\u533a\u95f4\u4e2d\u67d0\u503c\u7684\u6392\u540d\uff1a\u6211\u4eec\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u6b63\u5e38\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u5728\u67d0\u533a\u95f4\u4e2d\u7684\u8282\u70b9\u7684\u5e73\u8861\u6811\uff0c\u6211\u4eec\u8fd4\u56de\u5e73\u8861\u6811\u4e2d\u6bd4\u8be5\u503c\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u5408\u5e76\u533a\u95f4\u65f6\uff0c\u6211\u4eec\u5c06\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\u6c42\u548c\u5373\u53ef\u3002\u6700\u540e\u5c06\u8fd4\u56de\u503c +1 +1 \uff0c\u5373\u4e3a\u67d0\u503c\u5728\u67d0\u533a\u95f4\u4e2d\u7684\u6392\u540d\u3002 \u64cd\u4f5c\u4e8c\uff0c\u6c42\u67d0\u533a\u95f4\u4e2d\u6392\u540d\u4e3a k k \u7684\u503c\uff1a\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e8c\u5206\u7b56\u7565\u3002\u56e0\u4e3a\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\uff0c\u5176\u6392\u540d\u4e3a\u4e00\u533a\u95f4\uff0c\u4e14\u6709\u4e9b\u5143\u7d20\u539f\u5e8f\u5217\u4e0d\u5b58\u5728\u3002\u6240\u4ee5\u6211\u4eec\u91c7\u53d6\u548c\u64cd\u4f5c\u4e00\u7c7b\u4f3c\u7684\u601d\u8def\uff0c\u6211\u4eec\u7528\u5c0f\u4e8e\u8be5\u503c\u7684\u5143\u7d20\u4e2a\u6570\u4f5c\u4e3a\u53c2\u8003\u8fdb\u884c\u4e8c\u5206\uff0c\u5373\u53ef\u5f97\u89e3\u3002 \u64cd\u4f5c\u4e09\uff0c\u5c06\u67d0\u4e2a\u6570\u66ff\u6362\u4e3a\u53e6\u5916\u4e00\u4e2a\u6570\uff1a\u6211\u4eec\u53ea\u8981\u5728\u6240\u6709\u5305\u542b\u67d0\u6570\u7684\u5e73\u8861\u6811\u4e2d\u5220\u9664\u67d0\u6570\uff0c\u7136\u540e\u518d\u63d2\u5165\u53e6\u5916\u4e00\u4e2a\u6570\u5373\u53ef\u3002\u5916\u5c42\u4f9d\u65e7\u6b63\u5e38\u7ebf\u6bb5\u6811\u64cd\u4f5c\u3002 \u64cd\u4f5c\u56db\uff0c\u6c42\u67d0\u533a\u95f4\u4e2d\u67d0\u503c\u7684\u524d\u9a71\uff1a\u6211\u4eec\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u6b63\u5e38\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u5728\u67d0\u533a\u95f4\u4e2d\u7684\u8282\u70b9\u7684\u5e73\u8861\u6811\uff0c\u6211\u4eec\u8fd4\u56de\u67d0\u503c\u5728\u8be5\u5e73\u8861\u6811\u4e2d\u7684\u524d\u9a71\uff0c\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u7ed3\u679c\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002","title":"\u5b9e\u73b0\u539f\u7406"},{"location":"ds/balanced-in-seg/#_3","text":"\u6211\u4eec\u6bcf\u4e2a\u5143\u7d20\u52a0\u5165 \\log n \\log n \u4e2a\u5e73\u8861\u6811\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a (n + q)\\log{n} (n + q)\\log{n} \u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"ds/balanced-in-seg/#_4","text":"\u5bf9\u4e8e 1,2,4 1,2,4 \u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u6211\u4eec\u5728\u5916\u5c42\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f1a\u5728\u4e00\u4e2a\u5185\u5c42\u5e73\u8861\u6811\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\log^2{n} \\log^2{n} \u3002 \u5bf9\u4e8e 3 3 \u64cd\u4f5c\uff0c\u591a\u4e00\u4e2a\u4e8c\u5206\u8fc7\u7a0b\uff0c\u4e3a \\log^3{n} \\log^3{n} \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"ds/balanced-in-seg/#_5","text":"\u4e8c\u903c\u5e73\u8861\u6811 \u5916\u5c42\u7ebf\u6bb5\u6811\uff0c\u5185\u5c42\u5e73\u8861\u6811\u3002","title":"\u7ecf\u5178\u4f8b\u9898"},{"location":"ds/balanced-in-seg/#_6","text":"\u5e73\u8861\u6811\u90e8\u5206\u4ee3\u7801\u8bf7\u53c2\u8003 Splay \u7b49\u5176\u4ed6\u6761\u76ee\u3002 \u4f20\u9001\u81f3 Splay \u6761\u76ee \u64cd\u4f5c\u4e00 1 2 3 4 5 6 7 8 9 10 11 int vec_rank ( int k , int l , int r , int x , int y , int t ) { if ( x <= l && r <= y ) { return spy [ k ]. chk_rank ( t ); } int mid = l + r >> 1 ; int res = 0 ; if ( x <= mid ) res += vec_rank ( k << 1 , l , mid , x , y , t ); if ( y > mid ) res += vec_rank ( k << 1 | 1 , mid + 1 , r , x , y , t ); if ( x <= mid && y > mid ) res -- ; return res ; } \u64cd\u4f5c\u4e8c 1 2 3 4 5 6 7 8 9 int el = 0 , er = 100000001 , emid ; while ( el != er ) { emid = el + er >> 1 ; if ( vec_rank ( 1 , 1 , n , tl , tr , emid ) - 1 < tk ) el = emid + 1 ; else er = emid ; } printf ( \"%d \\n \" , el - 1 ); \u64cd\u4f5c\u4e09 1 2 3 4 5 6 7 8 9 void vec_chg ( int k , int l , int r , int loc , int x ) { int t = spy [ k ]. find ( dat [ loc ]); spy [ k ]. dele ( t ); spy [ k ]. insert ( x ); if ( l == r ) return ; int mid = l + r >> 1 ; if ( loc <= mid ) vec_chg ( k << 1 , l , mid , loc , x ); if ( loc > mid ) vec_chg ( k << 1 | 1 , mid + 1 , r , loc , x ); } \u64cd\u4f5c\u56db 1 2 3 4 5 6 7 8 int vec_front ( int k , int l , int r , int x , int y , int t ) { if ( x <= l && r <= y ) return spy [ k ]. chk_front ( t ); int mid = l + r >> 1 ; int res = 0 ; if ( x <= mid ) res = max ( res , vec_front ( k << 1 , l , mid , x , y , t )); if ( y > mid ) res = max ( res , vec_front ( k << 1 | 1 , mid + 1 , r , x , y , t )); return res ; }","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"ds/balanced-in-seg/#_7","text":"\u9762\u5bf9\u591a\u7ef4\u5ea6\u4fe1\u606f\u7684\u9898\u76ee\u65f6\uff0c\u5982\u679c\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651 CDQ \u5206\u6cbb \uff0c\u6216\u8005 \u6574\u4f53\u4e8c\u5206 \u7b49\u5206\u6cbb\u7b97\u6cd5\uff0c\u6765\u907f\u514d\u4f7f\u7528\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u51cf\u5c11\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u3002","title":"\u76f8\u5173\u7b97\u6cd5"},{"location":"ds/bit/","text":"\u7b80\u4ecb \u00b6 \u6811\u72b6\u6570\u7ec4\u548c\u4e0b\u9762\u7684\u7ebf\u6bb5\u6811\u53ef\u662f\u4eb2\u5144\u5f1f\u4e86\uff0c\u4f46\u4ed6\u4fe9\u6bd5\u7adf\u8fd8\u6709\u4e00\u4e9b\u533a\u522b\uff1a \u6811\u72b6\u6570\u7ec4\u80fd\u6709\u7684\u64cd\u4f5c\uff0c\u7ebf\u6bb5\u6811\u4e00\u5b9a\u6709\uff1b \u7ebf\u6bb5\u6811\u6709\u7684\u64cd\u4f5c\uff0c\u6811\u72b6\u6570\u7ec4\u4e0d\u4e00\u5b9a\u6709\u3002 \u8fd9\u4e48\u770b\u6765\u9009\u62e9\u7ebf\u6bb5\u6811\u4e0d\u5c31 \u300c\u5f97\u5929\u4e0b\u4e86\u300d \uff1f \u4e8b\u5b9e\u4e0a\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u4ee3\u7801\u8981\u6bd4\u7ebf\u6bb5\u6811\u77ed\u5f97\u591a\uff0c\u601d\u7ef4\u4e5f\u66f4\u6e05\u6670\uff0c\u5728\u89e3\u51b3\u4e00\u4e9b\u5355\u70b9\u4fee\u6539\u7684\u95ee\u9898\u65f6\uff0c\u6811\u72b6\u6570\u7ec4\u662f\u4e0d\u4e8c\u4e4b\u9009\u3002 \u539f\u7406 \u00b6 \u5982\u679c\u8981\u5177\u4f53\u4e86\u89e3\u6811\u72b6\u6570\u7ec4\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8bf7\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a \u6700\u4e0b\u9762\u7684\u516b\u4e2a\u65b9\u5757\u5c31\u4ee3\u8868\u5b58\u5165 a a \u4e2d\u7684\u516b\u4e2a\u6570\uff0c\u73b0\u5728\u90fd\u662f\u5341\u8fdb\u5236\u3002 \u4ed6\u4eec\u4e0a\u9762\u7684\u53c2\u5dee\u4e0d\u9f50\u7684\u5269\u4e0b\u7684\u65b9\u5757\u5c31\u4ee3\u8868 a a \u7684\u4e0a\u7ea7\u2014\u2014 c c \u6570\u7ec4\u3002 \u5f88\u663e\u7136\u770b\u51fa\uff1a c[2] c[2] \u7ba1\u7406\u7684\u662f a[1] a[1] & a[2] a[2] \uff1b c[4] c[4] \u7ba1\u7406\u7684\u662f a[1] a[1] & a[2] a[2] & a[3] a[3] & a[4] a[4] \uff1b c[6] c[6] \u7ba1\u7406\u7684\u662f a[5] a[5] & a[6] a[6] \uff1b c[8] c[8] \u5219\u7ba1\u7406\u5168\u90e8 8 8 \u4e2a\u6570\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4f60\u8981\u7b97\u533a\u95f4\u548c\u7684\u8bdd\uff0c\u6bd4\u5982\u8bf4\u8981\u7b97 a[51] a[51] ~ a[91] a[91] \u7684\u533a\u95f4\u548c\uff0c\u66b4\u529b\u7b97\u5f53\u7136\u53ef\u4ee5\uff0c\u90a3\u4e0a\u767e\u4e07\u7684\u6570\uff0c\u90a3\u5c31 RE \u55bd\u3002 \u90a3\u4e48\u8fd9\u79cd\u7c7b\u4f3c\u4e8e\u8df3\u4e00\u8df3\u7684\u8fde\u7eed\u8df3\u5230\u4e2d\u5fc3\u70b9\u800c\u5206\u503c\u4e0d\u65ad\u53d8\u5927\u7684\u539f\u7406\u662f\u4e00\u6837\u7684\uff08\u500d\u589e\uff09\u3002 \u4f60\u4ece 91 91 \u5f00\u59cb\u5f80\u524d\u8df3\uff0c\u53d1\u73b0 c[n] c[n] \uff08 n n \u6211\u4e5f\u4e0d\u786e\u5b9a\u662f\u591a\u5c11\uff0c\u7b97\u8d77\u6765\u592a\u9ebb\u70e6\uff0c\u5c31\u610f\u601d\u4e00\u4e0b\uff09\u53ea\u7ba1 a[91] a[91] \u8fd9\u4e2a\u70b9\uff0c\u90a3\u4e48\u4f60\u5c31\u4f1a\u627e a[90] a[90] \uff0c\u53d1\u73b0 c[n - 1] c[n - 1] \u7ba1\u7684\u662f a[90] a[90] & a[89] a[89] \uff1b\u90a3\u4e48\u4f60\u5c31\u4f1a\u76f4\u63a5\u8df3\u5230 a[88] a[88] \uff0c c[n - 2] c[n - 2] \u5c31\u4f1a\u7ba1 a[81] a[81] ~ a[88] a[88] \u8fd9\u4e9b\u6570\uff0c\u4e0b\u6b21\u67e5\u8be2\u4ece a[80] a[80] \u5f80\u524d\u627e\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u7528\u6cd5\u53ca\u64cd\u4f5c \u00b6 \u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u4f60\u662f\u600e\u4e48\u77e5\u9053 c c \u7ba1\u7684 a a \u7684\u4e2a\u6570\u5206\u522b\u662f\u591a\u5c11\u5462\uff1f\u4f60\u90a3\u4e2a 1 1 \u4e2a\uff0c 2 2 \u4e2a\uff0c 8 8 \u4e2a\u2026\u2026 \u662f\u600e\u4e48\u6765\u7684\u5462\uff1f \u8fd9\u65f6\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u51fd\u6570\u2014\u2014 lowbit \uff1a 1 2 3 4 int lowbit ( int x ) { //\u7b97\u51fax\u4e8c\u8fdb\u5236\u7684\u4ece\u53f3\u5f80\u5de6\u51fa\u73b0\u7b2c\u4e00\u4e2a1\u4ee5\u53ca\u8fd9\u4e2a1\u4e4b\u540e\u7684\u90a3\u4e9b0\u7ec4\u6210\u6570\u7684\u4e8c\u8fdb\u5236\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u7684\u6570 return x & - x ; } lowbit \u7684\u610f\u601d\u6ce8\u91ca\u8bf4\u660e\u4e86\uff0c\u54b1\u4eec\u5c31\u7528\u8fd9\u4e2a\u8bf4\u6cd5\u6765\u8bc1\u660e\u4e00\u4e0b a[88] a[88] \uff1a 88_{(10)}=1011000_{(2)} 88_{(10)}=1011000_{(2)} \u53d1\u73b0\u7b2c\u4e00\u4e2a 1 1 \u4ee5\u53ca\u4ed6\u540e\u9762\u7684 0 0 \u7ec4\u6210\u7684\u4e8c\u8fdb\u5236\u662f 1000 1000 1000_{(2)} = 8_{(10)} 1000_{(2)} = 8_{(10)} 1000 1000 \u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u662f 8 8 \uff0c\u6240\u4ee5 c c \u4e00\u5171\u7ba1\u7406 8 8 \u4e2a a a \u3002 \u8fd9\u5c31\u662f lowbit \u7684\u7528\u5904\uff0c\u4ec5\u6b64\u800c\u5df2\uff08\u4f46\u4e5f\u76f8\u5f53\u6709\u7528\uff09\u3002 \u4f60\u53ef\u80fd\u53c8\u95ee\u4e86\uff1ax & -x \u662f\u4ec0\u4e48\u610f\u601d\u554a\uff1f -x -x \u4ee3\u8868 x x \u7684\u8d1f\u6570\uff0c\u8ba1\u7b97\u673a\u4e2d\u8d1f\u6570\u4f7f\u7528\u5bf9\u5e94\u7684\u6b63\u6570\u7684\u8865\u7801\u6765\u8868\u793a\u3002 \u4f8b\u5982 : x =88_{(10)}=1011000_{(2)} x =88_{(10)}=1011000_{(2)} \uff1b -x = -88_{(10)} = (0100111_{(2)} + 1_{(2)}) =101000_{(2)} -x = -88_{(10)} = (0100111_{(2)} + 1_{(2)}) =101000_{(2)} \uff1b x\\ \\& \\ (-x) = 1000_{(2)} = 8_{(10)} x\\ \\& \\ (-x) = 1000_{(2)} = 8_{(10)} \u3002 \u795e\u5947\u5427\uff0c\u6211\u4e5f\u89c9\u5f97\u795e\u5947\uff01 \u90a3\u4e48\u5bf9\u4e8e \u5355\u70b9\u4fee\u6539 \u5c31\u66f4\u8f7b\u677e\u4e86\uff1a 1 2 3 4 5 6 7 void change ( int x , int k ) { while ( x <= n ) //\u4e0d\u80fd\u8d8a\u754c { c [ x ] = c [ x ] + k ; x = x + lowbit ( x ); } } \u6bcf\u6b21\u53ea\u8981\u5728\u4ed6\u7684\u4e0a\u7ea7\u90a3\u91cc\u66f4\u65b0\u5c31\u884c\uff0c\u81ea\u5df1\u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u4e86\u3002 1 2 3 4 5 6 7 8 9 int getsum ( int x ) // a[1]\u2026\u2026a[x]\u7684\u548c { int ans = 0 ; while ( x >= 1 ) { ans = ans + c [ x ]; x = x - lowbit ( x ); } return ans ; } \u533a\u95f4\u548c \u4e5f\u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u4ee3\u7801\u5341\u5206\u6e05\u771f\u3002 \u4f8b\u9898 \u00b6 \u4f20\u9001\u95e8 \u4f20\u9001\u95e8 2","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"ds/bit/#_1","text":"\u6811\u72b6\u6570\u7ec4\u548c\u4e0b\u9762\u7684\u7ebf\u6bb5\u6811\u53ef\u662f\u4eb2\u5144\u5f1f\u4e86\uff0c\u4f46\u4ed6\u4fe9\u6bd5\u7adf\u8fd8\u6709\u4e00\u4e9b\u533a\u522b\uff1a \u6811\u72b6\u6570\u7ec4\u80fd\u6709\u7684\u64cd\u4f5c\uff0c\u7ebf\u6bb5\u6811\u4e00\u5b9a\u6709\uff1b \u7ebf\u6bb5\u6811\u6709\u7684\u64cd\u4f5c\uff0c\u6811\u72b6\u6570\u7ec4\u4e0d\u4e00\u5b9a\u6709\u3002 \u8fd9\u4e48\u770b\u6765\u9009\u62e9\u7ebf\u6bb5\u6811\u4e0d\u5c31 \u300c\u5f97\u5929\u4e0b\u4e86\u300d \uff1f \u4e8b\u5b9e\u4e0a\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u4ee3\u7801\u8981\u6bd4\u7ebf\u6bb5\u6811\u77ed\u5f97\u591a\uff0c\u601d\u7ef4\u4e5f\u66f4\u6e05\u6670\uff0c\u5728\u89e3\u51b3\u4e00\u4e9b\u5355\u70b9\u4fee\u6539\u7684\u95ee\u9898\u65f6\uff0c\u6811\u72b6\u6570\u7ec4\u662f\u4e0d\u4e8c\u4e4b\u9009\u3002","title":"\u7b80\u4ecb"},{"location":"ds/bit/#_2","text":"\u5982\u679c\u8981\u5177\u4f53\u4e86\u89e3\u6811\u72b6\u6570\u7ec4\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8bf7\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a \u6700\u4e0b\u9762\u7684\u516b\u4e2a\u65b9\u5757\u5c31\u4ee3\u8868\u5b58\u5165 a a \u4e2d\u7684\u516b\u4e2a\u6570\uff0c\u73b0\u5728\u90fd\u662f\u5341\u8fdb\u5236\u3002 \u4ed6\u4eec\u4e0a\u9762\u7684\u53c2\u5dee\u4e0d\u9f50\u7684\u5269\u4e0b\u7684\u65b9\u5757\u5c31\u4ee3\u8868 a a \u7684\u4e0a\u7ea7\u2014\u2014 c c \u6570\u7ec4\u3002 \u5f88\u663e\u7136\u770b\u51fa\uff1a c[2] c[2] \u7ba1\u7406\u7684\u662f a[1] a[1] & a[2] a[2] \uff1b c[4] c[4] \u7ba1\u7406\u7684\u662f a[1] a[1] & a[2] a[2] & a[3] a[3] & a[4] a[4] \uff1b c[6] c[6] \u7ba1\u7406\u7684\u662f a[5] a[5] & a[6] a[6] \uff1b c[8] c[8] \u5219\u7ba1\u7406\u5168\u90e8 8 8 \u4e2a\u6570\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4f60\u8981\u7b97\u533a\u95f4\u548c\u7684\u8bdd\uff0c\u6bd4\u5982\u8bf4\u8981\u7b97 a[51] a[51] ~ a[91] a[91] \u7684\u533a\u95f4\u548c\uff0c\u66b4\u529b\u7b97\u5f53\u7136\u53ef\u4ee5\uff0c\u90a3\u4e0a\u767e\u4e07\u7684\u6570\uff0c\u90a3\u5c31 RE \u55bd\u3002 \u90a3\u4e48\u8fd9\u79cd\u7c7b\u4f3c\u4e8e\u8df3\u4e00\u8df3\u7684\u8fde\u7eed\u8df3\u5230\u4e2d\u5fc3\u70b9\u800c\u5206\u503c\u4e0d\u65ad\u53d8\u5927\u7684\u539f\u7406\u662f\u4e00\u6837\u7684\uff08\u500d\u589e\uff09\u3002 \u4f60\u4ece 91 91 \u5f00\u59cb\u5f80\u524d\u8df3\uff0c\u53d1\u73b0 c[n] c[n] \uff08 n n \u6211\u4e5f\u4e0d\u786e\u5b9a\u662f\u591a\u5c11\uff0c\u7b97\u8d77\u6765\u592a\u9ebb\u70e6\uff0c\u5c31\u610f\u601d\u4e00\u4e0b\uff09\u53ea\u7ba1 a[91] a[91] \u8fd9\u4e2a\u70b9\uff0c\u90a3\u4e48\u4f60\u5c31\u4f1a\u627e a[90] a[90] \uff0c\u53d1\u73b0 c[n - 1] c[n - 1] \u7ba1\u7684\u662f a[90] a[90] & a[89] a[89] \uff1b\u90a3\u4e48\u4f60\u5c31\u4f1a\u76f4\u63a5\u8df3\u5230 a[88] a[88] \uff0c c[n - 2] c[n - 2] \u5c31\u4f1a\u7ba1 a[81] a[81] ~ a[88] a[88] \u8fd9\u4e9b\u6570\uff0c\u4e0b\u6b21\u67e5\u8be2\u4ece a[80] a[80] \u5f80\u524d\u627e\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"\u539f\u7406"},{"location":"ds/bit/#_3","text":"\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u4f60\u662f\u600e\u4e48\u77e5\u9053 c c \u7ba1\u7684 a a \u7684\u4e2a\u6570\u5206\u522b\u662f\u591a\u5c11\u5462\uff1f\u4f60\u90a3\u4e2a 1 1 \u4e2a\uff0c 2 2 \u4e2a\uff0c 8 8 \u4e2a\u2026\u2026 \u662f\u600e\u4e48\u6765\u7684\u5462\uff1f \u8fd9\u65f6\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u51fd\u6570\u2014\u2014 lowbit \uff1a 1 2 3 4 int lowbit ( int x ) { //\u7b97\u51fax\u4e8c\u8fdb\u5236\u7684\u4ece\u53f3\u5f80\u5de6\u51fa\u73b0\u7b2c\u4e00\u4e2a1\u4ee5\u53ca\u8fd9\u4e2a1\u4e4b\u540e\u7684\u90a3\u4e9b0\u7ec4\u6210\u6570\u7684\u4e8c\u8fdb\u5236\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u7684\u6570 return x & - x ; } lowbit \u7684\u610f\u601d\u6ce8\u91ca\u8bf4\u660e\u4e86\uff0c\u54b1\u4eec\u5c31\u7528\u8fd9\u4e2a\u8bf4\u6cd5\u6765\u8bc1\u660e\u4e00\u4e0b a[88] a[88] \uff1a 88_{(10)}=1011000_{(2)} 88_{(10)}=1011000_{(2)} \u53d1\u73b0\u7b2c\u4e00\u4e2a 1 1 \u4ee5\u53ca\u4ed6\u540e\u9762\u7684 0 0 \u7ec4\u6210\u7684\u4e8c\u8fdb\u5236\u662f 1000 1000 1000_{(2)} = 8_{(10)} 1000_{(2)} = 8_{(10)} 1000 1000 \u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u662f 8 8 \uff0c\u6240\u4ee5 c c \u4e00\u5171\u7ba1\u7406 8 8 \u4e2a a a \u3002 \u8fd9\u5c31\u662f lowbit \u7684\u7528\u5904\uff0c\u4ec5\u6b64\u800c\u5df2\uff08\u4f46\u4e5f\u76f8\u5f53\u6709\u7528\uff09\u3002 \u4f60\u53ef\u80fd\u53c8\u95ee\u4e86\uff1ax & -x \u662f\u4ec0\u4e48\u610f\u601d\u554a\uff1f -x -x \u4ee3\u8868 x x \u7684\u8d1f\u6570\uff0c\u8ba1\u7b97\u673a\u4e2d\u8d1f\u6570\u4f7f\u7528\u5bf9\u5e94\u7684\u6b63\u6570\u7684\u8865\u7801\u6765\u8868\u793a\u3002 \u4f8b\u5982 : x =88_{(10)}=1011000_{(2)} x =88_{(10)}=1011000_{(2)} \uff1b -x = -88_{(10)} = (0100111_{(2)} + 1_{(2)}) =101000_{(2)} -x = -88_{(10)} = (0100111_{(2)} + 1_{(2)}) =101000_{(2)} \uff1b x\\ \\& \\ (-x) = 1000_{(2)} = 8_{(10)} x\\ \\& \\ (-x) = 1000_{(2)} = 8_{(10)} \u3002 \u795e\u5947\u5427\uff0c\u6211\u4e5f\u89c9\u5f97\u795e\u5947\uff01 \u90a3\u4e48\u5bf9\u4e8e \u5355\u70b9\u4fee\u6539 \u5c31\u66f4\u8f7b\u677e\u4e86\uff1a 1 2 3 4 5 6 7 void change ( int x , int k ) { while ( x <= n ) //\u4e0d\u80fd\u8d8a\u754c { c [ x ] = c [ x ] + k ; x = x + lowbit ( x ); } } \u6bcf\u6b21\u53ea\u8981\u5728\u4ed6\u7684\u4e0a\u7ea7\u90a3\u91cc\u66f4\u65b0\u5c31\u884c\uff0c\u81ea\u5df1\u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u4e86\u3002 1 2 3 4 5 6 7 8 9 int getsum ( int x ) // a[1]\u2026\u2026a[x]\u7684\u548c { int ans = 0 ; while ( x >= 1 ) { ans = ans + c [ x ]; x = x - lowbit ( x ); } return ans ; } \u533a\u95f4\u548c \u4e5f\u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u4ee3\u7801\u5341\u5206\u6e05\u771f\u3002","title":"\u7528\u6cd5\u53ca\u64cd\u4f5c"},{"location":"ds/bit/#_4","text":"\u4f20\u9001\u95e8 \u4f20\u9001\u95e8 2","title":"\u4f8b\u9898"},{"location":"ds/block-array/","text":"","title":"\u5757\u72b6\u6570\u7ec4"},{"location":"ds/block-list/","text":"\u5927\u6982\u5c31\u957f\u8fd9\u6837\u2026\u2026 \u4e0d\u96be\u53d1\u73b0\u5757\u72b6\u94fe\u8868\u5c31\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u6307\u5411\u4e00\u4e2a\u6570\u7ec4\u3002 \u6211\u4eec\u628a\u539f\u6765\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\u5206\u4e3a \\sqrt{n} \\sqrt{n} \u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u6570\u7ec4\u5927\u5c0f\u4e3a \\sqrt{n} \\sqrt{n} \u3002 \u6240\u4ee5\u6211\u4eec\u8fd9\u4e48\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u4ee3\u7801\u89c1\u4e0b\u3002 \u5176\u4e2d sqn \u8868\u793a sqrt(n) \u5373 \\sqrt{n} \\sqrt{n} \uff0c pb \u8868\u793a push_back \uff0c\u5373\u5728\u8fd9\u4e2a node \u4e2d\u52a0\u5165\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 struct node { node * nxt ; int size ; char d [( sqn << 1 ) + 5 ]; node () { size = 0 , nxt = NULL , memset ( d , 0 , sizeof ( d )); } void pb ( char c ) { d [ size ++ ] = c ; } }; \u5757\u72b6\u94fe\u8868\u5e94\u8be5\u81f3\u5c11\u652f\u6301\uff1a\u5206\u88c2\u3001\u63d2\u5165\u3001\u67e5\u627e\u3002 \u4ec0\u4e48\u662f\u5206\u88c2\uff1f\u5206\u88c2\u5c31\u662f\u5206\u88c2\u4e00\u4e2a node \uff0c\u53d8\u6210\u4e24\u4e2a\u5c0f\u7684 node \uff0c\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a node \u7684\u5927\u5c0f\u90fd\u63a5\u8fd1 \\sqrt{n} \\sqrt{n} \uff08\u5426\u5219\u53ef\u80fd\u9000\u5316\u6210\u666e\u901a\u6570\u7ec4\uff09\u3002\u5f53\u4e00\u4e2a node \u7684\u5927\u5c0f\u8d85\u8fc7 2\\times \\sqrt{n} 2\\times \\sqrt{n} \u65f6\u6267\u884c\u5206\u88c2\u64cd\u4f5c\u3002 \u5206\u88c2\u64cd\u4f5c\u600e\u4e48\u505a\u5462\uff1f\u5148\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u518d\u628a\u88ab\u5206\u88c2\u7684\u8282\u70b9\u7684\u540e \\sqrt{n} \\sqrt{n} \u4e2a\u503c copy \u5230\u65b0\u8282\u70b9\uff0c\u7136\u540e\u628a\u88ab\u5206\u88c2\u7684\u8282\u70b9\u7684\u540e \\sqrt{n} \\sqrt{n} \u4e2a\u503c\u5220\u6389\uff08 size-- \uff09\uff0c\u6700\u540e\u628a\u65b0\u8282\u70b9\u63d2\u5165\u5230\u88ab\u5206\u88c2\u8282\u70b9\u7684\u540e\u9762\u5373\u53ef\u3002 \u5757\u72b6\u94fe\u8868\u7684\u6240\u6709\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u90fd\u662f \\sqrt{n} \\sqrt{n} \u7684\u3002 \u8fd8\u6709\u4e00\u4e2a\u8981\u8bf4\u7684\u3002 \u968f\u7740\u5143\u7d20\u7684\u63d2\u5165\uff08\u6216\u5220\u9664\uff09\uff0c n n \u4f1a\u53d8\uff0c \\sqrt{n} \\sqrt{n} \u4e5f\u4f1a\u53d8\u3002\u8fd9\u6837\u5757\u7684\u5927\u5c0f\u5c31\u4f1a\u53d8\u5316\uff0c\u6211\u4eec\u96be\u9053\u8fd8\u8981\u6bcf\u6b21\u7ef4\u62a4\u5757\u7684\u5927\u5c0f\uff1f \u5176\u5b9e\u4e0d\u7136\uff0c\u628a \\sqrt{n} \\sqrt{n} \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5b9a\u503c\u5373\u53ef\u3002\u6bd4\u5982\u9898\u76ee\u7ed9\u7684\u8303\u56f4\u662f 10^6 10^6 \uff0c\u90a3\u4e48 \\sqrt{n} \\sqrt{n} \u5c31\u8bbe\u7f6e\u4e3a\u5927\u5c0f\u4e3a 10^3 10^3 \u7684\u5e38\u91cf\uff0c\u4e0d\u7528\u66f4\u6539\u5b83\u3002 1 list < vector < char > > orz_list ; \u4f8b\u9898 \u00b6 Big String POJ - 2887 \u9898\u89e3\uff1a \u5f88\u7b80\u5355\u7684\u6a21\u677f\u9898\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <cctype> #include <cstdio> #include <cstring> using namespace std ; static const int sqn = 1e3 ; struct node { node * nxt ; int size ; char d [( sqn << 1 ) + 5 ]; node () { size = 0 , nxt = NULL ; } void pb ( char c ) { d [ size ++ ] = c ; } } * head = NULL ; char inits [( int ) 1e6 + 5 ]; int llen , q ; void readch ( char & ch ) { do ch = getchar (); while ( ! isalpha ( ch )); } void check ( node * p ) { if ( p -> size >= ( sqn << 1 )) { node * q = new node ; for ( int i = sqn ; i < p -> size ; i ++ ) q -> pb ( p -> d [ i ]); p -> size = sqn , q -> nxt = p -> nxt , p -> nxt = q ; } } void insert ( char c , int pos ) { node * p = head ; int tot , cnt ; if ( pos > llen ++ ) { while ( p -> nxt != NULL ) p = p -> nxt ; p -> pb ( c ), check ( p ); return ; } for ( tot = head -> size ; p != NULL && tot < pos ; p = p -> nxt , tot += p -> size ) ; tot -= p -> size , cnt = pos - tot - 1 ; for ( int i = p -> size - 1 ; i >= cnt ; i -- ) p -> d [ i + 1 ] = p -> d [ i ]; p -> d [ cnt ] = c , p -> size ++ ; check ( p ); } char query ( int pos ) { node * p ; int tot , cnt ; for ( p = head , tot = head -> size ; p != NULL && tot < pos ; p = p -> nxt , tot += p -> size ) ; tot -= p -> size ; return p -> d [ pos - tot - 1 ]; } int main () { scanf ( \"%s %d\" , inits , & q ), llen = strlen ( inits ); node * p = new node ; head = p ; for ( int i = 0 ; i < llen ; i ++ ) { if ( i % sqn == 0 && i ) p -> nxt = new node , p = p -> nxt ; p -> pb ( inits [ i ]); } char a ; int k ; while ( q -- ) { readch ( a ); if ( a == 'Q' ) scanf ( \"%d\" , & k ), printf ( \"%c \\n \" , query ( k )); else readch ( a ), scanf ( \"%d\" , & k ), insert ( a , k ); } return 0 ; }","title":"\u5757\u72b6\u94fe\u8868"},{"location":"ds/block-list/#_1","text":"Big String POJ - 2887 \u9898\u89e3\uff1a \u5f88\u7b80\u5355\u7684\u6a21\u677f\u9898\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <cctype> #include <cstdio> #include <cstring> using namespace std ; static const int sqn = 1e3 ; struct node { node * nxt ; int size ; char d [( sqn << 1 ) + 5 ]; node () { size = 0 , nxt = NULL ; } void pb ( char c ) { d [ size ++ ] = c ; } } * head = NULL ; char inits [( int ) 1e6 + 5 ]; int llen , q ; void readch ( char & ch ) { do ch = getchar (); while ( ! isalpha ( ch )); } void check ( node * p ) { if ( p -> size >= ( sqn << 1 )) { node * q = new node ; for ( int i = sqn ; i < p -> size ; i ++ ) q -> pb ( p -> d [ i ]); p -> size = sqn , q -> nxt = p -> nxt , p -> nxt = q ; } } void insert ( char c , int pos ) { node * p = head ; int tot , cnt ; if ( pos > llen ++ ) { while ( p -> nxt != NULL ) p = p -> nxt ; p -> pb ( c ), check ( p ); return ; } for ( tot = head -> size ; p != NULL && tot < pos ; p = p -> nxt , tot += p -> size ) ; tot -= p -> size , cnt = pos - tot - 1 ; for ( int i = p -> size - 1 ; i >= cnt ; i -- ) p -> d [ i + 1 ] = p -> d [ i ]; p -> d [ cnt ] = c , p -> size ++ ; check ( p ); } char query ( int pos ) { node * p ; int tot , cnt ; for ( p = head , tot = head -> size ; p != NULL && tot < pos ; p = p -> nxt , tot += p -> size ) ; tot -= p -> size ; return p -> d [ pos - tot - 1 ]; } int main () { scanf ( \"%s %d\" , inits , & q ), llen = strlen ( inits ); node * p = new node ; head = p ; for ( int i = 0 ; i < llen ; i ++ ) { if ( i % sqn == 0 && i ) p -> nxt = new node , p = p -> nxt ; p -> pb ( inits [ i ]); } char a ; int k ; while ( q -- ) { readch ( a ); if ( a == 'Q' ) scanf ( \"%d\" , & k ), printf ( \"%c \\n \" , query ( k )); else readch ( a ), scanf ( \"%d\" , & k ), insert ( a , k ); } return 0 ; }","title":"\u4f8b\u9898"},{"location":"ds/dividing/","text":"\u5212\u5206\u6811\u662f\u4e00\u79cd\u6765\u89e3\u51b3\u533a\u95f4\u7b2c K K \u5927\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784, \u5176\u5e38\u6570\u3001\u7406\u89e3\u96be\u5ea6\u90fd\u8981\u6bd4\u4e3b\u5e2d\u6811\u4f4e\u5f88\u591a\u3002\u540c\u65f6, \u5212\u5206\u6811\u7d27\u8d34 \u201c\u7b2c K K \u5927\u201d\uff0c\u6240\u4ee5\u662f\u4e00\u79cd\u57fa\u4e8e\u6392\u5e8f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u5efa\u8bae\u5148\u5b66\u5b8c\u4e3b\u5e2d\u6811\u518d\u770b\u5212\u5206\u6811\u54e6 \u5efa\u6811 \u00b6 \u5212\u5206\u6811\u7684\u5efa\u6811\u6bd4\u8f83\u7b80\u5355, \u4f46\u662f\u76f8\u5bf9\u4e8e\u5176\u4ed6\u6811\u6765\u8bf4\u6bd4\u8f83\u590d\u6742\u3002 \u5982\u56fe, \u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u4e2a\u770b\u4f3c\u65e0\u5e8f\u7684\u6570\u7ec4\u3002\u5176\u5b9e, \u6bcf\u4e00\u4e2a\u88ab\u7ea2\u8272\u6807\u8bb0\u7684\u6570\u5b57\u90fd\u662f \u8981\u5206\u914d\u5230\u5de6\u513f\u5b50\u7684 \u3002\u800c\u5206\u914d\u7684\u89c4\u5219\u662f\u4ec0\u4e48? \u5c31\u662f\u4e0e \u8fd9\u4e00\u5c42\u7684\u4e2d\u4f4d\u6570 \u505a\u6bd4\u8f83, \\leq \\leq \u5de6\u8fb9, \u5426\u5219\u53f3\u8fb9\u3002\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e0b: \u5e76\u4e0d\u662f\u4e25\u683c\u7684 \\leq \\leq \u5de6\u8fb9, \u5426\u5219\u53f3\u8fb9 \u3002\u56e0\u4e3a\u4e2d\u4f4d\u6570\u53ef\u80fd\u6709\u76f8\u540c, \u800c\u4e14\u4e0e N N \u7684\u5947\u5076\u6709\u4e00\u5b9a\u5173\u7cfb\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4f1a\u6709\u4e00\u4e2a\u5de7\u5999\u7684\u8fd0\u7528, \u5927\u5bb6\u53ef\u4ee5\u53c2\u7167\u4ee3\u7801\u3002 \u6211\u4eec\u4e0d\u80af\u80fd\u6bcf\u4e00\u6b21\u90fd\u5bf9\u6bcf\u4e00\u5c42\u6392\u5e8f, \u8fd9\u6837\u5b50\u4e0d\u8bf4\u5e38\u6570, \u5c31\u7b97\u662f\u7406\u8bba\u590d\u6742\u5ea6\u4e5f\u8fc7\u4e0d\u53bb\u3002\u6211\u4eec\u60f3, \u627e\u4e2d\u4f4d\u6570, \u4e00\u6b21\u6392\u5e8f\u5c31\u591f\u4e86\u3002\u4e3a\u4ec0\u4e48? \u6bd4\u5982, \u6211\u4eec\u6c42 l,r l,r \u7684\u4e2d\u4f4d\u6570, \u5176\u5b9e\u5c31\u662f\u5728\u6392\u5b8c\u5e8f\u8fc7\u540e\u7684 num[mid] num[mid] \u3002 \u4e24\u4e2a\u5173\u952e\u6570\u7ec4: 1 2 tree[log(N),N] : \u4e5f\u5c31\u662f\u6811,\u8981\u5b58\u4e0b\u6240\u6709\u7684\u503c,\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002 toleft[log(N),n] : \u4e5f\u5c31\u662f\u6bcf\u4e00\u5c42 1~i \u8fdb\u5165\u5de6\u513f\u5b50\u7684\u6570\u91cf,\u8fd9\u91cc\u9700\u8981\u7406\u89e3\u4e00\u4e0b,\u8fd9\u662f\u4e00\u4e2a\u524d\u7f00\u548c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 procedure Build ( left , right , deep : longint ) ; // left,right \u662f\u5de6\u53f3\u533a\u95f4,deep\u662f\u7b2c\u51e0\u5c42 var i , mid , same , ls , rs , flag : longint ; // \u5176\u4e2d flag \u662f\u7528\u6765\u5e73\u8861\u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u91cf\u7684 begin if left = right then exit ; // \u5230\u5e95\u5c42\u4e86 mid := ( left + right ) >> 1 ; same := mid - left + 1 ; for i := left to right do if tree [ deep , i ] < num [ mid ] then dec ( same ) ; ls := left ; // \u5206\u914d\u5230\u5de6\u513f\u5b50\u7684\u7b2c\u4e00\u4e2a\u6307\u9488 rs := mid + 1 ; // \u5206\u914d\u5230\u53f3\u513f\u5b50\u7684\u7b2c\u4e00\u4e2a\u6307\u9488 for i := left to right do begin flag := 0 ; if ( tree [ deep , i ] < num [ mid ]) or (( tree [ deep , i ] = num [ mid ]) and ( same > 0 )) then // \u5206\u914d\u5230\u5de6\u8fb9\u7684\u6761\u4ef6 begin flag := 1 ; tree [ deep + 1 , ls ] := tree [ deep , i ] ; inc ( ls ) ; if tree [ deep , i ] = num [ mid ] then // \u5e73\u8861\u5de6\u53f3\u4e2a\u6570 dec ( same ) ; end else begin tree [ deep + 1 , rs ] := tree [ deep , i ] ; inc ( rs ) ; end ; toleft [ deep , i ] := toleft [ deep , i - 1 ] + flag ; end ; Build ( left , mid , deep + 1 ) ; // \u7ee7\u7eed Build ( mid + 1 , right , deep + 1 ) ; end ; \u67e5\u8be2 \u00b6 \u90a3\u6211\u4eec\u5148\u626f\u4e00\u4e0b\u4e3b\u5e2d\u6811\u7684\u5185\u5bb9\u3002\u5728\u7528\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u7b2c K K \u5c0f\u7684\u65f6\u5019, \u6211\u4eec\u4ee5 K K \u4e3a\u57fa\u51c6, \u5411\u5de6\u5c31\u5411\u5de6, \u5411\u53f3\u8981\u51cf\u53bb\u5411\u5de6\u7684\u503c, \u5728\u5212\u5206\u6811\u4e2d\u4e5f\u662f\u8fd9\u6837\u5b50\u7684\u3002 \u67e5\u8be2\u96be\u7406\u89e3\u7684, \u5728\u4e8e \u533a\u95f4\u7f29\u5c0f \u8fd9\u79cd\u4e1c\u897f\u3002\u4e0b\u56fe, \u6211\u67e5\u8be2\u7684\u662f 3 3 \u5230 7 7 , \u90a3\u4e48\u4e0b\u4e00\u5c42\u6211\u5c31\u53ea\u9700\u8981\u67e5\u8be2 2 2 \u5230 3 3 \u4e86\u3002\u5f53\u7136, \u6211\u4eec\u5b9a\u4e49 left,right left,right \u4e3a\u7f29\u5c0f\u540e\u7684\u533a\u95f4 (\u76ee\u6807\u533a\u95f4), l,r l,r \u8fd8\u662f\u6211\u6240\u5728\u8282\u70b9\u7684\u533a\u95f4\u3002\u90a3\u4e3a\u4ec0\u4e48\u8981\u6807\u51fa\u76ee\u6807\u533a\u95f4\u5462? \u56e0\u4e3a\u90a3\u662f \u5224\u5b9a\u7b54\u6848\u5728\u5de6\u8fb9, \u53f3\u8fb9\u7684\u57fa\u51c6 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function Query ( left , right , k , l , r , deep : longint ) : longint ; var mid , x , y , cnt , rx , ry : longint ; begin if left = right then // \u5199\u6210 l=r \u4e5f\u65e0\u59a8,\u56e0\u4e3a\u76ee\u6807\u533a\u95f4\u4e5f\u4e00\u5b9a\u6709\u7b54\u6848 exit ( tree [ deep , left ]) ; mid := ( l + r ) >> 1 ; x := toleft [ deep , left - 1 ] - toleft [ deep , l - 1 ] ; // l \u5230 left \u7684\u53bb\u5de6\u513f\u5b50\u7684\u4e2a\u6570 y := toleft [ deep , right ] - toleft [ deep , l - 1 ] ; // l \u5230 right \u7684\u53bb\u5de6\u513f\u5b50\u7684\u4e2a\u6570 ry := right - l - y ; rx := left - l - x ; // ry \u662f l \u5230 right \u53bb\u53f3\u513f\u5b50\u7684\u4e2a\u6570,rx \u5219\u662f l \u5230 lefr \u53bb\u53f3\u513f\u5b50\u7684\u4e2a\u6570 cnt := y - x ; // left \u5230 right \u5de6\u513f\u5b50\u7684\u4e2a\u6570 if cnt >= k then // \u4e3b\u5e2d\u6811\u5e38\u8bc6\u5566 Query := Query ( l + x , l + y - 1 , k , l , mid , deep + 1 ) // l+x \u5c31\u662f\u7f29\u5c0f\u5de6\u8fb9\u754c,l+y-1 \u5c31\u662f\u7f29\u5c0f\u53f3\u533a\u95f4\u3002\u5bf9\u4e8e\u4e0a\u56fe\u6765\u8bf4,\u5c31\u662f\u628a 1 \u548c 2 \u653e\u5f03\u4e86\u3002 else Query := Query ( mid + rx + 1 , mid + ry + 1 , k - cnt , mid + 1 , r , deep + 1 ) ; // \u540c\u6837\u662f\u7f29\u5c0f\u533a\u95f4,\u53ea\u4e0d\u8fc7\u53d8\u6210\u4e86\u53f3\u8fb9\u800c\u5df2\u3002\u6ce8\u610f\u8981 k-cnt\u3002 end ; \u7406\u8bba\u590d\u6742\u5ea6\u548c\u4eb2\u6d4b\u7ed3\u679c \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 : \u4e00\u6b21\u67e5\u8be2\u53ea\u9700\u8981 O(\\log n) O(\\log n) , m m \u6b21\u8be2\u95ee, \u5c31\u662f O(m\\log n) O(m\\log n) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 : \u53ea\u9700\u8981\u5b58\u50a8 O(n\\log n) O(n\\log n) \u4e2a\u6570\u5b57\u3002 \u4eb2\u6d4b\u7ed3\u679c: \u4e3b\u5e2d\u6811 : 1482 \\text{ms} 1482 \\text{ms} \u3001\u5212\u5206\u6811 : 889 \\text{ms} 889 \\text{ms} \u3002 (\u975e\u9012\u5f52, \u5e38\u6570\u6bd4\u8f83\u5c0f) \u540e\u8bb0 \u00b6 \u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u53bb\u5199\u975e\u9012\u5f52\u7248\u54e6\u3002\u53c2\u8003\u535a\u6587 : \u4f20\u9001\u95e8 \u3002","title":"\u5212\u5206\u6811"},{"location":"ds/dividing/#_1","text":"\u5212\u5206\u6811\u7684\u5efa\u6811\u6bd4\u8f83\u7b80\u5355, \u4f46\u662f\u76f8\u5bf9\u4e8e\u5176\u4ed6\u6811\u6765\u8bf4\u6bd4\u8f83\u590d\u6742\u3002 \u5982\u56fe, \u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u4e2a\u770b\u4f3c\u65e0\u5e8f\u7684\u6570\u7ec4\u3002\u5176\u5b9e, \u6bcf\u4e00\u4e2a\u88ab\u7ea2\u8272\u6807\u8bb0\u7684\u6570\u5b57\u90fd\u662f \u8981\u5206\u914d\u5230\u5de6\u513f\u5b50\u7684 \u3002\u800c\u5206\u914d\u7684\u89c4\u5219\u662f\u4ec0\u4e48? \u5c31\u662f\u4e0e \u8fd9\u4e00\u5c42\u7684\u4e2d\u4f4d\u6570 \u505a\u6bd4\u8f83, \\leq \\leq \u5de6\u8fb9, \u5426\u5219\u53f3\u8fb9\u3002\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e0b: \u5e76\u4e0d\u662f\u4e25\u683c\u7684 \\leq \\leq \u5de6\u8fb9, \u5426\u5219\u53f3\u8fb9 \u3002\u56e0\u4e3a\u4e2d\u4f4d\u6570\u53ef\u80fd\u6709\u76f8\u540c, \u800c\u4e14\u4e0e N N \u7684\u5947\u5076\u6709\u4e00\u5b9a\u5173\u7cfb\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4f1a\u6709\u4e00\u4e2a\u5de7\u5999\u7684\u8fd0\u7528, \u5927\u5bb6\u53ef\u4ee5\u53c2\u7167\u4ee3\u7801\u3002 \u6211\u4eec\u4e0d\u80af\u80fd\u6bcf\u4e00\u6b21\u90fd\u5bf9\u6bcf\u4e00\u5c42\u6392\u5e8f, \u8fd9\u6837\u5b50\u4e0d\u8bf4\u5e38\u6570, \u5c31\u7b97\u662f\u7406\u8bba\u590d\u6742\u5ea6\u4e5f\u8fc7\u4e0d\u53bb\u3002\u6211\u4eec\u60f3, \u627e\u4e2d\u4f4d\u6570, \u4e00\u6b21\u6392\u5e8f\u5c31\u591f\u4e86\u3002\u4e3a\u4ec0\u4e48? \u6bd4\u5982, \u6211\u4eec\u6c42 l,r l,r \u7684\u4e2d\u4f4d\u6570, \u5176\u5b9e\u5c31\u662f\u5728\u6392\u5b8c\u5e8f\u8fc7\u540e\u7684 num[mid] num[mid] \u3002 \u4e24\u4e2a\u5173\u952e\u6570\u7ec4: 1 2 tree[log(N),N] : \u4e5f\u5c31\u662f\u6811,\u8981\u5b58\u4e0b\u6240\u6709\u7684\u503c,\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002 toleft[log(N),n] : \u4e5f\u5c31\u662f\u6bcf\u4e00\u5c42 1~i \u8fdb\u5165\u5de6\u513f\u5b50\u7684\u6570\u91cf,\u8fd9\u91cc\u9700\u8981\u7406\u89e3\u4e00\u4e0b,\u8fd9\u662f\u4e00\u4e2a\u524d\u7f00\u548c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 procedure Build ( left , right , deep : longint ) ; // left,right \u662f\u5de6\u53f3\u533a\u95f4,deep\u662f\u7b2c\u51e0\u5c42 var i , mid , same , ls , rs , flag : longint ; // \u5176\u4e2d flag \u662f\u7528\u6765\u5e73\u8861\u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u91cf\u7684 begin if left = right then exit ; // \u5230\u5e95\u5c42\u4e86 mid := ( left + right ) >> 1 ; same := mid - left + 1 ; for i := left to right do if tree [ deep , i ] < num [ mid ] then dec ( same ) ; ls := left ; // \u5206\u914d\u5230\u5de6\u513f\u5b50\u7684\u7b2c\u4e00\u4e2a\u6307\u9488 rs := mid + 1 ; // \u5206\u914d\u5230\u53f3\u513f\u5b50\u7684\u7b2c\u4e00\u4e2a\u6307\u9488 for i := left to right do begin flag := 0 ; if ( tree [ deep , i ] < num [ mid ]) or (( tree [ deep , i ] = num [ mid ]) and ( same > 0 )) then // \u5206\u914d\u5230\u5de6\u8fb9\u7684\u6761\u4ef6 begin flag := 1 ; tree [ deep + 1 , ls ] := tree [ deep , i ] ; inc ( ls ) ; if tree [ deep , i ] = num [ mid ] then // \u5e73\u8861\u5de6\u53f3\u4e2a\u6570 dec ( same ) ; end else begin tree [ deep + 1 , rs ] := tree [ deep , i ] ; inc ( rs ) ; end ; toleft [ deep , i ] := toleft [ deep , i - 1 ] + flag ; end ; Build ( left , mid , deep + 1 ) ; // \u7ee7\u7eed Build ( mid + 1 , right , deep + 1 ) ; end ;","title":"\u5efa\u6811"},{"location":"ds/dividing/#_2","text":"\u90a3\u6211\u4eec\u5148\u626f\u4e00\u4e0b\u4e3b\u5e2d\u6811\u7684\u5185\u5bb9\u3002\u5728\u7528\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u7b2c K K \u5c0f\u7684\u65f6\u5019, \u6211\u4eec\u4ee5 K K \u4e3a\u57fa\u51c6, \u5411\u5de6\u5c31\u5411\u5de6, \u5411\u53f3\u8981\u51cf\u53bb\u5411\u5de6\u7684\u503c, \u5728\u5212\u5206\u6811\u4e2d\u4e5f\u662f\u8fd9\u6837\u5b50\u7684\u3002 \u67e5\u8be2\u96be\u7406\u89e3\u7684, \u5728\u4e8e \u533a\u95f4\u7f29\u5c0f \u8fd9\u79cd\u4e1c\u897f\u3002\u4e0b\u56fe, \u6211\u67e5\u8be2\u7684\u662f 3 3 \u5230 7 7 , \u90a3\u4e48\u4e0b\u4e00\u5c42\u6211\u5c31\u53ea\u9700\u8981\u67e5\u8be2 2 2 \u5230 3 3 \u4e86\u3002\u5f53\u7136, \u6211\u4eec\u5b9a\u4e49 left,right left,right \u4e3a\u7f29\u5c0f\u540e\u7684\u533a\u95f4 (\u76ee\u6807\u533a\u95f4), l,r l,r \u8fd8\u662f\u6211\u6240\u5728\u8282\u70b9\u7684\u533a\u95f4\u3002\u90a3\u4e3a\u4ec0\u4e48\u8981\u6807\u51fa\u76ee\u6807\u533a\u95f4\u5462? \u56e0\u4e3a\u90a3\u662f \u5224\u5b9a\u7b54\u6848\u5728\u5de6\u8fb9, \u53f3\u8fb9\u7684\u57fa\u51c6 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function Query ( left , right , k , l , r , deep : longint ) : longint ; var mid , x , y , cnt , rx , ry : longint ; begin if left = right then // \u5199\u6210 l=r \u4e5f\u65e0\u59a8,\u56e0\u4e3a\u76ee\u6807\u533a\u95f4\u4e5f\u4e00\u5b9a\u6709\u7b54\u6848 exit ( tree [ deep , left ]) ; mid := ( l + r ) >> 1 ; x := toleft [ deep , left - 1 ] - toleft [ deep , l - 1 ] ; // l \u5230 left \u7684\u53bb\u5de6\u513f\u5b50\u7684\u4e2a\u6570 y := toleft [ deep , right ] - toleft [ deep , l - 1 ] ; // l \u5230 right \u7684\u53bb\u5de6\u513f\u5b50\u7684\u4e2a\u6570 ry := right - l - y ; rx := left - l - x ; // ry \u662f l \u5230 right \u53bb\u53f3\u513f\u5b50\u7684\u4e2a\u6570,rx \u5219\u662f l \u5230 lefr \u53bb\u53f3\u513f\u5b50\u7684\u4e2a\u6570 cnt := y - x ; // left \u5230 right \u5de6\u513f\u5b50\u7684\u4e2a\u6570 if cnt >= k then // \u4e3b\u5e2d\u6811\u5e38\u8bc6\u5566 Query := Query ( l + x , l + y - 1 , k , l , mid , deep + 1 ) // l+x \u5c31\u662f\u7f29\u5c0f\u5de6\u8fb9\u754c,l+y-1 \u5c31\u662f\u7f29\u5c0f\u53f3\u533a\u95f4\u3002\u5bf9\u4e8e\u4e0a\u56fe\u6765\u8bf4,\u5c31\u662f\u628a 1 \u548c 2 \u653e\u5f03\u4e86\u3002 else Query := Query ( mid + rx + 1 , mid + ry + 1 , k - cnt , mid + 1 , r , deep + 1 ) ; // \u540c\u6837\u662f\u7f29\u5c0f\u533a\u95f4,\u53ea\u4e0d\u8fc7\u53d8\u6210\u4e86\u53f3\u8fb9\u800c\u5df2\u3002\u6ce8\u610f\u8981 k-cnt\u3002 end ;","title":"\u67e5\u8be2"},{"location":"ds/dividing/#_3","text":"\u65f6\u95f4\u590d\u6742\u5ea6 : \u4e00\u6b21\u67e5\u8be2\u53ea\u9700\u8981 O(\\log n) O(\\log n) , m m \u6b21\u8be2\u95ee, \u5c31\u662f O(m\\log n) O(m\\log n) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 : \u53ea\u9700\u8981\u5b58\u50a8 O(n\\log n) O(n\\log n) \u4e2a\u6570\u5b57\u3002 \u4eb2\u6d4b\u7ed3\u679c: \u4e3b\u5e2d\u6811 : 1482 \\text{ms} 1482 \\text{ms} \u3001\u5212\u5206\u6811 : 889 \\text{ms} 889 \\text{ms} \u3002 (\u975e\u9012\u5f52, \u5e38\u6570\u6bd4\u8f83\u5c0f)","title":"\u7406\u8bba\u590d\u6742\u5ea6\u548c\u4eb2\u6d4b\u7ed3\u679c"},{"location":"ds/dividing/#_4","text":"\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u53bb\u5199\u975e\u9012\u5f52\u7248\u54e6\u3002\u53c2\u8003\u535a\u6587 : \u4f20\u9001\u95e8 \u3002","title":"\u540e\u8bb0"},{"location":"ds/dsu/","text":"\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u5f62\u7684\u6570\u636e\u7ed3\u6784\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u4ea4\u96c6\u7684 \u5408\u5e76 \u53ca \u67e5\u8be2 \u95ee\u9898\u3002 \u5b83\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a \u67e5\u627e \uff08Find\uff09\uff1a\u786e\u5b9a\u67d0\u4e2a\u5143\u7d20\u5904\u4e8e\u54ea\u4e2a\u5b50\u96c6\uff1b \u5408\u5e76\uff08Union\uff09\uff1a\u5c06\u4e24\u4e2a\u5b50\u96c6\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002 \u521d\u59cb\u5316 \u00b6 1 2 3 4 5 6 void makeSet ( int size ) { for ( int i = 0 ; i < size ; i ++ ) { fa [ i ] = i ; // i\u5c31\u5728\u5b83\u672c\u8eab\u7684\u96c6\u5408\u91cc } return ; } \u67e5\u627e \u00b6 \u4e3e\u4e2a\u4f8b\u5b50 \u51e0\u4e2a\u5bb6\u65cf\u8fdb\u884c\u5bb4\u4f1a\uff0c\u4f46\u662f\u5bb6\u65cf\u666e\u904d\u957f\u5bff\uff0c\u6240\u4ee5\u4eba\u6570\u4f17\u591a\u3002\u7531\u4e8e\u957f\u65f6\u95f4\u7684\u5206\u79bb\u4ee5\u53ca\u5e74\u9f84\u7684\u589e\u957f\uff0c\u8fd9\u4e9b\u4eba\u9010\u6e10\u5fd8\u6389\u4e86\u81ea\u5df1\u7684\u4eb2\u4eba\uff0c\u53ea\u8bb0\u5f97\u81ea\u5df1\u7684\u7238\u7238\u662f\u8c01\u4e86\uff0c\u800c\u6700\u957f\u8005\uff08\u79f0\u4e3a\u300c\u7956\u5148\u300d\uff09\u7684\u7236\u4eb2\u5df2\u7ecf\u53bb\u4e16\uff0c\u4ed6\u53ea\u77e5\u9053\u81ea\u5df1\u662f\u7956\u5148\u3002\u4e3a\u4e86\u786e\u5b9a\u81ea\u5df1\u662f\u54ea\u4e2a\u5bb6\u65cf\uff0c\u4ed6\u4eec\u60f3\u51fa\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u53ea\u8981\u95ee\u81ea\u5df1\u7684\u7238\u7238\u662f\u4e0d\u662f\u7956\u5148\uff0c\u4e00\u5c42\u4e00\u5c42\u7684\u5411\u4e0a\u95ee\uff0c\u76f4\u5230\u95ee\u5230\u7956\u5148\u3002\u5982\u679c\u8981\u5224\u65ad\u4e24\u4eba\u662f\u5426\u5728\u540c\u4e00\u5bb6\u65cf\uff0c\u53ea\u8981\u770b\u4e24\u4eba\u7684\u7956\u5148\u662f\u4e0d\u662f\u540c\u4e00\u4eba\u5c31\u53ef\u4ee5\u4e86\u3002 \u5728\u8fd9\u6837\u7684\u601d\u60f3\u4e0b\uff0c\u5e76\u67e5\u96c6\u7684\u67e5\u627e\u7b97\u6cd5\u8bde\u751f\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4ee3\u7801\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\u3002 1 2 3 4 5 6 7 8 int fa [ MAXN ]; //\u8bb0\u5f55\u67d0\u4e2a\u4eba\u7684\u7238\u7238\u662f\u8c01\uff0c\u7279\u522b\u89c4\u5b9a\uff0c\u7956\u5148\u7684\u7238\u7238\u662f\u4ed6\u81ea\u5df1 int find ( int x ) //\u5bfb\u627ex\u7684\u7956\u5148 { if ( fa [ x ] == x ) //\u5982\u679cx\u662f\u7956\u5148\u5219\u8fd4\u56de return x ; else return find ( fa [ x ]); //\u5982\u679c\u4e0d\u662f\u5219x\u7684\u7238\u7238\u95eex\u7684\u7237\u7237 } \u663e\u7136\u8fd9\u6837\u6700\u7ec8\u4f1a\u8fd4\u56de x x \u7684\u7956\u5148\u3002 \u8def\u5f84\u538b\u7f29 \u00b6 \u8fd9\u6837\u7684\u786e\u53ef\u4ee5\u8fbe\u6210\u76ee\u7684\uff0c\u4f46\u662f\u663e\u7136\u6548\u7387\u5b9e\u5728\u592a\u4f4e\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u592a\u591a\u6ca1\u7528\u7684\u4fe1\u606f\uff0c\u6211\u5173\u5fc3\u7684\u662f\u6211\u7956\u5148\u662f\u8c01\uff0c\u6211\u7238\u7238\u662f\u8c01\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u8fd9\u6837\u4e00\u5c42\u4e00\u5c42\u627e\u592a\u6d6a\u8d39\u65f6\u95f4\uff0c\u4e0d\u5982\u6211\u76f4\u63a5\u5f53\u7956\u5148\u7684\u513f\u5b50\uff0c\u95ee\u4e00\u6b21\u5c31\u53ef\u4ee5\u51fa\u7ed3\u679c\u4e86\u3002\u751a\u81f3\u7956\u5148\u662f\u8c01\u90fd\u65e0\u6240\u8c13\uff0c\u53ea\u8981\u8fd9\u4e2a\u4eba\u53ef\u4ee5\u4ee3\u8868\u6211\u4eec\u5bb6\u65cf\u5c31\u80fd\u5f97\u5230\u60f3\u8981\u7684\u6548\u679c\u3002 \u628a\u5728\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u76f4\u63a5\u8fde\u63a5\u5230\u6839\u4e0a \uff0c\u8fd9\u5c31\u662f\u8def\u5f84\u538b\u7f29\u3002 \u4e8e\u662f\u7528\u4ee3\u7801\u5b9e\u73b0\u5b83\u3002 1 2 3 4 5 int find ( int x ) { if ( x != fa [ x ]) // x\u4e0d\u662f\u81ea\u8eab\u7684\u7236\u4eb2\uff0c\u5373x\u4e0d\u662f\u8be5\u96c6\u5408\u7684\u4ee3\u8868 fa [ x ] = find ( fa [ x ]); //\u67e5\u627ex\u7684\u7956\u5148\u76f4\u5230\u627e\u5230\u4ee3\u8868,\u4e8e\u662f\u987a\u624b\u8def\u5f84\u538b\u7f29 return fa [ x ]; } \u5408\u5e76 \u00b6 \u5bb4\u4f1a\u4e0a\uff0c\u4e00\u4e2a\u5bb6\u65cf\u7684\u7956\u5148\u7a81\u7136\u5bf9\u53e6\u4e00\u4e2a\u5bb6\u65cf\u8bf4: \u6211\u4eec\u4e24\u4e2a\u5bb6\u65cf\u4ea4\u60c5\u8fd9\u4e48\u597d\uff0c\u4e0d\u5982\u5408\u6210\u4e00\u5bb6\u597d\u4e86\u3002\u53e6\u4e00\u4e2a\u5bb6\u65cf\u4e5f\u6b23\u7136\u63a5\u53d7\u4e86\u3002 \u6211\u4eec\u4e4b\u524d\u8bf4\u8fc7\uff0c\u5e76\u4e0d\u5728\u610f\u7956\u5148\u7a76\u7adf\u662f\u8c01\uff0c\u6240\u4ee5\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u7956\u5148\u53d8\u6210\u53e6\u4e00\u4e2a\u7956\u5148\u7684\u513f\u5b50\u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 void unionSet ( int x , int y ) // x\u4e0ey\u6240\u5728\u5bb6\u65cf\u5408\u5e76 { x = find ( x ); y = find ( y ); if ( x == y ) //\u539f\u672c\u5c31\u5728\u4e00\u4e2a\u5bb6\u65cf\u91cc\u5c31\u4e0d\u7ba1\u4e86 return ; fa [ x ] = y ; //\u628ax\u7684\u7956\u5148\u53d8\u6210y\u7684\u7956\u5148\u7684\u513f\u5b50 } \u542f\u53d1\u5f0f\u5408\u5e76\uff08\u6309\u79e9\u5408\u5e76\uff09 \u00b6 \u4e00\u4e2a\u7956\u5148\u7a81\u7136\u6296\u4e86\u4e2a\u673a\u7075\uff1a\u300c\u4f60\u4eec\u5bb6\u65cf\u4eba\u6bd4\u8f83\u5c11\uff0c\u642c\u5bb6\u5230\u6211\u4eec\u5bb6\u65cf\u91cc\u6bd4\u8f83\u65b9\u4fbf\uff0c\u6211\u4eec\u8981\u662f\u642c\u8fc7\u53bb\u7684\u8bdd\u592a\u8d39\u4e8b\u4e86\u3002\u300d \u542f\u53d1\u5f0f\u5408\u5e76\u662f\u5c06\u6df1\u5ea6\u5c0f\u7684\u96c6\u5408\u5408\u5e76\u5230\u6df1\u5ea6\u5927\u7684\u96c6\u5408\uff08\u4e5f\u79f0\u4e3a \u6309\u79e9\u5408\u5e76 \uff09\uff0c\u4f46\u662f\u7b14\u8005\u8ba4\u4e3a\u8def\u5f84\u538b\u7f29\u4e4b\u540e\u5b83\u5c31\u5931\u53bb\u610f\u4e49\u4e86\uff0c\u6216\u8005\u4e0d\u5982\u6309\u7167\u8282\u70b9\u6570\u91cf\u5408\u5e76\uff0c\u8fd9\u6837\u8fd8\u53ef\u4ee5\u51cf\u5c11\u4e0b\u6b21\u8def\u5f84\u538b\u7f29\u7684\u5de5\u4f5c\u91cf\u3002\uff08\u53cd\u6b63\u542f\u53d1\u5f0f\u5408\u5e76\u7528\u5f97\u5f88\u5c11\uff0c\u8def\u5f84\u538b\u7f29\u5df2\u7ecf\u591f\u5feb\u4e86\u3002\uff09 1 2 3 4 5 6 7 8 9 int size [ N ]; //\u8bb0\u5f55\u5b50\u6811\u7684\u5927\u5c0f void unionSet ( int x , int y ) { int xx = find ( x ), yy = find ( y ); if ( xx == yy ) return ; if ( size [ xx ] > size [ yy ]) //\u4fdd\u8bc1\u5c0f\u7684\u5408\u5230\u5927\u7684\u91cc swap ( xx , yy ); fa [ xx ] = yy ; size [ yy ] += size [ xx ]; } \u65f6\u95f4\u590d\u6742\u5ea6\u53ca\u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u540c\u65f6\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u4e4b\u540e\uff0c\u5e76\u67e5\u96c6\u7684\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u65f6\u95f4\u4ec5\u4e3a O(\\alpha(n)) O(\\alpha(n)) \uff0c\u5176\u4e2d \\alpha \\alpha \u4e3a \u963f\u514b\u66fc\u51fd\u6570 \u7684\u53cd\u51fd\u6570\uff0c\u5176\u589e\u957f\u6781\u5176\u7f13\u6162\uff0c\u4e5f\u5c31\u662f\u8bf4\u5176\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e38\u6570\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u663e\u7136\u4e3a O(n) O(n) \u3002 \u7ecf\u5178\u9898\u76ee \u00b6 [NOI2015] \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 [JSOI2008] \u661f\u7403\u5927\u6218 [NOI2001] \u98df\u7269\u94fe [NOI2002] \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4 \u5176\u4ed6\u5e94\u7528 \u00b6 \u6700\u5c0f\u751f\u6210\u6811 Kruskal \u662f\u57fa\u4e8e\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5\u3002","title":"\u5e76\u67e5\u96c6"},{"location":"ds/dsu/#_1","text":"1 2 3 4 5 6 void makeSet ( int size ) { for ( int i = 0 ; i < size ; i ++ ) { fa [ i ] = i ; // i\u5c31\u5728\u5b83\u672c\u8eab\u7684\u96c6\u5408\u91cc } return ; }","title":"\u521d\u59cb\u5316"},{"location":"ds/dsu/#_2","text":"\u4e3e\u4e2a\u4f8b\u5b50 \u51e0\u4e2a\u5bb6\u65cf\u8fdb\u884c\u5bb4\u4f1a\uff0c\u4f46\u662f\u5bb6\u65cf\u666e\u904d\u957f\u5bff\uff0c\u6240\u4ee5\u4eba\u6570\u4f17\u591a\u3002\u7531\u4e8e\u957f\u65f6\u95f4\u7684\u5206\u79bb\u4ee5\u53ca\u5e74\u9f84\u7684\u589e\u957f\uff0c\u8fd9\u4e9b\u4eba\u9010\u6e10\u5fd8\u6389\u4e86\u81ea\u5df1\u7684\u4eb2\u4eba\uff0c\u53ea\u8bb0\u5f97\u81ea\u5df1\u7684\u7238\u7238\u662f\u8c01\u4e86\uff0c\u800c\u6700\u957f\u8005\uff08\u79f0\u4e3a\u300c\u7956\u5148\u300d\uff09\u7684\u7236\u4eb2\u5df2\u7ecf\u53bb\u4e16\uff0c\u4ed6\u53ea\u77e5\u9053\u81ea\u5df1\u662f\u7956\u5148\u3002\u4e3a\u4e86\u786e\u5b9a\u81ea\u5df1\u662f\u54ea\u4e2a\u5bb6\u65cf\uff0c\u4ed6\u4eec\u60f3\u51fa\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u53ea\u8981\u95ee\u81ea\u5df1\u7684\u7238\u7238\u662f\u4e0d\u662f\u7956\u5148\uff0c\u4e00\u5c42\u4e00\u5c42\u7684\u5411\u4e0a\u95ee\uff0c\u76f4\u5230\u95ee\u5230\u7956\u5148\u3002\u5982\u679c\u8981\u5224\u65ad\u4e24\u4eba\u662f\u5426\u5728\u540c\u4e00\u5bb6\u65cf\uff0c\u53ea\u8981\u770b\u4e24\u4eba\u7684\u7956\u5148\u662f\u4e0d\u662f\u540c\u4e00\u4eba\u5c31\u53ef\u4ee5\u4e86\u3002 \u5728\u8fd9\u6837\u7684\u601d\u60f3\u4e0b\uff0c\u5e76\u67e5\u96c6\u7684\u67e5\u627e\u7b97\u6cd5\u8bde\u751f\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4ee3\u7801\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\u3002 1 2 3 4 5 6 7 8 int fa [ MAXN ]; //\u8bb0\u5f55\u67d0\u4e2a\u4eba\u7684\u7238\u7238\u662f\u8c01\uff0c\u7279\u522b\u89c4\u5b9a\uff0c\u7956\u5148\u7684\u7238\u7238\u662f\u4ed6\u81ea\u5df1 int find ( int x ) //\u5bfb\u627ex\u7684\u7956\u5148 { if ( fa [ x ] == x ) //\u5982\u679cx\u662f\u7956\u5148\u5219\u8fd4\u56de return x ; else return find ( fa [ x ]); //\u5982\u679c\u4e0d\u662f\u5219x\u7684\u7238\u7238\u95eex\u7684\u7237\u7237 } \u663e\u7136\u8fd9\u6837\u6700\u7ec8\u4f1a\u8fd4\u56de x x \u7684\u7956\u5148\u3002","title":"\u67e5\u627e"},{"location":"ds/dsu/#_3","text":"\u8fd9\u6837\u7684\u786e\u53ef\u4ee5\u8fbe\u6210\u76ee\u7684\uff0c\u4f46\u662f\u663e\u7136\u6548\u7387\u5b9e\u5728\u592a\u4f4e\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u592a\u591a\u6ca1\u7528\u7684\u4fe1\u606f\uff0c\u6211\u5173\u5fc3\u7684\u662f\u6211\u7956\u5148\u662f\u8c01\uff0c\u6211\u7238\u7238\u662f\u8c01\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u8fd9\u6837\u4e00\u5c42\u4e00\u5c42\u627e\u592a\u6d6a\u8d39\u65f6\u95f4\uff0c\u4e0d\u5982\u6211\u76f4\u63a5\u5f53\u7956\u5148\u7684\u513f\u5b50\uff0c\u95ee\u4e00\u6b21\u5c31\u53ef\u4ee5\u51fa\u7ed3\u679c\u4e86\u3002\u751a\u81f3\u7956\u5148\u662f\u8c01\u90fd\u65e0\u6240\u8c13\uff0c\u53ea\u8981\u8fd9\u4e2a\u4eba\u53ef\u4ee5\u4ee3\u8868\u6211\u4eec\u5bb6\u65cf\u5c31\u80fd\u5f97\u5230\u60f3\u8981\u7684\u6548\u679c\u3002 \u628a\u5728\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u76f4\u63a5\u8fde\u63a5\u5230\u6839\u4e0a \uff0c\u8fd9\u5c31\u662f\u8def\u5f84\u538b\u7f29\u3002 \u4e8e\u662f\u7528\u4ee3\u7801\u5b9e\u73b0\u5b83\u3002 1 2 3 4 5 int find ( int x ) { if ( x != fa [ x ]) // x\u4e0d\u662f\u81ea\u8eab\u7684\u7236\u4eb2\uff0c\u5373x\u4e0d\u662f\u8be5\u96c6\u5408\u7684\u4ee3\u8868 fa [ x ] = find ( fa [ x ]); //\u67e5\u627ex\u7684\u7956\u5148\u76f4\u5230\u627e\u5230\u4ee3\u8868,\u4e8e\u662f\u987a\u624b\u8def\u5f84\u538b\u7f29 return fa [ x ]; }","title":"\u8def\u5f84\u538b\u7f29"},{"location":"ds/dsu/#_4","text":"\u5bb4\u4f1a\u4e0a\uff0c\u4e00\u4e2a\u5bb6\u65cf\u7684\u7956\u5148\u7a81\u7136\u5bf9\u53e6\u4e00\u4e2a\u5bb6\u65cf\u8bf4: \u6211\u4eec\u4e24\u4e2a\u5bb6\u65cf\u4ea4\u60c5\u8fd9\u4e48\u597d\uff0c\u4e0d\u5982\u5408\u6210\u4e00\u5bb6\u597d\u4e86\u3002\u53e6\u4e00\u4e2a\u5bb6\u65cf\u4e5f\u6b23\u7136\u63a5\u53d7\u4e86\u3002 \u6211\u4eec\u4e4b\u524d\u8bf4\u8fc7\uff0c\u5e76\u4e0d\u5728\u610f\u7956\u5148\u7a76\u7adf\u662f\u8c01\uff0c\u6240\u4ee5\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u7956\u5148\u53d8\u6210\u53e6\u4e00\u4e2a\u7956\u5148\u7684\u513f\u5b50\u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 void unionSet ( int x , int y ) // x\u4e0ey\u6240\u5728\u5bb6\u65cf\u5408\u5e76 { x = find ( x ); y = find ( y ); if ( x == y ) //\u539f\u672c\u5c31\u5728\u4e00\u4e2a\u5bb6\u65cf\u91cc\u5c31\u4e0d\u7ba1\u4e86 return ; fa [ x ] = y ; //\u628ax\u7684\u7956\u5148\u53d8\u6210y\u7684\u7956\u5148\u7684\u513f\u5b50 }","title":"\u5408\u5e76"},{"location":"ds/dsu/#_5","text":"\u4e00\u4e2a\u7956\u5148\u7a81\u7136\u6296\u4e86\u4e2a\u673a\u7075\uff1a\u300c\u4f60\u4eec\u5bb6\u65cf\u4eba\u6bd4\u8f83\u5c11\uff0c\u642c\u5bb6\u5230\u6211\u4eec\u5bb6\u65cf\u91cc\u6bd4\u8f83\u65b9\u4fbf\uff0c\u6211\u4eec\u8981\u662f\u642c\u8fc7\u53bb\u7684\u8bdd\u592a\u8d39\u4e8b\u4e86\u3002\u300d \u542f\u53d1\u5f0f\u5408\u5e76\u662f\u5c06\u6df1\u5ea6\u5c0f\u7684\u96c6\u5408\u5408\u5e76\u5230\u6df1\u5ea6\u5927\u7684\u96c6\u5408\uff08\u4e5f\u79f0\u4e3a \u6309\u79e9\u5408\u5e76 \uff09\uff0c\u4f46\u662f\u7b14\u8005\u8ba4\u4e3a\u8def\u5f84\u538b\u7f29\u4e4b\u540e\u5b83\u5c31\u5931\u53bb\u610f\u4e49\u4e86\uff0c\u6216\u8005\u4e0d\u5982\u6309\u7167\u8282\u70b9\u6570\u91cf\u5408\u5e76\uff0c\u8fd9\u6837\u8fd8\u53ef\u4ee5\u51cf\u5c11\u4e0b\u6b21\u8def\u5f84\u538b\u7f29\u7684\u5de5\u4f5c\u91cf\u3002\uff08\u53cd\u6b63\u542f\u53d1\u5f0f\u5408\u5e76\u7528\u5f97\u5f88\u5c11\uff0c\u8def\u5f84\u538b\u7f29\u5df2\u7ecf\u591f\u5feb\u4e86\u3002\uff09 1 2 3 4 5 6 7 8 9 int size [ N ]; //\u8bb0\u5f55\u5b50\u6811\u7684\u5927\u5c0f void unionSet ( int x , int y ) { int xx = find ( x ), yy = find ( y ); if ( xx == yy ) return ; if ( size [ xx ] > size [ yy ]) //\u4fdd\u8bc1\u5c0f\u7684\u5408\u5230\u5927\u7684\u91cc swap ( xx , yy ); fa [ xx ] = yy ; size [ yy ] += size [ xx ]; }","title":"\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u6309\u79e9\u5408\u5e76\uff09"},{"location":"ds/dsu/#_6","text":"","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u53ca\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"ds/dsu/#_7","text":"\u540c\u65f6\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u4e4b\u540e\uff0c\u5e76\u67e5\u96c6\u7684\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u65f6\u95f4\u4ec5\u4e3a O(\\alpha(n)) O(\\alpha(n)) \uff0c\u5176\u4e2d \\alpha \\alpha \u4e3a \u963f\u514b\u66fc\u51fd\u6570 \u7684\u53cd\u51fd\u6570\uff0c\u5176\u589e\u957f\u6781\u5176\u7f13\u6162\uff0c\u4e5f\u5c31\u662f\u8bf4\u5176\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e38\u6570\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"ds/dsu/#_8","text":"\u663e\u7136\u4e3a O(n) O(n) \u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"ds/dsu/#_9","text":"[NOI2015] \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 [JSOI2008] \u661f\u7403\u5927\u6218 [NOI2001] \u98df\u7269\u94fe [NOI2002] \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4","title":"\u7ecf\u5178\u9898\u76ee"},{"location":"ds/dsu/#_10","text":"\u6700\u5c0f\u751f\u6210\u6811 Kruskal \u662f\u57fa\u4e8e\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5\u3002","title":"\u5176\u4ed6\u5e94\u7528"},{"location":"ds/ett/","text":"","title":"Euler Tour Tree"},{"location":"ds/hash/","text":"\u54c8\u5e0c\u8868 \u00b6 \u54c8\u5e0c\u8868\u662f\u53c8\u79f0\u6563\u5217\u8868\uff0c\u4e00\u79cd\u4ee5 \"key-value\" \u5f62\u5f0f\u5b58\u50a8\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\u3002\u6240\u8c13\u4ee5 \"key-value\" \u5f62\u5f0f\u5b58\u50a8\u6570\u636e\uff0c\u662f\u6307\u4efb\u610f\u7684 key \u90fd\u552f\u4e00\u5bf9\u5e94\u5230\u5185\u5b58\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u53ea\u9700\u8981\u8f93\u5165\u67e5\u627e\u7684\u503c key\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u5730\u627e\u5230\u5176\u5bf9\u5e94\u7684 value\u3002\u53ef\u4ee5\u628a\u54c8\u5e0c\u8868\u7406\u89e3\u4e3a\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u7ec4\uff0c\u8fd9\u79cd\u6570\u7ec4\u7684\u4e0b\u6807\u53ef\u4ee5\u662f\u5f88\u5927\u7684\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u5b57\u7b26\u4e32\u751a\u81f3\u7ed3\u6784\u4f53\u3002 \u54c8\u5e0c\u51fd\u6570 \u00b6 \u8981\u8ba9 key \u5bf9\u5e94\u5230\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5c31\u8981\u4e3a key \u8ba1\u7b97\u7d22\u5f15\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u8fd9\u4e2a\u6570\u636e\u5e94\u8be5\u653e\u5230\u54ea\u91cc\u3002\u8fd9\u4e2a\u6839\u636e key \u8ba1\u7b97\u7d22\u5f15\u7684\u51fd\u6570\u5c31\u53eb\u505a\u54c8\u5e0c\u51fd\u6570\uff0c\u4e5f\u79f0\u6563\u5217\u51fd\u6570\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982 key \u662f\u4e00\u4e2a\u4eba\u7684\u8eab\u4efd\u8bc1\u53f7\u7801\uff0c\u54c8\u5e0c\u51fd\u6570\u5c31\u53ef\u4ee5\u662f\u53f7\u7801\u7684\u540e\u56db\u4f4d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u53f7\u7801\u7684\u524d\u56db\u4f4d\u3002\u751f\u6d3b\u4e2d\u5e38\u7528\u7684 \u201c\u624b\u673a\u5c3e\u53f7\u201d \u4e5f\u662f\u4e00\u79cd\u54c8\u5e0c\u51fd\u6570\u3002\u5728\u5b9e\u9645\u7684\u5e94\u7528\u4e2d\uff0ckey \u53ef\u80fd\u662f\u66f4\u590d\u6742\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\u3001\u7ed3\u6784\u4f53\u7b49\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u8bbe\u8ba1\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\u3002\u54c8\u5e0c\u51fd\u6570\u5e94\u5f53\u6613\u4e8e\u8ba1\u7b97\uff0c\u5e76\u4e14\u5c3d\u91cf\u4f7f\u8ba1\u7b97\u51fa\u6765\u7684\u7d22\u5f15\u5747\u5300\u5206\u5e03\u3002 \u5728 OI \u4e2d\uff0c\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u5e94\u8be5\u662f key \u4e3a\u6574\u6570\u7684\u60c5\u51b5\u3002\u5f53 key \u7684\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a key \u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u4f46\u5f53 key \u7684\u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u6bd4\u5982\u4ee5 10^9 \u8303\u56f4\u5185\u7684\u6574\u6570\u4f5c\u4e3a key \u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u7528\u5230\u54c8\u5e0c\u8868\u3002\u4e00\u822c\u628a key \u6a21\u4e00\u4e2a\u8f83\u5927\u7684\u8d28\u6570\u4f5c\u4e3a\u7d22\u5f15\uff0c\u4e5f\u5c31\u662f\u53d6 f(x)=x \\mod M f(x)=x \\mod M \u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\u3002\u53e6\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c1\u7684\u60c5\u51b5\u662f key \u4e3a\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\uff0c\u5728 OI \u4e2d\uff0c\u4e00\u822c\u4e0d\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u4f5c\u4e3a key\uff0c\u800c\u662f\u5148\u7b97\u51fa\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\uff0c\u518d\u628a\u5176\u54c8\u5e0c\u503c\u4f5c\u4e3a key \u63d2\u5165\u5230\u54c8\u5e0c\u8868\u91cc\u3002 \u80fd\u4e3a key \u8ba1\u7b97\u7d22\u5f15\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e2a value \u5e94\u8be5\u653e\u5728\u54ea\u91cc\u4e86\u3002\u5047\u8bbe\u6211\u4eec\u7528\u6570\u7ec4 a \u5b58\u653e\u6570\u636e\uff0c\u54c8\u5e0c\u51fd\u6570\u662f f\uff0c\u90a3\u952e\u503c\u5bf9 (key,value) \u5c31\u5e94\u8be5\u653e\u5728 a[f(key)] \u4e0a\u3002\u4e0d\u8bba key \u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u8303\u56f4\u6709\u591a\u5927\uff0cf(key) \u90fd\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\u3002 \u51b2\u7a81 \u00b6 \u5982\u679c\u5bf9\u4e8e\u4efb\u610f\u7684 key\uff0c\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u51fa\u6765\u7684\u7d22\u5f15\u90fd\u4e0d\u76f8\u540c\uff0c\u90a3\u53ea\u7528\u6839\u636e\u7d22\u5f15\u628a (key,value) \u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5c31\u884c\u4e86\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5e38\u5e38\u4f1a\u51fa\u73b0\u4e24\u4e2a\u4e0d\u540c\u7684 key\uff0c\u4ed6\u4eec\u7528\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u51fa\u6765\u7684\u7d22\u5f15\u662f\u76f8\u540c\u7684\u3002\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e9b\u65b9\u6cd5\u6765\u5904\u7406\u51b2\u7a81\u3002\u5728 OI \u4e2d\uff0c\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u62c9\u94fe\u6cd5\u3002 \u62c9\u94fe\u6cd5 \u00b6 \u62c9\u94fe\u6cd5\u662f\u5728\u6bcf\u4e2a\u5b58\u653e\u6570\u636e\u7684\u5730\u65b9\u5f00\u4e00\u4e2a\u94fe\u8868\uff0c\u5982\u679c\u6709\u591a\u4e2a key \u7d22\u5f15\u5230\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u53ea\u7528\u628a\u4ed6\u4eec\u90fd\u653e\u5230\u90a3\u4e2a\u4f4d\u7f6e\u7684\u94fe\u8868\u91cc\u5c31\u884c\u4e86\u3002\u67e5\u8be2\u7684\u65f6\u5019\u9700\u8981\u628a\u5bf9\u5e94\u4f4d\u7f6e\u7684\u94fe\u8868\u6574\u4e2a\u626b\u4e00\u904d\uff0c\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u6bd4\u8f83\u5176 key \u4e0e\u67e5\u8be2\u7684 key \u662f\u5426\u4e00\u81f4\u3002\u5982\u679c\u7d22\u5f15\u7684\u8303\u56f4\u662f 1~M \uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a N \uff0c\u90a3\u4e48\u4e00\u6b21\u63d2\u5165 / \u67e5\u8be2\u9700\u8981\u8fdb\u884c\u671f\u671b O(\\frac{N}{M}) O(\\frac{N}{M}) \u6b21\u6bd4\u8f83\u3002 \u5b9e\u73b0 \u00b6 \u62c9\u94fe\u6cd5 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const int SIZE = 1000000 ; const int M = 999997 ; struct HashTable { struct Node { int next , value , key ; } data [ SIZE ]; int head [ M ], size ; int f ( int key ) { return key % M ; } int get ( int key ) { for ( int p = head [ f ( key )]; p ; p = data [ p ]. next ) if ( data [ p ]. key == key ) return data [ p ]. value ; return - 1 ; } int modify ( int key , int value ) { for ( int p = head [ f ( key )]; p ; p = data [ p ]. next ) if ( data [ p ]. key == key ) return data [ p ]. value = value ; } int add ( int key , int value ) { if ( get ( key ) != - 1 ) return - 1 ; data [ ++ size ] = ( Node ){ head [ f ( key )], value , key }; head [ f ( key )] = size ; return value ; } }; \u4f8b\u9898 \u00b6 [JLOI2011] \u4e0d\u91cd\u590d\u6570\u5b57","title":"\u54c8\u5e0c\u8868"},{"location":"ds/hash/#_1","text":"\u54c8\u5e0c\u8868\u662f\u53c8\u79f0\u6563\u5217\u8868\uff0c\u4e00\u79cd\u4ee5 \"key-value\" \u5f62\u5f0f\u5b58\u50a8\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\u3002\u6240\u8c13\u4ee5 \"key-value\" \u5f62\u5f0f\u5b58\u50a8\u6570\u636e\uff0c\u662f\u6307\u4efb\u610f\u7684 key \u90fd\u552f\u4e00\u5bf9\u5e94\u5230\u5185\u5b58\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u53ea\u9700\u8981\u8f93\u5165\u67e5\u627e\u7684\u503c key\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u5730\u627e\u5230\u5176\u5bf9\u5e94\u7684 value\u3002\u53ef\u4ee5\u628a\u54c8\u5e0c\u8868\u7406\u89e3\u4e3a\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u7ec4\uff0c\u8fd9\u79cd\u6570\u7ec4\u7684\u4e0b\u6807\u53ef\u4ee5\u662f\u5f88\u5927\u7684\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u5b57\u7b26\u4e32\u751a\u81f3\u7ed3\u6784\u4f53\u3002","title":"\u54c8\u5e0c\u8868"},{"location":"ds/hash/#_2","text":"\u8981\u8ba9 key \u5bf9\u5e94\u5230\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5c31\u8981\u4e3a key \u8ba1\u7b97\u7d22\u5f15\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u8fd9\u4e2a\u6570\u636e\u5e94\u8be5\u653e\u5230\u54ea\u91cc\u3002\u8fd9\u4e2a\u6839\u636e key \u8ba1\u7b97\u7d22\u5f15\u7684\u51fd\u6570\u5c31\u53eb\u505a\u54c8\u5e0c\u51fd\u6570\uff0c\u4e5f\u79f0\u6563\u5217\u51fd\u6570\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982 key \u662f\u4e00\u4e2a\u4eba\u7684\u8eab\u4efd\u8bc1\u53f7\u7801\uff0c\u54c8\u5e0c\u51fd\u6570\u5c31\u53ef\u4ee5\u662f\u53f7\u7801\u7684\u540e\u56db\u4f4d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u53f7\u7801\u7684\u524d\u56db\u4f4d\u3002\u751f\u6d3b\u4e2d\u5e38\u7528\u7684 \u201c\u624b\u673a\u5c3e\u53f7\u201d \u4e5f\u662f\u4e00\u79cd\u54c8\u5e0c\u51fd\u6570\u3002\u5728\u5b9e\u9645\u7684\u5e94\u7528\u4e2d\uff0ckey \u53ef\u80fd\u662f\u66f4\u590d\u6742\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\u3001\u7ed3\u6784\u4f53\u7b49\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u8bbe\u8ba1\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\u3002\u54c8\u5e0c\u51fd\u6570\u5e94\u5f53\u6613\u4e8e\u8ba1\u7b97\uff0c\u5e76\u4e14\u5c3d\u91cf\u4f7f\u8ba1\u7b97\u51fa\u6765\u7684\u7d22\u5f15\u5747\u5300\u5206\u5e03\u3002 \u5728 OI \u4e2d\uff0c\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u5e94\u8be5\u662f key \u4e3a\u6574\u6570\u7684\u60c5\u51b5\u3002\u5f53 key \u7684\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a key \u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u4f46\u5f53 key \u7684\u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u6bd4\u5982\u4ee5 10^9 \u8303\u56f4\u5185\u7684\u6574\u6570\u4f5c\u4e3a key \u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u7528\u5230\u54c8\u5e0c\u8868\u3002\u4e00\u822c\u628a key \u6a21\u4e00\u4e2a\u8f83\u5927\u7684\u8d28\u6570\u4f5c\u4e3a\u7d22\u5f15\uff0c\u4e5f\u5c31\u662f\u53d6 f(x)=x \\mod M f(x)=x \\mod M \u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\u3002\u53e6\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c1\u7684\u60c5\u51b5\u662f key \u4e3a\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\uff0c\u5728 OI \u4e2d\uff0c\u4e00\u822c\u4e0d\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u4f5c\u4e3a key\uff0c\u800c\u662f\u5148\u7b97\u51fa\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\uff0c\u518d\u628a\u5176\u54c8\u5e0c\u503c\u4f5c\u4e3a key \u63d2\u5165\u5230\u54c8\u5e0c\u8868\u91cc\u3002 \u80fd\u4e3a key \u8ba1\u7b97\u7d22\u5f15\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e2a value \u5e94\u8be5\u653e\u5728\u54ea\u91cc\u4e86\u3002\u5047\u8bbe\u6211\u4eec\u7528\u6570\u7ec4 a \u5b58\u653e\u6570\u636e\uff0c\u54c8\u5e0c\u51fd\u6570\u662f f\uff0c\u90a3\u952e\u503c\u5bf9 (key,value) \u5c31\u5e94\u8be5\u653e\u5728 a[f(key)] \u4e0a\u3002\u4e0d\u8bba key \u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u8303\u56f4\u6709\u591a\u5927\uff0cf(key) \u90fd\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\u3002","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"ds/hash/#_3","text":"\u5982\u679c\u5bf9\u4e8e\u4efb\u610f\u7684 key\uff0c\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u51fa\u6765\u7684\u7d22\u5f15\u90fd\u4e0d\u76f8\u540c\uff0c\u90a3\u53ea\u7528\u6839\u636e\u7d22\u5f15\u628a (key,value) \u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5c31\u884c\u4e86\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5e38\u5e38\u4f1a\u51fa\u73b0\u4e24\u4e2a\u4e0d\u540c\u7684 key\uff0c\u4ed6\u4eec\u7528\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u51fa\u6765\u7684\u7d22\u5f15\u662f\u76f8\u540c\u7684\u3002\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e9b\u65b9\u6cd5\u6765\u5904\u7406\u51b2\u7a81\u3002\u5728 OI \u4e2d\uff0c\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u62c9\u94fe\u6cd5\u3002","title":"\u51b2\u7a81"},{"location":"ds/hash/#_4","text":"\u62c9\u94fe\u6cd5\u662f\u5728\u6bcf\u4e2a\u5b58\u653e\u6570\u636e\u7684\u5730\u65b9\u5f00\u4e00\u4e2a\u94fe\u8868\uff0c\u5982\u679c\u6709\u591a\u4e2a key \u7d22\u5f15\u5230\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u53ea\u7528\u628a\u4ed6\u4eec\u90fd\u653e\u5230\u90a3\u4e2a\u4f4d\u7f6e\u7684\u94fe\u8868\u91cc\u5c31\u884c\u4e86\u3002\u67e5\u8be2\u7684\u65f6\u5019\u9700\u8981\u628a\u5bf9\u5e94\u4f4d\u7f6e\u7684\u94fe\u8868\u6574\u4e2a\u626b\u4e00\u904d\uff0c\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u6bd4\u8f83\u5176 key \u4e0e\u67e5\u8be2\u7684 key \u662f\u5426\u4e00\u81f4\u3002\u5982\u679c\u7d22\u5f15\u7684\u8303\u56f4\u662f 1~M \uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a N \uff0c\u90a3\u4e48\u4e00\u6b21\u63d2\u5165 / \u67e5\u8be2\u9700\u8981\u8fdb\u884c\u671f\u671b O(\\frac{N}{M}) O(\\frac{N}{M}) \u6b21\u6bd4\u8f83\u3002","title":"\u62c9\u94fe\u6cd5"},{"location":"ds/hash/#_5","text":"","title":"\u5b9e\u73b0"},{"location":"ds/hash/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const int SIZE = 1000000 ; const int M = 999997 ; struct HashTable { struct Node { int next , value , key ; } data [ SIZE ]; int head [ M ], size ; int f ( int key ) { return key % M ; } int get ( int key ) { for ( int p = head [ f ( key )]; p ; p = data [ p ]. next ) if ( data [ p ]. key == key ) return data [ p ]. value ; return - 1 ; } int modify ( int key , int value ) { for ( int p = head [ f ( key )]; p ; p = data [ p ]. next ) if ( data [ p ]. key == key ) return data [ p ]. value = value ; } int add ( int key , int value ) { if ( get ( key ) != - 1 ) return - 1 ; data [ ++ size ] = ( Node ){ head [ f ( key )], value , key }; head [ f ( key )] = size ; return value ; } };","title":"\u62c9\u94fe\u6cd5"},{"location":"ds/hash/#_7","text":"[JLOI2011] \u4e0d\u91cd\u590d\u6570\u5b57","title":"\u4f8b\u9898"},{"location":"ds/heap/","text":"\u5806 \u00b6 \u5806\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u7684\u96c6\u5408\uff08\u6216\u8005\uff0c\u4e00\u4e2a\u652f\u6301\u6bd4\u8f83\u7684\u5143\u7d20\u7684\u96c6\u5408\uff09\u3002 \u4e3b\u8981\u529f\u80fd\u6709\uff1ainsert, getmin, deletemin, decreasekey\u3002 \u6ce8\u610f\uff1a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u8fd9\u91cc\u8ba8\u8bba\u7684\u90fd\u662f\u7ef4\u62a4\u6700\u5c0f\u503c\u7684\u5806\uff0c\u4e5f\u53eb\u5c0f\u6839\u5806\uff0c\u4e0e\u4e4b\u76f8\u5bf9\u7684\u53eb\u505a\u5927\u6839\u5806\u3002 \u4e00\u4e9b\u529f\u80fd\u5f3a\u5927\u7684\u5806\u8fd8\u80fd\uff08\u9ad8\u6548\u5730\uff09\u652f\u6301 merge \u7b49\u64cd\u4f5c\u3002 \u4e00\u4e9b\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u5806\u8fd8\u652f\u6301\u53ef\u6301\u4e45\u5316\uff0c\u4e5f\u5c31\u662f\u5bf9\u4efb\u610f\u5386\u53f2\u7248\u672c\u8fdb\u884c\u67e5\u8be2\u6216\u8005\u64cd\u4f5c\uff0c\u4ea7\u751f\u65b0\u7684\u7248\u672c\u3002 \u5806\u7684\u5206\u7c7b \u00b6 \u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\uff0c\u8fd9\u4e9b\u5806\u90fd\u662f\u7528\u57fa\u4e8e\u6811\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u7684\u3002 \u5728 NOIP \u4e2d\uff0c\u6211\u4eec\u53ea\u8981\u6c42\u4e00\u4e2a\u80fd\u652f\u6301\u4e3b\u8981\u64cd\u4f5c\u7684\u5806\u5c31\u884c\uff0c\u4e5f\u5c31\u662f\u4e8c\u53c9\u5806\u3002 \u4e8c\u53c9\u5806 (binary heap) \u6700\u57fa\u7840\u7684\u5806\uff0c\u4e0d\u652f\u6301 merge \u548c\u53ef\u6301\u4e45\u5316\uff0c\u6240\u6709\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \u7684\u3002 \u4e8c\u9879\u5806 (binomial heap) \u652f\u6301 merge \u7684\u5806\uff0c\uff08\u4e5f\u80fd\u53ef\u6301\u4e45\u5316\uff09\uff0c\u6240\u6709\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \u3002 Fib \u5806 (Fibonacci heap) \u9664\u4e86\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\uff0c\u652f\u6301\u5168\u90e8\u529f\u80fd\uff0c\u800c\u4e14\u9664\u4e86 deletemin \u4ee5\u5916\u90fd\u662f\u5747\u644a O(1) O(1) \u7684\u3002 \u4e8c\u53c9\u5806 \u00b6 \u7ed3\u6784 \u00b6 \u4ece\u4e8c\u53c9\u5806\u7684\u7ed3\u6784\u8bf4\u8d77\uff0c\u5b83\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e2d\u5b58\u6709\u4e00\u4e2a\u5143\u7d20\uff08\u6216\u8005\u8bf4\uff0c\u6709\u4e2a\u6743\u503c\uff09\u3002 \u5806\u6027\u8d28\uff1a\u7236\u4eb2\u7684\u6743\u503c\u4e0d\u5927\u4e8e\u513f\u5b50\u7684\u6743\u503c \uff08\u5c0f\u6839\u5806\uff09\u3002 \u7531\u5806\u6027\u8d28\uff0c\u6811\u6839\u5b58\u7684\u662f\u6700\u5c0f\u503c \uff08getmin \u64cd\u4f5c\u5c31\u89e3\u51b3\u4e86\uff09\u3002 \u63d2\u5165\u64cd\u4f5c \u00b6 \u9996\u5148\uff0c\u8981\u4fdd\u8bc1\u63d2\u5165\u540e\u4e5f\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u6700\u4e0b\u4e00\u5c42\u6700\u53f3\u8fb9\u7684\u53f6\u5b50\u4e4b\u540e\u63d2\u5165\u3002 \u5982\u679c\u6700\u4e0b\u4e00\u5c42\u5df2\u6ee1\uff0c\u5c31\u65b0\u589e\u4e00\u5c42\u3002 \u63d2\u5165\u4e4b\u540e\u53ef\u80fd\u4f1a\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\uff1f \u5411\u4e0a\u8c03\u6574\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\u5927\u4e8e\u5b83\u7236\u4eb2\u7684\u6743\u503c\uff0c\u5c31\u4ea4\u6362\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u4e0d\u6ee1\u8db3\u6216\u8005\u5230\u6839\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u63d2\u5165\u4e4b\u540e\u5411\u4e0a\u8c03\u6574\u540e\uff0c\u6ca1\u6709\u5176\u4ed6\u7ed3\u70b9\u4f1a\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\u3002 \u5411\u4e0a\u8c03\u6574\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(\\log n) O(\\log n) \u7684\u3002 \u5220\u9664\u64cd\u4f5c \u00b6 \u5220\u9664\u6839\u7ed3\u70b9\u3002 \u5982\u679c\u76f4\u63a5\u5220\u9664\uff0c\u5219\u53d8\u6210\u4e86\u4e24\u4e2a\u5806\uff0c\u96be\u4ee5\u5904\u7406\u3002 \u6240\u4ee5\u4e0d\u59a8\u8003\u8651\u63d2\u5165\u64cd\u4f5c\u7684\u9006\u8fc7\u7a0b\uff0c\u8bbe\u6cd5\u5c06\u6839\u7ed3\u70b9\u79fb\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u5220\u6389\u3002 \u7136\u800c\u5b9e\u9645\u4e0a\u4e0d\u597d\u505a\uff0c\u6211\u4eec\u901a\u5e38\u91c7\u7528\u7684\u65b9\u6cd5\u662f\uff0c\u628a\u6839\u7ed3\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u76f4\u63a5\u4ea4\u6362\u3002 \u4e8e\u662f\u76f4\u63a5\u5220\u6389\uff08\u5728\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5904\u7684\uff09\u6839\u7ed3\u70b9\uff0c\u4f46\u662f\u65b0\u7684\u6839\u7ed3\u70b9\u53ef\u80fd\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\u2026\u2026 \u5411\u4e0b\u8c03\u6574\uff1a\u5728\u8be5\u7ed3\u70b9\u7684\u6240\u6709\u513f\u5b50\u4e2d\uff0c\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\uff0c\u4e0e\u8be5\u7ed3\u70b9\u4ea4\u6362\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u5e95\u5c42\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u5220\u9664\u5e76\u5411\u4e0b\u8c03\u6574\u540e\uff0c\u6ca1\u6709\u5176\u4ed6\u7ed3\u70b9\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(\\log n) O(\\log n) \u3002 \u51cf\u5c0f\u67d0\u4e2a\u70b9\u7684\u6743\u503c \u00b6 \u5f88\u663e\u7136\uff0c\u76f4\u63a5\u4fee\u6539\u540e\uff0c\u5411\u4e0a\u8c03\u6574\u4e00\u6b21\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log n) O(\\log n) \u3002 \u5b9e\u73b0 \u00b6 \u6211\u4eec\u53d1\u73b0\uff0c\u4e0a\u9762\u4ecb\u7ecd\u7684\u51e0\u79cd\u64cd\u4f5c\u4e3b\u8981\u4f9d\u8d56\u4e8e\u4e24\u4e2a\u6838\u5fc3\uff1a\u5411\u4e0a\u8c03\u6574\u548c\u5411\u4e0b\u8c03\u6574\u3002 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 up ( x ) { while ( x > 1 && h [ x ] > h [ x / 2 ]) { swap ( h [ x ], h [ x / 2 ]); x /= 2 ; } } down ( x ) { while ( x * 2 <= n ) { t = x * 2 ; if ( t + 1 <= n && h [ t + 1 ] < h [ t ]) t ++ ; if ( h [ t ] >= h [ x ]) break ; swap ( h [ x ], h [ t ]); x = t ; } } \u5efa\u5806 \u00b6 \u8003\u8651\u8fd9\u4e48\u4e00\u4e2a\u95ee\u9898\uff0c\u4ece\u4e00\u4e2a\u7a7a\u7684\u5806\u5f00\u59cb\uff0c\u63d2\u5165 n n \u4e2a\u5143\u7d20\uff0c\u4e0d\u5728\u4e4e\u987a\u5e8f\u3002 \u76f4\u63a5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u9700\u8981 O(n \\log n) O(n \\log n) \u7684\u65f6\u95f4\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff1f \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528 decreasekey\uff08\u5373\uff0c\u5411\u4e0a\u8c03\u6574\uff09 \u00b6 \u4ece\u6839\u5f00\u59cb\uff0c\u6309 BFS \u5e8f\u8fdb\u884c. 1 2 3 build_heap_1() { for (i = 1; i <= n; i++) up(i); } \u4e3a\u5565\u8fd9\u4e48\u505a\uff1a\u5bf9\u4e8e\u7b2c k k \u5c42\u7684\u7ed3\u70b9\uff0c\u5411\u4e0a\u8c03\u6574\u7684\u590d\u6742\u5ea6\u4e3a O(k) O(k) \u800c\u4e0d\u662f O(\\log n) O(\\log n) \u3002 \u603b\u590d\u6742\u5ea6\uff1a \\log 1 + \\log 2 + \\cdots + \\log n = \\Theta(n \\log n) \\log 1 + \\log 2 + \\cdots + \\log n = \\Theta(n \\log n) \u3002 \uff08\u5728\u300c\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u300d\u4e2d\u8bc1\u660e\u8fc7\uff09 \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528\u5411\u4e0b\u8c03\u6574 \u00b6 \u8fd9\u65f6\u6362\u4e00\u79cd\u601d\u8def\uff0c\u4ece\u53f6\u5b50\u5f00\u59cb\uff0c\u9010\u4e2a\u5411\u4e0b\u8c03\u6574 1 2 3 build_heap_2() { for (i = n; i >= 1; i--) down(i); } \u6362\u4e00\u79cd\u7406\u89e3\u65b9\u6cd5\uff0c\u6bcf\u6b21\u300c\u5408\u5e76\u300d\u4e24\u4e2a\u5df2\u7ecf\u8c03\u6574\u597d\u7684\u5806\uff0c\u8fd9\u8bf4\u660e\u4e86\u6b63\u786e\u6027\u3002 \u6ce8\u610f\u5230\u5411\u4e0b\u8c03\u6574\u7684\u590d\u6742\u5ea6\uff0c\u4e3a O(\\log n - k) O(\\log n - k) \u3002 \\begin{aligned} \u603b\u590d\u6742\u5ea6 & = n \\log n - \\log 1 - \\log 2 - \\cdots - \\log n \\\\\\\\ & \\leq n \\log n - 0 \\times 2^0 - 1 \\times 2^1 -\\cdots - (\\log n - 1) \\times \\frac{n}{2} \\\\\\\\ & = n \\log n - (n-1) - (n-2) - (n-4) - \\cdots - (n-\\frac{n}{2}) \\\\\\\\ & = n \\log n - n \\log n + 1 + 2 + 4 + \\cdots + \\frac{n}{2} \\\\\\\\ & = n - 1 \\\\\\\\ & = O(n) \\end{aligned} \\begin{aligned} \u603b\u590d\u6742\u5ea6 & = n \\log n - \\log 1 - \\log 2 - \\cdots - \\log n \\\\\\\\ & \\leq n \\log n - 0 \\times 2^0 - 1 \\times 2^1 -\\cdots - (\\log n - 1) \\times \\frac{n}{2} \\\\\\\\ & = n \\log n - (n-1) - (n-2) - (n-4) - \\cdots - (n-\\frac{n}{2}) \\\\\\\\ & = n \\log n - n \\log n + 1 + 2 + 4 + \\cdots + \\frac{n}{2} \\\\\\\\ & = n - 1 \\\\\\\\ & = O(n) \\end{aligned} \u4e4b\u6240\u4ee5\u80fd O(n) O(n) \u5efa\u5806\uff0c\u662f\u56e0\u4e3a\u5806\u6027\u8d28\u5f88\u5f31\uff0c\u4e8c\u53c9\u5806\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u3002 \u8981\u662f\u50cf\u6392\u5e8f\u90a3\u6837\u7684\u5f3a\u6761\u4ef6\u5c31\u96be\u8bf4\u4e86\u3002","title":"\u5806"},{"location":"ds/heap/#_1","text":"\u5806\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u7684\u96c6\u5408\uff08\u6216\u8005\uff0c\u4e00\u4e2a\u652f\u6301\u6bd4\u8f83\u7684\u5143\u7d20\u7684\u96c6\u5408\uff09\u3002 \u4e3b\u8981\u529f\u80fd\u6709\uff1ainsert, getmin, deletemin, decreasekey\u3002 \u6ce8\u610f\uff1a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u8fd9\u91cc\u8ba8\u8bba\u7684\u90fd\u662f\u7ef4\u62a4\u6700\u5c0f\u503c\u7684\u5806\uff0c\u4e5f\u53eb\u5c0f\u6839\u5806\uff0c\u4e0e\u4e4b\u76f8\u5bf9\u7684\u53eb\u505a\u5927\u6839\u5806\u3002 \u4e00\u4e9b\u529f\u80fd\u5f3a\u5927\u7684\u5806\u8fd8\u80fd\uff08\u9ad8\u6548\u5730\uff09\u652f\u6301 merge \u7b49\u64cd\u4f5c\u3002 \u4e00\u4e9b\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u5806\u8fd8\u652f\u6301\u53ef\u6301\u4e45\u5316\uff0c\u4e5f\u5c31\u662f\u5bf9\u4efb\u610f\u5386\u53f2\u7248\u672c\u8fdb\u884c\u67e5\u8be2\u6216\u8005\u64cd\u4f5c\uff0c\u4ea7\u751f\u65b0\u7684\u7248\u672c\u3002","title":"\u5806"},{"location":"ds/heap/#_2","text":"\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\uff0c\u8fd9\u4e9b\u5806\u90fd\u662f\u7528\u57fa\u4e8e\u6811\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u7684\u3002 \u5728 NOIP \u4e2d\uff0c\u6211\u4eec\u53ea\u8981\u6c42\u4e00\u4e2a\u80fd\u652f\u6301\u4e3b\u8981\u64cd\u4f5c\u7684\u5806\u5c31\u884c\uff0c\u4e5f\u5c31\u662f\u4e8c\u53c9\u5806\u3002 \u4e8c\u53c9\u5806 (binary heap) \u6700\u57fa\u7840\u7684\u5806\uff0c\u4e0d\u652f\u6301 merge \u548c\u53ef\u6301\u4e45\u5316\uff0c\u6240\u6709\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \u7684\u3002 \u4e8c\u9879\u5806 (binomial heap) \u652f\u6301 merge \u7684\u5806\uff0c\uff08\u4e5f\u80fd\u53ef\u6301\u4e45\u5316\uff09\uff0c\u6240\u6709\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \u3002 Fib \u5806 (Fibonacci heap) \u9664\u4e86\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\uff0c\u652f\u6301\u5168\u90e8\u529f\u80fd\uff0c\u800c\u4e14\u9664\u4e86 deletemin \u4ee5\u5916\u90fd\u662f\u5747\u644a O(1) O(1) \u7684\u3002","title":"\u5806\u7684\u5206\u7c7b"},{"location":"ds/heap/#_3","text":"","title":"\u4e8c\u53c9\u5806"},{"location":"ds/heap/#_4","text":"\u4ece\u4e8c\u53c9\u5806\u7684\u7ed3\u6784\u8bf4\u8d77\uff0c\u5b83\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e2d\u5b58\u6709\u4e00\u4e2a\u5143\u7d20\uff08\u6216\u8005\u8bf4\uff0c\u6709\u4e2a\u6743\u503c\uff09\u3002 \u5806\u6027\u8d28\uff1a\u7236\u4eb2\u7684\u6743\u503c\u4e0d\u5927\u4e8e\u513f\u5b50\u7684\u6743\u503c \uff08\u5c0f\u6839\u5806\uff09\u3002 \u7531\u5806\u6027\u8d28\uff0c\u6811\u6839\u5b58\u7684\u662f\u6700\u5c0f\u503c \uff08getmin \u64cd\u4f5c\u5c31\u89e3\u51b3\u4e86\uff09\u3002","title":"\u7ed3\u6784"},{"location":"ds/heap/#_5","text":"\u9996\u5148\uff0c\u8981\u4fdd\u8bc1\u63d2\u5165\u540e\u4e5f\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u6700\u4e0b\u4e00\u5c42\u6700\u53f3\u8fb9\u7684\u53f6\u5b50\u4e4b\u540e\u63d2\u5165\u3002 \u5982\u679c\u6700\u4e0b\u4e00\u5c42\u5df2\u6ee1\uff0c\u5c31\u65b0\u589e\u4e00\u5c42\u3002 \u63d2\u5165\u4e4b\u540e\u53ef\u80fd\u4f1a\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\uff1f \u5411\u4e0a\u8c03\u6574\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\u5927\u4e8e\u5b83\u7236\u4eb2\u7684\u6743\u503c\uff0c\u5c31\u4ea4\u6362\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u4e0d\u6ee1\u8db3\u6216\u8005\u5230\u6839\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u63d2\u5165\u4e4b\u540e\u5411\u4e0a\u8c03\u6574\u540e\uff0c\u6ca1\u6709\u5176\u4ed6\u7ed3\u70b9\u4f1a\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\u3002 \u5411\u4e0a\u8c03\u6574\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(\\log n) O(\\log n) \u7684\u3002","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"ds/heap/#_6","text":"\u5220\u9664\u6839\u7ed3\u70b9\u3002 \u5982\u679c\u76f4\u63a5\u5220\u9664\uff0c\u5219\u53d8\u6210\u4e86\u4e24\u4e2a\u5806\uff0c\u96be\u4ee5\u5904\u7406\u3002 \u6240\u4ee5\u4e0d\u59a8\u8003\u8651\u63d2\u5165\u64cd\u4f5c\u7684\u9006\u8fc7\u7a0b\uff0c\u8bbe\u6cd5\u5c06\u6839\u7ed3\u70b9\u79fb\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u5220\u6389\u3002 \u7136\u800c\u5b9e\u9645\u4e0a\u4e0d\u597d\u505a\uff0c\u6211\u4eec\u901a\u5e38\u91c7\u7528\u7684\u65b9\u6cd5\u662f\uff0c\u628a\u6839\u7ed3\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u76f4\u63a5\u4ea4\u6362\u3002 \u4e8e\u662f\u76f4\u63a5\u5220\u6389\uff08\u5728\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5904\u7684\uff09\u6839\u7ed3\u70b9\uff0c\u4f46\u662f\u65b0\u7684\u6839\u7ed3\u70b9\u53ef\u80fd\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\u2026\u2026 \u5411\u4e0b\u8c03\u6574\uff1a\u5728\u8be5\u7ed3\u70b9\u7684\u6240\u6709\u513f\u5b50\u4e2d\uff0c\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\uff0c\u4e0e\u8be5\u7ed3\u70b9\u4ea4\u6362\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u5e95\u5c42\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u5220\u9664\u5e76\u5411\u4e0b\u8c03\u6574\u540e\uff0c\u6ca1\u6709\u5176\u4ed6\u7ed3\u70b9\u4e0d\u6ee1\u8db3\u5806\u6027\u8d28\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(\\log n) O(\\log n) \u3002","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"ds/heap/#_7","text":"\u5f88\u663e\u7136\uff0c\u76f4\u63a5\u4fee\u6539\u540e\uff0c\u5411\u4e0a\u8c03\u6574\u4e00\u6b21\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log n) O(\\log n) \u3002","title":"\u51cf\u5c0f\u67d0\u4e2a\u70b9\u7684\u6743\u503c"},{"location":"ds/heap/#_8","text":"\u6211\u4eec\u53d1\u73b0\uff0c\u4e0a\u9762\u4ecb\u7ecd\u7684\u51e0\u79cd\u64cd\u4f5c\u4e3b\u8981\u4f9d\u8d56\u4e8e\u4e24\u4e2a\u6838\u5fc3\uff1a\u5411\u4e0a\u8c03\u6574\u548c\u5411\u4e0b\u8c03\u6574\u3002 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 up ( x ) { while ( x > 1 && h [ x ] > h [ x / 2 ]) { swap ( h [ x ], h [ x / 2 ]); x /= 2 ; } } down ( x ) { while ( x * 2 <= n ) { t = x * 2 ; if ( t + 1 <= n && h [ t + 1 ] < h [ t ]) t ++ ; if ( h [ t ] >= h [ x ]) break ; swap ( h [ x ], h [ t ]); x = t ; } }","title":"\u5b9e\u73b0"},{"location":"ds/heap/#_9","text":"\u8003\u8651\u8fd9\u4e48\u4e00\u4e2a\u95ee\u9898\uff0c\u4ece\u4e00\u4e2a\u7a7a\u7684\u5806\u5f00\u59cb\uff0c\u63d2\u5165 n n \u4e2a\u5143\u7d20\uff0c\u4e0d\u5728\u4e4e\u987a\u5e8f\u3002 \u76f4\u63a5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u9700\u8981 O(n \\log n) O(n \\log n) \u7684\u65f6\u95f4\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff1f","title":"\u5efa\u5806"},{"location":"ds/heap/#decreasekey","text":"\u4ece\u6839\u5f00\u59cb\uff0c\u6309 BFS \u5e8f\u8fdb\u884c. 1 2 3 build_heap_1() { for (i = 1; i <= n; i++) up(i); } \u4e3a\u5565\u8fd9\u4e48\u505a\uff1a\u5bf9\u4e8e\u7b2c k k \u5c42\u7684\u7ed3\u70b9\uff0c\u5411\u4e0a\u8c03\u6574\u7684\u590d\u6742\u5ea6\u4e3a O(k) O(k) \u800c\u4e0d\u662f O(\\log n) O(\\log n) \u3002 \u603b\u590d\u6742\u5ea6\uff1a \\log 1 + \\log 2 + \\cdots + \\log n = \\Theta(n \\log n) \\log 1 + \\log 2 + \\cdots + \\log n = \\Theta(n \\log n) \u3002 \uff08\u5728\u300c\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u300d\u4e2d\u8bc1\u660e\u8fc7\uff09","title":"\u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528 decreasekey\uff08\u5373\uff0c\u5411\u4e0a\u8c03\u6574\uff09"},{"location":"ds/heap/#_10","text":"\u8fd9\u65f6\u6362\u4e00\u79cd\u601d\u8def\uff0c\u4ece\u53f6\u5b50\u5f00\u59cb\uff0c\u9010\u4e2a\u5411\u4e0b\u8c03\u6574 1 2 3 build_heap_2() { for (i = n; i >= 1; i--) down(i); } \u6362\u4e00\u79cd\u7406\u89e3\u65b9\u6cd5\uff0c\u6bcf\u6b21\u300c\u5408\u5e76\u300d\u4e24\u4e2a\u5df2\u7ecf\u8c03\u6574\u597d\u7684\u5806\uff0c\u8fd9\u8bf4\u660e\u4e86\u6b63\u786e\u6027\u3002 \u6ce8\u610f\u5230\u5411\u4e0b\u8c03\u6574\u7684\u590d\u6742\u5ea6\uff0c\u4e3a O(\\log n - k) O(\\log n - k) \u3002 \\begin{aligned} \u603b\u590d\u6742\u5ea6 & = n \\log n - \\log 1 - \\log 2 - \\cdots - \\log n \\\\\\\\ & \\leq n \\log n - 0 \\times 2^0 - 1 \\times 2^1 -\\cdots - (\\log n - 1) \\times \\frac{n}{2} \\\\\\\\ & = n \\log n - (n-1) - (n-2) - (n-4) - \\cdots - (n-\\frac{n}{2}) \\\\\\\\ & = n \\log n - n \\log n + 1 + 2 + 4 + \\cdots + \\frac{n}{2} \\\\\\\\ & = n - 1 \\\\\\\\ & = O(n) \\end{aligned} \\begin{aligned} \u603b\u590d\u6742\u5ea6 & = n \\log n - \\log 1 - \\log 2 - \\cdots - \\log n \\\\\\\\ & \\leq n \\log n - 0 \\times 2^0 - 1 \\times 2^1 -\\cdots - (\\log n - 1) \\times \\frac{n}{2} \\\\\\\\ & = n \\log n - (n-1) - (n-2) - (n-4) - \\cdots - (n-\\frac{n}{2}) \\\\\\\\ & = n \\log n - n \\log n + 1 + 2 + 4 + \\cdots + \\frac{n}{2} \\\\\\\\ & = n - 1 \\\\\\\\ & = O(n) \\end{aligned} \u4e4b\u6240\u4ee5\u80fd O(n) O(n) \u5efa\u5806\uff0c\u662f\u56e0\u4e3a\u5806\u6027\u8d28\u5f88\u5f31\uff0c\u4e8c\u53c9\u5806\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u3002 \u8981\u662f\u50cf\u6392\u5e8f\u90a3\u6837\u7684\u5f3a\u6761\u4ef6\u5c31\u96be\u8bf4\u4e86\u3002","title":"\u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528\u5411\u4e0b\u8c03\u6574"},{"location":"ds/k-dtree/","text":"","title":"K-Dtree"},{"location":"ds/lct/","text":"\u7b80\u4ecb \u00b6 Link/Cut Tree \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784, \u6211\u4eec\u7528\u5b83\u6765\u89e3\u51b3 \u52a8\u6001\u6811\u95ee\u9898 Link/Cut Tree \u53c8\u79f0 Link-Cut Tree\uff0c\u7b80\u79f0 LCT, \u4f46\u5b83\u4e0d\u53eb\u52a8\u6001\u6811\uff0c\u52a8\u6001\u6811\u662f\u6307\u4e00\u7c7b\u95ee\u9898\u3002 Splay Tree \u662f LCT \u7684\u57fa\u7840, \u4f46\u662f LCT \u2f64\u7684 Splay Tree \u548c\u666e\u901a\u7684 Splay \u5728\u7ec6\u8282\u5904\u4e0d\u592a\u4e00\u6837\u3002 \u8fd9\u662f\u2f00\u4e2a\u548c Splay \u2f00\u6837\u53ea\u9700\u8981\u5199\u2f0f (yi) \u4e2a (dui) \u6838\u5fc3\u51fd\u6570\u5c31\u80fd\u5b9e\u73b0\u4e00\u5207\u7684\u6570\u636e\u7ed3\u6784\u3002 \u95ee\u9898\u5f15\u5165 \u00b6 \u7ef4\u62a4\u4e00\u68f5\u6811, \u652f\u6301\u5982\u4e0b\u64cd\u4f5c\u3002 \u4fee\u6539\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u3002 \u67e5\u8be2\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u548c\u3002 \u4fee\u6539\u67d0\u70b9\u5b50\u6811\u6743\u503c\u3002 \u67e5\u8be2\u67d0\u70b9\u5b50\u6811\u6743\u503c\u548c\u3002 \u5514\uff0c \u770b\u4e0a\u53bb\u662f\u4e00\u9053\u6811\u5256\u6a21\u7248\u9898\u3002 \u90a3\u4e48\u6211\u4eec\u52a0\u4e24\u4e2a\u64cd\u4f5c \u65ad\u5f00\u5e76\u8fde\u63a5\u2f00\u4e00\u4e9b\u8fb9, \u4fdd\u8bc1\u4ecd\u662f\u2f00\u4e00\u68f5\u6811\u3002 \u5728\u7ebf\u6c42\u51fa\u4e0a\u2faf\u9762\u7684\u7b54\u6848\u3002 \u2014\u2014\u52a8\u6001\u6811\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\uff1aLink/Cut Tree! \u52a8\u6001\u6811\u95ee\u9898 \u00b6 \u7ef4\u62a4\u4e00\u4e2a \u68ee\u6797 , \u652f\u6301\u5220\u9664\u67d0\u6761\u8fb9, \u52a0\u2f0a\u67d0\u6761\u8fb9, \u5e76\u4fdd\u8bc1\u52a0\u8fb9, \u5220\u8fb9\u4e4b\u540e\u4ecd\u662f\u68ee\u6797\u3002\u6211\u4eec\u8981\u7ef4\u62a4\u8fd9\u4e2a\u68ee\u6797\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 \u4e00\u822c\u7684\u64cd\u4f5c\u6709\u4e24\u70b9\u8fde\u901a\u6027, \u4e24\u70b9\u8def\u5f84\u6743\u503c\u548c, \u8fde\u63a5\u4e24\u70b9\u548c\u5207\u65ad\u67d0\u6761\u8fb9\u3001\u4fee\u6539\u4fe1\u606f\u7b49\u3002 \u4ece LCT \u7684\u89d2\u5ea6\u56de\u987e\u4e00\u4e0b\u6811\u94fe\u5256\u5206 \u00b6 \u5bf9\u6574\u68f5\u6811\u6309\u5b50\u6811\u2f24\u5c0f\u8fdb\u2f8f\u5256\u5206, \u5e76\u91cd\u65b0\u6807\u53f7\u3002 \u6211\u4eec\u53d1\u73b0\u91cd\u65b0\u6807\u53f7\u4e4b\u540e, \u5728\u6811\u4e0a\u5f62\u6210\u4e86\u4e00\u4e9b\u4ee5\u94fe\u4e3a\u5355\u4f4d\u7684\u8fde\u7eed\u533a\u95f4, \u5e76\u4e14\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u8fdb\u2f8f\u533a\u95f4\u64cd\u4f5c\u3002 \u8f6c\u5411\u52a8\u6001\u6811\u95ee\u9898 \u00b6 \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u521a\u521a\u8bb2\u7684\u6811\u5256\u662f\u4ee5\u5b50\u6811\u2f24\u5c0f\u4f5c\u4e3a\u5212\u5206\u6761\u4ef6\u3002 \u90a3\u6211\u4eec\u80fd\u4e0d\u80fd\u91cd\u5b9a\u4e49\u4e00\u79cd\u5256\u5206, \u4f7f\u5b83\u66f4\u9002\u5e94\u6211\u4eec\u7684\u52a8\u6001\u6811\u95ee\u9898\u5462? \u8003\u8651\u52a8\u6001\u6811\u95ee\u9898\u9700\u8981\u4ec0\u4e48\u94fe\u3002 \u7531\u4e8e\u52a8\u6001\u7ef4\u62a4\u2f00\u4e2a\u68ee\u6797, \u663e\u7136\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u94fe\u662f\u6211\u4eec\u6307\u5b9a\u7684\u94fe, \u4ee5\u4fbf\u5229\u2f64\u6765\u6c42\u89e3\u3002 \u5b9e\u94fe\u5256\u5206 \u00b6 \u5bf9\u4e8e\u2f00\u4e2a\u70b9\u8fde\u5411\u5b83\u6240\u6709\u2f09\u5b50\u7684\u8fb9 , \u6211\u4eec\u2f83\u5df1\u9009\u62e9\u2f00\u6761\u8fb9\u8fdb\u884c\u5256\u5206, \u6211\u4eec\u79f0\u88ab\u9009\u62e9\u7684\u8fb9\u4e3a\u5b9e\u8fb9, \u5176\u4ed6\u8fb9\u5219\u4e3a\u865a\u8fb9\u3002 \u5bf9\u4e8e\u5b9e\u8fb9, \u6211\u4eec\u79f0\u5b83\u6240\u8fde\u63a5\u7684\u2f09\u5b50\u4e3a\u5b9e\u2f09\u5b50\u3002 \u5bf9\u4e8e\u2f00\u6761\u7531\u5b9e\u8fb9\u7ec4\u6210\u7684\u94fe, \u6211\u4eec\u540c\u6837\u79f0\u4e4b\u4e3a\u5b9e\u94fe\u3002 \u8bf7\u8bb0\u4f4f\u6211\u4eec\u9009\u62e9\u5b9e\u94fe\u5256\u5206\u7684\u6700\u91cd\u8981\u7684\u539f\u56e0: \u5b83\u662f\u6211\u4eec\u9009\u62e9\u7684, \u7075\u6d3b\u4e14\u53ef\u53d8\u3002 \u6b63\u662f\u5b83\u7684\u8fd9\u79cd\u7075\u6d3b\u53ef\u53d8\u6027, \u6211\u4eec\u91c7\u7528 Splay Tree \u6765\u7ef4\u62a4\u8fd9\u4e9b\u5b9e\u94fe\u3002 LCT\uff01 \u00b6 \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u628a LCT \u7406\u89e3\u6210\u7528\u2f00\u4e9b Splay \u6765\u7ef4\u62a4\u52a8\u6001\u7684\u6811\u94fe\u5256\u5206, \u4ee5\u671f\u5b9e\u73b0\u52a8\u6001\u6811\u4e0a\u7684\u533a\u95f4\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u6bcf\u6761\u5b9e\u94fe, \u6211\u4eec\u5efa\u2f00\u4e2a Splay \u6765\u7ef4\u62a4\u6574\u4e2a\u94fe\u533a\u95f4\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765, \u6211\u4eec\u6765\u5b66\u4e60 LCT \u7684\u5177\u4f53\u7ed3\u6784\u3002 - \u8f85\u52a9\u6811 \u00b6 \u6211\u4eec\u521a\u624d\u5728\u8bf4\u7684\u5efa\u6811\u65b9\u6cd5, \u5176\u5b9e\u5c31\u662f\u8f85\u52a9\u6811\u7684\u5efa\u6811\u65b9\u6cd5, \u6211\u4eec\u5148\u6765 \u770b\u2f00\u770b\u8f85\u52a9\u6811\u7684\u4e00\u4e9b\u6027\u8d28, \u518d\u901a\u8fc7\u4e00\u5f20\u56fe\u5b9e\u9645\u4e86\u89e3\u4e00\u4e0b\u8f85\u52a9\u6811\u7684\u5177\u4f53\u7ed3\u6784\u3002 \u6bcf\u2f00\u4e2a Splay \u7ef4\u62a4\u7684\u662f\u4e00\u6761\u8def\u5f84, \u5e76\u4e14\u5728\u539f\u6811\u4e2d\u6240\u6709\u8282\u70b9\u6df1\u5ea6\u4e25\u683c\u9012\u589e, \u5e76\u4e14, \u4e2d\u5e8f\u904d\u5386\u8fd9\u68f5 Splay \u5f97\u5230\u7684\u70b9\u5e8f\u5217\u5217\u7684\u70b9\u6df1\u5ea6\u4e25\u683c\u9012\u589e\u3002 \u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e14\u4ec5\u5305\u542b\u4e8e\u4e00\u68f5 Splay \u4e2d\u3002 \u2f00\u68f5 Splay \u7684\u6839\u8282\u70b9\u7684 Father \u6307\u5411\u5b83\u5728\u8f85\u52a9\u6811\u4e2d\u7684\u7236\u4eb2\u7ed3\u70b9\u3002\u4f46\u662f\u5b83\u7236\u4eb2\u7ed3\u70b9\u7684 ch \u5e76\u6ca1\u6709\u6307\u5411\u8fd9\u4e2a\u70b9\u7684\u3002\u5373\u7236\u4eb2\u4e0d\u4e0d\u2f00\u5b9a\u8ba4\u2f09\u5b50, \u2f7d\u2f09\u5b50\u80fd\u627e\u5230\u2f57\u4eb2\u3002 \u7531\u4e8e LCT \u7684 Access \u64cd\u4f5c\uff08\u540e\u9762\u4f1a\u89e3\u91ca\uff09, \u4f7f\u5f97 3. \u4e2d\u7684\u2f57\u4eb2\u4e0d\u8ba4\u2f09\u5b50\u5bf9\u7b54\u6848\u2f46\u4efb\u4f55\u5f71\u54cd, \u540c\u65f6, \u4e5f\u4f7f\u4e00\u4e9b\u53f6\u2f26\u7ed3\u70b9\u5355\u72ec\u6784\u6210\u4e00\u68f5 Splay \u8f85\u52a9\u6811\u6210\u4e3a\u53ef\u80fd \u7531\u4e8e\u8f85\u52a9\u6811\u7684\u4ee5\u4e0a\u6027\u8d28, \u6211\u4eec\u7ef4\u62a4\u4efb\u4f55\u64cd\u4f5c\u90fd\u4e0d\u4e0d\u9700\u8981\u7ef4\u62a4\u539f\u6811, \u8f85\u52a9\u6811\u53ef\u4ee5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u62ff\u51fa\u4e00\u4e2a\u552f\u4e00\u7684\u539f\u6811, \u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8f85\u52a9\u6811\u5373\u53ef\u3002(\u672c\u53e5\u6765\u6e90\u81ea \u5927\u7237 @PoPoQQQ \u7684 PPT) \u5728\u672c\u6587\u91cc\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u4e00\u4e9b Splay \u6784\u6210\u4e86\u4e00\u4e2a\u8f85\u52a9\u6811\uff0c\u6bcf\u68f5\u8f85\u52a9\u6811\u7ef4\u62a4\u7684\u662f\u4e00\u68f5\u6811\uff0c\u4e00\u4e9b\u8f85\u52a9\u6811\u6784\u6210\u4e86 LCT \uff0c\u5176\u7ef4\u62a4\u7684\u662f\u6574\u4e2a\u68ee\u6797\u3002 \u73b0\u5728\u6211\u4eec\u6709\u2f00\u68f5\u539f\u6811, \u5982\u56fe\u3002 \u52a0\u7c97\u8fb9\u662f\u5b9e\u8fb9, \u865a\u7ebf\u8fb9\u662f\u865a\u8fb9 \u7531\u521a\u521a\u7684\u5b9a\u4e49\uff0c \u8f85\u52a9\u6811\u7684\u7ed3\u6784\u5982\u4e0b \u8003\u8651\u539f\u6811\u548c\u8f85\u52a9\u6811\u7684\u7ed3\u6784\u5173\u7cfb \u00b6 \u539f\u6811\u4e2d\u7684\u5b9e\u94fe : \u5728\u8f85\u52a9\u6811\u4e2d\u8282\u70b9\u90fd\u5728\u4e00\u68f5 Splay \u4e2d \u539f\u6811\u4e2d\u7684\u865a\u94fe : \u5728\u8f85\u52a9\u6811\u4e2d, \u5b50\u8282\u70b9\u6240\u5728 Splay \u7684 Father \u6307\u5411\u7236\u8282\u70b9, \u4f46\u662f\u7236\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u90fd\u4e0d\u6307\u5411\u5b50\u8282\u70b9\u3002 \u6ce8\u610f: \u539f\u6811\u7684\u6839 =\u0338\u8f85\u52a9\u6811\u7684\u6839\u3002 \u539f\u6811\u7684 Father \u6307\u5411 =\u0338\u8f85\u52a9\u6811\u7684 Father \u6307\u5411\u3002 \u8f85\u52a9\u6811\u662f\u53ef\u4ee5\u5728\u6ee1\u8db3\u8f85\u52a9\u6811\u3001Splay \u7684\u6027\u8d28\u4e0b\u4efb\u610f\u6362\u6839\u7684\u3002 \u865a\u5b9e\u94fe\u53d8\u6362\u53ef\u4ee5\u8f7b\u677e\u5728\u8f85\u52a9\u6811\u4e0a\u5b8c\u6210, \u8fd9\u4e5f\u5c31\u662f\u5b9e\u73b0\u4e86\u52a8\u6001\u7ef4\u62a4\u6811\u94fe\u5256\u5206\u3002 \u63a5\u4e0b\u6765\u8981\u7528\u5230\u7684\u53d8\u91cf\u58f0\u660e \u00b6 ch[N][2] \u5de6\u53f3\u2f09\u5b50 f[N] \u2f57\u4eb2\u6307\u5411 sum[N] \u8def\u5f84\u6743\u503c\u548c val[N] \u70b9\u6743 tag[N] \u7ffb\u8f6c\u6807\u8bb0 laz[N] \u6743\u503c\u6807\u8bb0 Other_Vars \u51fd\u6570\u58f0\u660e \u00b6 \u2f00\u822c\u6570\u636e\u7ed3\u6784\u51fd\u6570 (\u5b57\u9762\u610f\u601d) \u00b6 PushUp(x) PushDown(x) Splay \u7cfb\u51fd\u6570 (\u4e0d\u4f1a\u591a\u505a\u89e3\u91ca) \u00b6 Get(x) \u83b7\u53d6 x \u662f\u7236\u4eb2\u7684\u54ea\u4e2a\u2f09\u5b50\u3002 Splay(x) \u901a\u8fc7\u548c Rotate \u64cd\u4f5c\u8054\u52a8\u5b9e\u73b0\u628a x \u65cb\u8f6c\u5230 \u5f53\u524d Splay \u7684\u6839\u3002 Rotate(x) \u5c06 x \u5411\u4e0a\u65cb\u8f6c\u4e00\u5c42\u7684\u64cd\u4f5c\u3002 \u65b0\u64cd\u4f5c \u00b6 IsRoot(x) \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u6240\u5728 Splay \u7684\u6839 Access(x) \u628a\u4ece\u6839\u5230\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u70b9\u653e\u5728\u2f00\u6761\u5b9e\u94fe\u91cc, \u4f7f\u6839\u5230\u5b83\u6210\u4e3a\u4e00\u6761\u5b9e\u8def\u5f84, \u5e76\u4e14\u5728\u540c\u4e00\u68f5 Splay \u91cc\u91cc\u3002 Update(x) \u5728 Access \u64cd\u4f5c\u4e4b\u540e, \u9012\u5f52\u7684\u4ece\u4e0a\u5230\u4e0b Pushdown \u66f4\u66f4\u65b0\u4fe1 \u606f\u3002 MakeRoot(x) \u4f7f x \u70b9\u6210\u4e3a\u6574\u4e2a\u8f85\u52a9\u6811\u7684\u6839\u3002 Link(x, y) \u5728 x, y \u4e24\u70b9\u95f4\u8fde\u2f00\u4e00\u6761\u8fb9\u3002 Cut(x, y) \u628a x, y \u4e24\u70b9\u95f4\u8fb9\u5220\u6389\u3002 Find(x) \u627e\u5230 x \u6240\u5728\u7684 Splay \u7684\u6839\u8282\u70b9\u7f16\u53f7\u3002 Fix(x, v) \u4fee\u6539 x \u7684\u70b9\u6743\u4e3a v\u3002 Split(x, y) \u63d0\u53d6\u51fa\u6765 x, y \u95f4\u7684\u8def\u8def\u5f84, \u2f45\u65b9\u4fbf\u4fbf\u505a\u533a\u95f4\u64cd\u4f5c \u5b8f\u5b9a\u4e49 \u00b6 #define ls ch[p][0] #define rs ch[p][1] \u51fd\u6570\u8bb2\u89e3 \u00b6 \u5148\u4ece\u7b80\u5355\u7684\u6765\u5427 PushUp() \u00b6 1 2 3 4 5 inline void PushUp ( int p ) { __var1 [ p ] = __var1 [ ls ] \"operator 1\" __var1 [ rs ] \"operator 2\" __var1 [ p ] / __siz [ p ]; siz [ p ] = siz [ ls ] + siz [ rs ]; } PushDown() \u00b6 1 2 3 4 5 6 inline void PushDown ( int p ) { if ( __tag1 [ p ] != std_tag1 ) { // do ls & do rs __tag1 [ p ] = std_tag1 ; } } Splay() && Rotate() \u00b6 \u6709\u4e9b\u4e0d\u4e00\u6837\u4e86\u54e6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #define Get(x) (ch[f[x]][1] == x) inline void Rotate ( int x ) { int y = f [ x ], z = f [ y ], k = Get ( x ); if ( ! isRoot ( y )) ch [ z ][ ch [ z ][ 1 ] == y ] = x ; // \u4e0a\u9762\u8fd9\u53e5\u4e00\u5b9a\u8981\u5199\u5728\u524d\u9762\uff0c\u666e\u901a\u7684Splay\u662f\u4e0d\u7528\u7684\uff0c\u56e0\u4e3a isRoot (\u540e\u9762\u4f1a\u8bb2) ch [ y ][ k ] = ch [ x ][ ! k ], f [ ch [ y ][ k ]] = y ; ch [ x ][ ! k ] = y , f [ y ] = x , f [ x ] = z ; PushUp ( x ), PushUp ( y ); } inline void Splay ( int x ) { Update ( x ); // \u9a6c\u4e0a\u5c31\u80fd\u770b\u5230\u5566\u3002 \u5728 Splay\u4e4b\u524d\u8981\u628a\u65cb\u8f6c\u4f1a\u7ecf\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u90fdPushDown for ( int fa ; fa = f [ x ], ! isRoot ( x ); Rotate ( x )) { if ( ! isRoot ( fa )) Rotate ( Get ( fa ) == Get ( x ) ? fa : x ); } } \u5982\u679c\u4e0a\u9762\u7684\u51e0\u4e2a\u51fd\u6570\u4f60\u770b\u4e0d\u61c2\uff0c\u8bf7\u79fb\u6b65 Splay \u4e0b\u9762\u8981\u5f00\u59cb LCT \u72ec\u6709\u7684\u51fd\u6570\u4e86\u54e6 isRoot() \u00b6 1 2 3 // \u5728\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7\uff0cLCT \u5177\u6709 \u5982\u679c\u4e00\u4e2a\u513f\u5b50\u4e0d\u662f\u5b9e\u513f\u5b50\uff0c\u4ed6\u7684\u7236\u4eb2\u627e\u4e0d\u5230\u5b83\u7684\u6027\u8d28 // \u6240\u4ee5\u5f53\u4e00\u4e2a\u70b9\u65e2\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u5de6\u513f\u5b50\uff0c\u53c8\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u5b83\u5c31\u662f\u5f53\u524d Splay \u7684\u6839 #define isRoot(x) (ch[f[x]][0] != x && ch[f[x]][1] != x) Access() \u00b6 1 2 3 4 5 6 7 8 // Access \u662f LCT // \u7684\u6838\u5fc3\u64cd\u4f5c\uff0c\u8bd5\u60f3\u6211\u4eec\u50cf\u6c42\u89e3\u4e00\u6761\u8def\u5f84\uff0c\u800c\u8fd9\u6761\u8def\u5f84\u6070\u597d\u5c31\u662f\u6211\u4eec\u5f53\u524d\u7684\u4e00\u68f5 Splay\uff0c // \u76f4\u63a5\u8c03\u7528\u5176\u4fe1\u606f\u5373\u53ef \u5148\u6765\u770b\u4e00\u4e0b\u4ee3\u7801\uff0c\u518d\u7ed3\u5408\u56fe\u6765\u770b\u770b\u8fc7\u7a0b inline void Access ( int x ) { for ( int p = 0 ; x ; p = x , x = f [ x ]) { Splay ( x ), ch [ x ][ 1 ] = p , PushUp ( x ); } } \u6211\u4eec\u6709\u8fd9\u6837\u4e00\u68f5\u6811\uff0c\u5b9e\u7ebf\u4e3a\u5b9e\u8fb9\uff0c\u865a\u7ebf\u4e3a\u865a\u8fb9 \u5b83\u7684\u8f85\u52a9\u6811\u53ef\u80fd\u957f\u6210\u8fd9\u6837 (\u6784\u56fe\u65b9\u5f0f\u4e0d\u540c\u53ef\u80fd LCT \u7684\u7ed3\u6784\u4e5f\u4e0d\u540c) \u6bcf\u4e2a\u7eff\u6846\u91cc\u662f\u4e00\u68f5 Splay\u3002 \u73b0\u5728\u6211\u4eec\u8981 Access(N), \u628a A-N \u7684\u8def\u5f84\u90fd\u53d8\u5b9e, \u62c9\u6210\u4e00\u68f5 Splay \u5b9e\u73b0\u7684\u65b9\u6cd5\u662f\u4ece\u4e0b\u5230\u4e0a\u9010\u6b65\u66f4\u65b0 Splay \u9996\u5148\u6211\u4eec\u8981\u628a N \u65cb\u81f3\u5f53\u524d Splay \u7684\u6839\u3002 \u4e3a\u4e86\u4fdd\u8bc1 AuxTree \u7684\u6027\u8d28, \u539f\u6765 N\u2014\u2014O \u7684\u5b9e\u8fb9\u8981\u66f4\u6539\u4e3a\u865a\u8fb9\u3002 \u7531\u4e8e\u8ba4\u7236\u4e0d\u8ba4\u5b50\u7684\u6027\u8d28, \u6211\u4eec\u53ef\u4ee5\u5355\u65b9\u9762\u7684\u628a N \u7684\u513f\u5b50\u6539\u4e3a Null\u3002 \u4e8e\u662f\u539f\u6765\u7684 Aux \u5c31\u4ece\u4e0b\u56fe\u53d8\u6210\u4e86\u4e0b\u4e0b\u56fe\u3002 \u4e0b\u4e00\u6b65, \u6211\u4eec\u628a N \u6307\u5411\u7684 Father-> I \u4e5f\u65cb\u8f6c\u5230\u5b83 (I) \u7684 Splay \u6811\u6839\u3002 \u539f\u6765\u7684\u5b9e\u8fb9 I \u2014\u2014 K \u8981\u53bb\u6389, \u8fd9\u65f6\u5019\u6211\u4eec\u628a I \u7684\u53f3\u513f\u5b50\u6307\u5411 N, \u5c31\u5f97\u5230\u4e86 I\u2014\u2014L \u8fd9\u6837\u4e00\u68f5 Splay\u3002 \u63a5\u4e0b\u6765, \u6309\u7167\u521a\u521a\u7684\u64cd\u4f5c\u6b65\u9aa4, \u7531\u4e8e I \u7684 Father \u6307\u5411 H, \u6211\u4eec\u628a H \u65cb\u8f6c\u5230\u4ed6\u6240\u5728 Splay Tree \u7684\u6839, \u7136\u540e\u628a H \u7684 rs \u8bbe\u4e3a I\u3002 \u4e4b\u540e\u7684\u6811\u662f\u8fd9\u6837\u7684\u3002 \u540c\u7406\u6211\u4eec Splay(A) , \u5e76\u628a A \u7684\u53f3\u513f\u5b50\u6307\u5411 H\u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u4e00\u68f5 AuxTree\u3002\u5e76\u4e14\u53d1\u73b0 A\u2014\u2014N \u7684\u6574\u4e2a\u8def\u5f84\u5df2\u7ecf\u5728\u540c\u4e00\u68f5 Splay \u4e2d\u4e86\u3002\u5927\u529f\u544a\u6210\uff01 1 2 3 4 5 6 // \u56de\u987e\u4e00\u4e0b\u4ee3\u7801 inline void Access ( int x ) { for ( int p = 0 ; x ; p = x , x = f [ x ]) { Splay ( x ), ch [ x ][ 1 ] = p , PushUp ( x ); } } \u6211\u4eec\u53d1\u73b0 Access() \u5176\u5b9e\u5f88\u5bb9\u6613\u3002\u53ea\u6709\u5982\u4e0b\u56db\u6b65\u64cd\u4f5c\uff1a \u628a\u5f53\u524d\u8282\u70b9\u8f6c\u5230\u6839\u3002 \u628a\u513f\u5b50\u6362\u6210\u4e4b\u524d\u7684\u8282\u70b9\u3002 \u66f4\u65b0\u5f53\u524d\u70b9\u7684\u4fe1\u606f\u3002 \u628a\u5f53\u524d\u70b9\u6362\u6210\u5f53\u524d\u70b9\u7684\u7236\u4eb2, \u7ee7\u7eed\u64cd\u4f5c\u3002 Update() \u00b6 1 2 3 4 // \u4ece\u4e0a\u5230\u4e0b\u4e00\u5c42\u4e00\u5c42pushDown \u5373\u53ef void Update ( int p ) { if ( ! isRoot ( p )) Update ( f [ p ]) pushDown ( p ); } makeRoot() \u00b6 Make_Root() \u7684\u91cd\u8981\u6027\u4e1d\u6beb\u4e0d\u4e9a\u4e8e Access() \u3002 \u6211\u4eec\u5728\u9700\u8981\u7ef4\u62a4\u8def\u5f84\u4fe1\u606f\u7684\u65f6\u5019, \u4e00\u5b9a\u4f1a\u51fa\u73b0\u8def\u5f84\u6df1\u5ea6\u65e0\u6cd5\u4e25\u683c\u9012\u589e\u7684\u60c5\u51b5, \u6839\u636e Aux \u7684\u6027\u8d28, \u8fd9\u79cd\u8def\u5f84\u662f\u4e0d\u80fd\u51fa\u73b0\u5728\u4e00\u68f5 Splay \u4e2d\u7684\u3002 \u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u5230 Make_Root()\u3002 Make_Root() \u3002\u7684\u4f5c\u7528\u662f\u4f7f\u6307\u5b9a\u7684\u70b9\u6210\u4e3a\u539f\u6811\u7684\u6839, \u8003\u8651\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u64cd\u4f5c\u3002 \u6211\u4eec\u53d1\u73b0 Access(x) \u540e, x \u5728 Splay \u4e2d\u4e00\u5b9a\u662f\u6df1\u5ea6\u6700\u5927\u7684\u70b9 (\u4ece\u6839\u5230 x, \u6df1\u5ea6\u4e25\u683c\u9012\u589e)\u3002 \u800c\u53d8\u6210\u6839\u5373\u662f\u53d8\u6210\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u3002\u6211\u4eec Splay(x) , \u53d1\u73b0\u8fd9\u65f6\u5019 x \u5e76\u6ca1\u6709\u53f3\u5b50\u6811 (\u5373\u6240\u6709\u70b9\u6df1\u5ea6\u90fd\u6bd4\u5b83\u6d45)\u3002\u90a3\u6211\u4eec\u628a x \u7684\u5de6\u53f3\u513f\u5b50\u4ea4\u6362\u4e00\u4e0b, \u53d8\u6210\u4e86 x \u6ca1\u6709\u5de6\u5b50\u6811, \u5728 Aux \u610f\u4e49\u4e0a\u5c31\u662f\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u4e86, \u5373\u8fbe\u5230\u76ee\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u4ea4\u6362\u5de6\u53f3\u513f\u5b50, \u5e76\u7ed9\u53f3\u513f\u5b50\u6253\u4e00\u4e2a\u7ffb\u8f6c\u6807\u8bb0\u5373\u53ef\u3002(\u6b64\u65f6\u5de6\u513f\u5b50\u6ca1\u6709\u503c)\u3002 1 2 3 4 5 inline void makeRoot ( int p ) { Access ( p ), Splay ( p ); swap ( ls , rs ); tag [ p ] ^= 1 ; } Link() \u00b6 Link \u4e24\u4e2a\u70b9\u5176\u5b9e\u5f88\u7b80\u5355, \u5148 Make_Root(x) , \u7136\u540e\u628a x \u7684\u7236\u4eb2\u6307\u5411 y \u5373\u53ef\u3002\u663e\u7136, \u8fd9\u4e2a\u64cd\u4f5c\u80af\u5b9a\u4e0d\u80fd\u53d1\u751f\u5728\u540c\u4e00\u68f5\u6811\u5185 OTZ\u3002\u8bb0\u5f97\u5148\u5224\u4e00\u4e0b\u3002 1 2 3 4 inline void Link ( int x , int p ) { makeRoot ( x ); f [ x ] = p ; } Split() \u00b6 Split \u64cd\u4f5c\u610f\u4e49\u5f88\u7b80\u5355, \u5c31\u662f\u62ff\u51fa\u4e00\u68f5 Splay , \u7ef4\u62a4\u7684\u662f x \u5230 y \u7684\u8def\u5f84\u3002 \u5148 MakeRoot(x) , \u7136\u540e Access(y) \u3002\u5982\u679c\u8981 y \u505a\u6839, \u518d Splay(y) \u3002 \u5c31\u8fd9\u4e09\u53e5\u8bdd, \u6ca1\u5199\u4ee3\u7801, \u9700\u8981\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u6253\u8fd9\u4e09\u4e2a\u5c31\u597d\u8fa3\uff01 \u53e6\u5916 Split \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u76f4\u63a5\u53ef\u4ee5\u628a\u9700\u8981\u7684\u8def\u5f84\u62ff\u51fa\u5230 y \u7684\u5b50\u6811\u4e0a, \u90a3\u4e0d\u662f\u968f\u4fbf\u5e72\u561b\u54af\u3002 Cut() \u00b6 Cut \u6709\u4e24\u79cd\u60c5\u51b5, \u4fdd\u8bc1\u5408\u6cd5\u548c\u4e0d\u4e00\u5b9a\u4fdd\u8bc1\u5408\u6cd5\u3002(\u5e9f\u8bdd) \u5982\u679c\u4fdd\u8bc1\u5408\u6cd5, \u76f4\u63a5 split(x, y) , \u8fd9\u65f6\u5019 y \u662f\u6839, x \u4e00\u5b9a\u662f\u5b83\u7684\u513f\u5b50, \u53cc\u5411\u65ad\u5f00\u5373\u53ef , \u5c31\u50cf\u8fd9\u6837\uff1a 1 2 3 inline void Cut ( int x , int p ) { makeRoot ( x ), Access ( p ), Splay ( p ), ls = f [ x ] = 0 ; } \u5982\u679c\u662f\u4e0d\u4fdd\u8bc1\u5408\u6cd5, \u6211\u4eec\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709, \u6211\u9009\u62e9\u4f7f\u7528 Map \u5b58\u4e00\u4e0b, \u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5229\u7528\u6027\u8d28\u7684\u65b9\u6cd5\uff1a \u60f3\u8981\u5220\u8fb9, \u5fc5\u987b\u8981\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a x, y \u8fde\u901a\u3002 x, y \u7684\u8def\u5f84\u4e0a\u6ca1\u6709\u5176\u4ed6\u7684\u94fe\u3002 x \u6ca1\u6709\u53f3\u513f\u5b50\u3002 \u603b\u7ed3\u4e00\u4e0b, \u4e0a\u9762\u4e09\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u4e00\u4e2a\uff1ax, y \u6709\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\u5c31\u7559\u4f5c\u4e00\u4e2a\u601d\u8003\u9898\u7ed9\u5927\u5bb6\u3002\u5224\u65ad\u8fde\u901a\u9700\u8981\u7528\u5230\u540e\u9762\u7684 Find , \u5176\u4ed6\u4e24\u70b9\u7a0d\u4f5c\u601d\u8003\u5206\u6790\u4e00\u4e0b\u7ed3\u6784\u5c31\u77e5\u9053\u8be5\u600e\u4e48\u5224\u65ad\u4e86\u3002 Find() \u00b6 Find() \u5176\u5b9e\u5c31\u662f\u627e\u5230\u5f53\u524d\u8f85\u52a9\u6811\u7684\u6839\u3002\u5728 Access(p) \u540e, \u518d splay(p)\u3002\u8fd9\u6837\u6839\u5c31\u662f\u6811\u91cc\u6700\u5c0f\u7684\u90a3\u4e2a, \u4e00\u76f4\u5f80 ls \u8d70, \u6cbf\u9014 PushDown \u5373\u53ef\u3002 \u4e00\u76f4\u8d70\u5230\u6ca1\u6709 ls, \u975e\u5e38\u7b80\u5355\u3002 1 2 3 4 5 inline int Find ( int p ) { Access ( p ), Splay ( p ); while ( ls ) pushDown ( p ), p = ls ; return p ; } \u4e00\u4e9b\u63d0\u9192 \u00b6 \u5e72\u70b9\u5565\u4e00\u5b9a\u8981\u60f3\u4e00\u60f3\u9700\u4e0d\u9700\u8981 PushUp \u6216\u8005 PushDown, LCT \u7531\u4e8e\u7279\u522b\u7075\u6d3b\u7684\u539f\u56e0, \u5c11 Pushdown \u6216\u8005 Pushup \u4e00\u6b21\u5c31\u53ef\u80fd\u628a\u4fee\u6539\u6539\u5230\u4e0d\u8be5\u6539\u7684\u70b9\u4e0a! \u5b83\u7684 rotate \u548c splay \u7684\u4e0d\u592a\u4e00\u6837, if(z) \u4e00\u5b9a\u8981\u653e\u5728\u524d\u9762\u3002 \u5b83\u7684 splay \u5c31\u662f\u65cb\u8f6c\u5230\u6839, \u6ca1\u6709\u65cb\u8f6c\u5230\u8c01\u513f\u5b50\u7684\u64cd\u4f5c, \u56e0\u4e3a\u4e0d\u9700\u8981\u3002 \u4e00\u4e9b\u9898 \u00b6 BZOJ_2049 BZOJ_3282 BZOJ_2002 BZOJ_2631","title":"Link Cut Tree"},{"location":"ds/lct/#_1","text":"Link/Cut Tree \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784, \u6211\u4eec\u7528\u5b83\u6765\u89e3\u51b3 \u52a8\u6001\u6811\u95ee\u9898 Link/Cut Tree \u53c8\u79f0 Link-Cut Tree\uff0c\u7b80\u79f0 LCT, \u4f46\u5b83\u4e0d\u53eb\u52a8\u6001\u6811\uff0c\u52a8\u6001\u6811\u662f\u6307\u4e00\u7c7b\u95ee\u9898\u3002 Splay Tree \u662f LCT \u7684\u57fa\u7840, \u4f46\u662f LCT \u2f64\u7684 Splay Tree \u548c\u666e\u901a\u7684 Splay \u5728\u7ec6\u8282\u5904\u4e0d\u592a\u4e00\u6837\u3002 \u8fd9\u662f\u2f00\u4e2a\u548c Splay \u2f00\u6837\u53ea\u9700\u8981\u5199\u2f0f (yi) \u4e2a (dui) \u6838\u5fc3\u51fd\u6570\u5c31\u80fd\u5b9e\u73b0\u4e00\u5207\u7684\u6570\u636e\u7ed3\u6784\u3002","title":"\u7b80\u4ecb"},{"location":"ds/lct/#_2","text":"\u7ef4\u62a4\u4e00\u68f5\u6811, \u652f\u6301\u5982\u4e0b\u64cd\u4f5c\u3002 \u4fee\u6539\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u3002 \u67e5\u8be2\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u548c\u3002 \u4fee\u6539\u67d0\u70b9\u5b50\u6811\u6743\u503c\u3002 \u67e5\u8be2\u67d0\u70b9\u5b50\u6811\u6743\u503c\u548c\u3002 \u5514\uff0c \u770b\u4e0a\u53bb\u662f\u4e00\u9053\u6811\u5256\u6a21\u7248\u9898\u3002 \u90a3\u4e48\u6211\u4eec\u52a0\u4e24\u4e2a\u64cd\u4f5c \u65ad\u5f00\u5e76\u8fde\u63a5\u2f00\u4e00\u4e9b\u8fb9, \u4fdd\u8bc1\u4ecd\u662f\u2f00\u4e00\u68f5\u6811\u3002 \u5728\u7ebf\u6c42\u51fa\u4e0a\u2faf\u9762\u7684\u7b54\u6848\u3002 \u2014\u2014\u52a8\u6001\u6811\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\uff1aLink/Cut Tree!","title":"\u95ee\u9898\u5f15\u5165"},{"location":"ds/lct/#_3","text":"\u7ef4\u62a4\u4e00\u4e2a \u68ee\u6797 , \u652f\u6301\u5220\u9664\u67d0\u6761\u8fb9, \u52a0\u2f0a\u67d0\u6761\u8fb9, \u5e76\u4fdd\u8bc1\u52a0\u8fb9, \u5220\u8fb9\u4e4b\u540e\u4ecd\u662f\u68ee\u6797\u3002\u6211\u4eec\u8981\u7ef4\u62a4\u8fd9\u4e2a\u68ee\u6797\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 \u4e00\u822c\u7684\u64cd\u4f5c\u6709\u4e24\u70b9\u8fde\u901a\u6027, \u4e24\u70b9\u8def\u5f84\u6743\u503c\u548c, \u8fde\u63a5\u4e24\u70b9\u548c\u5207\u65ad\u67d0\u6761\u8fb9\u3001\u4fee\u6539\u4fe1\u606f\u7b49\u3002","title":"\u52a8\u6001\u6811\u95ee\u9898"},{"location":"ds/lct/#lct","text":"\u5bf9\u6574\u68f5\u6811\u6309\u5b50\u6811\u2f24\u5c0f\u8fdb\u2f8f\u5256\u5206, \u5e76\u91cd\u65b0\u6807\u53f7\u3002 \u6211\u4eec\u53d1\u73b0\u91cd\u65b0\u6807\u53f7\u4e4b\u540e, \u5728\u6811\u4e0a\u5f62\u6210\u4e86\u4e00\u4e9b\u4ee5\u94fe\u4e3a\u5355\u4f4d\u7684\u8fde\u7eed\u533a\u95f4, \u5e76\u4e14\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u8fdb\u2f8f\u533a\u95f4\u64cd\u4f5c\u3002","title":"\u4ece LCT \u7684\u89d2\u5ea6\u56de\u987e\u4e00\u4e0b\u6811\u94fe\u5256\u5206"},{"location":"ds/lct/#_4","text":"\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u521a\u521a\u8bb2\u7684\u6811\u5256\u662f\u4ee5\u5b50\u6811\u2f24\u5c0f\u4f5c\u4e3a\u5212\u5206\u6761\u4ef6\u3002 \u90a3\u6211\u4eec\u80fd\u4e0d\u80fd\u91cd\u5b9a\u4e49\u4e00\u79cd\u5256\u5206, \u4f7f\u5b83\u66f4\u9002\u5e94\u6211\u4eec\u7684\u52a8\u6001\u6811\u95ee\u9898\u5462? \u8003\u8651\u52a8\u6001\u6811\u95ee\u9898\u9700\u8981\u4ec0\u4e48\u94fe\u3002 \u7531\u4e8e\u52a8\u6001\u7ef4\u62a4\u2f00\u4e2a\u68ee\u6797, \u663e\u7136\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u94fe\u662f\u6211\u4eec\u6307\u5b9a\u7684\u94fe, \u4ee5\u4fbf\u5229\u2f64\u6765\u6c42\u89e3\u3002","title":"\u8f6c\u5411\u52a8\u6001\u6811\u95ee\u9898"},{"location":"ds/lct/#_5","text":"\u5bf9\u4e8e\u2f00\u4e2a\u70b9\u8fde\u5411\u5b83\u6240\u6709\u2f09\u5b50\u7684\u8fb9 , \u6211\u4eec\u2f83\u5df1\u9009\u62e9\u2f00\u6761\u8fb9\u8fdb\u884c\u5256\u5206, \u6211\u4eec\u79f0\u88ab\u9009\u62e9\u7684\u8fb9\u4e3a\u5b9e\u8fb9, \u5176\u4ed6\u8fb9\u5219\u4e3a\u865a\u8fb9\u3002 \u5bf9\u4e8e\u5b9e\u8fb9, \u6211\u4eec\u79f0\u5b83\u6240\u8fde\u63a5\u7684\u2f09\u5b50\u4e3a\u5b9e\u2f09\u5b50\u3002 \u5bf9\u4e8e\u2f00\u6761\u7531\u5b9e\u8fb9\u7ec4\u6210\u7684\u94fe, \u6211\u4eec\u540c\u6837\u79f0\u4e4b\u4e3a\u5b9e\u94fe\u3002 \u8bf7\u8bb0\u4f4f\u6211\u4eec\u9009\u62e9\u5b9e\u94fe\u5256\u5206\u7684\u6700\u91cd\u8981\u7684\u539f\u56e0: \u5b83\u662f\u6211\u4eec\u9009\u62e9\u7684, \u7075\u6d3b\u4e14\u53ef\u53d8\u3002 \u6b63\u662f\u5b83\u7684\u8fd9\u79cd\u7075\u6d3b\u53ef\u53d8\u6027, \u6211\u4eec\u91c7\u7528 Splay Tree \u6765\u7ef4\u62a4\u8fd9\u4e9b\u5b9e\u94fe\u3002","title":"\u5b9e\u94fe\u5256\u5206"},{"location":"ds/lct/#lct_1","text":"\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u628a LCT \u7406\u89e3\u6210\u7528\u2f00\u4e9b Splay \u6765\u7ef4\u62a4\u52a8\u6001\u7684\u6811\u94fe\u5256\u5206, \u4ee5\u671f\u5b9e\u73b0\u52a8\u6001\u6811\u4e0a\u7684\u533a\u95f4\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u6bcf\u6761\u5b9e\u94fe, \u6211\u4eec\u5efa\u2f00\u4e2a Splay \u6765\u7ef4\u62a4\u6574\u4e2a\u94fe\u533a\u95f4\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765, \u6211\u4eec\u6765\u5b66\u4e60 LCT \u7684\u5177\u4f53\u7ed3\u6784\u3002","title":"LCT\uff01"},{"location":"ds/lct/#-","text":"\u6211\u4eec\u521a\u624d\u5728\u8bf4\u7684\u5efa\u6811\u65b9\u6cd5, \u5176\u5b9e\u5c31\u662f\u8f85\u52a9\u6811\u7684\u5efa\u6811\u65b9\u6cd5, \u6211\u4eec\u5148\u6765 \u770b\u2f00\u770b\u8f85\u52a9\u6811\u7684\u4e00\u4e9b\u6027\u8d28, \u518d\u901a\u8fc7\u4e00\u5f20\u56fe\u5b9e\u9645\u4e86\u89e3\u4e00\u4e0b\u8f85\u52a9\u6811\u7684\u5177\u4f53\u7ed3\u6784\u3002 \u6bcf\u2f00\u4e2a Splay \u7ef4\u62a4\u7684\u662f\u4e00\u6761\u8def\u5f84, \u5e76\u4e14\u5728\u539f\u6811\u4e2d\u6240\u6709\u8282\u70b9\u6df1\u5ea6\u4e25\u683c\u9012\u589e, \u5e76\u4e14, \u4e2d\u5e8f\u904d\u5386\u8fd9\u68f5 Splay \u5f97\u5230\u7684\u70b9\u5e8f\u5217\u5217\u7684\u70b9\u6df1\u5ea6\u4e25\u683c\u9012\u589e\u3002 \u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e14\u4ec5\u5305\u542b\u4e8e\u4e00\u68f5 Splay \u4e2d\u3002 \u2f00\u68f5 Splay \u7684\u6839\u8282\u70b9\u7684 Father \u6307\u5411\u5b83\u5728\u8f85\u52a9\u6811\u4e2d\u7684\u7236\u4eb2\u7ed3\u70b9\u3002\u4f46\u662f\u5b83\u7236\u4eb2\u7ed3\u70b9\u7684 ch \u5e76\u6ca1\u6709\u6307\u5411\u8fd9\u4e2a\u70b9\u7684\u3002\u5373\u7236\u4eb2\u4e0d\u4e0d\u2f00\u5b9a\u8ba4\u2f09\u5b50, \u2f7d\u2f09\u5b50\u80fd\u627e\u5230\u2f57\u4eb2\u3002 \u7531\u4e8e LCT \u7684 Access \u64cd\u4f5c\uff08\u540e\u9762\u4f1a\u89e3\u91ca\uff09, \u4f7f\u5f97 3. \u4e2d\u7684\u2f57\u4eb2\u4e0d\u8ba4\u2f09\u5b50\u5bf9\u7b54\u6848\u2f46\u4efb\u4f55\u5f71\u54cd, \u540c\u65f6, \u4e5f\u4f7f\u4e00\u4e9b\u53f6\u2f26\u7ed3\u70b9\u5355\u72ec\u6784\u6210\u4e00\u68f5 Splay \u8f85\u52a9\u6811\u6210\u4e3a\u53ef\u80fd \u7531\u4e8e\u8f85\u52a9\u6811\u7684\u4ee5\u4e0a\u6027\u8d28, \u6211\u4eec\u7ef4\u62a4\u4efb\u4f55\u64cd\u4f5c\u90fd\u4e0d\u4e0d\u9700\u8981\u7ef4\u62a4\u539f\u6811, \u8f85\u52a9\u6811\u53ef\u4ee5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u62ff\u51fa\u4e00\u4e2a\u552f\u4e00\u7684\u539f\u6811, \u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8f85\u52a9\u6811\u5373\u53ef\u3002(\u672c\u53e5\u6765\u6e90\u81ea \u5927\u7237 @PoPoQQQ \u7684 PPT) \u5728\u672c\u6587\u91cc\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u4e00\u4e9b Splay \u6784\u6210\u4e86\u4e00\u4e2a\u8f85\u52a9\u6811\uff0c\u6bcf\u68f5\u8f85\u52a9\u6811\u7ef4\u62a4\u7684\u662f\u4e00\u68f5\u6811\uff0c\u4e00\u4e9b\u8f85\u52a9\u6811\u6784\u6210\u4e86 LCT \uff0c\u5176\u7ef4\u62a4\u7684\u662f\u6574\u4e2a\u68ee\u6797\u3002 \u73b0\u5728\u6211\u4eec\u6709\u2f00\u68f5\u539f\u6811, \u5982\u56fe\u3002 \u52a0\u7c97\u8fb9\u662f\u5b9e\u8fb9, \u865a\u7ebf\u8fb9\u662f\u865a\u8fb9 \u7531\u521a\u521a\u7684\u5b9a\u4e49\uff0c \u8f85\u52a9\u6811\u7684\u7ed3\u6784\u5982\u4e0b","title":"- \u8f85\u52a9\u6811"},{"location":"ds/lct/#_6","text":"\u539f\u6811\u4e2d\u7684\u5b9e\u94fe : \u5728\u8f85\u52a9\u6811\u4e2d\u8282\u70b9\u90fd\u5728\u4e00\u68f5 Splay \u4e2d \u539f\u6811\u4e2d\u7684\u865a\u94fe : \u5728\u8f85\u52a9\u6811\u4e2d, \u5b50\u8282\u70b9\u6240\u5728 Splay \u7684 Father \u6307\u5411\u7236\u8282\u70b9, \u4f46\u662f\u7236\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u90fd\u4e0d\u6307\u5411\u5b50\u8282\u70b9\u3002 \u6ce8\u610f: \u539f\u6811\u7684\u6839 =\u0338\u8f85\u52a9\u6811\u7684\u6839\u3002 \u539f\u6811\u7684 Father \u6307\u5411 =\u0338\u8f85\u52a9\u6811\u7684 Father \u6307\u5411\u3002 \u8f85\u52a9\u6811\u662f\u53ef\u4ee5\u5728\u6ee1\u8db3\u8f85\u52a9\u6811\u3001Splay \u7684\u6027\u8d28\u4e0b\u4efb\u610f\u6362\u6839\u7684\u3002 \u865a\u5b9e\u94fe\u53d8\u6362\u53ef\u4ee5\u8f7b\u677e\u5728\u8f85\u52a9\u6811\u4e0a\u5b8c\u6210, \u8fd9\u4e5f\u5c31\u662f\u5b9e\u73b0\u4e86\u52a8\u6001\u7ef4\u62a4\u6811\u94fe\u5256\u5206\u3002","title":"\u8003\u8651\u539f\u6811\u548c\u8f85\u52a9\u6811\u7684\u7ed3\u6784\u5173\u7cfb"},{"location":"ds/lct/#_7","text":"ch[N][2] \u5de6\u53f3\u2f09\u5b50 f[N] \u2f57\u4eb2\u6307\u5411 sum[N] \u8def\u5f84\u6743\u503c\u548c val[N] \u70b9\u6743 tag[N] \u7ffb\u8f6c\u6807\u8bb0 laz[N] \u6743\u503c\u6807\u8bb0 Other_Vars","title":"\u63a5\u4e0b\u6765\u8981\u7528\u5230\u7684\u53d8\u91cf\u58f0\u660e"},{"location":"ds/lct/#_8","text":"","title":"\u51fd\u6570\u58f0\u660e"},{"location":"ds/lct/#_9","text":"PushUp(x) PushDown(x)","title":"\u2f00\u822c\u6570\u636e\u7ed3\u6784\u51fd\u6570 (\u5b57\u9762\u610f\u601d)"},{"location":"ds/lct/#splay","text":"Get(x) \u83b7\u53d6 x \u662f\u7236\u4eb2\u7684\u54ea\u4e2a\u2f09\u5b50\u3002 Splay(x) \u901a\u8fc7\u548c Rotate \u64cd\u4f5c\u8054\u52a8\u5b9e\u73b0\u628a x \u65cb\u8f6c\u5230 \u5f53\u524d Splay \u7684\u6839\u3002 Rotate(x) \u5c06 x \u5411\u4e0a\u65cb\u8f6c\u4e00\u5c42\u7684\u64cd\u4f5c\u3002","title":"Splay \u7cfb\u51fd\u6570 (\u4e0d\u4f1a\u591a\u505a\u89e3\u91ca)"},{"location":"ds/lct/#_10","text":"IsRoot(x) \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u6240\u5728 Splay \u7684\u6839 Access(x) \u628a\u4ece\u6839\u5230\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u70b9\u653e\u5728\u2f00\u6761\u5b9e\u94fe\u91cc, \u4f7f\u6839\u5230\u5b83\u6210\u4e3a\u4e00\u6761\u5b9e\u8def\u5f84, \u5e76\u4e14\u5728\u540c\u4e00\u68f5 Splay \u91cc\u91cc\u3002 Update(x) \u5728 Access \u64cd\u4f5c\u4e4b\u540e, \u9012\u5f52\u7684\u4ece\u4e0a\u5230\u4e0b Pushdown \u66f4\u66f4\u65b0\u4fe1 \u606f\u3002 MakeRoot(x) \u4f7f x \u70b9\u6210\u4e3a\u6574\u4e2a\u8f85\u52a9\u6811\u7684\u6839\u3002 Link(x, y) \u5728 x, y \u4e24\u70b9\u95f4\u8fde\u2f00\u4e00\u6761\u8fb9\u3002 Cut(x, y) \u628a x, y \u4e24\u70b9\u95f4\u8fb9\u5220\u6389\u3002 Find(x) \u627e\u5230 x \u6240\u5728\u7684 Splay \u7684\u6839\u8282\u70b9\u7f16\u53f7\u3002 Fix(x, v) \u4fee\u6539 x \u7684\u70b9\u6743\u4e3a v\u3002 Split(x, y) \u63d0\u53d6\u51fa\u6765 x, y \u95f4\u7684\u8def\u8def\u5f84, \u2f45\u65b9\u4fbf\u4fbf\u505a\u533a\u95f4\u64cd\u4f5c","title":"\u65b0\u64cd\u4f5c"},{"location":"ds/lct/#_11","text":"#define ls ch[p][0] #define rs ch[p][1]","title":"\u5b8f\u5b9a\u4e49"},{"location":"ds/lct/#_12","text":"\u5148\u4ece\u7b80\u5355\u7684\u6765\u5427","title":"\u51fd\u6570\u8bb2\u89e3"},{"location":"ds/lct/#pushup","text":"1 2 3 4 5 inline void PushUp ( int p ) { __var1 [ p ] = __var1 [ ls ] \"operator 1\" __var1 [ rs ] \"operator 2\" __var1 [ p ] / __siz [ p ]; siz [ p ] = siz [ ls ] + siz [ rs ]; }","title":"PushUp()"},{"location":"ds/lct/#pushdown","text":"1 2 3 4 5 6 inline void PushDown ( int p ) { if ( __tag1 [ p ] != std_tag1 ) { // do ls & do rs __tag1 [ p ] = std_tag1 ; } }","title":"PushDown()"},{"location":"ds/lct/#splay-rotate","text":"\u6709\u4e9b\u4e0d\u4e00\u6837\u4e86\u54e6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #define Get(x) (ch[f[x]][1] == x) inline void Rotate ( int x ) { int y = f [ x ], z = f [ y ], k = Get ( x ); if ( ! isRoot ( y )) ch [ z ][ ch [ z ][ 1 ] == y ] = x ; // \u4e0a\u9762\u8fd9\u53e5\u4e00\u5b9a\u8981\u5199\u5728\u524d\u9762\uff0c\u666e\u901a\u7684Splay\u662f\u4e0d\u7528\u7684\uff0c\u56e0\u4e3a isRoot (\u540e\u9762\u4f1a\u8bb2) ch [ y ][ k ] = ch [ x ][ ! k ], f [ ch [ y ][ k ]] = y ; ch [ x ][ ! k ] = y , f [ y ] = x , f [ x ] = z ; PushUp ( x ), PushUp ( y ); } inline void Splay ( int x ) { Update ( x ); // \u9a6c\u4e0a\u5c31\u80fd\u770b\u5230\u5566\u3002 \u5728 Splay\u4e4b\u524d\u8981\u628a\u65cb\u8f6c\u4f1a\u7ecf\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u90fdPushDown for ( int fa ; fa = f [ x ], ! isRoot ( x ); Rotate ( x )) { if ( ! isRoot ( fa )) Rotate ( Get ( fa ) == Get ( x ) ? fa : x ); } } \u5982\u679c\u4e0a\u9762\u7684\u51e0\u4e2a\u51fd\u6570\u4f60\u770b\u4e0d\u61c2\uff0c\u8bf7\u79fb\u6b65 Splay \u4e0b\u9762\u8981\u5f00\u59cb LCT \u72ec\u6709\u7684\u51fd\u6570\u4e86\u54e6","title":"Splay() &amp;&amp; Rotate()"},{"location":"ds/lct/#isroot","text":"1 2 3 // \u5728\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7\uff0cLCT \u5177\u6709 \u5982\u679c\u4e00\u4e2a\u513f\u5b50\u4e0d\u662f\u5b9e\u513f\u5b50\uff0c\u4ed6\u7684\u7236\u4eb2\u627e\u4e0d\u5230\u5b83\u7684\u6027\u8d28 // \u6240\u4ee5\u5f53\u4e00\u4e2a\u70b9\u65e2\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u5de6\u513f\u5b50\uff0c\u53c8\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u5b83\u5c31\u662f\u5f53\u524d Splay \u7684\u6839 #define isRoot(x) (ch[f[x]][0] != x && ch[f[x]][1] != x)","title":"isRoot()"},{"location":"ds/lct/#access","text":"1 2 3 4 5 6 7 8 // Access \u662f LCT // \u7684\u6838\u5fc3\u64cd\u4f5c\uff0c\u8bd5\u60f3\u6211\u4eec\u50cf\u6c42\u89e3\u4e00\u6761\u8def\u5f84\uff0c\u800c\u8fd9\u6761\u8def\u5f84\u6070\u597d\u5c31\u662f\u6211\u4eec\u5f53\u524d\u7684\u4e00\u68f5 Splay\uff0c // \u76f4\u63a5\u8c03\u7528\u5176\u4fe1\u606f\u5373\u53ef \u5148\u6765\u770b\u4e00\u4e0b\u4ee3\u7801\uff0c\u518d\u7ed3\u5408\u56fe\u6765\u770b\u770b\u8fc7\u7a0b inline void Access ( int x ) { for ( int p = 0 ; x ; p = x , x = f [ x ]) { Splay ( x ), ch [ x ][ 1 ] = p , PushUp ( x ); } } \u6211\u4eec\u6709\u8fd9\u6837\u4e00\u68f5\u6811\uff0c\u5b9e\u7ebf\u4e3a\u5b9e\u8fb9\uff0c\u865a\u7ebf\u4e3a\u865a\u8fb9 \u5b83\u7684\u8f85\u52a9\u6811\u53ef\u80fd\u957f\u6210\u8fd9\u6837 (\u6784\u56fe\u65b9\u5f0f\u4e0d\u540c\u53ef\u80fd LCT \u7684\u7ed3\u6784\u4e5f\u4e0d\u540c) \u6bcf\u4e2a\u7eff\u6846\u91cc\u662f\u4e00\u68f5 Splay\u3002 \u73b0\u5728\u6211\u4eec\u8981 Access(N), \u628a A-N \u7684\u8def\u5f84\u90fd\u53d8\u5b9e, \u62c9\u6210\u4e00\u68f5 Splay \u5b9e\u73b0\u7684\u65b9\u6cd5\u662f\u4ece\u4e0b\u5230\u4e0a\u9010\u6b65\u66f4\u65b0 Splay \u9996\u5148\u6211\u4eec\u8981\u628a N \u65cb\u81f3\u5f53\u524d Splay \u7684\u6839\u3002 \u4e3a\u4e86\u4fdd\u8bc1 AuxTree \u7684\u6027\u8d28, \u539f\u6765 N\u2014\u2014O \u7684\u5b9e\u8fb9\u8981\u66f4\u6539\u4e3a\u865a\u8fb9\u3002 \u7531\u4e8e\u8ba4\u7236\u4e0d\u8ba4\u5b50\u7684\u6027\u8d28, \u6211\u4eec\u53ef\u4ee5\u5355\u65b9\u9762\u7684\u628a N \u7684\u513f\u5b50\u6539\u4e3a Null\u3002 \u4e8e\u662f\u539f\u6765\u7684 Aux \u5c31\u4ece\u4e0b\u56fe\u53d8\u6210\u4e86\u4e0b\u4e0b\u56fe\u3002 \u4e0b\u4e00\u6b65, \u6211\u4eec\u628a N \u6307\u5411\u7684 Father-> I \u4e5f\u65cb\u8f6c\u5230\u5b83 (I) \u7684 Splay \u6811\u6839\u3002 \u539f\u6765\u7684\u5b9e\u8fb9 I \u2014\u2014 K \u8981\u53bb\u6389, \u8fd9\u65f6\u5019\u6211\u4eec\u628a I \u7684\u53f3\u513f\u5b50\u6307\u5411 N, \u5c31\u5f97\u5230\u4e86 I\u2014\u2014L \u8fd9\u6837\u4e00\u68f5 Splay\u3002 \u63a5\u4e0b\u6765, \u6309\u7167\u521a\u521a\u7684\u64cd\u4f5c\u6b65\u9aa4, \u7531\u4e8e I \u7684 Father \u6307\u5411 H, \u6211\u4eec\u628a H \u65cb\u8f6c\u5230\u4ed6\u6240\u5728 Splay Tree \u7684\u6839, \u7136\u540e\u628a H \u7684 rs \u8bbe\u4e3a I\u3002 \u4e4b\u540e\u7684\u6811\u662f\u8fd9\u6837\u7684\u3002 \u540c\u7406\u6211\u4eec Splay(A) , \u5e76\u628a A \u7684\u53f3\u513f\u5b50\u6307\u5411 H\u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u4e00\u68f5 AuxTree\u3002\u5e76\u4e14\u53d1\u73b0 A\u2014\u2014N \u7684\u6574\u4e2a\u8def\u5f84\u5df2\u7ecf\u5728\u540c\u4e00\u68f5 Splay \u4e2d\u4e86\u3002\u5927\u529f\u544a\u6210\uff01 1 2 3 4 5 6 // \u56de\u987e\u4e00\u4e0b\u4ee3\u7801 inline void Access ( int x ) { for ( int p = 0 ; x ; p = x , x = f [ x ]) { Splay ( x ), ch [ x ][ 1 ] = p , PushUp ( x ); } } \u6211\u4eec\u53d1\u73b0 Access() \u5176\u5b9e\u5f88\u5bb9\u6613\u3002\u53ea\u6709\u5982\u4e0b\u56db\u6b65\u64cd\u4f5c\uff1a \u628a\u5f53\u524d\u8282\u70b9\u8f6c\u5230\u6839\u3002 \u628a\u513f\u5b50\u6362\u6210\u4e4b\u524d\u7684\u8282\u70b9\u3002 \u66f4\u65b0\u5f53\u524d\u70b9\u7684\u4fe1\u606f\u3002 \u628a\u5f53\u524d\u70b9\u6362\u6210\u5f53\u524d\u70b9\u7684\u7236\u4eb2, \u7ee7\u7eed\u64cd\u4f5c\u3002","title":"Access()\u00a0"},{"location":"ds/lct/#update","text":"1 2 3 4 // \u4ece\u4e0a\u5230\u4e0b\u4e00\u5c42\u4e00\u5c42pushDown \u5373\u53ef void Update ( int p ) { if ( ! isRoot ( p )) Update ( f [ p ]) pushDown ( p ); }","title":"Update()"},{"location":"ds/lct/#makeroot","text":"Make_Root() \u7684\u91cd\u8981\u6027\u4e1d\u6beb\u4e0d\u4e9a\u4e8e Access() \u3002 \u6211\u4eec\u5728\u9700\u8981\u7ef4\u62a4\u8def\u5f84\u4fe1\u606f\u7684\u65f6\u5019, \u4e00\u5b9a\u4f1a\u51fa\u73b0\u8def\u5f84\u6df1\u5ea6\u65e0\u6cd5\u4e25\u683c\u9012\u589e\u7684\u60c5\u51b5, \u6839\u636e Aux \u7684\u6027\u8d28, \u8fd9\u79cd\u8def\u5f84\u662f\u4e0d\u80fd\u51fa\u73b0\u5728\u4e00\u68f5 Splay \u4e2d\u7684\u3002 \u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u5230 Make_Root()\u3002 Make_Root() \u3002\u7684\u4f5c\u7528\u662f\u4f7f\u6307\u5b9a\u7684\u70b9\u6210\u4e3a\u539f\u6811\u7684\u6839, \u8003\u8651\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u64cd\u4f5c\u3002 \u6211\u4eec\u53d1\u73b0 Access(x) \u540e, x \u5728 Splay \u4e2d\u4e00\u5b9a\u662f\u6df1\u5ea6\u6700\u5927\u7684\u70b9 (\u4ece\u6839\u5230 x, \u6df1\u5ea6\u4e25\u683c\u9012\u589e)\u3002 \u800c\u53d8\u6210\u6839\u5373\u662f\u53d8\u6210\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u3002\u6211\u4eec Splay(x) , \u53d1\u73b0\u8fd9\u65f6\u5019 x \u5e76\u6ca1\u6709\u53f3\u5b50\u6811 (\u5373\u6240\u6709\u70b9\u6df1\u5ea6\u90fd\u6bd4\u5b83\u6d45)\u3002\u90a3\u6211\u4eec\u628a x \u7684\u5de6\u53f3\u513f\u5b50\u4ea4\u6362\u4e00\u4e0b, \u53d8\u6210\u4e86 x \u6ca1\u6709\u5de6\u5b50\u6811, \u5728 Aux \u610f\u4e49\u4e0a\u5c31\u662f\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u4e86, \u5373\u8fbe\u5230\u76ee\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u4ea4\u6362\u5de6\u53f3\u513f\u5b50, \u5e76\u7ed9\u53f3\u513f\u5b50\u6253\u4e00\u4e2a\u7ffb\u8f6c\u6807\u8bb0\u5373\u53ef\u3002(\u6b64\u65f6\u5de6\u513f\u5b50\u6ca1\u6709\u503c)\u3002 1 2 3 4 5 inline void makeRoot ( int p ) { Access ( p ), Splay ( p ); swap ( ls , rs ); tag [ p ] ^= 1 ; }","title":"makeRoot()"},{"location":"ds/lct/#link","text":"Link \u4e24\u4e2a\u70b9\u5176\u5b9e\u5f88\u7b80\u5355, \u5148 Make_Root(x) , \u7136\u540e\u628a x \u7684\u7236\u4eb2\u6307\u5411 y \u5373\u53ef\u3002\u663e\u7136, \u8fd9\u4e2a\u64cd\u4f5c\u80af\u5b9a\u4e0d\u80fd\u53d1\u751f\u5728\u540c\u4e00\u68f5\u6811\u5185 OTZ\u3002\u8bb0\u5f97\u5148\u5224\u4e00\u4e0b\u3002 1 2 3 4 inline void Link ( int x , int p ) { makeRoot ( x ); f [ x ] = p ; }","title":"Link()"},{"location":"ds/lct/#split","text":"Split \u64cd\u4f5c\u610f\u4e49\u5f88\u7b80\u5355, \u5c31\u662f\u62ff\u51fa\u4e00\u68f5 Splay , \u7ef4\u62a4\u7684\u662f x \u5230 y \u7684\u8def\u5f84\u3002 \u5148 MakeRoot(x) , \u7136\u540e Access(y) \u3002\u5982\u679c\u8981 y \u505a\u6839, \u518d Splay(y) \u3002 \u5c31\u8fd9\u4e09\u53e5\u8bdd, \u6ca1\u5199\u4ee3\u7801, \u9700\u8981\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u6253\u8fd9\u4e09\u4e2a\u5c31\u597d\u8fa3\uff01 \u53e6\u5916 Split \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u76f4\u63a5\u53ef\u4ee5\u628a\u9700\u8981\u7684\u8def\u5f84\u62ff\u51fa\u5230 y \u7684\u5b50\u6811\u4e0a, \u90a3\u4e0d\u662f\u968f\u4fbf\u5e72\u561b\u54af\u3002","title":"Split()"},{"location":"ds/lct/#cut","text":"Cut \u6709\u4e24\u79cd\u60c5\u51b5, \u4fdd\u8bc1\u5408\u6cd5\u548c\u4e0d\u4e00\u5b9a\u4fdd\u8bc1\u5408\u6cd5\u3002(\u5e9f\u8bdd) \u5982\u679c\u4fdd\u8bc1\u5408\u6cd5, \u76f4\u63a5 split(x, y) , \u8fd9\u65f6\u5019 y \u662f\u6839, x \u4e00\u5b9a\u662f\u5b83\u7684\u513f\u5b50, \u53cc\u5411\u65ad\u5f00\u5373\u53ef , \u5c31\u50cf\u8fd9\u6837\uff1a 1 2 3 inline void Cut ( int x , int p ) { makeRoot ( x ), Access ( p ), Splay ( p ), ls = f [ x ] = 0 ; } \u5982\u679c\u662f\u4e0d\u4fdd\u8bc1\u5408\u6cd5, \u6211\u4eec\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709, \u6211\u9009\u62e9\u4f7f\u7528 Map \u5b58\u4e00\u4e0b, \u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5229\u7528\u6027\u8d28\u7684\u65b9\u6cd5\uff1a \u60f3\u8981\u5220\u8fb9, \u5fc5\u987b\u8981\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a x, y \u8fde\u901a\u3002 x, y \u7684\u8def\u5f84\u4e0a\u6ca1\u6709\u5176\u4ed6\u7684\u94fe\u3002 x \u6ca1\u6709\u53f3\u513f\u5b50\u3002 \u603b\u7ed3\u4e00\u4e0b, \u4e0a\u9762\u4e09\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u4e00\u4e2a\uff1ax, y \u6709\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\u5c31\u7559\u4f5c\u4e00\u4e2a\u601d\u8003\u9898\u7ed9\u5927\u5bb6\u3002\u5224\u65ad\u8fde\u901a\u9700\u8981\u7528\u5230\u540e\u9762\u7684 Find , \u5176\u4ed6\u4e24\u70b9\u7a0d\u4f5c\u601d\u8003\u5206\u6790\u4e00\u4e0b\u7ed3\u6784\u5c31\u77e5\u9053\u8be5\u600e\u4e48\u5224\u65ad\u4e86\u3002","title":"Cut()"},{"location":"ds/lct/#find","text":"Find() \u5176\u5b9e\u5c31\u662f\u627e\u5230\u5f53\u524d\u8f85\u52a9\u6811\u7684\u6839\u3002\u5728 Access(p) \u540e, \u518d splay(p)\u3002\u8fd9\u6837\u6839\u5c31\u662f\u6811\u91cc\u6700\u5c0f\u7684\u90a3\u4e2a, \u4e00\u76f4\u5f80 ls \u8d70, \u6cbf\u9014 PushDown \u5373\u53ef\u3002 \u4e00\u76f4\u8d70\u5230\u6ca1\u6709 ls, \u975e\u5e38\u7b80\u5355\u3002 1 2 3 4 5 inline int Find ( int p ) { Access ( p ), Splay ( p ); while ( ls ) pushDown ( p ), p = ls ; return p ; }","title":"Find()"},{"location":"ds/lct/#_13","text":"\u5e72\u70b9\u5565\u4e00\u5b9a\u8981\u60f3\u4e00\u60f3\u9700\u4e0d\u9700\u8981 PushUp \u6216\u8005 PushDown, LCT \u7531\u4e8e\u7279\u522b\u7075\u6d3b\u7684\u539f\u56e0, \u5c11 Pushdown \u6216\u8005 Pushup \u4e00\u6b21\u5c31\u53ef\u80fd\u628a\u4fee\u6539\u6539\u5230\u4e0d\u8be5\u6539\u7684\u70b9\u4e0a! \u5b83\u7684 rotate \u548c splay \u7684\u4e0d\u592a\u4e00\u6837, if(z) \u4e00\u5b9a\u8981\u653e\u5728\u524d\u9762\u3002 \u5b83\u7684 splay \u5c31\u662f\u65cb\u8f6c\u5230\u6839, \u6ca1\u6709\u65cb\u8f6c\u5230\u8c01\u513f\u5b50\u7684\u64cd\u4f5c, \u56e0\u4e3a\u4e0d\u9700\u8981\u3002","title":"\u4e00\u4e9b\u63d0\u9192"},{"location":"ds/lct/#_14","text":"BZOJ_2049 BZOJ_3282 BZOJ_2002 BZOJ_2631","title":"\u4e00\u4e9b\u9898"},{"location":"ds/linked-list/","text":"\u94fe\u8868\u53ef\u4ee5\u65b9\u4fbf\u5730\u5220\u9664\u3001\u63d2\u5165\u662f O(1) O(1) \u7684\uff0c\u800c\u968f\u673a\u8bbf\u95ee\u662f O(n) O(n) \u7684\u3002 \u548c\u6570\u7ec4\u533a\u5206\uff1a\u5220\u9664\u3001\u63d2\u5165\u662f O(n) O(n) \u7684\uff0c\u800c\u968f\u673a\u8bbf\u95ee\u662f O(1) O(1) \u7684\u3002","title":"\u94fe\u8868"},{"location":"ds/monotonous-queue/","text":"\u5728\u5b66\u4e60\u5355\u8c03\u961f\u5217\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u6765\u770b\u4e00\u9053\u4f8b\u9898 \u4f8b\u9898 \u00b6 Sliding Window \u672c\u9898\u5927\u610f\u662f\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4\uff0c\u7f16\u7a0b\u8f93\u51fa\u6bcf k k \u4e2a\u8fde\u7eed\u7684\u6570\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u6700\u5e38\u7528\uff08 \u66b4\u529b \uff09\u7684\u60f3\u6cd5\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6bb5 i \\sim i+k-1 i \\sim i+k-1 \u7684\u5e8f\u5217\uff0c\u9010\u4e2a\u6bd4\u8f83\u6765\u627e\u51fa\u6700\u5927\u503c\uff08\u548c\u6700\u5c0f\u503c\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a O(n \\times k) O(n \\times k) \u3002 \u5f88\u663e\u7136\uff0c\u8fd9\u5176\u4e2d\u8fdb\u884c\u4e86\u5927\u91cf\u91cd\u590d\u5de5\u4f5c\uff0c\u9664\u4e86\u5f00\u5934 k-1 k-1 \u4e2a\u548c\u7ed3\u5c3e k-1 k-1 \u4e2a\u6570\u4e4b\u5916\uff0c\u6bcf\u4e2a\u6570\u90fd\u8fdb\u884c\u4e86 k k \u6b21\u6bd4\u8f83\uff0c\u800c\u9898\u4e2d 100\\% 100\\% \u7684\u6570\u636e\u4e3a n \\le 1000000 n \\le 1000000 \uff0c\u5f53 k k \u7a0d\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u663e\u7136\u4f1a\u51fa\u73b0 TLE \u8fd9\u65f6\u6240\u7528\u5230\u7684\u5c31\u662f\u5355\u8c03\u961f\u5217\u4e86 \u6982\u5ff5 \u00b6 \u987e\u540d\u601d\u4e49\uff0c\u5355\u8c03\u961f\u5217\u7684\u91cd\u70b9\u5206\u4e3a \"\u5355\u8c03\" \u548c \"\u961f\u5217\" \"\u5355\u8c03\" \u6307\u7684\u662f\u5143\u7d20\u7684\u7684 \"\u89c4\u5f8b\"\u2014\u2014\u9012\u589e (\u6216\u9012\u51cf) \"\u961f\u5217\" \u6307\u7684\u662f\u5143\u7d20\u53ea\u80fd\u4ece\u961f\u5934\u548c\u961f\u5c3e\u8fdb\u884c\u64cd\u4f5c Ps. \u5355\u8c03\u961f\u5217\u4e2d\u7684 \"\u961f\u5217\" \u4e0e\u6b63\u5e38\u7684\u961f\u5217\u6709\u4e00\u5b9a\u7684\u533a\u522b\uff0c\u7a0d\u540e\u4f1a\u63d0\u5230 \u4f8b\u9898\u5206\u6790 \u00b6 \u6709\u4e86\u4e0a\u9762 \"\u5355\u8c03\u961f\u5217\" \u7684\u6982\u5ff5\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u5355\u8c03\u961f\u5217\u8fdb\u884c\u4f18\u5316 \u8981\u6c42\u7684\u662f\u6bcf\u8fde\u7eed\u7684 k k \u4e2a\u6570\u4e2d\u7684\u6700\u5927\uff08\u6700\u5c0f\uff09\u503c\uff0c\u5f88\u660e\u663e\uff0c\u5f53\u4e00\u4e2a\u6570\u8fdb\u5165\u6240\u8981 \"\u5bfb\u627e\" \u6700\u5927\u503c\u7684\u8303\u56f4\u4e2d\u65f6\uff0c\u82e5\u8fd9\u4e2a\u6570\u6bd4\u5176\u524d\u9762\uff08\u5148\u8fdb\u961f\uff09\u7684\u6570\u8981\u5927\uff0c\u663e\u7136\uff0c\u524d\u9762\u7684\u6570\u4f1a\u6bd4\u8fd9\u4e2a\u6570\u5148\u51fa\u961f\u4e14\u4e0d\u518d\u53ef\u80fd\u662f\u6700\u5927\u503c \u4e5f\u5c31\u662f\u8bf4\u2014\u2014\u5f53\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u65f6\uff0c\u53ef\u5c06\u524d\u9762\u7684\u6570 \"\u5f39\u51fa\"\uff0c\u518d\u5c06\u8be5\u6570\u771f\u6b63 push \u8fdb\u961f\u5c3e \u8fd9\u5c31\u76f8\u5f53\u4e8e\u7ef4\u62a4\u4e86\u4e00\u4e2a\u9012\u51cf\u7684\u961f\u5217\uff0c\u7b26\u5408\u5355\u8c03\u961f\u5217\u7684\u5b9a\u4e49\uff0c\u51cf\u5c11\u4e86\u91cd\u590d\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u4e0d\u4ec5\u5982\u6b64\uff0c\u7531\u4e8e\u7ef4\u62a4\u51fa\u7684\u961f\u4f0d\u662f\u67e5\u8be2\u8303\u56f4\u5185\u7684\u4e14\u662f\u9012\u51cf\u7684\uff0c\u961f\u5934\u5fc5\u5b9a\u662f\u8be5\u67e5\u8be2\u533a\u57df\u5185\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u8f93\u51fa\u65f6\u53ea\u9700\u8f93\u51fa\u961f\u5934\u5373\u53ef \u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u5728\u8fd9\u6837\u7684\u7b97\u6cd5\u4e2d\uff0c\u6bcf\u4e2a\u6570\u53ea\u8981\u8fdb\u961f\u4e0e\u51fa\u961f\u5404\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u88ab\u964d\u5230\u4e86 O(N) O(N) \u800c\u7531\u4e8e\u67e5\u8be2\u533a\u95f4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u8d85\u51fa\u67e5\u8be2\u7a7a\u95f4\u7684\u503c\u518d\u5927\u4e5f\u4e0d\u80fd\u8f93\u51fa\uff0c\u56e0\u6b64\u8fd8\u9700\u8981 site \u6570\u7ec4\u8bb0\u5f55\u7b2c i i \u4e2a\u961f\u4e2d\u7684\u6570\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u5f39\u51fa\u8d8a\u754c\u7684\u961f\u5934 \u4f8b\u9898\u4ee3\u7801 Ps. \u6b64\u5904\u7684 \"\u961f\u5217\" \u8ddf\u666e\u901a\u961f\u5217\u7684\u4e00\u5927\u4e0d\u540c\u5c31\u5728\u4e8e\u53ef\u4ee5\u4ece\u961f\u5c3e\u8fdb\u884c\u64cd\u4f5c\uff0c C++ \u4e2d\u6709\u76f8\u4f3c\u7684\u6570\u636e\u7ed3\u6784 deque","title":"\u5355\u8c03\u961f\u5217"},{"location":"ds/monotonous-queue/#_1","text":"Sliding Window \u672c\u9898\u5927\u610f\u662f\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4\uff0c\u7f16\u7a0b\u8f93\u51fa\u6bcf k k \u4e2a\u8fde\u7eed\u7684\u6570\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u6700\u5e38\u7528\uff08 \u66b4\u529b \uff09\u7684\u60f3\u6cd5\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6bb5 i \\sim i+k-1 i \\sim i+k-1 \u7684\u5e8f\u5217\uff0c\u9010\u4e2a\u6bd4\u8f83\u6765\u627e\u51fa\u6700\u5927\u503c\uff08\u548c\u6700\u5c0f\u503c\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a O(n \\times k) O(n \\times k) \u3002 \u5f88\u663e\u7136\uff0c\u8fd9\u5176\u4e2d\u8fdb\u884c\u4e86\u5927\u91cf\u91cd\u590d\u5de5\u4f5c\uff0c\u9664\u4e86\u5f00\u5934 k-1 k-1 \u4e2a\u548c\u7ed3\u5c3e k-1 k-1 \u4e2a\u6570\u4e4b\u5916\uff0c\u6bcf\u4e2a\u6570\u90fd\u8fdb\u884c\u4e86 k k \u6b21\u6bd4\u8f83\uff0c\u800c\u9898\u4e2d 100\\% 100\\% \u7684\u6570\u636e\u4e3a n \\le 1000000 n \\le 1000000 \uff0c\u5f53 k k \u7a0d\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u663e\u7136\u4f1a\u51fa\u73b0 TLE \u8fd9\u65f6\u6240\u7528\u5230\u7684\u5c31\u662f\u5355\u8c03\u961f\u5217\u4e86","title":"\u4f8b\u9898"},{"location":"ds/monotonous-queue/#_2","text":"\u987e\u540d\u601d\u4e49\uff0c\u5355\u8c03\u961f\u5217\u7684\u91cd\u70b9\u5206\u4e3a \"\u5355\u8c03\" \u548c \"\u961f\u5217\" \"\u5355\u8c03\" \u6307\u7684\u662f\u5143\u7d20\u7684\u7684 \"\u89c4\u5f8b\"\u2014\u2014\u9012\u589e (\u6216\u9012\u51cf) \"\u961f\u5217\" \u6307\u7684\u662f\u5143\u7d20\u53ea\u80fd\u4ece\u961f\u5934\u548c\u961f\u5c3e\u8fdb\u884c\u64cd\u4f5c Ps. \u5355\u8c03\u961f\u5217\u4e2d\u7684 \"\u961f\u5217\" \u4e0e\u6b63\u5e38\u7684\u961f\u5217\u6709\u4e00\u5b9a\u7684\u533a\u522b\uff0c\u7a0d\u540e\u4f1a\u63d0\u5230","title":"\u6982\u5ff5"},{"location":"ds/monotonous-queue/#_3","text":"\u6709\u4e86\u4e0a\u9762 \"\u5355\u8c03\u961f\u5217\" \u7684\u6982\u5ff5\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u5355\u8c03\u961f\u5217\u8fdb\u884c\u4f18\u5316 \u8981\u6c42\u7684\u662f\u6bcf\u8fde\u7eed\u7684 k k \u4e2a\u6570\u4e2d\u7684\u6700\u5927\uff08\u6700\u5c0f\uff09\u503c\uff0c\u5f88\u660e\u663e\uff0c\u5f53\u4e00\u4e2a\u6570\u8fdb\u5165\u6240\u8981 \"\u5bfb\u627e\" \u6700\u5927\u503c\u7684\u8303\u56f4\u4e2d\u65f6\uff0c\u82e5\u8fd9\u4e2a\u6570\u6bd4\u5176\u524d\u9762\uff08\u5148\u8fdb\u961f\uff09\u7684\u6570\u8981\u5927\uff0c\u663e\u7136\uff0c\u524d\u9762\u7684\u6570\u4f1a\u6bd4\u8fd9\u4e2a\u6570\u5148\u51fa\u961f\u4e14\u4e0d\u518d\u53ef\u80fd\u662f\u6700\u5927\u503c \u4e5f\u5c31\u662f\u8bf4\u2014\u2014\u5f53\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u65f6\uff0c\u53ef\u5c06\u524d\u9762\u7684\u6570 \"\u5f39\u51fa\"\uff0c\u518d\u5c06\u8be5\u6570\u771f\u6b63 push \u8fdb\u961f\u5c3e \u8fd9\u5c31\u76f8\u5f53\u4e8e\u7ef4\u62a4\u4e86\u4e00\u4e2a\u9012\u51cf\u7684\u961f\u5217\uff0c\u7b26\u5408\u5355\u8c03\u961f\u5217\u7684\u5b9a\u4e49\uff0c\u51cf\u5c11\u4e86\u91cd\u590d\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u4e0d\u4ec5\u5982\u6b64\uff0c\u7531\u4e8e\u7ef4\u62a4\u51fa\u7684\u961f\u4f0d\u662f\u67e5\u8be2\u8303\u56f4\u5185\u7684\u4e14\u662f\u9012\u51cf\u7684\uff0c\u961f\u5934\u5fc5\u5b9a\u662f\u8be5\u67e5\u8be2\u533a\u57df\u5185\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u8f93\u51fa\u65f6\u53ea\u9700\u8f93\u51fa\u961f\u5934\u5373\u53ef \u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u5728\u8fd9\u6837\u7684\u7b97\u6cd5\u4e2d\uff0c\u6bcf\u4e2a\u6570\u53ea\u8981\u8fdb\u961f\u4e0e\u51fa\u961f\u5404\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u88ab\u964d\u5230\u4e86 O(N) O(N) \u800c\u7531\u4e8e\u67e5\u8be2\u533a\u95f4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u8d85\u51fa\u67e5\u8be2\u7a7a\u95f4\u7684\u503c\u518d\u5927\u4e5f\u4e0d\u80fd\u8f93\u51fa\uff0c\u56e0\u6b64\u8fd8\u9700\u8981 site \u6570\u7ec4\u8bb0\u5f55\u7b2c i i \u4e2a\u961f\u4e2d\u7684\u6570\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u5f39\u51fa\u8d8a\u754c\u7684\u961f\u5934 \u4f8b\u9898\u4ee3\u7801 Ps. \u6b64\u5904\u7684 \"\u961f\u5217\" \u8ddf\u666e\u901a\u961f\u5217\u7684\u4e00\u5927\u4e0d\u540c\u5c31\u5728\u4e8e\u53ef\u4ee5\u4ece\u961f\u5c3e\u8fdb\u884c\u64cd\u4f5c\uff0c C++ \u4e2d\u6709\u76f8\u4f3c\u7684\u6570\u636e\u7ed3\u6784 deque","title":"\u4f8b\u9898\u5206\u6790"},{"location":"ds/monotonous-stack/","text":"\u4f55\u4e3a\u5355\u8c03\u6808 \u00b6 \u987e\u540d\u601d\u4e49\uff0c\u5355\u8c03\u6808\u5373\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u6808\u7ed3\u6784\u3002\u4e0e\u5355\u8c03\u961f\u5217\u76f8\u6bd4\uff0c\u5176\u53ea\u5728\u4e00\u7aef\u8fdb\u884c\u8fdb\u51fa\u3002 \u4e3a\u4e86\u63cf\u8ff0\u65b9\u4fbf\uff0c\u4ee5\u4e0b\u4e3e\u4f8b\u53ca\u4f2a\u4ee3\u7801\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6574\u6570\u7684\u5355\u8c03\u9012\u589e\u6808\u4e3a\u4f8b\u3002 \u5982\u4f55\u4f7f\u7528\u5355\u8c03\u6808 \u00b6 \u63d2\u5165 \u00b6 \u5c06\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5355\u8c03\u6808\u65f6\uff0c\u4e3a\u4e86\u7ef4\u62a4\u6808\u7684\u5355\u8c03\u6027\uff0c\u9700\u8981\u5728\u4fdd\u8bc1\u5c06\u8be5\u5143\u7d20\u63d2\u5165\u5230\u6808\u9876\u540e\u6574\u4e2a\u6808\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u524d\u63d0\u4e0b\u5f39\u51fa\u6700\u5c11\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u6808\u4e2d\u81ea\u9876\u5411\u4e0b\u7684\u5143\u7d20\u4e3a {1,3,5,10,30,50} {1,3,5,10,30,50} \uff0c\u63d2\u5165\u5143\u7d20 20 20 \u65f6\u4e3a\u4e86\u4fdd\u8bc1\u5355\u8c03\u6027\u9700\u8981\u4f9d\u6b21\u5f39\u51fa\u5143\u7d20 1,3,5,10 1,3,5,10 \uff0c\u64cd\u4f5c\u540e\u6808\u53d8\u4e3a 20,30,50 20,30,50 \u3002 \u7528\u4f2a\u4ee3\u7801\u63cf\u8ff0\u5982\u4e0b\uff1a 1 2 3 4 insert x while !sta.empty() && sta.top()<x sta.pop() sta.push(x) \u4f7f\u7528 \u00b6 \u81ea\u7136\u5c31\u662f\u4ece\u6808\u9876\u8bfb\u51fa\u6765\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u67d0\u4e00\u7aef\u3002 \u4f8b\u5982\u4e3e\u4f8b\u4e2d\u53d6\u51fa\u7684\u5373\u6808\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u5e94\u7528 \u00b6 POJ3250 Bad Hair Day \u6709 N N \u5934\u725b\u4ece\u5de6\u5230\u53f3\u6392\u6210\u4e00\u6392\uff0c\u6bcf\u5934\u725b\u6709\u4e00\u4e2a\u9ad8\u5ea6 h_i h_i \uff0c\u8bbe\u5de6\u6570\u7b2c i i \u5934\u725b\u4e0e\u300c\u5b83\u53f3\u8fb9\u7b2c\u4e00\u5934\u9ad8\u5ea6 \u2265h_i \u2265h_i \u300d\u7684\u725b\u4e4b\u95f4\u6709 c_i c_i \u5934\u725b\uff0c\u8bd5\u6c42 \\sum_{i=1}^{N} c_i \\sum_{i=1}^{N} c_i \u3002 \uff08\u53ef\u4ee5\u5de6\u8f6c \u6d1b\u8c37 P2866 \uff09 \u6bd4\u8f83\u57fa\u7840\u7684\u5e94\u7528\u6709\u8fd9\u4e00\u9898\uff0c\u5c31\u662f\u4e2a\u5355\u8c03\u6808\u7684\u7b80\u5355\u5e94\u7528\uff0c\u8bb0\u5f55\u6bcf\u5934\u725b\u88ab\u5f39\u51fa\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u5f39\u51fa\u8fc7\u5219\u4e3a\u6700\u8fdc\u7aef\uff0c\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u5373\u53ef\u8ba1\u7b97\u51fa\u9898\u76ee\u6240\u9700\u7ed3\u679c\u3002","title":"\u5355\u8c03\u6808"},{"location":"ds/monotonous-stack/#_1","text":"\u987e\u540d\u601d\u4e49\uff0c\u5355\u8c03\u6808\u5373\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u6808\u7ed3\u6784\u3002\u4e0e\u5355\u8c03\u961f\u5217\u76f8\u6bd4\uff0c\u5176\u53ea\u5728\u4e00\u7aef\u8fdb\u884c\u8fdb\u51fa\u3002 \u4e3a\u4e86\u63cf\u8ff0\u65b9\u4fbf\uff0c\u4ee5\u4e0b\u4e3e\u4f8b\u53ca\u4f2a\u4ee3\u7801\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6574\u6570\u7684\u5355\u8c03\u9012\u589e\u6808\u4e3a\u4f8b\u3002","title":"\u4f55\u4e3a\u5355\u8c03\u6808"},{"location":"ds/monotonous-stack/#_2","text":"","title":"\u5982\u4f55\u4f7f\u7528\u5355\u8c03\u6808"},{"location":"ds/monotonous-stack/#_3","text":"\u5c06\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5355\u8c03\u6808\u65f6\uff0c\u4e3a\u4e86\u7ef4\u62a4\u6808\u7684\u5355\u8c03\u6027\uff0c\u9700\u8981\u5728\u4fdd\u8bc1\u5c06\u8be5\u5143\u7d20\u63d2\u5165\u5230\u6808\u9876\u540e\u6574\u4e2a\u6808\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u524d\u63d0\u4e0b\u5f39\u51fa\u6700\u5c11\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u6808\u4e2d\u81ea\u9876\u5411\u4e0b\u7684\u5143\u7d20\u4e3a {1,3,5,10,30,50} {1,3,5,10,30,50} \uff0c\u63d2\u5165\u5143\u7d20 20 20 \u65f6\u4e3a\u4e86\u4fdd\u8bc1\u5355\u8c03\u6027\u9700\u8981\u4f9d\u6b21\u5f39\u51fa\u5143\u7d20 1,3,5,10 1,3,5,10 \uff0c\u64cd\u4f5c\u540e\u6808\u53d8\u4e3a 20,30,50 20,30,50 \u3002 \u7528\u4f2a\u4ee3\u7801\u63cf\u8ff0\u5982\u4e0b\uff1a 1 2 3 4 insert x while !sta.empty() && sta.top()<x sta.pop() sta.push(x)","title":"\u63d2\u5165"},{"location":"ds/monotonous-stack/#_4","text":"\u81ea\u7136\u5c31\u662f\u4ece\u6808\u9876\u8bfb\u51fa\u6765\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u67d0\u4e00\u7aef\u3002 \u4f8b\u5982\u4e3e\u4f8b\u4e2d\u53d6\u51fa\u7684\u5373\u6808\u4e2d\u7684\u6700\u5c0f\u503c\u3002","title":"\u4f7f\u7528"},{"location":"ds/monotonous-stack/#_5","text":"POJ3250 Bad Hair Day \u6709 N N \u5934\u725b\u4ece\u5de6\u5230\u53f3\u6392\u6210\u4e00\u6392\uff0c\u6bcf\u5934\u725b\u6709\u4e00\u4e2a\u9ad8\u5ea6 h_i h_i \uff0c\u8bbe\u5de6\u6570\u7b2c i i \u5934\u725b\u4e0e\u300c\u5b83\u53f3\u8fb9\u7b2c\u4e00\u5934\u9ad8\u5ea6 \u2265h_i \u2265h_i \u300d\u7684\u725b\u4e4b\u95f4\u6709 c_i c_i \u5934\u725b\uff0c\u8bd5\u6c42 \\sum_{i=1}^{N} c_i \\sum_{i=1}^{N} c_i \u3002 \uff08\u53ef\u4ee5\u5de6\u8f6c \u6d1b\u8c37 P2866 \uff09 \u6bd4\u8f83\u57fa\u7840\u7684\u5e94\u7528\u6709\u8fd9\u4e00\u9898\uff0c\u5c31\u662f\u4e2a\u5355\u8c03\u6808\u7684\u7b80\u5355\u5e94\u7528\uff0c\u8bb0\u5f55\u6bcf\u5934\u725b\u88ab\u5f39\u51fa\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u5f39\u51fa\u8fc7\u5219\u4e3a\u6700\u8fdc\u7aef\uff0c\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u5373\u53ef\u8ba1\u7b97\u51fa\u9898\u76ee\u6240\u9700\u7ed3\u679c\u3002","title":"\u5e94\u7528"},{"location":"ds/persistent-balanced/","text":"Split-Merge Treap \u5bf9\u4e8e\u65e0\u65cb Treap \u7684\u63d0\u793a \u00b6 \u770b\u697c\u4e0a\u7684 Treap \u8bcd\u6761 OI \u5e38\u7528\u7684\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811 \u4e00\u822c\u5c31\u662f \u53ef\u6301\u4e45\u5316\u65e0\u65cb\u8f6c Treap \u6240\u4ee5\u63a8\u8350\u9996\u5148\u5b66\u4e60\u697c\u4e0a\u7684 \u65e0\u65cb\u8f6c Treap \u601d\u60f3 / \u505a\u6cd5 \u00b6 \u6211\u4eec\u6765\u770b\u770b\u65cb\u8f6c\u7684 Treap\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\u5462\uff1f \u5982\u679c\u5e26\u65cb\u8f6c\uff0c\u90a3\u4e48\u5c31\u4f1a \u7834\u73af\u539f\u6709\u7684\u7236\u5b50\u5173\u7cfb \uff0c\u7834\u73af\u539f\u6709\u7684\u8def\u5f84\u548c\u6811\u5f62\u6001\uff0c\u8fd9\u662f\u53ef\u6301\u4e45\u5316\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u5982\u679c\u628a Treap \u53d8\u4e3a\u975e\u65cb\u8f6c\u7684\uff0c\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u901a\u8fc7\u53ef\u6301\u4e45\u5316 Merge \u548c Split \u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b8c\u6210\u53ef\u6301\u4e45\u5316. \u300c\u4e00\u5207\u53ef\u652f\u6301\u64cd\u4f5c\u90fd\u53ef\u4ee5\u901a\u8fc7 Merge Split Newnode Build \u5b8c\u6210\u300d\uff0c\u800c Build \u64cd\u4f5c\u53ea\u7528\u4e8e\u5efa\u9020\u65e0\u9700\u7406\u4f1a\uff0c Newnode \uff08\u65b0\u5efa\u8282\u70b9\uff09 \u5c31\u662f\u7528\u6765\u53ef\u6301\u4e45\u5316\u7684\u5de5\u5177\u3002 \u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b Merge \u548c Split \uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u4eec\u90fd\u662f\u7531\u4e0a\u800c\u4e0b\u7684\u64cd\u4f5c\uff01 \u56e0\u6b64\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5 \u53c2\u8003\u7ebf\u6bb5\u6811\u7684\u53ef\u6301\u4e45\u5316\u64cd\u4f5c \u5bf9\u5b83\u8fdb\u884c\u53ef\u6301\u4e45\u5316\u3002 \u53ef\u6301\u4e45\u5316\u64cd\u4f5c \u00b6 \u53ef\u6301\u4e45\u5316 \u662f\u5bf9 \u6570\u636e\u7ed3\u6784 \u7684\u4e00\u79cd\u64cd\u4f5c\uff0c\u5373\u4fdd\u7559\u5386\u53f2\u4fe1\u606f\uff0c\u4f7f\u5f97\u5728\u540e\u9762\u53ef\u4ee5\u8c03\u7528\u4e4b\u524d\u7684\u5386\u53f2\u7248\u672c. \u5bf9\u4e8e \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 \u6765\u8bf4\uff0c\u6bcf\u4e00\u6b21\u65b0\u5efa\u5386\u53f2\u7248\u672c\u5c31\u662f\u628a \u6cbf\u9014\u7684\u4fee\u6539\u8def\u5f84 \u590d\u5236\u51fa\u6765 \u90a3\u4e48\u5bf9\u53ef\u6301\u4e45\u5316 Treap (\u76ee\u524d\u56fd\u5185 OI \u5e38\u7528\u7684\u7248\u672c) \u6765\u8bf4\uff1a \u5728\u590d\u5236\u4e00\u4e2a\u8282\u70b9 X_{a} X_{a} ( X X \u8282\u70b9\u7684\u7b2c a a \u4e2a\u7248\u672c) \u7684\u65b0\u7248\u672c X_{a+1} X_{a+1} ( X X \u8282\u70b9\u7684\u7b2c a+1 a+1 \u4e2a\u7248\u672c) \u4ee5\u540e\uff1a \u5982\u679c\u67d0\u4e2a\u513f\u5b50\u8282\u70b9 Y Y \u4e0d\u7528\u4fee\u6539\u4fe1\u606f\uff0c\u90a3\u4e48\u5c31\u628a X_{a+1} X_{a+1} \u7684\u6307\u9488\u76f4\u63a5\u6307\u5411 Y_{a} Y_{a} ( Y Y \u8282\u70b9\u7684\u7b2c a a \u4e2a\u7248\u672c) \u5373\u53ef\u3002 \u53cd\u4e4b\uff0c\u5982\u679c\u8981\u4fee\u6539 Y Y \uff0c\u90a3\u4e48\u5c31\u5728 \u9012\u5f52\u5230\u4e0b\u5c42 \u65f6 \u65b0\u5efa Y_{a+1} Y_{a+1} ( Y Y \u8282\u70b9\u7684\u7b2c a+1 a+1 \u4e2a\u7248\u672c) \u8fd9\u4e2a\u65b0\u8282\u70b9\u7528\u4e8e \u5b58\u50a8\u65b0\u7684\u4fe1\u606f \uff0c\u540c\u65f6\u628a X_{a+1} X_{a+1} \u7684\u6307\u9488\u6307\u5411 Y_{a+1} Y_{a+1} ( Y Y \u8282\u70b9\u7684\u7b2c a+1 a+1 \u4e2a\u7248\u672c)\u3002 \u53ef\u6301\u4e45\u5316 \u00b6 \u9700\u8981\u7684\u4e1c\u897f: \u4e00\u4e2a struct \u6570\u7ec4 \u5b58 \u6bcf\u4e2a\u8282\u70b9 \u7684\u4fe1\u606f (\u4e00\u822c\u53eb\u505a tree \u6570\u7ec4)\uff1b (\u5f53\u7136\u5199 \u6307\u9488\u7248 \u5e73\u8861\u6811\u7684\u5927\u4f6c\u5c31\u53ef\u4ee5\u8003\u8651\u4e0d\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e86) \u4e00\u4e2a \u6839\u8282\u70b9\u6570\u7ec4 \uff0c\u5b58\u6bcf\u4e2a\u7248\u672c\u7684_\u6811\u6839_\uff0c\u6bcf\u6b21\u67e5\u8be2\u7248\u672c\u4fe1\u606f\u65f6\u5c31\u4ece \u6839\u6570\u7ec4\u5b58\u7684\u8282\u70b9 \u5f00\u59cb\uff1b split() \u5206\u88c2 \u4ece\u6811\u4e2d\u5206\u88c2\u51fa\u4e24\u68f5\u6811 merge() \u5408\u5e76 \u628a\u4e24\u68f5\u6811\u6309\u7167\u968f\u673a\u6743\u503c\u5408\u5e76 newNode() \u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 build() \u5efa\u6811 Split \u00b6 \u5bf9\u4e8e \u5206\u88c2\u64cd\u4f5c \uff0c\u6bcf\u6b21\u5206\u88c2\u8def\u5f84\u65f6 \u65b0\u5efa\u8282\u70b9 \u6307\u5411\u5206\u51fa\u6765\u7684\u8def\u5f84\uff0c\u7528 std::pair \u5b58\u65b0\u5206\u88c2\u51fa\u6765\u7684\u4e24\u68f5\u6811\u7684\u6839\u3002 std::pair <int,int> split(x,k) \u8fd4\u56de\u4e00\u4e2a std::pair; \u8868\u793a\u628a _x _x \u4e3a\u6839\u7684\u6811\u7684\u524d k k \u4e2a\u5143\u7d20\u653e\u5728 \u4e00\u68f5\u6811 \u4e2d\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u6784\u6210\u5728\u53e6\u4e00\u68f5\u6811\u4e2d\uff0c\u8fd4\u56de\u8fd9\u4e24\u68f5\u6811\u7684\u6839\uff08first \u662f\u7b2c\u4e00\u68f5\u6811\u7684\u6839\uff0csecond \u662f\u7b2c\u4e8c\u68f5\u6811\u7684\uff09\u3002 \u5982\u679c x x \u7684 \u5de6\u5b50\u6811 \u7684 key \u2265 k key \u2265 k \uff0c\u90a3\u4e48 \u76f4\u63a5\u9012\u5f52\u8fdb\u5de6\u5b50\u6811 \uff0c\u628a\u5de6\u5b50\u6811\u5206\u51fa\u6765\u7684\u7b2c\u4e8c\u9897\u6811\u548c\u5f53\u524d\u7684 x \u53f3\u5b50\u6811 \u5408\u5e76\u3002 \u5426\u5219\u9012\u5f52 \u53f3\u5b50\u6811 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static std :: pair < int , int > _split ( int _x , int k ) { if ( _x == 0 ) return std :: make_pair ( 0 , 0 ); else { int _vs = ++ _cnt ; //\u65b0\u5efa\u8282\u70b9\uff08\u53ef\u6301\u4e45\u5316\u7684\u7cbe\u9ad3\uff09 _trp [ _vs ] = _trp [ _x ]; std :: pair < int , int > _y ; if ( _trp [ _vs ]. key <= k ) { _y = _split ( _trp [ _vs ]. leaf [ 1 ], k ); _trp [ _vs ]. leaf [ 1 ] = _y . first ; _y . first = _vs ; } else { _y = _split ( _trp [ _vs ]. leaf [ 0 ], k ); _trp [ _vs ]. leaf [ 0 ] = _y . second ; _y . second = _vs ; } _trp [ _vs ]. _update (); return _y ; } } Merge \u00b6 int merge(x,y) \u8fd4\u56de merge \u51fa\u7684\u6811\u7684\u6839\u3002 \u540c\u6837\u9012\u5f52\u5b9e\u73b0\u3002\u5982\u679c x \u7684\u968f\u673a\u6743\u503c > y \u7684\u968f\u673a\u6743\u503c \uff0c\u5219 merge(x_{rc},y) merge(x_{rc},y) \uff0c\u5426\u5219 merge(x,y_{lc}) merge(x,y_{lc}) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 static int _merge ( int _x , int _y ) { if ( _x == 0 || _y == 0 ) return _x ^ _y ; else { if ( _trp [ _x ]. fix < _trp [ _y ]. fix ) { _trp [ _x ]. leaf [ 1 ] = _merge ( _trp [ _x ]. leaf [ 1 ], _y ); _trp [ _x ]. _update (); return _x ; } else { _trp [ _y ]. leaf [ 0 ] = _merge ( _x , _trp [ _y ]. leaf [ 0 ]); _trp [ _y ]. _update (); return _y ; } } } Luogu P3835 \u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811 \u00b6 \u9898\u76ee\u80cc\u666f \u00b6 \u672c\u9898\u4e3a\u9898\u76ee \u666e\u901a\u5e73\u8861\u6811 \u7684\u53ef\u6301\u4e45\u5316\u52a0\u5f3a\u7248\u3002 \u6570\u636e\u5df2\u7ecf\u7ecf\u8fc7\u5f3a\u5316 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff08\u53ef\u53c2\u8003\u9898\u76ee\u6807\u9898\uff09\uff0c\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\uff0c\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff08\u5bf9\u4e8e\u5404\u4e2a\u4ee5\u5f80\u7684\u5386\u53f2\u7248\u672c\uff09\uff1a \u63d2\u5165 x \u6570 \u5220\u9664 x \u6570\uff08\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u56e0\u53ea\u5220\u9664\u4e00\u4e2a\uff0c\u5982\u679c\u6ca1\u6709\u8bf7\u5ffd\u7565\u8be5\u64cd\u4f5c\uff09 \u67e5\u8be2 x \u6570\u7684\u6392\u540d\uff08\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 + 1\u3002\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u56e0\u8f93\u51fa\u6700\u5c0f\u7684\u6392\u540d\uff09 \u67e5\u8be2\u6392\u540d\u4e3a x \u7684\u6570 \u6c42 x \u7684\u524d\u9a71\uff08\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e x\uff0c\u4e14\u6700\u5927\u7684\u6570\uff0c\u5982\u4e0d\u5b58\u5728\u8f93\u51fa -2147483647\uff09 \u6c42 x \u7684\u540e\u7ee7\uff08\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e x\uff0c\u4e14\u6700\u5c0f\u7684\u6570\uff0c\u5982\u4e0d\u5b58\u5728\u8f93\u51fa 2147483647\uff09 \u548c\u539f\u672c\u5e73\u8861\u6811\u4e0d\u540c\u7684\u4e00\u70b9\u662f\uff0c\u6bcf\u4e00\u6b21\u7684\u4efb\u4f55\u64cd\u4f5c\u90fd\u662f\u57fa\u4e8e\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff08\u64cd\u4f5c 3, 4, 5, 6 \u5373\u4fdd\u6301\u539f\u7248\u672c\u65e0\u53d8\u5316\uff09\u3002 \u6bcf\u4e2a\u7248\u672c\u7684\u7f16\u53f7\u5373\u4e3a\u64cd\u4f5c\u7684\u5e8f\u53f7\uff08\u7248\u672c 0 \u5373\u4e3a\u521d\u59cb\u72b6\u6001\uff0c\u7a7a\u6811\uff09 \u8f93\u5165\u683c\u5f0f \u00b6 \u7b2c\u4e00\u884c\u4e3a n\uff0c\u8868\u793a\u64cd\u4f5c\u7684\u4e2a\u6570, \u4e0b\u9762 n \u884c\u6bcf\u884c\u6709\u4e24\u4e2a\u6570 opt \u548c x\uff0copt \u8868\u793a\u64cd\u4f5c\u7684\u5e8f\u53f7 (1 \\leq x \\leq le6) (1 \\leq x \\leq le6) \u3002 \u8f93\u51fa\u683c\u5f0f \u00b6 \u5bf9\u4e8e\u64cd\u4f5c 3,4,5,6 \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u5bf9\u5e94\u7b54\u6848\u3002 \u9898\u89e3\u7b80\u8ff0 \u00b6 \u5c31\u662f \u666e\u901a\u5e73\u8861\u6811 \u4e00\u9898\u7684\u53ef\u6301\u4e45\u5316\u7248\uff0c\u64cd\u4f5c\u548c\u8be5\u9898\u7c7b\u4f3c.. \u53ea\u662f\u4f7f\u7528\u4e86\u53ef\u6301\u4e45\u5316\u7684 merge \u548c split \u64cd\u4f5c \u63a8\u8350\u7684\u7ec3\u624b\u9898 \u00b6 luogu P3919 \u53ef\u6301\u4e45\u5316\u6570\u7ec4 (\u6a21\u677f\u9898) codeforces 702F T-shirt \u53e6\u5916 \u00b6 \u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u52a8\u6001\u51f8\u5305\uff0c\u4ed9\u4eba\u638c\u7b49\u4e1c\u897f\uff0c\u5982\u679c\u8bfb\u8005\u6709\u5174\u8da3\u53ef\u4ee5\u9605\u8bfb\u76f8\u5e94\u7684 \u8ba1\u7b97\u51e0\u4f55 \u77e5\u8bc6\uff0c\u518d\u6765\u98df\u7528\u3002 Zip Tree \u4f5c\u4e3a\u4e00\u79cd\u65b0\u7684\u6570\u636e\u7ed3\u6784\u5728 2018.8 \u6708\u7531 Robert E. Tarjan - Caleb C. Levy - Stephen Timmel \u63d0\u51fa\uff0c\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b~","title":"\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811"},{"location":"ds/persistent-balanced/#treap","text":"\u770b\u697c\u4e0a\u7684 Treap \u8bcd\u6761 OI \u5e38\u7528\u7684\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811 \u4e00\u822c\u5c31\u662f \u53ef\u6301\u4e45\u5316\u65e0\u65cb\u8f6c Treap \u6240\u4ee5\u63a8\u8350\u9996\u5148\u5b66\u4e60\u697c\u4e0a\u7684 \u65e0\u65cb\u8f6c Treap","title":"\u5bf9\u4e8e\u65e0\u65cb Treap \u7684\u63d0\u793a"},{"location":"ds/persistent-balanced/#_1","text":"\u6211\u4eec\u6765\u770b\u770b\u65cb\u8f6c\u7684 Treap\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\u5462\uff1f \u5982\u679c\u5e26\u65cb\u8f6c\uff0c\u90a3\u4e48\u5c31\u4f1a \u7834\u73af\u539f\u6709\u7684\u7236\u5b50\u5173\u7cfb \uff0c\u7834\u73af\u539f\u6709\u7684\u8def\u5f84\u548c\u6811\u5f62\u6001\uff0c\u8fd9\u662f\u53ef\u6301\u4e45\u5316\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u5982\u679c\u628a Treap \u53d8\u4e3a\u975e\u65cb\u8f6c\u7684\uff0c\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u901a\u8fc7\u53ef\u6301\u4e45\u5316 Merge \u548c Split \u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b8c\u6210\u53ef\u6301\u4e45\u5316. \u300c\u4e00\u5207\u53ef\u652f\u6301\u64cd\u4f5c\u90fd\u53ef\u4ee5\u901a\u8fc7 Merge Split Newnode Build \u5b8c\u6210\u300d\uff0c\u800c Build \u64cd\u4f5c\u53ea\u7528\u4e8e\u5efa\u9020\u65e0\u9700\u7406\u4f1a\uff0c Newnode \uff08\u65b0\u5efa\u8282\u70b9\uff09 \u5c31\u662f\u7528\u6765\u53ef\u6301\u4e45\u5316\u7684\u5de5\u5177\u3002 \u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b Merge \u548c Split \uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u4eec\u90fd\u662f\u7531\u4e0a\u800c\u4e0b\u7684\u64cd\u4f5c\uff01 \u56e0\u6b64\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5 \u53c2\u8003\u7ebf\u6bb5\u6811\u7684\u53ef\u6301\u4e45\u5316\u64cd\u4f5c \u5bf9\u5b83\u8fdb\u884c\u53ef\u6301\u4e45\u5316\u3002","title":"\u601d\u60f3 / \u505a\u6cd5"},{"location":"ds/persistent-balanced/#_2","text":"\u53ef\u6301\u4e45\u5316 \u662f\u5bf9 \u6570\u636e\u7ed3\u6784 \u7684\u4e00\u79cd\u64cd\u4f5c\uff0c\u5373\u4fdd\u7559\u5386\u53f2\u4fe1\u606f\uff0c\u4f7f\u5f97\u5728\u540e\u9762\u53ef\u4ee5\u8c03\u7528\u4e4b\u524d\u7684\u5386\u53f2\u7248\u672c. \u5bf9\u4e8e \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 \u6765\u8bf4\uff0c\u6bcf\u4e00\u6b21\u65b0\u5efa\u5386\u53f2\u7248\u672c\u5c31\u662f\u628a \u6cbf\u9014\u7684\u4fee\u6539\u8def\u5f84 \u590d\u5236\u51fa\u6765 \u90a3\u4e48\u5bf9\u53ef\u6301\u4e45\u5316 Treap (\u76ee\u524d\u56fd\u5185 OI \u5e38\u7528\u7684\u7248\u672c) \u6765\u8bf4\uff1a \u5728\u590d\u5236\u4e00\u4e2a\u8282\u70b9 X_{a} X_{a} ( X X \u8282\u70b9\u7684\u7b2c a a \u4e2a\u7248\u672c) \u7684\u65b0\u7248\u672c X_{a+1} X_{a+1} ( X X \u8282\u70b9\u7684\u7b2c a+1 a+1 \u4e2a\u7248\u672c) \u4ee5\u540e\uff1a \u5982\u679c\u67d0\u4e2a\u513f\u5b50\u8282\u70b9 Y Y \u4e0d\u7528\u4fee\u6539\u4fe1\u606f\uff0c\u90a3\u4e48\u5c31\u628a X_{a+1} X_{a+1} \u7684\u6307\u9488\u76f4\u63a5\u6307\u5411 Y_{a} Y_{a} ( Y Y \u8282\u70b9\u7684\u7b2c a a \u4e2a\u7248\u672c) \u5373\u53ef\u3002 \u53cd\u4e4b\uff0c\u5982\u679c\u8981\u4fee\u6539 Y Y \uff0c\u90a3\u4e48\u5c31\u5728 \u9012\u5f52\u5230\u4e0b\u5c42 \u65f6 \u65b0\u5efa Y_{a+1} Y_{a+1} ( Y Y \u8282\u70b9\u7684\u7b2c a+1 a+1 \u4e2a\u7248\u672c) \u8fd9\u4e2a\u65b0\u8282\u70b9\u7528\u4e8e \u5b58\u50a8\u65b0\u7684\u4fe1\u606f \uff0c\u540c\u65f6\u628a X_{a+1} X_{a+1} \u7684\u6307\u9488\u6307\u5411 Y_{a+1} Y_{a+1} ( Y Y \u8282\u70b9\u7684\u7b2c a+1 a+1 \u4e2a\u7248\u672c)\u3002","title":"\u53ef\u6301\u4e45\u5316\u64cd\u4f5c"},{"location":"ds/persistent-balanced/#_3","text":"\u9700\u8981\u7684\u4e1c\u897f: \u4e00\u4e2a struct \u6570\u7ec4 \u5b58 \u6bcf\u4e2a\u8282\u70b9 \u7684\u4fe1\u606f (\u4e00\u822c\u53eb\u505a tree \u6570\u7ec4)\uff1b (\u5f53\u7136\u5199 \u6307\u9488\u7248 \u5e73\u8861\u6811\u7684\u5927\u4f6c\u5c31\u53ef\u4ee5\u8003\u8651\u4e0d\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e86) \u4e00\u4e2a \u6839\u8282\u70b9\u6570\u7ec4 \uff0c\u5b58\u6bcf\u4e2a\u7248\u672c\u7684_\u6811\u6839_\uff0c\u6bcf\u6b21\u67e5\u8be2\u7248\u672c\u4fe1\u606f\u65f6\u5c31\u4ece \u6839\u6570\u7ec4\u5b58\u7684\u8282\u70b9 \u5f00\u59cb\uff1b split() \u5206\u88c2 \u4ece\u6811\u4e2d\u5206\u88c2\u51fa\u4e24\u68f5\u6811 merge() \u5408\u5e76 \u628a\u4e24\u68f5\u6811\u6309\u7167\u968f\u673a\u6743\u503c\u5408\u5e76 newNode() \u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 build() \u5efa\u6811","title":"\u53ef\u6301\u4e45\u5316"},{"location":"ds/persistent-balanced/#split","text":"\u5bf9\u4e8e \u5206\u88c2\u64cd\u4f5c \uff0c\u6bcf\u6b21\u5206\u88c2\u8def\u5f84\u65f6 \u65b0\u5efa\u8282\u70b9 \u6307\u5411\u5206\u51fa\u6765\u7684\u8def\u5f84\uff0c\u7528 std::pair \u5b58\u65b0\u5206\u88c2\u51fa\u6765\u7684\u4e24\u68f5\u6811\u7684\u6839\u3002 std::pair <int,int> split(x,k) \u8fd4\u56de\u4e00\u4e2a std::pair; \u8868\u793a\u628a _x _x \u4e3a\u6839\u7684\u6811\u7684\u524d k k \u4e2a\u5143\u7d20\u653e\u5728 \u4e00\u68f5\u6811 \u4e2d\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u6784\u6210\u5728\u53e6\u4e00\u68f5\u6811\u4e2d\uff0c\u8fd4\u56de\u8fd9\u4e24\u68f5\u6811\u7684\u6839\uff08first \u662f\u7b2c\u4e00\u68f5\u6811\u7684\u6839\uff0csecond \u662f\u7b2c\u4e8c\u68f5\u6811\u7684\uff09\u3002 \u5982\u679c x x \u7684 \u5de6\u5b50\u6811 \u7684 key \u2265 k key \u2265 k \uff0c\u90a3\u4e48 \u76f4\u63a5\u9012\u5f52\u8fdb\u5de6\u5b50\u6811 \uff0c\u628a\u5de6\u5b50\u6811\u5206\u51fa\u6765\u7684\u7b2c\u4e8c\u9897\u6811\u548c\u5f53\u524d\u7684 x \u53f3\u5b50\u6811 \u5408\u5e76\u3002 \u5426\u5219\u9012\u5f52 \u53f3\u5b50\u6811 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static std :: pair < int , int > _split ( int _x , int k ) { if ( _x == 0 ) return std :: make_pair ( 0 , 0 ); else { int _vs = ++ _cnt ; //\u65b0\u5efa\u8282\u70b9\uff08\u53ef\u6301\u4e45\u5316\u7684\u7cbe\u9ad3\uff09 _trp [ _vs ] = _trp [ _x ]; std :: pair < int , int > _y ; if ( _trp [ _vs ]. key <= k ) { _y = _split ( _trp [ _vs ]. leaf [ 1 ], k ); _trp [ _vs ]. leaf [ 1 ] = _y . first ; _y . first = _vs ; } else { _y = _split ( _trp [ _vs ]. leaf [ 0 ], k ); _trp [ _vs ]. leaf [ 0 ] = _y . second ; _y . second = _vs ; } _trp [ _vs ]. _update (); return _y ; } }","title":"Split"},{"location":"ds/persistent-balanced/#merge","text":"int merge(x,y) \u8fd4\u56de merge \u51fa\u7684\u6811\u7684\u6839\u3002 \u540c\u6837\u9012\u5f52\u5b9e\u73b0\u3002\u5982\u679c x \u7684\u968f\u673a\u6743\u503c > y \u7684\u968f\u673a\u6743\u503c \uff0c\u5219 merge(x_{rc},y) merge(x_{rc},y) \uff0c\u5426\u5219 merge(x,y_{lc}) merge(x,y_{lc}) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 static int _merge ( int _x , int _y ) { if ( _x == 0 || _y == 0 ) return _x ^ _y ; else { if ( _trp [ _x ]. fix < _trp [ _y ]. fix ) { _trp [ _x ]. leaf [ 1 ] = _merge ( _trp [ _x ]. leaf [ 1 ], _y ); _trp [ _x ]. _update (); return _x ; } else { _trp [ _y ]. leaf [ 0 ] = _merge ( _x , _trp [ _y ]. leaf [ 0 ]); _trp [ _y ]. _update (); return _y ; } } }","title":"Merge"},{"location":"ds/persistent-balanced/#luogu-p3835","text":"","title":"Luogu P3835 \u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811"},{"location":"ds/persistent-balanced/#_4","text":"\u672c\u9898\u4e3a\u9898\u76ee \u666e\u901a\u5e73\u8861\u6811 \u7684\u53ef\u6301\u4e45\u5316\u52a0\u5f3a\u7248\u3002 \u6570\u636e\u5df2\u7ecf\u7ecf\u8fc7\u5f3a\u5316","title":"\u9898\u76ee\u80cc\u666f"},{"location":"ds/persistent-balanced/#_5","text":"\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff08\u53ef\u53c2\u8003\u9898\u76ee\u6807\u9898\uff09\uff0c\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\uff0c\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff08\u5bf9\u4e8e\u5404\u4e2a\u4ee5\u5f80\u7684\u5386\u53f2\u7248\u672c\uff09\uff1a \u63d2\u5165 x \u6570 \u5220\u9664 x \u6570\uff08\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u56e0\u53ea\u5220\u9664\u4e00\u4e2a\uff0c\u5982\u679c\u6ca1\u6709\u8bf7\u5ffd\u7565\u8be5\u64cd\u4f5c\uff09 \u67e5\u8be2 x \u6570\u7684\u6392\u540d\uff08\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 + 1\u3002\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u56e0\u8f93\u51fa\u6700\u5c0f\u7684\u6392\u540d\uff09 \u67e5\u8be2\u6392\u540d\u4e3a x \u7684\u6570 \u6c42 x \u7684\u524d\u9a71\uff08\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e x\uff0c\u4e14\u6700\u5927\u7684\u6570\uff0c\u5982\u4e0d\u5b58\u5728\u8f93\u51fa -2147483647\uff09 \u6c42 x \u7684\u540e\u7ee7\uff08\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e x\uff0c\u4e14\u6700\u5c0f\u7684\u6570\uff0c\u5982\u4e0d\u5b58\u5728\u8f93\u51fa 2147483647\uff09 \u548c\u539f\u672c\u5e73\u8861\u6811\u4e0d\u540c\u7684\u4e00\u70b9\u662f\uff0c\u6bcf\u4e00\u6b21\u7684\u4efb\u4f55\u64cd\u4f5c\u90fd\u662f\u57fa\u4e8e\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff08\u64cd\u4f5c 3, 4, 5, 6 \u5373\u4fdd\u6301\u539f\u7248\u672c\u65e0\u53d8\u5316\uff09\u3002 \u6bcf\u4e2a\u7248\u672c\u7684\u7f16\u53f7\u5373\u4e3a\u64cd\u4f5c\u7684\u5e8f\u53f7\uff08\u7248\u672c 0 \u5373\u4e3a\u521d\u59cb\u72b6\u6001\uff0c\u7a7a\u6811\uff09","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"ds/persistent-balanced/#_6","text":"\u7b2c\u4e00\u884c\u4e3a n\uff0c\u8868\u793a\u64cd\u4f5c\u7684\u4e2a\u6570, \u4e0b\u9762 n \u884c\u6bcf\u884c\u6709\u4e24\u4e2a\u6570 opt \u548c x\uff0copt \u8868\u793a\u64cd\u4f5c\u7684\u5e8f\u53f7 (1 \\leq x \\leq le6) (1 \\leq x \\leq le6) \u3002","title":"\u8f93\u5165\u683c\u5f0f"},{"location":"ds/persistent-balanced/#_7","text":"\u5bf9\u4e8e\u64cd\u4f5c 3,4,5,6 \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u5bf9\u5e94\u7b54\u6848\u3002","title":"\u8f93\u51fa\u683c\u5f0f"},{"location":"ds/persistent-balanced/#_8","text":"\u5c31\u662f \u666e\u901a\u5e73\u8861\u6811 \u4e00\u9898\u7684\u53ef\u6301\u4e45\u5316\u7248\uff0c\u64cd\u4f5c\u548c\u8be5\u9898\u7c7b\u4f3c.. \u53ea\u662f\u4f7f\u7528\u4e86\u53ef\u6301\u4e45\u5316\u7684 merge \u548c split \u64cd\u4f5c","title":"\u9898\u89e3\u7b80\u8ff0"},{"location":"ds/persistent-balanced/#_9","text":"luogu P3919 \u53ef\u6301\u4e45\u5316\u6570\u7ec4 (\u6a21\u677f\u9898) codeforces 702F T-shirt","title":"\u63a8\u8350\u7684\u7ec3\u624b\u9898"},{"location":"ds/persistent-balanced/#_10","text":"\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u52a8\u6001\u51f8\u5305\uff0c\u4ed9\u4eba\u638c\u7b49\u4e1c\u897f\uff0c\u5982\u679c\u8bfb\u8005\u6709\u5174\u8da3\u53ef\u4ee5\u9605\u8bfb\u76f8\u5e94\u7684 \u8ba1\u7b97\u51e0\u4f55 \u77e5\u8bc6\uff0c\u518d\u6765\u98df\u7528\u3002 Zip Tree \u4f5c\u4e3a\u4e00\u79cd\u65b0\u7684\u6570\u636e\u7ed3\u6784\u5728 2018.8 \u6708\u7531 Robert E. Tarjan - Caleb C. Levy - Stephen Timmel \u63d0\u51fa\uff0c\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b~","title":"\u53e6\u5916"},{"location":"ds/persistent-block-array/","text":"","title":"\u53ef\u6301\u4e45\u5316\u5757\u72b6\u6570\u7ec4"},{"location":"ds/persistent-in-bit/","text":"\u9759\u6001\u533a\u95f4 k \u5c0f\u503c \u7684\u95ee\u9898\u53ef\u4ee5\u7528 \u4e3b\u5e2d\u6811 \u5728 O(n\\log_2 n) O(n\\log_2 n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u3002 \u5982\u679c\u533a\u95f4\u53d8\u6210\u52a8\u6001\u7684\u5462\uff1f\u5373\uff0c\u5982\u679c\u8fd8\u8981\u6c42\u652f\u6301\u4e00\u79cd\u64cd\u4f5c\uff1a\u5355\u70b9\u4fee\u6539\u67d0\u4e00\u4f4d\u4e0a\u7684\u503c\uff0c\u53c8\u8be5\u600e\u4e48\u529e\u5462\uff1f \u4f8b\u9898 \u6d1b\u8c37 P3380 \u3010\u6a21\u677f\u3011\u4e8c\u903c\u5e73\u8861\u6811\uff08\u6811\u5957\u6811\uff09 \u4f8b\u9898 \u6d1b\u8c37 P2617 Dynamic Rankings \u5982\u679c\u7528 \u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811 \u4e2d\u6240\u8bba\u8ff0\u7684\uff0c\u7528\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\uff0c\u5373\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5bf9\u4e8e\u5176\u6240\u8868\u793a\u7684\u533a\u95f4\u7ef4\u62a4\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u7136\u540e\u7528\u4e8c\u5206\u6765\u67e5\u627e k k \u5c0f\u503c\u3002\u7531\u4e8e\u6bcf\u6b21\u67e5\u8be2\u64cd\u4f5c\u90fd\u8981\u8986\u76d6\u591a\u4e2a\u533a\u95f4\uff0c\u5373\u6709\u591a\u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u5e73\u8861\u6811\u5e76\u4e0d\u80fd\u591a\u4e2a\u503c\u4e00\u8d77\u67e5\u627e\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n\\log_2^3 n) O(n\\log_2^3 n) \uff0c\u5e76\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u601d\u8def\u662f\uff0c\u628a\u4e8c\u5206\u7b54\u6848\u7684\u64cd\u4f5c\u548c\u67e5\u8be2\u5c0f\u4e8e\u4e00\u4e2a\u503c\u7684\u6570\u7684\u6570\u91cf\u4e24\u79cd\u64cd\u4f5c\u7ed3\u5408\u8d77\u6765\u3002\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \u7ebf\u6bb5\u6811\u5957\u4e3b\u5e2d\u6811 \u3002 \u8bf4\u662f\u4e3b\u5e2d\u6811\u5176\u5b9e\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5e76\u4e0d\u662f\u5bf9\u7ebf\u6bb5\u6811\u7684\u53ef\u6301\u4e45\u5316\uff0c\u5404\u4e2a\u7ebf\u6bb5\u6811\u4e4b\u95f4\u4e5f\u6ca1\u6709\u50cf\u4e3b\u5e2d\u6811\u5404\u7248\u672c\u4e4b\u95f4\u7684\u5f3a\u5173\u8054\u6027\uff0c\u6240\u4ee5\u79f0\u4e3a \u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811 \u66f4\u4e3a\u786e\u5207\u3002 \u601d\u8def\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\uff0c\u5373\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u6240\u7ef4\u62a4\u7684\u6bcf\u4e2a\u533a\u95f4\uff0c\u5efa\u7acb\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u8868\u793a\u5176\u6240\u7ef4\u62a4\u7684\u533a\u95f4\u7684\u503c\u3002 \u5728\u4fee\u6539\u64cd\u4f5c\u8fdb\u884c\u65f6\uff0c\u5148\u5728\u7ebf\u6bb5\u6811\u4e0a\u4ece\u4e0a\u5f80\u4e0b\u8df3\u5230\u88ab\u4fee\u6539\u7684\u70b9\uff0c\u5220\u9664\u6240\u7ecf\u8fc7\u7684\u70b9\u6240\u6307\u5411\u7684\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u7684\u539f\u6765\u7684\u503c\uff0c\u7136\u540e\u63d2\u5165\u65b0\u7684\u503c\uff0c\u8981\u7ecf\u8fc7 O(\\log_2 n) O(\\log_2 n) \u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\uff0c\u5728\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u662f O(\\log_2 n) O(\\log_2 n) \u7684\uff0c\u6240\u4ee5\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log_2^2 n) O(\\log_2^2 n) \u3002 \u5728\u67e5\u8be2\u7b54\u6848\u65f6\uff0c\u5148\u53d6\u51fa\u8be5\u533a\u95f4\u8986\u76d6\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u7136\u540e\u7528\u7c7b\u4f3c\u4e8e\u9759\u6001\u533a\u95f4 k k \u5c0f\u503c\u7684\u65b9\u6cd5\uff0c\u5c06\u8fd9\u4e9b\u70b9\u4e00\u8d77\u5411\u5de6\u513f\u5b50\u6216\u5411\u53f3\u513f\u5b50\u8df3\u3002\u5982\u679c\u6240\u6709\u8fd9\u4e9b\u70b9\u5de6\u513f\u5b50\u5b58\u50a8\u7684\u503c\u5927\u4e8e\u7b49\u4e8e k k \uff0c\u5219\u5f80\u5de6\u8df3\uff0c\u5426\u5219\u5f80\u53f3\u8df3\u3002\u7531\u4e8e\u6700\u591a\u53ea\u80fd\u8986\u76d6 O(\\log_2 n) O(\\log_2 n) \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u6700\u591a\u4e00\u6b21\u53ea\u6709\u8fd9\u4e48\u591a\u4e2a\u8282\u70b9\u5411\u4e0b\u8df3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log_2^2 n) O(\\log_2^2 n) \u3002 \u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u8f83\u5927\uff0c\u5728\u5b9e\u73b0\u4e2d\u5f80\u5f80\u4f7f\u7528\u5e38\u6570\u66f4\u5c0f\u4e14\u66f4\u65b9\u4fbf\u5904\u7406\u524d\u7f00\u548c\u7684 \u6811\u72b6\u6570\u7ec4 \u5b9e\u73b0\u3002 \u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 #include <algorithm> #include <cstdio> #include <cstring> #include <map> #include <set> #define LC o << 1 #define RC o << 1 | 1 using namespace std ; const int maxn = 1000010 ; int n , m , a [ maxn ], u [ maxn ], x [ maxn ], l [ maxn ], r [ maxn ], k [ maxn ], cur , cur1 , cur2 , q1 [ maxn ], q2 [ maxn ], v [ maxn ]; char op [ maxn ]; set < int > ST ; map < int , int > mp ; struct segment_tree //\u5c01\u88c5\u7684\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811 { int cur , rt [ maxn * 4 ], sum [ maxn * 60 ], lc [ maxn * 60 ], rc [ maxn * 60 ]; void build ( int & o ) { o = ++ cur ; } void print ( int o , int l , int r ) { if ( ! o ) return ; if ( l == r && sum [ o ]) printf ( \"%d \" , l ); int mid = ( l + r ) >> 1 ; print ( lc [ o ], l , mid ); print ( rc [ o ], mid + 1 , r ); } void update ( int & o , int l , int r , int x , int v ) { if ( ! o ) o = ++ cur ; sum [ o ] += v ; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; if ( x <= mid ) update ( lc [ o ], l , mid , x , v ); else update ( rc [ o ], mid + 1 , r , x , v ); } } st ; //\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0 inline int lowbit ( int o ) { return ( o & ( - o )); } void upd ( int o , int x , int v ) { for (; o <= n ; o += lowbit ( o )) st . update ( st . rt [ o ], 1 , n , x , v ); } void gtv ( int o , int * A , int & p ) { p = 0 ; for (; o ; o -= lowbit ( o )) A [ ++ p ] = st . rt [ o ]; } int qry ( int l , int r , int k ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 , siz = 0 ; for ( int i = 1 ; i <= cur1 ; i ++ ) siz += st . sum [ st . lc [ q1 [ i ]]]; for ( int i = 1 ; i <= cur2 ; i ++ ) siz -= st . sum [ st . lc [ q2 [ i ]]]; // printf(\"j %d %d %d %d\\n\",cur1,cur2,siz,k); if ( siz >= k ) { for ( int i = 1 ; i <= cur1 ; i ++ ) q1 [ i ] = st . lc [ q1 [ i ]]; for ( int i = 1 ; i <= cur2 ; i ++ ) q2 [ i ] = st . lc [ q2 [ i ]]; return qry ( l , mid , k ); } else { for ( int i = 1 ; i <= cur1 ; i ++ ) q1 [ i ] = st . rc [ q1 [ i ]]; for ( int i = 1 ; i <= cur2 ; i ++ ) q2 [ i ] = st . rc [ q2 [ i ]]; return qry ( mid + 1 , r , k - siz ); } } /* \u7ebf\u6bb5\u6811\u5b9e\u73b0 void build(int o,int l,int r) { st.build(st.rt[o]); if(l==r)return; int mid=(l+r)>>1; build(LC,l,mid); build(RC,mid+1,r); } void print(int o,int l,int r) { printf(\"%d %d:\",l,r); st.print(st.rt[o],1,n); printf(\"\\n\"); if(l==r)return; int mid=(l+r)>>1; print(LC,l,mid); print(RC,mid+1,r); } void update(int o,int l,int r,int q,int x,int v) { st.update(st.rt[o],1,n,x,v); if(l==r)return; int mid=(l+r)>>1; if(q<=mid)update(LC,l,mid,q,x,v); else update(RC,mid+1,r,q,x,v); } void getval(int o,int l,int r,int ql,int qr) { if(l>qr||r<ql)return; if(ql<=l&&r<=qr){q[++cur]=st.rt[o];return;} int mid=(l+r)>>1; getval(LC,l,mid,ql,qr); getval(RC,mid+1,r,ql,qr); } int query(int l,int r,int k) { if(l==r)return l; int mid=(l+r)>>1,siz=0; for(int i=1;i<=cur;i++)siz+=st.sum[st.lc[q[i]]]; if(siz>=k) { for(int i=1;i<=cur;i++)q[i]=st.lc[q[i]]; return query(l,mid,k); } else { for(int i=1;i<=cur;i++)q[i]=st.rc[q[i]]; return query(mid+1,r,k-siz); } } */ int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , a + i ), ST . insert ( a [ i ]); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \" %c\" , op + i ); if ( op [ i ] == 'C' ) scanf ( \"%d%d\" , u + i , x + i ), ST . insert ( x [ i ]); else scanf ( \"%d%d%d\" , l + i , r + i , k + i ); } for ( set < int >:: iterator it = ST . begin (); it != ST . end (); it ++ ) mp [ * it ] = ++ cur , v [ cur ] = * it ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = mp [ a [ i ]]; for ( int i = 1 ; i <= m ; i ++ ) if ( op [ i ] == 'C' ) x [ i ] = mp [ x [ i ]]; n += m ; // build(1,1,n); for ( int i = 1 ; i <= n ; i ++ ) upd ( i , a [ i ], 1 ); // print(1,1,n); for ( int i = 1 ; i <= m ; i ++ ) { if ( op [ i ] == 'C' ) { upd ( u [ i ], a [ u [ i ]], - 1 ); upd ( u [ i ], x [ i ], 1 ); a [ u [ i ]] = x [ i ]; } else { gtv ( r [ i ], q1 , cur1 ); gtv ( l [ i ] - 1 , q2 , cur2 ); printf ( \"%d \\n \" , v [ qry ( 1 , n , k [ i ])]); } } return 0 ; }","title":"\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811"},{"location":"ds/persistent-seg/","text":"\u4e3b\u5e2d\u6811 \u00b6 \u4e3b\u5e2d\u6811\u5168\u79f0\u662f\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u53c2\u89c1 \u77e5\u4e4e\u8ba8\u8bba \u3002 Warning \u51fd\u6570\u5f0f\u7ebf\u6bb5\u6811 \u662f\u6307\u4f7f\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\u601d\u60f3\u7684\u7ebf\u6bb5\u6811\u3002\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u601d\u60f3\u4e2d\uff0c\u5c06\u8ba1\u7b97\u673a\u8fd0\u7b97\u89c6\u4e3a\u6570\u5b66\u51fd\u6570\uff0c\u5e76\u907f\u514d\u53ef\u6539\u53d8\u7684\u72b6\u6001\u6216\u53d8\u91cf\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u51fd\u6570\u5f0f\u7ebf\u6bb5\u6811\u662f \u5b8c\u5168\u53ef\u6301\u4e45\u5316 \u7684\u3002 \u9762\u5bf9\u773c\u524d\u7684\u533a\u95f4\u7b2c k k \u5c0f\u95ee\u9898\uff0c\u4f60\u8be5\u4f55\u4ece\u4e0b\u624b\uff1f \u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6848\u662f\uff1a\u4f7f\u7528\u4e3b\u5e2d\u6811\u3002 \u4e3b\u5e2d\u6811\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\uff1a\u4fdd\u5b58\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u65f6\u7684\u5386\u53f2\u7248\u672c\uff0c\u4ee5\u4fbf\u67e5\u8be2\u533a\u95f4\u7b2c k k \u5c0f\u3002 \u600e\u4e48\u4fdd\u5b58\u5462\uff1f\u7b80\u5355\u66b4\u529b\u4e00\u70b9\uff0c\u6bcf\u6b21\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u5457\u3002 \u90a3\u7a7a\u95f4\u8fd8\u4e0d\u7206\u6389\uff1f \u90a3\u4e48\u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff0c\u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u4fee\u6539\u7684\u70b9\u7684\u4e2a\u6570\u662f\u4e00\u6837\u7684\u3002 \uff08\u4f8b\u5982\u4e0b\u56fe\uff0c\u4fee\u6539\u4e86 [1,8] [1,8] \u4e2d\u5bf9\u5e94\u6743\u503c\u4e3a 1 \u7684\u7ed3\u70b9\uff0c\u7ea2\u8272\u7684\u70b9\u5373\u4e3a\u66f4\u6539\u7684\u70b9\uff09 \u53ea\u66f4\u6539\u4e86 O(\\log{n}) O(\\log{n}) \u4e2a\u7ed3\u70b9\uff0c\u5f62\u6210\u4e00\u6761\u94fe\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21\u66f4\u6539\u7684\u7ed3\u70b9\u6570 = \u6811\u7684\u9ad8\u5ea6\u3002 \u6ce8\u610f\u4e3b\u5e2d\u6811\u4e0d\u80fd\u4f7f\u7528\u5806\u5f0f\u5b58\u50a8\u6cd5\uff0c\u5c31\u662f\u8bf4\u4e0d\u80fd\u7528 x\\times 2 x\\times 2 , x\\times 2+1 x\\times 2+1 \u6765\u8868\u793a\u5de6\u53f3\u513f\u5b50\uff0c\u800c\u662f\u5e94\u8be5\u52a8\u6001\u5f00\u70b9\uff0c\u5e76\u4fdd\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7f16\u53f7\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5728\u8bb0\u5f55\u5de6\u53f3\u513f\u5b50\u7684\u57fa\u7840\u4e0a\u5b58\u4e00\u4e0b\u63d2\u5165\u6bcf\u4e2a\u6570\u7684\u65f6\u5019\u7684\u6839\u8282\u70b9\u5c31\u53ef\u4ee5\u6301\u4e45\u5316\u8fa3\u3002 \u6211\u4eec\u628a\u95ee\u9898\u7b80\u5316\u4e00\u4e0b\uff1a\u6bcf\u6b21\u6c42 [1,r] [1,r] \u533a\u95f4\u5185\u7684 k k \u5c0f\u503c\u3002 \u600e\u4e48\u505a\u5462\uff1f\u53ea\u9700\u8981\u627e\u5230\u63d2\u5165 r \u65f6\u7684\u6839\u8282\u70b9\u7248\u672c\uff0c\u7136\u540e\u7528\u666e\u901a\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u6709\u7684\u53eb\u952e\u503c\u7ebf\u6bb5\u6811 / \u503c\u57df\u7ebf\u6bb5\u6811\uff09\u505a\u5c31\u884c\u4e86\u3002 \u90a3\u4e48\u8fd9\u4e2a\u76f8\u4fe1\u5927\u5bb6\u5f88\u7b80\u5355\u90fd\u80fd\u7406\u89e3\uff0c\u628a\u95ee\u9898\u6269\u5c55\u5230\u539f\u95ee\u9898\u2014\u2014\u6c42 [l,r] [l,r] \u533a\u95f4 k k \u5c0f\u503c\u3002 \u8fd9\u91cc\u6211\u4eec\u518d\u8054\u7cfb\u53e6\u5916\u4e00\u4e2a\u77e5\u8bc6\u7406\u89e3\uff1a \u524d\u7f00\u548c \u3002 \u8fd9\u4e2a\u5c0f\u4e1c\u897f\u5de7\u5999\u8fd0\u7528\u4e86\u533a\u95f4\u51cf\u6cd5\u7684\u6027\u8d28\uff0c\u901a\u8fc7\u9884\u5904\u7406\u4ece\u800c\u8fbe\u5230 O(1) O(1) \u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee\u3002 \u90a3\u4e48\u6211\u4eec\u9614\u4ee5\u53d1\u73b0\uff0c\u4e3b\u5e2d\u6811\u7edf\u8ba1\u7684\u4fe1\u606f\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6027\u8d28\u3002 \u6240\u4ee5\u2026\u2026 \u5982\u679c\u9700\u8981\u5f97\u5230 [l,r] [l,r] \u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u53ea\u9700\u8981\u7528 [1,r] [1,r] \u7684\u4fe1\u606f\u51cf\u53bb [1,l - 1] [1,l - 1] \u7684\u4fe1\u606f\u5c31\u884c\u4e86\u3002 \u90a3\u4e48\u81f3\u6b64\uff0c\u8be5\u95ee\u9898\u89e3\u51b3\uff01\uff08\u5b8c\u7ed3\u6492\u82b1\uff09 \u5173\u4e8e\u7a7a\u95f4\u95ee\u9898\uff0c\u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff1a\u7531\u4e8e\u6211\u4eec\u662f\u52a8\u6001\u5f00\u70b9\u7684\uff0c\u6240\u4ee5\u4e00\u68f5\u7ebf\u6bb5\u6811\u53ea\u4f1a\u51fa\u73b0 2n-1 2n-1 \u4e2a\u7ed3\u70b9\u3002 \u7136\u540e\uff0c\u6709 n n \u6b21\u4fee\u6539\uff0c\u6bcf\u6b21\u589e\u52a0 \\log{n} \\log{n} \u4e2a\u7ed3\u70b9\u3002\u90a3\u4e48\u6700\u574f\u60c5\u51b5\u7ed3\u70b9\u6570\u4f1a\u8fbe\u5230 2n-1+n\\log{n} 2n-1+n\\log{n} \uff0c\u90a3\u4e48\u6b64\u9898\u7684 n \\leq 10^5 n \\leq 10^5 \uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230 \\lceil\\log_2{10^5}\\rceil = 17 \\lceil\\log_2{10^5}\\rceil = 17 \u3002 \u90a3\u4e48\u628a n n \u548c \\log \\log \u7684\u7ed3\u679c\u4ee3\u5165\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u53d8\u6210 2\\times 10^5-1+17\\times 10^5 2\\times 10^5-1+17\\times 10^5 \uff0c\u5ffd\u7565\u6389 -1 -1 \uff0c\u5927\u6982\u5c31\u662f 19\\times 10^5 19\\times 10^5 \u3002 \u7b97\u4e86\u8fd9\u4e48\u4e00\u5927\u5806\uff0cI tell you: \u5343\u4e07\u4e0d\u8981\u541d\u556c\u7a7a\u95f4\uff01\u4fdd\u5b88\u4e00\u70b9\uff0c\u76f4\u63a5\u4e0a\u4e2a 2^5\\times 10^5 2^5\\times 10^5 \uff0c\u63a5\u8fd1\u539f\u7a7a\u95f4\u7684\u4e24\u500d\uff08\u5373 n << 5 \uff09\u3002 \uff08\u8f83\u771f\u7684\u540c\u5b66\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u771f\u7684\u5f88\u541d\u556c\uff0c\u53ef\u4ee5\u81ea\u5df1\u9020\u4e2a\u6570\u636e\u8f93\u51fa\u4e00\u4e0b\u7ed3\u70b9\u6570\u91cf\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u6ca1\u9020\u597d\u628a\u81ea\u5df1\u5361\u6389\u4e86\u5c31 \u5c34\u5c2c\u4e86 \u8d56\u4f60\u4e86\uff09 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 1e5 ; //\u6570\u636e\u8303\u56f4 int tot , n , m ; int sum [( maxn << 5 ) + 10 ], rt [ maxn + 10 ], ls [( maxn << 5 ) + 10 ], rs [( maxn << 5 ) + 10 ]; int a [ maxn + 10 ], ind [ maxn + 10 ], len ; inline int getid ( const int & val ) //\u79bb\u6563\u5316 { return lower_bound ( ind + 1 , ind + len + 1 , val ) - ind ; } int build ( int l , int r ) //\u5efa\u6811 { int root = ++ tot ; if ( l == r ) return root ; int mid = l + r >> 1 ; ls [ root ] = build ( l , mid ); rs [ root ] = build ( mid + 1 , r ); return root ; //\u8fd4\u56de\u8be5\u5b50\u6811\u7684\u6839\u8282\u70b9 } int update ( int k , int l , int r , int root ) //\u63d2\u5165\u64cd\u4f5c { int dir = ++ tot ; ls [ dir ] = ls [ root ], rs [ dir ] = rs [ root ], sum [ dir ] = sum [ root ] + 1 ; if ( l == r ) return dir ; int mid = l + r >> 1 ; if ( k <= mid ) ls [ dir ] = update ( k , l , mid , ls [ dir ]); else rs [ dir ] = update ( k , mid + 1 , r , rs [ dir ]); return dir ; } int query ( int u , int v , int l , int r , int k ) //\u67e5\u8be2\u64cd\u4f5c { int mid = l + r >> 1 , x = sum [ ls [ v ]] - sum [ ls [ u ]]; //\u901a\u8fc7\u533a\u95f4\u51cf\u6cd5\u5f97\u5230\u5de6\u513f\u5b50\u7684\u4fe1\u606f if ( l == r ) return l ; if ( k <= x ) //\u8bf4\u660e\u5728\u5de6\u513f\u5b50\u4e2d return query ( ls [ u ], ls [ v ], l , mid , k ); else //\u8bf4\u660e\u5728\u53f3\u513f\u5b50\u4e2d return query ( rs [ u ], rs [ v ], mid + 1 , r , k - x ); } inline void init () { scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%d\" , a + i ); memcpy ( ind , a , sizeof ind ); sort ( ind + 1 , ind + n + 1 ); len = unique ( ind + 1 , ind + n + 1 ) - ind - 1 ; rt [ 0 ] = build ( 1 , len ); for ( register int i = 1 ; i <= n ; ++ i ) rt [ i ] = update ( getid ( a [ i ]), 1 , len , rt [ i - 1 ]); } int l , r , k ; inline void work () { while ( m -- ) { scanf ( \"%d%d%d\" , & l , & r , & k ); printf ( \"%d \\n \" , ind [ query ( rt [ l - 1 ], rt [ r ], 1 , len , k )]); //\u56de\u7b54\u8be2\u95ee } } int main () { init (); work (); return 0 ; } \u53c2\u8003 \u00b6 https://en.wikipedia.org/wiki/Persistent_data_structure https://www.cnblogs.com/zinthos/p/3899565.html","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"},{"location":"ds/persistent-seg/#_1","text":"\u4e3b\u5e2d\u6811\u5168\u79f0\u662f\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u53c2\u89c1 \u77e5\u4e4e\u8ba8\u8bba \u3002 Warning \u51fd\u6570\u5f0f\u7ebf\u6bb5\u6811 \u662f\u6307\u4f7f\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\u601d\u60f3\u7684\u7ebf\u6bb5\u6811\u3002\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u601d\u60f3\u4e2d\uff0c\u5c06\u8ba1\u7b97\u673a\u8fd0\u7b97\u89c6\u4e3a\u6570\u5b66\u51fd\u6570\uff0c\u5e76\u907f\u514d\u53ef\u6539\u53d8\u7684\u72b6\u6001\u6216\u53d8\u91cf\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u51fd\u6570\u5f0f\u7ebf\u6bb5\u6811\u662f \u5b8c\u5168\u53ef\u6301\u4e45\u5316 \u7684\u3002 \u9762\u5bf9\u773c\u524d\u7684\u533a\u95f4\u7b2c k k \u5c0f\u95ee\u9898\uff0c\u4f60\u8be5\u4f55\u4ece\u4e0b\u624b\uff1f \u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6848\u662f\uff1a\u4f7f\u7528\u4e3b\u5e2d\u6811\u3002 \u4e3b\u5e2d\u6811\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\uff1a\u4fdd\u5b58\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u65f6\u7684\u5386\u53f2\u7248\u672c\uff0c\u4ee5\u4fbf\u67e5\u8be2\u533a\u95f4\u7b2c k k \u5c0f\u3002 \u600e\u4e48\u4fdd\u5b58\u5462\uff1f\u7b80\u5355\u66b4\u529b\u4e00\u70b9\uff0c\u6bcf\u6b21\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u5457\u3002 \u90a3\u7a7a\u95f4\u8fd8\u4e0d\u7206\u6389\uff1f \u90a3\u4e48\u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff0c\u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u4fee\u6539\u7684\u70b9\u7684\u4e2a\u6570\u662f\u4e00\u6837\u7684\u3002 \uff08\u4f8b\u5982\u4e0b\u56fe\uff0c\u4fee\u6539\u4e86 [1,8] [1,8] \u4e2d\u5bf9\u5e94\u6743\u503c\u4e3a 1 \u7684\u7ed3\u70b9\uff0c\u7ea2\u8272\u7684\u70b9\u5373\u4e3a\u66f4\u6539\u7684\u70b9\uff09 \u53ea\u66f4\u6539\u4e86 O(\\log{n}) O(\\log{n}) \u4e2a\u7ed3\u70b9\uff0c\u5f62\u6210\u4e00\u6761\u94fe\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21\u66f4\u6539\u7684\u7ed3\u70b9\u6570 = \u6811\u7684\u9ad8\u5ea6\u3002 \u6ce8\u610f\u4e3b\u5e2d\u6811\u4e0d\u80fd\u4f7f\u7528\u5806\u5f0f\u5b58\u50a8\u6cd5\uff0c\u5c31\u662f\u8bf4\u4e0d\u80fd\u7528 x\\times 2 x\\times 2 , x\\times 2+1 x\\times 2+1 \u6765\u8868\u793a\u5de6\u53f3\u513f\u5b50\uff0c\u800c\u662f\u5e94\u8be5\u52a8\u6001\u5f00\u70b9\uff0c\u5e76\u4fdd\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7f16\u53f7\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5728\u8bb0\u5f55\u5de6\u53f3\u513f\u5b50\u7684\u57fa\u7840\u4e0a\u5b58\u4e00\u4e0b\u63d2\u5165\u6bcf\u4e2a\u6570\u7684\u65f6\u5019\u7684\u6839\u8282\u70b9\u5c31\u53ef\u4ee5\u6301\u4e45\u5316\u8fa3\u3002 \u6211\u4eec\u628a\u95ee\u9898\u7b80\u5316\u4e00\u4e0b\uff1a\u6bcf\u6b21\u6c42 [1,r] [1,r] \u533a\u95f4\u5185\u7684 k k \u5c0f\u503c\u3002 \u600e\u4e48\u505a\u5462\uff1f\u53ea\u9700\u8981\u627e\u5230\u63d2\u5165 r \u65f6\u7684\u6839\u8282\u70b9\u7248\u672c\uff0c\u7136\u540e\u7528\u666e\u901a\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u6709\u7684\u53eb\u952e\u503c\u7ebf\u6bb5\u6811 / \u503c\u57df\u7ebf\u6bb5\u6811\uff09\u505a\u5c31\u884c\u4e86\u3002 \u90a3\u4e48\u8fd9\u4e2a\u76f8\u4fe1\u5927\u5bb6\u5f88\u7b80\u5355\u90fd\u80fd\u7406\u89e3\uff0c\u628a\u95ee\u9898\u6269\u5c55\u5230\u539f\u95ee\u9898\u2014\u2014\u6c42 [l,r] [l,r] \u533a\u95f4 k k \u5c0f\u503c\u3002 \u8fd9\u91cc\u6211\u4eec\u518d\u8054\u7cfb\u53e6\u5916\u4e00\u4e2a\u77e5\u8bc6\u7406\u89e3\uff1a \u524d\u7f00\u548c \u3002 \u8fd9\u4e2a\u5c0f\u4e1c\u897f\u5de7\u5999\u8fd0\u7528\u4e86\u533a\u95f4\u51cf\u6cd5\u7684\u6027\u8d28\uff0c\u901a\u8fc7\u9884\u5904\u7406\u4ece\u800c\u8fbe\u5230 O(1) O(1) \u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee\u3002 \u90a3\u4e48\u6211\u4eec\u9614\u4ee5\u53d1\u73b0\uff0c\u4e3b\u5e2d\u6811\u7edf\u8ba1\u7684\u4fe1\u606f\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6027\u8d28\u3002 \u6240\u4ee5\u2026\u2026 \u5982\u679c\u9700\u8981\u5f97\u5230 [l,r] [l,r] \u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u53ea\u9700\u8981\u7528 [1,r] [1,r] \u7684\u4fe1\u606f\u51cf\u53bb [1,l - 1] [1,l - 1] \u7684\u4fe1\u606f\u5c31\u884c\u4e86\u3002 \u90a3\u4e48\u81f3\u6b64\uff0c\u8be5\u95ee\u9898\u89e3\u51b3\uff01\uff08\u5b8c\u7ed3\u6492\u82b1\uff09 \u5173\u4e8e\u7a7a\u95f4\u95ee\u9898\uff0c\u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff1a\u7531\u4e8e\u6211\u4eec\u662f\u52a8\u6001\u5f00\u70b9\u7684\uff0c\u6240\u4ee5\u4e00\u68f5\u7ebf\u6bb5\u6811\u53ea\u4f1a\u51fa\u73b0 2n-1 2n-1 \u4e2a\u7ed3\u70b9\u3002 \u7136\u540e\uff0c\u6709 n n \u6b21\u4fee\u6539\uff0c\u6bcf\u6b21\u589e\u52a0 \\log{n} \\log{n} \u4e2a\u7ed3\u70b9\u3002\u90a3\u4e48\u6700\u574f\u60c5\u51b5\u7ed3\u70b9\u6570\u4f1a\u8fbe\u5230 2n-1+n\\log{n} 2n-1+n\\log{n} \uff0c\u90a3\u4e48\u6b64\u9898\u7684 n \\leq 10^5 n \\leq 10^5 \uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230 \\lceil\\log_2{10^5}\\rceil = 17 \\lceil\\log_2{10^5}\\rceil = 17 \u3002 \u90a3\u4e48\u628a n n \u548c \\log \\log \u7684\u7ed3\u679c\u4ee3\u5165\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u53d8\u6210 2\\times 10^5-1+17\\times 10^5 2\\times 10^5-1+17\\times 10^5 \uff0c\u5ffd\u7565\u6389 -1 -1 \uff0c\u5927\u6982\u5c31\u662f 19\\times 10^5 19\\times 10^5 \u3002 \u7b97\u4e86\u8fd9\u4e48\u4e00\u5927\u5806\uff0cI tell you: \u5343\u4e07\u4e0d\u8981\u541d\u556c\u7a7a\u95f4\uff01\u4fdd\u5b88\u4e00\u70b9\uff0c\u76f4\u63a5\u4e0a\u4e2a 2^5\\times 10^5 2^5\\times 10^5 \uff0c\u63a5\u8fd1\u539f\u7a7a\u95f4\u7684\u4e24\u500d\uff08\u5373 n << 5 \uff09\u3002 \uff08\u8f83\u771f\u7684\u540c\u5b66\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u771f\u7684\u5f88\u541d\u556c\uff0c\u53ef\u4ee5\u81ea\u5df1\u9020\u4e2a\u6570\u636e\u8f93\u51fa\u4e00\u4e0b\u7ed3\u70b9\u6570\u91cf\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u6ca1\u9020\u597d\u628a\u81ea\u5df1\u5361\u6389\u4e86\u5c31 \u5c34\u5c2c\u4e86 \u8d56\u4f60\u4e86\uff09 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 1e5 ; //\u6570\u636e\u8303\u56f4 int tot , n , m ; int sum [( maxn << 5 ) + 10 ], rt [ maxn + 10 ], ls [( maxn << 5 ) + 10 ], rs [( maxn << 5 ) + 10 ]; int a [ maxn + 10 ], ind [ maxn + 10 ], len ; inline int getid ( const int & val ) //\u79bb\u6563\u5316 { return lower_bound ( ind + 1 , ind + len + 1 , val ) - ind ; } int build ( int l , int r ) //\u5efa\u6811 { int root = ++ tot ; if ( l == r ) return root ; int mid = l + r >> 1 ; ls [ root ] = build ( l , mid ); rs [ root ] = build ( mid + 1 , r ); return root ; //\u8fd4\u56de\u8be5\u5b50\u6811\u7684\u6839\u8282\u70b9 } int update ( int k , int l , int r , int root ) //\u63d2\u5165\u64cd\u4f5c { int dir = ++ tot ; ls [ dir ] = ls [ root ], rs [ dir ] = rs [ root ], sum [ dir ] = sum [ root ] + 1 ; if ( l == r ) return dir ; int mid = l + r >> 1 ; if ( k <= mid ) ls [ dir ] = update ( k , l , mid , ls [ dir ]); else rs [ dir ] = update ( k , mid + 1 , r , rs [ dir ]); return dir ; } int query ( int u , int v , int l , int r , int k ) //\u67e5\u8be2\u64cd\u4f5c { int mid = l + r >> 1 , x = sum [ ls [ v ]] - sum [ ls [ u ]]; //\u901a\u8fc7\u533a\u95f4\u51cf\u6cd5\u5f97\u5230\u5de6\u513f\u5b50\u7684\u4fe1\u606f if ( l == r ) return l ; if ( k <= x ) //\u8bf4\u660e\u5728\u5de6\u513f\u5b50\u4e2d return query ( ls [ u ], ls [ v ], l , mid , k ); else //\u8bf4\u660e\u5728\u53f3\u513f\u5b50\u4e2d return query ( rs [ u ], rs [ v ], mid + 1 , r , k - x ); } inline void init () { scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%d\" , a + i ); memcpy ( ind , a , sizeof ind ); sort ( ind + 1 , ind + n + 1 ); len = unique ( ind + 1 , ind + n + 1 ) - ind - 1 ; rt [ 0 ] = build ( 1 , len ); for ( register int i = 1 ; i <= n ; ++ i ) rt [ i ] = update ( getid ( a [ i ]), 1 , len , rt [ i - 1 ]); } int l , r , k ; inline void work () { while ( m -- ) { scanf ( \"%d%d%d\" , & l , & r , & k ); printf ( \"%d \\n \" , ind [ query ( rt [ l - 1 ], rt [ r ], 1 , len , k )]); //\u56de\u7b54\u8be2\u95ee } } int main () { init (); work (); return 0 ; }","title":"\u4e3b\u5e2d\u6811"},{"location":"ds/persistent-seg/#_2","text":"https://en.wikipedia.org/wiki/Persistent_data_structure https://www.cnblogs.com/zinthos/p/3899565.html","title":"\u53c2\u8003"},{"location":"ds/persistent-trie/","text":"","title":"\u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811"},{"location":"ds/persistent/","text":"\u90e8\u5206\u53ef\u6301\u4e45\u5316 \u00b6 \u6240\u6709\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f46\u662f\u53ea\u6709\u6700\u65b0\u7248\u672c\u53ef\u4ee5\u4fee\u6539\u3002 \u5b8c\u5168\u53ef\u6301\u4e45\u5316 \u00b6 \u6240\u6709\u7248\u672c\u90fd\u65e2\u53ef\u4ee5\u8bbf\u95ee\u53c8\u53ef\u4ee5\u4fee\u6539\u3002 \u53c2\u8003 \u00b6 https://en.wikipedia.org/wiki/Persistent_data_structure","title":"\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u7b80\u4ecb"},{"location":"ds/persistent/#_1","text":"\u6240\u6709\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f46\u662f\u53ea\u6709\u6700\u65b0\u7248\u672c\u53ef\u4ee5\u4fee\u6539\u3002","title":"\u90e8\u5206\u53ef\u6301\u4e45\u5316"},{"location":"ds/persistent/#_2","text":"\u6240\u6709\u7248\u672c\u90fd\u65e2\u53ef\u4ee5\u8bbf\u95ee\u53c8\u53ef\u4ee5\u4fee\u6539\u3002","title":"\u5b8c\u5168\u53ef\u6301\u4e45\u5316"},{"location":"ds/persistent/#_3","text":"https://en.wikipedia.org/wiki/Persistent_data_structure","title":"\u53c2\u8003"},{"location":"ds/queue/","text":"\u961f\u5217\uff0c\u82f1\u6587\u540d\u662f queue\uff0c\u5728 C++ STL \u4e2d\u6709 std::queue \u548c std::priority_queue \u3002 \u5148\u8fdb\u5165\u961f\u5217\u7684\u5143\u7d20\u4e00\u5b9a\u5148\u51fa\u961f\u5217\uff0c\u56e0\u6b64\u961f\u5217\u901a\u5e38\u4e5f\u88ab\u79f0\u4e3a\u5148\u8fdb\u5148\u51fa\uff08first in first out\uff09\u8868\uff0c\u7b80\u79f0 FIFO \u8868\u3002 \u6ce8\uff1a std::stack \u548c std::queue \u90fd\u662f\u5bb9\u5668\u9002\u914d\u5668\uff0c\u9ed8\u8ba4\u5e95\u5c42\u5bb9\u5668\u4e3a std::deque \uff08\u53cc\u7aef\u961f\u5217\uff09\u3002 \u901a\u5e38\u7528\u4e00\u4e2a\u6570\u7ec4\u6a21\u62df\u4e00\u4e2a\u961f\u5217\uff0c\u7528\u4e24\u4e2a\u6307\u9488\uff1afront \u548c rear \u5206\u522b\u8868\u793a\u961f\u5217\u5934\u90e8\u548c\u5c3e\u90e8\u3002 \u5728\u5165\u961f\u7684\u65f6\u5019\u5c06 rear \u540e\u79fb\uff0c\u5728\u51fa\u961f\u7684\u65f6\u5019\u5c06 front \u540e\u79fb\u3002 \u8fd9\u6837\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6574\u4e2a\u961f\u5217\u4f1a\u5411\u6570\u7ec4\u7684\u5c3e\u90e8\u79fb\u52a8\uff0c\u4e00\u65e6\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u672b\u7aef\uff0c\u5373\u4f7f\u6570\u7ec4\u7684\u524d\u7aef\u8fd8\u6709\u7a7a\u95f2\u4f4d\u7f6e\uff0c\u518d\u8fdb\u884c\u5165\u961f\u64cd\u4f5c\u4e5f\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002\uff08\u8fd9\u79cd\u6570\u7ec4\u4e0a\u5b9e\u9645\u6709\u7a7a\u95f2\u4f4d\u7f6e\u800c\u53d1\u751f\u4e86\u4e0a\u6ea2\u7684\u73b0\u8c61\u79f0\u4e3a\u662f \u201c\u5047\u6ea2\u51fa\u201d\u3002 \u89e3\u51b3\u5047\u6ea2\u51fa\u7684\u529e\u6cd5\u662f\u91c7\u7528\u5faa\u73af\u7684\u65b9\u5f0f\u6765\u7ec4\u7ec7\u5b58\u653e\u961f\u5217\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u5373\u5c06\u6570\u7ec4\u4e0b\u6807\u4e3a 0 \u7684\u4f4d\u7f6e\u770b\u505a\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u7ee7\u3002\uff08 x \u7684\u540e\u7ee7\u4e3a (x + 1) % Size \uff09\u3002\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u5faa\u73af\u961f\u5217\u3002","title":"\u961f\u5217"},{"location":"ds/sbt/","text":"","title":"Size Balanced Tree"},{"location":"ds/scapegoat/","text":"\u66ff\u7f6a\u7f8a\u6811 \u662f\u4e00\u79cd\u4f9d\u9760\u91cd\u6784\u64cd\u4f5c\u7ef4\u6301\u5e73\u8861\u7684\u91cd\u91cf\u5e73\u8861\u6811\u3002\u66ff\u7f6a\u7f8a\u6811\u4f1a\u5728\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u68c0\u6d4b\u9014\u7ecf\u7684\u8282\u70b9\uff0c\u82e5\u53d1\u73b0\u5931\u8861\uff0c\u5219\u5c06\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u91cd\u6784\u3002 \u6211\u4eec\u5728\u6b64\u5b9e\u73b0\u4e00\u4e2a\u53ef\u91cd\u7684\u6743\u503c\u5e73\u8861\u6811\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int cnt , // \u6811\u4e2d\u5143\u7d20\u603b\u6570 rt , // \u6839\u8282\u70b9\uff0c\u521d\u503c\u4e3a 0 \u4ee3\u8868\u7a7a\u6811 w [ MAXN ], // \u70b9\u4e2d\u7684\u6570\u636e / \u6743\u503c lc [ MAXN ], rc [ MAXN ], // \u5de6\u53f3\u5b50\u6811 wn [ MAXN ], // \u672c\u6570\u636e\u51fa\u73b0\u6b21\u6570\uff08\u4e3a 0 \u4ee3\u8868\u5df2\u5220\u9664\uff09 s [ MAXN ], // \u4ee5\u672c\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f sd [ MAXN ]; // \u5df2\u5220\u9664\u8282\u70b9\u4e0d\u8ba1\u7684\u5b50\u6811\u5927\u5c0f void Calc ( int k ) { // \u91cd\u65b0\u8ba1\u7b97\u4ee5 k \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f s [ k ] = s [ lc [ k ]] + s [ rc [ k ]] + wn [ k ]; sd [ k ] = sd [ lc [ k ]] + sd [ rc [ k ]] + wn [ k ]; } \u91cd\u6784 \u00b6 \u9996\u5148\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u9700\u8981\u5224\u5b9a\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u5e94\u91cd\u6784\u3002\u4e3a\u6b64\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u6bd4\u4f8b\u5e38\u6570 \\alpha \\alpha \uff08\u53d6\u503c\u5728 (0.5,1) (0.5,1) \uff0c\u4e00\u822c\u91c7\u7528 0.7 0.7 \u6216 0.8 0.8 \uff09\uff0c\u82e5\u67d0\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5927\u5c0f\u5360\u5b83\u672c\u8eab\u5927\u5c0f\u7684\u6bd4\u4f8b\u8d85\u8fc7 \\alpha \\alpha \uff0c\u5219\u91cd\u6784\u3002 \u53e6\u5916\u7531\u4e8e\u6211\u4eec\u91c7\u7528\u60f0\u6027\u5220\u9664\uff08\u5220\u9664\u53ea\u4f7f\u7528 wn[k]-- \uff09\uff0c\u5df2\u5220\u9664\u8282\u70b9\u8fc7\u591a\u4e5f\u5f71\u54cd\u6548\u7387\u3002\u56e0\u6b64\u82e5\u672a\u88ab\u5220\u9664\u7684\u5b50\u6811\u5927\u5c0f\u5360\u603b\u5927\u5c0f\u7684\u6bd4\u4f8b\u4f4e\u4e8e \\alpha \\alpha \uff0c\u5219\u4ea6\u91cd\u6784\u3002 1 2 3 4 5 inline bool CanRbu ( int k ) { // \u5224\u65ad\u8282\u70b9 k \u662f\u5426\u9700\u8981\u91cd\u6784 return wn [ k ] && ( alpha * s [ k ] <= ( double ) std :: max ( s [ lc [ k ]], s [ rc [ k ]]) || ( double ) sd [ k ] <= alpha * s [ k ]); } \u91cd\u6784\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\u2014\u2014\u5148\u524d\u5e8f\u904d\u5386\u5c55\u5f00\u5b58\u5165\u6570\u7ec4\uff0c\u518d\u4e8c\u5206\u91cd\u5efa\u6210\u6811\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void Rbu_Flatten ( int & ldc , int k ) { // \u524d\u5e8f\u904d\u5386\u5c55\u5f00\u4ee5 k \u8282\u70b9\u4e3a\u6839\u5b50\u6811 if ( ! k ) return ; Rbu_Flatten ( ldc , lc [ k ]); if ( wn [ k ]) ldr [ ldc ++ ] = k ; // \u82e5\u5f53\u524d\u8282\u70b9\u5df2\u5220\u9664\u5219\u4e0d\u4fdd\u7559 Rbu_Flatten ( ldc , rc [ k ]); } int Rbu_Build ( int l , int r ) { // \u5c06 ldr[] \u6570\u7ec4\u5185 [l, r) \u533a\u95f4\u91cd\u5efa\u6210\u6811\uff0c\u8fd4\u56de\u6839\u8282\u70b9 int mid = l + r >> 1 ; // \u9009\u53d6\u4e2d\u95f4\u4e3a\u6839\u4f7f\u5176\u5e73\u8861 if ( l >= r ) return 0 ; lc [ ldr [ mid ]] = Rbu_Build ( l , mid ); rc [ ldr [ mid ]] = Rbu_Build ( mid + 1 , r ); // \u5efa\u5de6\u53f3\u5b50\u6811 Calc ( ldr [ mid ]); return ldr [ mid ]; } void Rbu ( int & k ) { // \u91cd\u6784\u8282\u70b9 k \u7684\u5168\u8fc7\u7a0b int ldc = 0 ; Rbu_Flatten ( ldc , k ); k = Rbu_Build ( 0 , ldc ); } \u57fa\u672c\u64cd\u4f5c \u00b6 \u51e0\u79cd\u64cd\u4f5c\u7684\u5904\u7406\u65b9\u5f0f\u8f83\u4e3a\u7c7b\u4f3c\uff0c\u90fd\u89c4\u5b9a\u4e86 \u5230\u8fbe\u7a7a\u7ed3\u70b9 \u4e0e \u627e\u5230\u5bf9\u5e94\u7ed3\u70b9 \u7684\u884c\u4e3a\uff0c\u4e4b\u540e\u6309 \u5c0f\u4e8e\u5411\u5de6\u3001\u5927\u4e8e\u5411\u53f3 \u7684\u65b9\u5f0f\u5411\u4e0b\u9012\u5f52\u3002 \u63d2\u5165 \u00b6 \u63d2\u5165\u65f6\uff0c\u5230\u8fbe\u7a7a\u7ed3\u70b9\u5219\u65b0\u5efa\u8282\u70b9\uff0c\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\u5219 wn[k]++ \u3002\u9012\u5f52\u7ed3\u675f\u540e\uff0c\u9014\u7ecf\u7684\u8282\u70b9\u53ef\u91cd\u6784\u7684\u8981\u91cd\u6784\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void Ins ( int & k , int p ) { // \u5728\u4ee5 k \u4e3a\u6839\u7684\u5b50\u6811\u5185\u6dfb\u52a0\u6743\u503c\u4e3a p \u8282\u70b9 if ( ! k ) { k = ++ cnt ; if ( ! rt ) rt = 1 ; w [ k ] = p ; lc [ k ] = rc [ k ] = 0 ; wn [ k ] = s [ k ] = sd [ k ] = 1 ; } else { if ( w [ k ] == p ) wn [ k ] ++ ; else if ( w [ k ] < p ) Ins ( rc [ k ], p ); else Ins ( lc [ k ], p ); Calc ( k ); if ( CanRbu ( k )) Rbu ( k ); } } \u5220\u9664 \u00b6 \u60f0\u6027\u5220\u9664\uff0c\u5230\u8fbe\u7a7a\u7ed3\u70b9\u5219\u5ffd\u7565\uff0c\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\u5219 wn[k]-- \u3002\u9012\u5f52\u7ed3\u675f\u540e\uff0c\u53ef\u91cd\u6784\u8282\u70b9\u8981\u91cd\u6784\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 void Del ( int & k , int p ) { // \u4ece\u4ee5 k \u4e3a\u6839\u5b50\u6811\u79fb\u9664\u6743\u503c\u4e3a p \u8282\u70b9 if ( ! k ) return ; else { sd [ k ] -- ; if ( w [ k ] == p ) { if ( wn [ k ]) wn [ k ] -- ; } else { if ( w [ k ] < p ) Del ( rc [ k ], p ); else Del ( lc [ k ], p ); Calc ( k ); } } if ( CanRbu ( k )) Rbu ( k ); } upper_bound \u00b6 \u8fd4\u56de\u6743\u503c\u4e25\u683c\u5927\u4e8e\u67d0\u503c\u7684\u6700\u5c0f\u540d\u6b21\u3002 \u5230\u8fbe\u7a7a\u7ed3\u70b9\u5219\u8fd4\u56de 1\uff0c\u56e0\u4e3a\u53ea\u6709\u8be5\u5b50\u6811\u5de6\u8fb9\u7684\u6570\u5747\u5c0f\u4e8e\u67e5\u627e\u6570\u624d\u4f1a\u9012\u5f52\u81f3\u6b64\u3002\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u8be5\u8282\u70b9\u6240\u5360\u636e\u7684\u6700\u540e\u4e00\u4e2a\u540d\u6b21 + 1\u3002 1 2 3 4 5 6 7 8 9 10 11 int MyUprBd ( int k , int p ) { // \u5728\u4ee5 k \u4e3a\u6839\u5b50\u6811\u4e2d\uff0c\u5927\u4e8e p \u7684\u6700\u5c0f\u6570\u7684\u540d\u6b21 if ( ! k ) return 1 ; else if ( w [ k ] == p && wn [ k ]) return sd [ lc [ k ]] + 1 + wn [ k ]; else if ( p < w [ k ]) return MyUprBd ( lc [ k ], p ); else return sd [ lc [ k ]] + wn [ k ] + MyUprBd ( rc [ k ], p ); } \u4ee5\u4e0b\u662f\u53cd\u4e49\u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u91c7\u7528 std::greater<> \u6bd4\u8f83\uff0c\u5373\u8fd4\u56de\u6743\u503c\u4e25\u683c\u5c0f\u4e8e\u67d0\u503c\u7684\u6700\u5927\u540d\u6b21\u3002\u67e5\u8be2\u4e00\u4e2a\u6570\u7684\u6392\u540d\u53ef\u4ee5\u7528 MyUprGrt(rt, x) + 1 \u3002 1 2 3 4 5 6 7 8 9 10 int MyUprGrt ( int k , int p ) { if ( ! k ) return 0 ; else if ( w [ k ] == p && wn [ k ]) return sd [ lc [ k ]]; else if ( w [ k ] < p ) return sd [ lc [ k ]] + wn [ k ] + MyUprGrt ( rc [ k ], p ); else return MyUprGrt ( lc [ k ], p ); } at \u00b6 \u7ed9\u5b9a\u540d\u6b21\uff0c\u8fd4\u56de\u8be5\u540d\u6b21\u4e0a\u7684\u6743\u503c\u3002\u5230\u8fbe\u7a7a\u7ed3\u70b9\u8bf4\u660e\u65e0\u6b64\u540d\u6b21\uff0c\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\u5219\u8fd4\u56de\u5176\u6743\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 int MyAt ( int k , int p ) { // \u4ee5 k \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u540d\u6b21\u4e3a p \u7684\u6743\u503c if ( ! k ) return 0 ; else if ( sd [ lc [ k ]] < p && p <= sd [ lc [ k ]] + wn [ k ]) return w [ k ]; else if ( sd [ lc [ k ]] + wn [ k ] < p ) return MyAt ( rc [ k ], p - sd [ lc [ k ]] - wn [ k ]); else return MyAt ( lc [ k ], p ); } \u524d\u9a71\u540e\u7ee7 \u00b6 \u4ee5\u4e0a\u4e24\u79cd\u529f\u80fd\u7ed3\u5408\u5373\u53ef\u3002 1 2 inline int MyPre ( int k , int p ) { return MyAt ( k , MyUprGrt ( k , p )); } inline int MyPost ( int k , int p ) { return MyAt ( k , MyUprBd ( k , p )); }","title":"\u66ff\u7f6a\u7f8a\u6811"},{"location":"ds/scapegoat/#_1","text":"\u9996\u5148\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u9700\u8981\u5224\u5b9a\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u5e94\u91cd\u6784\u3002\u4e3a\u6b64\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u6bd4\u4f8b\u5e38\u6570 \\alpha \\alpha \uff08\u53d6\u503c\u5728 (0.5,1) (0.5,1) \uff0c\u4e00\u822c\u91c7\u7528 0.7 0.7 \u6216 0.8 0.8 \uff09\uff0c\u82e5\u67d0\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5927\u5c0f\u5360\u5b83\u672c\u8eab\u5927\u5c0f\u7684\u6bd4\u4f8b\u8d85\u8fc7 \\alpha \\alpha \uff0c\u5219\u91cd\u6784\u3002 \u53e6\u5916\u7531\u4e8e\u6211\u4eec\u91c7\u7528\u60f0\u6027\u5220\u9664\uff08\u5220\u9664\u53ea\u4f7f\u7528 wn[k]-- \uff09\uff0c\u5df2\u5220\u9664\u8282\u70b9\u8fc7\u591a\u4e5f\u5f71\u54cd\u6548\u7387\u3002\u56e0\u6b64\u82e5\u672a\u88ab\u5220\u9664\u7684\u5b50\u6811\u5927\u5c0f\u5360\u603b\u5927\u5c0f\u7684\u6bd4\u4f8b\u4f4e\u4e8e \\alpha \\alpha \uff0c\u5219\u4ea6\u91cd\u6784\u3002 1 2 3 4 5 inline bool CanRbu ( int k ) { // \u5224\u65ad\u8282\u70b9 k \u662f\u5426\u9700\u8981\u91cd\u6784 return wn [ k ] && ( alpha * s [ k ] <= ( double ) std :: max ( s [ lc [ k ]], s [ rc [ k ]]) || ( double ) sd [ k ] <= alpha * s [ k ]); } \u91cd\u6784\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\u2014\u2014\u5148\u524d\u5e8f\u904d\u5386\u5c55\u5f00\u5b58\u5165\u6570\u7ec4\uff0c\u518d\u4e8c\u5206\u91cd\u5efa\u6210\u6811\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void Rbu_Flatten ( int & ldc , int k ) { // \u524d\u5e8f\u904d\u5386\u5c55\u5f00\u4ee5 k \u8282\u70b9\u4e3a\u6839\u5b50\u6811 if ( ! k ) return ; Rbu_Flatten ( ldc , lc [ k ]); if ( wn [ k ]) ldr [ ldc ++ ] = k ; // \u82e5\u5f53\u524d\u8282\u70b9\u5df2\u5220\u9664\u5219\u4e0d\u4fdd\u7559 Rbu_Flatten ( ldc , rc [ k ]); } int Rbu_Build ( int l , int r ) { // \u5c06 ldr[] \u6570\u7ec4\u5185 [l, r) \u533a\u95f4\u91cd\u5efa\u6210\u6811\uff0c\u8fd4\u56de\u6839\u8282\u70b9 int mid = l + r >> 1 ; // \u9009\u53d6\u4e2d\u95f4\u4e3a\u6839\u4f7f\u5176\u5e73\u8861 if ( l >= r ) return 0 ; lc [ ldr [ mid ]] = Rbu_Build ( l , mid ); rc [ ldr [ mid ]] = Rbu_Build ( mid + 1 , r ); // \u5efa\u5de6\u53f3\u5b50\u6811 Calc ( ldr [ mid ]); return ldr [ mid ]; } void Rbu ( int & k ) { // \u91cd\u6784\u8282\u70b9 k \u7684\u5168\u8fc7\u7a0b int ldc = 0 ; Rbu_Flatten ( ldc , k ); k = Rbu_Build ( 0 , ldc ); }","title":"\u91cd\u6784"},{"location":"ds/scapegoat/#_2","text":"\u51e0\u79cd\u64cd\u4f5c\u7684\u5904\u7406\u65b9\u5f0f\u8f83\u4e3a\u7c7b\u4f3c\uff0c\u90fd\u89c4\u5b9a\u4e86 \u5230\u8fbe\u7a7a\u7ed3\u70b9 \u4e0e \u627e\u5230\u5bf9\u5e94\u7ed3\u70b9 \u7684\u884c\u4e3a\uff0c\u4e4b\u540e\u6309 \u5c0f\u4e8e\u5411\u5de6\u3001\u5927\u4e8e\u5411\u53f3 \u7684\u65b9\u5f0f\u5411\u4e0b\u9012\u5f52\u3002","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"ds/scapegoat/#_3","text":"\u63d2\u5165\u65f6\uff0c\u5230\u8fbe\u7a7a\u7ed3\u70b9\u5219\u65b0\u5efa\u8282\u70b9\uff0c\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\u5219 wn[k]++ \u3002\u9012\u5f52\u7ed3\u675f\u540e\uff0c\u9014\u7ecf\u7684\u8282\u70b9\u53ef\u91cd\u6784\u7684\u8981\u91cd\u6784\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void Ins ( int & k , int p ) { // \u5728\u4ee5 k \u4e3a\u6839\u7684\u5b50\u6811\u5185\u6dfb\u52a0\u6743\u503c\u4e3a p \u8282\u70b9 if ( ! k ) { k = ++ cnt ; if ( ! rt ) rt = 1 ; w [ k ] = p ; lc [ k ] = rc [ k ] = 0 ; wn [ k ] = s [ k ] = sd [ k ] = 1 ; } else { if ( w [ k ] == p ) wn [ k ] ++ ; else if ( w [ k ] < p ) Ins ( rc [ k ], p ); else Ins ( lc [ k ], p ); Calc ( k ); if ( CanRbu ( k )) Rbu ( k ); } }","title":"\u63d2\u5165"},{"location":"ds/scapegoat/#_4","text":"\u60f0\u6027\u5220\u9664\uff0c\u5230\u8fbe\u7a7a\u7ed3\u70b9\u5219\u5ffd\u7565\uff0c\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\u5219 wn[k]-- \u3002\u9012\u5f52\u7ed3\u675f\u540e\uff0c\u53ef\u91cd\u6784\u8282\u70b9\u8981\u91cd\u6784\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 void Del ( int & k , int p ) { // \u4ece\u4ee5 k \u4e3a\u6839\u5b50\u6811\u79fb\u9664\u6743\u503c\u4e3a p \u8282\u70b9 if ( ! k ) return ; else { sd [ k ] -- ; if ( w [ k ] == p ) { if ( wn [ k ]) wn [ k ] -- ; } else { if ( w [ k ] < p ) Del ( rc [ k ], p ); else Del ( lc [ k ], p ); Calc ( k ); } } if ( CanRbu ( k )) Rbu ( k ); }","title":"\u5220\u9664"},{"location":"ds/scapegoat/#upper_bound","text":"\u8fd4\u56de\u6743\u503c\u4e25\u683c\u5927\u4e8e\u67d0\u503c\u7684\u6700\u5c0f\u540d\u6b21\u3002 \u5230\u8fbe\u7a7a\u7ed3\u70b9\u5219\u8fd4\u56de 1\uff0c\u56e0\u4e3a\u53ea\u6709\u8be5\u5b50\u6811\u5de6\u8fb9\u7684\u6570\u5747\u5c0f\u4e8e\u67e5\u627e\u6570\u624d\u4f1a\u9012\u5f52\u81f3\u6b64\u3002\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u8be5\u8282\u70b9\u6240\u5360\u636e\u7684\u6700\u540e\u4e00\u4e2a\u540d\u6b21 + 1\u3002 1 2 3 4 5 6 7 8 9 10 11 int MyUprBd ( int k , int p ) { // \u5728\u4ee5 k \u4e3a\u6839\u5b50\u6811\u4e2d\uff0c\u5927\u4e8e p \u7684\u6700\u5c0f\u6570\u7684\u540d\u6b21 if ( ! k ) return 1 ; else if ( w [ k ] == p && wn [ k ]) return sd [ lc [ k ]] + 1 + wn [ k ]; else if ( p < w [ k ]) return MyUprBd ( lc [ k ], p ); else return sd [ lc [ k ]] + wn [ k ] + MyUprBd ( rc [ k ], p ); } \u4ee5\u4e0b\u662f\u53cd\u4e49\u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u91c7\u7528 std::greater<> \u6bd4\u8f83\uff0c\u5373\u8fd4\u56de\u6743\u503c\u4e25\u683c\u5c0f\u4e8e\u67d0\u503c\u7684\u6700\u5927\u540d\u6b21\u3002\u67e5\u8be2\u4e00\u4e2a\u6570\u7684\u6392\u540d\u53ef\u4ee5\u7528 MyUprGrt(rt, x) + 1 \u3002 1 2 3 4 5 6 7 8 9 10 int MyUprGrt ( int k , int p ) { if ( ! k ) return 0 ; else if ( w [ k ] == p && wn [ k ]) return sd [ lc [ k ]]; else if ( w [ k ] < p ) return sd [ lc [ k ]] + wn [ k ] + MyUprGrt ( rc [ k ], p ); else return MyUprGrt ( lc [ k ], p ); }","title":"upper_bound"},{"location":"ds/scapegoat/#at","text":"\u7ed9\u5b9a\u540d\u6b21\uff0c\u8fd4\u56de\u8be5\u540d\u6b21\u4e0a\u7684\u6743\u503c\u3002\u5230\u8fbe\u7a7a\u7ed3\u70b9\u8bf4\u660e\u65e0\u6b64\u540d\u6b21\uff0c\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\u5219\u8fd4\u56de\u5176\u6743\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 int MyAt ( int k , int p ) { // \u4ee5 k \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u540d\u6b21\u4e3a p \u7684\u6743\u503c if ( ! k ) return 0 ; else if ( sd [ lc [ k ]] < p && p <= sd [ lc [ k ]] + wn [ k ]) return w [ k ]; else if ( sd [ lc [ k ]] + wn [ k ] < p ) return MyAt ( rc [ k ], p - sd [ lc [ k ]] - wn [ k ]); else return MyAt ( lc [ k ], p ); }","title":"at"},{"location":"ds/scapegoat/#_5","text":"\u4ee5\u4e0a\u4e24\u79cd\u529f\u80fd\u7ed3\u5408\u5373\u53ef\u3002 1 2 inline int MyPre ( int k , int p ) { return MyAt ( k , MyUprGrt ( k , p )); } inline int MyPost ( int k , int p ) { return MyAt ( k , MyUprBd ( k , p )); }","title":"\u524d\u9a71\u540e\u7ee7"},{"location":"ds/seg-in-balanced/","text":"","title":"\u5e73\u8861\u6811\u5957\u7ebf\u6bb5\u6811"},{"location":"ds/seg-in-seg/","text":"\u5e38\u89c1\u7528\u9014 \u00b6 \u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u9700\u8981\u7ef4\u62a4\u591a\u7ef4\u5ea6\u4fe1\u606f\u3002\u5728\u8fd9\u79cd\u65f6\u5019\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u6811\u5957\u6811\u6765\u8bb0\u5f55\u4fe1\u606f\u3002 \u5b9e\u73b0\u539f\u7406 \u00b6 \u6211\u4eec\u8003\u8651\u7528\u6811\u5957\u6811\u5982\u4f55\u5b9e\u73b0\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\u8fdb\u884c\u5355\u70b9\u4fee\u6539\uff0c\u533a\u57df\u67e5\u8be2\u3002\u6211\u4eec\u8003\u8651\u5916\u5c42\u7684\u7ebf\u6bb5\u6811\uff0c\u6700\u5e95\u5c42\u7684 1 1 \u5230 n n \u4e2a\u8282\u70b9\u7684\u5b50\u6811\uff0c\u5206\u522b\u4ee3\u8868\u7b2c 1 1 \u5230\u7b2c n n \u884c\u7684\u7ebf\u6bb5\u6811\u3002\u90a3\u4e48\u8fd9\u4e9b\u5e95\u5c42\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u7236\u8282\u70b9\uff0c\u5c31\u4ee3\u8868\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u5b50\u6811\u6240\u5728\u7684\u4e00\u7247\u533a\u57df\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u5efa\u7acb\u4e00\u9897\u5b50\u7ebf\u6bb5\u6811\uff0c\u7a7a\u95f4\u9700\u6c42\u8fc7\u5927\u3002\u6811\u5957\u6811\u4e00\u822c\u91c7\u53d6\u52a8\u6001\u5f00\u70b9\u7684\u7b56\u7565\u3002\u5355\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u4f1a\u6d89\u53ca\u5230\u5916\u5c42\u7ebf\u6bb5\u6811\u7684 \\log{n} \\log{n} \u4e2a\u8282\u70b9\uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u6d89\u53ca \\log{n} \\log{n} \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5355\u6b21\u4fee\u6539\u4ea7\u751f\u7684\u7a7a\u95f4\u6700\u591a\u4e3a \\log^2{n} \\log^2{n} \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u6211\u4eec\u5728\u5916\u5c42\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f1a\u5728\u4e00\u4e2a\u5185\u5c42\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\log^2{n} \\log^2{n} \u3002 \u4fee\u6539\u64cd\u4f5c\uff0c\u4e0e\u8be2\u95ee\u64cd\u4f5c\u590d\u6742\u5ea6\u76f8\u540c\uff0c\u4e5f\u4e3a \\log^2{n} \\log^2{n} \u3002 \u7ecf\u5178\u4f8b\u9898 \u00b6 \u964c\u4e0a\u82b1\u5f00 \u5c06\u7b2c\u4e00\u7ef4\u6392\u5e8f\u5904\u7406\uff0c\u7136\u540e\u7528\u6811\u5957\u6811\u7ef4\u62a4\u7b2c\u4e8c\u7ef4\u548c\u7b2c\u4e09\u7ef4\u3002 \u793a\u4f8b\u4ee3\u7801 \u00b6 \u7b2c\u4e8c\u7ef4\u67e5\u8be2 1 2 3 4 5 6 7 8 int tree_query ( int k , int l , int r , int x ) { if ( k == 0 ) return 0 ; if ( 1 <= l && r <= sec [ x ]. y ) return vec_query ( ou_root [ k ], 1 , p , 1 , sec [ x ]. z ); int mid = l + r >> 1 , res = 0 ; if ( 1 <= mid ) res += tree_query ( ou_ch [ k ][ 0 ], l , mid , x ); if ( sec [ x ]. y > mid ) res += tree_query ( ou_ch [ k ][ 1 ], mid + 1 , r , x ); return res ; } \u7b2c\u4e8c\u7ef4\u4fee\u6539 1 2 3 4 5 6 7 8 9 10 void tree_insert ( int & k , int l , int r , int x ) { if ( k == 0 ) k = ++ ou_tot ; vec_insert ( ou_root [ k ], 1 , p , sec [ x ]. z ); if ( l == r ) return ; int mid = l + r >> 1 ; if ( sec [ x ]. y <= mid ) tree_insert ( ou_ch [ k ][ 0 ], l , mid , x ); else tree_insert ( ou_ch [ k ][ 1 ], mid + 1 , r , x ); } \u7b2c\u4e09\u7ef4\u67e5\u8be2 1 2 3 4 5 6 7 8 int vec_query ( int k , int l , int r , int x , int y ) { if ( k == 0 ) return 0 ; if ( x <= l && r <= y ) return data [ k ]; int mid = l + r >> 1 , res = 0 ; if ( x <= mid ) res += vec_query ( ch [ k ][ 0 ], l , mid , x , y ); if ( y > mid ) res += vec_query ( ch [ k ][ 1 ], mid + 1 , r , x , y ); return res ; } \u7b2c\u4e09\u7ef4\u4fee\u6539 1 2 3 4 5 6 7 8 void vec_insert ( int & k , int l , int r , int loc ) { if ( k == 0 ) k = ++ tot ; data [ k ] ++ ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( loc <= mid ) vec_insert ( ch [ k ][ 0 ], l , mid , loc ); if ( loc > mid ) vec_insert ( ch [ k ][ 1 ], mid + 1 , r , loc ); } \u76f8\u5173\u7b97\u6cd5 \u00b6 \u9762\u5bf9\u591a\u7ef4\u5ea6\u4fe1\u606f\u7684\u9898\u76ee\u65f6\uff0c\u5982\u679c\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651 CDQ \u5206\u6cbb \uff0c\u6216\u8005 \u6574\u4f53\u4e8c\u5206 \u7b49\u5206\u6cbb\u7b97\u6cd5\uff0c\u6765\u907f\u514d\u4f7f\u7528\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u51cf\u5c11\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u3002","title":"\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811"},{"location":"ds/seg-in-seg/#_1","text":"\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u9700\u8981\u7ef4\u62a4\u591a\u7ef4\u5ea6\u4fe1\u606f\u3002\u5728\u8fd9\u79cd\u65f6\u5019\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u6811\u5957\u6811\u6765\u8bb0\u5f55\u4fe1\u606f\u3002","title":"\u5e38\u89c1\u7528\u9014"},{"location":"ds/seg-in-seg/#_2","text":"\u6211\u4eec\u8003\u8651\u7528\u6811\u5957\u6811\u5982\u4f55\u5b9e\u73b0\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\u8fdb\u884c\u5355\u70b9\u4fee\u6539\uff0c\u533a\u57df\u67e5\u8be2\u3002\u6211\u4eec\u8003\u8651\u5916\u5c42\u7684\u7ebf\u6bb5\u6811\uff0c\u6700\u5e95\u5c42\u7684 1 1 \u5230 n n \u4e2a\u8282\u70b9\u7684\u5b50\u6811\uff0c\u5206\u522b\u4ee3\u8868\u7b2c 1 1 \u5230\u7b2c n n \u884c\u7684\u7ebf\u6bb5\u6811\u3002\u90a3\u4e48\u8fd9\u4e9b\u5e95\u5c42\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u7236\u8282\u70b9\uff0c\u5c31\u4ee3\u8868\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u5b50\u6811\u6240\u5728\u7684\u4e00\u7247\u533a\u57df\u3002","title":"\u5b9e\u73b0\u539f\u7406"},{"location":"ds/seg-in-seg/#_3","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u5bf9\u4e8e\u5916\u5c42\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u5efa\u7acb\u4e00\u9897\u5b50\u7ebf\u6bb5\u6811\uff0c\u7a7a\u95f4\u9700\u6c42\u8fc7\u5927\u3002\u6811\u5957\u6811\u4e00\u822c\u91c7\u53d6\u52a8\u6001\u5f00\u70b9\u7684\u7b56\u7565\u3002\u5355\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u4f1a\u6d89\u53ca\u5230\u5916\u5c42\u7ebf\u6bb5\u6811\u7684 \\log{n} \\log{n} \u4e2a\u8282\u70b9\uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u6d89\u53ca \\log{n} \\log{n} \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5355\u6b21\u4fee\u6539\u4ea7\u751f\u7684\u7a7a\u95f4\u6700\u591a\u4e3a \\log^2{n} \\log^2{n} \u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"ds/seg-in-seg/#_4","text":"\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u6211\u4eec\u5728\u5916\u5c42\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f1a\u5728\u4e00\u4e2a\u5185\u5c42\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c \\log{n} \\log{n} \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\log^2{n} \\log^2{n} \u3002 \u4fee\u6539\u64cd\u4f5c\uff0c\u4e0e\u8be2\u95ee\u64cd\u4f5c\u590d\u6742\u5ea6\u76f8\u540c\uff0c\u4e5f\u4e3a \\log^2{n} \\log^2{n} \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"ds/seg-in-seg/#_5","text":"\u964c\u4e0a\u82b1\u5f00 \u5c06\u7b2c\u4e00\u7ef4\u6392\u5e8f\u5904\u7406\uff0c\u7136\u540e\u7528\u6811\u5957\u6811\u7ef4\u62a4\u7b2c\u4e8c\u7ef4\u548c\u7b2c\u4e09\u7ef4\u3002","title":"\u7ecf\u5178\u4f8b\u9898"},{"location":"ds/seg-in-seg/#_6","text":"\u7b2c\u4e8c\u7ef4\u67e5\u8be2 1 2 3 4 5 6 7 8 int tree_query ( int k , int l , int r , int x ) { if ( k == 0 ) return 0 ; if ( 1 <= l && r <= sec [ x ]. y ) return vec_query ( ou_root [ k ], 1 , p , 1 , sec [ x ]. z ); int mid = l + r >> 1 , res = 0 ; if ( 1 <= mid ) res += tree_query ( ou_ch [ k ][ 0 ], l , mid , x ); if ( sec [ x ]. y > mid ) res += tree_query ( ou_ch [ k ][ 1 ], mid + 1 , r , x ); return res ; } \u7b2c\u4e8c\u7ef4\u4fee\u6539 1 2 3 4 5 6 7 8 9 10 void tree_insert ( int & k , int l , int r , int x ) { if ( k == 0 ) k = ++ ou_tot ; vec_insert ( ou_root [ k ], 1 , p , sec [ x ]. z ); if ( l == r ) return ; int mid = l + r >> 1 ; if ( sec [ x ]. y <= mid ) tree_insert ( ou_ch [ k ][ 0 ], l , mid , x ); else tree_insert ( ou_ch [ k ][ 1 ], mid + 1 , r , x ); } \u7b2c\u4e09\u7ef4\u67e5\u8be2 1 2 3 4 5 6 7 8 int vec_query ( int k , int l , int r , int x , int y ) { if ( k == 0 ) return 0 ; if ( x <= l && r <= y ) return data [ k ]; int mid = l + r >> 1 , res = 0 ; if ( x <= mid ) res += vec_query ( ch [ k ][ 0 ], l , mid , x , y ); if ( y > mid ) res += vec_query ( ch [ k ][ 1 ], mid + 1 , r , x , y ); return res ; } \u7b2c\u4e09\u7ef4\u4fee\u6539 1 2 3 4 5 6 7 8 void vec_insert ( int & k , int l , int r , int loc ) { if ( k == 0 ) k = ++ tot ; data [ k ] ++ ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( loc <= mid ) vec_insert ( ch [ k ][ 0 ], l , mid , loc ); if ( loc > mid ) vec_insert ( ch [ k ][ 1 ], mid + 1 , r , loc ); }","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"ds/seg-in-seg/#_7","text":"\u9762\u5bf9\u591a\u7ef4\u5ea6\u4fe1\u606f\u7684\u9898\u76ee\u65f6\uff0c\u5982\u679c\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651 CDQ \u5206\u6cbb \uff0c\u6216\u8005 \u6574\u4f53\u4e8c\u5206 \u7b49\u5206\u6cbb\u7b97\u6cd5\uff0c\u6765\u907f\u514d\u4f7f\u7528\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u51cf\u5c11\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u3002","title":"\u76f8\u5173\u7b97\u6cd5"},{"location":"ds/segment/","text":"\u5199\u5728\u524d\u9762 \u00b6 \u7ebf\u6bb5\u6811\u662f\u4e2a\u597d\u4e1c\u897f\u554a QwQ OI \u4e2d\u6700\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u4e4b\u4e00\uff0c\u4e0d\u5b66\u4e0d\u884c\u554a OvO \u7ebf\u6bb5\u6811\u662f\u4ec0\u4e48 \u00b6 \u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log N) O(\\log N) \u3002\u800c\u672a\u4f18\u5316\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a 2N 2N \uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\u2014\u2014From \u5ea6\u5a18 \u53cd\u6b63\u5c31\u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5185\u5bf9\u67d0\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002 \u7ebf\u6bb5\u6811\u6709\u4ec0\u4e48\u7528 \u00b6 \u5728 O(\\log N) O(\\log N) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b9e\u73b0\u5982\uff1a\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\uff08\u5982\uff1a\u533a\u95f4\u6c42\u548c\uff0c\u6c42\u533a\u95f4\u6700\u5927\u503c\uff0c\u6c42\u533a\u95f4\u6700\u5c0f\u503c\u2026\u2026\uff09\u8fd8\u6709\u5f88\u591a\u2026\u2026 \u603b\u4e4b\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u9700\u8981\u6ee1\u8db3\u53ef\u52a0\u6027\uff0c\u4e14\u8981\u4ee5\u53ef\u4ee5\u63a5\u53d7\u7684\u901f\u5ea6\u5408\u5e76\u4fe1\u606f\u548c\u4fee\u6539\u4fe1\u606f\uff0c\u5982\u679c\u4f7f\u7528\u6807\u8bb0\uff0c\u6807\u8bb0\u4e5f\u8981\u6ee1\u8db3\u53ef\u52a0\u6027\uff08\u4f8b\u5982\u53d6\u6a21\u5c31\u4e0d\u6ee1\u8db3\u53ef\u52a0\u6027\uff0c\u5bf9 4 4 \u53d6\u6a21\u7136\u540e\u5bf9 3 3 \u53d6\u6a21\uff0c\u4e24\u4e2a\u64cd\u4f5c\u5c31\u4e0d\u80fd\u5408\u5e76\u5728\u4e00\u8d77\u505a\uff08\u4e8b\u5b9e\u4e0a\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u66b4\u529b\u5355\u70b9\u53d6\u6a21\uff09\uff09 \u7ebf\u6bb5\u6811\u600e\u4e48\u5b9e\u73b0 \u00b6 \u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u7ed3\u6784\u4e0e\u5efa\u6811 \u00b6 \u60f3\u8981\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e0d\u7406\u89e3\u5b83\u7684\u7ed3\u6784\u3001\u539f\u7406\u662f\u80af\u5b9a\u884c\u4e0d\u901a\u7684\u3002 \u4e0b\u9762\u6211\u6765\u4e3e\u4e2a\u6817\u5b50\uff1a \u6211\u4eec\u6709\u4e2a\u5927\u5c0f\u4e3a 5 5 \u7684\u6570\u7ec4 a=\\{10,11,12,13,14\\} a=\\{10,11,12,13,14\\} \u8981\u8fdb\u884c\u533a\u95f4\u6c42\u548c\u64cd\u4f5c\uff0c\u73b0\u5728\u6211\u4eec\u8981\u600e\u4e48\u628a\u8fd9\u4e2a\u6570\u7ec4\u5b58\u5230\u7ebf\u6bb5\u6811\u4e2d\uff08\u4e5f\u53ef\u4ee5\u8bf4\u662f\u8f6c\u5316\u6210\u7ebf\u6bb5\u6811\uff09\u5462\uff1f\u6211\u4eec\u8fd9\u6837\u5b50\u505a\uff1a\u8bbe\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 1 \uff0c\u7528\u6570\u7ec4 d d \u6765\u4fdd\u5b58\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\uff0c d[i] d[i] \u7528\u6765\u4fdd\u5b58\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u7684\u503c\uff08\u8fd9\u91cc\u8282\u70b9\u7684\u503c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u603b\u548c\uff09\uff0c\u5982\u56fe\u6240\u793a\uff1a \u56fe\u4e2d d[1] d[1] \u8868\u793a\u6839\u8282\u70b9\uff0c\u7d2b\u8272\u65b9\u6846\u662f\u6570\u7ec4 a a \uff0c\u7ea2\u8272\u65b9\u6846\u662f\u6570\u7ec4 d d \uff0c\u7ea2\u8272\u65b9\u6846\u4e2d\u7684\u62ec\u53f7\u4e2d\u7684\u9ec4\u8272\u6570\u5b57\u8868\u793a\u5b83\u6240\u5728\u7684\u90a3\u4e2a\u7ea2\u8272\u65b9\u6846\u8868\u793a\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\uff0c\u5982 d[1] d[1] \u6240\u8868\u793a\u7684\u533a\u95f4\u5c31\u662f 1\\sim 5\\ (a[1]\\sim a[5]) 1\\sim 5\\ (a[1]\\sim a[5]) \uff0c\u5373 d[1] d[1] \u6240\u4fdd\u5b58\u7684\u503c\u662f a[1]+a[2]+ \\cdots +a[5] a[1]+a[2]+ \\cdots +a[5] \uff0c d[1]=60 d[1]=60 \u8868\u793a\u7684\u662f a[1]+a[2]+ \\cdots +a[5]=60 a[1]+a[2]+ \\cdots +a[5]=60 \u3002 \u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c d[i] d[i] \u7684\u5de6\u513f\u5b50\u8282\u70b9\u5c31\u662f d[2\\times i] d[2\\times i] \uff0c d[i] d[i] \u7684\u53f3\u8282\u70b9\u5c31\u662f d[2\\times i+1] d[2\\times i+1] \u3002\u8fdb\u4e00\u6b65\u89c2\u5bdf\uff0c\u53ef\u4ee5\u770b\u51fa\u5982\u679c d[i] d[i] \u8868\u793a\u7684\u662f\u533a\u95f4 [s,t] [s,t] \uff08\u5373 d[i]=a[s]+a[s+1]+ \\cdots +a[t] d[i]=a[s]+a[s+1]+ \\cdots +a[t] ) \u7684\u8bdd\uff0c\u90a3\u4e48 d[i] d[i] \u7684\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u662f\u533a\u95f4 [s, \\frac{s+t}{2} ] [s, \\frac{s+t}{2} ] \uff0c d[i] d[i] \u7684\u53f3\u513f\u5b50\u8868\u793a\u7684\u662f\u533a\u95f4 [ \\frac{s+t}{2} +1,t] [ \\frac{s+t}{2} +1,t] \u3002 \u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u8868\u793a\u5462\uff1f\u56e0\u4e3a\u7ebf\u6bb5\u6811\u5229\u7528\u4e86\u4e8c\u5206\u7684\u601d\u60f3\uff0c\u7ebf\u6bb5\u6811\u5b9e\u9645\u4e0a\u662f\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd9\u4e9b\u4e0d\u61c2\u7684\u8bdd\u5c31\u65e0\u6cd5\u7406\u89e3\u7ebf\u6bb5\u6811\u4e86\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u660e\u767d\u4e8c\u5206\u6216\u8005\u4e8c\u53c9\u6811\u7684\u8bdd\u2026\u2026 \u5efa\u8bae\u53bb\u95ee\u95ee\u5ea6\u5a18\u3002 \u5177\u4f53\u8981\u600e\u4e48\u7528\u4ee3\u7801\u5b9e\u73b0\u5462\uff1f \u6211\u4eec\u7ee7\u7eed\u89c2\u5bdf\uff0c\u6709\u6ca1\u6709\u53d1\u73b0\u5982\u679c d[i] d[i] \u8868\u793a\u7684\u533a\u95f4\u5927\u5c0f\u7b49\u4e8e 1 1 \uff08\u533a\u95f4\u5927\u5c0f\u6307\u7684\u662f\u533a\u95f4\u5305\u542b\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u5373 a a \u7684\u4e2a\u6570\uff09\u7684\u8bdd\uff08\u8bbe d[i] d[i] \u8868\u793a\u533a\u95f4 [s,t] [s,t] \uff0c\u5b83\u7684\u533a\u95f4\u5927\u5c0f\u5c31\u662f t-s+1 t-s+1 \uff0c\u4e0d\u4fe1\u4f60\u770b\u4e0a\u9762\u7684\u56fe\uff09\uff0c\u90a3\u4e48 d[i] d[i] \u6240\u8868\u793a\u7684\u533a\u95f4 [s,t] [s,t] \u4e2d s s \u80af\u5b9a\u7b49\u4e8e t t \uff08\u4e0d\u4fe1\u4f60\u8fd8\u662f\u770b\u56fe\uff09\uff0c\u4e14 d[i]=a[s] d[i]=a[s] \uff08\u5f53\u7136\u4e5f\u7b49\u4e8e a[t] a[t] \uff09\u3002 \u4e3a\u4ec0\u4e48\u8981\u8bb2\u8fd9\u4e2a\u4e1c\u897f\u5462\uff1f\u4f60\u6ca1\u53d1\u73b0\u8fd9\u4e2a\u662f\u4e2a\u9012\u5f52\u8fb9\u754c\u5417\uff1f O(\u2229_\u2229)O \u54c8\u54c8~ \u601d\u8def\u5982\u4e0b\uff1a \u90a3\u4e48\u5c31\u8fd9\u6837\u5199\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 \u5efa\u6811 ( s , t , i ) { \u5982\u679c ( s == t ) { d [ i ] = a [ s ]; } \u5426\u5219 { \u5efa\u6811 ( s , ( s + t ) / 2 , 2 * i ); \u5efa\u6811 (( s + t ) / 2 + 1 , t , 2 * i + 1 ); d [ i ] = d [ 2 * i ] + d [ 2 * i + 1 ]; } } \u5177\u4f53\u4ee3\u7801\u5b9e\u73b0 (C++)\uff1a 1 2 3 4 5 6 7 8 9 void build ( int s , int t , int p ) { if ( s == t ) { d [ p ] = a [ s ]; return ; } int m = ( s + t ) / 2 ; build ( s , m , p * 2 ), build ( m + 1 , t , p * 2 + 1 ); d [ p ] = d [ p * 2 ] + d [( p * 2 ) + 1 ]; } \u4e0a\u9762\u90a3\u77ed\u77ed 7 7 \u884c\u4ee3\u7801\u5c31\u80fd\u5efa\u7acb\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002 \u5173\u4e8e\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u91c7\u7528\u5806\u5f0f\u5b58\u50a8\uff08\u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u662f\u5806\u5f0f\u5b58\u50a8\uff0c\u5373 2\\times p 2\\times p \u662f p \u7684\u5de6\u513f\u5b50, 2 \\times p+1 2 \\times p+1 \u662f p \u7684\u53f3\u513f\u5b50\uff09\uff0cd \u6570\u7ec4\u7684\u5927\u5c0f\u9700\u8981\u662f n n \uff08\u5143\u7d20\u4e2a\u6570\uff09\u4e0a\u53d6\u5230\u4e00\u4e2a 2 2 \u7684\u6574\u6570\u6b21\u5e42\uff08\u53f6\u5b50\u6570\u91cf\uff09\u518d\u4e58\u4ee5 2 2 \uff08\u53f6\u5b50\u4e0a\u9762\u7684\u8282\u70b9\u6570\u91cf\uff09\uff0c\u4e0a\u754c\u662f 4 4 \u500d\uff0c\u53ef\u5229\u7528\u4e0a\u9762\u7684 build \u81ea\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u91c7\u7528\u52a8\u6001\u5f00\u70b9\uff0c\u5219\u9700\u8981\u4e24\u500d\u7684\u7a7a\u95f4\uff08\u9700\u8981\u989d\u5916\u5730\u8bb0\u5f55\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7684\u7f16\u53f7 / \u5730\u5740\uff09\u3002 \u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u67e5\u8be2 \u00b6 \u533a\u95f4\u67e5\u8be2\uff0c\u6bd4\u5982\u6c42\u533a\u95f4 [l,r] [l,r] \u7684\u603b\u548c\uff08\u5373 a[l]+a[l+1]+ \\cdots +a[r] a[l]+a[l+1]+ \\cdots +a[r] \uff09\u3001\u6c42\u533a\u95f4\u6700\u5927\u503c / \u6700\u5c0f\u503c\u2026\u2026 \u8fd8\u6709\u5f88\u591a\u5f88\u591a\u2026\u2026 \u600e\u4e48\u505a\u5462\uff1f \u62ff\u4e0a\u9762\u8fd9\u5f20\u56fe\u4e3e\u6817\uff01 \uff08\u53d1\u535a\u5ba2\u7d2f\u6b7b\u4e86\u65e0\u804a\u4e00\u4e0b\uff09 \u5982\u679c\u8981\u67e5\u8be2\u533a\u95f4 [1,5] [1,5] \u7684\u548c\uff0c\u90a3\u76f4\u63a5\u83b7\u53d6 d[1] d[1] \u7684\u503c\uff08 60 60 \uff09\u5373\u53ef\u3002\u90a3\u5982\u679c\u6211\u5c31\u4e0d\u67e5\u8be2\u533a\u95f4 [1,5] [1,5] \uff0c\u6211\u5c31\u67e5\u533a\u95f4 [3,5] [3,5] \u5462\uff1f \u03a3(\u2299\u25bd\u2299\"a \u61f5 B \u4e86\u5427\u3002\u4f46\u5176\u5b9e\u5462\u6211\u4eec\u80af\u5b9a\u8fd8\u662f\u6709\u529e\u6cd5\u7684\uff01 <(\uffe3\u02c7\uffe3)/ \u4f60\u8981\u67e5\u7684\u4e0d\u662f [3,5] [3,5] \u5417\uff1f\u6211\u628a [3,5] [3,5] \u62c6\u6210 [3,3] [3,3] \u548c [4,5] [4,5] \u4e0d\u5c31\u884c\u4e86\u5417\uff1f \u5177\u4f53\u601d\u8def\u89c1\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u6c42\u548c\uff08\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u7aef\u70b9 l , \u67e5\u8be2\u533a\u95f4\u7684\u53f3\u7aef\u70b9 r , \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5de6\u7aef\u70b9 s , \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4 t , \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7 p \uff09 { \u5982\u679c\uff08 l <= s && t <= r \uff09 // \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185 { \u8fd4\u56de d [ p ] \uff1b } \u5426\u5219 { \u4ee4 \u8fd4\u56de\u503c = 0 \u5982\u679c\uff08 l <= ( s + t ) / 2 \uff09 // \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7684\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5305\u542b\u5728\u67e5 // \u8be2\u533a\u95f4\u5185,(s+t)/2 // \u5176\u5b9e\u662f\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5206\u5272\u7ebf\u4e14(s+t)/2 // \u5305\u542b\u5728\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u4e2d { \u8fd4\u56de\u503c += \u6c42\u548c\uff08 l , r , s , ( s + t ) / 2 , p * 2 \uff09 ; // l \u548c r // \u662f\u53ef\u4ee5\u4e0d\u7528\u53d8\u7684\uff01\u4e0d\u7ba1\u4f60\u4fe1\u4e0d\u4fe1\u6211\u53cd\u6b63\u662f\u4fe1\u4e86\u3002\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u8282\u70b9\u7f16\u53f7\u662f // p2\uff0c\u4e4b\u524d\u8bb2\u8fc7\u4e86\uff0c\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5de6\u7aef\u70b9\u5c31\u662f\u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c(s+t)/2 // \u662f\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u53f3\u77ed\u70b9 } \u5982\u679c ( r > ( s + t ) / 2 ) // \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7684\u53f3\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5305\u542b\u5728\u67e5 \u8be2\u533a\u95f4\u5185 { \u8fd4\u56de\u503c += \u6c42\u548c\uff08 l , r , ( s + t ) / 2 + 1 , t , p * 2 + 1 \uff09\uff1b //(s+t)/2+1 \u662f\u5f53\u524d\u8bbf\u95ee\u8282\u70b9\u7684\u53f3\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9 } \u8fd4\u56de \u8fd4\u56de\u503c\uff1b } } \u600e\u4e48\u6837\uff0c\u4ee3\u7801\u5f88\u4e11\u5427\uff1f\u5e9f\u8bdd\uff0c\u7528\u4e2d\u6587\u5199\u7684\u80fd\u4e0d\u4e11\u5417\uff1f\u73b0\u5728\u641e\u4e2a\u82f1 (da) \u6587 (xin) \u7684 (wen)\uff1a 1 2 3 4 5 6 7 int getsum ( int l , int r , int s , int t , int p ) { if ( l <= s && t <= r ) return d [ p ]; int m = ( s + t ) / 2 , sum = 0 ; if ( l <= m ) sum += getsum ( l , r , s , m , p * 2 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , p * 2 + 1 ); return sum ; } \u8fd8\u662f\u633a\u77ed\u7684\u5427\uff1f\u8fd9\u91cc\u7528\u5230\u7684\u4e3b\u8981\u601d\u8def\u5c31\u662f\u628a\u4e00\u4e2a\u533a\u95f4\u62c6\u6210\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\uff0c\u518d\u5206\u522b\u5904\u7406\u5de6\u53f3\u533a\u95f4\u3002\u4e5f\u662f\u4e8c\u5206\u7684\u601d\u60f3\u3002 \u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u4e0e\u61d2\u60f0\u6807\u8bb0 \u00b6 \u533a\u95f4\u4fee\u6539\u662f\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f o(\u256f\u25a1\u2570)o\u2026\u2026 \u4f60\u60f3\u554a\uff0c\u5982\u679c\u4f60\u8981\u4fee\u6539\u533a\u95f4 [l,r] [l,r] \uff0c\u96be\u9053\u628a\u6240\u6709\u5305\u542b\u5728\u533a\u95f4 [l,r] \u4e2d\u7684\u8282\u70b9\u90fd\u904d\u5386\u4e00\u6b21\u3001\u4fee\u6539\u4e00\u6b21\uff1f\u90a3\u4f30\u8ba1\u8fd9\u65f6\u95f4\u590d\u6742\u5ea6\u4f30\u8ba1\u4f1a\u4e0a\u5929 |(*\u2032\u53e3 `)\u3002\u8fd9\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u8fd9\u91cc\u8981\u5f15\u7528\u4e00\u4e2a\u53eb\u505a \u300c\u61d2\u60f0\u6807\u8bb0\u300d \u7684\u4e1c\u897f\u3002 \u6211\u4eec\u8bbe\u4e00\u4e2a\u6570\u7ec4 b b \uff0c b[i] b[i] \u8868\u793a\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\u503c\u3002\u5565\u662f\u61d2\u60f0\u6807\u8bb0\u3001\u61d2\u60f0\u6807\u8bb0\u503c\u5462\uff1f(O_O)? \u8fd9\u91cc\u6211\u518d\u4e3e\u4e2a\u6817\u5b50\uff08\u539f\u521b\u5c0f\u6545\u4e8b\u6211\u771f\u6709\u624d\u54c8\u54c8\u54c8 (\u25e1\u1d17\u25e1\u273f)\uff09\uff1a A \u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e00\u4e2a\u662f B\uff0c\u4e00\u4e2a\u662f C\u3002 \u6709\u4e00\u5929 A \u8981\u5efa\u4e00\u4e2a\u65b0\u623f\u5b50\uff0c\u6ca1\u94b1\u3002\u521a\u597d\u8fc7\u5e74\u561b\uff0c\u6709\u4eba\u8981\u7ed9 B \u548c C \u7ea2\u5305\uff0c\u4e24\u4e2a\u7ea2\u5305\u7684\u94b1\u6570\u76f8\u540c\u90fd\u662f (1000000000000001\\bmod 2) (1000000000000001\\bmod 2) \u5706\uff08\u597d\u591a\u554a\uff01\u2026\u2026 \u4e0d\u5c31\u662f 1 1 \u5143\u5417\u2026\u2026\uff09\uff0c\u7136\u800c\u56e0\u4e3a A \u662f\u7236\u4eb2\u6240\u4ee5\u7ea2\u5305\u80af\u5b9a\u662f\u5148\u585e\u7ed9 A \u54af~ \u7406\u8bba\u4e0a\u6765\u8bb2 A \u5e94\u8be5\u628a\u4e24\u4e2a\u7ea2\u5305\u5206\u522b\u7ed9 B \u548c C\uff0c\u4f46\u662f\u2026\u2026 \u7f3a\u94b1\u561b\uff0cA \u5c31\u628a\u7ea2\u5305\u5077\u5077\u6536\u5230\u81ea\u5df1\u53e3\u888b\u91cc\u4e86\u3002 A \u9ad8\u5174\u2642\u5730\u8bf4\uff1a\u300c\u6211\u73b0\u5728\u6709 2 2 \u4efd\u7ea2\u5305\u4e86\uff01\u6211\u53c8\u591a\u4e86 2\\times (1000000000000001\\bmod 2)=2 2\\times (1000000000000001\\bmod 2)=2 \u5706\u4e86\uff01\u54c8\u54c8\u54c8~\u300d \u4f46\u662f A \u77e5\u9053\uff0c\u5982\u679c\u4ed6\u4e0d\u628a\u7ea2\u5305\u7ed9 B \u548c C\uff0c\u90a3 B \u548c C \u80af\u5b9a\u4f1a\u4e0d\u723d\u7136\u540e\u5bfc\u81f4\u5bb6\u5ead\u77db\u76fe\u6700\u540e\u5d29\u6e83\uff0c\u6240\u4ee5 A \u5bf9\u513f\u5b50 B \u548c C \u8bf4\uff1a\u300c\u6211\u6b20\u4f60\u4eec\u6bcf\u4eba 1 1 \u4efd (1000000000000001\\bmod 2) (1000000000000001\\bmod 2) \u5706\u7684\u7ea2\u5305\uff0c\u4e0b\u6b21\u6709\u65b0\u7ea2\u5305\u7ed9\u8fc7\u6765\u7684\u65f6\u5019\u518d\u7ed9\u4f60\u4eec\uff01\u8fd9\u91cc\u6211\u5148\u505a\u4e0b\u8bb0\u5f55\u2026\u2026 \u55ef\u2026\u2026 \u6211\u94b1\u4f60\u4eec\u5404 (1000000000000001\\bmod 2) (1000000000000001\\bmod 2) \u5706\u2026\u2026\u300d \u513f\u5b50 B\u3001C \u6709\u70b9\u607c\u6012\uff1a\u300c\u53ef\u662f\u5982\u679c\u6709\u540c\u5b66\u95ee\u8d77\u6211\u4eec\u6211\u4eec\u6536\u5230\u4e86\u591a\u5c11\u7ea2\u5305\u548b\u529e\uff1f\u4f60\u628a\u6211\u4eec\u7684\u7ea2\u5305\u90fd\u6536\u4e86\uff0c\u6211\u4eec\u8fd8\u600e\u4e48\u88c5 \u00d7\uff1f\u300d \u7236\u4eb2 A \u8d76\u5fd9\u8bf4\uff1a\u300c\u6709\u540c\u5b66\u95ee\u8d77\u6765\u6211\u5c31\u4f1a\u7ed9\u4f60\u4eec\u7684\uff01\u6211\u6b20\u6761\u90fd\u5199\u597d\u4e86\u4e0d\u4f1a\u4e0d\u7b97\u8bdd\u7684\uff01\u300d \u8fd9\u6837 B\u3001C \u624d\u653e\u4e86\u5fc3\u3002 \u6ce8\uff1a \\bmod \\bmod \u662f\u53d6\u4f59\u6570\u7684\u610f\u601d\uff0c a\\bmod b a\\bmod b \u5c31\u662f a a \u9664\u4ee5 b b \u7684\u4f59\u6570\uff0c\u6240\u4ee5\u2026\u2026 1000000000000001\\bmod 2=1 1000000000000001\\bmod 2=1 \u3002 \u5728\u8fd9\u4e2a\u6545\u4e8b\u4e2d\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0cA \u5c31\u662f\u7236\u4eb2\u8282\u70b9\uff0cB \u548c C \u662f A \u7684\u513f\u5b50\u8282\u70b9\uff0c\u800c\u4e14 B \u548c C \u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u503c\uff08\u5c31\u662f\u4e4b\u524d\u8bb2\u7684\u6570\u7ec4 a a \uff09\uff0c\u6211\u4eec\u5047\u8bbe\u8282\u70b9 A \u8868\u793a\u533a\u95f4 [1,2] [1,2] \uff08\u5373 a[1]+a[2] a[1]+a[2] \uff09\uff0c\u8282\u70b9 B \u8868\u793a\u533a\u95f4 [1,1] [1,1] \uff08\u5373 a[1] a[1] \uff09\uff0c\u8282\u70b9 C \u8868\u793a\u533a\u95f4 [2,2] [2,2] \uff08\u5373 a[2] a[2] \uff09\uff0c\u5b83\u4eec\u7684\u521d\u59cb\u503c\u90fd\u4e3a 0 0 \uff08\u73b0\u5728\u624d\u521a\u5f00\u59cb\u5462\uff0c\u8fd8\u6ca1\u62ff\u5230\u7ea2\u5305\uff0c\u6240\u4ee5\u90fd\u6ca1\u94b1~\uff09\u3002 \u5982\u56fe\uff1a \u6ce8\uff1a\u8fd9\u91cc D \u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u503c\uff08\u5373\u6240\u8868\u793a\u533a\u95f4\u7684\u533a\u95f4\u548c\uff09\u3002 \u4e3a\u4ec0\u4e48\u8282\u70b9 A \u7684 D \u662f 2\\times (1000000000000001\\bmod 2) 2\\times (1000000000000001\\bmod 2) \u5462\uff1f\u539f\u56e0\u5f88\u7b80\u5355\u3002\u8282\u70b9 A \u8868\u793a\u7684\u533a\u95f4\u662f [1,2] [1,2] \uff0c\u4e00\u5171\u5305\u542b 2 2 \u4e2a\u5143\u7d20\u3002\u6211\u4eec\u662f\u8ba9 [1,2] [1,2] \u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u52a0\u4e0a 1000000000000001\\bmod 2 1000000000000001\\bmod 2 \uff0c\u6240\u4ee5\u8282\u70b9 A \u7684\u503c\u5c31\u52a0\u4e0a\u4e86 2\\times (1000000000000001\\bmod 2) 2\\times (1000000000000001\\bmod 2) \u54af =\uffe3\u03c9\uffe3= \u3002 \u5982\u679c\u8fd9\u65f6\u5019\u6211\u4eec\u8981\u67e5\u8be2\u533a\u95f4 [1,1] [1,1] \uff08\u5373\u8282\u70b9 B \u7684\u503c\uff09\u600e\u4e48\u529e\u5462\uff1f\u4e0d\u662f\u8bf4\u4e86\u5417\uff1f\u5982\u679c B \u8981\u7528\u5230\u7684\u65f6\u5019\uff0cA \u5c31\u628a\u5b83\u6b20\u7684\u8fd8\u7ed9 B\uff01 \u5177\u4f53\u662f\u8fd9\u6837\u64cd\u4f5c\uff08\u5982\u56fe\uff09\uff1a \u6ce8\uff1a\u4e3a\u4ec0\u4e48\u662f\u52a0\u4e0a 1\\times (1000000000000001\\bmod 2) 1\\times (1000000000000001\\bmod 2) \u5462\uff1f \u539f\u56e0\u548c\u4e0a\u9762\u4e00\u6837\u2014\u2014B \u548c C \u8868\u793a\u7684\u533a\u95f4\u4e2d\u53ea\u6709 1 1 \u4e2a\u5143\u7d20\u554a\uff01 \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff0c\u533a\u95f4 [1,1] [1,1] \u7684\u533a\u95f4\u548c\u5c31\u662f 1 1 \u5566\uff01O(\u2229_\u2229)O \u54c8\u54c8~\uff01 \u4ee3\u7801\u5982\u4e0b\uff08\u4e0b\u9762\u4ee3\u7801\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u663e\u793a\u51fa\u6765\u5f88\u4e11\uff0c\u5efa\u8bae\u590d\u5236\u5230\u81ea\u5df1\u7684 C++ \u7f16\u8f91\u5668\u91cc\u770b\u2026\u2026\uff09\uff1a \u533a\u95f4\u4fee\u6539\uff08\u533a\u95f4\u52a0\u4e0a\u67d0\u4e2a\u503c\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void update ( int l , int r , int c , int s , int t , int p ) // l \u662f\u67e5\u8be2\u7684\u533a\u95f4\u5de6\u7aef\u70b9\uff0cr \u662f\u53f3\u7aef\u70b9\uff0cc \u8868\u793a\u533a\u95f4\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a\u7684\u503c\uff0cs // \u662f\u5f53\u524d\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0ct \u662f\u53f3\u7aef\u70b9\uff0cp // \u662f\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7(\u6839\u8282\u70b9\u6807\u53f7\u4e3a 1) { if ( l <= s && t <= r ) { d [ p ] += ( t - s + 1 ) * c , b [ p ] += c ; return ; } // \u5982\u679c\u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u505a\u4e0a\u6807\u8bb0\uff0c\u7ed3\u675f\u4fee\u6539 int m = ( s + t ) / 2 ; // \u8ba1\u7b97\u5de6\u53f3\u8282\u70b9\u8868\u793a\u533a\u95f4\u7684\u5206\u5272\u7ebf if ( b [ p ] && s != t ) // \u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff08\u53f6\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u662f\u76f8\u7b49\u7684\uff09\u4e14\u5f53\u524d\u7684\u61d2\u60f0\u6807\u8bb0\u503c!=0\uff0c\u5c31\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\u7684\u503c\u548c\u61d2\u60f0\u6807\u8bb0\u503c d [ p * 2 ] += b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] += b [ p ] * ( t - m ), b [ p * 2 ] += b [ p ], b [ p * 2 + 1 ] += b [ p ]; b [ p ] = 0 ; // \u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\u503c if ( l <= m ) update ( l , r , c , s , m , p * 2 ); if ( r > m ) update ( l , r , c , m + 1 , t , p * 2 + 1 ); d [ p ] = d [ p * 2 ] + d [ p * 2 + 1 ]; } \u533a\u95f4\u67e5\u8be2\uff08\u6c42\u548c\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int getsum ( int l , int r , int s , int t , int p ) // l \u662f\u67e5\u8be2\u7684\u533a\u95f4\u5de6\u7aef\u70b9\uff0cr \u662f\u53f3\u7aef\u70b9\uff0cs // \u662f\u5f53\u524d\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0ct \u662f\u53f3\u7aef\u70b9\uff0cp // \u662f\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\uff08\u6839\u8282\u70b9\u6807\u53f7\u4e3a 1\uff09 { if ( l <= s && t <= r ) return d [ p ]; // \u5982\u679c\u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u503c int m = ( s + t ) / 2 ; // \u8ba1\u7b97\u5de6\u53f3\u8282\u70b9\u8868\u793a\u533a\u95f4\u7684\u5206\u5272\u7ebf if ( b [ p ] && s != t ) // \u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff08\u53f6\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u662f\u76f8\u7b49\u7684\uff09\u4e14\u5f53\u524d\u7684\u61d2\u60f0\u6807\u8bb0\u503c!=0\uff0c\u5c31\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\u7684\u503c\u548c\u61d2\u60f0\u6807\u8bb0 d [ p * 2 ] += b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] += b [ p ] * ( t - m ), b [ p * 2 ] += b [ p ], b [ p * 2 + 1 ] += b [ p ]; b [ p ] = 0 ; int sum = 0 ; // \u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\u503c if ( l <= m ) sum = getsum ( l , r , s , m , p * 2 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , p * 2 + 1 ); return sum ; } \u4f60\u6709\u6ca1\u6709\u53d1\u73b0\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\u5f88\u50cf\u5417\uff1f(... __ ...) \u563b\u563b\u2026\u2026 \u5176\u5b9e\u5e73\u65f6\u6211\u6253\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2\u6211\u90fd\u662f\u6253\u4e00\u4efd\uff0c\u53e6\u4e00\u4efd\u590d\u5236\u9ecf\u8d34\u4ee5\u540e\u518d\u7a0d\u4f5c\u4fee\u6539\u5c31\u884c\u4e86\u3002 \u5982\u679c\u4f60\u662f\u8981\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u4e3a\u67d0\u4e00\u4e2a\u503c\u800c\u4e0d\u662f\u52a0\u4e0a\u67d0\u4e00\u4e2a\u503c\u7684\u8bdd\uff0c\u5f88\u7b80\u5355\uff0c\u628a\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6240\u6709\u7684 += \u66ff\u6362\u6210 = \u5373\u53ef\uff08\u9664\u4e86 sum+=getsum(l,r,m+1,t,p*2+1) \u8fd9\u4e00\u53e5\uff09\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 void update ( int l , int r , int c , int s , int t , int p ) { if ( l <= s && t <= r ) { d [ p ] = ( t - s + 1 ) * c , b [ p ] = c ; return ; } int m = ( s + t ) / 2 ; if ( b [ p ] && s != t ) d [ p * 2 ] = b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] = b [ p ] * ( t - m ), b [ p * 2 ] = b [ p * 2 + 1 ] = b [ p ]; b [ p ] = 0 ; if ( l <= m ) update ( l , r , c , s , m , p * 2 ); if ( r > m ) update ( l , r , c , m + 1 , t , p * 2 + 1 ); d [ p ] = d [ p * 2 ] + d [ p * 2 + 1 ]; } int getsum ( int l , int r , int s , int t , int p ) { if ( l <= s && t <= r ) return d [ p ]; int m = ( s + t ) / 2 ; if ( b [ p ] && s != t ) d [ p * 2 ] = b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] = b [ p ] * ( t - m ), b [ p * 2 ] = b [ p * 2 + 1 ] = b [ p ]; b [ p ] = 0 ; int sum = 0 ; if ( l <= m ) sum = getsum ( l , r , s , m , p * 2 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , p * 2 + 1 ); return sum ; } \u4e00\u4e9b\u4f18\u5316 \u00b6 \u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4e86\u7b80\u5355\u6613\u61c2\uff0c\u6240\u4ee5\u5462\u6211\u5199\u7684\u6bd4\u8f83\u4e0d\u4f18\u7f8e\u3002 \u8fd9\u91cc\u6211\u603b\u7ed3\u51e0\u4e2a\u7ebf\u6bb5\u6811\u7684\u4f18\u5316\uff1a a\\times 2 a\\times 2 \u53ef\u4ee5\u7528 a<<1 a<<1 \u4ee3\u66ff\uff0c a\\div 2 a\\div 2 \u53ef\u4ee5\u7528 a>>1 a>>1 \u4ee3\u66ff\uff08 <<1 <<1 \u548c \\times 2 \\times 2 \u7684\u901f\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u5373\u4f7f\u4e0d\u5f00 O2\uff0c\u4f46 >>1 >>1 \u901f\u5ea6\u6bd4 \\div 2 \\div 2 \u5feb\uff09\u3002 \u5efa\u6811\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u533a\u95f4\uff0c\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u7aef\u70b9\u4e86\uff0c\u51cf\u5c0f\u4ee3\u7801\u590d\u6742\u5ea6\u3002 \u56e0\u4e3a\u4e0b\u6807\u4e3a a a \u7684\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e0b\u6807\u4e3a a\\times 2 a\\times 2 \uff0c\u53f3\u513f\u5b50\u4e0b\u6807\u4e3a a\\times 2+1 a\\times 2+1 \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a 1 2 3 4 #define LS(a) (a << 1) // a<<1 \u7b49\u540c\u4e8e a*2 #define RS(a) (a << 1 | 1) // a<<1|1 \u7b49\u540c\u4e8e a*2+1 \u56e0\u4e3a\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\uff08\u5de6\u7aef\u70b9\u7b49\u4e8e\u53f3\u7aef\u70b9\u7684\u8282\u70b9\uff09\u7684\u65f6\u5019\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u5305\u542b\u5728\u67e5\u8be2\u7684\u533a\u95f4\u5185\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u5728\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\u524d\u5c31\u5904\u7406\u5b8c\u4e86 return \u6389\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u4f1a\u51fa\u73b0\u53f6\u5b50\u8282\u70b9\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\u5bfc\u81f4\u6570\u7ec4\u8d8a\u754c\uff0c\u4e5f\u4e0d\u7528\u61d2\u60f0\u6807\u8bb0\u4e0b\u65b9\u6bcf\u6b21\u8fd8\u68c0\u67e5\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\u4e86\u3002\uff08\u4ee3\u7801\u4e2d\u7684 s!=t \u53ef\u4ee5\u53bb\u6389\uff09\u51cf\u5c0f\u4ee3\u7801\u590d\u6742\u5ea6\u3002 \u6700\u597d\u522b\u50cf\u4e0a\u6587\u90a3\u6837\u628a\u6240\u6709\u529f\u80fd\u90fd\u5199\u4e00\u8d77\uff0c\u6bd4\u5982\u4e0b\u653e\u61d2\u60f0\u6807\u8bb0\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e13\u95e8\u7684\u51fd\u6570\uff0c\u4ece\u513f\u5b50\u8282\u70b9\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e13\u95e8\u7684\u51fd\u6570\uff0c\u7b49\u7b49\u3002 \u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u5982\u679c\u786e\u5b9a\u61d2\u60f0\u6807\u8bb0\u4e0d\u4f1a\u5728\u4e2d\u9014\u88ab\u52a0\u5230\u8d85\u51fa\u6570\u636e\u8303\u56f4\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\u53ef\u4ee5\u907f\u514d\u4e0b\u4f20\u6807\u8bb0\uff0c\u53ef\u4ee5\u964d\u4f4e\u7a0b\u5e8f\u5e38\u6570\u3002\u5728\u8fdb\u884c\u8be2\u95ee\u65f6\u8981\u628a\u6807\u8bb0\u7684\u5f71\u54cd\u52a0\u5230\u7b54\u6848\u5f53\u4e2d\uff0c\u5177\u4f53\u5982\u4f55\u5904\u7406\u4e0e\u9898\u76ee\u7279\u6027\u76f8\u5173\uff0c\u9700\u7ed3\u5408\u9898\u76ee\u6765\u5199\u3002\u6807\u8bb0\u6c38\u4e45\u5316\u4e5f\u662f\u6811\u5957\u6811\u548c\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u4e2d\u4f1a\u7528\u5230\u7684\u4e00\u79cd\u6280\u5de7\u3002 \u7ebf\u6bb5\u6811\u57fa\u7840\u9898\u63a8\u8350 \u00b6 LUOGU P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1 \u00b6 \u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <iostream> using namespace std ; typedef long long LL ; LL n , a [ 100005 ], d [ 270000 ], b [ 270000 ]; void build ( LL l , LL r , LL p ) { if ( l == r ) { d [ p ] = a [ l ]; return ; } LL m = ( l + r ) >> 1 ; build ( l , m , p << 1 ), build ( m + 1 , r , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } void update ( LL l , LL r , LL c , LL s , LL t , LL p ) { if ( l <= s && t <= r ) { d [ p ] += ( t - s + 1 ) * c , b [ p ] += c ; return ; } LL m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] += b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] += b [ p ] * ( t - m ), b [ p << 1 ] += b [ p ], b [( p << 1 ) | 1 ] += b [ p ]; b [ p ] = 0 ; if ( l <= m ) update ( l , r , c , s , m , p << 1 ); if ( r > m ) update ( l , r , c , m + 1 , t , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } LL getsum ( LL l , LL r , LL s , LL t , LL p ) { if ( l <= s && t <= r ) return d [ p ]; LL m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] += b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] += b [ p ] * ( t - m ), b [ p << 1 ] += b [ p ], b [( p << 1 ) | 1 ] += b [ p ]; b [ p ] = 0 ; LL sum = 0 ; if ( l <= m ) sum = getsum ( l , r , s , m , p << 1 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , ( p << 1 ) | 1 ); return sum ; } int main () { ios :: sync_with_stdio ( 0 ); LL q , i1 , i2 , i3 , i4 ; cin >> n >> q ; for ( LL i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; build ( 1 , n , 1 ); while ( q -- ) { cin >> i1 >> i2 >> i3 ; if ( i1 == 2 ) cout << getsum ( i2 , i3 , 1 , n , 1 ) << endl ; else cin >> i4 , update ( i2 , i3 , i4 , 1 , n , 1 ); } return 0 ; } LUOGU P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2 \u00b6 \u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <vector> using namespace std ; #define ll long long ll read () { ll w = 1 , q = 0 ; char ch = ' ' ; while ( ch != '-' && ( ch < '0' || ch > '9' )) ch = getchar (); if ( ch == '-' ) w = - 1 , ch = getchar (); while ( ch >= '0' && ch <= '9' ) q = ( ll ) q * 10 + ch - '0' , ch = getchar (); return ( ll ) w * q ; } int n , m ; ll mod ; ll a [ 100005 ], sum [ 400005 ], mul [ 400005 ], laz [ 400005 ]; void up ( int i ) { sum [ i ] = ( sum [( i << 1 )] + sum [( i << 1 ) | 1 ]) % mod ; } void pd ( int i , int s , int t ) { int l = ( i << 1 ), r = ( i << 1 ) | 1 , mid = ( s + t ) >> 1 ; if ( mul [ i ] != 1 ) { mul [ l ] *= mul [ i ]; mul [ l ] %= mod ; mul [ r ] *= mul [ i ]; mul [ r ] %= mod ; laz [ l ] *= mul [ i ]; laz [ l ] %= mod ; laz [ r ] *= mul [ i ]; laz [ r ] %= mod ; sum [ l ] *= mul [ i ]; sum [ l ] %= mod ; sum [ r ] *= mul [ i ]; sum [ r ] %= mod ; mul [ i ] = 1 ; } if ( laz [ i ]) { sum [ l ] += laz [ i ] * ( mid - s + 1 ); sum [ l ] %= mod ; sum [ r ] += laz [ i ] * ( t - mid ); sum [ r ] %= mod ; laz [ l ] += laz [ i ]; laz [ l ] %= mod ; laz [ r ] += laz [ i ]; laz [ r ] %= mod ; laz [ i ] = 0 ; } return ; } void build ( int s , int t , int i ) { mul [ i ] = 1 ; if ( s == t ) { sum [ i ] = a [ s ]; return ; } int mid = ( s + t ) >> 1 ; build ( s , mid , i << 1 ); build ( mid + 1 , t , ( i << 1 ) | 1 ); up ( i ); } void chen ( int l , int r , int s , int t , int i , ll z ) { int mid = ( s + t ) >> 1 ; if ( l <= s && t <= r ) { mul [ i ] *= z ; mul [ i ] %= mod ; laz [ i ] *= z ; laz [ i ] %= mod ; sum [ i ] *= z ; sum [ i ] %= mod ; return ; } pd ( i , s , t ); if ( mid >= l ) chen ( l , r , s , mid , ( i << 1 ), z ); if ( mid + 1 <= r ) chen ( l , r , mid + 1 , t , ( i << 1 ) | 1 , z ); up ( i ); } void add ( int l , int r , int s , int t , int i , ll z ) { int mid = ( s + t ) >> 1 ; if ( l <= s && t <= r ) { sum [ i ] += z * ( t - s + 1 ); sum [ i ] %= mod ; laz [ i ] += z ; laz [ i ] %= mod ; return ; } pd ( i , s , t ); if ( mid >= l ) add ( l , r , s , mid , ( i << 1 ), z ); if ( mid + 1 <= r ) add ( l , r , mid + 1 , t , ( i << 1 ) | 1 , z ); up ( i ); } ll getans ( int l , int r , int s , int t , int i ) { int mid = ( s + t ) >> 1 ; ll tot = 0 ; if ( l <= s && t <= r ) { return sum [ i ]; } pd ( i , s , t ); if ( mid >= l ) tot += getans ( l , r , s , mid , ( i << 1 )); tot %= mod ; if ( mid + 1 <= r ) tot += getans ( l , r , mid + 1 , t , ( i << 1 ) | 1 ); return tot % mod ; } int main () { int i , j , x , y , bh ; ll z ; n = read (); m = read (); mod = read (); for ( i = 1 ; i <= n ; i ++ ) a [ i ] = read (); build ( 1 , n , 1 ); for ( i = 1 ; i <= m ; i ++ ) { bh = read (); if ( bh == 1 ) { x = read (); y = read (); z = read (); chen ( x , y , 1 , n , 1 , z ); } else if ( bh == 2 ) { x = read (); y = read (); z = read (); add ( x , y , 1 , n , 1 , z ); } else if ( bh == 3 ) { x = read (); y = read (); printf ( \"%lld \\n \" , getans ( x , y , 1 , n , 1 )); } } return 0 ; } CODEVS \u7ebf\u6bb5\u6811\u7ec3\u4e60 \uff08\u8fd9\u662f\u4e00\u4e2a\u7cfb\u5217\uff09 \u00b6 \u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u5177\u4f53\u9898\u89e3\u53bb \u6211\u7684\u535a\u5ba2 \u91cc\u641c\u7d22\u5427\u3002 \u4e0d\u4fdd\u8bc1\u641c\u5f97\u5230\u3002 HihoCoder 1078 \u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539 \u00b6 \u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <iostream> using namespace std ; int n , a [ 100005 ], d [ 270000 ], b [ 270000 ]; void build ( int l , int r , int p ) { if ( l == r ) { d [ p ] = a [ l ]; return ; } int m = ( l + r ) >> 1 ; build ( l , m , p << 1 ), build ( m + 1 , r , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } void update ( int l , int r , int c , int s , int t , int p ) { if ( l <= s && t <= r ) { d [ p ] = ( t - s + 1 ) * c , b [ p ] = c ; return ; } int m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] = b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] = b [ p ] * ( t - m ), b [ p << 1 ] = b [( p << 1 ) | 1 ] = b [ p ]; b [ p ] = 0 ; if ( l <= m ) update ( l , r , c , s , m , p << 1 ); if ( r > m ) update ( l , r , c , m + 1 , t , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } int getsum ( int l , int r , int s , int t , int p ) { if ( l <= s && t <= r ) return d [ p ]; int m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] = b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] = b [ p ] * ( t - m ), b [ p << 1 ] = b [( p << 1 ) | 1 ] = b [ p ]; b [ p ] = 0 ; int sum = 0 ; if ( l <= m ) sum = getsum ( l , r , s , m , p << 1 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , ( p << 1 ) | 1 ); return sum ; } int main () { ios :: sync_with_stdio ( 0 ); cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; build ( 1 , n , 1 ); int q , i1 , i2 , i3 , i4 ; cin >> q ; while ( q -- ) { cin >> i1 >> i2 >> i3 ; if ( i1 == 0 ) cout << getsum ( i2 , i3 , 1 , n , 1 ) << endl ; else cin >> i4 , update ( i2 , i3 , i4 , 1 , n , 1 ); } return 0 ; } 2018 Multi-University Training Contest 5 Problem G. Glad You Came \u00b6 \u4f20\u9001\u95e8 \u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u533a\u95f4\u7684\u6c38\u4e45\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u8dd1\u4e00\u8fb9 dfs \u7edf\u8ba1\u7ed3\u679c\u5373\u53ef\u3002\u6ce8\u610f\u6253\u6807\u8bb0\u7684\u65f6\u5019\u52a0\u4e2a\u526a\u679d\u4f18\u5316\uff0c\u5426\u5219\u4f1a T\u3002 \u62d3\u5c55 - \u732b\u6811 \u00b6 \u4f17\u6240\u5468\u77e5\u7ebf\u6bb5\u6811\u53ef\u4ee5\u652f\u6301\u9ad8\u901f\u67e5\u8be2\u67d0\u4e00\u6bb5\u533a\u95f4\u7684\u4fe1\u606f\u548c\uff0c\u6bd4\u5982\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u533a\u95f4\u548c\uff0c\u533a\u95f4\u77e9\u9635\u7684\u8fde\u4e58\u79ef\u7b49\u7b49 \u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u8be2\u95ee\u5728\u67d0\u4e9b\u6bd2\u7624\u7684\u773c\u91cc\u53ef\u80fd\u8fd8\u662f\u6709\u4e9b\u6162\u4e86 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u7ebf\u6bb5\u6811\u5efa\u6811\u7684\u65f6\u5019\u9700\u8981\u505a O(n) O(n) \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u800c\u6bcf\u4e00\u6b21\u533a\u95f4\u8be2\u95ee\u9700\u8981\u505a O(logn) O(logn) \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u8be2\u95ee\u533a\u95f4\u548c\u8fd9\u79cd\u4e1c\u897f\u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u5fcd\u53d7\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u9700\u8981\u8be2\u95ee\u533a\u95f4\u7ebf\u6027\u57fa\u8fd9\u79cd\u5408\u5e76\u590d\u6742\u5ea6\u9ad8\u8fbe O(log^2n) O(log^2n) \u7684\u4fe1\u606f\u7684\u8bdd\uff0c\u6b64\u65f6\u5c31\u7b97\u662f\u505a O(logn) O(logn) \u6b21\u5408\u5e76\u6709\u4e9b\u65f6\u5019\u5728\u65f6\u95f4\u4e0a\u4e5f\u662f\u4e0d\u53ef\u63a5\u53d7\u7684 \u800c\u6240\u8c13 \"\u732b\u6811\" \u5c31\u662f\u4e00\u79cd\u4e0d\u652f\u6301\u4fee\u6539\uff0c\u4ec5\u4ec5\u652f\u6301\u5feb\u901f\u533a\u95f4\u8be2\u95ee\u7684\u4e00\u79cd\u9759\u6001\u7ebf\u6bb5\u6811 \u6784\u9020\u4e00\u68f5\u8fd9\u6837\u7684\u9759\u6001\u7ebf\u6bb5\u6811\u9700\u8981 O(nlogn) O(nlogn) \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u4f46\u662f\u6b64\u65f6\u7684\u67e5\u8be2\u590d\u6742\u5ea6\u88ab\u52a0\u901f\u81f3 O(1) O(1) \u6b21\u5408\u5e76\u64cd\u4f5c \u5728\u5904\u7406\u7ebf\u6027\u57fa\u8fd9\u6837\u7279\u6b8a\u7684\u4fe1\u606f\u7684\u65f6\u5019\u751a\u81f3\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u964d\u81f3 O(nlog^2n) O(nlog^2n) \u539f\u7406 \u00b6 \u5728\u67e5\u8be2 [l,r] [l,r] \u8fd9\u6bb5\u533a\u95f4\u7684\u4fe1\u606f\u548c\u7684\u65f6\u5019\uff0c\u5c06\u7ebf\u6bb5\u6811\u6811\u4e0a\u4ee3\u8868 [l,l] [l,l] \u7684\u8282\u70b9\u548c\u4ee3\u8868 [r,r] [r,r] \u8fd9\u6bb5\u533a\u95f4\u7684\u8282\u70b9\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684 lca \u6c42\u51fa\u6765, \u8bbe\u8fd9\u4e2a\u8282\u70b9 p \u4ee3\u8868\u7684\u533a\u95f4\u4e3a [L,R] [L,R] \uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u7684\u6027\u8d28: 1. [L,R] [L,R] \u8fd9\u4e2a\u533a\u95f4\u4e00\u5b9a\u5305\u542b [l,r] [l,r] \u663e\u7136\uff0c\u56e0\u4e3a\u5b83\u65e2\u662f l \u7684\u7956\u5148\u53c8\u662f r \u7684\u7956\u5148 2. [l,r] [l,r] \u8fd9\u4e2a\u533a\u95f4\u4e00\u5b9a\u8de8\u8d8a [L,R] \u7684\u4e2d\u70b9 \u7531\u4e8e p \u662f l \u548c r \u7684 lca\uff0c\u8fd9\u610f\u5473\u7740 p \u7684\u5de6\u513f\u5b50\u662f l \u7684\u7956\u5148\u800c\u4e0d\u662f r \u7684\u7956\u5148\uff0cp \u7684\u53f3\u513f\u5b50\u662f r \u7684\u7956\u5148\u800c\u4e0d\u662f l \u7684\u7956\u5148 \u56e0\u6b64 l \u4e00\u5b9a\u5728 [L,MID] [L,MID] \u8fd9\u4e2a\u533a\u95f4\u5185\uff0cr \u4e00\u5b9a\u5728 [MID,R] [MID,R] \u8fd9\u4e2a\u533a\u95f4\u5185 \u6709\u4e86\u8fd9\u4e24\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u964d\u81f3 O(1) O(1) \u4e86 \u5b9e\u73b0 \u00b6 \u5177\u4f53\u6765\u8bb2\u6211\u4eec\u5efa\u6811\u7684\u65f6\u5019\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u8bbe\u5b83\u4ee3\u8868\u7684\u533a\u95f4\u4e3a (l,r] (l,r] \u4e0d\u540c\u4e8e\u4f20\u7edf\u7ebf\u6bb5\u6811\u5728\u8fd9\u4e2a\u8282\u70b9\u91cc\u53ea\u4fdd\u7559 [l,r] [l,r] \u7684\u548c\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u8282\u70b9\u91cc\u9762\u989d\u5916\u4fdd\u5b58 \uff08l,mid] \uff08l,mid] \u7684\u540e\u7f00\u548c\u6570\u7ec4\u548c (mid,r] (mid,r] \u7684\u524d\u7f00\u548c\u6570\u7ec4 \u8fd9\u6837\u7684\u8bdd\u5efa\u6811\u7684\u590d\u6742\u5ea6\u4e3a T(n)=2T(n/2)+O(n)=O(nlogn) T(n)=2T(n/2)+O(n)=O(nlogn) \u540c\u7406\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u4ece\u539f\u6765\u7684 O(n) O(n) \u53d8\u6210\u4e86 O(nlogn) O(nlogn) \u4e0b\u9762\u662f\u6700\u5173\u952e\u7684\u8be2\u95ee\u4e86~ \u5982\u679c\u6211\u4eec\u8be2\u95ee\u7684\u533a\u95f4\u662f [l,r] [l,r] \u90a3\u4e48\u6211\u4eec\u628a\u4ee3\u8868 [l,l] [l,l] \u7684\u8282\u70b9\u548c\u4ee3\u8868 [r,r] [r,r] \u7684\u8282\u70b9\u7684 lca \u6c42\u51fa\u6765\uff0c\u8bb0\u4e3a p \u6839\u636e\u521a\u624d\u7684\u4e24\u4e2a\u6027\u8d28, l,r \u5728 p \u6240\u5305\u542b\u7684\u533a\u95f4\u4e4b\u5185\u5e76\u4e14\u4e00\u5b9a\u8de8\u8d8a\u4e86 p \u7684\u4e2d\u70b9 \u8fd9\u610f\u5473\u8fd9\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684\u4e8b\u5b9e\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 p \u91cc\u9762\u7684\u524d\u7f00\u548c\u6570\u7ec4\u548c\u540e\u7f00\u548c\u6570\u7ec4\uff0c\u5c06 [l,r] [l,r] \u62c6\u6210 [l,mid]+(mid,r] [l,mid]+(mid,r] \u4ece\u800c\u62fc\u51fa\u6765 [l,r] [l,r] \u8fd9\u4e2a\u533a\u95f4 \u800c\u8fd9\u4e2a\u8fc7\u7a0b\u4ec5\u4ec5\u9700\u8981 O(1) O(1) \u6b21\u5408\u5e76\u64cd\u4f5c\uff01 \u4e0d\u8fc7\u6211\u4eec\u597d\u50cf\u5ffd\u7565\u4e86\u70b9\u4ec0\u4e48\uff1f \u4f3c\u4e4e\u6c42 lca \u7684\u590d\u6742\u5ea6\u4f3c\u4e4e\u8fd8\u4e0d\u662f O(1) O(1) \uff0c\u66b4\u529b\u6c42\u662f O(logn) O(logn) \u7684\uff0c\u500d\u589e\u6cd5\u5219\u662f O(loglogn) O(loglogn) \u7684\uff0c\u8f6c st \u8868\u7684\u4ee3\u4ef7\u53c8\u592a\u5927\u2026\u2026 \u5806\u5f0f\u5efa\u6811 \u00b6 \u5177\u4f53\u6765\u5c06\u6211\u4eec\u5c06\u8fd9\u4e2a\u5e8f\u5217\u8865\u6210 2 \u7684\u6574\u6b21\u5e42\uff0c\u7136\u540e\u5efa\u7ebf\u6bb5\u6811 \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u7ebf\u6bb5\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9\u7684 lca \u7f16\u53f7\uff0c\u5c31\u662f\u4e24\u4e2a\u8282\u70b9\u4e8c\u8fdb\u5236\u7f16\u53f7\u7684 lcp lcp \u5b9e\u5728\u662f\u4e0d\u96be\u6c42\uff0cx \u548c y \u7684\u4e8c\u8fdb\u5236\u4e0b lcp=x>>log[x^y] \u6240\u4ee5\u6211\u4eec\u9884\u5904\u7406\u4e00\u4e2a log \u6570\u7ec4\u5373\u53ef\u8f7b\u677e\u5b8c\u6210\u6c42 lca \u7684\u5de5\u4f5c \u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u732b\u6811 \u7531\u4e8e\u5efa\u6811\u7684\u65f6\u5019\u6d89\u53ca\u5230\u6c42\u524d\u7f00\u548c\u548c\u6c42\u540e\u7f00\u548c\uff0c\u6240\u4ee5\u5bf9\u4e8e\u7ebf\u6027\u57fa\u8fd9\u79cd\u867d\u7136\u5408\u5e76\u662f O(log^2n) O(log^2n) \u4f46\u662f\u6c42\u524d\u7f00\u548c\u5374\u662f O(nlogn) O(nlogn) \u7684\u4fe1\u606f\uff0c\u4f7f\u7528\u732b\u6811\u53ef\u4ee5\u5c06\u9759\u6001\u533a\u95f4\u7ebf\u6027\u57fa\u4ece O(nlog^2n+mlog^3n) O(nlog^2n+mlog^3n) \u4f18\u5316\u81f3 O(nlog^2n+mlog^2n) O(nlog^2n+mlog^2n) \u7684\u590d\u6742\u5ea6 \u53c2\u8003 \u00b6 immortalCO \u5927\u7237\u7684\u535a\u5ba2","title":"\u7ebf\u6bb5\u6811"},{"location":"ds/segment/#_1","text":"\u7ebf\u6bb5\u6811\u662f\u4e2a\u597d\u4e1c\u897f\u554a QwQ OI \u4e2d\u6700\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u4e4b\u4e00\uff0c\u4e0d\u5b66\u4e0d\u884c\u554a OvO","title":"\u5199\u5728\u524d\u9762"},{"location":"ds/segment/#_2","text":"\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log N) O(\\log N) \u3002\u800c\u672a\u4f18\u5316\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a 2N 2N \uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\u2014\u2014From \u5ea6\u5a18 \u53cd\u6b63\u5c31\u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5185\u5bf9\u67d0\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002","title":"\u7ebf\u6bb5\u6811\u662f\u4ec0\u4e48"},{"location":"ds/segment/#_3","text":"\u5728 O(\\log N) O(\\log N) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b9e\u73b0\u5982\uff1a\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\uff08\u5982\uff1a\u533a\u95f4\u6c42\u548c\uff0c\u6c42\u533a\u95f4\u6700\u5927\u503c\uff0c\u6c42\u533a\u95f4\u6700\u5c0f\u503c\u2026\u2026\uff09\u8fd8\u6709\u5f88\u591a\u2026\u2026 \u603b\u4e4b\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u9700\u8981\u6ee1\u8db3\u53ef\u52a0\u6027\uff0c\u4e14\u8981\u4ee5\u53ef\u4ee5\u63a5\u53d7\u7684\u901f\u5ea6\u5408\u5e76\u4fe1\u606f\u548c\u4fee\u6539\u4fe1\u606f\uff0c\u5982\u679c\u4f7f\u7528\u6807\u8bb0\uff0c\u6807\u8bb0\u4e5f\u8981\u6ee1\u8db3\u53ef\u52a0\u6027\uff08\u4f8b\u5982\u53d6\u6a21\u5c31\u4e0d\u6ee1\u8db3\u53ef\u52a0\u6027\uff0c\u5bf9 4 4 \u53d6\u6a21\u7136\u540e\u5bf9 3 3 \u53d6\u6a21\uff0c\u4e24\u4e2a\u64cd\u4f5c\u5c31\u4e0d\u80fd\u5408\u5e76\u5728\u4e00\u8d77\u505a\uff08\u4e8b\u5b9e\u4e0a\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u66b4\u529b\u5355\u70b9\u53d6\u6a21\uff09\uff09","title":"\u7ebf\u6bb5\u6811\u6709\u4ec0\u4e48\u7528"},{"location":"ds/segment/#_4","text":"","title":"\u7ebf\u6bb5\u6811\u600e\u4e48\u5b9e\u73b0"},{"location":"ds/segment/#_5","text":"\u60f3\u8981\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e0d\u7406\u89e3\u5b83\u7684\u7ed3\u6784\u3001\u539f\u7406\u662f\u80af\u5b9a\u884c\u4e0d\u901a\u7684\u3002 \u4e0b\u9762\u6211\u6765\u4e3e\u4e2a\u6817\u5b50\uff1a \u6211\u4eec\u6709\u4e2a\u5927\u5c0f\u4e3a 5 5 \u7684\u6570\u7ec4 a=\\{10,11,12,13,14\\} a=\\{10,11,12,13,14\\} \u8981\u8fdb\u884c\u533a\u95f4\u6c42\u548c\u64cd\u4f5c\uff0c\u73b0\u5728\u6211\u4eec\u8981\u600e\u4e48\u628a\u8fd9\u4e2a\u6570\u7ec4\u5b58\u5230\u7ebf\u6bb5\u6811\u4e2d\uff08\u4e5f\u53ef\u4ee5\u8bf4\u662f\u8f6c\u5316\u6210\u7ebf\u6bb5\u6811\uff09\u5462\uff1f\u6211\u4eec\u8fd9\u6837\u5b50\u505a\uff1a\u8bbe\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 1 \uff0c\u7528\u6570\u7ec4 d d \u6765\u4fdd\u5b58\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\uff0c d[i] d[i] \u7528\u6765\u4fdd\u5b58\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u7684\u503c\uff08\u8fd9\u91cc\u8282\u70b9\u7684\u503c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u603b\u548c\uff09\uff0c\u5982\u56fe\u6240\u793a\uff1a \u56fe\u4e2d d[1] d[1] \u8868\u793a\u6839\u8282\u70b9\uff0c\u7d2b\u8272\u65b9\u6846\u662f\u6570\u7ec4 a a \uff0c\u7ea2\u8272\u65b9\u6846\u662f\u6570\u7ec4 d d \uff0c\u7ea2\u8272\u65b9\u6846\u4e2d\u7684\u62ec\u53f7\u4e2d\u7684\u9ec4\u8272\u6570\u5b57\u8868\u793a\u5b83\u6240\u5728\u7684\u90a3\u4e2a\u7ea2\u8272\u65b9\u6846\u8868\u793a\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\uff0c\u5982 d[1] d[1] \u6240\u8868\u793a\u7684\u533a\u95f4\u5c31\u662f 1\\sim 5\\ (a[1]\\sim a[5]) 1\\sim 5\\ (a[1]\\sim a[5]) \uff0c\u5373 d[1] d[1] \u6240\u4fdd\u5b58\u7684\u503c\u662f a[1]+a[2]+ \\cdots +a[5] a[1]+a[2]+ \\cdots +a[5] \uff0c d[1]=60 d[1]=60 \u8868\u793a\u7684\u662f a[1]+a[2]+ \\cdots +a[5]=60 a[1]+a[2]+ \\cdots +a[5]=60 \u3002 \u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c d[i] d[i] \u7684\u5de6\u513f\u5b50\u8282\u70b9\u5c31\u662f d[2\\times i] d[2\\times i] \uff0c d[i] d[i] \u7684\u53f3\u8282\u70b9\u5c31\u662f d[2\\times i+1] d[2\\times i+1] \u3002\u8fdb\u4e00\u6b65\u89c2\u5bdf\uff0c\u53ef\u4ee5\u770b\u51fa\u5982\u679c d[i] d[i] \u8868\u793a\u7684\u662f\u533a\u95f4 [s,t] [s,t] \uff08\u5373 d[i]=a[s]+a[s+1]+ \\cdots +a[t] d[i]=a[s]+a[s+1]+ \\cdots +a[t] ) \u7684\u8bdd\uff0c\u90a3\u4e48 d[i] d[i] \u7684\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u662f\u533a\u95f4 [s, \\frac{s+t}{2} ] [s, \\frac{s+t}{2} ] \uff0c d[i] d[i] \u7684\u53f3\u513f\u5b50\u8868\u793a\u7684\u662f\u533a\u95f4 [ \\frac{s+t}{2} +1,t] [ \\frac{s+t}{2} +1,t] \u3002 \u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u8868\u793a\u5462\uff1f\u56e0\u4e3a\u7ebf\u6bb5\u6811\u5229\u7528\u4e86\u4e8c\u5206\u7684\u601d\u60f3\uff0c\u7ebf\u6bb5\u6811\u5b9e\u9645\u4e0a\u662f\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd9\u4e9b\u4e0d\u61c2\u7684\u8bdd\u5c31\u65e0\u6cd5\u7406\u89e3\u7ebf\u6bb5\u6811\u4e86\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u660e\u767d\u4e8c\u5206\u6216\u8005\u4e8c\u53c9\u6811\u7684\u8bdd\u2026\u2026 \u5efa\u8bae\u53bb\u95ee\u95ee\u5ea6\u5a18\u3002 \u5177\u4f53\u8981\u600e\u4e48\u7528\u4ee3\u7801\u5b9e\u73b0\u5462\uff1f \u6211\u4eec\u7ee7\u7eed\u89c2\u5bdf\uff0c\u6709\u6ca1\u6709\u53d1\u73b0\u5982\u679c d[i] d[i] \u8868\u793a\u7684\u533a\u95f4\u5927\u5c0f\u7b49\u4e8e 1 1 \uff08\u533a\u95f4\u5927\u5c0f\u6307\u7684\u662f\u533a\u95f4\u5305\u542b\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u5373 a a \u7684\u4e2a\u6570\uff09\u7684\u8bdd\uff08\u8bbe d[i] d[i] \u8868\u793a\u533a\u95f4 [s,t] [s,t] \uff0c\u5b83\u7684\u533a\u95f4\u5927\u5c0f\u5c31\u662f t-s+1 t-s+1 \uff0c\u4e0d\u4fe1\u4f60\u770b\u4e0a\u9762\u7684\u56fe\uff09\uff0c\u90a3\u4e48 d[i] d[i] \u6240\u8868\u793a\u7684\u533a\u95f4 [s,t] [s,t] \u4e2d s s \u80af\u5b9a\u7b49\u4e8e t t \uff08\u4e0d\u4fe1\u4f60\u8fd8\u662f\u770b\u56fe\uff09\uff0c\u4e14 d[i]=a[s] d[i]=a[s] \uff08\u5f53\u7136\u4e5f\u7b49\u4e8e a[t] a[t] \uff09\u3002 \u4e3a\u4ec0\u4e48\u8981\u8bb2\u8fd9\u4e2a\u4e1c\u897f\u5462\uff1f\u4f60\u6ca1\u53d1\u73b0\u8fd9\u4e2a\u662f\u4e2a\u9012\u5f52\u8fb9\u754c\u5417\uff1f O(\u2229_\u2229)O \u54c8\u54c8~ \u601d\u8def\u5982\u4e0b\uff1a \u90a3\u4e48\u5c31\u8fd9\u6837\u5199\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 \u5efa\u6811 ( s , t , i ) { \u5982\u679c ( s == t ) { d [ i ] = a [ s ]; } \u5426\u5219 { \u5efa\u6811 ( s , ( s + t ) / 2 , 2 * i ); \u5efa\u6811 (( s + t ) / 2 + 1 , t , 2 * i + 1 ); d [ i ] = d [ 2 * i ] + d [ 2 * i + 1 ]; } } \u5177\u4f53\u4ee3\u7801\u5b9e\u73b0 (C++)\uff1a 1 2 3 4 5 6 7 8 9 void build ( int s , int t , int p ) { if ( s == t ) { d [ p ] = a [ s ]; return ; } int m = ( s + t ) / 2 ; build ( s , m , p * 2 ), build ( m + 1 , t , p * 2 + 1 ); d [ p ] = d [ p * 2 ] + d [( p * 2 ) + 1 ]; } \u4e0a\u9762\u90a3\u77ed\u77ed 7 7 \u884c\u4ee3\u7801\u5c31\u80fd\u5efa\u7acb\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002 \u5173\u4e8e\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u91c7\u7528\u5806\u5f0f\u5b58\u50a8\uff08\u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u662f\u5806\u5f0f\u5b58\u50a8\uff0c\u5373 2\\times p 2\\times p \u662f p \u7684\u5de6\u513f\u5b50, 2 \\times p+1 2 \\times p+1 \u662f p \u7684\u53f3\u513f\u5b50\uff09\uff0cd \u6570\u7ec4\u7684\u5927\u5c0f\u9700\u8981\u662f n n \uff08\u5143\u7d20\u4e2a\u6570\uff09\u4e0a\u53d6\u5230\u4e00\u4e2a 2 2 \u7684\u6574\u6570\u6b21\u5e42\uff08\u53f6\u5b50\u6570\u91cf\uff09\u518d\u4e58\u4ee5 2 2 \uff08\u53f6\u5b50\u4e0a\u9762\u7684\u8282\u70b9\u6570\u91cf\uff09\uff0c\u4e0a\u754c\u662f 4 4 \u500d\uff0c\u53ef\u5229\u7528\u4e0a\u9762\u7684 build \u81ea\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u91c7\u7528\u52a8\u6001\u5f00\u70b9\uff0c\u5219\u9700\u8981\u4e24\u500d\u7684\u7a7a\u95f4\uff08\u9700\u8981\u989d\u5916\u5730\u8bb0\u5f55\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7684\u7f16\u53f7 / \u5730\u5740\uff09\u3002","title":"\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u7ed3\u6784\u4e0e\u5efa\u6811"},{"location":"ds/segment/#_6","text":"\u533a\u95f4\u67e5\u8be2\uff0c\u6bd4\u5982\u6c42\u533a\u95f4 [l,r] [l,r] \u7684\u603b\u548c\uff08\u5373 a[l]+a[l+1]+ \\cdots +a[r] a[l]+a[l+1]+ \\cdots +a[r] \uff09\u3001\u6c42\u533a\u95f4\u6700\u5927\u503c / \u6700\u5c0f\u503c\u2026\u2026 \u8fd8\u6709\u5f88\u591a\u5f88\u591a\u2026\u2026 \u600e\u4e48\u505a\u5462\uff1f \u62ff\u4e0a\u9762\u8fd9\u5f20\u56fe\u4e3e\u6817\uff01 \uff08\u53d1\u535a\u5ba2\u7d2f\u6b7b\u4e86\u65e0\u804a\u4e00\u4e0b\uff09 \u5982\u679c\u8981\u67e5\u8be2\u533a\u95f4 [1,5] [1,5] \u7684\u548c\uff0c\u90a3\u76f4\u63a5\u83b7\u53d6 d[1] d[1] \u7684\u503c\uff08 60 60 \uff09\u5373\u53ef\u3002\u90a3\u5982\u679c\u6211\u5c31\u4e0d\u67e5\u8be2\u533a\u95f4 [1,5] [1,5] \uff0c\u6211\u5c31\u67e5\u533a\u95f4 [3,5] [3,5] \u5462\uff1f \u03a3(\u2299\u25bd\u2299\"a \u61f5 B \u4e86\u5427\u3002\u4f46\u5176\u5b9e\u5462\u6211\u4eec\u80af\u5b9a\u8fd8\u662f\u6709\u529e\u6cd5\u7684\uff01 <(\uffe3\u02c7\uffe3)/ \u4f60\u8981\u67e5\u7684\u4e0d\u662f [3,5] [3,5] \u5417\uff1f\u6211\u628a [3,5] [3,5] \u62c6\u6210 [3,3] [3,3] \u548c [4,5] [4,5] \u4e0d\u5c31\u884c\u4e86\u5417\uff1f \u5177\u4f53\u601d\u8def\u89c1\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u6c42\u548c\uff08\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u7aef\u70b9 l , \u67e5\u8be2\u533a\u95f4\u7684\u53f3\u7aef\u70b9 r , \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5de6\u7aef\u70b9 s , \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4 t , \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7 p \uff09 { \u5982\u679c\uff08 l <= s && t <= r \uff09 // \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185 { \u8fd4\u56de d [ p ] \uff1b } \u5426\u5219 { \u4ee4 \u8fd4\u56de\u503c = 0 \u5982\u679c\uff08 l <= ( s + t ) / 2 \uff09 // \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7684\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5305\u542b\u5728\u67e5 // \u8be2\u533a\u95f4\u5185,(s+t)/2 // \u5176\u5b9e\u662f\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5206\u5272\u7ebf\u4e14(s+t)/2 // \u5305\u542b\u5728\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u4e2d { \u8fd4\u56de\u503c += \u6c42\u548c\uff08 l , r , s , ( s + t ) / 2 , p * 2 \uff09 ; // l \u548c r // \u662f\u53ef\u4ee5\u4e0d\u7528\u53d8\u7684\uff01\u4e0d\u7ba1\u4f60\u4fe1\u4e0d\u4fe1\u6211\u53cd\u6b63\u662f\u4fe1\u4e86\u3002\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u8282\u70b9\u7f16\u53f7\u662f // p2\uff0c\u4e4b\u524d\u8bb2\u8fc7\u4e86\uff0c\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5de6\u7aef\u70b9\u5c31\u662f\u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c(s+t)/2 // \u662f\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u53f3\u77ed\u70b9 } \u5982\u679c ( r > ( s + t ) / 2 ) // \u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7684\u53f3\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5305\u542b\u5728\u67e5 \u8be2\u533a\u95f4\u5185 { \u8fd4\u56de\u503c += \u6c42\u548c\uff08 l , r , ( s + t ) / 2 + 1 , t , p * 2 + 1 \uff09\uff1b //(s+t)/2+1 \u662f\u5f53\u524d\u8bbf\u95ee\u8282\u70b9\u7684\u53f3\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9 } \u8fd4\u56de \u8fd4\u56de\u503c\uff1b } } \u600e\u4e48\u6837\uff0c\u4ee3\u7801\u5f88\u4e11\u5427\uff1f\u5e9f\u8bdd\uff0c\u7528\u4e2d\u6587\u5199\u7684\u80fd\u4e0d\u4e11\u5417\uff1f\u73b0\u5728\u641e\u4e2a\u82f1 (da) \u6587 (xin) \u7684 (wen)\uff1a 1 2 3 4 5 6 7 int getsum ( int l , int r , int s , int t , int p ) { if ( l <= s && t <= r ) return d [ p ]; int m = ( s + t ) / 2 , sum = 0 ; if ( l <= m ) sum += getsum ( l , r , s , m , p * 2 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , p * 2 + 1 ); return sum ; } \u8fd8\u662f\u633a\u77ed\u7684\u5427\uff1f\u8fd9\u91cc\u7528\u5230\u7684\u4e3b\u8981\u601d\u8def\u5c31\u662f\u628a\u4e00\u4e2a\u533a\u95f4\u62c6\u6210\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\uff0c\u518d\u5206\u522b\u5904\u7406\u5de6\u53f3\u533a\u95f4\u3002\u4e5f\u662f\u4e8c\u5206\u7684\u601d\u60f3\u3002","title":"\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u67e5\u8be2"},{"location":"ds/segment/#_7","text":"\u533a\u95f4\u4fee\u6539\u662f\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f o(\u256f\u25a1\u2570)o\u2026\u2026 \u4f60\u60f3\u554a\uff0c\u5982\u679c\u4f60\u8981\u4fee\u6539\u533a\u95f4 [l,r] [l,r] \uff0c\u96be\u9053\u628a\u6240\u6709\u5305\u542b\u5728\u533a\u95f4 [l,r] \u4e2d\u7684\u8282\u70b9\u90fd\u904d\u5386\u4e00\u6b21\u3001\u4fee\u6539\u4e00\u6b21\uff1f\u90a3\u4f30\u8ba1\u8fd9\u65f6\u95f4\u590d\u6742\u5ea6\u4f30\u8ba1\u4f1a\u4e0a\u5929 |(*\u2032\u53e3 `)\u3002\u8fd9\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u8fd9\u91cc\u8981\u5f15\u7528\u4e00\u4e2a\u53eb\u505a \u300c\u61d2\u60f0\u6807\u8bb0\u300d \u7684\u4e1c\u897f\u3002 \u6211\u4eec\u8bbe\u4e00\u4e2a\u6570\u7ec4 b b \uff0c b[i] b[i] \u8868\u793a\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\u503c\u3002\u5565\u662f\u61d2\u60f0\u6807\u8bb0\u3001\u61d2\u60f0\u6807\u8bb0\u503c\u5462\uff1f(O_O)? \u8fd9\u91cc\u6211\u518d\u4e3e\u4e2a\u6817\u5b50\uff08\u539f\u521b\u5c0f\u6545\u4e8b\u6211\u771f\u6709\u624d\u54c8\u54c8\u54c8 (\u25e1\u1d17\u25e1\u273f)\uff09\uff1a A \u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e00\u4e2a\u662f B\uff0c\u4e00\u4e2a\u662f C\u3002 \u6709\u4e00\u5929 A \u8981\u5efa\u4e00\u4e2a\u65b0\u623f\u5b50\uff0c\u6ca1\u94b1\u3002\u521a\u597d\u8fc7\u5e74\u561b\uff0c\u6709\u4eba\u8981\u7ed9 B \u548c C \u7ea2\u5305\uff0c\u4e24\u4e2a\u7ea2\u5305\u7684\u94b1\u6570\u76f8\u540c\u90fd\u662f (1000000000000001\\bmod 2) (1000000000000001\\bmod 2) \u5706\uff08\u597d\u591a\u554a\uff01\u2026\u2026 \u4e0d\u5c31\u662f 1 1 \u5143\u5417\u2026\u2026\uff09\uff0c\u7136\u800c\u56e0\u4e3a A \u662f\u7236\u4eb2\u6240\u4ee5\u7ea2\u5305\u80af\u5b9a\u662f\u5148\u585e\u7ed9 A \u54af~ \u7406\u8bba\u4e0a\u6765\u8bb2 A \u5e94\u8be5\u628a\u4e24\u4e2a\u7ea2\u5305\u5206\u522b\u7ed9 B \u548c C\uff0c\u4f46\u662f\u2026\u2026 \u7f3a\u94b1\u561b\uff0cA \u5c31\u628a\u7ea2\u5305\u5077\u5077\u6536\u5230\u81ea\u5df1\u53e3\u888b\u91cc\u4e86\u3002 A \u9ad8\u5174\u2642\u5730\u8bf4\uff1a\u300c\u6211\u73b0\u5728\u6709 2 2 \u4efd\u7ea2\u5305\u4e86\uff01\u6211\u53c8\u591a\u4e86 2\\times (1000000000000001\\bmod 2)=2 2\\times (1000000000000001\\bmod 2)=2 \u5706\u4e86\uff01\u54c8\u54c8\u54c8~\u300d \u4f46\u662f A \u77e5\u9053\uff0c\u5982\u679c\u4ed6\u4e0d\u628a\u7ea2\u5305\u7ed9 B \u548c C\uff0c\u90a3 B \u548c C \u80af\u5b9a\u4f1a\u4e0d\u723d\u7136\u540e\u5bfc\u81f4\u5bb6\u5ead\u77db\u76fe\u6700\u540e\u5d29\u6e83\uff0c\u6240\u4ee5 A \u5bf9\u513f\u5b50 B \u548c C \u8bf4\uff1a\u300c\u6211\u6b20\u4f60\u4eec\u6bcf\u4eba 1 1 \u4efd (1000000000000001\\bmod 2) (1000000000000001\\bmod 2) \u5706\u7684\u7ea2\u5305\uff0c\u4e0b\u6b21\u6709\u65b0\u7ea2\u5305\u7ed9\u8fc7\u6765\u7684\u65f6\u5019\u518d\u7ed9\u4f60\u4eec\uff01\u8fd9\u91cc\u6211\u5148\u505a\u4e0b\u8bb0\u5f55\u2026\u2026 \u55ef\u2026\u2026 \u6211\u94b1\u4f60\u4eec\u5404 (1000000000000001\\bmod 2) (1000000000000001\\bmod 2) \u5706\u2026\u2026\u300d \u513f\u5b50 B\u3001C \u6709\u70b9\u607c\u6012\uff1a\u300c\u53ef\u662f\u5982\u679c\u6709\u540c\u5b66\u95ee\u8d77\u6211\u4eec\u6211\u4eec\u6536\u5230\u4e86\u591a\u5c11\u7ea2\u5305\u548b\u529e\uff1f\u4f60\u628a\u6211\u4eec\u7684\u7ea2\u5305\u90fd\u6536\u4e86\uff0c\u6211\u4eec\u8fd8\u600e\u4e48\u88c5 \u00d7\uff1f\u300d \u7236\u4eb2 A \u8d76\u5fd9\u8bf4\uff1a\u300c\u6709\u540c\u5b66\u95ee\u8d77\u6765\u6211\u5c31\u4f1a\u7ed9\u4f60\u4eec\u7684\uff01\u6211\u6b20\u6761\u90fd\u5199\u597d\u4e86\u4e0d\u4f1a\u4e0d\u7b97\u8bdd\u7684\uff01\u300d \u8fd9\u6837 B\u3001C \u624d\u653e\u4e86\u5fc3\u3002 \u6ce8\uff1a \\bmod \\bmod \u662f\u53d6\u4f59\u6570\u7684\u610f\u601d\uff0c a\\bmod b a\\bmod b \u5c31\u662f a a \u9664\u4ee5 b b \u7684\u4f59\u6570\uff0c\u6240\u4ee5\u2026\u2026 1000000000000001\\bmod 2=1 1000000000000001\\bmod 2=1 \u3002 \u5728\u8fd9\u4e2a\u6545\u4e8b\u4e2d\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0cA \u5c31\u662f\u7236\u4eb2\u8282\u70b9\uff0cB \u548c C \u662f A \u7684\u513f\u5b50\u8282\u70b9\uff0c\u800c\u4e14 B \u548c C \u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u503c\uff08\u5c31\u662f\u4e4b\u524d\u8bb2\u7684\u6570\u7ec4 a a \uff09\uff0c\u6211\u4eec\u5047\u8bbe\u8282\u70b9 A \u8868\u793a\u533a\u95f4 [1,2] [1,2] \uff08\u5373 a[1]+a[2] a[1]+a[2] \uff09\uff0c\u8282\u70b9 B \u8868\u793a\u533a\u95f4 [1,1] [1,1] \uff08\u5373 a[1] a[1] \uff09\uff0c\u8282\u70b9 C \u8868\u793a\u533a\u95f4 [2,2] [2,2] \uff08\u5373 a[2] a[2] \uff09\uff0c\u5b83\u4eec\u7684\u521d\u59cb\u503c\u90fd\u4e3a 0 0 \uff08\u73b0\u5728\u624d\u521a\u5f00\u59cb\u5462\uff0c\u8fd8\u6ca1\u62ff\u5230\u7ea2\u5305\uff0c\u6240\u4ee5\u90fd\u6ca1\u94b1~\uff09\u3002 \u5982\u56fe\uff1a \u6ce8\uff1a\u8fd9\u91cc D \u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u503c\uff08\u5373\u6240\u8868\u793a\u533a\u95f4\u7684\u533a\u95f4\u548c\uff09\u3002 \u4e3a\u4ec0\u4e48\u8282\u70b9 A \u7684 D \u662f 2\\times (1000000000000001\\bmod 2) 2\\times (1000000000000001\\bmod 2) \u5462\uff1f\u539f\u56e0\u5f88\u7b80\u5355\u3002\u8282\u70b9 A \u8868\u793a\u7684\u533a\u95f4\u662f [1,2] [1,2] \uff0c\u4e00\u5171\u5305\u542b 2 2 \u4e2a\u5143\u7d20\u3002\u6211\u4eec\u662f\u8ba9 [1,2] [1,2] \u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u52a0\u4e0a 1000000000000001\\bmod 2 1000000000000001\\bmod 2 \uff0c\u6240\u4ee5\u8282\u70b9 A \u7684\u503c\u5c31\u52a0\u4e0a\u4e86 2\\times (1000000000000001\\bmod 2) 2\\times (1000000000000001\\bmod 2) \u54af =\uffe3\u03c9\uffe3= \u3002 \u5982\u679c\u8fd9\u65f6\u5019\u6211\u4eec\u8981\u67e5\u8be2\u533a\u95f4 [1,1] [1,1] \uff08\u5373\u8282\u70b9 B \u7684\u503c\uff09\u600e\u4e48\u529e\u5462\uff1f\u4e0d\u662f\u8bf4\u4e86\u5417\uff1f\u5982\u679c B \u8981\u7528\u5230\u7684\u65f6\u5019\uff0cA \u5c31\u628a\u5b83\u6b20\u7684\u8fd8\u7ed9 B\uff01 \u5177\u4f53\u662f\u8fd9\u6837\u64cd\u4f5c\uff08\u5982\u56fe\uff09\uff1a \u6ce8\uff1a\u4e3a\u4ec0\u4e48\u662f\u52a0\u4e0a 1\\times (1000000000000001\\bmod 2) 1\\times (1000000000000001\\bmod 2) \u5462\uff1f \u539f\u56e0\u548c\u4e0a\u9762\u4e00\u6837\u2014\u2014B \u548c C \u8868\u793a\u7684\u533a\u95f4\u4e2d\u53ea\u6709 1 1 \u4e2a\u5143\u7d20\u554a\uff01 \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff0c\u533a\u95f4 [1,1] [1,1] \u7684\u533a\u95f4\u548c\u5c31\u662f 1 1 \u5566\uff01O(\u2229_\u2229)O \u54c8\u54c8~\uff01 \u4ee3\u7801\u5982\u4e0b\uff08\u4e0b\u9762\u4ee3\u7801\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u663e\u793a\u51fa\u6765\u5f88\u4e11\uff0c\u5efa\u8bae\u590d\u5236\u5230\u81ea\u5df1\u7684 C++ \u7f16\u8f91\u5668\u91cc\u770b\u2026\u2026\uff09\uff1a \u533a\u95f4\u4fee\u6539\uff08\u533a\u95f4\u52a0\u4e0a\u67d0\u4e2a\u503c\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void update ( int l , int r , int c , int s , int t , int p ) // l \u662f\u67e5\u8be2\u7684\u533a\u95f4\u5de6\u7aef\u70b9\uff0cr \u662f\u53f3\u7aef\u70b9\uff0cc \u8868\u793a\u533a\u95f4\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a\u7684\u503c\uff0cs // \u662f\u5f53\u524d\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0ct \u662f\u53f3\u7aef\u70b9\uff0cp // \u662f\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7(\u6839\u8282\u70b9\u6807\u53f7\u4e3a 1) { if ( l <= s && t <= r ) { d [ p ] += ( t - s + 1 ) * c , b [ p ] += c ; return ; } // \u5982\u679c\u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u505a\u4e0a\u6807\u8bb0\uff0c\u7ed3\u675f\u4fee\u6539 int m = ( s + t ) / 2 ; // \u8ba1\u7b97\u5de6\u53f3\u8282\u70b9\u8868\u793a\u533a\u95f4\u7684\u5206\u5272\u7ebf if ( b [ p ] && s != t ) // \u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff08\u53f6\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u662f\u76f8\u7b49\u7684\uff09\u4e14\u5f53\u524d\u7684\u61d2\u60f0\u6807\u8bb0\u503c!=0\uff0c\u5c31\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\u7684\u503c\u548c\u61d2\u60f0\u6807\u8bb0\u503c d [ p * 2 ] += b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] += b [ p ] * ( t - m ), b [ p * 2 ] += b [ p ], b [ p * 2 + 1 ] += b [ p ]; b [ p ] = 0 ; // \u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\u503c if ( l <= m ) update ( l , r , c , s , m , p * 2 ); if ( r > m ) update ( l , r , c , m + 1 , t , p * 2 + 1 ); d [ p ] = d [ p * 2 ] + d [ p * 2 + 1 ]; } \u533a\u95f4\u67e5\u8be2\uff08\u6c42\u548c\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int getsum ( int l , int r , int s , int t , int p ) // l \u662f\u67e5\u8be2\u7684\u533a\u95f4\u5de6\u7aef\u70b9\uff0cr \u662f\u53f3\u7aef\u70b9\uff0cs // \u662f\u5f53\u524d\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0ct \u662f\u53f3\u7aef\u70b9\uff0cp // \u662f\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\uff08\u6839\u8282\u70b9\u6807\u53f7\u4e3a 1\uff09 { if ( l <= s && t <= r ) return d [ p ]; // \u5982\u679c\u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u503c int m = ( s + t ) / 2 ; // \u8ba1\u7b97\u5de6\u53f3\u8282\u70b9\u8868\u793a\u533a\u95f4\u7684\u5206\u5272\u7ebf if ( b [ p ] && s != t ) // \u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff08\u53f6\u5b50\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u662f\u76f8\u7b49\u7684\uff09\u4e14\u5f53\u524d\u7684\u61d2\u60f0\u6807\u8bb0\u503c!=0\uff0c\u5c31\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\u7684\u503c\u548c\u61d2\u60f0\u6807\u8bb0 d [ p * 2 ] += b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] += b [ p ] * ( t - m ), b [ p * 2 ] += b [ p ], b [ p * 2 + 1 ] += b [ p ]; b [ p ] = 0 ; int sum = 0 ; // \u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\u503c if ( l <= m ) sum = getsum ( l , r , s , m , p * 2 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , p * 2 + 1 ); return sum ; } \u4f60\u6709\u6ca1\u6709\u53d1\u73b0\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\u5f88\u50cf\u5417\uff1f(... __ ...) \u563b\u563b\u2026\u2026 \u5176\u5b9e\u5e73\u65f6\u6211\u6253\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2\u6211\u90fd\u662f\u6253\u4e00\u4efd\uff0c\u53e6\u4e00\u4efd\u590d\u5236\u9ecf\u8d34\u4ee5\u540e\u518d\u7a0d\u4f5c\u4fee\u6539\u5c31\u884c\u4e86\u3002 \u5982\u679c\u4f60\u662f\u8981\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u4e3a\u67d0\u4e00\u4e2a\u503c\u800c\u4e0d\u662f\u52a0\u4e0a\u67d0\u4e00\u4e2a\u503c\u7684\u8bdd\uff0c\u5f88\u7b80\u5355\uff0c\u628a\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6240\u6709\u7684 += \u66ff\u6362\u6210 = \u5373\u53ef\uff08\u9664\u4e86 sum+=getsum(l,r,m+1,t,p*2+1) \u8fd9\u4e00\u53e5\uff09\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 void update ( int l , int r , int c , int s , int t , int p ) { if ( l <= s && t <= r ) { d [ p ] = ( t - s + 1 ) * c , b [ p ] = c ; return ; } int m = ( s + t ) / 2 ; if ( b [ p ] && s != t ) d [ p * 2 ] = b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] = b [ p ] * ( t - m ), b [ p * 2 ] = b [ p * 2 + 1 ] = b [ p ]; b [ p ] = 0 ; if ( l <= m ) update ( l , r , c , s , m , p * 2 ); if ( r > m ) update ( l , r , c , m + 1 , t , p * 2 + 1 ); d [ p ] = d [ p * 2 ] + d [ p * 2 + 1 ]; } int getsum ( int l , int r , int s , int t , int p ) { if ( l <= s && t <= r ) return d [ p ]; int m = ( s + t ) / 2 ; if ( b [ p ] && s != t ) d [ p * 2 ] = b [ p ] * ( m - s + 1 ), d [ p * 2 + 1 ] = b [ p ] * ( t - m ), b [ p * 2 ] = b [ p * 2 + 1 ] = b [ p ]; b [ p ] = 0 ; int sum = 0 ; if ( l <= m ) sum = getsum ( l , r , s , m , p * 2 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , p * 2 + 1 ); return sum ; }","title":"\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u4e0e\u61d2\u60f0\u6807\u8bb0"},{"location":"ds/segment/#_8","text":"\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4e86\u7b80\u5355\u6613\u61c2\uff0c\u6240\u4ee5\u5462\u6211\u5199\u7684\u6bd4\u8f83\u4e0d\u4f18\u7f8e\u3002 \u8fd9\u91cc\u6211\u603b\u7ed3\u51e0\u4e2a\u7ebf\u6bb5\u6811\u7684\u4f18\u5316\uff1a a\\times 2 a\\times 2 \u53ef\u4ee5\u7528 a<<1 a<<1 \u4ee3\u66ff\uff0c a\\div 2 a\\div 2 \u53ef\u4ee5\u7528 a>>1 a>>1 \u4ee3\u66ff\uff08 <<1 <<1 \u548c \\times 2 \\times 2 \u7684\u901f\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u5373\u4f7f\u4e0d\u5f00 O2\uff0c\u4f46 >>1 >>1 \u901f\u5ea6\u6bd4 \\div 2 \\div 2 \u5feb\uff09\u3002 \u5efa\u6811\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u533a\u95f4\uff0c\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u7aef\u70b9\u4e86\uff0c\u51cf\u5c0f\u4ee3\u7801\u590d\u6742\u5ea6\u3002 \u56e0\u4e3a\u4e0b\u6807\u4e3a a a \u7684\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e0b\u6807\u4e3a a\\times 2 a\\times 2 \uff0c\u53f3\u513f\u5b50\u4e0b\u6807\u4e3a a\\times 2+1 a\\times 2+1 \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a 1 2 3 4 #define LS(a) (a << 1) // a<<1 \u7b49\u540c\u4e8e a*2 #define RS(a) (a << 1 | 1) // a<<1|1 \u7b49\u540c\u4e8e a*2+1 \u56e0\u4e3a\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\uff08\u5de6\u7aef\u70b9\u7b49\u4e8e\u53f3\u7aef\u70b9\u7684\u8282\u70b9\uff09\u7684\u65f6\u5019\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u5305\u542b\u5728\u67e5\u8be2\u7684\u533a\u95f4\u5185\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u5728\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\u524d\u5c31\u5904\u7406\u5b8c\u4e86 return \u6389\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u4f1a\u51fa\u73b0\u53f6\u5b50\u8282\u70b9\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\u5bfc\u81f4\u6570\u7ec4\u8d8a\u754c\uff0c\u4e5f\u4e0d\u7528\u61d2\u60f0\u6807\u8bb0\u4e0b\u65b9\u6bcf\u6b21\u8fd8\u68c0\u67e5\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\u4e86\u3002\uff08\u4ee3\u7801\u4e2d\u7684 s!=t \u53ef\u4ee5\u53bb\u6389\uff09\u51cf\u5c0f\u4ee3\u7801\u590d\u6742\u5ea6\u3002 \u6700\u597d\u522b\u50cf\u4e0a\u6587\u90a3\u6837\u628a\u6240\u6709\u529f\u80fd\u90fd\u5199\u4e00\u8d77\uff0c\u6bd4\u5982\u4e0b\u653e\u61d2\u60f0\u6807\u8bb0\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e13\u95e8\u7684\u51fd\u6570\uff0c\u4ece\u513f\u5b50\u8282\u70b9\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e13\u95e8\u7684\u51fd\u6570\uff0c\u7b49\u7b49\u3002 \u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u5982\u679c\u786e\u5b9a\u61d2\u60f0\u6807\u8bb0\u4e0d\u4f1a\u5728\u4e2d\u9014\u88ab\u52a0\u5230\u8d85\u51fa\u6570\u636e\u8303\u56f4\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\u53ef\u4ee5\u907f\u514d\u4e0b\u4f20\u6807\u8bb0\uff0c\u53ef\u4ee5\u964d\u4f4e\u7a0b\u5e8f\u5e38\u6570\u3002\u5728\u8fdb\u884c\u8be2\u95ee\u65f6\u8981\u628a\u6807\u8bb0\u7684\u5f71\u54cd\u52a0\u5230\u7b54\u6848\u5f53\u4e2d\uff0c\u5177\u4f53\u5982\u4f55\u5904\u7406\u4e0e\u9898\u76ee\u7279\u6027\u76f8\u5173\uff0c\u9700\u7ed3\u5408\u9898\u76ee\u6765\u5199\u3002\u6807\u8bb0\u6c38\u4e45\u5316\u4e5f\u662f\u6811\u5957\u6811\u548c\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u4e2d\u4f1a\u7528\u5230\u7684\u4e00\u79cd\u6280\u5de7\u3002","title":"\u4e00\u4e9b\u4f18\u5316"},{"location":"ds/segment/#_9","text":"","title":"\u7ebf\u6bb5\u6811\u57fa\u7840\u9898\u63a8\u8350"},{"location":"ds/segment/#luogu-p3372-1","text":"\u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <iostream> using namespace std ; typedef long long LL ; LL n , a [ 100005 ], d [ 270000 ], b [ 270000 ]; void build ( LL l , LL r , LL p ) { if ( l == r ) { d [ p ] = a [ l ]; return ; } LL m = ( l + r ) >> 1 ; build ( l , m , p << 1 ), build ( m + 1 , r , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } void update ( LL l , LL r , LL c , LL s , LL t , LL p ) { if ( l <= s && t <= r ) { d [ p ] += ( t - s + 1 ) * c , b [ p ] += c ; return ; } LL m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] += b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] += b [ p ] * ( t - m ), b [ p << 1 ] += b [ p ], b [( p << 1 ) | 1 ] += b [ p ]; b [ p ] = 0 ; if ( l <= m ) update ( l , r , c , s , m , p << 1 ); if ( r > m ) update ( l , r , c , m + 1 , t , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } LL getsum ( LL l , LL r , LL s , LL t , LL p ) { if ( l <= s && t <= r ) return d [ p ]; LL m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] += b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] += b [ p ] * ( t - m ), b [ p << 1 ] += b [ p ], b [( p << 1 ) | 1 ] += b [ p ]; b [ p ] = 0 ; LL sum = 0 ; if ( l <= m ) sum = getsum ( l , r , s , m , p << 1 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , ( p << 1 ) | 1 ); return sum ; } int main () { ios :: sync_with_stdio ( 0 ); LL q , i1 , i2 , i3 , i4 ; cin >> n >> q ; for ( LL i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; build ( 1 , n , 1 ); while ( q -- ) { cin >> i1 >> i2 >> i3 ; if ( i1 == 2 ) cout << getsum ( i2 , i3 , 1 , n , 1 ) << endl ; else cin >> i4 , update ( i2 , i3 , i4 , 1 , n , 1 ); } return 0 ; }","title":"LUOGU P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1"},{"location":"ds/segment/#luogu-p3373-2","text":"\u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <vector> using namespace std ; #define ll long long ll read () { ll w = 1 , q = 0 ; char ch = ' ' ; while ( ch != '-' && ( ch < '0' || ch > '9' )) ch = getchar (); if ( ch == '-' ) w = - 1 , ch = getchar (); while ( ch >= '0' && ch <= '9' ) q = ( ll ) q * 10 + ch - '0' , ch = getchar (); return ( ll ) w * q ; } int n , m ; ll mod ; ll a [ 100005 ], sum [ 400005 ], mul [ 400005 ], laz [ 400005 ]; void up ( int i ) { sum [ i ] = ( sum [( i << 1 )] + sum [( i << 1 ) | 1 ]) % mod ; } void pd ( int i , int s , int t ) { int l = ( i << 1 ), r = ( i << 1 ) | 1 , mid = ( s + t ) >> 1 ; if ( mul [ i ] != 1 ) { mul [ l ] *= mul [ i ]; mul [ l ] %= mod ; mul [ r ] *= mul [ i ]; mul [ r ] %= mod ; laz [ l ] *= mul [ i ]; laz [ l ] %= mod ; laz [ r ] *= mul [ i ]; laz [ r ] %= mod ; sum [ l ] *= mul [ i ]; sum [ l ] %= mod ; sum [ r ] *= mul [ i ]; sum [ r ] %= mod ; mul [ i ] = 1 ; } if ( laz [ i ]) { sum [ l ] += laz [ i ] * ( mid - s + 1 ); sum [ l ] %= mod ; sum [ r ] += laz [ i ] * ( t - mid ); sum [ r ] %= mod ; laz [ l ] += laz [ i ]; laz [ l ] %= mod ; laz [ r ] += laz [ i ]; laz [ r ] %= mod ; laz [ i ] = 0 ; } return ; } void build ( int s , int t , int i ) { mul [ i ] = 1 ; if ( s == t ) { sum [ i ] = a [ s ]; return ; } int mid = ( s + t ) >> 1 ; build ( s , mid , i << 1 ); build ( mid + 1 , t , ( i << 1 ) | 1 ); up ( i ); } void chen ( int l , int r , int s , int t , int i , ll z ) { int mid = ( s + t ) >> 1 ; if ( l <= s && t <= r ) { mul [ i ] *= z ; mul [ i ] %= mod ; laz [ i ] *= z ; laz [ i ] %= mod ; sum [ i ] *= z ; sum [ i ] %= mod ; return ; } pd ( i , s , t ); if ( mid >= l ) chen ( l , r , s , mid , ( i << 1 ), z ); if ( mid + 1 <= r ) chen ( l , r , mid + 1 , t , ( i << 1 ) | 1 , z ); up ( i ); } void add ( int l , int r , int s , int t , int i , ll z ) { int mid = ( s + t ) >> 1 ; if ( l <= s && t <= r ) { sum [ i ] += z * ( t - s + 1 ); sum [ i ] %= mod ; laz [ i ] += z ; laz [ i ] %= mod ; return ; } pd ( i , s , t ); if ( mid >= l ) add ( l , r , s , mid , ( i << 1 ), z ); if ( mid + 1 <= r ) add ( l , r , mid + 1 , t , ( i << 1 ) | 1 , z ); up ( i ); } ll getans ( int l , int r , int s , int t , int i ) { int mid = ( s + t ) >> 1 ; ll tot = 0 ; if ( l <= s && t <= r ) { return sum [ i ]; } pd ( i , s , t ); if ( mid >= l ) tot += getans ( l , r , s , mid , ( i << 1 )); tot %= mod ; if ( mid + 1 <= r ) tot += getans ( l , r , mid + 1 , t , ( i << 1 ) | 1 ); return tot % mod ; } int main () { int i , j , x , y , bh ; ll z ; n = read (); m = read (); mod = read (); for ( i = 1 ; i <= n ; i ++ ) a [ i ] = read (); build ( 1 , n , 1 ); for ( i = 1 ; i <= m ; i ++ ) { bh = read (); if ( bh == 1 ) { x = read (); y = read (); z = read (); chen ( x , y , 1 , n , 1 , z ); } else if ( bh == 2 ) { x = read (); y = read (); z = read (); add ( x , y , 1 , n , 1 , z ); } else if ( bh == 3 ) { x = read (); y = read (); printf ( \"%lld \\n \" , getans ( x , y , 1 , n , 1 )); } } return 0 ; }","title":"LUOGU P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2"},{"location":"ds/segment/#codevs","text":"\u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u5177\u4f53\u9898\u89e3\u53bb \u6211\u7684\u535a\u5ba2 \u91cc\u641c\u7d22\u5427\u3002 \u4e0d\u4fdd\u8bc1\u641c\u5f97\u5230\u3002","title":"CODEVS \u7ebf\u6bb5\u6811\u7ec3\u4e60 \uff08\u8fd9\u662f\u4e00\u4e2a\u7cfb\u5217\uff09"},{"location":"ds/segment/#hihocoder-1078","text":"\u4f20\u9001\u95e8 =\uffe3\u03c9\uffe3= \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <iostream> using namespace std ; int n , a [ 100005 ], d [ 270000 ], b [ 270000 ]; void build ( int l , int r , int p ) { if ( l == r ) { d [ p ] = a [ l ]; return ; } int m = ( l + r ) >> 1 ; build ( l , m , p << 1 ), build ( m + 1 , r , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } void update ( int l , int r , int c , int s , int t , int p ) { if ( l <= s && t <= r ) { d [ p ] = ( t - s + 1 ) * c , b [ p ] = c ; return ; } int m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] = b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] = b [ p ] * ( t - m ), b [ p << 1 ] = b [( p << 1 ) | 1 ] = b [ p ]; b [ p ] = 0 ; if ( l <= m ) update ( l , r , c , s , m , p << 1 ); if ( r > m ) update ( l , r , c , m + 1 , t , ( p << 1 ) | 1 ); d [ p ] = d [ p << 1 ] + d [( p << 1 ) | 1 ]; } int getsum ( int l , int r , int s , int t , int p ) { if ( l <= s && t <= r ) return d [ p ]; int m = ( s + t ) >> 1 ; if ( b [ p ] && s != t ) d [ p << 1 ] = b [ p ] * ( m - s + 1 ), d [( p << 1 ) | 1 ] = b [ p ] * ( t - m ), b [ p << 1 ] = b [( p << 1 ) | 1 ] = b [ p ]; b [ p ] = 0 ; int sum = 0 ; if ( l <= m ) sum = getsum ( l , r , s , m , p << 1 ); if ( r > m ) sum += getsum ( l , r , m + 1 , t , ( p << 1 ) | 1 ); return sum ; } int main () { ios :: sync_with_stdio ( 0 ); cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; build ( 1 , n , 1 ); int q , i1 , i2 , i3 , i4 ; cin >> q ; while ( q -- ) { cin >> i1 >> i2 >> i3 ; if ( i1 == 0 ) cout << getsum ( i2 , i3 , 1 , n , 1 ) << endl ; else cin >> i4 , update ( i2 , i3 , i4 , 1 , n , 1 ); } return 0 ; }","title":"HihoCoder 1078 \u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539"},{"location":"ds/segment/#2018-multi-university-training-contest-5-problem-g-glad-you-came","text":"\u4f20\u9001\u95e8 \u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u533a\u95f4\u7684\u6c38\u4e45\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u8dd1\u4e00\u8fb9 dfs \u7edf\u8ba1\u7ed3\u679c\u5373\u53ef\u3002\u6ce8\u610f\u6253\u6807\u8bb0\u7684\u65f6\u5019\u52a0\u4e2a\u526a\u679d\u4f18\u5316\uff0c\u5426\u5219\u4f1a T\u3002","title":"2018 Multi-University Training Contest 5 Problem G. Glad You Came"},{"location":"ds/segment/#-","text":"\u4f17\u6240\u5468\u77e5\u7ebf\u6bb5\u6811\u53ef\u4ee5\u652f\u6301\u9ad8\u901f\u67e5\u8be2\u67d0\u4e00\u6bb5\u533a\u95f4\u7684\u4fe1\u606f\u548c\uff0c\u6bd4\u5982\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u533a\u95f4\u548c\uff0c\u533a\u95f4\u77e9\u9635\u7684\u8fde\u4e58\u79ef\u7b49\u7b49 \u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u8be2\u95ee\u5728\u67d0\u4e9b\u6bd2\u7624\u7684\u773c\u91cc\u53ef\u80fd\u8fd8\u662f\u6709\u4e9b\u6162\u4e86 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u7ebf\u6bb5\u6811\u5efa\u6811\u7684\u65f6\u5019\u9700\u8981\u505a O(n) O(n) \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u800c\u6bcf\u4e00\u6b21\u533a\u95f4\u8be2\u95ee\u9700\u8981\u505a O(logn) O(logn) \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u8be2\u95ee\u533a\u95f4\u548c\u8fd9\u79cd\u4e1c\u897f\u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u5fcd\u53d7\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u9700\u8981\u8be2\u95ee\u533a\u95f4\u7ebf\u6027\u57fa\u8fd9\u79cd\u5408\u5e76\u590d\u6742\u5ea6\u9ad8\u8fbe O(log^2n) O(log^2n) \u7684\u4fe1\u606f\u7684\u8bdd\uff0c\u6b64\u65f6\u5c31\u7b97\u662f\u505a O(logn) O(logn) \u6b21\u5408\u5e76\u6709\u4e9b\u65f6\u5019\u5728\u65f6\u95f4\u4e0a\u4e5f\u662f\u4e0d\u53ef\u63a5\u53d7\u7684 \u800c\u6240\u8c13 \"\u732b\u6811\" \u5c31\u662f\u4e00\u79cd\u4e0d\u652f\u6301\u4fee\u6539\uff0c\u4ec5\u4ec5\u652f\u6301\u5feb\u901f\u533a\u95f4\u8be2\u95ee\u7684\u4e00\u79cd\u9759\u6001\u7ebf\u6bb5\u6811 \u6784\u9020\u4e00\u68f5\u8fd9\u6837\u7684\u9759\u6001\u7ebf\u6bb5\u6811\u9700\u8981 O(nlogn) O(nlogn) \u6b21\u5408\u5e76\u64cd\u4f5c\uff0c\u4f46\u662f\u6b64\u65f6\u7684\u67e5\u8be2\u590d\u6742\u5ea6\u88ab\u52a0\u901f\u81f3 O(1) O(1) \u6b21\u5408\u5e76\u64cd\u4f5c \u5728\u5904\u7406\u7ebf\u6027\u57fa\u8fd9\u6837\u7279\u6b8a\u7684\u4fe1\u606f\u7684\u65f6\u5019\u751a\u81f3\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u964d\u81f3 O(nlog^2n) O(nlog^2n)","title":"\u62d3\u5c55 - \u732b\u6811"},{"location":"ds/segment/#_10","text":"\u5728\u67e5\u8be2 [l,r] [l,r] \u8fd9\u6bb5\u533a\u95f4\u7684\u4fe1\u606f\u548c\u7684\u65f6\u5019\uff0c\u5c06\u7ebf\u6bb5\u6811\u6811\u4e0a\u4ee3\u8868 [l,l] [l,l] \u7684\u8282\u70b9\u548c\u4ee3\u8868 [r,r] [r,r] \u8fd9\u6bb5\u533a\u95f4\u7684\u8282\u70b9\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684 lca \u6c42\u51fa\u6765, \u8bbe\u8fd9\u4e2a\u8282\u70b9 p \u4ee3\u8868\u7684\u533a\u95f4\u4e3a [L,R] [L,R] \uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u7684\u6027\u8d28: 1. [L,R] [L,R] \u8fd9\u4e2a\u533a\u95f4\u4e00\u5b9a\u5305\u542b [l,r] [l,r] \u663e\u7136\uff0c\u56e0\u4e3a\u5b83\u65e2\u662f l \u7684\u7956\u5148\u53c8\u662f r \u7684\u7956\u5148 2. [l,r] [l,r] \u8fd9\u4e2a\u533a\u95f4\u4e00\u5b9a\u8de8\u8d8a [L,R] \u7684\u4e2d\u70b9 \u7531\u4e8e p \u662f l \u548c r \u7684 lca\uff0c\u8fd9\u610f\u5473\u7740 p \u7684\u5de6\u513f\u5b50\u662f l \u7684\u7956\u5148\u800c\u4e0d\u662f r \u7684\u7956\u5148\uff0cp \u7684\u53f3\u513f\u5b50\u662f r \u7684\u7956\u5148\u800c\u4e0d\u662f l \u7684\u7956\u5148 \u56e0\u6b64 l \u4e00\u5b9a\u5728 [L,MID] [L,MID] \u8fd9\u4e2a\u533a\u95f4\u5185\uff0cr \u4e00\u5b9a\u5728 [MID,R] [MID,R] \u8fd9\u4e2a\u533a\u95f4\u5185 \u6709\u4e86\u8fd9\u4e24\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u964d\u81f3 O(1) O(1) \u4e86","title":"\u539f\u7406"},{"location":"ds/segment/#_11","text":"\u5177\u4f53\u6765\u8bb2\u6211\u4eec\u5efa\u6811\u7684\u65f6\u5019\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u8bbe\u5b83\u4ee3\u8868\u7684\u533a\u95f4\u4e3a (l,r] (l,r] \u4e0d\u540c\u4e8e\u4f20\u7edf\u7ebf\u6bb5\u6811\u5728\u8fd9\u4e2a\u8282\u70b9\u91cc\u53ea\u4fdd\u7559 [l,r] [l,r] \u7684\u548c\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u8282\u70b9\u91cc\u9762\u989d\u5916\u4fdd\u5b58 \uff08l,mid] \uff08l,mid] \u7684\u540e\u7f00\u548c\u6570\u7ec4\u548c (mid,r] (mid,r] \u7684\u524d\u7f00\u548c\u6570\u7ec4 \u8fd9\u6837\u7684\u8bdd\u5efa\u6811\u7684\u590d\u6742\u5ea6\u4e3a T(n)=2T(n/2)+O(n)=O(nlogn) T(n)=2T(n/2)+O(n)=O(nlogn) \u540c\u7406\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u4ece\u539f\u6765\u7684 O(n) O(n) \u53d8\u6210\u4e86 O(nlogn) O(nlogn) \u4e0b\u9762\u662f\u6700\u5173\u952e\u7684\u8be2\u95ee\u4e86~ \u5982\u679c\u6211\u4eec\u8be2\u95ee\u7684\u533a\u95f4\u662f [l,r] [l,r] \u90a3\u4e48\u6211\u4eec\u628a\u4ee3\u8868 [l,l] [l,l] \u7684\u8282\u70b9\u548c\u4ee3\u8868 [r,r] [r,r] \u7684\u8282\u70b9\u7684 lca \u6c42\u51fa\u6765\uff0c\u8bb0\u4e3a p \u6839\u636e\u521a\u624d\u7684\u4e24\u4e2a\u6027\u8d28, l,r \u5728 p \u6240\u5305\u542b\u7684\u533a\u95f4\u4e4b\u5185\u5e76\u4e14\u4e00\u5b9a\u8de8\u8d8a\u4e86 p \u7684\u4e2d\u70b9 \u8fd9\u610f\u5473\u8fd9\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684\u4e8b\u5b9e\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 p \u91cc\u9762\u7684\u524d\u7f00\u548c\u6570\u7ec4\u548c\u540e\u7f00\u548c\u6570\u7ec4\uff0c\u5c06 [l,r] [l,r] \u62c6\u6210 [l,mid]+(mid,r] [l,mid]+(mid,r] \u4ece\u800c\u62fc\u51fa\u6765 [l,r] [l,r] \u8fd9\u4e2a\u533a\u95f4 \u800c\u8fd9\u4e2a\u8fc7\u7a0b\u4ec5\u4ec5\u9700\u8981 O(1) O(1) \u6b21\u5408\u5e76\u64cd\u4f5c\uff01 \u4e0d\u8fc7\u6211\u4eec\u597d\u50cf\u5ffd\u7565\u4e86\u70b9\u4ec0\u4e48\uff1f \u4f3c\u4e4e\u6c42 lca \u7684\u590d\u6742\u5ea6\u4f3c\u4e4e\u8fd8\u4e0d\u662f O(1) O(1) \uff0c\u66b4\u529b\u6c42\u662f O(logn) O(logn) \u7684\uff0c\u500d\u589e\u6cd5\u5219\u662f O(loglogn) O(loglogn) \u7684\uff0c\u8f6c st \u8868\u7684\u4ee3\u4ef7\u53c8\u592a\u5927\u2026\u2026","title":"\u5b9e\u73b0"},{"location":"ds/segment/#_12","text":"\u5177\u4f53\u6765\u5c06\u6211\u4eec\u5c06\u8fd9\u4e2a\u5e8f\u5217\u8865\u6210 2 \u7684\u6574\u6b21\u5e42\uff0c\u7136\u540e\u5efa\u7ebf\u6bb5\u6811 \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u7ebf\u6bb5\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9\u7684 lca \u7f16\u53f7\uff0c\u5c31\u662f\u4e24\u4e2a\u8282\u70b9\u4e8c\u8fdb\u5236\u7f16\u53f7\u7684 lcp lcp \u5b9e\u5728\u662f\u4e0d\u96be\u6c42\uff0cx \u548c y \u7684\u4e8c\u8fdb\u5236\u4e0b lcp=x>>log[x^y] \u6240\u4ee5\u6211\u4eec\u9884\u5904\u7406\u4e00\u4e2a log \u6570\u7ec4\u5373\u53ef\u8f7b\u677e\u5b8c\u6210\u6c42 lca \u7684\u5de5\u4f5c \u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u732b\u6811 \u7531\u4e8e\u5efa\u6811\u7684\u65f6\u5019\u6d89\u53ca\u5230\u6c42\u524d\u7f00\u548c\u548c\u6c42\u540e\u7f00\u548c\uff0c\u6240\u4ee5\u5bf9\u4e8e\u7ebf\u6027\u57fa\u8fd9\u79cd\u867d\u7136\u5408\u5e76\u662f O(log^2n) O(log^2n) \u4f46\u662f\u6c42\u524d\u7f00\u548c\u5374\u662f O(nlogn) O(nlogn) \u7684\u4fe1\u606f\uff0c\u4f7f\u7528\u732b\u6811\u53ef\u4ee5\u5c06\u9759\u6001\u533a\u95f4\u7ebf\u6027\u57fa\u4ece O(nlog^2n+mlog^3n) O(nlog^2n+mlog^3n) \u4f18\u5316\u81f3 O(nlog^2n+mlog^2n) O(nlog^2n+mlog^2n) \u7684\u590d\u6742\u5ea6","title":"\u5806\u5f0f\u5efa\u6811"},{"location":"ds/segment/#_13","text":"immortalCO \u5927\u7237\u7684\u535a\u5ba2","title":"\u53c2\u8003"},{"location":"ds/sparse-table/","text":"\u500d\u589e\u6cd5\uff0c\u901a\u8fc7\u5b57\u9762\u610f\u601d\u6765\u770b\u5c31\u662f\u7ffb\u500d\u3002\u8fd9\u4e2a\u65b9\u6cd5\u5728\u5f88\u591a\u7b97\u6cd5\u4e2d\u5747\u6709\u5e94\u7528\u3002\u5176\u4e2d\u6700\u5e38\u7528\u7684\u5c31\u662f RMQ \u95ee\u9898\u548c\u6c42 LCA \u4e86\u3002 RMQ \u95ee\u9898 \u00b6 \u7b80\u4ecb \u00b6 RMQ \u662f\u82f1\u6587 Range Maximum / Minimum Query \u7684\u7f29\u5199\uff0c\u8868\u793a\u533a\u95f4\u6700\u5927\uff08\u6700\u5c0f\uff09\u503c\u3002 \u89e3\u51b3 RMQ \u95ee\u9898\u7684\u4e3b\u8981\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u5206\u522b\u662f ST \u8868\u548c\u7ebf\u6bb5\u6811\u3002\u672c\u6587\u4e3b\u8981\u8bb2 ST \u8868\u3002 \u5f15\u5165 \u00b6 ST \u8868\u6a21\u677f\u9898 \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a n n \u4e2a\u6570\uff0c\u6709 m m \u4e2a\u8be2\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u4f60\u9700\u8981\u56de\u7b54\u533a\u95f4 [x,y] [x,y] \u4e2d\u7684\u6700\u5927\u503c \u8003\u8651\u66b4\u529b\u505a\u6cd5\u3002\u6bcf\u6b21\u90fd\u5bf9\u533a\u95f4 [x,y] [x,y] \u626b\u63cf\u4e00\u904d\uff0c\u6c42\u51fa\u6700\u5927\u503c \u663e\u7136\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u4f1a\u8d85\u65f6 ST \u8868 \u00b6 ST ST \u8868\u57fa\u4e8e\u500d\u589e\u601d\u60f3\uff0c\u53ef\u4ee5\u505a\u5230 O(n\\log n) O(n\\log n) \u9884\u5904\u7406\uff0c O(1) O(1) \u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee\u3002\u4f46\u662f\u4e0d\u652f\u6301\u4fee\u6539\u64cd\u4f5c\u3002 \u66b4\u529b\u8dd1\u7684\u6162\u7684\u539f\u56e0\u5728\u4e8e\u68c0\u7d22\u4e86\u6bcf\u4e00\u4e2a\u70b9\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5c06\u6548\u7387\u63d0\u9ad8\u5f88\u591a\u3002 \u4ee4 f[i][j] f[i][j] \u8868\u793a [i,i+2^j-1] [i,i+2^j-1] \u7684\u6700\u5927\u503c\u3002 \u663e\u7136\uff0c f[i][0]=a[i] f[i][0]=a[i] \u6839\u636e\u5b9a\u4e49\u5f0f\uff0c\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a f[i][j]=\\max(f[i][j-1],f[i+2^{j-1}][j-1]) f[i][j]=\\max(f[i][j-1],f[i+2^{j-1}][j-1]) \u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a\u5c06\u533a\u95f4 [i,i+2^j-1] [i,i+2^j-1] \u5206\u6210\u76f8\u540c\u7684\u4e24\u90e8\u5206 \u4e2d\u70b9\u5373\u4e3a (i+(i+2^j-1))/2=i+2^{j-1}-1/2 (i+(i+2^j-1))/2=i+2^{j-1}-1/2 \u6240\u4ee5 [i,i+2^j-1] [i,i+2^j-1] \u53ef\u4ee5\u5206\u6210 [i,i+2^{j-1}-1] [i,i+2^{j-1}-1] \u548c [i+2^{j-1}+1,i+2^j-1] [i+2^{j-1}+1,i+2^j-1] \u9884\u5904\u7406\u7ec8\u4e8e\u5b8c\u6210\u4e86\uff01\u63a5\u4e0b\u6765\u5c31\u662f\u67e5\u8be2\u4e86 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee [x,y] [x,y] \uff0c\u6211\u4eec\u628a\u5b83\u5206\u6210\u4e24\u90e8\u5206 f[x][s] f[x][s] f[y-2^s+1][s] f[y-2^s+1][s] \u5176\u4e2d s=\\log_2{(y-x+1)} s=\\log_2{(y-x+1)} \u663e\u7136\uff0c\u8fd9\u4e24\u4e2a\u533a\u95f4\u4f1a\u91cd\u53e0\u3002\u4f46\u662f\uff0c\u91cd\u53e0\u5e76\u4e0d\u4f1a\u5bf9\u533a\u95f4\u6700\u5927\u503c\u4ea7\u751f\u5f71\u54cd\u3002\u540c\u65f6\u8fd9\u4e24\u4e2a\u533a\u95f4\u521a\u597d\u8986\u76d6\u4e86 [x,y] [x,y] \uff0c\u53ef\u4ee5\u4fdd\u8bc1\u7b54\u6848\u7684\u6b63\u786e\u6027\u3002 \u6a21\u677f\u4ee3\u7801 \u00b6 ST \u8868\u6a21\u677f\u9898 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; const int logn = 21 ; const int maxn = 2000001 ; long long a [ maxn ], f [ maxn ][ logn ], Logn [ maxn ]; inline int read () { char c = getchar (); int x = 0 , f = 1 ; while ( c < '0' || c > '9' ) { if ( c == '-' ) f = - 1 ; c = getchar (); } while ( c >= '0' && c <= '9' ) { x = x * 10 + c - '0' ; c = getchar (); } return x * f ; } void pre () { Logn [ 1 ] = 0 ; Logn [ 2 ] = 1 ; for ( int i = 3 ; i <= maxn ; i ++ ) { Logn [ i ] = Logn [ i / 2 ] + 1 ; } } int main () { int n = read (), m = read (); for ( int i = 1 ; i <= m ; i ++ ) f [ i ][ 0 ] = read (); pre (); for ( int j = 1 ; j <= logn ; j ++ ) for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; i ++ ) f [ i ][ j ] = max ( f [ i ][ j - 1 ], f [ i + ( 1 << ( j - 1 ))][ j - 1 ]); for ( int i = 1 ; i <= m ; i ++ ) { int x = read (), y = read (); int s = Logn [ y - x + 1 ]; printf ( \"%d \\n \" , max ( f [ x ][ s ], f [ y - ( 1 << s ) + 1 ][ s ])); } return 0 ; } \u6ce8\u610f\u70b9 \u00b6 \u8f93\u5165\u8f93\u51fa\u6570\u636e\u4e00\u822c\u5f88\u591a\uff0c\u5efa\u8bae\u5f00\u542f\u8f93\u5165\u8f93\u51fa\u4f18\u5316 \u6bcf\u6b21\u7528 std::log \u91cd\u65b0\u8ba1\u7b97 log \u51fd\u6570\u503c\u5e76\u4e0d\u503c\u5f97\uff0c\u5efa\u8bae\u5982\u4e0b\u9884\u5904\u7406 \\left\\{\\begin{aligned} Logn[1] &=0, \\\\ Logn\\left[i\\right] &=Logn[\\frac{i}{2}] + 1. \\end{aligned}\\right. \\left\\{\\begin{aligned} Logn[1] &=0, \\\\ Logn\\left[i\\right] &=Logn[\\frac{i}{2}] + 1. \\end{aligned}\\right. \u603b\u7ed3 \u00b6 ST ST \u8868\u80fd\u8f83\u597d\u7684\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f4e\uff0c\u4ee3\u7801\u91cf\u76f8\u5bf9\u5176\u4ed6\u7b97\u6cd5\u4e0d\u5927\u3002\u4f46\u662f\uff0c ST ST \u8868\u80fd\u7ef4\u62a4\u7684\u4fe1\u606f\u975e\u5e38\u6709\u9650\uff0c\u4e0d\u80fd\u8f83\u597d\u5730\u6269\u5c55\uff0c\u5e76\u4e14\u4e0d\u652f\u6301\u4fee\u6539\u64cd\u4f5c\u3002 \u6811\u4e0a\u500d\u589e\u6c42 LCA \u00b6 LCA \u7b80\u4ecb \u00b6 LCA\uff08Least Common Ancestors\uff09\u8868\u793a\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u5bf9\u4e8e\u4e00\u68f5\u6709\u6839\u6811\uff0c\u8bbe LCA(u,v)=x LCA(u,v)=x \uff0c\u5219 x x \u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 x x \u662f u \u7684\u7956\u5148\u6216 u x x \u662f v \u7684\u7956\u5148\u6216 v x x \u662f\u5728\u6ee1\u8db3\u4e0a\u9762\u4e24\u4e2a\u6761\u4ef6\u4e0b\u6df1\u5ea6\u6700\u5927\u7684 \u663e\u7136\uff0c\u5728\u4e00\u68f5\u6709\u6839\u6811\u5185\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a LCA LCA \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u901a\u5e38\u6709\u4ee5\u4e0b\u65b9\u6cd5 \u6811\u4e0a\u500d\u589e\uff08\u672c\u6587\u4e3b\u8981\u8bb2\u89e3\u6b64\u65b9\u6cd5\uff09 \u8f6c\u5316\u4e3a RMQ \u95ee\u9898 \u6811\u94fe\u5256\u5206 Tarjan \u66b4\u529b\u505a\u6cd5 \u00b6 \u5c06\u4e24\u4e2a\u70b9\u8df3\u5230\u540c\u4e00\u6df1\u5ea6 \u5c06\u6df1\u5ea6\u5927\u7684\u70b9 \u4e00\u6b65\u4e00\u6b65 \u5f80\u4e0a\u8df3\uff0c\u53d1\u73b0\u53e6\u4e00\u4e2a\u70b9\u662f\u4ed6\u7684\u7956\u5148\uff0c\u5219\u53e6\u4e00\u4e2a\u70b9\u5c31\u662f LCA LCA \u4e00\u8d77\u5f80\u4e0a\u8df3 \u5f53\u4e24\u4e2a\u70b9\u6df1\u5ea6\u4e00\u6837\u4f46\u662f\u8fd8\u6ca1\u6709\u627e\u5230 LCA \u7684\u65f6\u5019\uff0c\u5c31\u4e00\u8d77\u5f80 \u4e00\u6b65\u4e00\u6b65 \u4e0a\u8df3\uff0c\u77e5\u9053\u8df3\u5230\u4e86\u540c\u4e00\u4e2a\u70b9\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u70b9\u5373\u4e3a\u5b83\u4eec\u7684 LCA \u6811\u4e0a\u500d\u589e \u00b6 \u66b4\u529b\u6162\u7684\u539f\u56e0\u5728\u4e8e\u8df3\u7684\u65f6\u5019\u662f \u4e00\u6b65\u4e00\u6b65 \u8df3\u7684\uff0c\u5bfc\u81f4\u6548\u7387\u8f83\u4f4e\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5 \u4e00\u6b21\u8df3\u591a\u6b65 \uff0c\u6548\u7387\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u3002 \u9884\u5904\u7406 \u00b6 \u4ee4 f[i][j] f[i][j] \u8868\u793a i i \u7684 2^j 2^j \u8f88\u7956\u5148\uff0c\u53ca\u4ece i i \u5411\u6839\u8282\u70b9\u8d70 2^j 2^j \u6b65\u5230\u8fbe\u7684\u8282\u70b9\u3002 f[i][0] f[i][0] \u5c31\u8868\u793a i i \u7684\u7236\u8282\u70b9\u3002 \u901a\u8fc7 2^{j-1}\\times 2^{j-1}=2^j 2^{j-1}\\times 2^{j-1}=2^j \u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b f[i][j]=f[f[i][j-1]][j-1] f[i][j]=f[f[i][j-1]][j-1] \uff08\u662f\u4e0d\u662f\u548c ST ST \u7684\u8f6c\u79fb\u65b9\u7a0b\u6709\u70b9\u50cf\uff09 \u3002\u81ea\u7136\uff0c\u5f53 i i \u6ca1\u6709 2^j 2^j \u8f88\u7956\u5148\u65f6 f[i][j]=0 f[i][j]=0 \u4e00\u904d DFS \u8ba1\u7b97\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 void dfs ( int u , int father ) { dep [ u ] = dep [ father ] + 1 ; // dep[x] \u8868\u793a x \u7684\u6df1\u5ea6\uff0c\u5728\u67e5\u8be2\u65f6\u4f1a\u7528\u5230 for ( int i = 0 ; i <= 19 ; i ++ ) f [ u ][ i + 1 ] = f [ f [ u ][ i ]][ i ]; // \u9884\u5904\u7406 for ( int i = first [ u ]; i ; i = next [ i ]) // \u94fe\u5f0f\u524d\u5411\u661f { int v = go [ i ]; if ( v == father ) continue ; f [ v ][ 0 ] = u ; // f[v][0] \u8868\u793a v \u7684\u7236\u4eb2 dfs ( v , u ); } } \u67e5\u8be2 \u00b6 \u4f9d\u7136\u91c7\u7528\u66b4\u529b\u7684\u601d\u60f3\u3002\u5148\u5c06\u4e24\u4e2a\u8282\u70b9\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\uff0c\u7136\u540e\u4e00\u8d77\u5f80\u4e0a\u8df3\u3002 \u53ea\u4e0d\u8fc7\u5728\u8df3\u7684\u8fc7\u7a0b\u4e2d\u4ece\u4e00\u6b65\u4e00\u6b65\u8df3\u53d8\u6210\u4e86 \u4e00\u6b21\u8df3\u591a\u6b65 \u3002\u53ef\u4ee5\u5177\u4f53\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65 \u8ba9 x x \u7684\u6df1\u5ea6\u6bd4 y y \u5927\uff08\u6df1\u5ea6\u5728\u9884\u5904\u7406\u65f6\u5df2\u7ecf\u6c42\u51fa\uff09 \u5c06\u4e24\u4e2a\u8282\u70b9\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\u3002\u5728\u6b64\u5904\u6211\u4eec\u4f7f\u7528\u4e8c\u8fdb\u5236\u601d\u60f3\uff0c\u4f9d\u6b21\u5c1d\u8bd5\u5411\u4e0a\u8df3 2^i,2^{i-1}\\cdots 2^1,2^0 2^i,2^{i-1}\\cdots 2^1,2^0 \u3002\u5982\u679c\u53d1\u73b0\u5219 x x \u8df3\u5230\u4e86 y y \u5c31\u8bf4\u660e LCA(x,y)=y LCA(x,y)=y \u4e00\u8d77\u5f80\u4e0a\u8df3\u3002\u4f9d\u7136\u4f7f\u7528\u4e8c\u8fdb\u5236\u601d\u60f3\uff0c\u8ba9\u4ed6\u4eec\u4e00\u8d77\u5f80\u4e0a\u8df3 2^i,2^{i-1}\\cdots 2^1,2^0 2^i,2^{i-1}\\cdots 2^1,2^0 . \u5982\u679c f[x][i]!=f[y][i] f[x][i]!=f[y][i] \uff0c\u8bf4\u660e x x \u548c y y \u8fd8\u672a\u76f8\u9047\u3002\u6700\u540e\uff0c x x \u548c y y \u5fc5\u5b9a\u53ea\u5dee\u4e00\u6b65\u76f8\u9047\u3002\u8fd9\u65f6 x x \u7684\u7236\u4eb2\u5373 f[x][0] f[x][0] \u5c31\u662f\u4ed6\u4eec\u7684 LCA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int lca ( int x , int y ) { if ( dep [ x ] < dep [ y ]) swap ( x , y ); // \u6b65\u9aa4 1 for ( int i = 20 ; i >= 0 ; i -- ) // \u6b65\u9aa4 2 { if ( dep [ f [ x ][ i ]] >= dep [ y ]) x = f [ x ][ i ]; if ( x == y ) return x ; } for ( int i = 20 ; i >= 0 ; i -- ) // \u6b65\u9aa4 3 if ( f [ x ][ i ] != f [ y ][ i ]) { x = f [ x ][ i ]; y = f [ y ][ i ]; } return f [ x ][ 0 ]; } \u603b\u7ed3 \u00b6 \u6811\u4e0a\u500d\u589e\u6cd5\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u9884\u5904\u7406\uff0c\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u91cc\u5b8c\u6210\u67e5\u8be2\uff0c\u662f\u4e00\u4e2a\u8f83\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u4ee3\u7801\u91cf\u4e5f\u4e0d\u5927\uff0c\u4e00\u822c\u7ade\u8d5b\u63a8\u8350\u4f7f\u7528\u3002 \u7ec3\u4e60 \u00b6 RMQ \u6a21\u677f\u9898 LCA \u6a21\u677f\u9898 \u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811 \u8d27\u8f66\u8fd0\u8f93 \u8dd1\u8def","title":"\u500d\u589e"},{"location":"ds/sparse-table/#rmq","text":"","title":"RMQ \u95ee\u9898"},{"location":"ds/sparse-table/#_1","text":"RMQ \u662f\u82f1\u6587 Range Maximum / Minimum Query \u7684\u7f29\u5199\uff0c\u8868\u793a\u533a\u95f4\u6700\u5927\uff08\u6700\u5c0f\uff09\u503c\u3002 \u89e3\u51b3 RMQ \u95ee\u9898\u7684\u4e3b\u8981\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u5206\u522b\u662f ST \u8868\u548c\u7ebf\u6bb5\u6811\u3002\u672c\u6587\u4e3b\u8981\u8bb2 ST \u8868\u3002","title":"\u7b80\u4ecb"},{"location":"ds/sparse-table/#_2","text":"ST \u8868\u6a21\u677f\u9898 \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a n n \u4e2a\u6570\uff0c\u6709 m m \u4e2a\u8be2\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u4f60\u9700\u8981\u56de\u7b54\u533a\u95f4 [x,y] [x,y] \u4e2d\u7684\u6700\u5927\u503c \u8003\u8651\u66b4\u529b\u505a\u6cd5\u3002\u6bcf\u6b21\u90fd\u5bf9\u533a\u95f4 [x,y] [x,y] \u626b\u63cf\u4e00\u904d\uff0c\u6c42\u51fa\u6700\u5927\u503c \u663e\u7136\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u4f1a\u8d85\u65f6","title":"\u5f15\u5165"},{"location":"ds/sparse-table/#st","text":"ST ST \u8868\u57fa\u4e8e\u500d\u589e\u601d\u60f3\uff0c\u53ef\u4ee5\u505a\u5230 O(n\\log n) O(n\\log n) \u9884\u5904\u7406\uff0c O(1) O(1) \u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee\u3002\u4f46\u662f\u4e0d\u652f\u6301\u4fee\u6539\u64cd\u4f5c\u3002 \u66b4\u529b\u8dd1\u7684\u6162\u7684\u539f\u56e0\u5728\u4e8e\u68c0\u7d22\u4e86\u6bcf\u4e00\u4e2a\u70b9\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5c06\u6548\u7387\u63d0\u9ad8\u5f88\u591a\u3002 \u4ee4 f[i][j] f[i][j] \u8868\u793a [i,i+2^j-1] [i,i+2^j-1] \u7684\u6700\u5927\u503c\u3002 \u663e\u7136\uff0c f[i][0]=a[i] f[i][0]=a[i] \u6839\u636e\u5b9a\u4e49\u5f0f\uff0c\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a f[i][j]=\\max(f[i][j-1],f[i+2^{j-1}][j-1]) f[i][j]=\\max(f[i][j-1],f[i+2^{j-1}][j-1]) \u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a\u5c06\u533a\u95f4 [i,i+2^j-1] [i,i+2^j-1] \u5206\u6210\u76f8\u540c\u7684\u4e24\u90e8\u5206 \u4e2d\u70b9\u5373\u4e3a (i+(i+2^j-1))/2=i+2^{j-1}-1/2 (i+(i+2^j-1))/2=i+2^{j-1}-1/2 \u6240\u4ee5 [i,i+2^j-1] [i,i+2^j-1] \u53ef\u4ee5\u5206\u6210 [i,i+2^{j-1}-1] [i,i+2^{j-1}-1] \u548c [i+2^{j-1}+1,i+2^j-1] [i+2^{j-1}+1,i+2^j-1] \u9884\u5904\u7406\u7ec8\u4e8e\u5b8c\u6210\u4e86\uff01\u63a5\u4e0b\u6765\u5c31\u662f\u67e5\u8be2\u4e86 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee [x,y] [x,y] \uff0c\u6211\u4eec\u628a\u5b83\u5206\u6210\u4e24\u90e8\u5206 f[x][s] f[x][s] f[y-2^s+1][s] f[y-2^s+1][s] \u5176\u4e2d s=\\log_2{(y-x+1)} s=\\log_2{(y-x+1)} \u663e\u7136\uff0c\u8fd9\u4e24\u4e2a\u533a\u95f4\u4f1a\u91cd\u53e0\u3002\u4f46\u662f\uff0c\u91cd\u53e0\u5e76\u4e0d\u4f1a\u5bf9\u533a\u95f4\u6700\u5927\u503c\u4ea7\u751f\u5f71\u54cd\u3002\u540c\u65f6\u8fd9\u4e24\u4e2a\u533a\u95f4\u521a\u597d\u8986\u76d6\u4e86 [x,y] [x,y] \uff0c\u53ef\u4ee5\u4fdd\u8bc1\u7b54\u6848\u7684\u6b63\u786e\u6027\u3002","title":"ST \u8868"},{"location":"ds/sparse-table/#_3","text":"ST \u8868\u6a21\u677f\u9898 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; const int logn = 21 ; const int maxn = 2000001 ; long long a [ maxn ], f [ maxn ][ logn ], Logn [ maxn ]; inline int read () { char c = getchar (); int x = 0 , f = 1 ; while ( c < '0' || c > '9' ) { if ( c == '-' ) f = - 1 ; c = getchar (); } while ( c >= '0' && c <= '9' ) { x = x * 10 + c - '0' ; c = getchar (); } return x * f ; } void pre () { Logn [ 1 ] = 0 ; Logn [ 2 ] = 1 ; for ( int i = 3 ; i <= maxn ; i ++ ) { Logn [ i ] = Logn [ i / 2 ] + 1 ; } } int main () { int n = read (), m = read (); for ( int i = 1 ; i <= m ; i ++ ) f [ i ][ 0 ] = read (); pre (); for ( int j = 1 ; j <= logn ; j ++ ) for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; i ++ ) f [ i ][ j ] = max ( f [ i ][ j - 1 ], f [ i + ( 1 << ( j - 1 ))][ j - 1 ]); for ( int i = 1 ; i <= m ; i ++ ) { int x = read (), y = read (); int s = Logn [ y - x + 1 ]; printf ( \"%d \\n \" , max ( f [ x ][ s ], f [ y - ( 1 << s ) + 1 ][ s ])); } return 0 ; }","title":"\u6a21\u677f\u4ee3\u7801"},{"location":"ds/sparse-table/#_4","text":"\u8f93\u5165\u8f93\u51fa\u6570\u636e\u4e00\u822c\u5f88\u591a\uff0c\u5efa\u8bae\u5f00\u542f\u8f93\u5165\u8f93\u51fa\u4f18\u5316 \u6bcf\u6b21\u7528 std::log \u91cd\u65b0\u8ba1\u7b97 log \u51fd\u6570\u503c\u5e76\u4e0d\u503c\u5f97\uff0c\u5efa\u8bae\u5982\u4e0b\u9884\u5904\u7406 \\left\\{\\begin{aligned} Logn[1] &=0, \\\\ Logn\\left[i\\right] &=Logn[\\frac{i}{2}] + 1. \\end{aligned}\\right. \\left\\{\\begin{aligned} Logn[1] &=0, \\\\ Logn\\left[i\\right] &=Logn[\\frac{i}{2}] + 1. \\end{aligned}\\right.","title":"\u6ce8\u610f\u70b9"},{"location":"ds/sparse-table/#_5","text":"ST ST \u8868\u80fd\u8f83\u597d\u7684\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f4e\uff0c\u4ee3\u7801\u91cf\u76f8\u5bf9\u5176\u4ed6\u7b97\u6cd5\u4e0d\u5927\u3002\u4f46\u662f\uff0c ST ST \u8868\u80fd\u7ef4\u62a4\u7684\u4fe1\u606f\u975e\u5e38\u6709\u9650\uff0c\u4e0d\u80fd\u8f83\u597d\u5730\u6269\u5c55\uff0c\u5e76\u4e14\u4e0d\u652f\u6301\u4fee\u6539\u64cd\u4f5c\u3002","title":"\u603b\u7ed3"},{"location":"ds/sparse-table/#lca","text":"","title":"\u6811\u4e0a\u500d\u589e\u6c42 LCA"},{"location":"ds/sparse-table/#lca_1","text":"LCA\uff08Least Common Ancestors\uff09\u8868\u793a\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u5bf9\u4e8e\u4e00\u68f5\u6709\u6839\u6811\uff0c\u8bbe LCA(u,v)=x LCA(u,v)=x \uff0c\u5219 x x \u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 x x \u662f u \u7684\u7956\u5148\u6216 u x x \u662f v \u7684\u7956\u5148\u6216 v x x \u662f\u5728\u6ee1\u8db3\u4e0a\u9762\u4e24\u4e2a\u6761\u4ef6\u4e0b\u6df1\u5ea6\u6700\u5927\u7684 \u663e\u7136\uff0c\u5728\u4e00\u68f5\u6709\u6839\u6811\u5185\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a LCA LCA \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u901a\u5e38\u6709\u4ee5\u4e0b\u65b9\u6cd5 \u6811\u4e0a\u500d\u589e\uff08\u672c\u6587\u4e3b\u8981\u8bb2\u89e3\u6b64\u65b9\u6cd5\uff09 \u8f6c\u5316\u4e3a RMQ \u95ee\u9898 \u6811\u94fe\u5256\u5206 Tarjan","title":"LCA \u7b80\u4ecb"},{"location":"ds/sparse-table/#_6","text":"\u5c06\u4e24\u4e2a\u70b9\u8df3\u5230\u540c\u4e00\u6df1\u5ea6 \u5c06\u6df1\u5ea6\u5927\u7684\u70b9 \u4e00\u6b65\u4e00\u6b65 \u5f80\u4e0a\u8df3\uff0c\u53d1\u73b0\u53e6\u4e00\u4e2a\u70b9\u662f\u4ed6\u7684\u7956\u5148\uff0c\u5219\u53e6\u4e00\u4e2a\u70b9\u5c31\u662f LCA LCA \u4e00\u8d77\u5f80\u4e0a\u8df3 \u5f53\u4e24\u4e2a\u70b9\u6df1\u5ea6\u4e00\u6837\u4f46\u662f\u8fd8\u6ca1\u6709\u627e\u5230 LCA \u7684\u65f6\u5019\uff0c\u5c31\u4e00\u8d77\u5f80 \u4e00\u6b65\u4e00\u6b65 \u4e0a\u8df3\uff0c\u77e5\u9053\u8df3\u5230\u4e86\u540c\u4e00\u4e2a\u70b9\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u70b9\u5373\u4e3a\u5b83\u4eec\u7684 LCA","title":"\u66b4\u529b\u505a\u6cd5"},{"location":"ds/sparse-table/#_7","text":"\u66b4\u529b\u6162\u7684\u539f\u56e0\u5728\u4e8e\u8df3\u7684\u65f6\u5019\u662f \u4e00\u6b65\u4e00\u6b65 \u8df3\u7684\uff0c\u5bfc\u81f4\u6548\u7387\u8f83\u4f4e\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5 \u4e00\u6b21\u8df3\u591a\u6b65 \uff0c\u6548\u7387\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u3002","title":"\u6811\u4e0a\u500d\u589e"},{"location":"ds/sparse-table/#_8","text":"\u4ee4 f[i][j] f[i][j] \u8868\u793a i i \u7684 2^j 2^j \u8f88\u7956\u5148\uff0c\u53ca\u4ece i i \u5411\u6839\u8282\u70b9\u8d70 2^j 2^j \u6b65\u5230\u8fbe\u7684\u8282\u70b9\u3002 f[i][0] f[i][0] \u5c31\u8868\u793a i i \u7684\u7236\u8282\u70b9\u3002 \u901a\u8fc7 2^{j-1}\\times 2^{j-1}=2^j 2^{j-1}\\times 2^{j-1}=2^j \u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b f[i][j]=f[f[i][j-1]][j-1] f[i][j]=f[f[i][j-1]][j-1] \uff08\u662f\u4e0d\u662f\u548c ST ST \u7684\u8f6c\u79fb\u65b9\u7a0b\u6709\u70b9\u50cf\uff09 \u3002\u81ea\u7136\uff0c\u5f53 i i \u6ca1\u6709 2^j 2^j \u8f88\u7956\u5148\u65f6 f[i][j]=0 f[i][j]=0 \u4e00\u904d DFS \u8ba1\u7b97\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 void dfs ( int u , int father ) { dep [ u ] = dep [ father ] + 1 ; // dep[x] \u8868\u793a x \u7684\u6df1\u5ea6\uff0c\u5728\u67e5\u8be2\u65f6\u4f1a\u7528\u5230 for ( int i = 0 ; i <= 19 ; i ++ ) f [ u ][ i + 1 ] = f [ f [ u ][ i ]][ i ]; // \u9884\u5904\u7406 for ( int i = first [ u ]; i ; i = next [ i ]) // \u94fe\u5f0f\u524d\u5411\u661f { int v = go [ i ]; if ( v == father ) continue ; f [ v ][ 0 ] = u ; // f[v][0] \u8868\u793a v \u7684\u7236\u4eb2 dfs ( v , u ); } }","title":"\u9884\u5904\u7406"},{"location":"ds/sparse-table/#_9","text":"\u4f9d\u7136\u91c7\u7528\u66b4\u529b\u7684\u601d\u60f3\u3002\u5148\u5c06\u4e24\u4e2a\u8282\u70b9\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\uff0c\u7136\u540e\u4e00\u8d77\u5f80\u4e0a\u8df3\u3002 \u53ea\u4e0d\u8fc7\u5728\u8df3\u7684\u8fc7\u7a0b\u4e2d\u4ece\u4e00\u6b65\u4e00\u6b65\u8df3\u53d8\u6210\u4e86 \u4e00\u6b21\u8df3\u591a\u6b65 \u3002\u53ef\u4ee5\u5177\u4f53\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65 \u8ba9 x x \u7684\u6df1\u5ea6\u6bd4 y y \u5927\uff08\u6df1\u5ea6\u5728\u9884\u5904\u7406\u65f6\u5df2\u7ecf\u6c42\u51fa\uff09 \u5c06\u4e24\u4e2a\u8282\u70b9\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\u3002\u5728\u6b64\u5904\u6211\u4eec\u4f7f\u7528\u4e8c\u8fdb\u5236\u601d\u60f3\uff0c\u4f9d\u6b21\u5c1d\u8bd5\u5411\u4e0a\u8df3 2^i,2^{i-1}\\cdots 2^1,2^0 2^i,2^{i-1}\\cdots 2^1,2^0 \u3002\u5982\u679c\u53d1\u73b0\u5219 x x \u8df3\u5230\u4e86 y y \u5c31\u8bf4\u660e LCA(x,y)=y LCA(x,y)=y \u4e00\u8d77\u5f80\u4e0a\u8df3\u3002\u4f9d\u7136\u4f7f\u7528\u4e8c\u8fdb\u5236\u601d\u60f3\uff0c\u8ba9\u4ed6\u4eec\u4e00\u8d77\u5f80\u4e0a\u8df3 2^i,2^{i-1}\\cdots 2^1,2^0 2^i,2^{i-1}\\cdots 2^1,2^0 . \u5982\u679c f[x][i]!=f[y][i] f[x][i]!=f[y][i] \uff0c\u8bf4\u660e x x \u548c y y \u8fd8\u672a\u76f8\u9047\u3002\u6700\u540e\uff0c x x \u548c y y \u5fc5\u5b9a\u53ea\u5dee\u4e00\u6b65\u76f8\u9047\u3002\u8fd9\u65f6 x x \u7684\u7236\u4eb2\u5373 f[x][0] f[x][0] \u5c31\u662f\u4ed6\u4eec\u7684 LCA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int lca ( int x , int y ) { if ( dep [ x ] < dep [ y ]) swap ( x , y ); // \u6b65\u9aa4 1 for ( int i = 20 ; i >= 0 ; i -- ) // \u6b65\u9aa4 2 { if ( dep [ f [ x ][ i ]] >= dep [ y ]) x = f [ x ][ i ]; if ( x == y ) return x ; } for ( int i = 20 ; i >= 0 ; i -- ) // \u6b65\u9aa4 3 if ( f [ x ][ i ] != f [ y ][ i ]) { x = f [ x ][ i ]; y = f [ y ][ i ]; } return f [ x ][ 0 ]; }","title":"\u67e5\u8be2"},{"location":"ds/sparse-table/#_10","text":"\u6811\u4e0a\u500d\u589e\u6cd5\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u9884\u5904\u7406\uff0c\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u91cc\u5b8c\u6210\u67e5\u8be2\uff0c\u662f\u4e00\u4e2a\u8f83\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u4ee3\u7801\u91cf\u4e5f\u4e0d\u5927\uff0c\u4e00\u822c\u7ade\u8d5b\u63a8\u8350\u4f7f\u7528\u3002","title":"\u603b\u7ed3"},{"location":"ds/sparse-table/#_11","text":"RMQ \u6a21\u677f\u9898 LCA \u6a21\u677f\u9898 \u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811 \u8d27\u8f66\u8fd0\u8f93 \u8dd1\u8def","title":"\u7ec3\u4e60"},{"location":"ds/splay/","text":"\u5982\u4f55\u7528 \\text{Splay} \\text{Splay} \u7ef4\u62a4\u4e8c\u53c9\u67e5\u627e\u6811\u3002 \u7b80\u4ecb \u00b6 \\text{Splay} \\text{Splay} \u662f\u4e00\u79cd\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5b83\u901a\u8fc7\u4e0d\u65ad\u5c06\u67d0\u4e2a\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u4f7f\u5f97\u6574\u68f5\u6811\u4ecd\u7136\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u5e76\u4e14\u4fdd\u6301\u5e73\u8861\u800c\u4e0d\u81f3\u4e8e\u9000\u5316\u4e3a\u94fe\uff0c\u5b83\u7531 Daniel Sleator \u548c Robert Tarjan \u53d1\u660e\u3002 \u7ed3\u6784 \u00b6 \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28 \u00b6 \u9996\u5148\u80af\u5b9a\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff01 \u80fd\u591f\u5728\u8fd9\u68f5\u6811\u4e0a\u67e5\u627e\u67d0\u4e2a\u503c\u7684\u6027\u8d28\uff1a\u5de6\u513f\u5b50\u7684\u503c < < \u6839\u8282\u70b9\u7684\u503c < < \u53f3\u513f\u5b50\u7684\u503c\u3002 \u8282\u70b9\u7ef4\u62a4\u4fe1\u606f \u00b6 rt rt tot tot fa[i] fa[i] ch[i][0/1] ch[i][0/1] val[i] val[i] cnt[i] cnt[i] sz[i] sz[i] \u6839\u8282\u70b9\u7f16\u53f7 \u8282\u70b9\u4e2a\u6570 \u7236\u4eb2 \u5de6\u53f3\u513f\u5b50\u7f16\u53f7 \u8282\u70b9\u6743\u503c \u6743\u503c\u51fa\u73b0\u6b21\u6570 \u5b50\u6811\u5927\u5c0f \u64cd\u4f5c \u00b6 \u57fa\u672c\u64cd\u4f5c \u00b6 \\text{maintain}(x) \\text{maintain}(x) \uff1a\u5728\u6539\u53d8\u8282\u70b9\u4f4d\u7f6e\u524d\uff0c\u5c06\u8282\u70b9 x x \u7684 \\text{size} \\text{size} \u66f4\u65b0\u3002 \\text{get}(x) \\text{get}(x) \uff1a\u5224\u65ad\u8282\u70b9 x x \u662f\u7236\u4eb2\u8282\u70b9\u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\u3002 \\text{clear}(x) \\text{clear}(x) \uff1a\u9500\u6bc1\u8282\u70b9 x x \u3002 1 2 3 void maintain ( int x ) { sz [ x ] = sz [ ch [ x ][ 0 ]] + sz [ ch [ x ][ 1 ]] + cnt [ x ]; } bool get ( int x ) { return x == ch [ fa [ x ]][ 1 ]; } void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = val [ x ] = sz [ x ] = cnt [ x ] = 0 ; } \u65cb\u8f6c\u64cd\u4f5c \u00b6 \u4e3a\u4e86\u4f7f \\text{Splay} \\text{Splay} \u4fdd\u6301\u5e73\u8861\u800c\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u65cb\u8f6c\u7684\u672c\u8d28\u662f\u5c06\u67d0\u4e2a\u8282\u70b9\u4e0a\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u65cb\u8f6c\u9700\u8981\u4fdd\u8bc1 \uff1a \u6574\u68f5 \\text{Splay} \\text{Splay} \u7684\u4e2d\u5e8f\u904d\u5386\u4e0d\u53d8\uff08\u4e0d\u80fd\u7834\u574f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff09\u3002 \u53d7\u5f71\u54cd\u7684\u8282\u70b9\u7ef4\u62a4\u7684\u4fe1\u606f\u4f9d\u7136\u6b63\u786e\u6709\u6548\u3002 \\text{root} \\text{root} \u5fc5\u987b\u6307\u5411\u65cb\u8f6c\u540e\u7684\u6839\u8282\u70b9\u3002 \u5728 \\text{Splay} \\text{Splay} \u4e2d\u65cb\u8f6c\u5206\u4e3a\u4e24\u79cd\uff1a\u5de6\u65cb\u548c\u53f3\u65cb\u3002 \u5177\u4f53\u5206\u6790\u65cb\u8f6c\u6b65\u9aa4 \uff08\u5047\u8bbe\u9700\u8981\u65cb\u8f6c\u7684\u8282\u70b9\u4e3a x x \uff0c\u5176\u7236\u4eb2\u4e3a y y \uff0c\u4ee5\u53f3\u65cb\u4e3a\u4f8b\uff09 \u5c06 y y \u7684\u5de6\u513f\u5b50\u6307\u5411 x x \u7684\u53f3\u513f\u5b50\uff0c\u4e14 x x \u7684\u53f3\u513f\u5b50\u7684\u7236\u4eb2\u6307\u5411 y y \u3002 ch[y][0]=ch[x][1]; fa[ch[x][1]]=y; \u5c06 x x \u7684\u53f3\u513f\u5b50\u6307\u5411 y y \uff0c\u4e14 y y \u7684\u7236\u4eb2\u6307\u5411 x x \u3002 ch[x][chk^1]=y; fa[y]=x; \u5982\u679c\u539f\u6765\u7684 y y \u8fd8\u6709\u7236\u4eb2 z z \uff0c\u90a3\u4e48\u628a z z \u7684\u67d0\u4e2a\u513f\u5b50\uff08\u539f\u6765 y y \u6240\u5728\u7684\u513f\u5b50\u4f4d\u7f6e\uff09\u6307\u5411 x x \uff0c\u4e14 x x \u7684\u7236\u4eb2\u6307\u5411 z z \u3002 fa[x]=z; if(z) ch[z][y==ch[z][1]]=x; 1 2 3 4 5 6 7 8 9 10 11 void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chk = get ( x ); ch [ y ][ chk ] = ch [ x ][ chk ^ 1 ]; fa [ ch [ x ][ chk ^ 1 ]] = y ; ch [ x ][ chk ^ 1 ] = y ; fa [ y ] = x ; fa [ x ] = z ; if ( z ) ch [ z ][ y == ch [ z ][ 1 ]] = x ; maintain ( x ); maintain ( y ); } Splay \u64cd\u4f5c \u00b6 \\text{Splay} \\text{Splay} \u89c4\u5b9a\uff1a\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u540e\u90fd\u8981\u5f3a\u5236\u5c06\u5176\u65cb\u8f6c\u5230\u6839\u8282\u70b9\u3002\u6b64\u65f6\u65cb\u8f6c\u64cd\u4f5c\u5177\u4f53\u5206\u4e3a 6 6 \u79cd\u60c5\u51b5\u8ba8\u8bba\uff08\u5176\u4e2d x x \u4e3a\u9700\u8981\u65cb\u8f6c\u5230\u6839\u7684\u8282\u70b9\uff09 \u5982\u679c x x \u7684\u7236\u4eb2\u662f\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u5c06 x x \u5de6\u65cb\u6216\u53f3\u65cb\uff08\u56fe 1,2 1,2 \uff09\u3002 \u5982\u679c x x \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 x x \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u76f8\u540c\uff0c\u9996\u5148\u5c06\u5176\u7236\u4eb2\u5de6\u65cb\u6216\u53f3\u65cb\uff0c\u7136\u540e\u5c06 x x \u53f3\u65cb\u6216\u5de6\u65cb\uff08\u56fe 3,4 3,4 \uff09\u3002 \u5982\u679c x x \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 x x \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u4e0d\u540c\uff0c\u5c06 x x \u5de6\u65cb\u518d\u53f3\u65cb\u3001\u6216\u8005\u53f3\u65cb\u518d\u5de6\u65cb\uff08\u56fe 5,6 5,6 \uff09\u3002 \u5206\u6790\u8d77\u6765\u4e00\u5927\u4e32\uff0c\u5176\u5b9e\u4ee3\u7801\u4e00\u5c0f\u6bb5\u3002\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u6a21\u62df\u4e00\u4e0b 6 6 \u79cd\u65cb\u8f6c\u60c5\u51b5\uff0c\u5c31\u80fd\u7406\u89e3 \\text{Splay} \\text{Splay} \u7684\u57fa\u672c\u601d\u60f3\u4e86\u3002 1 2 3 4 5 void splay ( int x ) { for ( int f = fa [ x ]; f = fa [ x ], f ; rotate ( x )) if ( fa [ f ]) rotate ( get ( x ) == get ( f ) ? f : x ); rt = x ; } \u63d2\u5165\u64cd\u4f5c \u00b6 \u63d2\u5165\u64cd\u4f5c\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u8fc7\u7a0b\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff08\u63d2\u5165\u7684\u503c\u4e3a k k \uff09\uff1a \u5982\u679c\u6811\u7a7a\u4e86\u5219\u76f4\u63a5\u63d2\u5165\u6839\u5e76\u9000\u51fa\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u7b49\u4e8e k k \u5219\u589e\u52a0\u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f\u5e76\u66f4\u65b0\u8282\u70b9\u548c\u7236\u4eb2\u7684\u4fe1\u606f\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u8fdb\u884c \\text{Splay} \\text{Splay} \u64cd\u4f5c\u3002 \u5426\u5219\u6309\u7167\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\u5411\u4e0b\u627e\uff0c\u627e\u5230\u7a7a\u8282\u70b9\u5c31\u63d2\u5165\u5373\u53ef\uff08\u5f53\u7136\u522b\u5fd8\u4e86 \\text{Splay} \\text{Splay} \u64cd\u4f5c\u54e6\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void ins ( int k ) { if ( ! rt ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; rt = tot ; maintain ( rt ); return ; } int cnr = rt , f = 0 ; while ( 1 ) { if ( val [ cnr ] == k ) { cnt [ cnr ] ++ ; maintain ( cnr ); maintain ( f ); splay ( cnr ); break ; } f = cnr ; cnr = ch [ cnr ][ val [ cnr ] < k ]; if ( ! cnr ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; fa [ tot ] = f ; ch [ f ][ val [ f ] < k ] = tot ; maintain ( tot ); maintain ( f ); splay ( tot ); break ; } } } \u67e5\u8be2 x \u7684\u6392\u540d \u00b6 \u6839\u636e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5b9a\u4e49\u548c\u6027\u8d28\uff0c\u663e\u7136\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u67e5\u8be2 x x \u7684\u6392\u540d\uff1a \u5982\u679c x x \u6bd4\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u5c0f\uff0c\u5411\u5176\u5de6\u5b50\u6811\u67e5\u627e\u3002 \u5982\u679c x x \u6bd4\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u5927\uff0c\u5c06\u7b54\u6848\u52a0\u4e0a\u5de6\u5b50\u6811\uff08 size size \uff09\u548c\u5f53\u524d\u8282\u70b9\uff08 cnt cnt \uff09\u7684\u5927\u5c0f\uff0c\u5411\u5176\u53f3\u5b50\u6811\u67e5\u627e\u3002 \u5982\u679c x x \u4e0e\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u76f8\u540c\uff0c\u5c06\u7b54\u6848\u52a0 1 1 \u5e76\u8fd4\u56de\u3002 \u6ce8\u610f\u6700\u540e\u9700\u8981\u8fdb\u884c \\text{Splay} \\text{Splay} \u64cd\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int rk ( int k ) { int res = 0 , cnr = rt ; while ( 1 ) { if ( k < val [ cnr ]) { cnr = ch [ cnr ][ 0 ]; } else { res += sz [ ch [ cnr ][ 0 ]]; if ( k == val [ cnr ]) { splay ( cnr ); return res + 1 ; } res += cnt [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } } \u67e5\u8be2\u6392\u540d x \u7684\u6570 \u00b6 \u8bbe k k \u4e3a\u5269\u4f59\u6392\u540d\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u5982\u679c\u5de6\u5b50\u6811\u975e\u7a7a\u4e14\u5269\u4f59\u6392\u540d k k \u4e0d\u5927\u4e8e\u5de6\u5b50\u6811\u7684\u5927\u5c0f size size \uff0c\u90a3\u4e48\u5411\u5de6\u5b50\u6811\u67e5\u627e\u3002 \u5426\u5219\u5c06 k k \u51cf\u53bb\u5de6\u5b50\u6811\u7684\u548c\u6839\u7684\u5927\u5c0f\u3002\u5982\u679c\u6b64\u65f6 k k \u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e 0 0 \uff0c\u5219\u8fd4\u56de\u6839\u8282\u70b9\u7684\u6743\u503c\uff0c\u5426\u5219\u7ee7\u7eed\u5411\u53f3\u5b50\u6811\u67e5\u627e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 int kth ( int k ) { int cnr = rt ; while ( 1 ) { if ( ch [ cnr ][ 0 ] && k <= sz [ ch [ cnr ][ 0 ]]) { cnr = ch [ cnr ][ 0 ]; } else { k -= cnt [ cnr ] + sz [ ch [ cnr ][ 0 ]]; if ( k <= 0 ) return val [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } } \u67e5\u8be2\u524d\u9a71 \u00b6 \u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e x x \u7684\u6700\u5927\u7684\u6570\uff0c\u90a3\u4e48\u67e5\u8be2\u524d\u9a71\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\u5c06 x x \u63d2\u5165\uff08\u6b64\u65f6 x x \u5df2\u7ecf\u5728\u6839\u7684\u4f4d\u7f6e\u4e86\uff09\uff0c\u524d\u9a71\u5373\u4e3a x x \u7684\u5de6\u5b50\u6811\u4e2d\u6700\u53f3\u8fb9\u7684\u8282\u70b9\uff0c\u6700\u540e\u5c06 x x \u5220\u9664\u5373\u53ef\u3002 1 2 3 4 5 int pre () { int cnr = ch [ rt ][ 0 ]; while ( ch [ cnr ][ 1 ]) cnr = ch [ cnr ][ 1 ]; return cnr ; } \u67e5\u8be2\u540e\u7ee7 \u00b6 \u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e x x \u7684\u6700\u5c0f\u7684\u6570\uff0c\u67e5\u8be2\u65b9\u6cd5\u548c\u524d\u9a71\u7c7b\u4f3c\uff1a x x \u7684\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u3002 1 2 3 4 5 int nxt () { int cnr = ch [ rt ][ 1 ]; while ( ch [ cnr ][ 0 ]) cnr = ch [ cnr ][ 0 ]; return cnr ; } \u5220\u9664\u64cd\u4f5c \u00b6 \u5220\u9664\u64cd\u4f5c\u4e5f\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u9996\u5148\u5c06 x x \u65cb\u8f6c\u5230\u6839\u7684\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\u5206\u4e3a\u591a\u4e2a\u60c5\u51b5\u8003\u8651\uff1a \u5982\u679c\u6709\u4e0d\u6b62\u4e00\u4e2a x x \uff0c\u90a3\u4e48\u5c06 cnt[x] cnt[x] \u51cf 1 1 \u5e76\u9000\u51fa\u3002 \u5982\u679c x x \u6ca1\u6709\u513f\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u76f4\u63a5\u5c06\u5f53\u524d\u8282\u70b9 \\text{clear} \\text{clear} \u5e76\u9000\u51fa\u3002 \u5982\u679c x x \u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u5148\u5c06\u5f53\u524d\u8282\u70b9 \\text{clear} \\text{clear} \u518d\u628a\u552f\u4e00\u7684\u513f\u5b50\u4f5c\u4e3a\u6839\u8282\u70b9\u3002 \u5426\u5219\u5c06 x x \u7684\u524d\u9a71\u65cb\u8f6c\u5230\u6839\u5e76\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u5c06 x x \u7684\u53f3\u5b50\u6811\u63a5\u5230\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u6700\u540e\u8981\u5c06\u6839\u7684\u4fe1\u606f\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 void del ( int k ) { rk ( k ); if ( cnt [ rt ] > 1 ) { cnt [ rt ] -- ; maintain ( rt ); return ; } if ( ! ch [ rt ][ 0 ] && ! ch [ rt ][ 1 ]) { clear ( rt ); rt = 0 ; return ; } if ( ! ch [ rt ][ 0 ]) { int cnr = rt ; rt = ch [ rt ][ 1 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } if ( ! ch [ rt ][ 1 ]) { int cnr = rt ; rt = ch [ rt ][ 0 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } int x = pre (), cnr = rt ; splay ( x ); fa [ ch [ cnr ][ 1 ]] = x ; ch [ x ][ 1 ] = ch [ cnr ][ 1 ]; clear ( cnr ); maintain ( rt ); } \u5b8c\u6574\u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 #include <cstdio> const int N = 100005 ; int rt , tot , fa [ N ], ch [ N ][ 2 ], val [ N ], cnt [ N ], sz [ N ]; struct Splay { void maintain ( int x ) { sz [ x ] = sz [ ch [ x ][ 0 ]] + sz [ ch [ x ][ 1 ]] + cnt [ x ]; } bool get ( int x ) { return x == ch [ fa [ x ]][ 1 ]; } void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = val [ x ] = sz [ x ] = cnt [ x ] = 0 ; } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chk = get ( x ); ch [ y ][ chk ] = ch [ x ][ chk ^ 1 ]; fa [ ch [ x ][ chk ^ 1 ]] = y ; ch [ x ][ chk ^ 1 ] = y ; fa [ y ] = x ; fa [ x ] = z ; if ( z ) ch [ z ][ y == ch [ z ][ 1 ]] = x ; maintain ( x ); maintain ( y ); } void splay ( int x ) { for ( int f = fa [ x ]; f = fa [ x ], f ; rotate ( x )) if ( fa [ f ]) rotate ( get ( x ) == get ( f ) ? f : x ); rt = x ; } void ins ( int k ) { if ( ! rt ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; rt = tot ; maintain ( rt ); return ; } int cnr = rt , f = 0 ; while ( 1 ) { if ( val [ cnr ] == k ) { cnt [ cnr ] ++ ; maintain ( cnr ); maintain ( f ); splay ( cnr ); break ; } f = cnr ; cnr = ch [ cnr ][ val [ cnr ] < k ]; if ( ! cnr ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; fa [ tot ] = f ; ch [ f ][ val [ f ] < k ] = tot ; maintain ( tot ); maintain ( f ); splay ( tot ); break ; } } } int rk ( int k ) { int res = 0 , cnr = rt ; while ( 1 ) { if ( k < val [ cnr ]) { cnr = ch [ cnr ][ 0 ]; } else { res += sz [ ch [ cnr ][ 0 ]]; if ( k == val [ cnr ]) { splay ( cnr ); return res + 1 ; } res += cnt [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } } int kth ( int k ) { int cnr = rt ; while ( 1 ) { if ( ch [ cnr ][ 0 ] && k <= sz [ ch [ cnr ][ 0 ]]) { cnr = ch [ cnr ][ 0 ]; } else { k -= cnt [ cnr ] + sz [ ch [ cnr ][ 0 ]]; if ( k <= 0 ) return val [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } } int pre () { int cnr = ch [ rt ][ 0 ]; while ( ch [ cnr ][ 1 ]) cnr = ch [ cnr ][ 1 ]; return cnr ; } int nxt () { int cnr = ch [ rt ][ 1 ]; while ( ch [ cnr ][ 0 ]) cnr = ch [ cnr ][ 0 ]; return cnr ; } void del ( int k ) { rk ( k ); if ( cnt [ rt ] > 1 ) { cnt [ rt ] -- ; maintain ( rt ); return ; } if ( ! ch [ rt ][ 0 ] && ! ch [ rt ][ 1 ]) { clear ( rt ); rt = 0 ; return ; } if ( ! ch [ rt ][ 0 ]) { int cnr = rt ; rt = ch [ rt ][ 1 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } if ( ! ch [ rt ][ 1 ]) { int cnr = rt ; rt = ch [ rt ][ 0 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } int x = pre (), cnr = rt ; splay ( x ); fa [ ch [ cnr ][ 1 ]] = x ; ch [ x ][ 1 ] = ch [ cnr ][ 1 ]; clear ( cnr ); maintain ( rt ); } } tree ; int main () { int n , opt , x ; for ( scanf ( \"%d\" , & n ); n ; -- n ) { scanf ( \"%d%d\" , & opt , & x ); if ( opt == 1 ) tree . ins ( x ); else if ( opt == 2 ) tree . del ( x ); else if ( opt == 3 ) printf ( \"%d \\n \" , tree . rk ( x )); else if ( opt == 4 ) printf ( \"%d \\n \" , tree . kth ( x )); else if ( opt == 5 ) tree . ins ( x ), printf ( \"%d \\n \" , val [ tree . pre ()]), tree . del ( x ); else tree . ins ( x ), printf ( \"%d \\n \" , val [ tree . nxt ()]), tree . del ( x ); } return 0 ; } \u4f8b\u9898 \u00b6 \u4ee5\u4e0b\u9898\u76ee\u90fd\u662f\u88f8\u7684 \\text{Splay} \\text{Splay} \u7ef4\u62a4\u4e8c\u53c9\u67e5\u627e\u6811\u3002 \uff08\u76f4\u63a5\u5957\u677f\u5b50\u5373\u53ef\uff09 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811 [HNOI2002] \u8425\u4e1a\u989d\u7edf\u8ba1 [HNOI2004] \u5ba0\u7269\u6536\u517b\u6240 \u7ec3\u4e60\u9898 \u00b6 bzoj 1552 [Cerc2007] robotic sort \uff08\u6743\u9650\u9898\uff09 luogu P3380 \u3010\u6a21\u677f\u3011\u4e8c\u903c\u5e73\u8861\u6811\uff08\u6811\u5957\u6811\uff09 bzoj 2827 \u5343\u5c71\u9e1f\u98de\u7edd bzoj 4923 [Lydsy1706 \u6708\u8d5b]K \u5c0f\u503c\u67e5\u8be2 \u672c\u6587\u90e8\u5206\u5185\u5bb9\u5f15\u7528\u4e8e algocode \u7b97\u6cd5\u535a\u5ba2 \uff0c\u7279\u522b\u9e23\u8c22\uff01","title":"Splay"},{"location":"ds/splay/#_1","text":"\\text{Splay} \\text{Splay} \u662f\u4e00\u79cd\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5b83\u901a\u8fc7\u4e0d\u65ad\u5c06\u67d0\u4e2a\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u4f7f\u5f97\u6574\u68f5\u6811\u4ecd\u7136\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u5e76\u4e14\u4fdd\u6301\u5e73\u8861\u800c\u4e0d\u81f3\u4e8e\u9000\u5316\u4e3a\u94fe\uff0c\u5b83\u7531 Daniel Sleator \u548c Robert Tarjan \u53d1\u660e\u3002","title":"\u7b80\u4ecb"},{"location":"ds/splay/#_2","text":"","title":"\u7ed3\u6784"},{"location":"ds/splay/#_3","text":"\u9996\u5148\u80af\u5b9a\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff01 \u80fd\u591f\u5728\u8fd9\u68f5\u6811\u4e0a\u67e5\u627e\u67d0\u4e2a\u503c\u7684\u6027\u8d28\uff1a\u5de6\u513f\u5b50\u7684\u503c < < \u6839\u8282\u70b9\u7684\u503c < < \u53f3\u513f\u5b50\u7684\u503c\u3002","title":"\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28"},{"location":"ds/splay/#_4","text":"rt rt tot tot fa[i] fa[i] ch[i][0/1] ch[i][0/1] val[i] val[i] cnt[i] cnt[i] sz[i] sz[i] \u6839\u8282\u70b9\u7f16\u53f7 \u8282\u70b9\u4e2a\u6570 \u7236\u4eb2 \u5de6\u53f3\u513f\u5b50\u7f16\u53f7 \u8282\u70b9\u6743\u503c \u6743\u503c\u51fa\u73b0\u6b21\u6570 \u5b50\u6811\u5927\u5c0f","title":"\u8282\u70b9\u7ef4\u62a4\u4fe1\u606f"},{"location":"ds/splay/#_5","text":"","title":"\u64cd\u4f5c"},{"location":"ds/splay/#_6","text":"\\text{maintain}(x) \\text{maintain}(x) \uff1a\u5728\u6539\u53d8\u8282\u70b9\u4f4d\u7f6e\u524d\uff0c\u5c06\u8282\u70b9 x x \u7684 \\text{size} \\text{size} \u66f4\u65b0\u3002 \\text{get}(x) \\text{get}(x) \uff1a\u5224\u65ad\u8282\u70b9 x x \u662f\u7236\u4eb2\u8282\u70b9\u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\u3002 \\text{clear}(x) \\text{clear}(x) \uff1a\u9500\u6bc1\u8282\u70b9 x x \u3002 1 2 3 void maintain ( int x ) { sz [ x ] = sz [ ch [ x ][ 0 ]] + sz [ ch [ x ][ 1 ]] + cnt [ x ]; } bool get ( int x ) { return x == ch [ fa [ x ]][ 1 ]; } void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = val [ x ] = sz [ x ] = cnt [ x ] = 0 ; }","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"ds/splay/#_7","text":"\u4e3a\u4e86\u4f7f \\text{Splay} \\text{Splay} \u4fdd\u6301\u5e73\u8861\u800c\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u65cb\u8f6c\u7684\u672c\u8d28\u662f\u5c06\u67d0\u4e2a\u8282\u70b9\u4e0a\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u65cb\u8f6c\u9700\u8981\u4fdd\u8bc1 \uff1a \u6574\u68f5 \\text{Splay} \\text{Splay} \u7684\u4e2d\u5e8f\u904d\u5386\u4e0d\u53d8\uff08\u4e0d\u80fd\u7834\u574f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff09\u3002 \u53d7\u5f71\u54cd\u7684\u8282\u70b9\u7ef4\u62a4\u7684\u4fe1\u606f\u4f9d\u7136\u6b63\u786e\u6709\u6548\u3002 \\text{root} \\text{root} \u5fc5\u987b\u6307\u5411\u65cb\u8f6c\u540e\u7684\u6839\u8282\u70b9\u3002 \u5728 \\text{Splay} \\text{Splay} \u4e2d\u65cb\u8f6c\u5206\u4e3a\u4e24\u79cd\uff1a\u5de6\u65cb\u548c\u53f3\u65cb\u3002 \u5177\u4f53\u5206\u6790\u65cb\u8f6c\u6b65\u9aa4 \uff08\u5047\u8bbe\u9700\u8981\u65cb\u8f6c\u7684\u8282\u70b9\u4e3a x x \uff0c\u5176\u7236\u4eb2\u4e3a y y \uff0c\u4ee5\u53f3\u65cb\u4e3a\u4f8b\uff09 \u5c06 y y \u7684\u5de6\u513f\u5b50\u6307\u5411 x x \u7684\u53f3\u513f\u5b50\uff0c\u4e14 x x \u7684\u53f3\u513f\u5b50\u7684\u7236\u4eb2\u6307\u5411 y y \u3002 ch[y][0]=ch[x][1]; fa[ch[x][1]]=y; \u5c06 x x \u7684\u53f3\u513f\u5b50\u6307\u5411 y y \uff0c\u4e14 y y \u7684\u7236\u4eb2\u6307\u5411 x x \u3002 ch[x][chk^1]=y; fa[y]=x; \u5982\u679c\u539f\u6765\u7684 y y \u8fd8\u6709\u7236\u4eb2 z z \uff0c\u90a3\u4e48\u628a z z \u7684\u67d0\u4e2a\u513f\u5b50\uff08\u539f\u6765 y y \u6240\u5728\u7684\u513f\u5b50\u4f4d\u7f6e\uff09\u6307\u5411 x x \uff0c\u4e14 x x \u7684\u7236\u4eb2\u6307\u5411 z z \u3002 fa[x]=z; if(z) ch[z][y==ch[z][1]]=x; 1 2 3 4 5 6 7 8 9 10 11 void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chk = get ( x ); ch [ y ][ chk ] = ch [ x ][ chk ^ 1 ]; fa [ ch [ x ][ chk ^ 1 ]] = y ; ch [ x ][ chk ^ 1 ] = y ; fa [ y ] = x ; fa [ x ] = z ; if ( z ) ch [ z ][ y == ch [ z ][ 1 ]] = x ; maintain ( x ); maintain ( y ); }","title":"\u65cb\u8f6c\u64cd\u4f5c"},{"location":"ds/splay/#splay","text":"\\text{Splay} \\text{Splay} \u89c4\u5b9a\uff1a\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u540e\u90fd\u8981\u5f3a\u5236\u5c06\u5176\u65cb\u8f6c\u5230\u6839\u8282\u70b9\u3002\u6b64\u65f6\u65cb\u8f6c\u64cd\u4f5c\u5177\u4f53\u5206\u4e3a 6 6 \u79cd\u60c5\u51b5\u8ba8\u8bba\uff08\u5176\u4e2d x x \u4e3a\u9700\u8981\u65cb\u8f6c\u5230\u6839\u7684\u8282\u70b9\uff09 \u5982\u679c x x \u7684\u7236\u4eb2\u662f\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u5c06 x x \u5de6\u65cb\u6216\u53f3\u65cb\uff08\u56fe 1,2 1,2 \uff09\u3002 \u5982\u679c x x \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 x x \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u76f8\u540c\uff0c\u9996\u5148\u5c06\u5176\u7236\u4eb2\u5de6\u65cb\u6216\u53f3\u65cb\uff0c\u7136\u540e\u5c06 x x \u53f3\u65cb\u6216\u5de6\u65cb\uff08\u56fe 3,4 3,4 \uff09\u3002 \u5982\u679c x x \u7684\u7236\u4eb2\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14 x x \u548c\u7236\u4eb2\u7684\u513f\u5b50\u7c7b\u578b\u4e0d\u540c\uff0c\u5c06 x x \u5de6\u65cb\u518d\u53f3\u65cb\u3001\u6216\u8005\u53f3\u65cb\u518d\u5de6\u65cb\uff08\u56fe 5,6 5,6 \uff09\u3002 \u5206\u6790\u8d77\u6765\u4e00\u5927\u4e32\uff0c\u5176\u5b9e\u4ee3\u7801\u4e00\u5c0f\u6bb5\u3002\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u6a21\u62df\u4e00\u4e0b 6 6 \u79cd\u65cb\u8f6c\u60c5\u51b5\uff0c\u5c31\u80fd\u7406\u89e3 \\text{Splay} \\text{Splay} \u7684\u57fa\u672c\u601d\u60f3\u4e86\u3002 1 2 3 4 5 void splay ( int x ) { for ( int f = fa [ x ]; f = fa [ x ], f ; rotate ( x )) if ( fa [ f ]) rotate ( get ( x ) == get ( f ) ? f : x ); rt = x ; }","title":"Splay \u64cd\u4f5c"},{"location":"ds/splay/#_8","text":"\u63d2\u5165\u64cd\u4f5c\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u8fc7\u7a0b\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff08\u63d2\u5165\u7684\u503c\u4e3a k k \uff09\uff1a \u5982\u679c\u6811\u7a7a\u4e86\u5219\u76f4\u63a5\u63d2\u5165\u6839\u5e76\u9000\u51fa\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u7b49\u4e8e k k \u5219\u589e\u52a0\u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f\u5e76\u66f4\u65b0\u8282\u70b9\u548c\u7236\u4eb2\u7684\u4fe1\u606f\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u8fdb\u884c \\text{Splay} \\text{Splay} \u64cd\u4f5c\u3002 \u5426\u5219\u6309\u7167\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\u5411\u4e0b\u627e\uff0c\u627e\u5230\u7a7a\u8282\u70b9\u5c31\u63d2\u5165\u5373\u53ef\uff08\u5f53\u7136\u522b\u5fd8\u4e86 \\text{Splay} \\text{Splay} \u64cd\u4f5c\u54e6\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void ins ( int k ) { if ( ! rt ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; rt = tot ; maintain ( rt ); return ; } int cnr = rt , f = 0 ; while ( 1 ) { if ( val [ cnr ] == k ) { cnt [ cnr ] ++ ; maintain ( cnr ); maintain ( f ); splay ( cnr ); break ; } f = cnr ; cnr = ch [ cnr ][ val [ cnr ] < k ]; if ( ! cnr ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; fa [ tot ] = f ; ch [ f ][ val [ f ] < k ] = tot ; maintain ( tot ); maintain ( f ); splay ( tot ); break ; } } }","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"ds/splay/#x","text":"\u6839\u636e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5b9a\u4e49\u548c\u6027\u8d28\uff0c\u663e\u7136\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u67e5\u8be2 x x \u7684\u6392\u540d\uff1a \u5982\u679c x x \u6bd4\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u5c0f\uff0c\u5411\u5176\u5de6\u5b50\u6811\u67e5\u627e\u3002 \u5982\u679c x x \u6bd4\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u5927\uff0c\u5c06\u7b54\u6848\u52a0\u4e0a\u5de6\u5b50\u6811\uff08 size size \uff09\u548c\u5f53\u524d\u8282\u70b9\uff08 cnt cnt \uff09\u7684\u5927\u5c0f\uff0c\u5411\u5176\u53f3\u5b50\u6811\u67e5\u627e\u3002 \u5982\u679c x x \u4e0e\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u76f8\u540c\uff0c\u5c06\u7b54\u6848\u52a0 1 1 \u5e76\u8fd4\u56de\u3002 \u6ce8\u610f\u6700\u540e\u9700\u8981\u8fdb\u884c \\text{Splay} \\text{Splay} \u64cd\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int rk ( int k ) { int res = 0 , cnr = rt ; while ( 1 ) { if ( k < val [ cnr ]) { cnr = ch [ cnr ][ 0 ]; } else { res += sz [ ch [ cnr ][ 0 ]]; if ( k == val [ cnr ]) { splay ( cnr ); return res + 1 ; } res += cnt [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } }","title":"\u67e5\u8be2 x \u7684\u6392\u540d"},{"location":"ds/splay/#x_1","text":"\u8bbe k k \u4e3a\u5269\u4f59\u6392\u540d\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u5982\u679c\u5de6\u5b50\u6811\u975e\u7a7a\u4e14\u5269\u4f59\u6392\u540d k k \u4e0d\u5927\u4e8e\u5de6\u5b50\u6811\u7684\u5927\u5c0f size size \uff0c\u90a3\u4e48\u5411\u5de6\u5b50\u6811\u67e5\u627e\u3002 \u5426\u5219\u5c06 k k \u51cf\u53bb\u5de6\u5b50\u6811\u7684\u548c\u6839\u7684\u5927\u5c0f\u3002\u5982\u679c\u6b64\u65f6 k k \u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e 0 0 \uff0c\u5219\u8fd4\u56de\u6839\u8282\u70b9\u7684\u6743\u503c\uff0c\u5426\u5219\u7ee7\u7eed\u5411\u53f3\u5b50\u6811\u67e5\u627e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 int kth ( int k ) { int cnr = rt ; while ( 1 ) { if ( ch [ cnr ][ 0 ] && k <= sz [ ch [ cnr ][ 0 ]]) { cnr = ch [ cnr ][ 0 ]; } else { k -= cnt [ cnr ] + sz [ ch [ cnr ][ 0 ]]; if ( k <= 0 ) return val [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } }","title":"\u67e5\u8be2\u6392\u540d x \u7684\u6570"},{"location":"ds/splay/#_9","text":"\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e x x \u7684\u6700\u5927\u7684\u6570\uff0c\u90a3\u4e48\u67e5\u8be2\u524d\u9a71\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\u5c06 x x \u63d2\u5165\uff08\u6b64\u65f6 x x \u5df2\u7ecf\u5728\u6839\u7684\u4f4d\u7f6e\u4e86\uff09\uff0c\u524d\u9a71\u5373\u4e3a x x \u7684\u5de6\u5b50\u6811\u4e2d\u6700\u53f3\u8fb9\u7684\u8282\u70b9\uff0c\u6700\u540e\u5c06 x x \u5220\u9664\u5373\u53ef\u3002 1 2 3 4 5 int pre () { int cnr = ch [ rt ][ 0 ]; while ( ch [ cnr ][ 1 ]) cnr = ch [ cnr ][ 1 ]; return cnr ; }","title":"\u67e5\u8be2\u524d\u9a71"},{"location":"ds/splay/#_10","text":"\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e x x \u7684\u6700\u5c0f\u7684\u6570\uff0c\u67e5\u8be2\u65b9\u6cd5\u548c\u524d\u9a71\u7c7b\u4f3c\uff1a x x \u7684\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u3002 1 2 3 4 5 int nxt () { int cnr = ch [ rt ][ 1 ]; while ( ch [ cnr ][ 0 ]) cnr = ch [ cnr ][ 0 ]; return cnr ; }","title":"\u67e5\u8be2\u540e\u7ee7"},{"location":"ds/splay/#_11","text":"\u5220\u9664\u64cd\u4f5c\u4e5f\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u9996\u5148\u5c06 x x \u65cb\u8f6c\u5230\u6839\u7684\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\u5206\u4e3a\u591a\u4e2a\u60c5\u51b5\u8003\u8651\uff1a \u5982\u679c\u6709\u4e0d\u6b62\u4e00\u4e2a x x \uff0c\u90a3\u4e48\u5c06 cnt[x] cnt[x] \u51cf 1 1 \u5e76\u9000\u51fa\u3002 \u5982\u679c x x \u6ca1\u6709\u513f\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u76f4\u63a5\u5c06\u5f53\u524d\u8282\u70b9 \\text{clear} \\text{clear} \u5e76\u9000\u51fa\u3002 \u5982\u679c x x \u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u5148\u5c06\u5f53\u524d\u8282\u70b9 \\text{clear} \\text{clear} \u518d\u628a\u552f\u4e00\u7684\u513f\u5b50\u4f5c\u4e3a\u6839\u8282\u70b9\u3002 \u5426\u5219\u5c06 x x \u7684\u524d\u9a71\u65cb\u8f6c\u5230\u6839\u5e76\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u5c06 x x \u7684\u53f3\u5b50\u6811\u63a5\u5230\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u6700\u540e\u8981\u5c06\u6839\u7684\u4fe1\u606f\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 void del ( int k ) { rk ( k ); if ( cnt [ rt ] > 1 ) { cnt [ rt ] -- ; maintain ( rt ); return ; } if ( ! ch [ rt ][ 0 ] && ! ch [ rt ][ 1 ]) { clear ( rt ); rt = 0 ; return ; } if ( ! ch [ rt ][ 0 ]) { int cnr = rt ; rt = ch [ rt ][ 1 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } if ( ! ch [ rt ][ 1 ]) { int cnr = rt ; rt = ch [ rt ][ 0 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } int x = pre (), cnr = rt ; splay ( x ); fa [ ch [ cnr ][ 1 ]] = x ; ch [ x ][ 1 ] = ch [ cnr ][ 1 ]; clear ( cnr ); maintain ( rt ); }","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"ds/splay/#_12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 #include <cstdio> const int N = 100005 ; int rt , tot , fa [ N ], ch [ N ][ 2 ], val [ N ], cnt [ N ], sz [ N ]; struct Splay { void maintain ( int x ) { sz [ x ] = sz [ ch [ x ][ 0 ]] + sz [ ch [ x ][ 1 ]] + cnt [ x ]; } bool get ( int x ) { return x == ch [ fa [ x ]][ 1 ]; } void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = val [ x ] = sz [ x ] = cnt [ x ] = 0 ; } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chk = get ( x ); ch [ y ][ chk ] = ch [ x ][ chk ^ 1 ]; fa [ ch [ x ][ chk ^ 1 ]] = y ; ch [ x ][ chk ^ 1 ] = y ; fa [ y ] = x ; fa [ x ] = z ; if ( z ) ch [ z ][ y == ch [ z ][ 1 ]] = x ; maintain ( x ); maintain ( y ); } void splay ( int x ) { for ( int f = fa [ x ]; f = fa [ x ], f ; rotate ( x )) if ( fa [ f ]) rotate ( get ( x ) == get ( f ) ? f : x ); rt = x ; } void ins ( int k ) { if ( ! rt ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; rt = tot ; maintain ( rt ); return ; } int cnr = rt , f = 0 ; while ( 1 ) { if ( val [ cnr ] == k ) { cnt [ cnr ] ++ ; maintain ( cnr ); maintain ( f ); splay ( cnr ); break ; } f = cnr ; cnr = ch [ cnr ][ val [ cnr ] < k ]; if ( ! cnr ) { val [ ++ tot ] = k ; cnt [ tot ] ++ ; fa [ tot ] = f ; ch [ f ][ val [ f ] < k ] = tot ; maintain ( tot ); maintain ( f ); splay ( tot ); break ; } } } int rk ( int k ) { int res = 0 , cnr = rt ; while ( 1 ) { if ( k < val [ cnr ]) { cnr = ch [ cnr ][ 0 ]; } else { res += sz [ ch [ cnr ][ 0 ]]; if ( k == val [ cnr ]) { splay ( cnr ); return res + 1 ; } res += cnt [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } } int kth ( int k ) { int cnr = rt ; while ( 1 ) { if ( ch [ cnr ][ 0 ] && k <= sz [ ch [ cnr ][ 0 ]]) { cnr = ch [ cnr ][ 0 ]; } else { k -= cnt [ cnr ] + sz [ ch [ cnr ][ 0 ]]; if ( k <= 0 ) return val [ cnr ]; cnr = ch [ cnr ][ 1 ]; } } } int pre () { int cnr = ch [ rt ][ 0 ]; while ( ch [ cnr ][ 1 ]) cnr = ch [ cnr ][ 1 ]; return cnr ; } int nxt () { int cnr = ch [ rt ][ 1 ]; while ( ch [ cnr ][ 0 ]) cnr = ch [ cnr ][ 0 ]; return cnr ; } void del ( int k ) { rk ( k ); if ( cnt [ rt ] > 1 ) { cnt [ rt ] -- ; maintain ( rt ); return ; } if ( ! ch [ rt ][ 0 ] && ! ch [ rt ][ 1 ]) { clear ( rt ); rt = 0 ; return ; } if ( ! ch [ rt ][ 0 ]) { int cnr = rt ; rt = ch [ rt ][ 1 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } if ( ! ch [ rt ][ 1 ]) { int cnr = rt ; rt = ch [ rt ][ 0 ]; fa [ rt ] = 0 ; clear ( cnr ); return ; } int x = pre (), cnr = rt ; splay ( x ); fa [ ch [ cnr ][ 1 ]] = x ; ch [ x ][ 1 ] = ch [ cnr ][ 1 ]; clear ( cnr ); maintain ( rt ); } } tree ; int main () { int n , opt , x ; for ( scanf ( \"%d\" , & n ); n ; -- n ) { scanf ( \"%d%d\" , & opt , & x ); if ( opt == 1 ) tree . ins ( x ); else if ( opt == 2 ) tree . del ( x ); else if ( opt == 3 ) printf ( \"%d \\n \" , tree . rk ( x )); else if ( opt == 4 ) printf ( \"%d \\n \" , tree . kth ( x )); else if ( opt == 5 ) tree . ins ( x ), printf ( \"%d \\n \" , val [ tree . pre ()]), tree . del ( x ); else tree . ins ( x ), printf ( \"%d \\n \" , val [ tree . nxt ()]), tree . del ( x ); } return 0 ; }","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"ds/splay/#_13","text":"\u4ee5\u4e0b\u9898\u76ee\u90fd\u662f\u88f8\u7684 \\text{Splay} \\text{Splay} \u7ef4\u62a4\u4e8c\u53c9\u67e5\u627e\u6811\u3002 \uff08\u76f4\u63a5\u5957\u677f\u5b50\u5373\u53ef\uff09 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811 [HNOI2002] \u8425\u4e1a\u989d\u7edf\u8ba1 [HNOI2004] \u5ba0\u7269\u6536\u517b\u6240","title":"\u4f8b\u9898"},{"location":"ds/splay/#_14","text":"bzoj 1552 [Cerc2007] robotic sort \uff08\u6743\u9650\u9898\uff09 luogu P3380 \u3010\u6a21\u677f\u3011\u4e8c\u903c\u5e73\u8861\u6811\uff08\u6811\u5957\u6811\uff09 bzoj 2827 \u5343\u5c71\u9e1f\u98de\u7edd bzoj 4923 [Lydsy1706 \u6708\u8d5b]K \u5c0f\u503c\u67e5\u8be2 \u672c\u6587\u90e8\u5206\u5185\u5bb9\u5f15\u7528\u4e8e algocode \u7b97\u6cd5\u535a\u5ba2 \uff0c\u7279\u522b\u9e23\u8c22\uff01","title":"\u7ec3\u4e60\u9898"},{"location":"ds/square-root-decomposition/","text":"\u7b80\u4ecb \u00b6 \u5176\u5b9e\uff0c\u5206\u5757\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u800c\u4e0d\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u4ece NOIP \u5230 NOI \u5230 IOI\uff0c\u5404\u79cd\u96be\u5ea6\u7684\u5206\u5757\u601d\u60f3\u90fd\u6709\u51fa\u73b0\u3002 \u901a\u5e38\u7684\u5206\u5757\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5e26\u6839\u53f7\uff0c\u6216\u8005\u5176\u4ed6\u5947\u602a\u7684\u590d\u6742\u5ea6\uff0c\u800c\u4e0d\u662f \\log \\log \u3002 \u5206\u5757\u662f\u4e00\u79cd\u5f88\u7075\u6d3b\u7684\u601d\u60f3\uff0c\u51e0\u4e4e\u4ec0\u4e48\u90fd\u80fd\u5206\u5757\uff0c\u5e76\u4e14\u4e0d\u96be\u5b9e\u73b0\u3002 \u4f60\u60f3\u5199\u51fa\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u5c31\u6709\u4ec0\u4e48\uff0c\u7f3a\u70b9\u662f\u6e10\u8fdb\u610f\u4e49\u7684\u590d\u6742\u5ea6\u4e0d\u591f\u597d\u3002 \u5f53\u7136\uff0c\u5728 n=10^5 n=10^5 \u65f6\uff0c\u7531\u4e8e\u5e38\u6570\u5c0f\uff0c\u8ddf\u7ebf\u6bb5\u6811\u53ef\u80fd\u5dee\u4e0d\u591a\u3002 \u8fd9\u4e0d\u662f\u5efa\u8bae\u4f60\u4eec\u7528\u5206\u5757\u7684\u610f\u601d\uff0c\u5728 OI \u4e2d\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5907\u7528\u65b9\u6848\uff0c\u9996\u9009\u80af\u5b9a\u662f\u7ebf\u6bb5\u6811\u7b49\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4ee5\u4e0b\u901a\u8fc7\u51e0\u4e2a\u4f8b\u5b50\u6765\u4ecb\u7ecd\uff5e \u533a\u95f4\u548c \u00b6 \u52a8\u673a\uff1a\u7ebf\u6bb5\u6811\u592a\u96be\u5199\uff1f \u5c06\u5e8f\u5217\u5206\u6bb5\uff0c\u6bcf\u6bb5\u957f\u5ea6 T T \uff0c\u90a3\u4e48\u4e00\u5171\u6709 \\frac{n}{T} \\frac{n}{T} \u6bb5\u3002 \u7ef4\u62a4\u6bcf\u4e00\u6bb5\u7684\u533a\u95f4\u548c\u3002 \u5355\u70b9\u4fee\u6539\uff1a\u663e\u7136\u3002 \u533a\u95f4\u8be2\u95ee\uff1a\u4f1a\u6d89\u53ca\u4e00\u4e9b\u5b8c\u6574\u7684\u6bb5\uff0c\u548c\u6700\u591a\u4e24\u4e2a\u6bb5\u7684\u4e00\u90e8\u5206\u3002 \u5b8c\u6574\u6bb5\u4f7f\u7528\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u4e00\u90e8\u5206\u66b4\u529b\u6c42\u3002 \u590d\u6742\u5ea6 O(\\frac{n}{T}+T) O(\\frac{n}{T}+T) \u3002 \u533a\u95f4\u4fee\u6539\uff1a\u540c\u6837\u6d89\u53ca\u8fd9\u4e9b\u4e1c\u897f\uff0c\u4f7f\u7528\u6253\u6807\u8bb0\u548c\u66b4\u529b\u4fee\u6539\uff0c\u540c\u6837\u7684\u590d\u6742\u5ea6\u3002 \u5f53 T=\\sqrt{n} T=\\sqrt{n} \u65f6\uff0c\u590d\u6742\u5ea6 O(\\sqrt{n}) O(\\sqrt{n}) \u3002 \u533a\u95f4\u548c 2 \u00b6 \u4e0a\u4e00\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u662f \\Omega(1) , O(\\sqrt{n}) \\Omega(1) , O(\\sqrt{n}) \u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd O(\\sqrt{n}) - O(1) O(\\sqrt{n}) - O(1) \u7684\u7b97\u6cd5\u3002 \u4e3a\u4e86 O(1) O(1) \u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5404\u79cd\u524d\u7f00\u548c\u3002 \u7136\u800c\u5728\u6709\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u65b9\u4fbf\u7ef4\u62a4\uff0c\u53ea\u80fd\u7ef4\u62a4\u5355\u4e2a\u5757\u5185\u7684\u524d\u7f00\u548c\u3002 \u4ee5\u53ca\u6574\u5757\u4f5c\u4e3a\u4e00\u4e2a\u5355\u4f4d\u7684\u524d\u7f00\u548c\u3002 \u6bcf\u6b21\u4fee\u6539 O(T+\\frac{n}{T}) O(T+\\frac{n}{T}) \u3002 \u8be2\u95ee\uff1a\u6d89\u53ca\u4e09\u90e8\u5206\uff0c\u6bcf\u90e8\u5206\u90fd\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u524d\u7f00\u548c\u5f97\u5230\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(1) O(1) \u3002 \u5bf9\u8be2\u95ee\u5206\u5757 \u00b6 \u540c\u6837\u7684\u95ee\u9898\uff0c\u73b0\u5728\u5e8f\u5217\u957f\u5ea6\u4e3a n n \uff0c\u6709 m m \u4e2a\u64cd\u4f5c\u3002 \u5982\u679c\u64cd\u4f5c\u6570\u91cf\u6bd4\u8f83\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u64cd\u4f5c\u8bb0\u4e0b\u6765\uff0c\u5728\u8be2\u95ee\u7684\u65f6\u5019\u52a0\u4e0a\u8fd9\u4e9b\u64cd\u4f5c\u7684\u5f71\u54cd\u3002 \u5047\u8bbe\u6700\u591a\u8bb0\u5f55 T T \u4e2a\u64cd\u4f5c\uff0c\u5219\u4fee\u6539 O(1) O(1) \uff0c\u8be2\u95ee O(T) O(T) \u3002 T T \u4e2a\u64cd\u4f5c\u4e4b\u540e\uff0c\u91cd\u65b0\u8ba1\u7b97\u524d\u7f00\u548c\uff0c O(n) O(n) \u3002 \u603b\u590d\u6742\u5ea6\uff1a O(mT+n\\frac{m}{T}) O(mT+n\\frac{m}{T}) \u3002 T=\\sqrt{n} T=\\sqrt{n} \u65f6\uff0c\u603b\u590d\u6742\u5ea6 O(m \\sqrt{n}) O(m \\sqrt{n}) \u3002","title":"\u5206\u5757\u601d\u60f3"},{"location":"ds/square-root-decomposition/#_1","text":"\u5176\u5b9e\uff0c\u5206\u5757\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u800c\u4e0d\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u4ece NOIP \u5230 NOI \u5230 IOI\uff0c\u5404\u79cd\u96be\u5ea6\u7684\u5206\u5757\u601d\u60f3\u90fd\u6709\u51fa\u73b0\u3002 \u901a\u5e38\u7684\u5206\u5757\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5e26\u6839\u53f7\uff0c\u6216\u8005\u5176\u4ed6\u5947\u602a\u7684\u590d\u6742\u5ea6\uff0c\u800c\u4e0d\u662f \\log \\log \u3002 \u5206\u5757\u662f\u4e00\u79cd\u5f88\u7075\u6d3b\u7684\u601d\u60f3\uff0c\u51e0\u4e4e\u4ec0\u4e48\u90fd\u80fd\u5206\u5757\uff0c\u5e76\u4e14\u4e0d\u96be\u5b9e\u73b0\u3002 \u4f60\u60f3\u5199\u51fa\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u5c31\u6709\u4ec0\u4e48\uff0c\u7f3a\u70b9\u662f\u6e10\u8fdb\u610f\u4e49\u7684\u590d\u6742\u5ea6\u4e0d\u591f\u597d\u3002 \u5f53\u7136\uff0c\u5728 n=10^5 n=10^5 \u65f6\uff0c\u7531\u4e8e\u5e38\u6570\u5c0f\uff0c\u8ddf\u7ebf\u6bb5\u6811\u53ef\u80fd\u5dee\u4e0d\u591a\u3002 \u8fd9\u4e0d\u662f\u5efa\u8bae\u4f60\u4eec\u7528\u5206\u5757\u7684\u610f\u601d\uff0c\u5728 OI \u4e2d\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5907\u7528\u65b9\u6848\uff0c\u9996\u9009\u80af\u5b9a\u662f\u7ebf\u6bb5\u6811\u7b49\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4ee5\u4e0b\u901a\u8fc7\u51e0\u4e2a\u4f8b\u5b50\u6765\u4ecb\u7ecd\uff5e","title":"\u7b80\u4ecb"},{"location":"ds/square-root-decomposition/#_2","text":"\u52a8\u673a\uff1a\u7ebf\u6bb5\u6811\u592a\u96be\u5199\uff1f \u5c06\u5e8f\u5217\u5206\u6bb5\uff0c\u6bcf\u6bb5\u957f\u5ea6 T T \uff0c\u90a3\u4e48\u4e00\u5171\u6709 \\frac{n}{T} \\frac{n}{T} \u6bb5\u3002 \u7ef4\u62a4\u6bcf\u4e00\u6bb5\u7684\u533a\u95f4\u548c\u3002 \u5355\u70b9\u4fee\u6539\uff1a\u663e\u7136\u3002 \u533a\u95f4\u8be2\u95ee\uff1a\u4f1a\u6d89\u53ca\u4e00\u4e9b\u5b8c\u6574\u7684\u6bb5\uff0c\u548c\u6700\u591a\u4e24\u4e2a\u6bb5\u7684\u4e00\u90e8\u5206\u3002 \u5b8c\u6574\u6bb5\u4f7f\u7528\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u4e00\u90e8\u5206\u66b4\u529b\u6c42\u3002 \u590d\u6742\u5ea6 O(\\frac{n}{T}+T) O(\\frac{n}{T}+T) \u3002 \u533a\u95f4\u4fee\u6539\uff1a\u540c\u6837\u6d89\u53ca\u8fd9\u4e9b\u4e1c\u897f\uff0c\u4f7f\u7528\u6253\u6807\u8bb0\u548c\u66b4\u529b\u4fee\u6539\uff0c\u540c\u6837\u7684\u590d\u6742\u5ea6\u3002 \u5f53 T=\\sqrt{n} T=\\sqrt{n} \u65f6\uff0c\u590d\u6742\u5ea6 O(\\sqrt{n}) O(\\sqrt{n}) \u3002","title":"\u533a\u95f4\u548c"},{"location":"ds/square-root-decomposition/#2","text":"\u4e0a\u4e00\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u662f \\Omega(1) , O(\\sqrt{n}) \\Omega(1) , O(\\sqrt{n}) \u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd O(\\sqrt{n}) - O(1) O(\\sqrt{n}) - O(1) \u7684\u7b97\u6cd5\u3002 \u4e3a\u4e86 O(1) O(1) \u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5404\u79cd\u524d\u7f00\u548c\u3002 \u7136\u800c\u5728\u6709\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u65b9\u4fbf\u7ef4\u62a4\uff0c\u53ea\u80fd\u7ef4\u62a4\u5355\u4e2a\u5757\u5185\u7684\u524d\u7f00\u548c\u3002 \u4ee5\u53ca\u6574\u5757\u4f5c\u4e3a\u4e00\u4e2a\u5355\u4f4d\u7684\u524d\u7f00\u548c\u3002 \u6bcf\u6b21\u4fee\u6539 O(T+\\frac{n}{T}) O(T+\\frac{n}{T}) \u3002 \u8be2\u95ee\uff1a\u6d89\u53ca\u4e09\u90e8\u5206\uff0c\u6bcf\u90e8\u5206\u90fd\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u524d\u7f00\u548c\u5f97\u5230\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(1) O(1) \u3002","title":"\u533a\u95f4\u548c 2"},{"location":"ds/square-root-decomposition/#_3","text":"\u540c\u6837\u7684\u95ee\u9898\uff0c\u73b0\u5728\u5e8f\u5217\u957f\u5ea6\u4e3a n n \uff0c\u6709 m m \u4e2a\u64cd\u4f5c\u3002 \u5982\u679c\u64cd\u4f5c\u6570\u91cf\u6bd4\u8f83\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u64cd\u4f5c\u8bb0\u4e0b\u6765\uff0c\u5728\u8be2\u95ee\u7684\u65f6\u5019\u52a0\u4e0a\u8fd9\u4e9b\u64cd\u4f5c\u7684\u5f71\u54cd\u3002 \u5047\u8bbe\u6700\u591a\u8bb0\u5f55 T T \u4e2a\u64cd\u4f5c\uff0c\u5219\u4fee\u6539 O(1) O(1) \uff0c\u8be2\u95ee O(T) O(T) \u3002 T T \u4e2a\u64cd\u4f5c\u4e4b\u540e\uff0c\u91cd\u65b0\u8ba1\u7b97\u524d\u7f00\u548c\uff0c O(n) O(n) \u3002 \u603b\u590d\u6742\u5ea6\uff1a O(mT+n\\frac{m}{T}) O(mT+n\\frac{m}{T}) \u3002 T=\\sqrt{n} T=\\sqrt{n} \u65f6\uff0c\u603b\u590d\u6742\u5ea6 O(m \\sqrt{n}) O(m \\sqrt{n}) \u3002","title":"\u5bf9\u8be2\u95ee\u5206\u5757"},{"location":"ds/stack/","text":"\u6808 \u00b6 \u6808\u662f OI \u4e2d\u5e38\u7528\u7684\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u6ce8\u610f\uff0c\u672c\u6587\u4e3b\u8981\u8bb2\u7684\u662f\u6808\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c \u800c\u975e\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u7cfb\u7edf\u6808 / \u6808\u7a7a\u95f4 \u6808\u7684\u4fee\u6539\u662f\u6309\u7167\u540e\u8fdb\u5148\u51fa\u7684\u539f\u5219\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u6808\u901a\u5e38\u88ab\u79f0\u4e3a\u662f\u540e\u8fdb\u5148\u51fa\uff08last in first out\uff09\u8868\uff0c\u7b80\u79f0 LIFO \u8868\u3002 Warning \u4e3a\u4ec0\u4e48\u4e0d\u662f FILO \u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528\u6570\u7ec4\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c \u5982\u4e0b \uff1a 1 2 3 4 5 6 7 8 9 10 int stk [ N ]; // \u8fd9\u91cc\u4f7f\u7528 stk[0]( \u5373 *stk ) \u4ee3\u8868\u6808\u4e2d\u5143\u7d20\u6570\u91cf\uff0c\u540c\u65f6\u4e5f\u662f\u6808\u9876\u4e0b\u6807 // \u538b\u6808 \uff1a stk [ ++* stk ] = var1 ; // \u53d6\u6808\u9876 \uff1a int u = stk [ * stk ]; // \u5f39\u6808 \uff1a\u6ce8\u610f\u8d8a\u754c\u95ee\u9898, *stk == 0 \u65f6\u4e0d\u80fd\u7ee7\u7eed\u5f39\u51fa if ( * stk ) --* stk ; // \u6e05\u7a7a\u6808 * stk = 0 ; \u540c\u65f6 STL \u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5 std :: stack 1 2 3 4 5 6 7 8 9 10 11 #include <stack> // stack \u6784\u9020 \uff1a 1. stack < Typename T > s ; 2. stack < Typename T , Container > s ; /* stack \u7684 Container \u9700\u8981\u6ee1\u8db3\u6709\u5982\u4e0b\u63a5\u53e3 \uff1a * back() * push_back() * pop_back() * \u6807\u51c6\u5bb9\u5668 std :: vector / deque / list \u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42 * \u5982\u4f7f\u7528 1 \u65b9\u5f0f\u6784\u9020\uff0c\u9ed8\u8ba4\u5bb9\u5668\u4f7f\u7528 deque */ std :: stack \u652f\u6301\u8d4b\u503c\u8fd0\u7b97\u7b26 = \u5143\u7d20\u8bbf\u95ee \uff1a s.top() \u8fd4\u56de\u6808\u9876 \u5bb9\u91cf \uff1a s.empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a s.size() \u8fd4\u56de\u5143\u7d20\u6570\u91cf \u4fee\u6539 \uff1a s.push() \u63d2\u5165\u4f20\u5165\u7684\u53c2\u6570\u5230\u6808\u9876 s.pop() \u5f39\u51fa\u6808\u9876 \u5176\u4ed6\u8fd0\u7b97\u7b26 \uff1a == \u3001 != \u3001 < \u3001 <= \u3001 > \u3001 >= \u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a stack \u7684\u503c","title":"\u6808"},{"location":"ds/stack/#_1","text":"\u6808\u662f OI \u4e2d\u5e38\u7528\u7684\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u6ce8\u610f\uff0c\u672c\u6587\u4e3b\u8981\u8bb2\u7684\u662f\u6808\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c \u800c\u975e\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u7cfb\u7edf\u6808 / \u6808\u7a7a\u95f4 \u6808\u7684\u4fee\u6539\u662f\u6309\u7167\u540e\u8fdb\u5148\u51fa\u7684\u539f\u5219\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u6808\u901a\u5e38\u88ab\u79f0\u4e3a\u662f\u540e\u8fdb\u5148\u51fa\uff08last in first out\uff09\u8868\uff0c\u7b80\u79f0 LIFO \u8868\u3002 Warning \u4e3a\u4ec0\u4e48\u4e0d\u662f FILO \u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528\u6570\u7ec4\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c \u5982\u4e0b \uff1a 1 2 3 4 5 6 7 8 9 10 int stk [ N ]; // \u8fd9\u91cc\u4f7f\u7528 stk[0]( \u5373 *stk ) \u4ee3\u8868\u6808\u4e2d\u5143\u7d20\u6570\u91cf\uff0c\u540c\u65f6\u4e5f\u662f\u6808\u9876\u4e0b\u6807 // \u538b\u6808 \uff1a stk [ ++* stk ] = var1 ; // \u53d6\u6808\u9876 \uff1a int u = stk [ * stk ]; // \u5f39\u6808 \uff1a\u6ce8\u610f\u8d8a\u754c\u95ee\u9898, *stk == 0 \u65f6\u4e0d\u80fd\u7ee7\u7eed\u5f39\u51fa if ( * stk ) --* stk ; // \u6e05\u7a7a\u6808 * stk = 0 ; \u540c\u65f6 STL \u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5 std :: stack 1 2 3 4 5 6 7 8 9 10 11 #include <stack> // stack \u6784\u9020 \uff1a 1. stack < Typename T > s ; 2. stack < Typename T , Container > s ; /* stack \u7684 Container \u9700\u8981\u6ee1\u8db3\u6709\u5982\u4e0b\u63a5\u53e3 \uff1a * back() * push_back() * pop_back() * \u6807\u51c6\u5bb9\u5668 std :: vector / deque / list \u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42 * \u5982\u4f7f\u7528 1 \u65b9\u5f0f\u6784\u9020\uff0c\u9ed8\u8ba4\u5bb9\u5668\u4f7f\u7528 deque */ std :: stack \u652f\u6301\u8d4b\u503c\u8fd0\u7b97\u7b26 = \u5143\u7d20\u8bbf\u95ee \uff1a s.top() \u8fd4\u56de\u6808\u9876 \u5bb9\u91cf \uff1a s.empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a s.size() \u8fd4\u56de\u5143\u7d20\u6570\u91cf \u4fee\u6539 \uff1a s.push() \u63d2\u5165\u4f20\u5165\u7684\u53c2\u6570\u5230\u6808\u9876 s.pop() \u5f39\u51fa\u6808\u9876 \u5176\u4ed6\u8fd0\u7b97\u7b26 \uff1a == \u3001 != \u3001 < \u3001 <= \u3001 > \u3001 >= \u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a stack \u7684\u503c","title":"\u6808"},{"location":"ds/stl/","text":"\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u8ba4\u8bc6\u8ba4\u8bc6\u9ad8\u7aef\u7684 STL\u3002 \u4ec0\u4e48\u662f STL\uff1f \u00b6 STL \u662f Standard Template Library \u7684\u7b80\u79f0\uff0c\u4e2d\u6587\u540d\u4e3a\u6807\u51c6\u6a21\u677f\u5e93\u3002\u5b83\u662f C++ \u7684\u4e00\u5927\u7279\u8272\uff0c\u91cc\u9762\u5305\u542b\u4e86\u8bb8\u591a\u6807\u51c6\u7b97\u6cd5\u6216\u6570\u636e\u7ed3\u6784\u3002 \u5728 C++ \u6807\u51c6\u4e2d\uff0cSTL \u88ab\u7ec4\u7ec7\u4e3a\u4e0b\u9762\u7684 13 \u4e2a\u5934\u6587\u4ef6\uff1a <algorithm> , <deque> , <functional> , <iterator> , <array> , <vector> , <list> , <forward_list> , <map> , <unordered_map> , <memory> , <numeric> , <set> , <unordered_set> , <stack> , <utility> \u3002 \u6570\u636e\u7ed3\u6784 \u00b6 \u5e8f\u5217\u5f0f\u5bb9\u5668 \u00b6 \u5411\u91cf (vector) \u8fde\u7eed\u5b58\u50a8\u7684\u5143\u7d20\u3002 \u5217\u8868 (list) \u7531\u8282\u70b9\u7ec4\u6210\u7684\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u5305\u542b\u7740\u4e00\u4e2a\u5143\u7d20\u3002 \u53cc\u7aef\u961f\u5217 (deque) \u8fde\u7eed\u5b58\u50a8\u7684\u6307\u5411\u4e0d\u540c\u5143\u7d20\u7684\u6307\u9488\u6240\u7ec4\u6210\u7684\u6570\u7ec4\u3002 \u9002\u914d\u5668\u5bb9\u5668 \u00b6 \u6808 (stack) \u540e\u8fdb\u5148\u51fa\u7684\u503c\u7684\u6392\u5217 \u3002 \u961f\u5217 (queue) \u5148\u8fdb\u5148\u51fa\u7684\u503c\u7684\u6392\u5217 \u3002 \u4f18\u5148\u961f\u5217 (priority_queue) \u5143\u7d20\u7684\u6b21\u5e8f\u662f\u7531\u4f5c\u7528\u4e8e\u6240\u5b58\u50a8\u7684\u503c\u5bf9\u4e0a\u7684\u67d0\u79cd\u8c13\u8bcd\u51b3\u5b9a\u7684\u7684\u4e00\u79cd\u961f\u5217 \u3002 \u5173\u8054\u5f0f\u5bb9\u5668 \u00b6 \u96c6\u5408 (set) \u7531\u8282\u70b9\u7ec4\u6210\u7684\u7ea2\u9ed1\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u7740\u4e00\u4e2a\u5143\u7d20\uff0c\u8282\u70b9\u4e4b\u95f4\u4ee5\u67d0\u79cd\u4f5c\u7528\u4e8e\u5143\u7d20\u5bf9\u7684\u8c13\u8bcd\u6392\u5217\uff0c\u6ca1\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u80fd\u591f\u62e5\u6709\u76f8\u540c\u7684\u6b21\u5e8f \u3002 \u591a\u91cd\u96c6\u5408 (multiset) \u5141\u8bb8\u5b58\u5728\u4e24\u4e2a\u6b21\u5e8f\u76f8\u7b49\u7684\u5143\u7d20\u7684\u96c6\u5408 \u3002 \u6620\u5c04 (map) \u7531 {\u952e\uff0c\u503c} \u5bf9\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u4ee5\u67d0\u79cd\u4f5c\u7528\u4e8e\u952e\u5bf9\u4e0a\u7684\u8c13\u8bcd\u6392\u5217 \u3002 \u591a\u91cd\u6620\u5c04 (multimap) \u5141\u8bb8\u952e\u5bf9\u6709\u76f8\u7b49\u7684\u6b21\u5e8f\u7684\u6620\u5c04 \u3002 \u7b97\u6cd5 \u00b6 STL \u63d0\u4f9b\u4e86\u5927\u7ea6 100 \u4e2a\u5b9e\u73b0\u7b97\u6cd5\u7684\u6a21\u7248\u51fd\u6570\uff0c\u57fa\u672c\u90fd\u5305\u542b\u5728 <algorithm> \u4e4b\u4e2d\uff0c\u8fd8\u6709\u4e00\u90e8\u5206\u5305\u542b\u5728 <numeric> \u548c <functional> \u3002 \u5e38\u7528\u51fd\u6570\uff1a sort \uff1a\u6392\u5e8f\u3002 sort(v.begin(), v.end(), cmp) \u6216 sort(a + begin, a + end, cmp) \uff0c\u5176\u4e2d end \u662f\u6392\u5e8f\u7684\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u540e\u4e00\u4f4d\uff0c cmp \u4e3a\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\u3002 reverse \uff1a\u7ffb\u8f6c\u6570\u7ec4\u3001\u5b57\u7b26\u4e32\u3002 reverse(v.begin(), v.end()) \u6216 reverse(a + begin, a + end) \u3002 nth_element \uff1a\u6309\u6307\u5b9a\u8303\u56f4\u8fdb\u884c\u5206\u7c7b\uff0c\u5373\u627e\u51fa\u5e8f\u5217\u4e2d\u7b2c n n \u5927\u7684\u5143\u7d20\uff0c\u4f7f\u5176\u5de6\u8fb9\u5747\u4e3a\u5c0f\u4e8e\u5b83\u7684\u6570\uff0c\u53f3\u8fb9\u5747\u4e3a\u5927\u4e8e\u5b83\u7684\u6570\u3002 nth_element(v.begin(), v.begin() + mid, v.end(), cmp) \u6216 nth_element(a + begin, a + begin + mid, a + end, cmp) \u3002 random_shuffle \uff1a\u968f\u673a\u5730\u6253\u4e71\u6570\u7ec4\u3002 random_shuffle(v.begin(), v.end()) \u6216 random_shuffle(v + begin, v + end) \u3002 \u53c2\u8003 \u00b6 https://en.cppreference.com/w/ http://www.cplusplus.com/reference/","title":"STL \u7b80\u4ecb"},{"location":"ds/stl/#stl","text":"STL \u662f Standard Template Library \u7684\u7b80\u79f0\uff0c\u4e2d\u6587\u540d\u4e3a\u6807\u51c6\u6a21\u677f\u5e93\u3002\u5b83\u662f C++ \u7684\u4e00\u5927\u7279\u8272\uff0c\u91cc\u9762\u5305\u542b\u4e86\u8bb8\u591a\u6807\u51c6\u7b97\u6cd5\u6216\u6570\u636e\u7ed3\u6784\u3002 \u5728 C++ \u6807\u51c6\u4e2d\uff0cSTL \u88ab\u7ec4\u7ec7\u4e3a\u4e0b\u9762\u7684 13 \u4e2a\u5934\u6587\u4ef6\uff1a <algorithm> , <deque> , <functional> , <iterator> , <array> , <vector> , <list> , <forward_list> , <map> , <unordered_map> , <memory> , <numeric> , <set> , <unordered_set> , <stack> , <utility> \u3002","title":"\u4ec0\u4e48\u662f STL\uff1f"},{"location":"ds/stl/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"ds/stl/#_2","text":"\u5411\u91cf (vector) \u8fde\u7eed\u5b58\u50a8\u7684\u5143\u7d20\u3002 \u5217\u8868 (list) \u7531\u8282\u70b9\u7ec4\u6210\u7684\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u5305\u542b\u7740\u4e00\u4e2a\u5143\u7d20\u3002 \u53cc\u7aef\u961f\u5217 (deque) \u8fde\u7eed\u5b58\u50a8\u7684\u6307\u5411\u4e0d\u540c\u5143\u7d20\u7684\u6307\u9488\u6240\u7ec4\u6210\u7684\u6570\u7ec4\u3002","title":"\u5e8f\u5217\u5f0f\u5bb9\u5668"},{"location":"ds/stl/#_3","text":"\u6808 (stack) \u540e\u8fdb\u5148\u51fa\u7684\u503c\u7684\u6392\u5217 \u3002 \u961f\u5217 (queue) \u5148\u8fdb\u5148\u51fa\u7684\u503c\u7684\u6392\u5217 \u3002 \u4f18\u5148\u961f\u5217 (priority_queue) \u5143\u7d20\u7684\u6b21\u5e8f\u662f\u7531\u4f5c\u7528\u4e8e\u6240\u5b58\u50a8\u7684\u503c\u5bf9\u4e0a\u7684\u67d0\u79cd\u8c13\u8bcd\u51b3\u5b9a\u7684\u7684\u4e00\u79cd\u961f\u5217 \u3002","title":"\u9002\u914d\u5668\u5bb9\u5668"},{"location":"ds/stl/#_4","text":"\u96c6\u5408 (set) \u7531\u8282\u70b9\u7ec4\u6210\u7684\u7ea2\u9ed1\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u7740\u4e00\u4e2a\u5143\u7d20\uff0c\u8282\u70b9\u4e4b\u95f4\u4ee5\u67d0\u79cd\u4f5c\u7528\u4e8e\u5143\u7d20\u5bf9\u7684\u8c13\u8bcd\u6392\u5217\uff0c\u6ca1\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u80fd\u591f\u62e5\u6709\u76f8\u540c\u7684\u6b21\u5e8f \u3002 \u591a\u91cd\u96c6\u5408 (multiset) \u5141\u8bb8\u5b58\u5728\u4e24\u4e2a\u6b21\u5e8f\u76f8\u7b49\u7684\u5143\u7d20\u7684\u96c6\u5408 \u3002 \u6620\u5c04 (map) \u7531 {\u952e\uff0c\u503c} \u5bf9\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u4ee5\u67d0\u79cd\u4f5c\u7528\u4e8e\u952e\u5bf9\u4e0a\u7684\u8c13\u8bcd\u6392\u5217 \u3002 \u591a\u91cd\u6620\u5c04 (multimap) \u5141\u8bb8\u952e\u5bf9\u6709\u76f8\u7b49\u7684\u6b21\u5e8f\u7684\u6620\u5c04 \u3002","title":"\u5173\u8054\u5f0f\u5bb9\u5668"},{"location":"ds/stl/#_5","text":"STL \u63d0\u4f9b\u4e86\u5927\u7ea6 100 \u4e2a\u5b9e\u73b0\u7b97\u6cd5\u7684\u6a21\u7248\u51fd\u6570\uff0c\u57fa\u672c\u90fd\u5305\u542b\u5728 <algorithm> \u4e4b\u4e2d\uff0c\u8fd8\u6709\u4e00\u90e8\u5206\u5305\u542b\u5728 <numeric> \u548c <functional> \u3002 \u5e38\u7528\u51fd\u6570\uff1a sort \uff1a\u6392\u5e8f\u3002 sort(v.begin(), v.end(), cmp) \u6216 sort(a + begin, a + end, cmp) \uff0c\u5176\u4e2d end \u662f\u6392\u5e8f\u7684\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u540e\u4e00\u4f4d\uff0c cmp \u4e3a\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\u3002 reverse \uff1a\u7ffb\u8f6c\u6570\u7ec4\u3001\u5b57\u7b26\u4e32\u3002 reverse(v.begin(), v.end()) \u6216 reverse(a + begin, a + end) \u3002 nth_element \uff1a\u6309\u6307\u5b9a\u8303\u56f4\u8fdb\u884c\u5206\u7c7b\uff0c\u5373\u627e\u51fa\u5e8f\u5217\u4e2d\u7b2c n n \u5927\u7684\u5143\u7d20\uff0c\u4f7f\u5176\u5de6\u8fb9\u5747\u4e3a\u5c0f\u4e8e\u5b83\u7684\u6570\uff0c\u53f3\u8fb9\u5747\u4e3a\u5927\u4e8e\u5b83\u7684\u6570\u3002 nth_element(v.begin(), v.begin() + mid, v.end(), cmp) \u6216 nth_element(a + begin, a + begin + mid, a + end, cmp) \u3002 random_shuffle \uff1a\u968f\u673a\u5730\u6253\u4e71\u6570\u7ec4\u3002 random_shuffle(v.begin(), v.end()) \u6216 random_shuffle(v + begin, v + end) \u3002","title":"\u7b97\u6cd5"},{"location":"ds/stl/#_6","text":"https://en.cppreference.com/w/ http://www.cplusplus.com/reference/","title":"\u53c2\u8003"},{"location":"ds/treap/","text":"treap \u662f\u4e00\u79cd\u5f31\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002treap \u8fd9\u4e2a\u5355\u8bcd\u662f tree \u548c heap \u7684\u7ec4\u5408\uff0c\u8868\u660e treap \u662f\u4e00\u79cd\u7531\u6811\u548c\u5806\u7ec4\u5408\u5f62\u6210\u7684\u6570\u636e\u7ed3\u6784\u3002treap \u7684\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u8981\u989d\u5916\u50a8\u5b58\u4e00\u4e2a\u503c priority priority \u3002treap \u9664\u4e86\u8981\u6ee1\u8db3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e4b\u5916\uff0c\u8fd8\u9700\u6ee1\u8db3\u7236\u8282\u70b9\u7684 priority priority \u5927\u4e8e\u7b49\u4e8e\u4e24\u4e2a\u513f\u5b50\u7684 priority priority \u3002\u800c priority priority \u662f\u6bcf\u4e2a\u7ed3\u70b9\u5efa\u7acb\u65f6\u968f\u673a\u751f\u6210\u7684\uff0c\u56e0\u6b64 treap \u662f\u671f\u671b\u5e73\u8861\u7684\u3002 treap \u5206\u4e3a\u65cb\u8f6c\u5f0f\u548c\u65e0\u65cb\u5f0f\u4e24\u79cd\u3002\u4e24\u79cd treap \u90fd\u6613\u4e8e\u7f16\u5199\uff0c\u4f46\u65e0\u65cb\u5f0f treap \u7684\u64cd\u4f5c\u65b9\u5f0f\u4f7f\u5f97\u5b83\u5929\u751f\u652f\u6301\u7ef4\u62a4\u5e8f\u5217\u3001\u53ef\u6301\u4e45\u5316\u7b49\u7279\u6027\u3002\u8fd9\u91cc\u4ee5\u91cd\u65b0\u5b9e\u73b0 set<int> \uff08\u4e0d\u53ef\u91cd\u96c6\u5408\uff09\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u65e0\u65cb\u5f0f treap\u3002 \u65e0\u65cb\u5f0f treap \u7684\u6838\u5fc3\u64cd\u4f5c \u00b6 \u65e0\u65cb\u5f0f treap \u53c8\u79f0\u5206\u88c2\u5408\u5e76 treap\u3002\u5b83\u4ec5\u6709\u4e24\u79cd\u6838\u5fc3\u64cd\u4f5c\uff0c\u5373\u4e3a\u5206\u88c2\u4e0e\u5408\u5e76\u3002\u4e0b\u9762\u9010\u4e00\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u64cd\u4f5c\u3002 \u5206\u88c2\uff08split\uff09 \u00b6 \u5206\u88c2\u8fc7\u7a0b\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u6839\u6307\u9488 u u \u3001\u5173\u952e\u503c key key \u3002\u7ed3\u679c\u4e3a\u5c06\u6839\u6307\u9488\u6307\u5411\u7684 treap \u5206\u88c2\u4e3a\u4e24\u4e2a treap\uff0c\u7b2c\u4e00\u4e2a treap \u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u503c\u5c0f\u4e8e\u7b49\u4e8e key key \uff0c\u7b2c\u4e8c\u4e2a treap \u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u503c\u5927\u4e8e key key \u3002\u8be5\u8fc7\u7a0b\u9996\u5148\u5224\u65ad key key \u662f\u5426\u5c0f\u4e8e u u \u7684\u5173\u952e\u503c\uff0c\u82e5\u5c0f\u4e8e\uff0c\u5219\u8bf4\u660e u u \u53ca\u5176\u53f3\u5b50\u6811\u5168\u90e8\u5c5e\u4e8e\u7b2c\u4e8c\u4e2a treap\uff0c\u5426\u5219\u8bf4\u660e u u \u53ca\u5176\u5de6\u5b50\u6811\u5168\u90e8\u5c5e\u4e8e\u7b2c\u4e00\u4e2a treap\u3002\u6839\u636e\u6b64\u5224\u65ad\u51b3\u5b9a\u5e94\u5411\u5de6\u5b50\u6811\u9012\u5f52\u8fd8\u662f\u5e94\u5411\u53f3\u5b50\u6811\u9012\u5f52\uff0c\u7ee7\u7eed\u5206\u88c2\u5b50\u6811\u3002\u5f85\u5b50\u6811\u5206\u88c2\u5b8c\u6210\u540e\u6309\u521a\u521a\u7684\u5224\u65ad\u60c5\u51b5\u8fde\u63a5 u u \u7684\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u5230\u9012\u5f52\u5206\u88c2\u6240\u5f97\u7684\u5b50\u6811\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 pair < node * , node *> split ( node * u , int key ) { if ( u == nullptr ) { return make_pair ( nullptr , nullptr ); } if ( key < u -> key ) { pair < node * , node *> o = split ( u -> lch , key ); u -> lch = o . second ; return make_pair ( o . first , u ); } else { pair < node * , node *> o = split ( u -> rch , key ); u -> rch = o . first ; return make_pair ( u , o . second ); } } \u5408\u5e76\uff08merge\uff09 \u00b6 \u5408\u5e76\u8fc7\u7a0b\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u5de6 treap \u7684\u6839\u6307\u9488 u u \u3001\u53f3 treap \u7684\u6839\u6307\u9488 v v \u3002\u5fc5\u987b\u6ee1\u8db3 u u \u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u503c\u5c0f\u4e8e\u7b49\u4e8e v v \u4e2d\u5de6\u53f3\u7ed3\u70b9\u7684\u5173\u952e\u503c\u3002\u56e0\u4e3a\u4e24\u4e2a treap \u5df2\u7ecf\u6709\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 priority priority \u6765\u51b3\u5b9a\u54ea\u4e2a treap \u5e94\u4e0e\u53e6\u4e00\u4e2a treap \u7684\u513f\u5b50\u5408\u5e76\u3002\u82e5 u u \u7684\u6839\u7ed3\u70b9\u7684 priority priority \u5927\u4e8e v v \u7684\uff0c\u90a3\u4e48 u u \u5373\u4e3a\u65b0\u6839\u7ed3\u70b9\uff0c v v \u5e94\u4e0e u u \u7684\u53f3\u5b50\u6811\u5408\u5e76\uff1b\u53cd\u4e4b\uff0c\u5219 v v \u4f5c\u4e3a\u65b0\u6839\u7ed3\u70b9\uff0c\u7136\u540e\u8ba9 u u \u4e0e v v \u7684\u5de6\u5b50\u6811\u5408\u5e76\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u5408\u5e76\u6240\u5f97\u7684\u6811\u4f9d\u7136\u6ee1\u8db3 priority priority \u7684\u5927\u6839\u5806\u6027\u8d28\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 node * merge ( node * u , node * v ) { if ( u == nullptr ) { return v ; } if ( v == nullptr ) { return u ; } if ( u -> priority > v -> priority ) { u -> rch = merge ( u -> rch , v ); return u ; } else { v -> lch = merge ( u , v -> lch ); return v ; } } \u5c06 treap \u5305\u88c5\u6210\u4e3a set<int> \u00b6 count \u51fd\u6570 \u00b6 \u76f4\u63a5\u4f9d\u9760\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u67e5\u627e\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int find ( node * u , int key ) { if ( u == nullptr ) { return 0 ; } if ( key == u -> key ) { return 1 ; } if ( key < u -> key ) { return find ( u -> lch , key ); } else { return find ( u -> rch , key ); } } int count ( int key ) { return find ( root , key ); } insert \u51fd\u6570 \u00b6 \u5148\u5728\u5f85\u63d2\u5165\u7684\u5173\u952e\u503c\u5904\u5c06\u6574\u68f5 treap \u5206\u88c2\uff0c\u5224\u65ad\u5173\u952e\u503c\u662f\u5426\u5df2\u63d2\u5165\u8fc7\u4e4b\u540e\u65b0\u5efa\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5305\u542b\u5f85\u63d2\u5165\u7684\u5173\u952e\u503c\uff0c\u7136\u540e\u8fdb\u884c\u4e24\u6b21\u5408\u5e76\u64cd\u4f5c\u5373\u53ef\u3002 1 2 3 4 5 6 7 void insert ( int key ) { pair < node * , node *> o = split ( root , key ); if ( find ( root , key ) == 0 ) { o . first = merge ( o . first , new node ( key )); } root = merge ( o . first , o . second ); } erase \u51fd\u6570 \u00b6 \u5c06\u5177\u6709\u5f85\u5220\u9664\u7684\u5173\u952e\u503c\u7684\u7ed3\u70b9\u4ece\u6574\u68f5 treap \u4e2d\u5b64\u7acb\u51fa\u6765\uff08\u8fdb\u884c\u4e24\u4fa7\u5206\u88c2\u64cd\u4f5c\uff09\uff0c\u5220\u9664\u4e2d\u95f4\u7684\u4e00\u6bb5\uff08\u5177\u6709\u5f85\u5220\u9664\u5173\u952e\u503c\uff09\uff0c\u518d\u5c06\u5de6\u53f3\u4e24\u7aef\u5408\u5e76\u5373\u53ef\u3002 1 2 3 4 5 6 void erase ( int key ) { pair < node * , node *> o = split ( root , key - 1 ); pair < node * , node *> p = split ( o . second , key ); delete p . first ; root = merge ( o . first , p . second ); } \u65cb\u8f6c treap \u00b6 \u65cb\u8f6c treap \u5728\u505a\u666e\u901a\u5e73\u8861\u6811\u9898\u7684\u65f6\u5019\uff0c\u662f\u6240\u6709\u5e73\u8861\u6811\u4e2d\u5e38\u6570\u8f83\u5c0f\u7684 \u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\u4e3a\u65cb\u8f6c\u3002\u6027\u8d28\u4e0e\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7c7b\u4f3c \u56e0\u4e3a\u666e\u901a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4f1a\u88ab\u9012\u589e\u6216\u9012\u51cf\u7684\u6570\u636e\u5361\uff0c\u7528 treap \u5bf9\u6bcf\u4e2a\u8282\u70b9\u5b9a\u4e49\u4e00\u4e2a\u6743\u503c\uff0c\u7531 rand \u5f97\u5230\uff0c\u4ece\u800c\u9632\u6b62\u7279\u6b8a\u6570\u636e\u5361\u3002 \u6bcf\u6b21\u5220\u9664 / \u63d2\u5165\u65f6\u901a\u8fc7 rand \u503c\u51b3\u5b9a\u8981\u4e0d\u8981\u65cb\u8f6c\u5373\u53ef\uff0c\u5176\u4ed6\u64cd\u4f5c\u4e0e\u4e8c\u53c9\u641c\u7d22\u6811\u7c7b\u4f3c \u4ee5\u4e0b\u662f bzoj \u666e\u901a\u5e73\u8861\u6811\u6a21\u677f\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <algorithm> #include <cstdio> #include <iostream> #define maxn 100005 #define INF (1 << 30) int n ; struct treap { int l [ maxn ], r [ maxn ], val [ maxn ], rnd [ maxn ], size [ maxn ], w [ maxn ]; int sz , ans , rt ; inline void pushup ( int x ) { size [ x ] = size [ l [ x ]] + size [ r [ x ]] + w [ x ]; } void lrotate ( int & k ) { int t = r [ k ]; r [ k ] = l [ t ]; l [ t ] = k ; size [ t ] = size [ k ]; pushup ( k ); k = t ; } void rrotate ( int & k ) { int t = l [ k ]; l [ k ] = r [ t ]; r [ t ] = k ; size [ t ] = size [ k ]; pushup ( k ); k = t ; } void insert ( int & k , int x ) { if ( ! k ) { sz ++ ; k = sz ; size [ k ] = 1 ; w [ k ] = 1 ; val [ k ] = x ; rnd [ k ] = rand (); return ; } size [ k ] ++ ; if ( val [ k ] == x ) { w [ k ] ++ ; } else if ( val [ k ] < x ) { insert ( r [ k ], x ); if ( rnd [ r [ k ]] < rnd [ k ]) lrotate ( k ); } else { insert ( l [ k ], x ); if ( rnd [ l [ k ]] < rnd [ k ]) rrotate ( k ); } } void del ( int & k , int x ) { if ( ! k ) return ; if ( val [ k ] == x ) { if ( w [ k ] > 1 ) { w [ k ] -- ; size [ k ] -- ; return ; } if ( l [ k ] == 0 || r [ k ] == 0 ) k = l [ k ] + r [ k ]; else if ( rnd [ l [ k ]] < rnd [ r [ k ]]) { rrotate ( k ); del ( k , x ); } else { lrotate ( k ); del ( k , x ); } } else if ( val [ k ] < x ) { size [ k ] -- ; del ( r [ k ], x ); } else { size [ k ] -- ; del ( l [ k ], x ); } } int queryrank ( int k , int x ) { if ( ! k ) return 0 ; if ( val [ k ] == x ) return size [ l [ k ]] + 1 ; else if ( x > val [ k ]) { return size [ l [ k ]] + w [ k ] + queryrank ( r [ k ], x ); } else return queryrank ( l [ k ], x ); } int querynum ( int k , int x ) { if ( ! k ) return 0 ; if ( x <= size [ l [ k ]]) return querynum ( l [ k ], x ); else if ( x > size [ l [ k ]] + w [ k ]) return querynum ( r [ k ], x - size [ l [ k ]] - w [ k ]); else return val [ k ]; } void querypre ( int k , int x ) { if ( ! k ) return ; if ( val [ k ] < x ) ans = k , querypre ( r [ k ], x ); else querypre ( l [ k ], x ); } void querysub ( int k , int x ) { if ( ! k ) return ; if ( val [ k ] > x ) ans = k , querysub ( l [ k ], x ); else querysub ( r [ k ], x ); } } T ; int main () { srand ( 123 ); scanf ( \"%d\" , & n ); int opt , x ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & opt , & x ); if ( opt == 1 ) T . insert ( T . rt , x ); else if ( opt == 2 ) T . del ( T . rt , x ); else if ( opt == 3 ) { printf ( \"%d \\n \" , T . queryrank ( T . rt , x )); } else if ( opt == 4 ) { printf ( \"%d \\n \" , T . querynum ( T . rt , x )); } else if ( opt == 5 ) { T . ans = 0 ; T . querypre ( T . rt , x ); printf ( \"%d \\n \" , T . val [ T . ans ]); } else if ( opt == 6 ) { T . ans = 0 ; T . querysub ( T . rt , x ); printf ( \"%d \\n \" , T . val [ T . ans ]); } } return 0 ; }","title":"Treap"},{"location":"ds/treap/#treap","text":"\u65e0\u65cb\u5f0f treap \u53c8\u79f0\u5206\u88c2\u5408\u5e76 treap\u3002\u5b83\u4ec5\u6709\u4e24\u79cd\u6838\u5fc3\u64cd\u4f5c\uff0c\u5373\u4e3a\u5206\u88c2\u4e0e\u5408\u5e76\u3002\u4e0b\u9762\u9010\u4e00\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u64cd\u4f5c\u3002","title":"\u65e0\u65cb\u5f0f treap \u7684\u6838\u5fc3\u64cd\u4f5c"},{"location":"ds/treap/#split","text":"\u5206\u88c2\u8fc7\u7a0b\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u6839\u6307\u9488 u u \u3001\u5173\u952e\u503c key key \u3002\u7ed3\u679c\u4e3a\u5c06\u6839\u6307\u9488\u6307\u5411\u7684 treap \u5206\u88c2\u4e3a\u4e24\u4e2a treap\uff0c\u7b2c\u4e00\u4e2a treap \u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u503c\u5c0f\u4e8e\u7b49\u4e8e key key \uff0c\u7b2c\u4e8c\u4e2a treap \u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u503c\u5927\u4e8e key key \u3002\u8be5\u8fc7\u7a0b\u9996\u5148\u5224\u65ad key key \u662f\u5426\u5c0f\u4e8e u u \u7684\u5173\u952e\u503c\uff0c\u82e5\u5c0f\u4e8e\uff0c\u5219\u8bf4\u660e u u \u53ca\u5176\u53f3\u5b50\u6811\u5168\u90e8\u5c5e\u4e8e\u7b2c\u4e8c\u4e2a treap\uff0c\u5426\u5219\u8bf4\u660e u u \u53ca\u5176\u5de6\u5b50\u6811\u5168\u90e8\u5c5e\u4e8e\u7b2c\u4e00\u4e2a treap\u3002\u6839\u636e\u6b64\u5224\u65ad\u51b3\u5b9a\u5e94\u5411\u5de6\u5b50\u6811\u9012\u5f52\u8fd8\u662f\u5e94\u5411\u53f3\u5b50\u6811\u9012\u5f52\uff0c\u7ee7\u7eed\u5206\u88c2\u5b50\u6811\u3002\u5f85\u5b50\u6811\u5206\u88c2\u5b8c\u6210\u540e\u6309\u521a\u521a\u7684\u5224\u65ad\u60c5\u51b5\u8fde\u63a5 u u \u7684\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u5230\u9012\u5f52\u5206\u88c2\u6240\u5f97\u7684\u5b50\u6811\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 pair < node * , node *> split ( node * u , int key ) { if ( u == nullptr ) { return make_pair ( nullptr , nullptr ); } if ( key < u -> key ) { pair < node * , node *> o = split ( u -> lch , key ); u -> lch = o . second ; return make_pair ( o . first , u ); } else { pair < node * , node *> o = split ( u -> rch , key ); u -> rch = o . first ; return make_pair ( u , o . second ); } }","title":"\u5206\u88c2\uff08split\uff09"},{"location":"ds/treap/#merge","text":"\u5408\u5e76\u8fc7\u7a0b\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u5de6 treap \u7684\u6839\u6307\u9488 u u \u3001\u53f3 treap \u7684\u6839\u6307\u9488 v v \u3002\u5fc5\u987b\u6ee1\u8db3 u u \u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u503c\u5c0f\u4e8e\u7b49\u4e8e v v \u4e2d\u5de6\u53f3\u7ed3\u70b9\u7684\u5173\u952e\u503c\u3002\u56e0\u4e3a\u4e24\u4e2a treap \u5df2\u7ecf\u6709\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 priority priority \u6765\u51b3\u5b9a\u54ea\u4e2a treap \u5e94\u4e0e\u53e6\u4e00\u4e2a treap \u7684\u513f\u5b50\u5408\u5e76\u3002\u82e5 u u \u7684\u6839\u7ed3\u70b9\u7684 priority priority \u5927\u4e8e v v \u7684\uff0c\u90a3\u4e48 u u \u5373\u4e3a\u65b0\u6839\u7ed3\u70b9\uff0c v v \u5e94\u4e0e u u \u7684\u53f3\u5b50\u6811\u5408\u5e76\uff1b\u53cd\u4e4b\uff0c\u5219 v v \u4f5c\u4e3a\u65b0\u6839\u7ed3\u70b9\uff0c\u7136\u540e\u8ba9 u u \u4e0e v v \u7684\u5de6\u5b50\u6811\u5408\u5e76\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u5408\u5e76\u6240\u5f97\u7684\u6811\u4f9d\u7136\u6ee1\u8db3 priority priority \u7684\u5927\u6839\u5806\u6027\u8d28\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 node * merge ( node * u , node * v ) { if ( u == nullptr ) { return v ; } if ( v == nullptr ) { return u ; } if ( u -> priority > v -> priority ) { u -> rch = merge ( u -> rch , v ); return u ; } else { v -> lch = merge ( u , v -> lch ); return v ; } }","title":"\u5408\u5e76\uff08merge\uff09"},{"location":"ds/treap/#treap-setint","text":"","title":"\u5c06 treap \u5305\u88c5\u6210\u4e3a set&lt;int&gt;"},{"location":"ds/treap/#count","text":"\u76f4\u63a5\u4f9d\u9760\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u67e5\u627e\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int find ( node * u , int key ) { if ( u == nullptr ) { return 0 ; } if ( key == u -> key ) { return 1 ; } if ( key < u -> key ) { return find ( u -> lch , key ); } else { return find ( u -> rch , key ); } } int count ( int key ) { return find ( root , key ); }","title":"count \u51fd\u6570"},{"location":"ds/treap/#insert","text":"\u5148\u5728\u5f85\u63d2\u5165\u7684\u5173\u952e\u503c\u5904\u5c06\u6574\u68f5 treap \u5206\u88c2\uff0c\u5224\u65ad\u5173\u952e\u503c\u662f\u5426\u5df2\u63d2\u5165\u8fc7\u4e4b\u540e\u65b0\u5efa\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5305\u542b\u5f85\u63d2\u5165\u7684\u5173\u952e\u503c\uff0c\u7136\u540e\u8fdb\u884c\u4e24\u6b21\u5408\u5e76\u64cd\u4f5c\u5373\u53ef\u3002 1 2 3 4 5 6 7 void insert ( int key ) { pair < node * , node *> o = split ( root , key ); if ( find ( root , key ) == 0 ) { o . first = merge ( o . first , new node ( key )); } root = merge ( o . first , o . second ); }","title":"insert \u51fd\u6570"},{"location":"ds/treap/#erase","text":"\u5c06\u5177\u6709\u5f85\u5220\u9664\u7684\u5173\u952e\u503c\u7684\u7ed3\u70b9\u4ece\u6574\u68f5 treap \u4e2d\u5b64\u7acb\u51fa\u6765\uff08\u8fdb\u884c\u4e24\u4fa7\u5206\u88c2\u64cd\u4f5c\uff09\uff0c\u5220\u9664\u4e2d\u95f4\u7684\u4e00\u6bb5\uff08\u5177\u6709\u5f85\u5220\u9664\u5173\u952e\u503c\uff09\uff0c\u518d\u5c06\u5de6\u53f3\u4e24\u7aef\u5408\u5e76\u5373\u53ef\u3002 1 2 3 4 5 6 void erase ( int key ) { pair < node * , node *> o = split ( root , key - 1 ); pair < node * , node *> p = split ( o . second , key ); delete p . first ; root = merge ( o . first , p . second ); }","title":"erase \u51fd\u6570"},{"location":"ds/treap/#treap_1","text":"\u65cb\u8f6c treap \u5728\u505a\u666e\u901a\u5e73\u8861\u6811\u9898\u7684\u65f6\u5019\uff0c\u662f\u6240\u6709\u5e73\u8861\u6811\u4e2d\u5e38\u6570\u8f83\u5c0f\u7684 \u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\u4e3a\u65cb\u8f6c\u3002\u6027\u8d28\u4e0e\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7c7b\u4f3c \u56e0\u4e3a\u666e\u901a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4f1a\u88ab\u9012\u589e\u6216\u9012\u51cf\u7684\u6570\u636e\u5361\uff0c\u7528 treap \u5bf9\u6bcf\u4e2a\u8282\u70b9\u5b9a\u4e49\u4e00\u4e2a\u6743\u503c\uff0c\u7531 rand \u5f97\u5230\uff0c\u4ece\u800c\u9632\u6b62\u7279\u6b8a\u6570\u636e\u5361\u3002 \u6bcf\u6b21\u5220\u9664 / \u63d2\u5165\u65f6\u901a\u8fc7 rand \u503c\u51b3\u5b9a\u8981\u4e0d\u8981\u65cb\u8f6c\u5373\u53ef\uff0c\u5176\u4ed6\u64cd\u4f5c\u4e0e\u4e8c\u53c9\u641c\u7d22\u6811\u7c7b\u4f3c \u4ee5\u4e0b\u662f bzoj \u666e\u901a\u5e73\u8861\u6811\u6a21\u677f\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <algorithm> #include <cstdio> #include <iostream> #define maxn 100005 #define INF (1 << 30) int n ; struct treap { int l [ maxn ], r [ maxn ], val [ maxn ], rnd [ maxn ], size [ maxn ], w [ maxn ]; int sz , ans , rt ; inline void pushup ( int x ) { size [ x ] = size [ l [ x ]] + size [ r [ x ]] + w [ x ]; } void lrotate ( int & k ) { int t = r [ k ]; r [ k ] = l [ t ]; l [ t ] = k ; size [ t ] = size [ k ]; pushup ( k ); k = t ; } void rrotate ( int & k ) { int t = l [ k ]; l [ k ] = r [ t ]; r [ t ] = k ; size [ t ] = size [ k ]; pushup ( k ); k = t ; } void insert ( int & k , int x ) { if ( ! k ) { sz ++ ; k = sz ; size [ k ] = 1 ; w [ k ] = 1 ; val [ k ] = x ; rnd [ k ] = rand (); return ; } size [ k ] ++ ; if ( val [ k ] == x ) { w [ k ] ++ ; } else if ( val [ k ] < x ) { insert ( r [ k ], x ); if ( rnd [ r [ k ]] < rnd [ k ]) lrotate ( k ); } else { insert ( l [ k ], x ); if ( rnd [ l [ k ]] < rnd [ k ]) rrotate ( k ); } } void del ( int & k , int x ) { if ( ! k ) return ; if ( val [ k ] == x ) { if ( w [ k ] > 1 ) { w [ k ] -- ; size [ k ] -- ; return ; } if ( l [ k ] == 0 || r [ k ] == 0 ) k = l [ k ] + r [ k ]; else if ( rnd [ l [ k ]] < rnd [ r [ k ]]) { rrotate ( k ); del ( k , x ); } else { lrotate ( k ); del ( k , x ); } } else if ( val [ k ] < x ) { size [ k ] -- ; del ( r [ k ], x ); } else { size [ k ] -- ; del ( l [ k ], x ); } } int queryrank ( int k , int x ) { if ( ! k ) return 0 ; if ( val [ k ] == x ) return size [ l [ k ]] + 1 ; else if ( x > val [ k ]) { return size [ l [ k ]] + w [ k ] + queryrank ( r [ k ], x ); } else return queryrank ( l [ k ], x ); } int querynum ( int k , int x ) { if ( ! k ) return 0 ; if ( x <= size [ l [ k ]]) return querynum ( l [ k ], x ); else if ( x > size [ l [ k ]] + w [ k ]) return querynum ( r [ k ], x - size [ l [ k ]] - w [ k ]); else return val [ k ]; } void querypre ( int k , int x ) { if ( ! k ) return ; if ( val [ k ] < x ) ans = k , querypre ( r [ k ], x ); else querypre ( l [ k ], x ); } void querysub ( int k , int x ) { if ( ! k ) return ; if ( val [ k ] > x ) ans = k , querysub ( l [ k ], x ); else querysub ( r [ k ], x ); } } T ; int main () { srand ( 123 ); scanf ( \"%d\" , & n ); int opt , x ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & opt , & x ); if ( opt == 1 ) T . insert ( T . rt , x ); else if ( opt == 2 ) T . del ( T . rt , x ); else if ( opt == 3 ) { printf ( \"%d \\n \" , T . queryrank ( T . rt , x )); } else if ( opt == 4 ) { printf ( \"%d \\n \" , T . querynum ( T . rt , x )); } else if ( opt == 5 ) { T . ans = 0 ; T . querypre ( T . rt , x ); printf ( \"%d \\n \" , T . val [ T . ans ]); } else if ( opt == 6 ) { T . ans = 0 ; T . querysub ( T . rt , x ); printf ( \"%d \\n \" , T . val [ T . ans ]); } } return 0 ; }","title":"\u65cb\u8f6c treap"},{"location":"ds/tree-decompose/","text":"","title":"\u6811\u5206\u5757"},{"location":"ds/virtual-tree/","text":"\u5f15\u5b50 \u00b6 BZOJ - 2286 \u6d88\u8017\u6218 Description \u00b6 \u5728\u4e00\u573a\u6218\u4e89\u4e2d\uff0c\u6218\u573a\u7531 n n \u4e2a\u5c9b\u5c7f\u548c n-1 n-1 \u4e2a\u6865\u6881\u7ec4\u6210\uff0c\u4fdd\u8bc1\u6bcf\u4e24\u4e2a\u5c9b\u5c7f\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84\u53ef\u8fbe\u3002\u73b0\u5728\uff0c\u6211\u519b\u5df2\u7ecf\u4fa6\u67e5\u5230\u654c\u519b\u7684\u603b\u90e8\u5728\u7f16\u53f7\u4e3a 1 1 \u7684\u5c9b\u5c7f\uff0c\u800c\u4e14\u4ed6\u4eec\u5df2\u7ecf\u6ca1\u6709\u8db3\u591f\u591a\u7684\u80fd\u6e90\u7ef4\u7cfb\u6218\u6597\uff0c\u6211\u519b\u80dc\u5229\u5728\u671b\u3002\u5df2\u77e5\u5728\u5176\u4ed6 k k \u4e2a\u5c9b\u5c7f\u4e0a\u6709\u4e30\u5bcc\u80fd\u6e90\uff0c\u4e3a\u4e86\u9632\u6b62\u654c\u519b\u83b7\u53d6\u80fd\u6e90\uff0c\u6211\u519b\u7684\u4efb\u52a1\u662f\u70b8\u6bc1\u4e00\u4e9b\u6865\u6881\uff0c\u4f7f\u5f97\u654c\u519b\u4e0d\u80fd\u5230\u8fbe\u4efb\u4f55\u80fd\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\u3002\u7531\u4e8e\u4e0d\u540c\u6865\u6881\u7684\u6750\u8d28\u548c\u7ed3\u6784\u4e0d\u540c\uff0c\u6240\u4ee5\u70b8\u6bc1\u4e0d\u540c\u7684\u6865\u6881\u6709\u4e0d\u540c\u7684\u4ee3\u4ef7\uff0c\u6211\u519b\u5e0c\u671b\u5728\u6ee1\u8db3\u76ee\u6807\u7684\u540c\u65f6\u4f7f\u5f97\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\uff0c\u654c\u519b\u6709\u4e00\u53f0\u795e\u79d8\u673a\u5668\u3002\u5373\u4f7f\u6211\u519b\u5207\u65ad\u6240\u6709\u80fd\u6e90\u4e4b\u540e\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u7528\u90a3\u53f0\u673a\u5668\u3002\u673a\u5668\u4ea7\u751f\u7684\u6548\u679c\u4e0d\u4ec5\u4ec5\u4f1a\u4fee\u590d\u6240\u6709\u6211\u519b\u70b8\u6bc1\u7684\u6865\u6881\uff0c\u800c\u4e14\u4f1a\u91cd\u65b0\u968f\u673a\u8d44\u6e90\u5206\u5e03\uff08\u4f46\u53ef\u4ee5\u4fdd\u8bc1\u7684\u662f\uff0c\u8d44\u6e90\u4e0d\u4f1a\u5206\u5e03\u5230 1 1 \u53f7\u5c9b\u5c7f\u4e0a\uff09\u3002\u4e0d\u8fc7\u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\u4e86\u8fd9\u53f0\u673a\u5668\u53ea\u80fd\u591f\u4f7f\u7528 m m \u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u6b21\u4efb\u52a1\u5b8c\u6210\u5373\u53ef\u3002 Input \u00b6 \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 n n \uff0c\u4ee3\u8868\u5c9b\u5c7f\u6570\u91cf\u3002 \u63a5\u4e0b\u6765 n-1 \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 u,v,w u,v,w \uff0c\u4ee3\u8868 u u \u53f7\u5c9b\u5c7f\u548c v v \u53f7\u5c9b\u5c7f\u7531\u4e00\u6761\u4ee3\u4ef7\u4e3a c c \u7684\u6865\u6881\u76f4\u63a5\u76f8\u8fde\uff0c\u4fdd\u8bc1 1\\le u,v\\le n 1\\le u,v\\le n \u4e14 1\\le c\\le 10^5 1\\le c\\le 10^5 \u3002 \u7b2c n+1 n+1 \u884c\uff0c\u4e00\u4e2a\u6574\u6570 m m \uff0c\u4ee3\u8868\u654c\u65b9\u673a\u5668\u80fd\u4f7f\u7528\u7684\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 m m \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 k_i k_i \uff0c\u4ee3\u8868\u7b2c i i \u6b21\u540e\uff0c\u6709 k_i k_i \u4e2a\u5c9b\u5c7f\u8d44\u6e90\u4e30\u5bcc\uff0c\u63a5\u4e0b\u6765 k k \u4e2a\u6574\u6570 h_1,h_2,\\cdots ,h_k h_1,h_2,\\cdots ,h_k \uff0c\u8868\u793a\u8d44\u6e90\u4e30\u5bcc\u5c9b\u5c7f\u7684\u7f16\u53f7\u3002 Output \u00b6 \u8f93\u51fa\u6709 m m \u884c\uff0c\u5206\u522b\u4ee3\u8868\u6bcf\u6b21\u4efb\u52a1\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 Sample Input \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 10 1 5 13 1 9 6 2 1 19 2 4 8 2 3 91 5 6 8 7 5 4 7 8 31 10 7 9 3 2 10 6 4 5 7 8 3 3 9 4 6 Sample Output \u00b6 1 2 3 12 32 22 HINT \u00b6 \u5bf9\u4e8e 100\\% 100\\% \u7684\u6570\u636e\uff0c 2\\le n\\le 2.5\\times 10^5,m\\ge 1,\\sum k_i\\le 5\\times 10^5,1\\le k_i\\le n-1 2\\le n\\le 2.5\\times 10^5,m\\ge 1,\\sum k_i\\le 5\\times 10^5,1\\le k_i\\le n-1 \u3002 Source \u00b6 Stage2 day2 \u865a\u6811 Virtual Tree \u00b6 \u5bf9\u4e8e\u4e0a\u9762\u90a3\u9898\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u2014\u2014\u5982\u679c\u6811\u7684\u70b9\u6570\u5f88\u5c11\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8dd1 DP\u3002 \u9996\u5148\u6211\u4eec\u79f0\u67d0\u6b21\u8be2\u95ee\u4e2d\u88ab\u9009\u4e2d\u7684\u70b9\u4e3a\u2014\u2014 \u300c\u5173\u952e\u70b9\u300d \u3002 \u8bbe Dp[i] Dp[i] \u8868\u793a\u2014\u2014\u4f7f i i \u4e0d\u4e0e\u5176\u5b50\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u5173\u952e\u70b9\u8054\u901a\u7684 \u6700\u5c0f\u4ee3\u4ef7 \u3002 \u8bbe w[a,b] w[a,b] \u8868\u793a a a \u4e0e b b \u4e4b\u95f4\u7684\u8fb9\u7684\u6743\u503c\u3002 \u5219\uff1a \u82e5 son[i] son[i] \u4e0d\u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} \uff1b \u82e5 son[i] son[i] \u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + w[i,son[i]] Dp[i]=Dp[i] + w[i,son[i]] \u3002 \u5f88\u597d\uff0c\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4efd O(n\\times q) O(n\\times q) \u7684\u4ee3\u7801\u3002 \u542c\u8d77\u6765\u5f88\u6709\u610f\u601d\u3002 \u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u2014\u2014\u5176\u5b9e\u5f88\u591a\u70b9\u662f\u6ca1\u6709\u7528\u7684\u3002 \u6bd4\u5982\u4e0b\u56fe\uff1a \u56fe\u4e2d\u53ea\u6709\u4e24\u4e2a\u7ea2\u8272\u7684\u70b9\u662f \u5173\u952e\u70b9 \uff0c\u800c\u522b\u7684\u9ed1\u8272\u7684\u70b9\u5168\u90fd\u662f\u300c\u975e\u5173\u952e\u70b9\u300d\u3002\u4e00\u53f7\u8282\u70b9\uff08\u654c\u4eba\u6240\u5728\u4e4b\u5904\uff09\u662f\u6811\u9876\u7684\u90a3\u4e2a\u6807\u4e86 1 1 \u7684\u8282\u70b9\u3002 \u5bf9\u4e8e\u8fd9\u9898\u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u7ea2\u8272\u7684\u70b9\u65e0\u6cd5\u5230\u8fbe 1 1 \u53f7\u8282\u70b9\u5c31\u884c\u4e86\u3002 \u901a\u8fc7\u8089\u773c\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\u2014\u2014 1 1 \u53f7\u8282\u70b9\u7684\u53f3\u5b50\u6811\uff08\u867d\u7136\u5b9e\u9645\u4e0a\u53ef\u80fd\u6709\u591a\u4e2a\u5b50\u6811\uff0c\u4f46\u8fd9\u91cc\u53ea\u6709\u4e24\u4e2a\u5b50\u6811\uff0c\u6240\u4ee5\u6682\u65f6\u8fd9\u4e48\u79f0\u547c\u4e86\uff09\u4e00\u4e2a\u7ea2\u8272\u8282\u70b9\u90fd\u6728\u6709\uff0c \u6240\u4ee5\u6ca1\u5fc5\u8981\u53bb DP \u5b83 \uff0c\u4e0d\u662f\u5417\uff1f \u89c2\u5bdf\u9898\u76ee\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u7ea2\u8272\u70b9\uff08\u5173\u952e\u70b9\uff09\u7684\u603b\u6570\u662f\u4e0e n n \u540c\u9636\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b9e\u9645\u4e0a\u4e00\u6b21\u8be2\u95ee\u4e2d\u7ea2\u8272\u7684\u70b9\u5bf9\u4e8e\u6574\u68f5\u6811\u6765\u8bf4\u662f\u5f88\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u80fd\u8ba9\u590d\u6742\u5ea6\u7531\u7ea2\u8272\u70b9\u7684\u603b\u6570\u6765\u51b3\u5b9a\u5c31\u597d\u4e86\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981 \u6d53\u7f29\u4fe1\u606f\uff0c\u628a\u4e00\u6574\u9897\u5927\u6811\u6d53\u7f29\u6210\u4e00\u9897\u5c0f\u6811 \u3002 \u7531\u6b64\u6211\u4eec\u5f15\u51fa\u4e86 \u300c\u865a\u6811\u300d \u8fd9\u4e2a\u6982\u5ff5\u3002 \u6211\u4eec\u5148\u76f4\u89c2\u5730\u6765\u770b\u770b\u865a\u6811\u7684\u6837\u5b50\u3002 \u4e0b\u56fe\u4e2d\uff0c\u5de6\u8fb9\u4e3a\u539f\u6811\uff0c\u53f3\u8fb9\u4e3a\u751f\u6210\u7684\u65b0\u7684\u865a\u6811\u3002 \u770b\u660e\u767d\u4e86\u5417\uff1f \u56e0\u4e3a\u4efb\u610f\u4e24\u4e2a\u5173\u952e\u70b9\u7684 LCA \u4e5f\u662f\u9700\u8981\u4fdd\u5b58\u91cd\u8981\u4fe1\u606f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5b83\u4eec\u7684 LCA\uff0c\u4e5f\u5c31\u662f\u865a\u6811\u4e2d\u4e0d\u4e00\u5b9a\u53ea\u6709\u5173\u952e\u70b9\u3002 \u4e0d\u96be\u53d1\u73b0\u865a\u6811\u4e2d\u7956\u5148 -> \u540e\u4ee3\u7684\u5173\u7cfb\u5e76\u4e0d\u4f1a\u6539\u53d8\u3002\uff08\u5c31\u662f\u4e0d\u4f1a\u51fa\u73b0\u539f\u672c a a \u662f b b \u7684\u7956\u5148\u7ed3\u679c\u540e\u9762 a a \u53d8\u6210 b b \u7684\u540e\u4ee3\u4e86\u4e4b\u7c7b\u7684\u9b3c\u4e8b\uff09 \u4f46\u6211\u4eec\u4e0d\u53ef\u80fd O(k^2) O(k^2) \u66b4\u529b\u679a\u4e3e LCA\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u2014\u2014\u9996\u5148\u5c06\u5173\u952e\u70b9\u6309 DFS \u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6392\u5b8c\u5e8f\u4ee5\u540e\u76f8\u90bb\u7684\u4e24\u4e2a\u5173\u952e\u70b9\uff08\u76f8\u90bb\u6307\u7684\u662f\u5728\u6392\u5e8f\u540e\u7684\u5e8f\u5217\u4e2d\u4e0b\u8868\u5dee\u503c\u7684\u7edd\u5bf9\u503c\u7b49\u4e8e 1\uff09\u6c42\u4e00\u4e0b LCA\uff0c\u5e76\u628a\u5b83\u52a0\u5165\u865a\u6811\u3002 \u56e0\u4e3a\u53ef\u80fd\u591a\u4e2a\u8282\u70b9\u7684 LCA \u53ef\u80fd\u662f\u540c\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u591a\u6b21\u5c06\u5b83\u52a0\u5165\u865a\u6811\u3002 \u975e\u5e38\u76f4\u89c2\u7684\u4e00\u4e2a\u65b9\u6cd5\u662f\uff1a \u5c06\u5173\u952e\u70b9\u6309 DFS \u5e8f\u6392\u5e8f\uff1b for \u4e00\u904d\uff0c\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u7684\u5173\u952e\u70b9\u6c42\u4e00\u4e0b LCA\uff0c\u5e76\u4e14\u54c8\u5e0c\u8868\u5224\u91cd\uff1b \u7136\u540e\u6839\u636e\u539f\u6811\u4e2d\u7684\u7956\u5148 -> \u540e\u4ee3\u5173\u7cfb\u5efa\u6811\uff08\u7136\u800c\u6211\u5e76\u4e0d\u77e5\u9053\u600e\u4e48\u5efa\u6811\uff09\u3002 \u2026\u2026 \u611f\u89c9\u5f88\u4e0d\u53ef\u505a\u7684\u6837\u5b50\u3002<(=\u2518\uffe3\u0414\uffe3)\u2518\u2567\u2550\u2567 \u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u63d0\u51fa\u4e00\u79cd\u7528\u5355\u8c03\u6808\u7684\u505a\u6cd5\u3002 \u5728\u63d0\u51fa\u65b9\u6848\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u786e\u8ba4\u4e00\u4e2a\u4e8b\u5b9e\u2014\u2014\u5728\u865a\u6811\u91cc\uff0c\u53ea\u8981\u4fdd\u8bc1\u7956\u5148 -> \u540e\u4ee3\u7684\u5173\u7cfb\u6ca1\u6709\u6539\u53d8\uff0c\u5c31\u53ef\u4ee5\u968f\u610f\u6dfb\u52a0\u8282\u70b9\u3002 \u4e5f\u5c31\u662f\uff0c\u5982\u679c\u6211\u4eec\u4e50\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u6811\u4e2d\u6240\u6709\u7684\u70b9\u90fd\u52a0\u5165\u865a\u6811\u4e2d\uff0c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4 WA\uff08\u867d\u7136\u4f1a\u5bfc\u81f4 TLE\uff09\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u9996\u5148\u5c06 1 1 \u53f7\u8282\u70b9\u52a0\u5165\u865a\u6811\u4e2d\uff0c\u5e76\u4e14\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002 \u597d\uff0c\u5f00\u59cb\u8bb2\u600e\u4e48\u7528\u5355\u8c03\u6808\u6765\u5efa\u7acb\u4e00\u68f5\u865a\u6811\u5427\u3002 \u9996\u5148\u6211\u4eec\u8981\u660e\u786e\u4e00\u4e2a\u76ee\u7684\u2014\u2014\u6211\u4eec\u8981\u7528\u5355\u8c03\u6808\u6765\u7ef4\u62a4\u4e00\u6761\u865a\u6811\u4e0a\u7684\u94fe\u3002 \u4e5f\u5c31\u662f\u4e00\u4e2a\u6808\u91cc\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u5728\u865a\u6811\u4e0a\u4e5f\u662f\u76f8\u90bb\u7684\uff0c\u800c\u4e14\u6808\u662f\u4ece\u5e95\u90e8\u5230\u6808\u9996\u5355\u8c03\u9012\u589e\u7684\uff08\u6307\u7684\u662f\u6808\u4e2d\u8282\u70b9 DFS \u5e8f\u5355\u8c03\u9012\u589e\uff09\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u67d0\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u5c31\u662f\u6808\u4e2d\u5b83\u4e0b\u9762\u7684\u90a3\u4e2a\u8282\u70b9\u3002 \u9996\u5148\u6211\u4eec\u5728\u6808\u4e2d\u6dfb\u52a0\u8282\u70b9 1 1 \u3002 \u7136\u540e\u63a5\u4e0b\u6765\u6309\u7167 DFS \u5e8f\u4ece\u5c0f\u5230\u8fbe\u6dfb\u52a0\u5173\u952e\u8282\u70b9\u3002 \u5047\u5982\u5f53\u524d\u7684\u8282\u70b9\u4e0e\u6808\u9876\u8282\u70b9\u7684 LCA \u5c31\u662f\u6808\u9876\u8282\u70b9\u7684\u8bdd\uff0c\u5219\u8bf4\u660e\u5b83\u4eec\u662f\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u3002\u6240\u4ee5\u76f4\u63a5\u628a\u5f53\u524d\u8282\u70b9\u5165\u6808\u5c31\u884c\u4e86\u3002 \u5047\u5982\u5f53\u524d\u8282\u70b9\u4e0e\u6808\u9876\u8282\u70b9\u7684 LCA \u4e0d\u662f\u6808\u9876\u8282\u70b9\u7684\u8bdd\uff0c\u6bd4\u5982\u8fd9\u6837\u2014\u2014 \u90a3\u5c31\u2026\u2026 \u975e\u5e38\u5c34\u5c2c\u4e86 \u663e\u7136\uff0c\u5f53\u524d\u5355\u8c03\u6808\u7ef4\u62a4\u7684\u94fe\u662f\uff1a \u800c\u6211\u4eec\u9700\u8981\u628a\u94fe\u53d8\u6210\uff1a \u90a3\u4e48\u6211\u4eec\u5c31\u865a\u6811\u4e2d\u8fde\u4e0a\u8fd9\u4e9b\u8fb9\uff1a \u5e76\u4e14\u628a\u8fd9\u4e24\u4e2a\u70b9\u4ece\u6808\u4e2d\u5f39\u51fa\uff1a \u5047\u5982\u5f39\u51fa\u4ee5\u540e\u53d1\u73b0\u6808\u9996\u4e0d\u662f LCA \u7684\u8bdd\u8981\u8ba9 LCA \u5165\u6808\u3002 \u518d\u628a\u5f53\u524d\u8282\u70b9\u5165\u6808\u5c31\u884c\u4e86\u3002 \u6253\u4e2a\u6bd4\u65b9\u5427\u3002 \u5047\u5982\u90a3\u68f5\u6811\u957f\u8fd9\u6837\uff1a \u90a3\u4e48\u6b65\u9aa4\u662f\u8fd9\u6837\u7684\uff1a \u5c06 3 \u4e2a\u5173\u952e\u70b9 6,4,7 6,4,7 \uff08\u6211\u6545\u610f\u6253\u4e71\u4e86\uff09\u6309\u7167 DFS \u5e8f\u6392\u5e8f\uff0c\u5f97\u5230\u5e8f\u5217 4,6,7 4,6,7 \u3002 \u5c06\u70b9 1 1 \u5165\u6808\u3002 \u53d6\u5e8f\u5217\u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u4e3a 4 4 \u3002\u518d\u53d6\u6808\u9876\u5143\u7d20\uff0c\u4e3a 1 1 \u3002\u6c42 1 1 \u548c 4 4 \u7684 LCA LCA \uff1a LCA(1,4)=1 LCA(1,4)=1 \u3002 \u53d1\u73b0 LCA(1,4)= LCA(1,4)= \u6808\u9876\u5143\u7d20\uff0c\u8bf4\u660e\u5b83\u4eec\u5728\u865a\u6811\u7684\u4e00\u6761\u94fe\u4e0a\uff0c\u6240\u4ee5\u76f4\u63a5\u628a\u5f53\u524d\u8282\u70b9 4 4 \u5165\u6808\uff0c\u5f53\u524d\u6808\u4e3a 4,1 4,1 \u3002 \u53d6\u5e8f\u5217\u7b2c\u4e8c\u4e2a\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u4e3a 6 6 \u3002\u518d\u53d6\u6808\u9876\u5143\u7d20\uff0c\u4e3a 4 4 \u3002\u6c42 6 6 \u548c 4 4 \u7684 LCA LCA \uff1a LCA(6,4)=1 LCA(6,4)=1 \u3002 \u53d1\u73b0 LCA(6,4)\\neq LCA(6,4)\\neq \u6808\u9876\u5143\u7d20\uff0c\u8fdb\u5165\u5224\u65ad\u9636\u6bb5\u3002 \u5224\u65ad\u9636\u6bb5\uff1a\u53d1\u73b0\u6808\u9876\u8282\u70b9 4 4 \u7684 DFS \u5e8f\u662f\u5927\u4e8e LCA(6,4) LCA(6,4) \u7684\uff0c\u4f46\u662f\u6b21\u5927\u8282\u70b9\uff08\u6808\u9876\u8282\u70b9\u4e0b\u9762\u7684\u90a3\u4e2a\u8282\u70b9\uff09 1 1 \u7684 DFS \u5e8f\u662f\u7b49\u4e8e LCA LCA \u7684\uff08\u5176\u5b9e DFS \u5e8f\u76f8\u7b49\u8bf4\u660e\u8282\u70b9\u4e5f\u76f8\u7b49\uff09\uff0c\u8bf4\u660e LCA LCA \u5df2\u7ecf\u5165\u6808\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fde\u63a5 1->4 1->4 \u7684\u8fb9\uff0c\u4e5f\u5c31\u662f LCA LCA \u5230\u6808\u9876\u5143\u7d20\u7684\u8fb9\u3002\u5e76\u628a 4 4 \u4ece\u6808\u4e2d\u5f39\u51fa\u3002 \u7ed3\u675f\u4e86\u5224\u65ad\u9636\u6bb5\uff0c\u5c06 6 6 \u5165\u6808\uff0c\u5f53\u524d\u6808\u4e3a 6,1 6,1 \u3002 \u53d6\u5e8f\u5217\u7b2c\u4e09\u4e2a\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u4e3a 7 7 \u3002\u518d\u53d6\u6808\u9876\u5143\u7d20\uff0c\u4e3a 6 6 \u3002\u6c42 7 7 \u548c 6 6 \u7684 LCA LCA \uff1a LCA(7,6)=3 LCA(7,6)=3 \u3002 \u53d1\u73b0 LCA(7,6)\\neq LCA(7,6)\\neq \u6808\u9876\u5143\u7d20\uff0c\u8fdb\u5165\u5224\u65ad\u9636\u6bb5\u3002 \u5224\u65ad\u9636\u6bb5\uff1a\u53d1\u73b0\u6808\u9876\u8282\u70b9 6 6 \u7684 DFS \u5e8f\u662f\u5927\u4e8e LCA(7,6) LCA(7,6) \u7684\uff0c\u4f46\u662f\u6b21\u5927\u8282\u70b9\uff08\u6808\u9876\u8282\u70b9\u4e0b\u9762\u7684\u90a3\u4e2a\u8282\u70b9\uff09 1 1 \u7684 DFS \u5e8f\u662f\u5c0f\u4e8e LCA LCA \u7684\uff0c\u8bf4\u660e LCA LCA \u8fd8\u6ca1\u6709\u5165\u8fc7\u6808\uff0c\u6240\u4ee5\u76f4\u63a5\u8fde\u63a5 3->6 3->6 \u7684\u8fb9\uff0c\u4e5f\u5c31\u662f LCA LCA \u5230\u6808\u9876\u5143\u7d20\u7684\u8fb9\u3002\u628a 6 6 \u4ece\u6808\u4e2d\u5f39\u51fa\uff0c\u5e76\u4e14\u628a LCA(6,7) LCA(6,7) \u5165\u6808\u3002 \u7ed3\u675f\u4e86\u5224\u65ad\u9636\u6bb5\uff0c\u5c06 7 7 \u5165\u6808\uff0c\u5f53\u524d\u6808\u4e3a 1,3,7 1,3,7 \u3002 \u53d1\u73b0\u5e8f\u5217\u91cc\u7684 3 \u4e2a\u8282\u70b9\u5df2\u7ecf\u5168\u90e8\u52a0\u5165\u8fc7\u6808\u4e86\uff0c\u9000\u51fa\u5faa\u73af\u3002 \u6b64\u65f6\u6808\u4e2d\u8fd8\u6709 3 \u4e2a\u8282\u70b9\uff1a 1, 3,7 1, 3,7 \uff0c\u5f88\u660e\u663e\u5b83\u4eec\u662f\u4e00\u6761\u94fe\u4e0a\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u94fe\u63a5\uff1a 1->3 1->3 \u548c 3->7 3->7 \u7684\u8fb9\u3002 \u865a\u6811\u5c31\u5efa\u5b8c\u5566\uff01 \u5176\u4e2d\u6709\u5f88\u591a\u7ec6\u8282\uff0c\u6bd4\u5982\u6211\u662f\u7528\u4e34\u63a5\u8868\u5b58\u56fe\u7684\u65b9\u5f0f\u5b58\u865a\u6811\u7684\uff0c\u6240\u4ee5\u9700\u8981\u6e05\u7a7a\u4e34\u63a5\u8868\u3002\u4f46\u662f\u76f4\u63a5\u6e05\u7a7a\u6574\u4e2a\u4e34\u63a5\u8868\u662f\u5f88\u6162\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728 \u6709\u4e00\u4e2a\u4ece\u672a\u5165\u6808\u7684\u5143\u7d20\u5165\u6808\u7684\u65f6\u5019\u6e05\u7a7a\u8be5\u5143\u7d20\u5bf9\u5e94\u7684\u4e34\u63a5\u8868 \u5373\u53ef\u3002 \u5efa\u7acb\u865a\u6811\u7684 C++ \u4ee3\u7801\u5927\u6982\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; // 1\u53f7\u8282\u70b9\u5165\u6808\uff0c\u6e05\u7a7a1\u53f7\u8282\u70b9\u5bf9\u5e94\u7684\u4e34\u63a5\u8868\uff0c\u8bbe\u7f6e\u4e34\u63a5\u8868\u8fb9\u6570\u4e3a1 for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) //\u5982\u679c1\u53f7\u8282\u70b9\u662f\u5173\u952e\u8282\u70b9\u5c31\u4e0d\u8981\u91cd\u590d\u6dfb\u52a0 { l = lca ( h [ i ], sta [ top ]); //\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u4e0e\u6808\u9876\u8282\u70b9\u7684LCA if ( l != sta [ top ]) //\u5982\u679cLCA\u548c\u6808\u9876\u5143\u7d20\u4e0d\u540c\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u4e0d\u518d\u5f53\u524d\u6808\u6240\u5b58\u7684\u94fe\u4e0a { while ( id [ l ] < id [ sta [ top - 1 ]]) //\u5f53\u6b21\u5927\u8282\u70b9\u7684Dfs\u5e8f\u5927\u4e8eLCA\u7684Dfs\u5e8f g . push ( sta [ top - 1 ], sta [ top ]), top -- ; //\u628a\u4e0e\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684\u94fe\u4e0d\u91cd\u5408\u7684\u94fe\u8fde\u63a5\u6389\u5e76\u4e14\u5f39\u51fa if ( id [ l ] > id [ sta [ top - 1 ]]) //\u5982\u679cLCA\u4e0d\u7b49\u4e8e\u6b21\u5927\u8282\u70b9\uff08\u8fd9\u91cc\u7684\u5927\u4e8e\u5176\u5b9e\u548c\u4e0d\u7b49\u4e8e\u6ca1\u6709\u533a\u522b\uff09 g . head [ l ] = - 1 , g . push ( l , sta [ top ]), sta [ top ] = l ; //\u8bf4\u660eLCA\u662f\u7b2c\u4e00\u6b21\u5165\u6808\uff0c\u6e05\u7a7a\u5176\u4e34\u63a5\u8868\uff0c\u8fde\u8fb9\u540e\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u5c06LCA\u5165\u6808 else g . push ( l , sta [ top -- ]); //\u8bf4\u660eLCA\u5c31\u662f\u6b21\u5927\u8282\u70b9\uff0c\u76f4\u63a5\u5f39\u51fa\u6808\u9876\u5143\u7d20 } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; //\u5f53\u524d\u8282\u70b9\u5fc5\u7136\u662f\u7b2c\u4e00\u6b21\u5165\u6808\uff0c\u6e05\u7a7a\u4e34\u63a5\u8868\u5e76\u5165\u6808 } for ( int i = 1 ; i < top ; i += 1 ) g . push ( sta [ i ], sta [ i + 1 ]); //\u5269\u4f59\u7684\u6700\u540e\u4e00\u6761\u94fe\u8fde\u63a5\u4e00\u4e0b \u4e8e\u662f\u6211\u4eec\u5c31\u5b66\u4f1a\u4e86\u865a\u6811\u7684\u5efa\u7acb\u4e86\uff01 \u5bf9\u4e8e\u6d88\u8017\u6218\u8fd9\u9898\uff0c\u76f4\u63a5\u5728\u865a\u6811\u4e0a\u8dd1\u6700\u5f00\u59cb\u8bb2\u7684\u90a3\u4e2a DP \u5c31\u884c\u4e86\uff0c\u6211\u4eec\u7b49\u4e8e\u5229\u7528\u4e86\u865a\u6811\u6392\u9664\u4e86\u90a3\u4e9b\u6ca1\u7528\u7684\u975e\u5173\u952e\u8282\u70b9\uff01 \u82e5 son[i] son[i] \u4e0d\u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} \u82e5 son[i] son[i] \u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + w[i,son[i]] Dp[i]=Dp[i] + w[i,son[i]] \u4e8e\u662f\u8fd9\u9898\u5f88\u7b80\u5355\u5c31\u8fc7\u4e86\u3002 \u4ee3\u7801\u770b\u4e0b\u9762\u3002 \u63a8\u8350\u4e60\u9898 \u00b6 BZOJ - 2286 \u6d88\u8017\u6218 \u00b6 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <bits/stdc++.h> #define NS (250005) #define LGS (18) using namespace std ; typedef long long LL ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], w [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b , int c ) { nxt [ sz ] = head [ a ], to [ sz ] = b , w [ sz ] = c , head [ a ] = sz ++ ; } int & operator []( const int a ) { return to [ a ]; } } g ; int n , pre [ NS ][ LGS + 1 ], dep [ NS ], mx [ NS ][ LGS + 1 ], id [ NS ], dfn ; int m , k , h [ NS ], sta [ NS ], top , MX ; LL f [ NS ]; bool book [ NS ]; void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn ; for ( int i = 1 ; i <= LGS ; i += 1 ) { pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; mx [ a ][ i ] = min ( mx [ a ][ i - 1 ], mx [ pre [ a ][ i - 1 ]][ i - 1 ]); } for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) mx [ g [ i ]][ 0 ] = g . w [ i ], Init ( g [ i ], a ); } int lca ( int a , int b ) { MX = INT_MAX ; if ( dep [ a ] > dep [ b ]) swap ( a , b ); for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( dep [ pre [ b ][ i ]] >= dep [ a ]) MX = min ( MX , mx [ b ][ i ]), b = pre [ b ][ i ]; if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) { MX = min ( MX , min ( mx [ a ][ i ], mx [ b ][ i ])); a = pre [ a ][ i ], b = pre [ b ][ i ]; } return pre [ a ][ 0 ]; } bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } void Dp ( int a ) { f [ a ] = 0 ; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) { Dp ( g [ i ]); if ( book [ g [ i ]]) f [ a ] += g . w [ i ]; else f [ a ] += min (( LL ) g . w [ i ], f [ g [ i ]]); } } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b , c ; i < n ; i += 1 ) IN ( a ), IN ( b ), IN ( c ), g . push ( a , b , c ), g . push ( b , a , c ); Init ( 1 , 0 ), IN ( m ); while ( m -- ) { IN ( k ); for ( int i = 1 ; i <= k ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 ; sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) { l = lca ( sta [ top ], h [ i ]); if ( l != sta [ top ]) { while ( id [ l ] < id [ sta [ top - 1 ]]) { lca ( sta [ top - 1 ], sta [ top ]); g . push ( sta [ top - 1 ], sta [ top ], MX ); top -- ; } if ( id [ l ] > id [ sta [ top - 1 ]]) { g . head [ l ] = - 1 , lca ( l , sta [ top ]); g . push ( l , sta [ top ], MX ), sta [ top ] = l ; } else lca ( l , sta [ top ]), g . push ( l , sta [ top -- ], MX ); } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) lca ( sta [ i ], sta [ i + 1 ]), g . push ( sta [ i ], sta [ i + 1 ], MX ); Dp ( 1 ), printf ( \"%lld \\n \" , f [ 1 ]); for ( int i = 1 ; i <= k ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; } BZOJ - 3611 \u5927\u5de5\u7a0b \u00b6 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <bits/stdc++.h> #define NS (1000005) #define LGS (20) #define INF (100000000) using namespace std ; typedef long long LL ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b ) { nxt [ sz ] = head [ a ], to [ sz ] = b , head [ a ] = sz ++ ; } int operator []( const int a ) { return to [ a ]; } } g ; int n , id [ NS ], dfn , q , k , h [ NS ], sz [ NS ], mn [ NS ], mx [ NS ], mnans , mxans ; int pre [ NS ][ LGS + 1 ], dep [ NS ]; int sta [ NS ], top ; bool book [ NS ]; LL f [ NS ], tot ; void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn ; for ( int i = 1 ; i <= LGS ; i += 1 ) pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) Init ( g [ i ], a ); } int lca ( int a , int b ) { if ( dep [ a ] > dep [ b ]) swap ( a , b ); for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( dep [ pre [ b ][ i ]] >= dep [ a ]) b = pre [ b ][ i ]; if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) a = pre [ a ][ i ], b = pre [ b ][ i ]; return pre [ a ][ 0 ]; } bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } void Dp ( int a ) { sz [ a ] = book [ a ], f [ a ] = 0 ; if ( book [ a ]) mn [ a ] = mx [ a ] = 0 ; else mn [ a ] = INF , mx [ a ] = - INF ; for ( int i = g . head [ a ], l ; ~ i ; i = g . nxt [ i ]) { Dp ( g [ i ]), l = dep [ g [ i ]] - dep [ a ]; tot += ( f [ a ] + sz [ a ] * l ) * sz [ g [ i ]] + f [ g [ i ]] * sz [ a ]; sz [ a ] += sz [ g [ i ]], f [ a ] += f [ g [ i ]] + l * sz [ g [ i ]]; mnans = min ( mnans , mn [ a ] + mn [ g [ i ]] + l ); mxans = max ( mxans , mx [ a ] + mx [ g [ i ]] + l ); mn [ a ] = min ( mn [ a ], mn [ g [ i ]] + l ); mx [ a ] = max ( mx [ a ], mx [ g [ i ]] + l ); } } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b ; i < n ; i += 1 ) IN ( a ), IN ( b ), g . push ( a , b ), g . push ( b , a ); Init ( 1 , 0 ), IN ( q ); while ( q -- ) { IN ( k ); for ( int i = 1 ; i <= k ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 ; sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) { l = lca ( h [ i ], sta [ top ]); if ( l != sta [ top ]) { while ( id [ l ] < id [ sta [ top - 1 ]]) g . push ( sta [ top - 1 ], sta [ top ]), top -- ; if ( id [ l ] > id [ sta [ top - 1 ]]) g . head [ l ] = - 1 , g . push ( l , sta [ top ]), sta [ top ] = l ; else g . push ( l , sta [ top -- ]); } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) g . push ( sta [ i ], sta [ i + 1 ]); mnans = INF , mxans = - INF , tot = 0 , Dp ( 1 ); printf ( \"%lld %d %d \\n \" , tot , mnans , mxans ); for ( int i = 1 ; i <= k ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; } CF613D Kingdom and its Cities \u00b6 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> #define NS (100005) #define LGS (17) using namespace std ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b ) { nxt [ sz ] = head [ a ], to [ sz ] = b , head [ a ] = sz ++ ; } int operator []( const int a ) { return to [ a ]; } } g ; int n , id [ NS ], dfn , q , k , h [ NS ], c [ NS ]; int pre [ NS ][ LGS + 1 ], dep [ NS ]; int sta [ NS ], top ; bool book [ NS ]; void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn ; for ( int i = 1 ; i <= LGS ; i += 1 ) pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) Init ( g [ i ], a ); } int lca ( int a , int b ) { if ( dep [ a ] > dep [ b ]) swap ( a , b ); for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( dep [ pre [ b ][ i ]] >= dep [ a ]) b = pre [ b ][ i ]; if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) a = pre [ a ][ i ], b = pre [ b ][ i ]; return pre [ a ][ 0 ]; } bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } int Dp ( int a ) { int tot = 0 , ans = 0 ; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) ans += Dp ( g [ i ]), tot += c [ g [ i ]]; if ( book [ a ]) c [ a ] = 1 , ans += tot ; else if ( tot > 1 ) c [ a ] = 0 , ans ++ ; else c [ a ] = tot ; return ans ; } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b ; i < n ; i += 1 ) IN ( a ), IN ( b ), g . push ( a , b ), g . push ( b , a ); Init ( 1 , 0 ), IN ( q ); while ( q -- ) { IN ( k ); for ( int i = 1 ; i <= k ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 ; for ( int i = 1 ; i <= k ; i += 1 ) if ( book [ pre [ h [ i ]][ 0 ]]) { puts ( \"-1\" ); goto end ; } sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) { l = lca ( h [ i ], sta [ top ]); if ( l != sta [ top ]) { while ( id [ l ] < id [ sta [ top - 1 ]]) g . push ( sta [ top - 1 ], sta [ top ]), top -- ; if ( id [ l ] > id [ sta [ top - 1 ]]) g . head [ l ] = - 1 , g . push ( l , sta [ top ]), sta [ top ] = l ; else g . push ( l , sta [ top -- ]); } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) g . push ( sta [ i ], sta [ i + 1 ]); printf ( \"%d \\n \" , Dp ( 1 )); end : for ( int i = 1 ; i <= k ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; } BZOJ - 3572 \u4e16\u754c\u6811 \u00b6 \uff08\u4e27\u5fc3\u75c5\u72c2\u554a\uff09 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 #include <bits/stdc++.h> #define NS (300005) #define LGS (19) #define FIR first #define SEC second using namespace std ; typedef pair < int , int > PII ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b ) { nxt [ sz ] = head [ a ], to [ sz ] = b , head [ a ] = sz ++ ; } int operator []( const int a ) { return to [ a ]; } } g ; int n , m , q , h [ NS ], arr [ NS ], ans [ NS ]; int pre [ NS ][ LGS + 1 ], dep [ NS ], id [ NS ], dfn , sz [ NS ]; int st [ NS ], top ; bool book [ NS ]; PII mx [ NS ]; bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn , sz [ a ] = 1 ; for ( int i = 1 ; i <= LGS ; i += 1 ) pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) Init ( g [ i ], a ), sz [ a ] += sz [ g [ i ]]; } int jump ( int a , int k ) { for ( int i = 0 ; i <= LGS ; i += 1 ) if (( k >> i ) & 1 ) a = pre [ a ][ i ]; return a ; } int lca ( int a , int b ) { if ( dep [ a ] > dep [ b ]) swap ( a , b ); b = jump ( b , dep [ b ] - dep [ a ]); if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) a = pre [ a ][ i ], b = pre [ b ][ i ]; return pre [ a ][ 0 ]; } void dfs1 ( int a ) { if ( book [ a ]) mx [ a ] = PII ( 0 , a ); else mx [ a ] = PII ( 1e8 , 0 ); for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) { dfs1 ( g [ i ]); PII tmp = mx [ g [ i ]]; tmp . FIR = dep [ mx [ g [ i ]]. SEC ] - dep [ a ]; mx [ a ] = min ( mx [ a ], tmp ); } } void dfs2 ( int a ) { for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) { PII tmp = mx [ a ]; tmp . FIR += dep [ g [ i ]] - dep [ a ]; mx [ g [ i ]] = min ( mx [ g [ i ]], tmp ), dfs2 ( g [ i ]); } ans [ mx [ a ]. SEC ] = max ( ans [ mx [ a ]. SEC ], sz [ a ]); } void dfs3 ( int a ) { for ( int i = g . head [ a ], x , y , dis , z ; ~ i ; i = g . nxt [ i ]) { if ( x = mx [ a ]. SEC , y = mx [ g [ i ]]. SEC , x != y ) { dis = dep [ x ] + dep [ y ] - ( dep [ lca ( x , y )] << 1 ); z = jump ( g [ i ], ( dis >> 1 ) - mx [ g [ i ]]. FIR ); if ( dis & 1 ) ans [ x ] -= sz [ z ]; else { if ( z != a && z != g [ i ]) z = jump ( g [ i ], ( dis >> 1 ) - mx [ g [ i ]]. FIR - ( x < y )); else if ( z == a ) z = jump ( g [ i ], ( dis >> 1 ) - mx [ g [ i ]]. FIR - 1 ); ans [ x ] -= sz [ z ]; } if ( g [ i ] != z ) ans [ y ] += sz [ z ] - sz [ g [ i ]]; } dfs3 ( g [ i ]); } } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b ; i < n ; i += 1 ) IN ( a ), IN ( b ), g . push ( a , b ), g . push ( b , a ); Init ( 1 , 0 ), IN ( q ); while ( q -- ) { IN ( m ), g . sz = 0 ; for ( int i = 1 ; i <= m ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 , ans [ arr [ i ] = h [ i ]] = 0 ; sort ( h + 1 , h + 1 + m , cmp ), st [ top = 1 ] = 1 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= m ; i += 1 ) { if ( h [ i ] == 1 ) continue ; l = lca ( st [ top ], h [ i ]); if ( l != st [ top ]) { while ( id [ l ] < id [ st [ top - 1 ]]) g . push ( st [ top - 1 ], st [ top ]), top -- ; if ( id [ l ] > id [ st [ top - 1 ]]) g . head [ l ] = - 1 , g . push ( l , st [ top ]), st [ top ] = l ; else g . push ( l , st [ top -- ]); } g . head [ h [ i ]] = - 1 , st [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) g . push ( st [ i ], st [ i + 1 ]); dfs1 ( 1 ), dfs2 ( 1 ), dfs3 ( 1 ); for ( int i = 1 ; i <= m ; i += 1 ) printf ( \"%d \" , ans [ arr [ i ]]); putchar ( 10 ); for ( int i = 1 ; i <= m ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; }","title":"\u865a\u6811"},{"location":"ds/virtual-tree/#_1","text":"BZOJ - 2286 \u6d88\u8017\u6218","title":"\u5f15\u5b50"},{"location":"ds/virtual-tree/#description","text":"\u5728\u4e00\u573a\u6218\u4e89\u4e2d\uff0c\u6218\u573a\u7531 n n \u4e2a\u5c9b\u5c7f\u548c n-1 n-1 \u4e2a\u6865\u6881\u7ec4\u6210\uff0c\u4fdd\u8bc1\u6bcf\u4e24\u4e2a\u5c9b\u5c7f\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84\u53ef\u8fbe\u3002\u73b0\u5728\uff0c\u6211\u519b\u5df2\u7ecf\u4fa6\u67e5\u5230\u654c\u519b\u7684\u603b\u90e8\u5728\u7f16\u53f7\u4e3a 1 1 \u7684\u5c9b\u5c7f\uff0c\u800c\u4e14\u4ed6\u4eec\u5df2\u7ecf\u6ca1\u6709\u8db3\u591f\u591a\u7684\u80fd\u6e90\u7ef4\u7cfb\u6218\u6597\uff0c\u6211\u519b\u80dc\u5229\u5728\u671b\u3002\u5df2\u77e5\u5728\u5176\u4ed6 k k \u4e2a\u5c9b\u5c7f\u4e0a\u6709\u4e30\u5bcc\u80fd\u6e90\uff0c\u4e3a\u4e86\u9632\u6b62\u654c\u519b\u83b7\u53d6\u80fd\u6e90\uff0c\u6211\u519b\u7684\u4efb\u52a1\u662f\u70b8\u6bc1\u4e00\u4e9b\u6865\u6881\uff0c\u4f7f\u5f97\u654c\u519b\u4e0d\u80fd\u5230\u8fbe\u4efb\u4f55\u80fd\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\u3002\u7531\u4e8e\u4e0d\u540c\u6865\u6881\u7684\u6750\u8d28\u548c\u7ed3\u6784\u4e0d\u540c\uff0c\u6240\u4ee5\u70b8\u6bc1\u4e0d\u540c\u7684\u6865\u6881\u6709\u4e0d\u540c\u7684\u4ee3\u4ef7\uff0c\u6211\u519b\u5e0c\u671b\u5728\u6ee1\u8db3\u76ee\u6807\u7684\u540c\u65f6\u4f7f\u5f97\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\uff0c\u654c\u519b\u6709\u4e00\u53f0\u795e\u79d8\u673a\u5668\u3002\u5373\u4f7f\u6211\u519b\u5207\u65ad\u6240\u6709\u80fd\u6e90\u4e4b\u540e\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u7528\u90a3\u53f0\u673a\u5668\u3002\u673a\u5668\u4ea7\u751f\u7684\u6548\u679c\u4e0d\u4ec5\u4ec5\u4f1a\u4fee\u590d\u6240\u6709\u6211\u519b\u70b8\u6bc1\u7684\u6865\u6881\uff0c\u800c\u4e14\u4f1a\u91cd\u65b0\u968f\u673a\u8d44\u6e90\u5206\u5e03\uff08\u4f46\u53ef\u4ee5\u4fdd\u8bc1\u7684\u662f\uff0c\u8d44\u6e90\u4e0d\u4f1a\u5206\u5e03\u5230 1 1 \u53f7\u5c9b\u5c7f\u4e0a\uff09\u3002\u4e0d\u8fc7\u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\u4e86\u8fd9\u53f0\u673a\u5668\u53ea\u80fd\u591f\u4f7f\u7528 m m \u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u6b21\u4efb\u52a1\u5b8c\u6210\u5373\u53ef\u3002","title":"Description"},{"location":"ds/virtual-tree/#input","text":"\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 n n \uff0c\u4ee3\u8868\u5c9b\u5c7f\u6570\u91cf\u3002 \u63a5\u4e0b\u6765 n-1 \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 u,v,w u,v,w \uff0c\u4ee3\u8868 u u \u53f7\u5c9b\u5c7f\u548c v v \u53f7\u5c9b\u5c7f\u7531\u4e00\u6761\u4ee3\u4ef7\u4e3a c c \u7684\u6865\u6881\u76f4\u63a5\u76f8\u8fde\uff0c\u4fdd\u8bc1 1\\le u,v\\le n 1\\le u,v\\le n \u4e14 1\\le c\\le 10^5 1\\le c\\le 10^5 \u3002 \u7b2c n+1 n+1 \u884c\uff0c\u4e00\u4e2a\u6574\u6570 m m \uff0c\u4ee3\u8868\u654c\u65b9\u673a\u5668\u80fd\u4f7f\u7528\u7684\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 m m \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 k_i k_i \uff0c\u4ee3\u8868\u7b2c i i \u6b21\u540e\uff0c\u6709 k_i k_i \u4e2a\u5c9b\u5c7f\u8d44\u6e90\u4e30\u5bcc\uff0c\u63a5\u4e0b\u6765 k k \u4e2a\u6574\u6570 h_1,h_2,\\cdots ,h_k h_1,h_2,\\cdots ,h_k \uff0c\u8868\u793a\u8d44\u6e90\u4e30\u5bcc\u5c9b\u5c7f\u7684\u7f16\u53f7\u3002","title":"Input"},{"location":"ds/virtual-tree/#output","text":"\u8f93\u51fa\u6709 m m \u884c\uff0c\u5206\u522b\u4ee3\u8868\u6bcf\u6b21\u4efb\u52a1\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002","title":"Output"},{"location":"ds/virtual-tree/#sample-input","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 10 1 5 13 1 9 6 2 1 19 2 4 8 2 3 91 5 6 8 7 5 4 7 8 31 10 7 9 3 2 10 6 4 5 7 8 3 3 9 4 6","title":"Sample Input"},{"location":"ds/virtual-tree/#sample-output","text":"1 2 3 12 32 22","title":"Sample Output"},{"location":"ds/virtual-tree/#hint","text":"\u5bf9\u4e8e 100\\% 100\\% \u7684\u6570\u636e\uff0c 2\\le n\\le 2.5\\times 10^5,m\\ge 1,\\sum k_i\\le 5\\times 10^5,1\\le k_i\\le n-1 2\\le n\\le 2.5\\times 10^5,m\\ge 1,\\sum k_i\\le 5\\times 10^5,1\\le k_i\\le n-1 \u3002","title":"HINT"},{"location":"ds/virtual-tree/#source","text":"Stage2 day2","title":"Source"},{"location":"ds/virtual-tree/#virtual-tree","text":"\u5bf9\u4e8e\u4e0a\u9762\u90a3\u9898\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u2014\u2014\u5982\u679c\u6811\u7684\u70b9\u6570\u5f88\u5c11\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8dd1 DP\u3002 \u9996\u5148\u6211\u4eec\u79f0\u67d0\u6b21\u8be2\u95ee\u4e2d\u88ab\u9009\u4e2d\u7684\u70b9\u4e3a\u2014\u2014 \u300c\u5173\u952e\u70b9\u300d \u3002 \u8bbe Dp[i] Dp[i] \u8868\u793a\u2014\u2014\u4f7f i i \u4e0d\u4e0e\u5176\u5b50\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u5173\u952e\u70b9\u8054\u901a\u7684 \u6700\u5c0f\u4ee3\u4ef7 \u3002 \u8bbe w[a,b] w[a,b] \u8868\u793a a a \u4e0e b b \u4e4b\u95f4\u7684\u8fb9\u7684\u6743\u503c\u3002 \u5219\uff1a \u82e5 son[i] son[i] \u4e0d\u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} \uff1b \u82e5 son[i] son[i] \u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + w[i,son[i]] Dp[i]=Dp[i] + w[i,son[i]] \u3002 \u5f88\u597d\uff0c\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4efd O(n\\times q) O(n\\times q) \u7684\u4ee3\u7801\u3002 \u542c\u8d77\u6765\u5f88\u6709\u610f\u601d\u3002 \u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u2014\u2014\u5176\u5b9e\u5f88\u591a\u70b9\u662f\u6ca1\u6709\u7528\u7684\u3002 \u6bd4\u5982\u4e0b\u56fe\uff1a \u56fe\u4e2d\u53ea\u6709\u4e24\u4e2a\u7ea2\u8272\u7684\u70b9\u662f \u5173\u952e\u70b9 \uff0c\u800c\u522b\u7684\u9ed1\u8272\u7684\u70b9\u5168\u90fd\u662f\u300c\u975e\u5173\u952e\u70b9\u300d\u3002\u4e00\u53f7\u8282\u70b9\uff08\u654c\u4eba\u6240\u5728\u4e4b\u5904\uff09\u662f\u6811\u9876\u7684\u90a3\u4e2a\u6807\u4e86 1 1 \u7684\u8282\u70b9\u3002 \u5bf9\u4e8e\u8fd9\u9898\u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u7ea2\u8272\u7684\u70b9\u65e0\u6cd5\u5230\u8fbe 1 1 \u53f7\u8282\u70b9\u5c31\u884c\u4e86\u3002 \u901a\u8fc7\u8089\u773c\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\u2014\u2014 1 1 \u53f7\u8282\u70b9\u7684\u53f3\u5b50\u6811\uff08\u867d\u7136\u5b9e\u9645\u4e0a\u53ef\u80fd\u6709\u591a\u4e2a\u5b50\u6811\uff0c\u4f46\u8fd9\u91cc\u53ea\u6709\u4e24\u4e2a\u5b50\u6811\uff0c\u6240\u4ee5\u6682\u65f6\u8fd9\u4e48\u79f0\u547c\u4e86\uff09\u4e00\u4e2a\u7ea2\u8272\u8282\u70b9\u90fd\u6728\u6709\uff0c \u6240\u4ee5\u6ca1\u5fc5\u8981\u53bb DP \u5b83 \uff0c\u4e0d\u662f\u5417\uff1f \u89c2\u5bdf\u9898\u76ee\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u7ea2\u8272\u70b9\uff08\u5173\u952e\u70b9\uff09\u7684\u603b\u6570\u662f\u4e0e n n \u540c\u9636\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b9e\u9645\u4e0a\u4e00\u6b21\u8be2\u95ee\u4e2d\u7ea2\u8272\u7684\u70b9\u5bf9\u4e8e\u6574\u68f5\u6811\u6765\u8bf4\u662f\u5f88\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u80fd\u8ba9\u590d\u6742\u5ea6\u7531\u7ea2\u8272\u70b9\u7684\u603b\u6570\u6765\u51b3\u5b9a\u5c31\u597d\u4e86\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981 \u6d53\u7f29\u4fe1\u606f\uff0c\u628a\u4e00\u6574\u9897\u5927\u6811\u6d53\u7f29\u6210\u4e00\u9897\u5c0f\u6811 \u3002 \u7531\u6b64\u6211\u4eec\u5f15\u51fa\u4e86 \u300c\u865a\u6811\u300d \u8fd9\u4e2a\u6982\u5ff5\u3002 \u6211\u4eec\u5148\u76f4\u89c2\u5730\u6765\u770b\u770b\u865a\u6811\u7684\u6837\u5b50\u3002 \u4e0b\u56fe\u4e2d\uff0c\u5de6\u8fb9\u4e3a\u539f\u6811\uff0c\u53f3\u8fb9\u4e3a\u751f\u6210\u7684\u65b0\u7684\u865a\u6811\u3002 \u770b\u660e\u767d\u4e86\u5417\uff1f \u56e0\u4e3a\u4efb\u610f\u4e24\u4e2a\u5173\u952e\u70b9\u7684 LCA \u4e5f\u662f\u9700\u8981\u4fdd\u5b58\u91cd\u8981\u4fe1\u606f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5b83\u4eec\u7684 LCA\uff0c\u4e5f\u5c31\u662f\u865a\u6811\u4e2d\u4e0d\u4e00\u5b9a\u53ea\u6709\u5173\u952e\u70b9\u3002 \u4e0d\u96be\u53d1\u73b0\u865a\u6811\u4e2d\u7956\u5148 -> \u540e\u4ee3\u7684\u5173\u7cfb\u5e76\u4e0d\u4f1a\u6539\u53d8\u3002\uff08\u5c31\u662f\u4e0d\u4f1a\u51fa\u73b0\u539f\u672c a a \u662f b b \u7684\u7956\u5148\u7ed3\u679c\u540e\u9762 a a \u53d8\u6210 b b \u7684\u540e\u4ee3\u4e86\u4e4b\u7c7b\u7684\u9b3c\u4e8b\uff09 \u4f46\u6211\u4eec\u4e0d\u53ef\u80fd O(k^2) O(k^2) \u66b4\u529b\u679a\u4e3e LCA\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u2014\u2014\u9996\u5148\u5c06\u5173\u952e\u70b9\u6309 DFS \u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6392\u5b8c\u5e8f\u4ee5\u540e\u76f8\u90bb\u7684\u4e24\u4e2a\u5173\u952e\u70b9\uff08\u76f8\u90bb\u6307\u7684\u662f\u5728\u6392\u5e8f\u540e\u7684\u5e8f\u5217\u4e2d\u4e0b\u8868\u5dee\u503c\u7684\u7edd\u5bf9\u503c\u7b49\u4e8e 1\uff09\u6c42\u4e00\u4e0b LCA\uff0c\u5e76\u628a\u5b83\u52a0\u5165\u865a\u6811\u3002 \u56e0\u4e3a\u53ef\u80fd\u591a\u4e2a\u8282\u70b9\u7684 LCA \u53ef\u80fd\u662f\u540c\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u591a\u6b21\u5c06\u5b83\u52a0\u5165\u865a\u6811\u3002 \u975e\u5e38\u76f4\u89c2\u7684\u4e00\u4e2a\u65b9\u6cd5\u662f\uff1a \u5c06\u5173\u952e\u70b9\u6309 DFS \u5e8f\u6392\u5e8f\uff1b for \u4e00\u904d\uff0c\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u7684\u5173\u952e\u70b9\u6c42\u4e00\u4e0b LCA\uff0c\u5e76\u4e14\u54c8\u5e0c\u8868\u5224\u91cd\uff1b \u7136\u540e\u6839\u636e\u539f\u6811\u4e2d\u7684\u7956\u5148 -> \u540e\u4ee3\u5173\u7cfb\u5efa\u6811\uff08\u7136\u800c\u6211\u5e76\u4e0d\u77e5\u9053\u600e\u4e48\u5efa\u6811\uff09\u3002 \u2026\u2026 \u611f\u89c9\u5f88\u4e0d\u53ef\u505a\u7684\u6837\u5b50\u3002<(=\u2518\uffe3\u0414\uffe3)\u2518\u2567\u2550\u2567 \u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u63d0\u51fa\u4e00\u79cd\u7528\u5355\u8c03\u6808\u7684\u505a\u6cd5\u3002 \u5728\u63d0\u51fa\u65b9\u6848\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u786e\u8ba4\u4e00\u4e2a\u4e8b\u5b9e\u2014\u2014\u5728\u865a\u6811\u91cc\uff0c\u53ea\u8981\u4fdd\u8bc1\u7956\u5148 -> \u540e\u4ee3\u7684\u5173\u7cfb\u6ca1\u6709\u6539\u53d8\uff0c\u5c31\u53ef\u4ee5\u968f\u610f\u6dfb\u52a0\u8282\u70b9\u3002 \u4e5f\u5c31\u662f\uff0c\u5982\u679c\u6211\u4eec\u4e50\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u6811\u4e2d\u6240\u6709\u7684\u70b9\u90fd\u52a0\u5165\u865a\u6811\u4e2d\uff0c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4 WA\uff08\u867d\u7136\u4f1a\u5bfc\u81f4 TLE\uff09\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u9996\u5148\u5c06 1 1 \u53f7\u8282\u70b9\u52a0\u5165\u865a\u6811\u4e2d\uff0c\u5e76\u4e14\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002 \u597d\uff0c\u5f00\u59cb\u8bb2\u600e\u4e48\u7528\u5355\u8c03\u6808\u6765\u5efa\u7acb\u4e00\u68f5\u865a\u6811\u5427\u3002 \u9996\u5148\u6211\u4eec\u8981\u660e\u786e\u4e00\u4e2a\u76ee\u7684\u2014\u2014\u6211\u4eec\u8981\u7528\u5355\u8c03\u6808\u6765\u7ef4\u62a4\u4e00\u6761\u865a\u6811\u4e0a\u7684\u94fe\u3002 \u4e5f\u5c31\u662f\u4e00\u4e2a\u6808\u91cc\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u5728\u865a\u6811\u4e0a\u4e5f\u662f\u76f8\u90bb\u7684\uff0c\u800c\u4e14\u6808\u662f\u4ece\u5e95\u90e8\u5230\u6808\u9996\u5355\u8c03\u9012\u589e\u7684\uff08\u6307\u7684\u662f\u6808\u4e2d\u8282\u70b9 DFS \u5e8f\u5355\u8c03\u9012\u589e\uff09\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u67d0\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u5c31\u662f\u6808\u4e2d\u5b83\u4e0b\u9762\u7684\u90a3\u4e2a\u8282\u70b9\u3002 \u9996\u5148\u6211\u4eec\u5728\u6808\u4e2d\u6dfb\u52a0\u8282\u70b9 1 1 \u3002 \u7136\u540e\u63a5\u4e0b\u6765\u6309\u7167 DFS \u5e8f\u4ece\u5c0f\u5230\u8fbe\u6dfb\u52a0\u5173\u952e\u8282\u70b9\u3002 \u5047\u5982\u5f53\u524d\u7684\u8282\u70b9\u4e0e\u6808\u9876\u8282\u70b9\u7684 LCA \u5c31\u662f\u6808\u9876\u8282\u70b9\u7684\u8bdd\uff0c\u5219\u8bf4\u660e\u5b83\u4eec\u662f\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u3002\u6240\u4ee5\u76f4\u63a5\u628a\u5f53\u524d\u8282\u70b9\u5165\u6808\u5c31\u884c\u4e86\u3002 \u5047\u5982\u5f53\u524d\u8282\u70b9\u4e0e\u6808\u9876\u8282\u70b9\u7684 LCA \u4e0d\u662f\u6808\u9876\u8282\u70b9\u7684\u8bdd\uff0c\u6bd4\u5982\u8fd9\u6837\u2014\u2014 \u90a3\u5c31\u2026\u2026 \u975e\u5e38\u5c34\u5c2c\u4e86 \u663e\u7136\uff0c\u5f53\u524d\u5355\u8c03\u6808\u7ef4\u62a4\u7684\u94fe\u662f\uff1a \u800c\u6211\u4eec\u9700\u8981\u628a\u94fe\u53d8\u6210\uff1a \u90a3\u4e48\u6211\u4eec\u5c31\u865a\u6811\u4e2d\u8fde\u4e0a\u8fd9\u4e9b\u8fb9\uff1a \u5e76\u4e14\u628a\u8fd9\u4e24\u4e2a\u70b9\u4ece\u6808\u4e2d\u5f39\u51fa\uff1a \u5047\u5982\u5f39\u51fa\u4ee5\u540e\u53d1\u73b0\u6808\u9996\u4e0d\u662f LCA \u7684\u8bdd\u8981\u8ba9 LCA \u5165\u6808\u3002 \u518d\u628a\u5f53\u524d\u8282\u70b9\u5165\u6808\u5c31\u884c\u4e86\u3002 \u6253\u4e2a\u6bd4\u65b9\u5427\u3002 \u5047\u5982\u90a3\u68f5\u6811\u957f\u8fd9\u6837\uff1a \u90a3\u4e48\u6b65\u9aa4\u662f\u8fd9\u6837\u7684\uff1a \u5c06 3 \u4e2a\u5173\u952e\u70b9 6,4,7 6,4,7 \uff08\u6211\u6545\u610f\u6253\u4e71\u4e86\uff09\u6309\u7167 DFS \u5e8f\u6392\u5e8f\uff0c\u5f97\u5230\u5e8f\u5217 4,6,7 4,6,7 \u3002 \u5c06\u70b9 1 1 \u5165\u6808\u3002 \u53d6\u5e8f\u5217\u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u4e3a 4 4 \u3002\u518d\u53d6\u6808\u9876\u5143\u7d20\uff0c\u4e3a 1 1 \u3002\u6c42 1 1 \u548c 4 4 \u7684 LCA LCA \uff1a LCA(1,4)=1 LCA(1,4)=1 \u3002 \u53d1\u73b0 LCA(1,4)= LCA(1,4)= \u6808\u9876\u5143\u7d20\uff0c\u8bf4\u660e\u5b83\u4eec\u5728\u865a\u6811\u7684\u4e00\u6761\u94fe\u4e0a\uff0c\u6240\u4ee5\u76f4\u63a5\u628a\u5f53\u524d\u8282\u70b9 4 4 \u5165\u6808\uff0c\u5f53\u524d\u6808\u4e3a 4,1 4,1 \u3002 \u53d6\u5e8f\u5217\u7b2c\u4e8c\u4e2a\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u4e3a 6 6 \u3002\u518d\u53d6\u6808\u9876\u5143\u7d20\uff0c\u4e3a 4 4 \u3002\u6c42 6 6 \u548c 4 4 \u7684 LCA LCA \uff1a LCA(6,4)=1 LCA(6,4)=1 \u3002 \u53d1\u73b0 LCA(6,4)\\neq LCA(6,4)\\neq \u6808\u9876\u5143\u7d20\uff0c\u8fdb\u5165\u5224\u65ad\u9636\u6bb5\u3002 \u5224\u65ad\u9636\u6bb5\uff1a\u53d1\u73b0\u6808\u9876\u8282\u70b9 4 4 \u7684 DFS \u5e8f\u662f\u5927\u4e8e LCA(6,4) LCA(6,4) \u7684\uff0c\u4f46\u662f\u6b21\u5927\u8282\u70b9\uff08\u6808\u9876\u8282\u70b9\u4e0b\u9762\u7684\u90a3\u4e2a\u8282\u70b9\uff09 1 1 \u7684 DFS \u5e8f\u662f\u7b49\u4e8e LCA LCA \u7684\uff08\u5176\u5b9e DFS \u5e8f\u76f8\u7b49\u8bf4\u660e\u8282\u70b9\u4e5f\u76f8\u7b49\uff09\uff0c\u8bf4\u660e LCA LCA \u5df2\u7ecf\u5165\u6808\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fde\u63a5 1->4 1->4 \u7684\u8fb9\uff0c\u4e5f\u5c31\u662f LCA LCA \u5230\u6808\u9876\u5143\u7d20\u7684\u8fb9\u3002\u5e76\u628a 4 4 \u4ece\u6808\u4e2d\u5f39\u51fa\u3002 \u7ed3\u675f\u4e86\u5224\u65ad\u9636\u6bb5\uff0c\u5c06 6 6 \u5165\u6808\uff0c\u5f53\u524d\u6808\u4e3a 6,1 6,1 \u3002 \u53d6\u5e8f\u5217\u7b2c\u4e09\u4e2a\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u4e3a 7 7 \u3002\u518d\u53d6\u6808\u9876\u5143\u7d20\uff0c\u4e3a 6 6 \u3002\u6c42 7 7 \u548c 6 6 \u7684 LCA LCA \uff1a LCA(7,6)=3 LCA(7,6)=3 \u3002 \u53d1\u73b0 LCA(7,6)\\neq LCA(7,6)\\neq \u6808\u9876\u5143\u7d20\uff0c\u8fdb\u5165\u5224\u65ad\u9636\u6bb5\u3002 \u5224\u65ad\u9636\u6bb5\uff1a\u53d1\u73b0\u6808\u9876\u8282\u70b9 6 6 \u7684 DFS \u5e8f\u662f\u5927\u4e8e LCA(7,6) LCA(7,6) \u7684\uff0c\u4f46\u662f\u6b21\u5927\u8282\u70b9\uff08\u6808\u9876\u8282\u70b9\u4e0b\u9762\u7684\u90a3\u4e2a\u8282\u70b9\uff09 1 1 \u7684 DFS \u5e8f\u662f\u5c0f\u4e8e LCA LCA \u7684\uff0c\u8bf4\u660e LCA LCA \u8fd8\u6ca1\u6709\u5165\u8fc7\u6808\uff0c\u6240\u4ee5\u76f4\u63a5\u8fde\u63a5 3->6 3->6 \u7684\u8fb9\uff0c\u4e5f\u5c31\u662f LCA LCA \u5230\u6808\u9876\u5143\u7d20\u7684\u8fb9\u3002\u628a 6 6 \u4ece\u6808\u4e2d\u5f39\u51fa\uff0c\u5e76\u4e14\u628a LCA(6,7) LCA(6,7) \u5165\u6808\u3002 \u7ed3\u675f\u4e86\u5224\u65ad\u9636\u6bb5\uff0c\u5c06 7 7 \u5165\u6808\uff0c\u5f53\u524d\u6808\u4e3a 1,3,7 1,3,7 \u3002 \u53d1\u73b0\u5e8f\u5217\u91cc\u7684 3 \u4e2a\u8282\u70b9\u5df2\u7ecf\u5168\u90e8\u52a0\u5165\u8fc7\u6808\u4e86\uff0c\u9000\u51fa\u5faa\u73af\u3002 \u6b64\u65f6\u6808\u4e2d\u8fd8\u6709 3 \u4e2a\u8282\u70b9\uff1a 1, 3,7 1, 3,7 \uff0c\u5f88\u660e\u663e\u5b83\u4eec\u662f\u4e00\u6761\u94fe\u4e0a\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u94fe\u63a5\uff1a 1->3 1->3 \u548c 3->7 3->7 \u7684\u8fb9\u3002 \u865a\u6811\u5c31\u5efa\u5b8c\u5566\uff01 \u5176\u4e2d\u6709\u5f88\u591a\u7ec6\u8282\uff0c\u6bd4\u5982\u6211\u662f\u7528\u4e34\u63a5\u8868\u5b58\u56fe\u7684\u65b9\u5f0f\u5b58\u865a\u6811\u7684\uff0c\u6240\u4ee5\u9700\u8981\u6e05\u7a7a\u4e34\u63a5\u8868\u3002\u4f46\u662f\u76f4\u63a5\u6e05\u7a7a\u6574\u4e2a\u4e34\u63a5\u8868\u662f\u5f88\u6162\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728 \u6709\u4e00\u4e2a\u4ece\u672a\u5165\u6808\u7684\u5143\u7d20\u5165\u6808\u7684\u65f6\u5019\u6e05\u7a7a\u8be5\u5143\u7d20\u5bf9\u5e94\u7684\u4e34\u63a5\u8868 \u5373\u53ef\u3002 \u5efa\u7acb\u865a\u6811\u7684 C++ \u4ee3\u7801\u5927\u6982\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; // 1\u53f7\u8282\u70b9\u5165\u6808\uff0c\u6e05\u7a7a1\u53f7\u8282\u70b9\u5bf9\u5e94\u7684\u4e34\u63a5\u8868\uff0c\u8bbe\u7f6e\u4e34\u63a5\u8868\u8fb9\u6570\u4e3a1 for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) //\u5982\u679c1\u53f7\u8282\u70b9\u662f\u5173\u952e\u8282\u70b9\u5c31\u4e0d\u8981\u91cd\u590d\u6dfb\u52a0 { l = lca ( h [ i ], sta [ top ]); //\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u4e0e\u6808\u9876\u8282\u70b9\u7684LCA if ( l != sta [ top ]) //\u5982\u679cLCA\u548c\u6808\u9876\u5143\u7d20\u4e0d\u540c\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u4e0d\u518d\u5f53\u524d\u6808\u6240\u5b58\u7684\u94fe\u4e0a { while ( id [ l ] < id [ sta [ top - 1 ]]) //\u5f53\u6b21\u5927\u8282\u70b9\u7684Dfs\u5e8f\u5927\u4e8eLCA\u7684Dfs\u5e8f g . push ( sta [ top - 1 ], sta [ top ]), top -- ; //\u628a\u4e0e\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684\u94fe\u4e0d\u91cd\u5408\u7684\u94fe\u8fde\u63a5\u6389\u5e76\u4e14\u5f39\u51fa if ( id [ l ] > id [ sta [ top - 1 ]]) //\u5982\u679cLCA\u4e0d\u7b49\u4e8e\u6b21\u5927\u8282\u70b9\uff08\u8fd9\u91cc\u7684\u5927\u4e8e\u5176\u5b9e\u548c\u4e0d\u7b49\u4e8e\u6ca1\u6709\u533a\u522b\uff09 g . head [ l ] = - 1 , g . push ( l , sta [ top ]), sta [ top ] = l ; //\u8bf4\u660eLCA\u662f\u7b2c\u4e00\u6b21\u5165\u6808\uff0c\u6e05\u7a7a\u5176\u4e34\u63a5\u8868\uff0c\u8fde\u8fb9\u540e\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u5c06LCA\u5165\u6808 else g . push ( l , sta [ top -- ]); //\u8bf4\u660eLCA\u5c31\u662f\u6b21\u5927\u8282\u70b9\uff0c\u76f4\u63a5\u5f39\u51fa\u6808\u9876\u5143\u7d20 } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; //\u5f53\u524d\u8282\u70b9\u5fc5\u7136\u662f\u7b2c\u4e00\u6b21\u5165\u6808\uff0c\u6e05\u7a7a\u4e34\u63a5\u8868\u5e76\u5165\u6808 } for ( int i = 1 ; i < top ; i += 1 ) g . push ( sta [ i ], sta [ i + 1 ]); //\u5269\u4f59\u7684\u6700\u540e\u4e00\u6761\u94fe\u8fde\u63a5\u4e00\u4e0b \u4e8e\u662f\u6211\u4eec\u5c31\u5b66\u4f1a\u4e86\u865a\u6811\u7684\u5efa\u7acb\u4e86\uff01 \u5bf9\u4e8e\u6d88\u8017\u6218\u8fd9\u9898\uff0c\u76f4\u63a5\u5728\u865a\u6811\u4e0a\u8dd1\u6700\u5f00\u59cb\u8bb2\u7684\u90a3\u4e2a DP \u5c31\u884c\u4e86\uff0c\u6211\u4eec\u7b49\u4e8e\u5229\u7528\u4e86\u865a\u6811\u6392\u9664\u4e86\u90a3\u4e9b\u6ca1\u7528\u7684\u975e\u5173\u952e\u8282\u70b9\uff01 \u82e5 son[i] son[i] \u4e0d\u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} Dp[i]=Dp[i] + \\min \\{Dp[son[i]],w[i,son[i]]\\} \u82e5 son[i] son[i] \u662f\u5173\u952e\u70b9\uff1a Dp[i]=Dp[i] + w[i,son[i]] Dp[i]=Dp[i] + w[i,son[i]] \u4e8e\u662f\u8fd9\u9898\u5f88\u7b80\u5355\u5c31\u8fc7\u4e86\u3002 \u4ee3\u7801\u770b\u4e0b\u9762\u3002","title":"\u865a\u6811 Virtual Tree"},{"location":"ds/virtual-tree/#_2","text":"","title":"\u63a8\u8350\u4e60\u9898"},{"location":"ds/virtual-tree/#bzoj-2286","text":"\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <bits/stdc++.h> #define NS (250005) #define LGS (18) using namespace std ; typedef long long LL ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], w [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b , int c ) { nxt [ sz ] = head [ a ], to [ sz ] = b , w [ sz ] = c , head [ a ] = sz ++ ; } int & operator []( const int a ) { return to [ a ]; } } g ; int n , pre [ NS ][ LGS + 1 ], dep [ NS ], mx [ NS ][ LGS + 1 ], id [ NS ], dfn ; int m , k , h [ NS ], sta [ NS ], top , MX ; LL f [ NS ]; bool book [ NS ]; void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn ; for ( int i = 1 ; i <= LGS ; i += 1 ) { pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; mx [ a ][ i ] = min ( mx [ a ][ i - 1 ], mx [ pre [ a ][ i - 1 ]][ i - 1 ]); } for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) mx [ g [ i ]][ 0 ] = g . w [ i ], Init ( g [ i ], a ); } int lca ( int a , int b ) { MX = INT_MAX ; if ( dep [ a ] > dep [ b ]) swap ( a , b ); for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( dep [ pre [ b ][ i ]] >= dep [ a ]) MX = min ( MX , mx [ b ][ i ]), b = pre [ b ][ i ]; if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) { MX = min ( MX , min ( mx [ a ][ i ], mx [ b ][ i ])); a = pre [ a ][ i ], b = pre [ b ][ i ]; } return pre [ a ][ 0 ]; } bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } void Dp ( int a ) { f [ a ] = 0 ; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) { Dp ( g [ i ]); if ( book [ g [ i ]]) f [ a ] += g . w [ i ]; else f [ a ] += min (( LL ) g . w [ i ], f [ g [ i ]]); } } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b , c ; i < n ; i += 1 ) IN ( a ), IN ( b ), IN ( c ), g . push ( a , b , c ), g . push ( b , a , c ); Init ( 1 , 0 ), IN ( m ); while ( m -- ) { IN ( k ); for ( int i = 1 ; i <= k ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 ; sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) { l = lca ( sta [ top ], h [ i ]); if ( l != sta [ top ]) { while ( id [ l ] < id [ sta [ top - 1 ]]) { lca ( sta [ top - 1 ], sta [ top ]); g . push ( sta [ top - 1 ], sta [ top ], MX ); top -- ; } if ( id [ l ] > id [ sta [ top - 1 ]]) { g . head [ l ] = - 1 , lca ( l , sta [ top ]); g . push ( l , sta [ top ], MX ), sta [ top ] = l ; } else lca ( l , sta [ top ]), g . push ( l , sta [ top -- ], MX ); } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) lca ( sta [ i ], sta [ i + 1 ]), g . push ( sta [ i ], sta [ i + 1 ], MX ); Dp ( 1 ), printf ( \"%lld \\n \" , f [ 1 ]); for ( int i = 1 ; i <= k ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; }","title":"BZOJ - 2286 \u6d88\u8017\u6218"},{"location":"ds/virtual-tree/#bzoj-3611","text":"\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <bits/stdc++.h> #define NS (1000005) #define LGS (20) #define INF (100000000) using namespace std ; typedef long long LL ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b ) { nxt [ sz ] = head [ a ], to [ sz ] = b , head [ a ] = sz ++ ; } int operator []( const int a ) { return to [ a ]; } } g ; int n , id [ NS ], dfn , q , k , h [ NS ], sz [ NS ], mn [ NS ], mx [ NS ], mnans , mxans ; int pre [ NS ][ LGS + 1 ], dep [ NS ]; int sta [ NS ], top ; bool book [ NS ]; LL f [ NS ], tot ; void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn ; for ( int i = 1 ; i <= LGS ; i += 1 ) pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) Init ( g [ i ], a ); } int lca ( int a , int b ) { if ( dep [ a ] > dep [ b ]) swap ( a , b ); for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( dep [ pre [ b ][ i ]] >= dep [ a ]) b = pre [ b ][ i ]; if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) a = pre [ a ][ i ], b = pre [ b ][ i ]; return pre [ a ][ 0 ]; } bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } void Dp ( int a ) { sz [ a ] = book [ a ], f [ a ] = 0 ; if ( book [ a ]) mn [ a ] = mx [ a ] = 0 ; else mn [ a ] = INF , mx [ a ] = - INF ; for ( int i = g . head [ a ], l ; ~ i ; i = g . nxt [ i ]) { Dp ( g [ i ]), l = dep [ g [ i ]] - dep [ a ]; tot += ( f [ a ] + sz [ a ] * l ) * sz [ g [ i ]] + f [ g [ i ]] * sz [ a ]; sz [ a ] += sz [ g [ i ]], f [ a ] += f [ g [ i ]] + l * sz [ g [ i ]]; mnans = min ( mnans , mn [ a ] + mn [ g [ i ]] + l ); mxans = max ( mxans , mx [ a ] + mx [ g [ i ]] + l ); mn [ a ] = min ( mn [ a ], mn [ g [ i ]] + l ); mx [ a ] = max ( mx [ a ], mx [ g [ i ]] + l ); } } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b ; i < n ; i += 1 ) IN ( a ), IN ( b ), g . push ( a , b ), g . push ( b , a ); Init ( 1 , 0 ), IN ( q ); while ( q -- ) { IN ( k ); for ( int i = 1 ; i <= k ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 ; sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) { l = lca ( h [ i ], sta [ top ]); if ( l != sta [ top ]) { while ( id [ l ] < id [ sta [ top - 1 ]]) g . push ( sta [ top - 1 ], sta [ top ]), top -- ; if ( id [ l ] > id [ sta [ top - 1 ]]) g . head [ l ] = - 1 , g . push ( l , sta [ top ]), sta [ top ] = l ; else g . push ( l , sta [ top -- ]); } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) g . push ( sta [ i ], sta [ i + 1 ]); mnans = INF , mxans = - INF , tot = 0 , Dp ( 1 ); printf ( \"%lld %d %d \\n \" , tot , mnans , mxans ); for ( int i = 1 ; i <= k ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; }","title":"BZOJ - 3611 \u5927\u5de5\u7a0b"},{"location":"ds/virtual-tree/#cf613d-kingdom-and-its-cities","text":"\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> #define NS (100005) #define LGS (17) using namespace std ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b ) { nxt [ sz ] = head [ a ], to [ sz ] = b , head [ a ] = sz ++ ; } int operator []( const int a ) { return to [ a ]; } } g ; int n , id [ NS ], dfn , q , k , h [ NS ], c [ NS ]; int pre [ NS ][ LGS + 1 ], dep [ NS ]; int sta [ NS ], top ; bool book [ NS ]; void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn ; for ( int i = 1 ; i <= LGS ; i += 1 ) pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) Init ( g [ i ], a ); } int lca ( int a , int b ) { if ( dep [ a ] > dep [ b ]) swap ( a , b ); for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( dep [ pre [ b ][ i ]] >= dep [ a ]) b = pre [ b ][ i ]; if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) a = pre [ a ][ i ], b = pre [ b ][ i ]; return pre [ a ][ 0 ]; } bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } int Dp ( int a ) { int tot = 0 , ans = 0 ; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) ans += Dp ( g [ i ]), tot += c [ g [ i ]]; if ( book [ a ]) c [ a ] = 1 , ans += tot ; else if ( tot > 1 ) c [ a ] = 0 , ans ++ ; else c [ a ] = tot ; return ans ; } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b ; i < n ; i += 1 ) IN ( a ), IN ( b ), g . push ( a , b ), g . push ( b , a ); Init ( 1 , 0 ), IN ( q ); while ( q -- ) { IN ( k ); for ( int i = 1 ; i <= k ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 ; for ( int i = 1 ; i <= k ; i += 1 ) if ( book [ pre [ h [ i ]][ 0 ]]) { puts ( \"-1\" ); goto end ; } sort ( h + 1 , h + 1 + k , cmp ); sta [ top = 1 ] = 1 , g . sz = 0 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= k ; i += 1 ) if ( h [ i ] != 1 ) { l = lca ( h [ i ], sta [ top ]); if ( l != sta [ top ]) { while ( id [ l ] < id [ sta [ top - 1 ]]) g . push ( sta [ top - 1 ], sta [ top ]), top -- ; if ( id [ l ] > id [ sta [ top - 1 ]]) g . head [ l ] = - 1 , g . push ( l , sta [ top ]), sta [ top ] = l ; else g . push ( l , sta [ top -- ]); } g . head [ h [ i ]] = - 1 , sta [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) g . push ( sta [ i ], sta [ i + 1 ]); printf ( \"%d \\n \" , Dp ( 1 )); end : for ( int i = 1 ; i <= k ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; }","title":"CF613D Kingdom and its Cities"},{"location":"ds/virtual-tree/#bzoj-3572","text":"\uff08\u4e27\u5fc3\u75c5\u72c2\u554a\uff09 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 #include <bits/stdc++.h> #define NS (300005) #define LGS (19) #define FIR first #define SEC second using namespace std ; typedef pair < int , int > PII ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; bool flag = 0 ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) if ( c == '-' ) flag = 1 ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); if ( flag ) dig = - dig ; } struct graph { int head [ NS ], nxt [ NS << 1 ], to [ NS << 1 ], sz ; void init () { memset ( head , - 1 , sizeof ( head )), sz = 0 ; } graph () { init (); } void push ( int a , int b ) { nxt [ sz ] = head [ a ], to [ sz ] = b , head [ a ] = sz ++ ; } int operator []( const int a ) { return to [ a ]; } } g ; int n , m , q , h [ NS ], arr [ NS ], ans [ NS ]; int pre [ NS ][ LGS + 1 ], dep [ NS ], id [ NS ], dfn , sz [ NS ]; int st [ NS ], top ; bool book [ NS ]; PII mx [ NS ]; bool cmp ( int a , int b ) { return id [ a ] < id [ b ]; } void Init ( int a , int fa ) { pre [ a ][ 0 ] = fa , dep [ a ] = dep [ fa ] + 1 , id [ a ] = ++ dfn , sz [ a ] = 1 ; for ( int i = 1 ; i <= LGS ; i += 1 ) pre [ a ][ i ] = pre [ pre [ a ][ i - 1 ]][ i - 1 ]; for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) if ( g [ i ] != fa ) Init ( g [ i ], a ), sz [ a ] += sz [ g [ i ]]; } int jump ( int a , int k ) { for ( int i = 0 ; i <= LGS ; i += 1 ) if (( k >> i ) & 1 ) a = pre [ a ][ i ]; return a ; } int lca ( int a , int b ) { if ( dep [ a ] > dep [ b ]) swap ( a , b ); b = jump ( b , dep [ b ] - dep [ a ]); if ( a == b ) return a ; for ( int i = LGS ; i >= 0 ; i -= 1 ) if ( pre [ a ][ i ] != pre [ b ][ i ]) a = pre [ a ][ i ], b = pre [ b ][ i ]; return pre [ a ][ 0 ]; } void dfs1 ( int a ) { if ( book [ a ]) mx [ a ] = PII ( 0 , a ); else mx [ a ] = PII ( 1e8 , 0 ); for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) { dfs1 ( g [ i ]); PII tmp = mx [ g [ i ]]; tmp . FIR = dep [ mx [ g [ i ]]. SEC ] - dep [ a ]; mx [ a ] = min ( mx [ a ], tmp ); } } void dfs2 ( int a ) { for ( int i = g . head [ a ]; ~ i ; i = g . nxt [ i ]) { PII tmp = mx [ a ]; tmp . FIR += dep [ g [ i ]] - dep [ a ]; mx [ g [ i ]] = min ( mx [ g [ i ]], tmp ), dfs2 ( g [ i ]); } ans [ mx [ a ]. SEC ] = max ( ans [ mx [ a ]. SEC ], sz [ a ]); } void dfs3 ( int a ) { for ( int i = g . head [ a ], x , y , dis , z ; ~ i ; i = g . nxt [ i ]) { if ( x = mx [ a ]. SEC , y = mx [ g [ i ]]. SEC , x != y ) { dis = dep [ x ] + dep [ y ] - ( dep [ lca ( x , y )] << 1 ); z = jump ( g [ i ], ( dis >> 1 ) - mx [ g [ i ]]. FIR ); if ( dis & 1 ) ans [ x ] -= sz [ z ]; else { if ( z != a && z != g [ i ]) z = jump ( g [ i ], ( dis >> 1 ) - mx [ g [ i ]]. FIR - ( x < y )); else if ( z == a ) z = jump ( g [ i ], ( dis >> 1 ) - mx [ g [ i ]]. FIR - 1 ); ans [ x ] -= sz [ z ]; } if ( g [ i ] != z ) ans [ y ] += sz [ z ] - sz [ g [ i ]]; } dfs3 ( g [ i ]); } } int main ( int argc , char const * argv []) { IN ( n ); for ( int i = 1 , a , b ; i < n ; i += 1 ) IN ( a ), IN ( b ), g . push ( a , b ), g . push ( b , a ); Init ( 1 , 0 ), IN ( q ); while ( q -- ) { IN ( m ), g . sz = 0 ; for ( int i = 1 ; i <= m ; i += 1 ) IN ( h [ i ]), book [ h [ i ]] = 1 , ans [ arr [ i ] = h [ i ]] = 0 ; sort ( h + 1 , h + 1 + m , cmp ), st [ top = 1 ] = 1 , g . head [ 1 ] = - 1 ; for ( int i = 1 , l ; i <= m ; i += 1 ) { if ( h [ i ] == 1 ) continue ; l = lca ( st [ top ], h [ i ]); if ( l != st [ top ]) { while ( id [ l ] < id [ st [ top - 1 ]]) g . push ( st [ top - 1 ], st [ top ]), top -- ; if ( id [ l ] > id [ st [ top - 1 ]]) g . head [ l ] = - 1 , g . push ( l , st [ top ]), st [ top ] = l ; else g . push ( l , st [ top -- ]); } g . head [ h [ i ]] = - 1 , st [ ++ top ] = h [ i ]; } for ( int i = 1 ; i < top ; i += 1 ) g . push ( st [ i ], st [ i + 1 ]); dfs1 ( 1 ), dfs2 ( 1 ), dfs3 ( 1 ); for ( int i = 1 ; i <= m ; i += 1 ) printf ( \"%d \" , ans [ arr [ i ]]); putchar ( 10 ); for ( int i = 1 ; i <= m ; i += 1 ) book [ h [ i ]] = 0 ; } return 0 ; }","title":"BZOJ - 3572 \u4e16\u754c\u6811"},{"location":"ds/wblt/","text":"WBLT\uff0c\u5168\u79f0 Weight Balanced Leafy Tree\uff0c\u4e00\u79cd\u4e0d\u5e38\u89c1\u7684\u5e73\u8861\u6811\u5199\u6cd5\uff0c\u4f46\u662f\u5177\u6709\u5e38\u6570\u8f83\u5c0f\uff0c\u53ef\u4ee5\u5f53\u505a\u53ef\u5e76\u5806\u4f7f\u7528\u7684\u4f18\u70b9\u3002 \u7c7b\u4f3c\u4e8e WBL\uff08weight-balanced trees\uff0c\u52a0\u6743\u5e73\u8861\u6811\uff09\uff0cWBLT \u4f53\u73b0\u4e86 leafy \u7684\u6027\u8d28, \u5373\u8282\u70b9\u591a\uff0c\u600e\u4e48\u591a\u5462\uff1f \u5bf9\u4e8e n \u4e2a\u6570\uff0c\u4e0d\u540c\u4e8e treap \u7b49\uff0cWBLT \u4f1a\u5efa\u7acb 2n \u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5176\u53f3\u513f\u5b50\u7684\u6743\u503c\uff0c\u4e14\u53f3\u513f\u5b50\u7684\u6743\u503c\u5927\u4e8e\u7b49\u4e8e\u5de6\u513f\u5b50 \u6bcf\u6b21\u63d2\u5165\uff0c\u7c7b\u4f3c\u4e8e\u5806\uff0c\u9010\u6b21\u5411\u4e0b\u4ea4\u6362\u5e76\u5411\u4e0a pushup \u66f4\u65b0\u5373\u53ef\uff0c\u5220\u9664\u4e5f\u662f\u540c\u7406 \u5f53\u7136\uff0c\u5982\u679c\u8f93\u5165\u6570\u636e\u9012\u589e\u6216\u9012\u51cf\uff0cWBLT \u4f1a\u9000\u5316\u6210\u94fe\u72b6\uff0c\u4e8e\u662f\u6211\u4eec\u91c7\u7528\u65cb\u8f6c\u6765\u7ef4\u62a4\u5e73\u8861\u3002 \u56e0\u4e3a WBLT \u540c\u65f6\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u5b9e\u73b0\u5806\u548c\u53ef\u5e76\u5806\u3002 \u800c\u5728\u65cb\u8f6c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u4ea7\u751f\u5f88\u591a\u5783\u573e\u8282\u70b9\uff0c\u6211\u4eec\u91c7\u7528\u5783\u573e\u56de\u6536\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u56de\u6536\u5e9f\u5f03\u8282\u70b9\uff0c\u5c06\u5efa\u7acb\u8282\u70b9\u7684\u64cd\u4f5c\u7a0d\u4f5c\u4fee\u6539\u5373\u53ef\u3002 \u9644\u4e0a\u666e\u901a\u5e73\u8861\u6811\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #include <cstdio> #include <iostream> using namespace std ; const int maxn = 400005 ; const int ratio = 5 ; int n , cnt , fa , root ; int size [ maxn ], ls [ maxn ], rs [ maxn ], val [ maxn ]; void newnode ( int & cur , int v ) { cur = ++ cnt ; size [ cur ] = 1 ; val [ cur ] = v ; } void copynode ( int x , int y ) { size [ x ] = size [ y ]; ls [ x ] = ls [ y ]; rs [ x ] = rs [ y ]; val [ x ] = val [ y ]; } void merge ( int l , int r ) { size [ ++ cnt ] = size [ l ] + size [ r ]; val [ cnt ] = val [ r ]; ls [ cnt ] = l , rs [ cnt ] = r ; } void rotate ( int cur , bool flag ) { if ( flag ) { merge ( ls [ cur ], ls [ rs [ cur ]]); ls [ cur ] = cnt ; rs [ cur ] = rs [ rs [ cur ]]; } else { merge ( rs [ ls [ cur ]], rs [ cur ]); rs [ cur ] = cnt ; ls [ cur ] = ls [ ls [ cur ]]; } } void maintain ( int cur ) { if ( size [ ls [ cur ]] > size [ rs [ cur ]] * ratio ) rotate ( cur , 0 ); else if ( size [ rs [ cur ]] > size [ ls [ cur ]] * ratio ) rotate ( cur , 1 ); if ( size [ ls [ cur ]] > size [ rs [ cur ]] * ratio ) rotate ( ls [ cur ], 1 ), rotate ( cur , 0 ); else if ( size [ rs [ cur ]] > size [ ls [ cur ]] * ratio ) rotate ( rs [ cur ], 0 ), rotate ( cur , 1 ); } void pushup ( int cur ) { if ( ! size [ ls [ cur ]]) return ; size [ cur ] = size [ ls [ cur ]] + size [ rs [ cur ]]; val [ cur ] = val [ rs [ cur ]]; } void insert ( int cur , int x ) { if ( size [ cur ] == 1 ) { newnode ( ls [ cur ], min ( x , val [ cur ])); newnode ( rs [ cur ], max ( x , val [ cur ])); pushup ( cur ); return ; } maintain ( cur ); insert ( x > val [ ls [ cur ]] ? rs [ cur ] : ls [ cur ], x ); pushup ( cur ); } void erase ( int cur , int x ) { if ( size [ cur ] == 1 ) { cur = ls [ fa ] == cur ? rs [ fa ] : ls [ fa ]; copynode ( fa , cur ); return ; } maintain ( cur ); fa = cur ; erase ( x > val [ ls [ cur ]] ? rs [ cur ] : ls [ cur ], x ); pushup ( cur ); } int find ( int cur , int x ) { if ( size [ cur ] == x ) return val [ cur ]; maintain ( cur ); if ( x > size [ ls [ cur ]]) return find ( rs [ cur ], x - size [ ls [ cur ]]); return find ( ls [ cur ], x ); } int rnk ( int cur , int x ) { if ( size [ cur ] == 1 ) return 1 ; maintain ( cur ); // asdasdasdasd if ( x > val [ ls [ cur ]]) return rnk ( rs [ cur ], x ) + size [ ls [ cur ]]; return rnk ( ls [ cur ], x ); } int main () { scanf ( \"%d\" , & n ); newnode ( root , 2147383647 ); //\u4f7f\u6839\u4e0d\u6539\u53d8 while ( n -- ) { int s , a ; scanf ( \"%d %d\" , & s , & a ); if ( s == 1 ) insert ( root , a ); if ( s == 2 ) erase ( root , a ); if ( s == 3 ) printf ( \"%d \\n \" , rnk ( root , a )); if ( s == 4 ) printf ( \"%d \\n \" , find ( root , a )); if ( s == 5 ) printf ( \"%d \\n \" , find ( root , rnk ( root , a ) - 1 )); if ( s == 6 ) printf ( \"%d \\n \" , find ( root , rnk ( root , a + 1 ))); } return 0 ; }","title":"WBLT"},{"location":"ds/pb-ds/","text":"pb_ds \u5e93\u5168\u79f0 Policy-Based Data Structures\u3002 pb_ds \u5e93\u5c01\u88c5\u4e86\u5f88\u591a\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u54c8\u5e0c\uff08Hash\uff09\u8868\uff0c\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5b57\u5178\u6811\uff08Trie \u6811\uff09\uff0c\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u7b49\u3002 \u5c31\u50cf vector\u3001set\u3001map \u4e00\u6837\uff0c\u5176\u7ec4\u4ef6\u5747\u7b26\u5408 STL \u7684\u76f8\u5173\u63a5\u53e3\u89c4\u8303\u3002\u90e8\u5206\uff08\u5982\u4f18\u5148\u961f\u5217\uff09\u5305\u542b STL \u5185\u5bf9\u5e94\u7ec4\u4ef6\u7684\u6240\u6709\u529f\u80fd\uff0c\u4f46\u6bd4 STL \u529f\u80fd\u66f4\u591a\u3002 pb_ds \u53ea\u5728\u4f7f\u7528 libstdc++ \u4e3a\u6807\u51c6\u5e93\u7684\u7f16\u8bd1\u5668\u4e0b\u53ef\u4ee5\u7528\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u300aC++ \u7684 pb_ds \u5e93\u5728 OI \u4e2d\u7684\u5e94\u7528\u300b","title":"pb_ds \u7b80\u4ecb"},{"location":"ds/pb-ds/priority-queue/","text":"__gnu_pbds :: priority_queue \u00b6 \u9644 \uff1a \u5b98\u65b9\u6587\u6863\u5730\u5740\u2014\u2014\u590d\u6742\u5ea6\u53ca\u5e38\u6570\u6d4b\u8bd5 1 2 3 #include <ext/pb_ds/priority_queue.hpp> using namespace __gnu_pbds ; __gnu_pbds :: priority_queue < T , Compare , Tag , Allocator > \u6a21\u677f\u5f62\u53c2 \u00b6 T : \u50a8\u5b58\u7684\u5143\u7d20\u7c7b\u578b Compare : \u63d0\u4f9b\u4e25\u683c\u7684\u5f31\u5e8f\u6bd4\u8f83\u7c7b\u578b Tag : \u662f __gnu_pbds \u63d0\u4f9b\u7684\u4e0d\u540c\u7684\u4e94\u79cd\u5806\uff0cTag \u53c2\u6570\u9ed8\u8ba4\u662f pairing_heap_tag \u4e94\u79cd\u5206\u522b\u662f \uff1a pairing_heap_tag \uff1a\u914d\u5bf9\u5806 \u5b98\u65b9\u6587\u6863\u8ba4\u4e3a\u5728\u975e\u539f\u751f\u5143\u7d20 (\u5982\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53 / std :: string / pair ) \u4e2d\uff0c\u914d\u5bf9\u5806\u8868\u73b0\u6700\u597d binary_heap_tag \uff1a\u4e8c\u53c9\u5806 \u5b98\u65b9\u6587\u6863\u8ba4\u4e3a\u5728\u539f\u751f\u5143\u7d20\u4e2d\u4e8c\u53c9\u5806\u8868\u73b0\u6700\u597d\uff0c\u4e0d\u8fc7\u6211\u6d4b\u8bd5\u7684\u8868\u73b0\u5e76\u6ca1\u6709\u90a3\u4e48\u597d binomial_heap_tag \uff1a\u4e8c\u9879\u5806 \u4e8c\u9879\u5806\u5728\u5408\u5e76\u64cd\u4f5c\u7684\u8868\u73b0\u8981\u4f18\u4e8e\u914d\u5bf9\u5806 * \u4f46\u662f\u5176\u53d6\u5806\u9876\u5143\u7d20\u7684 rc_binomial_heap_tag \uff1a\u5197\u4f59\u8ba1\u6570\u4e8c\u9879\u5806 thin_heap_tag \uff1a\u9664\u4e86\u5408\u5e76\u7684\u590d\u6742\u5ea6\u90fd\u548c Fibonacci \u5806\u4e00\u6837\u7684\u4e00\u4e2a tag Allocator \uff1a\u7a7a\u95f4\u914d\u7f6e\u5668\uff0c\u7531\u4e8e OI \u4e2d\u5f88\u5c11\u51fa\u73b0\uff0c\u6545\u8fd9\u91cc\u4e0d\u505a\u8bb2\u89e3 \u7531\u4e8e\u672c\u7bc7\u6587\u7ae0\u53ea\u662f\u63d0\u4f9b\u7ed9\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u7684\u540c\u5b66\u4eec\uff0c\u6545\u5bf9\u4e8e\u540e\u56db\u4e2a tag \u53ea\u4f1a\u7b80\u5355\u7684\u4ecb\u7ecd\u590d\u6742\u5ea6\uff0c\u7b2c\u4e00\u4e2a\u4f1a\u4ecb\u7ecd\u6210\u5458\u51fd\u6570\u548c\u4f7f\u7528\u65b9\u6cd5\u3002 \u7ecf\u4f5c\u8005\u672c\u673a Core i5@3.1 GHz On macOS \u6d4b\u8bd5\u5806\u7684\u57fa\u7840\u64cd\u4f5c\uff0c\u7ed3\u5408 GNU \u5b98\u65b9\u7684\u590d\u6742\u5ea6\u6d4b\u8bd5\uff0cDijkstra \u6d4b\u8bd5\uff0c\u90fd\u8868\u660e\uff1a \u81f3\u5c11\u5bf9\u4e8e OIer \u6765\u8bb2\uff0c\u9664\u4e86\u914d\u5bf9\u5806\u7684\u5176\u4ed6 4 \u4e2a tag \u90fd\u662f\u9e21\u808b\uff0c\u8981\u4e48\u6ca1\u7528\uff0c\u8981\u4e48\u5e38\u6570\u5927\u5230\u4e0d\u5982 std \u7684\uff0c\u4e14\u6709\u53ef\u80fd\u9020\u6210 MLE\uff0c\u6545\u8fd9\u91cc\u53ea\u63a8\u8350\u7528\u9ed8\u8ba4\u7684\u914d\u5bf9\u5806\u3002\u540c\u6837\uff0c\u914d\u5bf9\u5806\u4e5f\u4f18\u4e8e algorithm \u5e93\u4e2d\u7684 make_heap() \u3002 \u6784\u9020\u65b9\u5f0f \u00b6 \u8981\u6ce8\u660e\u547d\u540d\u7a7a\u95f4\u56e0\u4e3a\u548c std \u7684\u7c7b\u540d\u79f0\u91cd\u590d\u3002 1 2 3 4 5 __gnu_pbds ::priority_queue&lt;int&gt; __gnu_pbds::priority_queue&lt;int, greater&lt;int&gt; &gt; __gnu_pbds ::priority_queue&lt;int, greater&lt;int&gt;, pairing_heap_tag&gt; __gnu_pbds ::priority_queue&lt;int&gt;::point_iterator id; // \u8fed\u4ee3\u5668 // \u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u5728modify\u548cpush\u7684\u65f6\u5019\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4e0b\u6587\u4f1a\u8be6\u7ec6\u7684\u8bb2\u4f7f\u7528\u65b9\u6cd5 id = q.push(1); \u6210\u5458\u51fd\u6570 \u00b6 push() : \u5411\u5806\u4e2d\u538b\u5165\u4e00\u4e2a\u5143\u7d20, \u8fd4\u56de\u8be5\u5143\u7d20\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 pop() : \u5c06\u5806\u9876\u5143\u7d20\u5f39\u51fa top() : \u8fd4\u56de\u5806\u9876\u5143\u7d20 size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u975e\u7a7a modify(point_iterator, const key) : \u628a\u8fed\u4ee3\u5668\u4f4d\u7f6e\u7684 key \u4fee\u6539\u4e3a\u4f20\u5165\u7684 key\uff0c\u5e76\u5bf9\u5e95\u5c42\u50a8\u5b58\u7ed3\u6784\u8fdb\u884c\u6392\u5e8f erase(point_iterator) : \u628a\u8fed\u4ee3\u5668\u4f4d\u7f6e\u7684\u952e\u503c\u4ece\u5806\u4e2d\u64e6\u9664 join(__gnu_pbds :: priority_queue &other) : \u628a other \u5408\u5e76\u5230 * this \u5e76\u628a other \u6e05\u7a7a\u3002 \u4f7f\u7528\u7684 tag \u51b3\u5b9a\u4e86\u6bcf\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a push pop modify erase Join Pairing_heap_tag O(1) O(1) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) O(1) O(1) Binary_heap_tag \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(n) \\Theta(n) \\Theta(n) \\Theta(n) \\Theta(n) \\Theta(n) Binomial_heap_tag \u6700\u574f \\Theta(\\log(n)) \\Theta(\\log(n)) \u5747\u644a O(1) O(1) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) Rc_Binomial_heap_tag O(1) O(1) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) Thin_heap_tag O(1) O(1) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(\\log(n)) \\Theta(\\log(n)) \u5747\u644a O(1) O(1) \u6700\u574f \\Theta(n) \\Theta(n) 0 \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(n) \\Theta(n) \u793a\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <algorithm> #include <cstdio> #include <ext/pb_ds/priority_queue.hpp> #include <iostream> using namespace __gnu_pbds ; // \u7531\u4e8e\u9762\u5411OIer, \u672c\u6587\u4ee5\u5e38\u7528\u5806 : pairing_heap_tag\u4f5c\u4e3a\u8303\u4f8b // \u4e3a\u4e86\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u5b9a\u4e49\u5b8f\u5982\u4e0b \uff1a #define pair_heap __gnu_pbds ::priority_queue<int> pair_heap q1 ; //\u5927\u6839\u5806, \u914d\u5bf9\u5806 pair_heap q2 ; pair_heap :: point_iterator id ; // \u4e00\u4e2a\u8fed\u4ee3\u5668 int main () { id = q1 . push ( 1 ); // \u5806\u4e2d\u5143\u7d20 \uff1a [1]; for ( int i = 2 ; i <= 5 ; i ++ ) q1 . push ( i ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 5]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 5; q1 . pop (); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4]; id = q1 . push ( 10 ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 10]; q1 . modify ( id , 1 ); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3, 4]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 4; q1 . pop (); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3]; id = q1 . push ( 7 ); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3, 7]; q1 . erase ( id ); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3]; q2 . push ( 1 ), q2 . push ( 3 ), q2 . push ( 5 ); // q1\u4e2d\u5143\u7d20 : [1, 1, 2, 3], q2\u4e2d\u5143\u7d20 : [1, 3, 5]; q2 . join ( q1 ); // q1\u4e2d\u65e0\u5143\u7d20\uff0cq2\u4e2d\u5143\u7d20 \uff1a[1, 1, 1, 2, 3, 3, 5]; }","title":"priority_queue"},{"location":"ds/pb-ds/priority-queue/#__gnu_pbds-priority_queue","text":"\u9644 \uff1a \u5b98\u65b9\u6587\u6863\u5730\u5740\u2014\u2014\u590d\u6742\u5ea6\u53ca\u5e38\u6570\u6d4b\u8bd5 1 2 3 #include <ext/pb_ds/priority_queue.hpp> using namespace __gnu_pbds ; __gnu_pbds :: priority_queue < T , Compare , Tag , Allocator >","title":"__gnu_pbds :: priority_queue"},{"location":"ds/pb-ds/priority-queue/#_1","text":"T : \u50a8\u5b58\u7684\u5143\u7d20\u7c7b\u578b Compare : \u63d0\u4f9b\u4e25\u683c\u7684\u5f31\u5e8f\u6bd4\u8f83\u7c7b\u578b Tag : \u662f __gnu_pbds \u63d0\u4f9b\u7684\u4e0d\u540c\u7684\u4e94\u79cd\u5806\uff0cTag \u53c2\u6570\u9ed8\u8ba4\u662f pairing_heap_tag \u4e94\u79cd\u5206\u522b\u662f \uff1a pairing_heap_tag \uff1a\u914d\u5bf9\u5806 \u5b98\u65b9\u6587\u6863\u8ba4\u4e3a\u5728\u975e\u539f\u751f\u5143\u7d20 (\u5982\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53 / std :: string / pair ) \u4e2d\uff0c\u914d\u5bf9\u5806\u8868\u73b0\u6700\u597d binary_heap_tag \uff1a\u4e8c\u53c9\u5806 \u5b98\u65b9\u6587\u6863\u8ba4\u4e3a\u5728\u539f\u751f\u5143\u7d20\u4e2d\u4e8c\u53c9\u5806\u8868\u73b0\u6700\u597d\uff0c\u4e0d\u8fc7\u6211\u6d4b\u8bd5\u7684\u8868\u73b0\u5e76\u6ca1\u6709\u90a3\u4e48\u597d binomial_heap_tag \uff1a\u4e8c\u9879\u5806 \u4e8c\u9879\u5806\u5728\u5408\u5e76\u64cd\u4f5c\u7684\u8868\u73b0\u8981\u4f18\u4e8e\u914d\u5bf9\u5806 * \u4f46\u662f\u5176\u53d6\u5806\u9876\u5143\u7d20\u7684 rc_binomial_heap_tag \uff1a\u5197\u4f59\u8ba1\u6570\u4e8c\u9879\u5806 thin_heap_tag \uff1a\u9664\u4e86\u5408\u5e76\u7684\u590d\u6742\u5ea6\u90fd\u548c Fibonacci \u5806\u4e00\u6837\u7684\u4e00\u4e2a tag Allocator \uff1a\u7a7a\u95f4\u914d\u7f6e\u5668\uff0c\u7531\u4e8e OI \u4e2d\u5f88\u5c11\u51fa\u73b0\uff0c\u6545\u8fd9\u91cc\u4e0d\u505a\u8bb2\u89e3 \u7531\u4e8e\u672c\u7bc7\u6587\u7ae0\u53ea\u662f\u63d0\u4f9b\u7ed9\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u7684\u540c\u5b66\u4eec\uff0c\u6545\u5bf9\u4e8e\u540e\u56db\u4e2a tag \u53ea\u4f1a\u7b80\u5355\u7684\u4ecb\u7ecd\u590d\u6742\u5ea6\uff0c\u7b2c\u4e00\u4e2a\u4f1a\u4ecb\u7ecd\u6210\u5458\u51fd\u6570\u548c\u4f7f\u7528\u65b9\u6cd5\u3002 \u7ecf\u4f5c\u8005\u672c\u673a Core i5@3.1 GHz On macOS \u6d4b\u8bd5\u5806\u7684\u57fa\u7840\u64cd\u4f5c\uff0c\u7ed3\u5408 GNU \u5b98\u65b9\u7684\u590d\u6742\u5ea6\u6d4b\u8bd5\uff0cDijkstra \u6d4b\u8bd5\uff0c\u90fd\u8868\u660e\uff1a \u81f3\u5c11\u5bf9\u4e8e OIer \u6765\u8bb2\uff0c\u9664\u4e86\u914d\u5bf9\u5806\u7684\u5176\u4ed6 4 \u4e2a tag \u90fd\u662f\u9e21\u808b\uff0c\u8981\u4e48\u6ca1\u7528\uff0c\u8981\u4e48\u5e38\u6570\u5927\u5230\u4e0d\u5982 std \u7684\uff0c\u4e14\u6709\u53ef\u80fd\u9020\u6210 MLE\uff0c\u6545\u8fd9\u91cc\u53ea\u63a8\u8350\u7528\u9ed8\u8ba4\u7684\u914d\u5bf9\u5806\u3002\u540c\u6837\uff0c\u914d\u5bf9\u5806\u4e5f\u4f18\u4e8e algorithm \u5e93\u4e2d\u7684 make_heap() \u3002","title":"\u6a21\u677f\u5f62\u53c2"},{"location":"ds/pb-ds/priority-queue/#_2","text":"\u8981\u6ce8\u660e\u547d\u540d\u7a7a\u95f4\u56e0\u4e3a\u548c std \u7684\u7c7b\u540d\u79f0\u91cd\u590d\u3002 1 2 3 4 5 __gnu_pbds ::priority_queue&lt;int&gt; __gnu_pbds::priority_queue&lt;int, greater&lt;int&gt; &gt; __gnu_pbds ::priority_queue&lt;int, greater&lt;int&gt;, pairing_heap_tag&gt; __gnu_pbds ::priority_queue&lt;int&gt;::point_iterator id; // \u8fed\u4ee3\u5668 // \u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u5728modify\u548cpush\u7684\u65f6\u5019\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4e0b\u6587\u4f1a\u8be6\u7ec6\u7684\u8bb2\u4f7f\u7528\u65b9\u6cd5 id = q.push(1);","title":"\u6784\u9020\u65b9\u5f0f"},{"location":"ds/pb-ds/priority-queue/#_3","text":"push() : \u5411\u5806\u4e2d\u538b\u5165\u4e00\u4e2a\u5143\u7d20, \u8fd4\u56de\u8be5\u5143\u7d20\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 pop() : \u5c06\u5806\u9876\u5143\u7d20\u5f39\u51fa top() : \u8fd4\u56de\u5806\u9876\u5143\u7d20 size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u975e\u7a7a modify(point_iterator, const key) : \u628a\u8fed\u4ee3\u5668\u4f4d\u7f6e\u7684 key \u4fee\u6539\u4e3a\u4f20\u5165\u7684 key\uff0c\u5e76\u5bf9\u5e95\u5c42\u50a8\u5b58\u7ed3\u6784\u8fdb\u884c\u6392\u5e8f erase(point_iterator) : \u628a\u8fed\u4ee3\u5668\u4f4d\u7f6e\u7684\u952e\u503c\u4ece\u5806\u4e2d\u64e6\u9664 join(__gnu_pbds :: priority_queue &other) : \u628a other \u5408\u5e76\u5230 * this \u5e76\u628a other \u6e05\u7a7a\u3002 \u4f7f\u7528\u7684 tag \u51b3\u5b9a\u4e86\u6bcf\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a push pop modify erase Join Pairing_heap_tag O(1) O(1) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) O(1) O(1) Binary_heap_tag \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(n) \\Theta(n) \\Theta(n) \\Theta(n) \\Theta(n) \\Theta(n) Binomial_heap_tag \u6700\u574f \\Theta(\\log(n)) \\Theta(\\log(n)) \u5747\u644a O(1) O(1) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) Rc_Binomial_heap_tag O(1) O(1) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(\\log(n)) Thin_heap_tag O(1) O(1) \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \u6700\u574f \\Theta(\\log(n)) \\Theta(\\log(n)) \u5747\u644a O(1) O(1) \u6700\u574f \\Theta(n) \\Theta(n) 0 \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) \\Theta(n) \\Theta(n)","title":"\u6210\u5458\u51fd\u6570"},{"location":"ds/pb-ds/priority-queue/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <algorithm> #include <cstdio> #include <ext/pb_ds/priority_queue.hpp> #include <iostream> using namespace __gnu_pbds ; // \u7531\u4e8e\u9762\u5411OIer, \u672c\u6587\u4ee5\u5e38\u7528\u5806 : pairing_heap_tag\u4f5c\u4e3a\u8303\u4f8b // \u4e3a\u4e86\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u5b9a\u4e49\u5b8f\u5982\u4e0b \uff1a #define pair_heap __gnu_pbds ::priority_queue<int> pair_heap q1 ; //\u5927\u6839\u5806, \u914d\u5bf9\u5806 pair_heap q2 ; pair_heap :: point_iterator id ; // \u4e00\u4e2a\u8fed\u4ee3\u5668 int main () { id = q1 . push ( 1 ); // \u5806\u4e2d\u5143\u7d20 \uff1a [1]; for ( int i = 2 ; i <= 5 ; i ++ ) q1 . push ( i ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 5]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 5; q1 . pop (); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4]; id = q1 . push ( 10 ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 10]; q1 . modify ( id , 1 ); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3, 4]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 4; q1 . pop (); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3]; id = q1 . push ( 7 ); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3, 7]; q1 . erase ( id ); // \u5806\u4e2d\u5143\u7d20 : [1, 1, 2, 3]; q2 . push ( 1 ), q2 . push ( 3 ), q2 . push ( 5 ); // q1\u4e2d\u5143\u7d20 : [1, 1, 2, 3], q2\u4e2d\u5143\u7d20 : [1, 3, 5]; q2 . join ( q1 ); // q1\u4e2d\u65e0\u5143\u7d20\uff0cq2\u4e2d\u5143\u7d20 \uff1a[1, 1, 1, 2, 3, 3, 5]; }","title":"\u793a\u4f8b"},{"location":"ds/stl/bitset/","text":"\u4ecb\u7ecd \u00b6 std :: bitset \u662f\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a \u56fa\u5b9a\u5927\u5c0f \u5e8f\u5217, \u5176\u50a8\u5b58\u7684\u6570\u636e\u53ea\u5305\u542b 0/1 \u4f17\u6240\u5468\u77e5, \u7531\u4e8e\u5185\u5b58\u5730\u5740\u662f\u6309\u5b57\u8282\u5373 byte \u5bfb\u5740, \u800c\u975e\u6bd4\u7279 bit , \u6211\u4eec\u4e00\u4e2a bool \u7c7b\u578b\u7684\u53d8\u91cf, \u867d\u7136\u53ea\u80fd\u8868\u793a 0/1 , \u4f46\u662f\u4e5f\u5360\u4e86 1byte \u7684\u5185\u5b58 bitset \u5c31\u662f\u901a\u8fc7\u56fa\u5b9a\u7684\u4f18\u5316, \u4f7f\u5f97\u4e00\u4e2a\u5b57\u8282\u7684\u516b\u4e2a\u6bd4\u7279\u80fd\u5206\u522b\u50a8\u5b58 8 \u4f4d\u7684 0/1 \u5bf9\u4e8e\u4e00\u4e2a 4 \u5b57\u8282\u7684 int \u53d8\u91cf, \u5728\u53ea\u5b58 0/1 \u7684\u610f\u4e49\u4e0b, bitset \u5360\u7528\u7a7a\u95f4\u53ea\u662f\u5176 \\frac{1}{32} \\frac{1}{32} \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u901a\u8fc7 bitset \u53ef\u4ee5\u4f7f\u4f60\u7684\u590d\u6742\u5ea6\u9664\u4ee5 32 \u5f53\u7136, vector \u7684\u4e00\u4e2a\u7279\u5316 vector<bool> \u7684\u50a8\u5b58\u65b9\u5f0f\u540c bitset \u4e00\u6837, \u533a\u522b\u5728\u4e8e\u5176\u652f\u6301\u52a8\u6001\u5f00\u7a7a\u95f4, bitset \u5219\u548c\u6211\u4eec\u4e00\u822c\u7684\u9759\u6001\u6570\u7ec4\u4e00\u6837, \u662f\u5728\u7f16\u8bd1\u65f6\u5c31\u5f00\u597d\u4e86\u7684. \u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u7528 bitset \u800c\u975e vector<bool> ? \u901a\u8fc7\u4ee5\u4e0b\u7684\u4ecb\u7ecd, \u4f60\u53ef\u4ee5\u66f4\u52a0\u8be6\u7ec6\u7684\u770b\u5230 bitset \u5177\u5907\u7684\u65b9\u4fbf\u64cd\u4f5c 1 #include <bitset> // \u5305\u542b bitset \u7684\u5934\u6587\u4ef6 \u8fd0\u7b97\u7b26 \u00b6 operator[] : \u8bbf\u95ee\u5176\u7279\u5b9a\u7684\u4e00\u4f4d operator ==/!= : \u6bd4\u8f83\u4e24\u4e2a bitset \u5185\u5bb9\u662f\u5426\u5b8c\u5168\u4e00\u6837 operator &= / |= / ^= / ~ : \u8fdb\u884c\u6309\u4f4d\u4e0e / \u6216 / \u5f02\u6216 / \u53d6\u53cd\u64cd\u4f5c operator <</>> / <<= / >>= : \u8fdb\u884c\u4e8c\u8fdb\u5236\u5de6\u79fb / \u53f3\u79fb operator <</>> : \u6d41\u8fd0\u7b97\u7b26, \u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u901a\u8fc7 cin/cout \u8fdb\u884c\u8f93\u5165\u8f93\u51fa vector<bool> \u53ea\u5177\u6709\u524d\u4e24\u9879 \u6210\u5458\u51fd\u6570 \u00b6 test() : \u5b83\u548c vector \u4e2d\u7684 at() \u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684, \u548c [] \u8fd0\u7b97\u7b26\u7684\u533a\u522b\u5c31\u662f\u8d8a\u754c\u68c0\u67e5 count() : \u8fd4\u56de true \u7684\u6570\u91cf set() : \u5c06\u6574\u4e2a bitset \u8bbe\u7f6e\u6210 true , \u4f60\u4e5f\u53ef\u4ee5\u4f20\u5165\u53c2\u6570\u4f7f\u5176\u8bbe\u7f6e\u6210\u4f60\u7684\u53c2\u6570 reset() : \u5c06\u6574\u4e2a bitset \u8bbe\u7f6e\u6210 false flip() : \u7ffb\u8f6c\u8be5\u4f4d (0 \u53d8 1,1 \u53d8 0), \u76f8\u5f53\u4e8e\u903b\u8f91\u975e / \u5f02\u6216 1 to_string() : \u8fd4\u56de\u8f6c\u6362\u6210\u7684\u5b57\u7b26\u4e32\u8868\u8fbe to_ulong() : \u8fd4\u56de\u8f6c\u6362\u6210\u7684 unsigned long \u8868\u8fbe ( long \u5728 NT \u53ca 32 \u4f4d POSIX \u7cfb\u7edf\u4e0b\u4e0e int \u4e00\u6837, \u5728 64 \u4f4d POSIX \u4e0b\u4e0e long long \u4e00\u6837) to_ullong() C++11 , \u8fd4\u56de\u8f6c\u6362\u6210\u7684 unsigned long long \u8868\u8fbe \u8fd9\u4e9b vector<bool> \u57fa\u672c\u90fd\u6ca1\u6709 \u4f5c\u7528 \u00b6 \u4e00\u822c\u6765\u8bb2, \u6211\u4eec\u53ef\u4ee5\u7528 bitset \u4f18\u5316\u4e00\u4e9b\u53ef\u884c\u6027 DP, \u6216\u8005\u7ebf\u7b5b\u7d20\u6570 ( notprime \u8fd9\u79cd bool \u6570\u7ec4\u53ef\u4ee5\u7528 bitset \u5f00\u5230 10^8 10^8 \u4e4b\u7c7b\u7684) \u5b83\u6700\u4e3b\u8981\u7684\u4f5c\u7528\u8fd8\u662f\u538b\u6389\u4e86\u5185\u5b58\u5e26\u6765\u7684\u65f6\u95f4\u4f18\u5316, \\frac{1}{32} \\frac{1}{32} \u7684\u5e38\u6570\u4f18\u5316\u5df2\u7ecf\u53ef\u4ee5\u662f\u590d\u6742\u5ea6\u7ea7\u522b\u7684\u4f18\u5316\u4e86, \u6bd4\u5982\u4e00\u4e2a N = 1000 N = 1000 \u7684 O(N^3) O(N^3) \u7b97\u6cd5, 10^9 10^9 \u663e\u7136\u5f88\u5361, \u5728\u5e38\u6570\u5927\u4e00\u70b9\u7684\u60c5\u51b5\u4e0b\u5fc5\u7136\u5361\u4e0d\u8fc7\u53bb, O(\u677e) \u4e0d\u80fd\u7b97!!!! , \u8fd9\u65f6\u5019\u5982\u679c\u6211\u4eec\u67d0\u4e00\u7ef4\u9664\u4ee5 32, \u5219\u53ef\u4ee5\u6bd4\u8f83\u4fdd\u9669\u7684\u8fc7\u4e86\u8fd9\u9053\u9898 \u5176\u5b9e bitset \u4e0d\u5149\u662f\u4e00\u4e2a\u5bb9\u5668, \u66f4\u662f\u4e00\u79cd\u601d\u60f3, \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u624b\u5199\u7684\u65b9\u5f0f, \u6765\u628a long long \u4ec0\u4e48\u7684\u538b\u6210\u6bcf bit \u8868\u793a\u4e00\u4e2a\u4fe1\u606f, \u7528 STL \u7684\u539f\u56e0\u66f4\u591a\u662f\u56e0\u4e3a\u5b83\u7684\u8fd0\u7b97\u7b26\u65b9\u4fbf","title":"bitset"},{"location":"ds/stl/bitset/#_1","text":"std :: bitset \u662f\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a \u56fa\u5b9a\u5927\u5c0f \u5e8f\u5217, \u5176\u50a8\u5b58\u7684\u6570\u636e\u53ea\u5305\u542b 0/1 \u4f17\u6240\u5468\u77e5, \u7531\u4e8e\u5185\u5b58\u5730\u5740\u662f\u6309\u5b57\u8282\u5373 byte \u5bfb\u5740, \u800c\u975e\u6bd4\u7279 bit , \u6211\u4eec\u4e00\u4e2a bool \u7c7b\u578b\u7684\u53d8\u91cf, \u867d\u7136\u53ea\u80fd\u8868\u793a 0/1 , \u4f46\u662f\u4e5f\u5360\u4e86 1byte \u7684\u5185\u5b58 bitset \u5c31\u662f\u901a\u8fc7\u56fa\u5b9a\u7684\u4f18\u5316, \u4f7f\u5f97\u4e00\u4e2a\u5b57\u8282\u7684\u516b\u4e2a\u6bd4\u7279\u80fd\u5206\u522b\u50a8\u5b58 8 \u4f4d\u7684 0/1 \u5bf9\u4e8e\u4e00\u4e2a 4 \u5b57\u8282\u7684 int \u53d8\u91cf, \u5728\u53ea\u5b58 0/1 \u7684\u610f\u4e49\u4e0b, bitset \u5360\u7528\u7a7a\u95f4\u53ea\u662f\u5176 \\frac{1}{32} \\frac{1}{32} \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u901a\u8fc7 bitset \u53ef\u4ee5\u4f7f\u4f60\u7684\u590d\u6742\u5ea6\u9664\u4ee5 32 \u5f53\u7136, vector \u7684\u4e00\u4e2a\u7279\u5316 vector<bool> \u7684\u50a8\u5b58\u65b9\u5f0f\u540c bitset \u4e00\u6837, \u533a\u522b\u5728\u4e8e\u5176\u652f\u6301\u52a8\u6001\u5f00\u7a7a\u95f4, bitset \u5219\u548c\u6211\u4eec\u4e00\u822c\u7684\u9759\u6001\u6570\u7ec4\u4e00\u6837, \u662f\u5728\u7f16\u8bd1\u65f6\u5c31\u5f00\u597d\u4e86\u7684. \u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u7528 bitset \u800c\u975e vector<bool> ? \u901a\u8fc7\u4ee5\u4e0b\u7684\u4ecb\u7ecd, \u4f60\u53ef\u4ee5\u66f4\u52a0\u8be6\u7ec6\u7684\u770b\u5230 bitset \u5177\u5907\u7684\u65b9\u4fbf\u64cd\u4f5c 1 #include <bitset> // \u5305\u542b bitset \u7684\u5934\u6587\u4ef6","title":"\u4ecb\u7ecd"},{"location":"ds/stl/bitset/#_2","text":"operator[] : \u8bbf\u95ee\u5176\u7279\u5b9a\u7684\u4e00\u4f4d operator ==/!= : \u6bd4\u8f83\u4e24\u4e2a bitset \u5185\u5bb9\u662f\u5426\u5b8c\u5168\u4e00\u6837 operator &= / |= / ^= / ~ : \u8fdb\u884c\u6309\u4f4d\u4e0e / \u6216 / \u5f02\u6216 / \u53d6\u53cd\u64cd\u4f5c operator <</>> / <<= / >>= : \u8fdb\u884c\u4e8c\u8fdb\u5236\u5de6\u79fb / \u53f3\u79fb operator <</>> : \u6d41\u8fd0\u7b97\u7b26, \u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u901a\u8fc7 cin/cout \u8fdb\u884c\u8f93\u5165\u8f93\u51fa vector<bool> \u53ea\u5177\u6709\u524d\u4e24\u9879","title":"\u8fd0\u7b97\u7b26"},{"location":"ds/stl/bitset/#_3","text":"test() : \u5b83\u548c vector \u4e2d\u7684 at() \u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684, \u548c [] \u8fd0\u7b97\u7b26\u7684\u533a\u522b\u5c31\u662f\u8d8a\u754c\u68c0\u67e5 count() : \u8fd4\u56de true \u7684\u6570\u91cf set() : \u5c06\u6574\u4e2a bitset \u8bbe\u7f6e\u6210 true , \u4f60\u4e5f\u53ef\u4ee5\u4f20\u5165\u53c2\u6570\u4f7f\u5176\u8bbe\u7f6e\u6210\u4f60\u7684\u53c2\u6570 reset() : \u5c06\u6574\u4e2a bitset \u8bbe\u7f6e\u6210 false flip() : \u7ffb\u8f6c\u8be5\u4f4d (0 \u53d8 1,1 \u53d8 0), \u76f8\u5f53\u4e8e\u903b\u8f91\u975e / \u5f02\u6216 1 to_string() : \u8fd4\u56de\u8f6c\u6362\u6210\u7684\u5b57\u7b26\u4e32\u8868\u8fbe to_ulong() : \u8fd4\u56de\u8f6c\u6362\u6210\u7684 unsigned long \u8868\u8fbe ( long \u5728 NT \u53ca 32 \u4f4d POSIX \u7cfb\u7edf\u4e0b\u4e0e int \u4e00\u6837, \u5728 64 \u4f4d POSIX \u4e0b\u4e0e long long \u4e00\u6837) to_ullong() C++11 , \u8fd4\u56de\u8f6c\u6362\u6210\u7684 unsigned long long \u8868\u8fbe \u8fd9\u4e9b vector<bool> \u57fa\u672c\u90fd\u6ca1\u6709","title":"\u6210\u5458\u51fd\u6570"},{"location":"ds/stl/bitset/#_4","text":"\u4e00\u822c\u6765\u8bb2, \u6211\u4eec\u53ef\u4ee5\u7528 bitset \u4f18\u5316\u4e00\u4e9b\u53ef\u884c\u6027 DP, \u6216\u8005\u7ebf\u7b5b\u7d20\u6570 ( notprime \u8fd9\u79cd bool \u6570\u7ec4\u53ef\u4ee5\u7528 bitset \u5f00\u5230 10^8 10^8 \u4e4b\u7c7b\u7684) \u5b83\u6700\u4e3b\u8981\u7684\u4f5c\u7528\u8fd8\u662f\u538b\u6389\u4e86\u5185\u5b58\u5e26\u6765\u7684\u65f6\u95f4\u4f18\u5316, \\frac{1}{32} \\frac{1}{32} \u7684\u5e38\u6570\u4f18\u5316\u5df2\u7ecf\u53ef\u4ee5\u662f\u590d\u6742\u5ea6\u7ea7\u522b\u7684\u4f18\u5316\u4e86, \u6bd4\u5982\u4e00\u4e2a N = 1000 N = 1000 \u7684 O(N^3) O(N^3) \u7b97\u6cd5, 10^9 10^9 \u663e\u7136\u5f88\u5361, \u5728\u5e38\u6570\u5927\u4e00\u70b9\u7684\u60c5\u51b5\u4e0b\u5fc5\u7136\u5361\u4e0d\u8fc7\u53bb, O(\u677e) \u4e0d\u80fd\u7b97!!!! , \u8fd9\u65f6\u5019\u5982\u679c\u6211\u4eec\u67d0\u4e00\u7ef4\u9664\u4ee5 32, \u5219\u53ef\u4ee5\u6bd4\u8f83\u4fdd\u9669\u7684\u8fc7\u4e86\u8fd9\u9053\u9898 \u5176\u5b9e bitset \u4e0d\u5149\u662f\u4e00\u4e2a\u5bb9\u5668, \u66f4\u662f\u4e00\u79cd\u601d\u60f3, \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u624b\u5199\u7684\u65b9\u5f0f, \u6765\u628a long long \u4ec0\u4e48\u7684\u538b\u6210\u6bcf bit \u8868\u793a\u4e00\u4e2a\u4fe1\u606f, \u7528 STL \u7684\u539f\u56e0\u66f4\u591a\u662f\u56e0\u4e3a\u5b83\u7684\u8fd0\u7b97\u7b26\u65b9\u4fbf","title":"\u4f5c\u7528"},{"location":"ds/stl/map/","text":"map \u662f\u5565\u9b3c\uff1f \u00b6 map \u662f\u5229\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684\u3002 \u5f53\u4f60\u5728\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u9700\u8981\u5b58\u50a8\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f8b\u5982\u5b58\u50a8\u5b66\u751f\u59d3\u540d\u5bf9\u5e94\u7684\u5206\u6570\uff0c\u4f8b\u5982\uff1a Tom 0 \uff0c Bob 100 \uff0c Alan 100 \u3002 \u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u4e0b\u6807\u53ea\u80fd\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u6240\u4ee5\u65e0\u6cd5\u7528\u59d3\u540d\u6765\u5b58\u50a8\uff0c\u8fd9\u4e2a\u65f6\u5019\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u4f7f\u7528 STL \u7684 map \u4e86\uff01 map \u53ef\u4efb\u610f\u7c7b\u578b\u4e3a\u4e0b\u6807\uff08\u5728 map \u4e2d\u53eb\u505a key \uff0c\u4e5f\u5c31\u662f\u7d22\u5f15\uff09\uff0c\u4e0b\u9762\u662f map \u7684\u6a21\u578b\uff1a 1 map < \u7c7b\u578b\u540d , \u7c7b\u578b\u540d > \u4f60\u60f3\u7ed9 map\u8d77\u7684\u540d\u5b57 \u5176\u4e2d\u4e24\u4e2a\u7c7b\u578b\u540d\u7b2c\u4e00\u4e2a\u662f key \uff08\u7d22\u5f15\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff09\uff0c\u7b2c\u4e8c\u4e2a\u662f value \uff08\u5bf9\u5e94\u7684\u5143\u7d20\uff09\u3002\u4f8b\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7684\u5b58\u50a8\uff1a 1 map < string , int > mp \u662f\u4e0d\u662f\u611f\u89c9\u5f88\u795e\u5947\uff1f map \u5177\u4f53\u600e\u4e48\u4f7f\u7528\uff1f \u00b6 map \u6dfb\u52a0\u5143\u7d20 \u76f4\u63a5\u5b58\uff0c\u4f8b\u5982 mp[\"Tom\"]=0 \u901a\u8fc7\u63d2\u5165\uff0c\u4f8b\u5982 mp.insert(pair<string,int>(\"Alan\",100)); \u521d\u59cb\u5316\uff08 C++11 \u53ca\u4ee5\u4e0a\uff09\u548c\u6570\u7ec4\u5dee\u4e0d\u591a\uff1a 1 map < string , int > mp = {{ \"Tom\" , 0 }, { \"Bob\" , \"100\" }, { \"Alan\" , 100 }}; map \u67e5\u627e\u5220\u9664\u5143\u7d20 \u5728\u4f60\u77e5\u9053\u67e5\u627e\u5143\u7d20\u662f\u5565\u7684\u65f6\u5019\u76f4\u63a5\u6765\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f8b\u5982\uff1a int grade=mp[\"Tom\"] \u5982\u679c\u4f60\u77e5\u9053\u4e86\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u4f46\u662f\u60f3\u77e5\u9053\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5b58\u5728 map \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 find \u51fd\u6570\u3002 \u683c\u5f0f\uff1a if(mp.find()==mp.end()) \uff0c\u610f\u601d\u662f\u662f\u5426\u8fd4\u56de\u7684\u662f map \u7684\u672b\u5c3e\uff0c\u56e0\u4e3a map \u5982\u679c\u6ca1\u6709\u67e5\u627e\u5230\u5143\u7d20\uff0c\u8fed\u4ee3\u5668\u4f1a\u8fd4\u56de\u672b\u5c3e\u3002 \u5176\u4e2d mp.end() \u8fd4\u56de\u6307\u5411 map \u5c3e\u90e8\u7684\u8fed\u4ee3\u5668\uff0c \u53e6\u5916 \u4e5f\u53ef\u4ee5\u7528 mp.count(__key) != 0 \u6765\u5224\u65ad \u5982\u679c\u4f60\u60f3\u77e5\u9053 map \u91cc\u5168\u90e8\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6700\u6b63\u786e\u7684\u505a\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u4e86\uff0c\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\uff0c\u8bf7\u67e5\u9605\u4e4b\u524d\u6587\u7ae0\u4e2d\u7684\u8fed\u4ee3\u5668\u3002 1 2 for ( iter = mp . begin (); iter != mp . end (); iter ++ ) cout << iter -> first << \" \" << iter -> second << endl ; \u5176\u4e2d mp.begin() \u8fd4\u56de\u6307\u5411 map \u5934\u90e8\u7684\u8fed\u4ee3\u5668 \u5f53\u7136\uff0c\u5982\u679c\u4f7f\u7528 C++11 \uff08\u53ca\u4ee5\u4e0a\uff09\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 C++11 \u7684\u65b0\u7279\u6027 \uff0c\u5982\u4e0b 1 2 3 for ( auto & i : mp ) { printf ( \"Key : %d, Value : %d \\n \" , i . first , i . second ); } iter->first \u662f key \u7d22\u5f15\uff0c\u4f8b\u5982 Tom \uff0c\u800c iter->second \u662f value \u3002 \u5982\u679c\u4f60\u60f3\u5220\u9664 Tom \u8fd9\u4e2a\u5143\u7d20\uff0c\u5219\u53ef\u4ee5\u5229\u7528 find \u51fd\u6570\u627e\u5230 Tom \uff0c\u7136\u540e\u518d erase \u5982\u4e0b 1 2 3 map < string , int >:: iterator it ; it = mp . find ( \"Tom\" ); mp . erase ( it ) \u5982\u679c\u4f60\u60f3\u6e05\u7a7a\u6240\u6709\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u76f4\u63a5 mp.clear() \u5176\u4ed6 \u6211\u4eec\u521a\u624d\u4ecb\u7ecd\u4e86\u6700\u5e38\u7528\u7684\uff0c\u4e0b\u9762\u662f\u5176\u4ed6\u6bd4\u8f83\u5e38\u7528\u7684\uff1a count() \u8fd4\u56de\u6307\u5b9a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \uff0c\u4f8b\u5982 mp.count() swap() \u53ef\u4ee5\u4ea4\u6362\u4e24\u4e2a map \uff0c\u4f8b\u5982 swap(m1,m2) size() \u8fd4\u56de map \u4e2d\u5143\u7d20\u7684\u4e2a\u6570 empty() \u5982\u679c map \u4e3a\u7a7a\u5219\u8fd4\u56de true \uff0c\u4f8b\u5982 mp.empty() \u3002 map \u5e38\u6570\u9760\u5f97\u4f4f\u5417\uff1f \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u7684\u3002\u65e0\u8bba\u67e5\u8be2\uff0c\u63d2\u5165\uff0c\u5220\u9664\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log N) O(\\log N) \uff0c\u904d\u5386\u662f O(N) O(N) \u3002 \u4e0d\u8fc7\u6709\u7684\u65f6\u5019\u4e0d\u4f1a\u6ee1\u8db3\u554a\uff01\u6211\u53ea\u60f3\u67e5\u8be2\u5143\u7d20\uff0c\u63d2\u5165\u5143\u7d20\uff0c\u4f46\u662f\u65f6\u95f4\u4e0d\u591f\u548b\u529e\uff1f\u8bf7\u5f80\u4e0b\u770b\uff01 \u7531\u4e8e NOIP \u4e0d\u8d44\u74f7\u5438\u6c27\uff08\u5f00\u542f O2 \u4f18\u5316\uff09\uff0c\u6240\u4ee5 NOIP \u8981\u6ce8\u610f\u662f\u5426\u4f1a\u88ab\u5361 \u66f4\u5feb\uff1a\u57fa\u4e8e Hash \u5b9e\u73b0\u7684 map \uff01 \u00b6 Note C++11 \u53ca\u4ee5\u540e\u4f7f\u7528 std::unordered_map \uff0c\u5728 <unordered_map> \u5934\u6587\u4ef6\u4e2d \u4e4b\u524d\u7684\u7248\u672c\u53ef\u4ee5\u4f7f\u7528 std::tr1::unordered_map \uff0c\u5728 <tr1/unordered_map> \u5934\u6587\u4ef6\u4e2d \u8fd9\u4e2a map \u7684\u540d\u5b57\u5c31\u662f unordered_map \u4e86\uff0c\u5b83\u7684\u67e5\u8be2\uff0c\u63d2\u5165\uff0c\u5220\u9664\u7684\u590d\u6742\u5ea6\u51e0\u4e4e\u662f O(1) O(1) \u7ea7\u522b\uff08\u6240\u6709\u7684\u64cd\u4f5c\u51e0\u4e4e\u548c map \u4e00\u6837\uff08\u6ce8\u610f unordered_map \u7528\u8fed\u4ee3\u5668\u904d\u5386\u662f\u65e0\u5e8f\u7684\uff09\u3002 \u4f46\u662f\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u4ea7\u751f\u5927\u91cf hash \u51b2\u7a81\u65f6\uff09\uff0c unordered_map \u7684\u5404\u9879\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8fbe O(n^2) O(n^2) \u3002 \uff08\u8be6\u60c5\u89c1 Codeforces \u4e0a\u53d1\u8868\u7684\u4e00\u7bc7\u5361 unordered_map \u7684\u6587\u7ae0\uff09 \u800c\u4e14\u5b83\u7684\u904d\u5386\u901f\u5ea6\u4f1a\u5f88\u6162\uff0c\u7a7a\u95f4\u5360\u7528\u7684\u4f1a\u66f4\u5927\u3002","title":"map"},{"location":"ds/stl/map/#map","text":"map \u662f\u5229\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684\u3002 \u5f53\u4f60\u5728\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u9700\u8981\u5b58\u50a8\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f8b\u5982\u5b58\u50a8\u5b66\u751f\u59d3\u540d\u5bf9\u5e94\u7684\u5206\u6570\uff0c\u4f8b\u5982\uff1a Tom 0 \uff0c Bob 100 \uff0c Alan 100 \u3002 \u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u4e0b\u6807\u53ea\u80fd\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u6240\u4ee5\u65e0\u6cd5\u7528\u59d3\u540d\u6765\u5b58\u50a8\uff0c\u8fd9\u4e2a\u65f6\u5019\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u4f7f\u7528 STL \u7684 map \u4e86\uff01 map \u53ef\u4efb\u610f\u7c7b\u578b\u4e3a\u4e0b\u6807\uff08\u5728 map \u4e2d\u53eb\u505a key \uff0c\u4e5f\u5c31\u662f\u7d22\u5f15\uff09\uff0c\u4e0b\u9762\u662f map \u7684\u6a21\u578b\uff1a 1 map < \u7c7b\u578b\u540d , \u7c7b\u578b\u540d > \u4f60\u60f3\u7ed9 map\u8d77\u7684\u540d\u5b57 \u5176\u4e2d\u4e24\u4e2a\u7c7b\u578b\u540d\u7b2c\u4e00\u4e2a\u662f key \uff08\u7d22\u5f15\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff09\uff0c\u7b2c\u4e8c\u4e2a\u662f value \uff08\u5bf9\u5e94\u7684\u5143\u7d20\uff09\u3002\u4f8b\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7684\u5b58\u50a8\uff1a 1 map < string , int > mp \u662f\u4e0d\u662f\u611f\u89c9\u5f88\u795e\u5947\uff1f","title":"map \u662f\u5565\u9b3c\uff1f"},{"location":"ds/stl/map/#map_1","text":"map \u6dfb\u52a0\u5143\u7d20 \u76f4\u63a5\u5b58\uff0c\u4f8b\u5982 mp[\"Tom\"]=0 \u901a\u8fc7\u63d2\u5165\uff0c\u4f8b\u5982 mp.insert(pair<string,int>(\"Alan\",100)); \u521d\u59cb\u5316\uff08 C++11 \u53ca\u4ee5\u4e0a\uff09\u548c\u6570\u7ec4\u5dee\u4e0d\u591a\uff1a 1 map < string , int > mp = {{ \"Tom\" , 0 }, { \"Bob\" , \"100\" }, { \"Alan\" , 100 }}; map \u67e5\u627e\u5220\u9664\u5143\u7d20 \u5728\u4f60\u77e5\u9053\u67e5\u627e\u5143\u7d20\u662f\u5565\u7684\u65f6\u5019\u76f4\u63a5\u6765\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f8b\u5982\uff1a int grade=mp[\"Tom\"] \u5982\u679c\u4f60\u77e5\u9053\u4e86\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u4f46\u662f\u60f3\u77e5\u9053\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5b58\u5728 map \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 find \u51fd\u6570\u3002 \u683c\u5f0f\uff1a if(mp.find()==mp.end()) \uff0c\u610f\u601d\u662f\u662f\u5426\u8fd4\u56de\u7684\u662f map \u7684\u672b\u5c3e\uff0c\u56e0\u4e3a map \u5982\u679c\u6ca1\u6709\u67e5\u627e\u5230\u5143\u7d20\uff0c\u8fed\u4ee3\u5668\u4f1a\u8fd4\u56de\u672b\u5c3e\u3002 \u5176\u4e2d mp.end() \u8fd4\u56de\u6307\u5411 map \u5c3e\u90e8\u7684\u8fed\u4ee3\u5668\uff0c \u53e6\u5916 \u4e5f\u53ef\u4ee5\u7528 mp.count(__key) != 0 \u6765\u5224\u65ad \u5982\u679c\u4f60\u60f3\u77e5\u9053 map \u91cc\u5168\u90e8\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6700\u6b63\u786e\u7684\u505a\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u4e86\uff0c\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\uff0c\u8bf7\u67e5\u9605\u4e4b\u524d\u6587\u7ae0\u4e2d\u7684\u8fed\u4ee3\u5668\u3002 1 2 for ( iter = mp . begin (); iter != mp . end (); iter ++ ) cout << iter -> first << \" \" << iter -> second << endl ; \u5176\u4e2d mp.begin() \u8fd4\u56de\u6307\u5411 map \u5934\u90e8\u7684\u8fed\u4ee3\u5668 \u5f53\u7136\uff0c\u5982\u679c\u4f7f\u7528 C++11 \uff08\u53ca\u4ee5\u4e0a\uff09\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 C++11 \u7684\u65b0\u7279\u6027 \uff0c\u5982\u4e0b 1 2 3 for ( auto & i : mp ) { printf ( \"Key : %d, Value : %d \\n \" , i . first , i . second ); } iter->first \u662f key \u7d22\u5f15\uff0c\u4f8b\u5982 Tom \uff0c\u800c iter->second \u662f value \u3002 \u5982\u679c\u4f60\u60f3\u5220\u9664 Tom \u8fd9\u4e2a\u5143\u7d20\uff0c\u5219\u53ef\u4ee5\u5229\u7528 find \u51fd\u6570\u627e\u5230 Tom \uff0c\u7136\u540e\u518d erase \u5982\u4e0b 1 2 3 map < string , int >:: iterator it ; it = mp . find ( \"Tom\" ); mp . erase ( it ) \u5982\u679c\u4f60\u60f3\u6e05\u7a7a\u6240\u6709\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u76f4\u63a5 mp.clear() \u5176\u4ed6 \u6211\u4eec\u521a\u624d\u4ecb\u7ecd\u4e86\u6700\u5e38\u7528\u7684\uff0c\u4e0b\u9762\u662f\u5176\u4ed6\u6bd4\u8f83\u5e38\u7528\u7684\uff1a count() \u8fd4\u56de\u6307\u5b9a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \uff0c\u4f8b\u5982 mp.count() swap() \u53ef\u4ee5\u4ea4\u6362\u4e24\u4e2a map \uff0c\u4f8b\u5982 swap(m1,m2) size() \u8fd4\u56de map \u4e2d\u5143\u7d20\u7684\u4e2a\u6570 empty() \u5982\u679c map \u4e3a\u7a7a\u5219\u8fd4\u56de true \uff0c\u4f8b\u5982 mp.empty() \u3002","title":"map  \u5177\u4f53\u600e\u4e48\u4f7f\u7528\uff1f"},{"location":"ds/stl/map/#map_2","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u7684\u3002\u65e0\u8bba\u67e5\u8be2\uff0c\u63d2\u5165\uff0c\u5220\u9664\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log N) O(\\log N) \uff0c\u904d\u5386\u662f O(N) O(N) \u3002 \u4e0d\u8fc7\u6709\u7684\u65f6\u5019\u4e0d\u4f1a\u6ee1\u8db3\u554a\uff01\u6211\u53ea\u60f3\u67e5\u8be2\u5143\u7d20\uff0c\u63d2\u5165\u5143\u7d20\uff0c\u4f46\u662f\u65f6\u95f4\u4e0d\u591f\u548b\u529e\uff1f\u8bf7\u5f80\u4e0b\u770b\uff01 \u7531\u4e8e NOIP \u4e0d\u8d44\u74f7\u5438\u6c27\uff08\u5f00\u542f O2 \u4f18\u5316\uff09\uff0c\u6240\u4ee5 NOIP \u8981\u6ce8\u610f\u662f\u5426\u4f1a\u88ab\u5361","title":"map \u5e38\u6570\u9760\u5f97\u4f4f\u5417\uff1f"},{"location":"ds/stl/map/#hash-map","text":"Note C++11 \u53ca\u4ee5\u540e\u4f7f\u7528 std::unordered_map \uff0c\u5728 <unordered_map> \u5934\u6587\u4ef6\u4e2d \u4e4b\u524d\u7684\u7248\u672c\u53ef\u4ee5\u4f7f\u7528 std::tr1::unordered_map \uff0c\u5728 <tr1/unordered_map> \u5934\u6587\u4ef6\u4e2d \u8fd9\u4e2a map \u7684\u540d\u5b57\u5c31\u662f unordered_map \u4e86\uff0c\u5b83\u7684\u67e5\u8be2\uff0c\u63d2\u5165\uff0c\u5220\u9664\u7684\u590d\u6742\u5ea6\u51e0\u4e4e\u662f O(1) O(1) \u7ea7\u522b\uff08\u6240\u6709\u7684\u64cd\u4f5c\u51e0\u4e4e\u548c map \u4e00\u6837\uff08\u6ce8\u610f unordered_map \u7528\u8fed\u4ee3\u5668\u904d\u5386\u662f\u65e0\u5e8f\u7684\uff09\u3002 \u4f46\u662f\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u4ea7\u751f\u5927\u91cf hash \u51b2\u7a81\u65f6\uff09\uff0c unordered_map \u7684\u5404\u9879\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8fbe O(n^2) O(n^2) \u3002 \uff08\u8be6\u60c5\u89c1 Codeforces \u4e0a\u53d1\u8868\u7684\u4e00\u7bc7\u5361 unordered_map \u7684\u6587\u7ae0\uff09 \u800c\u4e14\u5b83\u7684\u904d\u5386\u901f\u5ea6\u4f1a\u5f88\u6162\uff0c\u7a7a\u95f4\u5360\u7528\u7684\u4f1a\u66f4\u5927\u3002","title":"\u66f4\u5feb\uff1a\u57fa\u4e8e Hash \u5b9e\u73b0\u7684 map\uff01"},{"location":"ds/stl/priority_queue/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <queue> // std::priority_queue // \u672c\u6587\u91cc\u7684\u6240\u6709\u4f18\u5148\u961f\u5217\u90fd\u4f1a\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4 // \u5982\u679c\u4e0d\u60f3\u52a0\u547d\u540d\u7a7a\u95f4\uff0c\u9700\u8981\u4f7f\u7528\uff1ausing std::priority_queue; // \u4e0d\u63a8\u8350\u76f4\u63a5\u4f7f\u7528 using namespace std; std :: priority_queue < T , Container , Compare > /* * T: \u50a8\u5b58\u7684\u5143\u7d20\u7c7b\u578b * Container: * \u50a8\u5b58\u7684\u5bb9\u5668\u7c7b\u578b\uff0c\u4e14\u8981\u6c42\u6ee1\u8db3\u987a\u5e8f\u5bb9\u5668\u7684\u8981\u6c42\u3001\u5177\u6709\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u7684\u8981\u6c42 \u4e14\u652f\u6301 * front() / push_back() / pop_back() \u4e09\u4e2a\u51fd\u6570\uff0c \u6807\u51c6\u5bb9\u5668\u4e2d std::vector / * std::deque \u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002 Compare: \u9ed8\u8ba4\u4e3a\u4e25\u683c\u7684\u5f31\u5e8f\u6bd4\u8f83\u7c7b\u578b * priority_queue \u662f\u6309\u7167\u5143\u7d20\u4f18\u5148\u7ea7\u5927\u7684\u5728\u5806\u9876\uff0c\u6839\u636e operator < * \u7684\u5b9a\u4e49\uff0c\u9ed8\u8ba4\u662f\u5927\u6839\u5806\uff0c \u6211\u4eec\u53ef\u4ee5\u5229\u7528 * greater<T>\uff08\u82e5\u652f\u6301\uff09\uff0c\u6216\u8005\u81ea\u5b9a\u4e49\u7c7b\u7684\u5c0f\u4e8e\u53f7\u91cd\u8f7d\u5b9e\u73b0\u6392\u5e8f\u3002 * \u6ce8\u610f\uff1a\u53ea\u652f\u6301\u5c0f\u4e8e\u53f7\u91cd\u8f7d\u800c\u4e0d\u652f\u6301\u5176\u4ed6\u6bd4\u8f83\u7b26\u53f7\u7684\u91cd\u8f7d\u3002 */ // \u6784\u9020\u65b9\u5f0f \uff1a std :: priority_queue < int > ; std :: priority_queue < int , vector < int >> // C++11\u524d\uff0c\u8bf7\u4f7f\u7528 vector<int> >\uff0c\u7a7a\u683c\u4e0d\u53ef\u7701\u7565 std :: priority_queue < int , deque < int > , greater < int >> // \u6ce8\u610f\uff1a\u4e0d\u53ef\u8df3\u8fc7\u5bb9\u5668\u53c2\u6570\u76f4\u63a5\u4f20\u5165\u6bd4\u8f83\u7c7b \u6210\u5458\u51fd\u6570 \u00b6 top() : \u8bbf\u95ee\u6808\u9876\u5143\u7d20 \u5e38\u6570\u590d\u6742\u5ea6 empty() : \u68c0\u67e5\u5e95\u5c42\u7684\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a \u5e38\u6570\u590d\u6742\u5ea6 size() : \u8fd4\u56de\u5e95\u5c42\u5bb9\u5668\u7684\u5143\u7d20\u6570\u91cf \u5e38\u6570\u590d\u6742\u5ea6 push() : \u63d2\u5165\u5143\u7d20\uff0c\u5e76\u5bf9\u5e95\u5c42\u5bb9\u5668\u6392\u5e8f \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) pop() : \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 \u6700\u574f \\Theta(\\log(n)) \\Theta(\\log(n)) \u7531\u4e8e std::priority_queue \u539f\u751f\u4e0d\u652f\u6301 modify() / join() / erase() \u6545\u4e0d\u505a\u8bb2\u89e3\u3002 \u793a\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 q1 . push ( 1 ); // \u5806\u4e2d\u5143\u7d20 \uff1a [1]; for ( int i = 2 ; i <= 5 ; i ++ ) q1 . push ( i ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 5]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 5; q1 . pop (); std :: cout << q1 . size () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c \uff1a4 // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4]; q1 . push ( 10 ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 10]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 10; q1 . pop (); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4];","title":"priority_queue"},{"location":"ds/stl/priority_queue/#_1","text":"top() : \u8bbf\u95ee\u6808\u9876\u5143\u7d20 \u5e38\u6570\u590d\u6742\u5ea6 empty() : \u68c0\u67e5\u5e95\u5c42\u7684\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a \u5e38\u6570\u590d\u6742\u5ea6 size() : \u8fd4\u56de\u5e95\u5c42\u5bb9\u5668\u7684\u5143\u7d20\u6570\u91cf \u5e38\u6570\u590d\u6742\u5ea6 push() : \u63d2\u5165\u5143\u7d20\uff0c\u5e76\u5bf9\u5e95\u5c42\u5bb9\u5668\u6392\u5e8f \u6700\u574f \\Theta(n) \\Theta(n) \u5747\u644a \\Theta(\\log(n)) \\Theta(\\log(n)) pop() : \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 \u6700\u574f \\Theta(\\log(n)) \\Theta(\\log(n)) \u7531\u4e8e std::priority_queue \u539f\u751f\u4e0d\u652f\u6301 modify() / join() / erase() \u6545\u4e0d\u505a\u8bb2\u89e3\u3002","title":"\u6210\u5458\u51fd\u6570"},{"location":"ds/stl/priority_queue/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 q1 . push ( 1 ); // \u5806\u4e2d\u5143\u7d20 \uff1a [1]; for ( int i = 2 ; i <= 5 ; i ++ ) q1 . push ( i ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 5]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 5; q1 . pop (); std :: cout << q1 . size () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c \uff1a4 // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4]; q1 . push ( 10 ); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4, 10]; std :: cout << q1 . top () << std :: endl ; // \u8f93\u51fa\u7ed3\u679c : 10; q1 . pop (); // \u5806\u4e2d\u5143\u7d20 : [1, 2, 3, 4];","title":"\u793a\u4f8b"},{"location":"ds/stl/vector/","text":"\u4e3a\u4ec0\u4e48\u8981\u7528 vector \u00b6 \u4f5c\u4e3a OIer \uff0c\u5bf9\u7a0b\u5e8f\u6548\u7387\u7684\u8ffd\u6c42\u8fdc\u6bd4\u5bf9\u5de5\u7a0b\u7ea7\u522b\u7684\u7a33\u5b9a\u6027\u8981\u9ad8\u5f97\u591a\uff0c\u800c vector \u7531\u4e8e\u5176\u8f83\u9759\u6001\u6570\u7ec4\u590d\u6742\u5f88\u591a\u7684\u539f\u56e0\uff0c\u65f6\u95f4\u6548\u7387\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u8981\u6ee1\u6162\u4e8e\u9759\u6001\u6570\u7ec4\uff0c\u6240\u4ee5\u5728\u4e00\u822c\u7684\u6b63\u5e38\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u4e0d\u9009\u62e9 vector \u7684\uff0c \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a vector \u4f18\u79c0\u7684\u7279\u6027\uff0c\u5728\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u7279\u6027\u7684\u60c5\u51b5\u4e0b\uff0cvector \u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u5f88\u5927\u7684\u5e2e\u52a9 vector \u91cd\u5199\u4e86\u6bd4\u8f83\u8fd0\u7b97\u7b26 \u00b6 vector \u4ee5\u5b57\u5178\u5e8f\u4e3a\u5173\u952e\u5b57\u91cd\u8f7d\u4e86 6 \u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u5224\u65ad\u4e24\u4e2a\u5bb9\u5668\u662f\u5426\u76f8\u7b49 \uff08\u590d\u6742\u5ea6\u4e0e\u5bb9\u5668\u5927\u5c0f\u6210\u7ebf\u6027\u5173\u7cfb\uff09 vector \u7684\u5185\u5b58\u662f\u52a8\u6001\u5206\u914d\u7684 \u00b6 \u7531\u4e8e\u5176\u52a8\u6001\u5206\u914d\u7684\u7279\u6027\uff0c \u6240\u4ee5\u5728\u8c03\u7528\u5185\u5b58\u7684\u5e38\u6570\u4e0a\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u662f\u8981\u5feb\u4e8e\u9759\u6001\u6570\u7ec4\u7684\u3002 \u5f88\u591a\u65f6\u5019\u6211\u4eec\u4e0d\u80fd\u63d0\u524d\u5f00\u597d\u90a3\u4e48\u5927\u7684\u7a7a\u95f4\uff08eg \uff1a\u9884\u5904\u7406 1~n \u4e2d\u6240\u6709\u6570\u7684\u7ea6\u6570\uff09\u6211\u4eec\u77e5\u9053\u6570\u636e\u603b\u91cf\u5728\u7a7a\u95f4\u5141\u8bb8\u7684\u7ea7\u522b\uff0c\u4f46\u662f\u5355\u4efd\u6570\u636e\u8fd8\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8fd9\u79cd\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981 vector \u6765\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002 vector \u53ef\u4ee5\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u6765\u8fdb\u884c\u521d\u59cb\u5316 \u00b6 \u7531\u4e8e vector \u91cd\u5199\u4e86 = \u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u521d\u59cb\u5316\u3002 vector \u7684\u6784\u9020\u51fd\u6570 \u00b6 \u53c2\u89c1\u5982\u4e0b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void Vector_Constructor_Test () { // 1. \u521b\u5efa\u7a7avector v0; \u5e38\u6570\u590d\u6742\u5ea6 std :: vector < int > v0 ; // 2. \u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u7a7a\u95f4\u4e3a3\u7684vector v1\uff0c\u5176\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u662f0; \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v1 ( 3 ); // 3. \u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u7a7a\u95f4\u4e3a5\u7684vector v2\uff0c\u5176\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u662f2; \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v2 ( 5 , 2 ); // 4. \u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u7a7a\u95f4\u4e3a3\u7684vector // v3\uff0c\u5176\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u662f1\uff0c\u5e76\u4e14\u4f7f\u7528v2\u7684\u7a7a\u95f4\u914d\u7f6e\u5668 \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v3 ( 3 , 1 , v2 . get_allocator ()); // 5. \u521b\u5efa\u4e00\u4e2av2\u7684\u62f7\u8d1dvector v4\uff0c \u5176\u5185\u5bb9\u5143\u7d20\u548cv2\u4e00\u6837; \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v4 ( v2 ); // 6. \u521b\u5efa\u4e00\u4e2av4\u7684\u62f7\u8d1dvector v5\uff0c\u5176\u5185\u5bb9\u662fv4\u7684[__First\uff0c __Last)\u533a\u95f4 \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v5 ( v4 . begin () + 1 , v4 . begin () + 3 ); // \u4ee5\u4e0b\u662f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u7f16\u8bd1\u8fd0\u884c\u4e00\u4e0b\u672c\u4ee3\u7801\u3002 std :: cout << \"v1 = \" ; std :: copy ( v1 . begin (), v1 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v2 = \" ; std :: copy ( v2 . begin (), v2 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v3 = \" ; std :: copy ( v3 . begin (), v3 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v4 = \" ; std :: copy ( v4 . begin (), v4 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v5 = \" ; std :: copy ( v5 . begin (), v5 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; // \u79fb\u52a8v2\u5230\u65b0\u521b\u5efa\u7684vector v6; std :: vector < int > v6 ( move ( v2 )); std :: cout << \"v6 = \" ; std :: copy ( v6 . begin (), v6 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; }; \u53ef\u4ee5\u5229\u7528\u4e0a\u8ff0\u7684\u65b9\u6cd5\u6784\u9020\u4e00\u4e2a vector\uff0c \u8db3\u591f\u6211\u4eec\u4f7f\u7528\u4e86\u3002 vector \u5143\u7d20\u8bbf\u95ee \u00b6 vector \u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u65b9\u6cd5\u8fdb\u884c\u8bbf\u95ee\u5143\u7d20 at() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.at(pos) \u8fd4\u56de vector \u4e2d\u4e0b\u6807\u4e3a pos \u7684\u5f15\u7528\u3002\u5982\u679c\u6570\u7ec4\u8d8a\u754c\u629b\u51fa std::out_of_range \u7c7b\u578b\u7684\u5f02\u5e38\u3002 operator[] \u4f7f\u7528\u65b9\u6cd5 \uff1a v[pos] \u8fd4\u56de vector \u4e2d\u4e0b\u6807\u4e3a pos \u7684\u5f15\u7528\u3002\u4e0d\u6267\u884c\u8d8a\u754c\u68c0\u67e5\u3002 front() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.front() \u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 back() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.back() \u8fd4\u56de\u672b\u5c3e\u5143\u7d20\u7684\u5f15\u7528 data() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.data() \u8fd4\u56de\u6307\u5411\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002 vector \u8fed\u4ee3\u5668 \u00b6 vector \u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u8fed\u4ee3\u5668 begin() / cbegin() \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5176\u4e2d *begin = front end() / cend() \u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5c3e\u7aef\u5360\u4f4d\u7b26\u7684\u8fed\u4ee3\u5668\uff0c\u6ce8\u610f\u662f\u6ca1\u6709\u5143\u7d20\u7684\u3002 rbegin() / rcbegin() \u8fd4\u56de\u6307\u5411\u9006\u5411\u6570\u7ec4\u7684\u9996\u5143\u7d20\u7684\u9006\u5411\u8fed\u4ee3\u5668\uff0c \u53ef\u4ee5\u7406\u89e3\u4e3a\u6b63\u5411\u5bb9\u5668\u7684\u672b\u5143\u7d20 rend() / rcend() \u8fd4\u56de\u6307\u5411\u9006\u5411\u6570\u7ec4\u672b\u5143\u7d20\u540e\u4e00\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff0c\u5bf9\u5e94\u5bb9\u5668\u9996\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\uff0c \u6ca1\u6709\u5143\u7d20\u3002 \u4ee5\u4e0a\u5217\u51fa\u7684\u8fed\u4ee3\u5668\u4e2d\uff0c\u542b\u6709\u5b57\u7b26 c \u7684\u4e3a\u53ea\u8bfb\u8fed\u4ee3\u5668\uff0c\u4f60\u4e0d\u80fd\u901a\u8fc7\u53ea\u8bfb\u8fed\u4ee3\u5668\u53bb\u4fee\u6539 vector \u4e2d\u7684\u5143\u7d20\u7684\u503c\u3002\u5982\u679c\u4e00\u4e2a vector \u672c\u8eab\u5c31\u662f\u53ea\u8bfb\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4e00\u822c\u8fed\u4ee3\u5668\u548c\u53ea\u8bfb\u8fed\u4ee3\u5668\u5b8c\u5168\u7b49\u4ef7\u3002\u53ea\u8bfb\u8fed\u4ee3\u5668\u81ea C++11 \u5f00\u59cb\u652f\u6301\u3002 vector \u5bb9\u91cf \u00b6 vector \u6709\u5982\u4e0b\u51e0\u79cd\u8fd4\u56de\u5bb9\u91cf\u7684\u51fd\u6570 empty() \u8fd4\u56de\u4e00\u4e2a bool \u503c\uff0c\u5373 (v.begin() == v.end()) True \u4e3a\u7a7a\uff0cFalse \u4e3a\u975e\u7a7a size() \u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u6570\u91cf\uff0c\u5373 (std :: distance(v.begin(), v.end())) shrink_to_fit() \uff08C++11\uff09 \u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u5b58\u6765\u51cf\u5c11\u5185\u5b58\u4f7f\u7528 \u6b64\u5916\uff0c\u8fd8\u6709 max_size() , reserve() , capacity() \u7b49 OIer \u5f88\u96be\u7528\u5230\u7684\u51fd\u6570\uff0c\u4e0d\u505a\u4ecb\u7ecd\u3002 vector \u4fee\u6539\u5668 \u00b6 clear() \u6e05\u9664\u6240\u6709\u5143\u7d20 insert() \u652f\u6301\u5728\u67d0\u4e2a\u8fed\u4ee3\u5668\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3001\u53ef\u4ee5\u63d2\u5165\u591a\u4e2a \u6b64\u64cd\u4f5c\u662f\u4e0e pos \u8ddd\u79bb\u672b\u5c3e\u957f\u5ea6\u6210\u7ebf\u6027\u800c\u975e\u5e38\u6570\u7684 erase() \u5220\u9664\u67d0\u4e2a\u8fed\u4ee3\u5668\u6216\u8005\u533a\u95f4\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u6700\u540e\u88ab\u5220\u9664\u7684\u8fed\u4ee3\u5668\u3002 push_back() \u5728\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u3002 pop_back() \u5220\u9664\u672b\u5c3e\u5143\u7d20\u3002 swap() \u4e0e\u53e6\u4e00\u4e2a\u5bb9\u5668\u8fdb\u884c\u4ea4\u6362\uff0c\u6b64\u64cd\u4f5c\u662f \u5e38\u6570\u590d\u6742\u5ea6 \u800c\u975e\u7ebf\u6027\u7684\u3002 vector \u7279\u5316 std::vector<bool> \u00b6 \u6807\u51c6\u5e93\u63d0\u4f9b\u5bf9 bool \u7684 vector \u4f18\u5316\uff0c\u5176\u7a7a\u95f4\u5360\u7528\u4e0e bitset \u4e00\u6837\uff0c\u6bcf\u4e2a bool \u53ea\u5360 1bit\uff0c\u4e14\u652f\u6301\u52a8\u6001\u5185\u5b58 \u6ce8\u610f\uff0c vector<bool> \u6ca1\u6709 bitset \u7684\u4f4d\u8fd0\u7b97\u91cd\u8f7d\uff0c\u6240\u4ee5\u9002\u7528\u60c5\u51b5\u4e0e bitset \u5e76\u4e0d\u5b8c\u5168\u91cd\u5408\uff0c\u8bf7\u9009\u62e9\u98df\u7528","title":"vector"},{"location":"ds/stl/vector/#vector","text":"\u4f5c\u4e3a OIer \uff0c\u5bf9\u7a0b\u5e8f\u6548\u7387\u7684\u8ffd\u6c42\u8fdc\u6bd4\u5bf9\u5de5\u7a0b\u7ea7\u522b\u7684\u7a33\u5b9a\u6027\u8981\u9ad8\u5f97\u591a\uff0c\u800c vector \u7531\u4e8e\u5176\u8f83\u9759\u6001\u6570\u7ec4\u590d\u6742\u5f88\u591a\u7684\u539f\u56e0\uff0c\u65f6\u95f4\u6548\u7387\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u8981\u6ee1\u6162\u4e8e\u9759\u6001\u6570\u7ec4\uff0c\u6240\u4ee5\u5728\u4e00\u822c\u7684\u6b63\u5e38\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u4e0d\u9009\u62e9 vector \u7684\uff0c \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a vector \u4f18\u79c0\u7684\u7279\u6027\uff0c\u5728\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u7279\u6027\u7684\u60c5\u51b5\u4e0b\uff0cvector \u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u5f88\u5927\u7684\u5e2e\u52a9","title":"\u4e3a\u4ec0\u4e48\u8981\u7528 vector"},{"location":"ds/stl/vector/#vector_1","text":"vector \u4ee5\u5b57\u5178\u5e8f\u4e3a\u5173\u952e\u5b57\u91cd\u8f7d\u4e86 6 \u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u5224\u65ad\u4e24\u4e2a\u5bb9\u5668\u662f\u5426\u76f8\u7b49 \uff08\u590d\u6742\u5ea6\u4e0e\u5bb9\u5668\u5927\u5c0f\u6210\u7ebf\u6027\u5173\u7cfb\uff09","title":"vector \u91cd\u5199\u4e86\u6bd4\u8f83\u8fd0\u7b97\u7b26"},{"location":"ds/stl/vector/#vector_2","text":"\u7531\u4e8e\u5176\u52a8\u6001\u5206\u914d\u7684\u7279\u6027\uff0c \u6240\u4ee5\u5728\u8c03\u7528\u5185\u5b58\u7684\u5e38\u6570\u4e0a\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u662f\u8981\u5feb\u4e8e\u9759\u6001\u6570\u7ec4\u7684\u3002 \u5f88\u591a\u65f6\u5019\u6211\u4eec\u4e0d\u80fd\u63d0\u524d\u5f00\u597d\u90a3\u4e48\u5927\u7684\u7a7a\u95f4\uff08eg \uff1a\u9884\u5904\u7406 1~n \u4e2d\u6240\u6709\u6570\u7684\u7ea6\u6570\uff09\u6211\u4eec\u77e5\u9053\u6570\u636e\u603b\u91cf\u5728\u7a7a\u95f4\u5141\u8bb8\u7684\u7ea7\u522b\uff0c\u4f46\u662f\u5355\u4efd\u6570\u636e\u8fd8\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8fd9\u79cd\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981 vector \u6765\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002","title":"vector \u7684\u5185\u5b58\u662f\u52a8\u6001\u5206\u914d\u7684"},{"location":"ds/stl/vector/#vector_3","text":"\u7531\u4e8e vector \u91cd\u5199\u4e86 = \u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u521d\u59cb\u5316\u3002","title":"vector \u53ef\u4ee5\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u6765\u8fdb\u884c\u521d\u59cb\u5316"},{"location":"ds/stl/vector/#vector_4","text":"\u53c2\u89c1\u5982\u4e0b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void Vector_Constructor_Test () { // 1. \u521b\u5efa\u7a7avector v0; \u5e38\u6570\u590d\u6742\u5ea6 std :: vector < int > v0 ; // 2. \u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u7a7a\u95f4\u4e3a3\u7684vector v1\uff0c\u5176\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u662f0; \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v1 ( 3 ); // 3. \u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u7a7a\u95f4\u4e3a5\u7684vector v2\uff0c\u5176\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u662f2; \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v2 ( 5 , 2 ); // 4. \u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u7a7a\u95f4\u4e3a3\u7684vector // v3\uff0c\u5176\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u662f1\uff0c\u5e76\u4e14\u4f7f\u7528v2\u7684\u7a7a\u95f4\u914d\u7f6e\u5668 \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v3 ( 3 , 1 , v2 . get_allocator ()); // 5. \u521b\u5efa\u4e00\u4e2av2\u7684\u62f7\u8d1dvector v4\uff0c \u5176\u5185\u5bb9\u5143\u7d20\u548cv2\u4e00\u6837; \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v4 ( v2 ); // 6. \u521b\u5efa\u4e00\u4e2av4\u7684\u62f7\u8d1dvector v5\uff0c\u5176\u5185\u5bb9\u662fv4\u7684[__First\uff0c __Last)\u533a\u95f4 \u7ebf\u6027\u590d\u6742\u5ea6 std :: vector < int > v5 ( v4 . begin () + 1 , v4 . begin () + 3 ); // \u4ee5\u4e0b\u662f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u7f16\u8bd1\u8fd0\u884c\u4e00\u4e0b\u672c\u4ee3\u7801\u3002 std :: cout << \"v1 = \" ; std :: copy ( v1 . begin (), v1 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v2 = \" ; std :: copy ( v2 . begin (), v2 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v3 = \" ; std :: copy ( v3 . begin (), v3 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v4 = \" ; std :: copy ( v4 . begin (), v4 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; std :: cout << \"v5 = \" ; std :: copy ( v5 . begin (), v5 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; // \u79fb\u52a8v2\u5230\u65b0\u521b\u5efa\u7684vector v6; std :: vector < int > v6 ( move ( v2 )); std :: cout << \"v6 = \" ; std :: copy ( v6 . begin (), v6 . end (), std :: ostream_iterator < int > ( std :: cout , \" \" )); std :: cout << std :: endl ; }; \u53ef\u4ee5\u5229\u7528\u4e0a\u8ff0\u7684\u65b9\u6cd5\u6784\u9020\u4e00\u4e2a vector\uff0c \u8db3\u591f\u6211\u4eec\u4f7f\u7528\u4e86\u3002","title":"vector \u7684\u6784\u9020\u51fd\u6570"},{"location":"ds/stl/vector/#vector_5","text":"vector \u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u65b9\u6cd5\u8fdb\u884c\u8bbf\u95ee\u5143\u7d20 at() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.at(pos) \u8fd4\u56de vector \u4e2d\u4e0b\u6807\u4e3a pos \u7684\u5f15\u7528\u3002\u5982\u679c\u6570\u7ec4\u8d8a\u754c\u629b\u51fa std::out_of_range \u7c7b\u578b\u7684\u5f02\u5e38\u3002 operator[] \u4f7f\u7528\u65b9\u6cd5 \uff1a v[pos] \u8fd4\u56de vector \u4e2d\u4e0b\u6807\u4e3a pos \u7684\u5f15\u7528\u3002\u4e0d\u6267\u884c\u8d8a\u754c\u68c0\u67e5\u3002 front() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.front() \u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 back() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.back() \u8fd4\u56de\u672b\u5c3e\u5143\u7d20\u7684\u5f15\u7528 data() \u4f7f\u7528\u65b9\u6cd5 \uff1a v.data() \u8fd4\u56de\u6307\u5411\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002","title":"vector \u5143\u7d20\u8bbf\u95ee"},{"location":"ds/stl/vector/#vector_6","text":"vector \u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u8fed\u4ee3\u5668 begin() / cbegin() \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5176\u4e2d *begin = front end() / cend() \u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5c3e\u7aef\u5360\u4f4d\u7b26\u7684\u8fed\u4ee3\u5668\uff0c\u6ce8\u610f\u662f\u6ca1\u6709\u5143\u7d20\u7684\u3002 rbegin() / rcbegin() \u8fd4\u56de\u6307\u5411\u9006\u5411\u6570\u7ec4\u7684\u9996\u5143\u7d20\u7684\u9006\u5411\u8fed\u4ee3\u5668\uff0c \u53ef\u4ee5\u7406\u89e3\u4e3a\u6b63\u5411\u5bb9\u5668\u7684\u672b\u5143\u7d20 rend() / rcend() \u8fd4\u56de\u6307\u5411\u9006\u5411\u6570\u7ec4\u672b\u5143\u7d20\u540e\u4e00\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff0c\u5bf9\u5e94\u5bb9\u5668\u9996\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\uff0c \u6ca1\u6709\u5143\u7d20\u3002 \u4ee5\u4e0a\u5217\u51fa\u7684\u8fed\u4ee3\u5668\u4e2d\uff0c\u542b\u6709\u5b57\u7b26 c \u7684\u4e3a\u53ea\u8bfb\u8fed\u4ee3\u5668\uff0c\u4f60\u4e0d\u80fd\u901a\u8fc7\u53ea\u8bfb\u8fed\u4ee3\u5668\u53bb\u4fee\u6539 vector \u4e2d\u7684\u5143\u7d20\u7684\u503c\u3002\u5982\u679c\u4e00\u4e2a vector \u672c\u8eab\u5c31\u662f\u53ea\u8bfb\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4e00\u822c\u8fed\u4ee3\u5668\u548c\u53ea\u8bfb\u8fed\u4ee3\u5668\u5b8c\u5168\u7b49\u4ef7\u3002\u53ea\u8bfb\u8fed\u4ee3\u5668\u81ea C++11 \u5f00\u59cb\u652f\u6301\u3002","title":"vector \u8fed\u4ee3\u5668"},{"location":"ds/stl/vector/#vector_7","text":"vector \u6709\u5982\u4e0b\u51e0\u79cd\u8fd4\u56de\u5bb9\u91cf\u7684\u51fd\u6570 empty() \u8fd4\u56de\u4e00\u4e2a bool \u503c\uff0c\u5373 (v.begin() == v.end()) True \u4e3a\u7a7a\uff0cFalse \u4e3a\u975e\u7a7a size() \u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u6570\u91cf\uff0c\u5373 (std :: distance(v.begin(), v.end())) shrink_to_fit() \uff08C++11\uff09 \u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u5b58\u6765\u51cf\u5c11\u5185\u5b58\u4f7f\u7528 \u6b64\u5916\uff0c\u8fd8\u6709 max_size() , reserve() , capacity() \u7b49 OIer \u5f88\u96be\u7528\u5230\u7684\u51fd\u6570\uff0c\u4e0d\u505a\u4ecb\u7ecd\u3002","title":"vector \u5bb9\u91cf"},{"location":"ds/stl/vector/#vector_8","text":"clear() \u6e05\u9664\u6240\u6709\u5143\u7d20 insert() \u652f\u6301\u5728\u67d0\u4e2a\u8fed\u4ee3\u5668\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3001\u53ef\u4ee5\u63d2\u5165\u591a\u4e2a \u6b64\u64cd\u4f5c\u662f\u4e0e pos \u8ddd\u79bb\u672b\u5c3e\u957f\u5ea6\u6210\u7ebf\u6027\u800c\u975e\u5e38\u6570\u7684 erase() \u5220\u9664\u67d0\u4e2a\u8fed\u4ee3\u5668\u6216\u8005\u533a\u95f4\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u6700\u540e\u88ab\u5220\u9664\u7684\u8fed\u4ee3\u5668\u3002 push_back() \u5728\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u3002 pop_back() \u5220\u9664\u672b\u5c3e\u5143\u7d20\u3002 swap() \u4e0e\u53e6\u4e00\u4e2a\u5bb9\u5668\u8fdb\u884c\u4ea4\u6362\uff0c\u6b64\u64cd\u4f5c\u662f \u5e38\u6570\u590d\u6742\u5ea6 \u800c\u975e\u7ebf\u6027\u7684\u3002","title":"vector \u4fee\u6539\u5668"},{"location":"ds/stl/vector/#vector-stdvectorbool","text":"\u6807\u51c6\u5e93\u63d0\u4f9b\u5bf9 bool \u7684 vector \u4f18\u5316\uff0c\u5176\u7a7a\u95f4\u5360\u7528\u4e0e bitset \u4e00\u6837\uff0c\u6bcf\u4e2a bool \u53ea\u5360 1bit\uff0c\u4e14\u652f\u6301\u52a8\u6001\u5185\u5b58 \u6ce8\u610f\uff0c vector<bool> \u6ca1\u6709 bitset \u7684\u4f4d\u8fd0\u7b97\u91cd\u8f7d\uff0c\u6240\u4ee5\u9002\u7528\u60c5\u51b5\u4e0e bitset \u5e76\u4e0d\u5b8c\u5168\u91cd\u5408\uff0c\u8bf7\u9009\u62e9\u98df\u7528","title":"vector \u7279\u5316 std::vector&lt;bool&gt;"},{"location":"geometry/","text":"","title":"\u8ba1\u7b97\u51e0\u4f55\u90e8\u5206\u7b80\u4ecb"},{"location":"geometry/2d/","text":"\u6211\u4eec\u5c06\u9700\u8981\u89e3\u51b3\u7684\u51e0\u4f55\u95ee\u9898\u7684\u8303\u56f4\u9650\u5236\u5728\u4e8c\u7ef4\u5e73\u9762\u5185\uff0c\u8fd9\u6837\u5c31\u7528\u5230\u4e86\u4e8c\u7ef4\u8ba1\u7b97\u51e0\u4f55\u3002 \u8981\u7528\u7535\u8111\u89e3\u5e73\u9762\u51e0\u4f55\u9898\uff1f\u6570\u5b66\u597d\u7684\u540c\u5b66\u4eec\u7b11\u4e86\u3002 \u67d0\u540c\u5b66\uff1a\u6765\u6765\u6765\u6211\u7ed9\u4f60\u4eec\u8868\u6f14 5 5 \u5206\u949f\u7b97\u89e3\u6790\u51e0\u4f55\u5927\u9898\u3002 \u6211\u4eec\u5e76\u4e0d\u662f\u7528\u8ba1\u7b97\u673a\u7b97\u6570\u5b66\u5377\u5b50\u4e0a\u7684\u51e0\u4f55\u9898\u53bb\u4e86\uff0c\u800c\u662f\u89e3\u51b3\u4e00\u4e9b\u66f4\u52a0\u590d\u6742\u7684\u51e0\u4f55\u76f8\u5173\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u590d\u6742\u4e14\u62bd\u8c61\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u5b9a\u8981\u9009\u62e9\u5408\u9002\u7684\u7814\u7a76\u65b9\u6cd5\u3002\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u7ed9\u5b83\u770b\u51e0\u4f55\u56fe\u5f62\u2026\u2026 \u6211\u4eec\u53ef\u4ee5\u628a\u8981\u7814\u7a76\u7684\u56fe\u5f62\u653e\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u6216\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u8fd9\u6837\u89e3\u51b3\u95ee\u9898\u5c31\u4f1a\u65b9\u4fbf\u5f88\u591a\u3002 \u524d\u7f6e\u6280\u80fd \u00b6 \u5982\u5e76\u4e0d\u4e86\u89e3\uff1a \u51e0\u4f55\u57fa\u7840 \u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb \u5411\u91cf\uff08\u5305\u62ec\u5411\u91cf\u79ef\uff09 \u6781\u5750\u6807\u4e0e\u6781\u5750\u6807\u7cfb \u8bf7\u5148\u9605\u8bfb OI Wiki - \u6570\u5b66 - \u6742\u9879 \u3002 \u56fe\u5f62\u7684\u8bb0\u5f55 \u00b6 \u70b9 \u00b6 \u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\uff0c\u70b9\u7528\u5750\u6807\u8868\u793a\uff0c\u6bd4\u5982\u70b9 (5,2) (5,2) \uff0c\u70b9 (-1,0) (-1,0) \u4ec0\u4e48\u7684\u3002 \u6211\u4eec\u8bb0\u5f55\u5176\u6a2a\u7eb5\u5750\u6807\u503c\u5373\u53ef\u3002\u7528 pair \u6216\u5f00\u7ed3\u6784\u4f53\u8bb0\u5f55\u5747\u53ef\u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u7528\u6781\u5750\u6807\u8868\u793a\u5373\u53ef\u3002\u8bb0\u5f55\u5176\u6781\u5f84\u4e0e\u6781\u89d2\u3002 \u5411\u91cf \u00b6 \u7531\u4e8e\u5411\u91cf\u7684\u5750\u6807\u8868\u793a\u4e0e\u70b9\u76f8\u540c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u50cf\u70b9\u4e00\u6837\u5b58\u5411\u91cf\u5373\u53ef\uff08\u5f53\u7136\u70b9\u4e0d\u662f\u5411\u91cf\uff09\u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u4e0e\u70b9\u540c\u7406\u3002 \u7ebf \u00b6 \u76f4\u7ebf\u4e0e\u5c04\u7ebf \u00b6 \u4e00\u822c\u5728\u89e3\u6570\u5b66\u9898\u65f6\uff0c\u6211\u4eec\u7528\u89e3\u6790\u5f0f\u8868\u793a\u4e00\u6761\u76f4\u7ebf\u3002\u6709\u4e00\u822c\u5f0f Ax+By+C=0 Ax+By+C=0 \uff0c\u8fd8\u6709\u659c\u622a\u5f0f y=kx+b y=kx+b \uff0c\u8fd8\u6709\u622a\u8ddd\u5f0f \\frac{x}{a}+\\frac{y}{b}=1 \\frac{x}{a}+\\frac{y}{b}=1 \u2026\u2026 \u7528\u54ea\u79cd\uff1f \u8fd9\u4e9b\u5f0f\u5b50\u6700\u540e\u90fd\u9003\u4e0d\u8fc7\u6700\u540e\u7684\u7ed3\u679c\u2014\u2014\u4ee3\u5165\u89e3\u65b9\u7a0b\u6c42\u503c\u3002 \u89e3\u65b9\u7a0b\u4ec0\u4e48\u7684\u6700\u8ba8\u538c\u4e86\uff0c\u6709\u4ec0\u4e48\u597d\u4e00\u70b9\u7684\u65b9\u6cd5\u5417\uff1f \u8003\u8651\u6211\u4eec\u53ea\u60f3\u77e5\u9053\u8fd9\u6761\u76f4\u7ebf\u5728\u54ea\uff0c\u5b83\u7684\u503e\u659c\u7a0b\u5ea6\u600e\u4e48\u6837\u3002\u4e8e\u662f\u7528\u76f4\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\u5148\u5927\u81f4\u786e\u5b9a\u4f4d\u7f6e\uff0c\u7528\u4e00\u4e2a\u5411\u91cf\u8868\u793a\u5b83\u7684\u503e\u659c\u7a0b\u5ea6\uff0c\u597d\u4e86\uff0c\u8fd9\u6761\u76f4\u7ebf\u786e\u5b9a\u4e86\u3002 \u56e0\u6b64\u6211\u4eec\u8bb0\u5f55\u7684\u662f\uff1a\u76f4\u7ebf\u4e0a\u4e00\u70b9\u548c\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf\u3002 \u7ebf\u6bb5 \u00b6 \u7ebf\u6bb5\u5f88\u597d\u8bb0\u5f55\uff1a\u53ea\u9700\u8981\u8bb0\u5f55\u5de6\u53f3\u7aef\u70b9\u5373\u53ef\u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u8bb0\u5f55\u7ebf\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\uff0c\u56e0\u6b64\u5927\u591a\u6570\u76f4\u7ebf\u95ee\u9898\u90fd\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u89e3\u51b3\u3002 \u591a\u8fb9\u5f62 \u00b6 \u5f00\u6570\u7ec4\u6309\u4e00\u5b9a\u987a\u5e8f\u8bb0\u5f55\u591a\u8fb9\u5f62\u7684\u6bcf\u4e2a\u9876\u70b9\u5373\u53ef\u3002 \u7279\u6b8a\u5730\uff0c\u5982\u679c\u77e9\u5f62\u7684\u5404\u8fb9\u5747\u4e0e\u67d0\u5750\u6807\u8f74\u5e73\u884c\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u8bb0\u5f55\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u7684\u9876\u70b9\u5373\u53ef\u3002 \u66f2\u7ebf \u00b6 \u4e00\u4e9b\u7279\u6b8a\u66f2\u7ebf\uff0c\u5982\u51fd\u6570\u56fe\u50cf\u7b49\u4e00\u822c\u8bb0\u5f55\u5176\u89e3\u6790\u5f0f\u3002\u5bf9\u4e8e\u5706\uff0c\u76f4\u63a5\u8bb0\u5f55\u5176\u5706\u5fc3\u548c\u534a\u5f84\u5373\u53ef\u3002 \u57fa\u672c\u516c\u5f0f \u00b6 \u6b63\u5f26\u5b9a\u7406 \u00b6 \u5728\u4e09\u89d2\u5f62 \\triangle \\text{ABC} \\triangle \\text{ABC} \u4e2d\uff0c\u82e5\u89d2 A,B,C A,B,C \u6240\u5bf9\u8fb9\u5206\u522b\u4e3a a,b,c a,b,c \uff0c\u5219\u6709\uff1a \\frac{a}{\\sin A}=\\frac{b}{\\sin B}=\\frac{c}{\\sin C}=2R \\frac{a}{\\sin A}=\\frac{b}{\\sin B}=\\frac{c}{\\sin C}=2R \u5176\u4e2d\uff0c R R \u4e3a \\triangle \\text{ABC} \\triangle \\text{ABC} \u7684\u5916\u63a5\u5706\u534a\u5f84\u3002 \u4f59\u5f26\u5b9a\u7406 \u00b6 \u5728\u4e09\u89d2\u5f62 \\triangle \\text{ABC} \\triangle \\text{ABC} \u4e2d\uff0c\u82e5\u89d2 A,B,C A,B,C \u6240\u5bf9\u8fb9\u5206\u522b\u4e3a a,b,c a,b,c \uff0c\u5219\u6709\uff1a \\begin{aligned} a^2&=b^2+c^2-2bc\\cos A\\\\ b^2&=a^2+c^2-2ac\\cos B\\\\ c^2&=a^2+b^2-2ab\\cos C \\end{aligned} \\begin{aligned} a^2&=b^2+c^2-2bc\\cos A\\\\ b^2&=a^2+c^2-2ac\\cos B\\\\ c^2&=a^2+b^2-2ab\\cos C \\end{aligned} \u4e0a\u8ff0\u516c\u5f0f\u7684\u8bc1\u660e\u7565\u3002\u5747\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u5fc5\u4fee\u4e94\u5185\u5bb9\u3002 \u57fa\u672c\u64cd\u4f5c \u00b6 \u5224\u65ad\u4e00\u4e2a\u70b9\u5728\u76f4\u7ebf\u7684\u54ea\u8fb9 \u00b6 \u67d0\u540c\u5b66\uff1a\u6211\u80fd\u770b\u51fa\u6765\uff01 \u6211\u4eec\u6709\u76f4\u7ebf\u4e0a\u7684\u4e00\u70b9 P P \u7684\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf \\vec v \\vec v \uff0c\u60f3\u77e5\u9053\u67d0\u4e2a\u70b9 Q Q \u5728\u76f4\u7ebf\u7684\u54ea\u8fb9\u3002 \u6211\u4eec\u5229\u7528\u5411\u91cf\u79ef\u7684\u6027\u8d28\uff0c\u7b97\u51fa \\overrightarrow {PQ}\\times \\vec v \\overrightarrow {PQ}\\times \\vec v \u3002\u5982\u679c\u5411\u91cf\u79ef\u4e3a\u8d1f\uff0c\u5219 Q Q \u5728\u76f4\u7ebf\u4e0a\u65b9\uff0c\u5982\u679c\u5411\u91cf\u79ef\u4e3a 0 0 \uff0c\u5219 Q Q \u5728\u76f4\u7ebf\u4e0a\uff0c\u5982\u679c\u5411\u91cf\u79ef\u4e3a\u6b63\uff0c\u5219 Q Q \u5728\u76f4\u7ebf\u4e0b\u65b9\u3002 \u53ef\u4ee5\u753b\u4e00\u4e0b\u56fe\uff0c\u7528\u53f3\u624b\u5b9a\u5219\u611f\u53d7\u4e00\u4e0b\u3002 \u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u4e0e\u8de8\u7acb\u5b9e\u9a8c \u00b6 \u67d0\u540c\u5b66\uff1a\u6342\u6211\u5634\u5e72\u4ec0\u4e48\u6211\u53ef\u4ee5 \u2026\u2026%\uffe5*\u2026\u2026% \u6211\u4eec\u73b0\u5728\u60f3\u5224\u65ad\u4e24\u6761\u7ebf\u6bb5\u662f\u5426\u76f8\u4ea4\u3002 \u9996\u5148\u7279\u5224\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u3002\u5982\u679c\u4e24\u7ebf\u6bb5\u5e73\u884c\uff0c\u81ea\u7136\u4e0d\u80fd\u76f8\u4ea4\u3002\u8fd9\u79cd\u60c5\u51b5\u901a\u8fc7\u5224\u65ad\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u659c\u7387\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u5f53\u7136\uff0c\u5982\u679c\u4e24\u7ebf\u6bb5\u91cd\u5408\u6216\u90e8\u5206\u91cd\u5408\uff0c\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426\u6709\u4e09\u70b9\u5171\u7ebf\u7684\u60c5\u51b5\u5373\u53ef\u3002 \u5982\u679c\u4e24\u7ebf\u6bb5\u7684\u4ea4\u70b9\u4e3a\u5176\u4e2d\u4e00\u6761\u7ebf\u6bb5\u7684\u7aef\u70b9\uff0c\u4ecd\u7136\u5224\u65ad\u662f\u5426\u6709\u4e09\u70b9\u5171\u7ebf\u7684\u60c5\u51b5\u5373\u53ef\u3002 \u8fd8\u6709\u4e9b\u663e\u7136\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53e3\u5934\u4e0a\u79f0\u4e4b\u4e3a\u300c\u4e24\u6761\u7ebf\u6bb5\u79bb\u7740\u592a\u8fdc\u4e86\u300d\u3002\u53ef\u4ec0\u4e48\u662f\u300c\u79bb\u7740\u8fdc\u300d\uff0c\u600e\u4e48\u5224\u65ad\u5b83\u5462\uff1f \u89c4\u5b9a\u300c\u4e00\u6761\u7ebf\u6bb5\u7684\u533a\u57df\u300d\u4e3a\u4ee5\u8fd9\u6761\u7ebf\u6bb5\u4e3a\u5bf9\u89d2\u7ebf\u7684\uff0c\u5404\u8fb9\u5747\u4e0e\u67d0\u4e00\u5750\u6807\u8f74\u5e73\u884c\u7684\u77e9\u5f62\u6240\u5360\u7684\u533a\u57df\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u6761\u7ebf\u6bb5\u6ca1\u6709\u516c\u5171\u533a\u57df\uff0c\u5219\u8fd9\u4e24\u6761\u7ebf\u6bb5\u4e00\u5b9a\u4e0d\u76f8\u4ea4\u3002 \u6bd4\u5982\u6709\u4ee5\u4e0b\u4e24\u6761\u7ebf\u6bb5\uff1a \u5b83\u4eec\u5360\u7528\u7684\u533a\u57df\u662f\u8fd9\u6837\u7684\uff1a \u4e8e\u662f\u53ef\u4ee5\u5feb\u901f\u5730\u5224\u65ad\u51fa\u6765\u8fd9\u4e24\u6761\u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u3002 \u8fd9\u5c31\u662f \u5feb\u901f\u6392\u65a5\u5b9e\u9a8c \u3002\u4e0a\u8ff0\u60c5\u51b5\u79f0\u4f5c \u672a\u901a\u8fc7\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c \u3002 \u672a\u901a\u8fc7\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u662f\u4e24\u7ebf\u6bb5\u65e0\u4ea4\u70b9\u7684 \u5145\u5206\u4e0d\u5fc5\u8981\u6761\u4ef6 \uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u3002 \u56e0\u4e3a\u4e24\u7ebf\u6bb5 a,b a,b \u76f8\u4ea4\uff0c b b \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u4e00\u5b9a\u5206\u5e03\u5728 a a \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u4e24\u7aef\uff1b\u540c\u7406\uff0c a a \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u4e00\u5b9a\u5206\u5e03\u5728 b b \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u4e24\u7aef\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u4e00\u6761\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u76f8\u5bf9\u4e8e\u53e6\u4e00\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u5982\u679c\u4e0d\u540c\uff0c\u5219\u4e24\u7ebf\u6bb5\u76f8\u4ea4\uff0c\u53cd\u4e4b\u5219\u4e0d\u76f8\u4ea4\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528 3.1 \u4e2d\u7684\u77e5\u8bc6\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u76f4\u7ebf\u4e0e\u70b9\u7684\u4f4d\u7f6e\u5173\u7cfb\u3002 \u8fd9\u5c31\u662f \u8de8\u7acb\u5b9e\u9a8c \uff0c\u5982\u679c\u5bf9\u4e8e\u4e24\u7ebf\u6bb5 a,b a,b \uff0c b b \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u5e03\u5728 a a \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u4e24\u4fa7\uff0c \u4e14 a a \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u5e03\u5728 b b \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u4e24\u4fa7\uff0c\u6211\u4eec\u5c31\u8bf4 a,b a,b \u4e24\u7ebf\u6bb5 \u901a\u8fc7\u4e86\u8de8\u7acb\u5b9e\u9a8c \uff0c\u5373\u4e24\u7ebf\u6bb5\u76f8\u4ea4\u3002 \u901a\u8fc7\u8de8\u7acb\u5b9e\u9a8c\u662f\u4e24\u7ebf\u6bb5\u76f8\u4ea4\u7684 \u5145\u8981\u6761\u4ef6 \uff0c\u56e0\u6b64\u76f4\u63a5\u5229\u7528\u8de8\u7acb\u5b9e\u9a8c\u5224\u65ad\u5373\u53ef\u3002 \u7531\u4e8e\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u53ea\u9700\u8981\u5c11\u91cf\u6bd4\u8f83\u800c\u4e0d\u9700\u8981\u8ba1\u7b97\uff0c\u6240\u4ee5\u5148\u7528\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u5224\u65ad\u53ef\u4ee5\u51cf\u5c0f\u4e00\u90e8\u5206\u5e38\u6570\u3002 \u5224\u65ad\u4e00\u70b9\u662f\u5426\u5728\u4efb\u610f\u591a\u8fb9\u5f62\u5185\u90e8 \u00b6 \u67d0\u540c\u5b66\uff1a\u6211\u8fd8\u80fd %$#^%*(%&)) \u5728\u8ba1\u7b97\u51e0\u4f55\u4e2d\uff0c\u8fd9\u4e2a\u95ee\u9898\u88ab\u79f0\u4e3a PIP \u95ee\u9898 \uff0c\u5df2\u7ecf\u6709\u4e00\u4e9b\u6210\u719f\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u4e0b\u9762\u4f9d\u6b21\u4ecb\u7ecd\u3002 \u5149\u7ebf\u6295\u5c04\u7b97\u6cd5 (Ray casting algorithm) \u00b6 \u5728 \u8fd9\u91cc \u53ef\u4ee5\u770b\u5230\u6700\u539f\u59cb\u7684\u601d\u8def\u3002 \u6211\u4eec\u5148\u7279\u5224\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u300c\u8fd9\u4e2a\u70b9\u79bb\u591a\u8fb9\u5f62\u592a\u8fdc\u4e86\u300d\u3002\u8003\u8651\u4e00\u4e2a\u80fd\u591f\u5b8c\u5168\u8986\u76d6\u8be5\u591a\u8fb9\u5f62\u7684\u6700\u5c0f\u77e9\u5f62\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u5728\u8fd9\u4e2a\u77e9\u5f62\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u5728\u591a\u8fb9\u5f62\u5185\u3002\u8fd9\u6837\u7684\u77e9\u5f62\u5f88\u597d\u6c42\uff0c\u53ea\u9700\u8981\u77e5\u9053\u591a\u8fb9\u5f62\u6a2a\u5750\u6807\u4e0e\u7eb5\u5750\u6807\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u5750\u6807\u4e24\u4e24\u7ec4\u5408\u6210\u56db\u4e2a\u70b9\uff0c\u5c31\u662f\u8fd9\u4e2a\u77e9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u4e86\u3002 \u8fd8\u6709\u70b9\u5728\u591a\u8fb9\u5f62\u7684\u67d0\u4e00\u8fb9\u6216\u67d0\u9876\u70b9\u4e0a\uff0c\u8fd9\u79cd\u60c5\u51b5\u5341\u5206\u5bb9\u6613\u5224\u65ad\uff08\u7559\u4f5c\u8bfe\u540e\u4f5c\u4e1a\uff09\u3002 \u6211\u4eec\u8003\u8651\u4ee5\u8be5\u70b9\u4e3a\u7aef\u70b9\u5f15\u51fa\u4e00\u6761\u5c04\u7ebf\uff0c\u5982\u679c\u8fd9\u6761\u5c04\u7ebf\u4e0e\u591a\u8fb9\u5f62\u6709\u5947\u6570\u4e2a\u4ea4\u70b9\uff0c\u5219\u8be5\u70b9\u5728\u591a\u8fb9\u5f62\u5185\u90e8\uff0c\u5426\u5219\u8be5\u70b9\u5728\u591a\u8fb9\u5f62\u5916\u90e8\uff0c\u6211\u4eec\u7b80\u8bb0\u4e3a \u5947\u5185\u5076\u5916 \u3002\u8fd9\u4e2a\u7b97\u6cd5\u540c\u6837\u88ab\u79f0\u4e3a\u5947\u5076\u89c4\u5219 (Even-odd rule) \u3002 \u7531\u4e8e Jordan curve theorem \uff0c\u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u6761\u5c04\u7ebf\u6bcf\u6b21\u4e0e\u591a\u8fb9\u5f62\u7684\u4e00\u6761\u8fb9\u76f8\u4ea4\uff0c\u5c31\u5207\u6362\u4e00\u6b21\u4e0e\u591a\u8fb9\u5f62\u7684\u5185\u5916\u5173\u7cfb\uff0c\u6240\u4ee5\u7edf\u8ba1\u4ea4\u70b9\u6570\u7684\u5947\u5076\u5373\u53ef\u3002 \u8fd9\u6837\u7684\u5c04\u7ebf\u600e\u4e48\u53d6\uff1f\u53ef\u4ee5\u968f\u673a\u53d6\u8fd9\u6761\u5c04\u7ebf\u6240\u5728\u76f4\u7ebf\u7684\u659c\u7387\uff0c\u5efa\u8bae\u4e3a\u65e0\u7406\u6570\u4ee5\u907f\u514d\u51fa\u73b0\u5c04\u7ebf\u4e0e\u591a\u8fb9\u5f62\u67d0\u8fb9\u91cd\u5408\u7684\u60c5\u51b5\u3002 \u5728\u539f\u7248\u4ee3\u7801\u4e2d\uff0c\u4f7f\u7528\u7684\u662f\u8bb0\u5f55\u591a\u8fb9\u5f62\u7684\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u5c04\u7ebf\u4e0a\u4e00\u70b9\uff0c\u8fd9\u6837\u7edf\u8ba1\u65f6\uff0c\u5982\u679c\u51fa\u73b0\u5c04\u7ebf\u8fc7\u591a\u8fb9\u5f62\u67d0\u8fb9\u6216\u67d0\u9876\u70b9\u65f6\uff0c\u53ef\u4ee5\u89c4\u5b9a\u5c04\u7ebf\u7ecf\u8fc7\u7684\u70b9\u540c\u5728\u5c04\u7ebf\u4e00\u4fa7\uff0c\u8fdb\u800c\u505a\u8de8\u7acb\u5b9e\u9a8c\u5373\u53ef\u3002 \u56de\u8f6c\u6570\u7b97\u6cd5 (Winding number algorithm) \u00b6 \u56de\u8f6c\u6570\u662f\u6570\u5b66\u4e0a\u7684\u6982\u5ff5\uff0c\u662f\u5e73\u9762\u5185\u95ed\u5408\u66f2\u7ebf\u9006\u65f6\u9488\u7ed5\u8fc7\u8be5\u70b9\u7684\u603b\u6b21\u6570\u3002\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53\u56de\u8f6c\u6570\u7b49\u4e8e 0 0 \u7684\u65f6\u5019\uff0c\u70b9\u5728\u66f2\u7ebf\u5916\u90e8\u3002\u8fd9\u4e2a\u7b97\u6cd5\u540c\u6837\u88ab\u79f0\u4e3a\u975e\u96f6\u89c4\u5219 (Nonzero-rule) \u3002 \u5982\u4f55\u8ba1\u7b97\u5462\uff1f\u6211\u4eec\u628a\u8be5\u70b9\u4e0e\u591a\u8fb9\u5f62\u7684\u6240\u6709\u9876\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u8ba1\u7b97\u76f8\u90bb\u4e24\u8fb9\u5939\u89d2\u7684\u548c\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u5939\u89d2\u662f \u6709\u65b9\u5411\u7684 \u3002\u5982\u679c\u5939\u89d2\u548c\u4e3a 0 0 \uff0c\u5219\u8fd9\u4e2a\u70b9\u5728\u591a\u8fb9\u5f62\u5916\uff0c\u5426\u5219\u5728\u591a\u8fb9\u5f62\u5185\u3002 \u6c42\u4e24\u6761\u76f4\u7ebf\u7684\u4ea4\u70b9 \u00b6 \u67d0\u540c\u5b66\uff1a\u8fd9\u8fd8\u4e0d\u7b80\u5355\u8054\u7acb\u65b9\u7a0b #%$& %)(Y(*& UIG)) \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u4e24\u6761\u76f4\u7ebf\u76f8\u4ea4\uff0c\u53ea\u9700\u5224\u65ad\u4e00\u4e0b\u4e24\u6761\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf\u662f\u5426\u5e73\u884c\u5373\u53ef\u3002\u5982\u679c\u65b9\u5411\u5411\u91cf\u5e73\u884c\uff0c\u5219\u4e24\u6761\u76f4\u7ebf\u5e73\u884c\uff0c\u4ea4\u70b9\u4e2a\u6570\u4e3a 0 0 \u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u82e5\u4e24\u6761\u76f4\u7ebf\u5e73\u884c\u4e14\u8fc7\u540c\u4e00\u70b9\uff0c\u5219\u4e24\u76f4\u7ebf\u91cd\u5408\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u7b80\u5316\u4e3a\u6211\u4eec\u6709\u76f4\u7ebf AB,CD AB,CD \u4ea4\u4e8e\u4e00\u70b9\uff0c\u60f3\u6c42\u51fa\u4ea4\u70b9 E E \u3002 \u5982\u679c\u4e24\u76f4\u7ebf\u76f8\u4ea4\uff0c\u5219\u4ea4\u70b9\u53ea\u6709\u4e00\u4e2a\uff0c\u6211\u4eec\u8bb0\u5f55\u4e86\u76f4\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\u548c\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u70b9\u4e0e\u4ea4\u70b9\u7684\u8ddd\u79bb l l \uff0c\u518d\u5c06\u8fd9\u4e2a\u70b9\u6cbf\u65b9\u5411\u5411\u91cf\u5e73\u79fb l l \u4e2a\u5355\u4f4d\u957f\u5ea6\u5373\u53ef\u3002 \u8003\u8651\u6784\u9020\u4e09\u89d2\u5f62\uff0c\u5229\u7528\u6b63\u5f26\u5b9a\u7406\u6c42\u89e3 l l \uff0c\u53ef\u4ee5\u5229\u7528\u5411\u91cf\u79ef\u6784\u9020\u51fa\u6b63\u5f26\u5b9a\u7406\u3002 \u7531\u4e0a\u56fe\u53ef\u77e5\uff0c |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\beta |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\beta \uff0c |\\vec u\\times \\vec b|=|\\vec u||\\vec b|\\sin \\theta |\\vec u\\times \\vec b|=|\\vec u||\\vec b|\\sin \\theta \u3002 \u4f5c\u5546\u5f97\uff1a T=\\frac{|\\vec u\\times \\vec b|}{|\\vec a\\times \\vec b|}=\\frac{|\\vec u|\\sin \\theta}{|\\vec a|\\sin \\beta} T=\\frac{|\\vec u\\times \\vec b|}{|\\vec a\\times \\vec b|}=\\frac{|\\vec u|\\sin \\theta}{|\\vec a|\\sin \\beta} \u53ef\u4ee5\u770b\u51fa\uff0c |\\frac{|\\vec u|\\sin \\theta}{\\sin \\beta}|=l\u200b |\\frac{|\\vec u|\\sin \\theta}{\\sin \\beta}|=l\u200b \u3002\u82e5\u7edd\u5bf9\u503c\u5185\u90e8\u5f0f\u5b50\u53d6\u503c\u4e3a\u6b63\uff0c\u4ee3\u8868\u6cbf \\vec a\u200b \\vec a\u200b \u65b9\u5411\u5e73\u79fb\uff0c\u53cd\u4e4b\u5219\u4e3a\u53cd\u65b9\u5411\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5c06 T T \u76f4\u63a5\u4e58\u4e0a \\vec a \\vec a \uff0c\u5c31\u81ea\u52a8\u51fa\u73b0\u4e86\u76f4\u7ebf\u7684\u5355\u4f4d\u5411\u91cf\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u5176\u4ed6\u6d88\u53bb\u64cd\u4f5c\u4e86\u3002 \u4e8e\u662f\uff0c\u53ea\u9700\u8981\u5c06\u70b9 P P \u52a0\u4e0a T\\vec a T\\vec a \u5373\u53ef\u5f97\u51fa\u4ea4\u70b9\u3002 \u6c42\u4efb\u610f\u591a\u8fb9\u5f62\u7684\u5468\u957f\u548c\u9762\u79ef \u00b6 \u6c42\u4efb\u610f\u591a\u8fb9\u5f62\u7684\u5468\u957f \u00b6 \u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\uff0c\u7b80\u6d01\u5373\u7f8e\u5fb7\u3002 \u6c42\u4efb\u610f\u591a\u8fb9\u5f62\u7684\u9762\u79ef \u00b6 \u8003\u8651\u5411\u91cf\u79ef\u7684\u6a21\u7684\u51e0\u4f55\u610f\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5411\u91cf\u79ef\u5b8c\u6210\u3002 \u5c06\u591a\u8fb9\u5f62\u4e0a\u7684\u70b9\u9006\u65f6\u9488\u6807\u8bb0\u4e3a p_1,p_2,\\cdots ,p_n p_1,p_2,\\cdots ,p_n \uff0c\u518d\u4efb\u9009\u4e00\u4e2a\u8f85\u52a9\u70b9 O O \uff0c\u8bb0\u5411\u91cf \\vec {v_i}=p_i-O \\vec {v_i}=p_i-O \uff0c\u90a3\u4e48\u8fd9\u4e2a\u591a\u8fb9\u5f62\u9762\u79ef S S \u53ef\u4ee5\u8868\u793a\u4e3a\uff1a S=\\frac{1}{2}\\sum_{i=1}^n |\\vec {v_i}\\times \\overrightarrow{v_{i\\bmod n+1}}| S=\\frac{1}{2}\\sum_{i=1}^n |\\vec {v_i}\\times \\overrightarrow{v_{i\\bmod n+1}}| \u5706\u4e0e\u76f4\u7ebf\u76f8\u5173 \u00b6 \u6c42\u76f4\u7ebf\u4e0e\u5706\u7684\u4ea4\u70b9 \u00b6 \u9996\u5148\u5224\u65ad\u76f4\u7ebf\u4e0e\u5706\u7684\u4f4d\u7f6e\u5173\u7cfb\u3002\u5982\u679c\u76f4\u7ebf\u4e0e\u5706\u76f8\u79bb\u5219\u65e0\u4ea4\u70b9\uff0c\u82e5\u76f8\u5207\u5219\u53ef\u4ee5\u5229\u7528\u5207\u7ebf\u6c42\u51fa\u5207\u70b9\u4e0e\u534a\u5f84\u6240\u5728\u76f4\u7ebf\uff0c\u4e4b\u540e\u8f6c\u5316\u4e3a\u6c42\u4e24\u76f4\u7ebf\u4ea4\u70b9\u3002 \u82e5\u6709\u4e24\u4ea4\u70b9\uff0c\u5219\u53ef\u4ee5\u5229\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u51fa\u4e24\u4ea4\u70b9\u7684\u4e2d\u70b9\uff0c\u7136\u540e\u6cbf\u76f4\u7ebf\u65b9\u5411\u52a0\u4e0a\u534a\u5f26\u957f\u5373\u53ef\u3002 \u6c42\u4e24\u5706\u4ea4\u70b9 \u00b6 \u9996\u5148\u6211\u4eec\u5224\u65ad\u4e00\u4e0b\u4e24\u4e2a\u5706\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u5982\u679c\u5916\u79bb\u6216\u5185\u542b\u5219\u65e0\u4ea4\u70b9\uff0c\u5982\u679c\u76f8\u5207\uff0c\u53ef\u4ee5\u7b97\u51fa\u4e24\u5706\u5fc3\u8fde\u7ebf\u7684\u65b9\u5411\u5411\u91cf\uff0c\u7136\u540e\u5229\u7528\u4e24\u5706\u534a\u5f84\u8ba1\u7b97\u51fa\u5e73\u79fb\u8ddd\u79bb\uff0c\u6700\u540e\u5c06\u5706\u5fc3\u6cbf\u8fd9\u4e2a\u65b9\u5411\u5411\u91cf\u8fdb\u884c\u5e73\u79fb\u5373\u53ef\u3002 \u5982\u679c\u4e24\u5706\u76f8\u4ea4\uff0c\u5219\u5fc5\u6709\u4e24\u4e2a\u4ea4\u70b9\uff0c\u5e76\u4e14\u5173\u4e8e\u4e24\u5706\u5fc3\u8fde\u7ebf\u5bf9\u79f0\u3002\u56e0\u6b64\u4e0b\u9762\u53ea\u8bf4\u660e\u4e00\u4e2a\u4ea4\u70b9\u7684\u6c42\u6cd5\uff0c\u53e6\u4e00\u4e2a\u4ea4\u70b9\u53ef\u4ee5\u7528\u7c7b\u4f3c\u65b9\u6cd5\u6c42\u51fa\u3002 \u6211\u4eec\u5148\u5c06\u4e00\u5706\u5706\u5fc3\u4e0e\u4ea4\u70b9\u76f8\u8fde\uff0c\u6c42\u51fa\u4e24\u5706\u5fc3\u8fde\u7ebf\u4e0e\u8be5\u8fde\u7ebf\u6240\u6210\u89d2\u3002\u8fd9\u6837\uff0c\u5c06\u4e24\u5706\u5fc3\u8fde\u7ebf\u7684\u65b9\u5411\u5411\u91cf\u65cb\u8f6c\u8fd9\u4e2a\u89d2\u5ea6\uff0c\u5c31\u662f\u5706\u5fc3\u4e0e\u4ea4\u70b9\u76f8\u8fde\u5f62\u6210\u7684\u534a\u5f84\u7684\u65b9\u5411\u5411\u91cf\u4e86\u3002 \u6700\u540e\u8fd8\u662f\u8001\u5957\u8def\u2014\u2014\u6cbf\u65b9\u5411\u5411\u91cf\u65b9\u5411\u5c06\u5706\u5fc3\u5e73\u79fb\u534a\u5f84\u957f\u5ea6\u3002 \u6781\u89d2\u5e8f \u00b6 \u4f8b\u9898 \u300cJOI Spring Camp 2014 Day4\u300d\u4e24\u4e2a\u4eba\u7684\u661f\u5ea7 \u5e73\u9762\u5185\u6709 n n \u4e2a\u70b9\uff0c\u6709\u4e09\u79cd\u989c\u8272\uff0c\u6bcf\u4e2a\u70b9\u7684\u989c\u8272\u662f\u4e09\u79cd\u4e2d\u7684\u4e00\u79cd\u3002\u6c42\u4e0d\u76f8\u4ea4\u7684\u4e09\u8272\u4e09\u89d2\u5f62\u5bf9\u6570\u3002 6\\le n\\le 3000 6\\le n\\le 3000 \u3002 \u5982\u679c\u4e24\u4e2a\u4e09\u89d2\u5f62\u4e0d\u76f8\u4ea4\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u505a\u51fa\u4e24\u6761\u5185\u516c\u5207\u7ebf\uff0c\u5982\u679c\u76f8\u4ea4\u6216\u5185\u542b\u662f\u505a\u4e0d\u51fa\u5185\u516c\u5207\u7ebf\u7684\u3002\u4e09\u89d2\u5f62\u7684\u516c\u5207\u7ebf\u53ef\u4ee5\u7c7b\u6bd4\u5706\u7684\u516c\u5207\u7ebf\u3002 \u5148\u679a\u4e3e\u4e00\u4e2a\u539f\u70b9\uff0c\u8bb0\u4e3a O O \uff0c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6781\u70b9\uff0c\u8fc7\u8fd9\u4e2a\u70b9\u4e14\u4e0e x x \u8f74\u5e73\u884c\u7684\u76f4\u7ebf\u4f5c\u4e3a\u6781\u8f74\uff0c\u5efa\u7acb\u6781\u5750\u6807\u7cfb\uff0c\u628a\u5269\u4f59\u70b9\u6309\u6781\u89d2\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7136\u540e\u7edf\u8ba1\u51fa\u5728\u6781\u8f74\u4e0a\u65b9\u548c\u4e0b\u65b9\u7684\u6bcf\u79cd\u70b9\u7684\u4e2a\u6570\u3002 \u7136\u540e\u6839\u636e\u70b9\u679a\u4e3e\u516c\u5207\u7ebf\uff0c\u8bb0\u679a\u4e3e\u5230\u7684\u70b9\u4e3a P P \uff0c\u521d\u59cb\u65f6\u516c\u5207\u7ebf\u4e3a\u6781\u8f74\u3002\u5f00\u59cb\u7edf\u8ba1\u3002\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u516c\u5207\u7ebf\u8fc7\u70b9 O O \u548c\u70b9 P P \u3002\u56e0\u4e3a\u516c\u5207\u7ebf\u4e0e\u4e09\u89d2\u5f62\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5\u4e00\u65b9\u9009\u62e9\u516c\u5207\u7ebf\u4e0a\u65b9\u7684\u70b9\uff0c\u53e6\u4e00\u65b9\u4e00\u5b9a\u9009\u62e9\u4e0b\u65b9\u7684\u70b9\u3002\u7136\u540e\u5229\u7528\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u65b9\u6848\u6570\u5373\u53ef\u3002 \u7edf\u8ba1\u5b8c\u540e\u8f6c\u516c\u5207\u7ebf\uff0c\u90a3\u4e48\u70b9 P P \u4e00\u5b9a\u6539\u53d8\u4e86\u76f8\u5bf9\u4e8e\u516c\u5207\u7ebf\u7684\u4e0a\u4e0b\u4f4d\u7f6e\uff0c\u800c\u5176\u4ed6\u70b9\u4e0d\u52a8\uff0c\u5e94\u8be5\u53ea\u5c06\u5b83\u7684\u4f4d\u7f6e\u4fe1\u606f\u6539\u53d8\u3002 \u8fd9\u6837\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u540c\u4e00\u5bf9\u4e09\u89d2\u5f62\u6700\u7ec8\u88ab\u7edf\u8ba1\u4e86 4 4 \u6b21\uff0c\u5c31\u662f\u540c\u4e00\u6761\u516c\u5207\u7ebf\u4f1a\u88ab\u679a\u4e3e\u4e24\u6b21\uff0c\u6700\u540e\u505a\u51fa\u7684\u7b54\u6848\u5e94\u9664\u4ee5 4 4 \u3002 \u5206\u6790\u4e00\u4e0b\u7b97\u6cd5\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u679a\u4e3e\u4e86\u4e00\u4e2a\u539f\u70b9\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u539f\u70b9\u5c06\u5269\u4f59\u70b9\u6392\u5e8f\u540e\u7ebf\u6027\u7edf\u8ba1\u3002\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2\\log n) O(n^2\\log n) \u3002 \u4ee3\u7801\u7f16\u5199\u6ce8\u610f\u4e8b\u9879 \u00b6 \u7531\u4e8e\u8ba1\u7b97\u51e0\u4f55\u7ecf\u5e38\u8fdb\u884c double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570\u8ba1\u7b97\uff0c\u56e0\u6b64\u5e26\u6765\u4e86\u7cbe\u5ea6\u95ee\u9898\u548c\u65f6\u95f4\u95ee\u9898\u3002 \u6709\u4e9b\u95ee\u9898\uff0c\u4f8b\u5982\u6c42\u70b9\u5750\u6807\u5747\u4e3a\u6574\u6570\u7684\u4e09\u89d2\u5f62\u9762\u79ef\uff0c\u53ef\u4ee5\u5229\u7528\u5176\u7279\u6b8a\u6027\u8fdb\u884c\u7eaf\u6574\u6570\u8ba1\u7b97\uff0c\u907f\u514d\u7528\u6d6e\u70b9\u6570\u5f71\u54cd\u7cbe\u5ea6\u3002 \u7531\u4e8e\u6d6e\u70b9\u6570\u8ba1\u7b97\u6bd4\u6574\u6570\u8ba1\u7b97\u6162\uff0c\u6240\u4ee5\u9700\u8981\u6ce8\u610f\u7a0b\u5e8f\u7684\u5e38\u6570\u56e0\u5b50\u7ed9\u65f6\u95f4\u5e26\u6765\u7684\u5f71\u54cd\u3002","title":"\u4e8c\u7ef4\u8ba1\u7b97\u51e0\u4f55\u57fa\u7840"},{"location":"geometry/2d/#_1","text":"\u5982\u5e76\u4e0d\u4e86\u89e3\uff1a \u51e0\u4f55\u57fa\u7840 \u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb \u5411\u91cf\uff08\u5305\u62ec\u5411\u91cf\u79ef\uff09 \u6781\u5750\u6807\u4e0e\u6781\u5750\u6807\u7cfb \u8bf7\u5148\u9605\u8bfb OI Wiki - \u6570\u5b66 - \u6742\u9879 \u3002","title":"\u524d\u7f6e\u6280\u80fd"},{"location":"geometry/2d/#_2","text":"","title":"\u56fe\u5f62\u7684\u8bb0\u5f55"},{"location":"geometry/2d/#_3","text":"\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\uff0c\u70b9\u7528\u5750\u6807\u8868\u793a\uff0c\u6bd4\u5982\u70b9 (5,2) (5,2) \uff0c\u70b9 (-1,0) (-1,0) \u4ec0\u4e48\u7684\u3002 \u6211\u4eec\u8bb0\u5f55\u5176\u6a2a\u7eb5\u5750\u6807\u503c\u5373\u53ef\u3002\u7528 pair \u6216\u5f00\u7ed3\u6784\u4f53\u8bb0\u5f55\u5747\u53ef\u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u7528\u6781\u5750\u6807\u8868\u793a\u5373\u53ef\u3002\u8bb0\u5f55\u5176\u6781\u5f84\u4e0e\u6781\u89d2\u3002","title":"\u70b9"},{"location":"geometry/2d/#_4","text":"\u7531\u4e8e\u5411\u91cf\u7684\u5750\u6807\u8868\u793a\u4e0e\u70b9\u76f8\u540c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u50cf\u70b9\u4e00\u6837\u5b58\u5411\u91cf\u5373\u53ef\uff08\u5f53\u7136\u70b9\u4e0d\u662f\u5411\u91cf\uff09\u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u4e0e\u70b9\u540c\u7406\u3002","title":"\u5411\u91cf"},{"location":"geometry/2d/#_5","text":"","title":"\u7ebf"},{"location":"geometry/2d/#_6","text":"\u4e00\u822c\u5728\u89e3\u6570\u5b66\u9898\u65f6\uff0c\u6211\u4eec\u7528\u89e3\u6790\u5f0f\u8868\u793a\u4e00\u6761\u76f4\u7ebf\u3002\u6709\u4e00\u822c\u5f0f Ax+By+C=0 Ax+By+C=0 \uff0c\u8fd8\u6709\u659c\u622a\u5f0f y=kx+b y=kx+b \uff0c\u8fd8\u6709\u622a\u8ddd\u5f0f \\frac{x}{a}+\\frac{y}{b}=1 \\frac{x}{a}+\\frac{y}{b}=1 \u2026\u2026 \u7528\u54ea\u79cd\uff1f \u8fd9\u4e9b\u5f0f\u5b50\u6700\u540e\u90fd\u9003\u4e0d\u8fc7\u6700\u540e\u7684\u7ed3\u679c\u2014\u2014\u4ee3\u5165\u89e3\u65b9\u7a0b\u6c42\u503c\u3002 \u89e3\u65b9\u7a0b\u4ec0\u4e48\u7684\u6700\u8ba8\u538c\u4e86\uff0c\u6709\u4ec0\u4e48\u597d\u4e00\u70b9\u7684\u65b9\u6cd5\u5417\uff1f \u8003\u8651\u6211\u4eec\u53ea\u60f3\u77e5\u9053\u8fd9\u6761\u76f4\u7ebf\u5728\u54ea\uff0c\u5b83\u7684\u503e\u659c\u7a0b\u5ea6\u600e\u4e48\u6837\u3002\u4e8e\u662f\u7528\u76f4\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\u5148\u5927\u81f4\u786e\u5b9a\u4f4d\u7f6e\uff0c\u7528\u4e00\u4e2a\u5411\u91cf\u8868\u793a\u5b83\u7684\u503e\u659c\u7a0b\u5ea6\uff0c\u597d\u4e86\uff0c\u8fd9\u6761\u76f4\u7ebf\u786e\u5b9a\u4e86\u3002 \u56e0\u6b64\u6211\u4eec\u8bb0\u5f55\u7684\u662f\uff1a\u76f4\u7ebf\u4e0a\u4e00\u70b9\u548c\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf\u3002","title":"\u76f4\u7ebf\u4e0e\u5c04\u7ebf"},{"location":"geometry/2d/#_7","text":"\u7ebf\u6bb5\u5f88\u597d\u8bb0\u5f55\uff1a\u53ea\u9700\u8981\u8bb0\u5f55\u5de6\u53f3\u7aef\u70b9\u5373\u53ef\u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u8bb0\u5f55\u7ebf\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\uff0c\u56e0\u6b64\u5927\u591a\u6570\u76f4\u7ebf\u95ee\u9898\u90fd\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u89e3\u51b3\u3002","title":"\u7ebf\u6bb5"},{"location":"geometry/2d/#_8","text":"\u5f00\u6570\u7ec4\u6309\u4e00\u5b9a\u987a\u5e8f\u8bb0\u5f55\u591a\u8fb9\u5f62\u7684\u6bcf\u4e2a\u9876\u70b9\u5373\u53ef\u3002 \u7279\u6b8a\u5730\uff0c\u5982\u679c\u77e9\u5f62\u7684\u5404\u8fb9\u5747\u4e0e\u67d0\u5750\u6807\u8f74\u5e73\u884c\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u8bb0\u5f55\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u7684\u9876\u70b9\u5373\u53ef\u3002","title":"\u591a\u8fb9\u5f62"},{"location":"geometry/2d/#_9","text":"\u4e00\u4e9b\u7279\u6b8a\u66f2\u7ebf\uff0c\u5982\u51fd\u6570\u56fe\u50cf\u7b49\u4e00\u822c\u8bb0\u5f55\u5176\u89e3\u6790\u5f0f\u3002\u5bf9\u4e8e\u5706\uff0c\u76f4\u63a5\u8bb0\u5f55\u5176\u5706\u5fc3\u548c\u534a\u5f84\u5373\u53ef\u3002","title":"\u66f2\u7ebf"},{"location":"geometry/2d/#_10","text":"","title":"\u57fa\u672c\u516c\u5f0f"},{"location":"geometry/2d/#_11","text":"\u5728\u4e09\u89d2\u5f62 \\triangle \\text{ABC} \\triangle \\text{ABC} \u4e2d\uff0c\u82e5\u89d2 A,B,C A,B,C \u6240\u5bf9\u8fb9\u5206\u522b\u4e3a a,b,c a,b,c \uff0c\u5219\u6709\uff1a \\frac{a}{\\sin A}=\\frac{b}{\\sin B}=\\frac{c}{\\sin C}=2R \\frac{a}{\\sin A}=\\frac{b}{\\sin B}=\\frac{c}{\\sin C}=2R \u5176\u4e2d\uff0c R R \u4e3a \\triangle \\text{ABC} \\triangle \\text{ABC} \u7684\u5916\u63a5\u5706\u534a\u5f84\u3002","title":"\u6b63\u5f26\u5b9a\u7406"},{"location":"geometry/2d/#_12","text":"\u5728\u4e09\u89d2\u5f62 \\triangle \\text{ABC} \\triangle \\text{ABC} \u4e2d\uff0c\u82e5\u89d2 A,B,C A,B,C \u6240\u5bf9\u8fb9\u5206\u522b\u4e3a a,b,c a,b,c \uff0c\u5219\u6709\uff1a \\begin{aligned} a^2&=b^2+c^2-2bc\\cos A\\\\ b^2&=a^2+c^2-2ac\\cos B\\\\ c^2&=a^2+b^2-2ab\\cos C \\end{aligned} \\begin{aligned} a^2&=b^2+c^2-2bc\\cos A\\\\ b^2&=a^2+c^2-2ac\\cos B\\\\ c^2&=a^2+b^2-2ab\\cos C \\end{aligned} \u4e0a\u8ff0\u516c\u5f0f\u7684\u8bc1\u660e\u7565\u3002\u5747\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u5fc5\u4fee\u4e94\u5185\u5bb9\u3002","title":"\u4f59\u5f26\u5b9a\u7406"},{"location":"geometry/2d/#_13","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"geometry/2d/#_14","text":"\u67d0\u540c\u5b66\uff1a\u6211\u80fd\u770b\u51fa\u6765\uff01 \u6211\u4eec\u6709\u76f4\u7ebf\u4e0a\u7684\u4e00\u70b9 P P \u7684\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf \\vec v \\vec v \uff0c\u60f3\u77e5\u9053\u67d0\u4e2a\u70b9 Q Q \u5728\u76f4\u7ebf\u7684\u54ea\u8fb9\u3002 \u6211\u4eec\u5229\u7528\u5411\u91cf\u79ef\u7684\u6027\u8d28\uff0c\u7b97\u51fa \\overrightarrow {PQ}\\times \\vec v \\overrightarrow {PQ}\\times \\vec v \u3002\u5982\u679c\u5411\u91cf\u79ef\u4e3a\u8d1f\uff0c\u5219 Q Q \u5728\u76f4\u7ebf\u4e0a\u65b9\uff0c\u5982\u679c\u5411\u91cf\u79ef\u4e3a 0 0 \uff0c\u5219 Q Q \u5728\u76f4\u7ebf\u4e0a\uff0c\u5982\u679c\u5411\u91cf\u79ef\u4e3a\u6b63\uff0c\u5219 Q Q \u5728\u76f4\u7ebf\u4e0b\u65b9\u3002 \u53ef\u4ee5\u753b\u4e00\u4e0b\u56fe\uff0c\u7528\u53f3\u624b\u5b9a\u5219\u611f\u53d7\u4e00\u4e0b\u3002","title":"\u5224\u65ad\u4e00\u4e2a\u70b9\u5728\u76f4\u7ebf\u7684\u54ea\u8fb9"},{"location":"geometry/2d/#_15","text":"\u67d0\u540c\u5b66\uff1a\u6342\u6211\u5634\u5e72\u4ec0\u4e48\u6211\u53ef\u4ee5 \u2026\u2026%\uffe5*\u2026\u2026% \u6211\u4eec\u73b0\u5728\u60f3\u5224\u65ad\u4e24\u6761\u7ebf\u6bb5\u662f\u5426\u76f8\u4ea4\u3002 \u9996\u5148\u7279\u5224\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u3002\u5982\u679c\u4e24\u7ebf\u6bb5\u5e73\u884c\uff0c\u81ea\u7136\u4e0d\u80fd\u76f8\u4ea4\u3002\u8fd9\u79cd\u60c5\u51b5\u901a\u8fc7\u5224\u65ad\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u659c\u7387\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u5f53\u7136\uff0c\u5982\u679c\u4e24\u7ebf\u6bb5\u91cd\u5408\u6216\u90e8\u5206\u91cd\u5408\uff0c\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426\u6709\u4e09\u70b9\u5171\u7ebf\u7684\u60c5\u51b5\u5373\u53ef\u3002 \u5982\u679c\u4e24\u7ebf\u6bb5\u7684\u4ea4\u70b9\u4e3a\u5176\u4e2d\u4e00\u6761\u7ebf\u6bb5\u7684\u7aef\u70b9\uff0c\u4ecd\u7136\u5224\u65ad\u662f\u5426\u6709\u4e09\u70b9\u5171\u7ebf\u7684\u60c5\u51b5\u5373\u53ef\u3002 \u8fd8\u6709\u4e9b\u663e\u7136\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53e3\u5934\u4e0a\u79f0\u4e4b\u4e3a\u300c\u4e24\u6761\u7ebf\u6bb5\u79bb\u7740\u592a\u8fdc\u4e86\u300d\u3002\u53ef\u4ec0\u4e48\u662f\u300c\u79bb\u7740\u8fdc\u300d\uff0c\u600e\u4e48\u5224\u65ad\u5b83\u5462\uff1f \u89c4\u5b9a\u300c\u4e00\u6761\u7ebf\u6bb5\u7684\u533a\u57df\u300d\u4e3a\u4ee5\u8fd9\u6761\u7ebf\u6bb5\u4e3a\u5bf9\u89d2\u7ebf\u7684\uff0c\u5404\u8fb9\u5747\u4e0e\u67d0\u4e00\u5750\u6807\u8f74\u5e73\u884c\u7684\u77e9\u5f62\u6240\u5360\u7684\u533a\u57df\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u6761\u7ebf\u6bb5\u6ca1\u6709\u516c\u5171\u533a\u57df\uff0c\u5219\u8fd9\u4e24\u6761\u7ebf\u6bb5\u4e00\u5b9a\u4e0d\u76f8\u4ea4\u3002 \u6bd4\u5982\u6709\u4ee5\u4e0b\u4e24\u6761\u7ebf\u6bb5\uff1a \u5b83\u4eec\u5360\u7528\u7684\u533a\u57df\u662f\u8fd9\u6837\u7684\uff1a \u4e8e\u662f\u53ef\u4ee5\u5feb\u901f\u5730\u5224\u65ad\u51fa\u6765\u8fd9\u4e24\u6761\u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u3002 \u8fd9\u5c31\u662f \u5feb\u901f\u6392\u65a5\u5b9e\u9a8c \u3002\u4e0a\u8ff0\u60c5\u51b5\u79f0\u4f5c \u672a\u901a\u8fc7\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c \u3002 \u672a\u901a\u8fc7\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u662f\u4e24\u7ebf\u6bb5\u65e0\u4ea4\u70b9\u7684 \u5145\u5206\u4e0d\u5fc5\u8981\u6761\u4ef6 \uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u3002 \u56e0\u4e3a\u4e24\u7ebf\u6bb5 a,b a,b \u76f8\u4ea4\uff0c b b \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u4e00\u5b9a\u5206\u5e03\u5728 a a \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u4e24\u7aef\uff1b\u540c\u7406\uff0c a a \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u4e00\u5b9a\u5206\u5e03\u5728 b b \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u4e24\u7aef\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u4e00\u6761\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u76f8\u5bf9\u4e8e\u53e6\u4e00\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u5982\u679c\u4e0d\u540c\uff0c\u5219\u4e24\u7ebf\u6bb5\u76f8\u4ea4\uff0c\u53cd\u4e4b\u5219\u4e0d\u76f8\u4ea4\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528 3.1 \u4e2d\u7684\u77e5\u8bc6\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u76f4\u7ebf\u4e0e\u70b9\u7684\u4f4d\u7f6e\u5173\u7cfb\u3002 \u8fd9\u5c31\u662f \u8de8\u7acb\u5b9e\u9a8c \uff0c\u5982\u679c\u5bf9\u4e8e\u4e24\u7ebf\u6bb5 a,b a,b \uff0c b b \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u5e03\u5728 a a \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u4e24\u4fa7\uff0c \u4e14 a a \u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u5e03\u5728 b b \u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u7684\u4e24\u4fa7\uff0c\u6211\u4eec\u5c31\u8bf4 a,b a,b \u4e24\u7ebf\u6bb5 \u901a\u8fc7\u4e86\u8de8\u7acb\u5b9e\u9a8c \uff0c\u5373\u4e24\u7ebf\u6bb5\u76f8\u4ea4\u3002 \u901a\u8fc7\u8de8\u7acb\u5b9e\u9a8c\u662f\u4e24\u7ebf\u6bb5\u76f8\u4ea4\u7684 \u5145\u8981\u6761\u4ef6 \uff0c\u56e0\u6b64\u76f4\u63a5\u5229\u7528\u8de8\u7acb\u5b9e\u9a8c\u5224\u65ad\u5373\u53ef\u3002 \u7531\u4e8e\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u53ea\u9700\u8981\u5c11\u91cf\u6bd4\u8f83\u800c\u4e0d\u9700\u8981\u8ba1\u7b97\uff0c\u6240\u4ee5\u5148\u7528\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u5224\u65ad\u53ef\u4ee5\u51cf\u5c0f\u4e00\u90e8\u5206\u5e38\u6570\u3002","title":"\u5feb\u901f\u6392\u65a5\u5b9e\u9a8c\u4e0e\u8de8\u7acb\u5b9e\u9a8c"},{"location":"geometry/2d/#_16","text":"\u67d0\u540c\u5b66\uff1a\u6211\u8fd8\u80fd %$#^%*(%&)) \u5728\u8ba1\u7b97\u51e0\u4f55\u4e2d\uff0c\u8fd9\u4e2a\u95ee\u9898\u88ab\u79f0\u4e3a PIP \u95ee\u9898 \uff0c\u5df2\u7ecf\u6709\u4e00\u4e9b\u6210\u719f\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u4e0b\u9762\u4f9d\u6b21\u4ecb\u7ecd\u3002","title":"\u5224\u65ad\u4e00\u70b9\u662f\u5426\u5728\u4efb\u610f\u591a\u8fb9\u5f62\u5185\u90e8"},{"location":"geometry/2d/#ray-casting-algorithm","text":"\u5728 \u8fd9\u91cc \u53ef\u4ee5\u770b\u5230\u6700\u539f\u59cb\u7684\u601d\u8def\u3002 \u6211\u4eec\u5148\u7279\u5224\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u300c\u8fd9\u4e2a\u70b9\u79bb\u591a\u8fb9\u5f62\u592a\u8fdc\u4e86\u300d\u3002\u8003\u8651\u4e00\u4e2a\u80fd\u591f\u5b8c\u5168\u8986\u76d6\u8be5\u591a\u8fb9\u5f62\u7684\u6700\u5c0f\u77e9\u5f62\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u5728\u8fd9\u4e2a\u77e9\u5f62\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u5728\u591a\u8fb9\u5f62\u5185\u3002\u8fd9\u6837\u7684\u77e9\u5f62\u5f88\u597d\u6c42\uff0c\u53ea\u9700\u8981\u77e5\u9053\u591a\u8fb9\u5f62\u6a2a\u5750\u6807\u4e0e\u7eb5\u5750\u6807\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u5750\u6807\u4e24\u4e24\u7ec4\u5408\u6210\u56db\u4e2a\u70b9\uff0c\u5c31\u662f\u8fd9\u4e2a\u77e9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u4e86\u3002 \u8fd8\u6709\u70b9\u5728\u591a\u8fb9\u5f62\u7684\u67d0\u4e00\u8fb9\u6216\u67d0\u9876\u70b9\u4e0a\uff0c\u8fd9\u79cd\u60c5\u51b5\u5341\u5206\u5bb9\u6613\u5224\u65ad\uff08\u7559\u4f5c\u8bfe\u540e\u4f5c\u4e1a\uff09\u3002 \u6211\u4eec\u8003\u8651\u4ee5\u8be5\u70b9\u4e3a\u7aef\u70b9\u5f15\u51fa\u4e00\u6761\u5c04\u7ebf\uff0c\u5982\u679c\u8fd9\u6761\u5c04\u7ebf\u4e0e\u591a\u8fb9\u5f62\u6709\u5947\u6570\u4e2a\u4ea4\u70b9\uff0c\u5219\u8be5\u70b9\u5728\u591a\u8fb9\u5f62\u5185\u90e8\uff0c\u5426\u5219\u8be5\u70b9\u5728\u591a\u8fb9\u5f62\u5916\u90e8\uff0c\u6211\u4eec\u7b80\u8bb0\u4e3a \u5947\u5185\u5076\u5916 \u3002\u8fd9\u4e2a\u7b97\u6cd5\u540c\u6837\u88ab\u79f0\u4e3a\u5947\u5076\u89c4\u5219 (Even-odd rule) \u3002 \u7531\u4e8e Jordan curve theorem \uff0c\u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u6761\u5c04\u7ebf\u6bcf\u6b21\u4e0e\u591a\u8fb9\u5f62\u7684\u4e00\u6761\u8fb9\u76f8\u4ea4\uff0c\u5c31\u5207\u6362\u4e00\u6b21\u4e0e\u591a\u8fb9\u5f62\u7684\u5185\u5916\u5173\u7cfb\uff0c\u6240\u4ee5\u7edf\u8ba1\u4ea4\u70b9\u6570\u7684\u5947\u5076\u5373\u53ef\u3002 \u8fd9\u6837\u7684\u5c04\u7ebf\u600e\u4e48\u53d6\uff1f\u53ef\u4ee5\u968f\u673a\u53d6\u8fd9\u6761\u5c04\u7ebf\u6240\u5728\u76f4\u7ebf\u7684\u659c\u7387\uff0c\u5efa\u8bae\u4e3a\u65e0\u7406\u6570\u4ee5\u907f\u514d\u51fa\u73b0\u5c04\u7ebf\u4e0e\u591a\u8fb9\u5f62\u67d0\u8fb9\u91cd\u5408\u7684\u60c5\u51b5\u3002 \u5728\u539f\u7248\u4ee3\u7801\u4e2d\uff0c\u4f7f\u7528\u7684\u662f\u8bb0\u5f55\u591a\u8fb9\u5f62\u7684\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u5c04\u7ebf\u4e0a\u4e00\u70b9\uff0c\u8fd9\u6837\u7edf\u8ba1\u65f6\uff0c\u5982\u679c\u51fa\u73b0\u5c04\u7ebf\u8fc7\u591a\u8fb9\u5f62\u67d0\u8fb9\u6216\u67d0\u9876\u70b9\u65f6\uff0c\u53ef\u4ee5\u89c4\u5b9a\u5c04\u7ebf\u7ecf\u8fc7\u7684\u70b9\u540c\u5728\u5c04\u7ebf\u4e00\u4fa7\uff0c\u8fdb\u800c\u505a\u8de8\u7acb\u5b9e\u9a8c\u5373\u53ef\u3002","title":"\u5149\u7ebf\u6295\u5c04\u7b97\u6cd5 (Ray casting algorithm)"},{"location":"geometry/2d/#winding-number-algorithm","text":"\u56de\u8f6c\u6570\u662f\u6570\u5b66\u4e0a\u7684\u6982\u5ff5\uff0c\u662f\u5e73\u9762\u5185\u95ed\u5408\u66f2\u7ebf\u9006\u65f6\u9488\u7ed5\u8fc7\u8be5\u70b9\u7684\u603b\u6b21\u6570\u3002\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53\u56de\u8f6c\u6570\u7b49\u4e8e 0 0 \u7684\u65f6\u5019\uff0c\u70b9\u5728\u66f2\u7ebf\u5916\u90e8\u3002\u8fd9\u4e2a\u7b97\u6cd5\u540c\u6837\u88ab\u79f0\u4e3a\u975e\u96f6\u89c4\u5219 (Nonzero-rule) \u3002 \u5982\u4f55\u8ba1\u7b97\u5462\uff1f\u6211\u4eec\u628a\u8be5\u70b9\u4e0e\u591a\u8fb9\u5f62\u7684\u6240\u6709\u9876\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u8ba1\u7b97\u76f8\u90bb\u4e24\u8fb9\u5939\u89d2\u7684\u548c\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u5939\u89d2\u662f \u6709\u65b9\u5411\u7684 \u3002\u5982\u679c\u5939\u89d2\u548c\u4e3a 0 0 \uff0c\u5219\u8fd9\u4e2a\u70b9\u5728\u591a\u8fb9\u5f62\u5916\uff0c\u5426\u5219\u5728\u591a\u8fb9\u5f62\u5185\u3002","title":"\u56de\u8f6c\u6570\u7b97\u6cd5 (Winding number algorithm)"},{"location":"geometry/2d/#_17","text":"\u67d0\u540c\u5b66\uff1a\u8fd9\u8fd8\u4e0d\u7b80\u5355\u8054\u7acb\u65b9\u7a0b #%$& %)(Y(*& UIG)) \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u4e24\u6761\u76f4\u7ebf\u76f8\u4ea4\uff0c\u53ea\u9700\u5224\u65ad\u4e00\u4e0b\u4e24\u6761\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf\u662f\u5426\u5e73\u884c\u5373\u53ef\u3002\u5982\u679c\u65b9\u5411\u5411\u91cf\u5e73\u884c\uff0c\u5219\u4e24\u6761\u76f4\u7ebf\u5e73\u884c\uff0c\u4ea4\u70b9\u4e2a\u6570\u4e3a 0 0 \u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u82e5\u4e24\u6761\u76f4\u7ebf\u5e73\u884c\u4e14\u8fc7\u540c\u4e00\u70b9\uff0c\u5219\u4e24\u76f4\u7ebf\u91cd\u5408\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u7b80\u5316\u4e3a\u6211\u4eec\u6709\u76f4\u7ebf AB,CD AB,CD \u4ea4\u4e8e\u4e00\u70b9\uff0c\u60f3\u6c42\u51fa\u4ea4\u70b9 E E \u3002 \u5982\u679c\u4e24\u76f4\u7ebf\u76f8\u4ea4\uff0c\u5219\u4ea4\u70b9\u53ea\u6709\u4e00\u4e2a\uff0c\u6211\u4eec\u8bb0\u5f55\u4e86\u76f4\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\u548c\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u70b9\u4e0e\u4ea4\u70b9\u7684\u8ddd\u79bb l l \uff0c\u518d\u5c06\u8fd9\u4e2a\u70b9\u6cbf\u65b9\u5411\u5411\u91cf\u5e73\u79fb l l \u4e2a\u5355\u4f4d\u957f\u5ea6\u5373\u53ef\u3002 \u8003\u8651\u6784\u9020\u4e09\u89d2\u5f62\uff0c\u5229\u7528\u6b63\u5f26\u5b9a\u7406\u6c42\u89e3 l l \uff0c\u53ef\u4ee5\u5229\u7528\u5411\u91cf\u79ef\u6784\u9020\u51fa\u6b63\u5f26\u5b9a\u7406\u3002 \u7531\u4e0a\u56fe\u53ef\u77e5\uff0c |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\beta |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\beta \uff0c |\\vec u\\times \\vec b|=|\\vec u||\\vec b|\\sin \\theta |\\vec u\\times \\vec b|=|\\vec u||\\vec b|\\sin \\theta \u3002 \u4f5c\u5546\u5f97\uff1a T=\\frac{|\\vec u\\times \\vec b|}{|\\vec a\\times \\vec b|}=\\frac{|\\vec u|\\sin \\theta}{|\\vec a|\\sin \\beta} T=\\frac{|\\vec u\\times \\vec b|}{|\\vec a\\times \\vec b|}=\\frac{|\\vec u|\\sin \\theta}{|\\vec a|\\sin \\beta} \u53ef\u4ee5\u770b\u51fa\uff0c |\\frac{|\\vec u|\\sin \\theta}{\\sin \\beta}|=l\u200b |\\frac{|\\vec u|\\sin \\theta}{\\sin \\beta}|=l\u200b \u3002\u82e5\u7edd\u5bf9\u503c\u5185\u90e8\u5f0f\u5b50\u53d6\u503c\u4e3a\u6b63\uff0c\u4ee3\u8868\u6cbf \\vec a\u200b \\vec a\u200b \u65b9\u5411\u5e73\u79fb\uff0c\u53cd\u4e4b\u5219\u4e3a\u53cd\u65b9\u5411\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5c06 T T \u76f4\u63a5\u4e58\u4e0a \\vec a \\vec a \uff0c\u5c31\u81ea\u52a8\u51fa\u73b0\u4e86\u76f4\u7ebf\u7684\u5355\u4f4d\u5411\u91cf\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u5176\u4ed6\u6d88\u53bb\u64cd\u4f5c\u4e86\u3002 \u4e8e\u662f\uff0c\u53ea\u9700\u8981\u5c06\u70b9 P P \u52a0\u4e0a T\\vec a T\\vec a \u5373\u53ef\u5f97\u51fa\u4ea4\u70b9\u3002","title":"\u6c42\u4e24\u6761\u76f4\u7ebf\u7684\u4ea4\u70b9"},{"location":"geometry/2d/#_18","text":"","title":"\u6c42\u4efb\u610f\u591a\u8fb9\u5f62\u7684\u5468\u957f\u548c\u9762\u79ef"},{"location":"geometry/2d/#_19","text":"\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\uff0c\u7b80\u6d01\u5373\u7f8e\u5fb7\u3002","title":"\u6c42\u4efb\u610f\u591a\u8fb9\u5f62\u7684\u5468\u957f"},{"location":"geometry/2d/#_20","text":"\u8003\u8651\u5411\u91cf\u79ef\u7684\u6a21\u7684\u51e0\u4f55\u610f\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5411\u91cf\u79ef\u5b8c\u6210\u3002 \u5c06\u591a\u8fb9\u5f62\u4e0a\u7684\u70b9\u9006\u65f6\u9488\u6807\u8bb0\u4e3a p_1,p_2,\\cdots ,p_n p_1,p_2,\\cdots ,p_n \uff0c\u518d\u4efb\u9009\u4e00\u4e2a\u8f85\u52a9\u70b9 O O \uff0c\u8bb0\u5411\u91cf \\vec {v_i}=p_i-O \\vec {v_i}=p_i-O \uff0c\u90a3\u4e48\u8fd9\u4e2a\u591a\u8fb9\u5f62\u9762\u79ef S S \u53ef\u4ee5\u8868\u793a\u4e3a\uff1a S=\\frac{1}{2}\\sum_{i=1}^n |\\vec {v_i}\\times \\overrightarrow{v_{i\\bmod n+1}}| S=\\frac{1}{2}\\sum_{i=1}^n |\\vec {v_i}\\times \\overrightarrow{v_{i\\bmod n+1}}|","title":"\u6c42\u4efb\u610f\u591a\u8fb9\u5f62\u7684\u9762\u79ef"},{"location":"geometry/2d/#_21","text":"","title":"\u5706\u4e0e\u76f4\u7ebf\u76f8\u5173"},{"location":"geometry/2d/#_22","text":"\u9996\u5148\u5224\u65ad\u76f4\u7ebf\u4e0e\u5706\u7684\u4f4d\u7f6e\u5173\u7cfb\u3002\u5982\u679c\u76f4\u7ebf\u4e0e\u5706\u76f8\u79bb\u5219\u65e0\u4ea4\u70b9\uff0c\u82e5\u76f8\u5207\u5219\u53ef\u4ee5\u5229\u7528\u5207\u7ebf\u6c42\u51fa\u5207\u70b9\u4e0e\u534a\u5f84\u6240\u5728\u76f4\u7ebf\uff0c\u4e4b\u540e\u8f6c\u5316\u4e3a\u6c42\u4e24\u76f4\u7ebf\u4ea4\u70b9\u3002 \u82e5\u6709\u4e24\u4ea4\u70b9\uff0c\u5219\u53ef\u4ee5\u5229\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u51fa\u4e24\u4ea4\u70b9\u7684\u4e2d\u70b9\uff0c\u7136\u540e\u6cbf\u76f4\u7ebf\u65b9\u5411\u52a0\u4e0a\u534a\u5f26\u957f\u5373\u53ef\u3002","title":"\u6c42\u76f4\u7ebf\u4e0e\u5706\u7684\u4ea4\u70b9"},{"location":"geometry/2d/#_23","text":"\u9996\u5148\u6211\u4eec\u5224\u65ad\u4e00\u4e0b\u4e24\u4e2a\u5706\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u5982\u679c\u5916\u79bb\u6216\u5185\u542b\u5219\u65e0\u4ea4\u70b9\uff0c\u5982\u679c\u76f8\u5207\uff0c\u53ef\u4ee5\u7b97\u51fa\u4e24\u5706\u5fc3\u8fde\u7ebf\u7684\u65b9\u5411\u5411\u91cf\uff0c\u7136\u540e\u5229\u7528\u4e24\u5706\u534a\u5f84\u8ba1\u7b97\u51fa\u5e73\u79fb\u8ddd\u79bb\uff0c\u6700\u540e\u5c06\u5706\u5fc3\u6cbf\u8fd9\u4e2a\u65b9\u5411\u5411\u91cf\u8fdb\u884c\u5e73\u79fb\u5373\u53ef\u3002 \u5982\u679c\u4e24\u5706\u76f8\u4ea4\uff0c\u5219\u5fc5\u6709\u4e24\u4e2a\u4ea4\u70b9\uff0c\u5e76\u4e14\u5173\u4e8e\u4e24\u5706\u5fc3\u8fde\u7ebf\u5bf9\u79f0\u3002\u56e0\u6b64\u4e0b\u9762\u53ea\u8bf4\u660e\u4e00\u4e2a\u4ea4\u70b9\u7684\u6c42\u6cd5\uff0c\u53e6\u4e00\u4e2a\u4ea4\u70b9\u53ef\u4ee5\u7528\u7c7b\u4f3c\u65b9\u6cd5\u6c42\u51fa\u3002 \u6211\u4eec\u5148\u5c06\u4e00\u5706\u5706\u5fc3\u4e0e\u4ea4\u70b9\u76f8\u8fde\uff0c\u6c42\u51fa\u4e24\u5706\u5fc3\u8fde\u7ebf\u4e0e\u8be5\u8fde\u7ebf\u6240\u6210\u89d2\u3002\u8fd9\u6837\uff0c\u5c06\u4e24\u5706\u5fc3\u8fde\u7ebf\u7684\u65b9\u5411\u5411\u91cf\u65cb\u8f6c\u8fd9\u4e2a\u89d2\u5ea6\uff0c\u5c31\u662f\u5706\u5fc3\u4e0e\u4ea4\u70b9\u76f8\u8fde\u5f62\u6210\u7684\u534a\u5f84\u7684\u65b9\u5411\u5411\u91cf\u4e86\u3002 \u6700\u540e\u8fd8\u662f\u8001\u5957\u8def\u2014\u2014\u6cbf\u65b9\u5411\u5411\u91cf\u65b9\u5411\u5c06\u5706\u5fc3\u5e73\u79fb\u534a\u5f84\u957f\u5ea6\u3002","title":"\u6c42\u4e24\u5706\u4ea4\u70b9"},{"location":"geometry/2d/#_24","text":"\u4f8b\u9898 \u300cJOI Spring Camp 2014 Day4\u300d\u4e24\u4e2a\u4eba\u7684\u661f\u5ea7 \u5e73\u9762\u5185\u6709 n n \u4e2a\u70b9\uff0c\u6709\u4e09\u79cd\u989c\u8272\uff0c\u6bcf\u4e2a\u70b9\u7684\u989c\u8272\u662f\u4e09\u79cd\u4e2d\u7684\u4e00\u79cd\u3002\u6c42\u4e0d\u76f8\u4ea4\u7684\u4e09\u8272\u4e09\u89d2\u5f62\u5bf9\u6570\u3002 6\\le n\\le 3000 6\\le n\\le 3000 \u3002 \u5982\u679c\u4e24\u4e2a\u4e09\u89d2\u5f62\u4e0d\u76f8\u4ea4\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u505a\u51fa\u4e24\u6761\u5185\u516c\u5207\u7ebf\uff0c\u5982\u679c\u76f8\u4ea4\u6216\u5185\u542b\u662f\u505a\u4e0d\u51fa\u5185\u516c\u5207\u7ebf\u7684\u3002\u4e09\u89d2\u5f62\u7684\u516c\u5207\u7ebf\u53ef\u4ee5\u7c7b\u6bd4\u5706\u7684\u516c\u5207\u7ebf\u3002 \u5148\u679a\u4e3e\u4e00\u4e2a\u539f\u70b9\uff0c\u8bb0\u4e3a O O \uff0c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6781\u70b9\uff0c\u8fc7\u8fd9\u4e2a\u70b9\u4e14\u4e0e x x \u8f74\u5e73\u884c\u7684\u76f4\u7ebf\u4f5c\u4e3a\u6781\u8f74\uff0c\u5efa\u7acb\u6781\u5750\u6807\u7cfb\uff0c\u628a\u5269\u4f59\u70b9\u6309\u6781\u89d2\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7136\u540e\u7edf\u8ba1\u51fa\u5728\u6781\u8f74\u4e0a\u65b9\u548c\u4e0b\u65b9\u7684\u6bcf\u79cd\u70b9\u7684\u4e2a\u6570\u3002 \u7136\u540e\u6839\u636e\u70b9\u679a\u4e3e\u516c\u5207\u7ebf\uff0c\u8bb0\u679a\u4e3e\u5230\u7684\u70b9\u4e3a P P \uff0c\u521d\u59cb\u65f6\u516c\u5207\u7ebf\u4e3a\u6781\u8f74\u3002\u5f00\u59cb\u7edf\u8ba1\u3002\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u516c\u5207\u7ebf\u8fc7\u70b9 O O \u548c\u70b9 P P \u3002\u56e0\u4e3a\u516c\u5207\u7ebf\u4e0e\u4e09\u89d2\u5f62\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5\u4e00\u65b9\u9009\u62e9\u516c\u5207\u7ebf\u4e0a\u65b9\u7684\u70b9\uff0c\u53e6\u4e00\u65b9\u4e00\u5b9a\u9009\u62e9\u4e0b\u65b9\u7684\u70b9\u3002\u7136\u540e\u5229\u7528\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u65b9\u6848\u6570\u5373\u53ef\u3002 \u7edf\u8ba1\u5b8c\u540e\u8f6c\u516c\u5207\u7ebf\uff0c\u90a3\u4e48\u70b9 P P \u4e00\u5b9a\u6539\u53d8\u4e86\u76f8\u5bf9\u4e8e\u516c\u5207\u7ebf\u7684\u4e0a\u4e0b\u4f4d\u7f6e\uff0c\u800c\u5176\u4ed6\u70b9\u4e0d\u52a8\uff0c\u5e94\u8be5\u53ea\u5c06\u5b83\u7684\u4f4d\u7f6e\u4fe1\u606f\u6539\u53d8\u3002 \u8fd9\u6837\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u540c\u4e00\u5bf9\u4e09\u89d2\u5f62\u6700\u7ec8\u88ab\u7edf\u8ba1\u4e86 4 4 \u6b21\uff0c\u5c31\u662f\u540c\u4e00\u6761\u516c\u5207\u7ebf\u4f1a\u88ab\u679a\u4e3e\u4e24\u6b21\uff0c\u6700\u540e\u505a\u51fa\u7684\u7b54\u6848\u5e94\u9664\u4ee5 4 4 \u3002 \u5206\u6790\u4e00\u4e0b\u7b97\u6cd5\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u679a\u4e3e\u4e86\u4e00\u4e2a\u539f\u70b9\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u539f\u70b9\u5c06\u5269\u4f59\u70b9\u6392\u5e8f\u540e\u7ebf\u6027\u7edf\u8ba1\u3002\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2\\log n) O(n^2\\log n) \u3002","title":"\u6781\u89d2\u5e8f"},{"location":"geometry/2d/#_25","text":"\u7531\u4e8e\u8ba1\u7b97\u51e0\u4f55\u7ecf\u5e38\u8fdb\u884c double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570\u8ba1\u7b97\uff0c\u56e0\u6b64\u5e26\u6765\u4e86\u7cbe\u5ea6\u95ee\u9898\u548c\u65f6\u95f4\u95ee\u9898\u3002 \u6709\u4e9b\u95ee\u9898\uff0c\u4f8b\u5982\u6c42\u70b9\u5750\u6807\u5747\u4e3a\u6574\u6570\u7684\u4e09\u89d2\u5f62\u9762\u79ef\uff0c\u53ef\u4ee5\u5229\u7528\u5176\u7279\u6b8a\u6027\u8fdb\u884c\u7eaf\u6574\u6570\u8ba1\u7b97\uff0c\u907f\u514d\u7528\u6d6e\u70b9\u6570\u5f71\u54cd\u7cbe\u5ea6\u3002 \u7531\u4e8e\u6d6e\u70b9\u6570\u8ba1\u7b97\u6bd4\u6574\u6570\u8ba1\u7b97\u6162\uff0c\u6240\u4ee5\u9700\u8981\u6ce8\u610f\u7a0b\u5e8f\u7684\u5e38\u6570\u56e0\u5b50\u7ed9\u65f6\u95f4\u5e26\u6765\u7684\u5f71\u54cd\u3002","title":"\u4ee3\u7801\u7f16\u5199\u6ce8\u610f\u4e8b\u9879"},{"location":"geometry/3d/","text":"","title":"\u4e09\u7ef4\u8ba1\u7b97\u51e0\u4f55\u57fa\u7840"},{"location":"geometry/convex-hull/","text":"","title":"\u51f8\u5305"},{"location":"geometry/half-plane-intersection/","text":"","title":"\u534a\u5e73\u9762\u4ea4"},{"location":"geometry/magic/","text":"","title":"\u8ba1\u7b97\u51e0\u4f55\u6742\u9879"},{"location":"geometry/pick/","text":"","title":"Pick \u5b9a\u7406"},{"location":"geometry/rotating-calipers/","text":"","title":"\u65cb\u8f6c\u5361\u58f3"},{"location":"geometry/scanning/","text":"","title":"\u626b\u63cf\u7ebf"},{"location":"geometry/triangulation/","text":"","title":"\u4e09\u89d2\u5256\u5206"},{"location":"graph/","text":"\u56fe\u8bba\uff08graph theory\uff09 \u662f\u6570\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u5b83\u4ee5 \u56fe \u4e3a\u7814\u7a76\u7684\u5bf9\u8c61\u3002 \u56fe\u8bba\u672c\u8eab\u662f\u5e94\u7528\u6570\u5b66\u7684\u4e00\u90e8\u5206\uff0c\u5386\u53f2\u4e0a\u56fe\u8bba\u66fe\u7ecf\u88ab\u5f88\u591a\u6570\u5b66\u5bb6\u5404\u81ea\u72ec\u7acb\u5efa\u7acb\u8fc7\u3002\u5173\u4e8e\u56fe\u8bba\u7684\u6700\u65e9\u6587\u5b57\u8bb0\u8f7d\u6700\u65e9\u51fa\u73b0\u5728\u6b27\u62c9 1736 \u5e74\u7684\u8bba\u8457\u4e2d\uff0c\u4e5f\u5c31\u662f\u8457\u540d\u7684\u67ef\u5c3c\u65af\u5821\uff08Konigsberg\uff09\u95ee\u9898\uff08\u4e03\u6865\u95ee\u9898\uff09\u3002 \u56fe\u7684\u5b9a\u4e49 \u00b6 \u4e00\u4e2a\u56fe G G \u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff0c\u5373\u5e8f\u5076 \\langle V,E\\rangle \\langle V,E\\rangle \uff0c\u6216\u8bb0\u4f5c G= \\langle V,E\\rangle G= \\langle V,E\\rangle \uff0c\u5176\u4e2d V V \u662f\u6709\u9650\u975e\u7a7a\u96c6\u5408\uff0c\u79f0\u4e3a G G \u7684\u9876\u70b9\u96c6\uff0c V V \u4e2d\u7684\u5143\u7d20\u79f0\u4e3a\u9876\u70b9\u6216\u7ed3\u70b9\uff1b E E \u79f0\u4e3a G G \u7684\u8fb9\u7684\u96c6\u5408\uff0c \\forall e_i \\in E \\forall e_i \\in E \uff0c\u90fd\u6709 V V \u4e2d\u7684\u7ed3\u70b9\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u79f0 e_i e_i \u4e3a G G \u7684\u8fb9\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u56fe G G \u5c31\u662f\u4e00\u4e2a\u7ed3\u70b9\u7684\u96c6\u5408 V V \u548c\u8fb9\u7684\u96c6\u5408 E E \uff0c\u5176\u4e2d\u4efb\u610f\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u82e5 e_i\\in E e_i\\in E \u8868\u793a\u4e3a \\langle u,v\\rangle \\langle u,v\\rangle \uff0c\u5219\u6709 u\\in V , v\\in V u\\in V , v\\in V \u3002 \u6709\u5411\u8fb9\u548c\u65e0\u5411\u8fb9 \u00b6 \u4ee5\u4e0a\u5b9a\u4e49\u7684\u7ed3\u70b9\u5bf9 \u53ef\u4ee5\u662f\u6709\u5e8f\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684 \u3002\u5982\u679c\u8fb9 e_i e_i \u548c\u7ed3\u70b9\u65e0\u5e8f\u5bf9 (u,v) (u,v) \u76f8\u5bf9\u5e94\uff0c\u5219\u79f0 e_i e_i \u4e3a\u65e0\u5411\u8fb9\uff0c\u8bb0\u4f5c e_i=(u,v) e_i=(u,v) \uff0c\u79f0 u,v u,v \u4e3a\u8fb9 e_i e_i \u7684\u4e24\u4e2a\u7aef\u70b9\u3002 \u5982\u679c\u8fb9 e_i e_i \u548c\u7ed3\u70b9\u6709\u5e8f\u5bf9 \\langle u,v\\rangle \\langle u,v\\rangle \u76f8\u5bf9\u5e94\uff0c\u5219\u79f0 e_i e_i \u4e3a\u6709\u5411\u8fb9\uff0c\u8bb0\u4e3a e_i= \\langle u,v\\rangle e_i= \\langle u,v\\rangle \uff0c\u79f0 u u \u4e3a\u8fb9 e_i e_i \u7684 \u59cb\u70b9 \uff0c v v \u4e3a\u8be5\u8fb9\u7684\u7ec8\u70b9\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u8fb9\u5bf9\u7ed3\u70b9\u7684\u5173\u7cfb\u662f\u53cc\u5411\u7684\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u662f\u65e0\u5411\u8fb9\uff1b\u5982\u679c\u662f\u5355\u5411\u7684\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u662f\u6709\u5411\u8fb9\u3002 \u56fe\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u65e0\u5411\u56fe\uff1a\u6bcf\u6761\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\u7684\u56fe\u3002 \u6709\u5411\u56fe\uff1a\u6bcf\u6761\u8fb9\u90fd\u662f\u6709\u5411\u8fb9\u7684\u56fe\u3002 \u6df7\u5408\u56fe\uff1a\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u6709\u4e9b\u8fb9\u662f\u6709\u5411\u8fb9\uff0c\u53e6\u4e00\u4e9b\u8fb9\u662f\u65e0\u5411\u8fb9\uff0c\u5219\u8be5\u56fe\u4e3a\u6df7\u5408\u56fe\u3002 \u6709\u9650\u56fe\uff1a\u4e00\u4e2a\u56fe\u7684\u70b9\u96c6\u548c\u8fb9\u96c6\u90fd\u662f\u6709\u7a77\u96c6\u7684\u56fe\u3002 \u96f6\u56fe\uff1a\u8fb9\u96c6\u4e3a\u7a7a\u96c6\u7684\u56fe\u3002 \u5e73\u51e1\u56fe\uff1a\u4ec5\u6709\u4e00\u4e2a\u7ed3\u70b9\u800c\u6ca1\u6709\u8fb9\u6784\u6210\u7684\u56fe\u3002 \u5173\u8054\uff1a\u82e5\u6709 e_i=(u,v) e_i=(u,v) \u4e14 e_i\\in E e_i\\in E \uff0c\u5219\u79f0 u u \u662f\u548c v v \u76f8\u5173\u8054\u7684\u3002 \u5b64\u7acb\u70b9\uff1a\u65e0\u8fb9\u5173\u8054\u7684\u70b9\u3002 \u81ea\u73af\uff1a\u82e5\u4e00\u6761\u8fb9\u6240\u5173\u8054\u7684\u4e24\u4e2a\u7ed3\u70b9\u91cd\u5408\uff0c\u5219\u79f0\u6b64\u8fb9\u4e3a\u81ea\u73af\u3002 \u90bb\u63a5\uff1a\u5173\u8054\u4e8e\u540c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9 u u \u548c v v \u79f0\u4e3a\u90bb\u63a5\u7684\uff1b\u5173\u8054\u4e8e\u540c\u4e00\u4e2a\u70b9\u7684\u4e24\u6761\u8fb9 e_1 e_1 \u548c e_2 e_2 \u662f\u90bb\u63a5\u7684\uff08\u6216\u76f8\u90bb\u7684\uff09\u3002 \u7ed3\u70b9\u7684\u5ea6\u6570 \u00b6 \u8bbe\u56fe G= \\langle V,E\\rangle G= \\langle V,E\\rangle \u4e3a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c v\\in V v\\in V \uff0c\u5173\u8054\u4e8e\u7ed3\u70b9 v v \u7684 \u8fb9 \u7684\u6761\u6570\uff0c\u79f0\u4e3a\u70b9 v v \u7684\u5ea6\u6570\uff0c\u8bb0\u4f5c deg(v) deg(v) \u3002 \u6ce8\u610f\uff1a\u4e00\u4e2a\u81ea\u73af\u4e3a\u5b83\u7684\u7aef\u70b9\u589e\u52a0 2 \u5ea6\u3002 \u5f53\u56fe G= \\langle V,E\\rangle G= \\langle V,E\\rangle \u4e3a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c v\\in V v\\in V \uff0c\u79f0\u4ee5 v v \u4f5c\u4e3a\u59cb\u70b9\u7684\u8fb9\u6570\u4e4b\u548c\u79f0\u4e3a\u7ed3\u70b9 v v \u7684\u51fa\u5ea6\uff0c\u8bb0\u4e3a deg^{+} (v) deg^{+} (v) \u3002\u5c06\u4ee5 v v \u4f5c\u4e3a\u7ec8\u70b9\u7684\u8fb9\u6570\u4e4b\u548c\u79f0\u4e3a\u7ed3\u70b9 v v \u7684\u5165\u5ea6\uff0c\u8bb0\u4e3a deg^{-} (v) deg^{-} (v) \u3002\u79f0\u4ee5 v v \u4f5c\u4e3a\u7aef\u70b9\u7684\u8fb9\u6570\u4e4b\u548c\u4e3a\u7ed3\u70b9 v v \u7684\u5ea6\u6570\u6216\u5ea6\uff0c\u8bb0\u4e3a deg(v) deg(v) \u3002 \u663e\u7136\uff0c \\forall v\\in V,deg(v)=deg^{+} (v)+deg^{-} (v) \\forall v\\in V,deg(v)=deg^{+} (v)+deg^{-} (v) \u3002 \u5b9a\u7406 1 \u00b6 \\sum_{v\\in V} deg(v)=2\\times |E| \\sum_{v\\in V} deg(v)=2\\times |E| \u63a8\u8bba\uff1a\u5728\u4efb\u610f\u56fe\u4e2d\uff0c\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u5fc5\u7136\u6709\u5076\u6570\u4e2a\u3002 \u5b9a\u7406 2 \u00b6 \\sum_{v\\in V} deg^{+} (v)=\\sum_{v\\in V} deg^{-} (v)=|E| \\sum_{v\\in V} deg^{+} (v)=\\sum_{v\\in V} deg^{-} (v)=|E| \u5373\u6240\u6709\u70b9\u5165\u5ea6\u4e4b\u548c\u7b49\u4e8e\u51fa\u5ea6\u4e4b\u548c\u3002 \u5b50\u56fe\u7684\u6982\u5ff5 \u00b6 \u8bbe\u6709\u56fe G= \\langle V,E\\rangle G= \\langle V,E\\rangle \u548c\u56fe G'= \\langle V',E'\\rangle G'= \\langle V',E'\\rangle \u3002 \u5982\u679c V'\\subseteq V,E'\\subseteq E V'\\subseteq V,E'\\subseteq E \uff0c\u5219\u79f0 G' G' \u662f G G \u7684\u5b50\u56fe\uff0c\u8bb0\u4f5c G'\\subseteq G G'\\subseteq G \u3002 \u5982\u679c G'\\subsetneqq G G'\\subsetneqq G \uff0c\u5373 V'\\subset V V'\\subset V \u6216 E'\\subset E E'\\subset E \uff0c \u5219\u79f0 G' G' \u662f G G \u7684\u771f\u5b50\u56fe\uff0c\u8bb0\u4f5c G'\\subset G G'\\subset G \u3002 \u5982\u679c V'=V,E'\\subseteq E V'=V,E'\\subseteq E \uff0c\u5219\u79f0 G' G' \u662f G G \u7684\u751f\u6210\u5b50\u56fe\u3002 \u5982\u679c V''\\subseteq V V''\\subseteq V \u4e14 V'' \\neq \\varnothing V'' \\neq \\varnothing \uff0c\u4ee5 V'' V'' \u4e3a\u7ed3\u70b9\u96c6\uff0c\u4ee5\u4e24\u7aef\u70b9\u5747\u5728 V'' V'' \u4e2d\u7684\u8fb9\u4e3a\u8fb9\u96c6\u7684 G G \u7684\u5b50\u56fe\uff0c\u79f0\u4e3a V'' V'' \u5bfc\u51fa\u7684 G G \u7684\u5b50\u56fe\uff0c\u7b80\u79f0\u4e3a V'' V'' \u7684\u5bfc\u51fa\u5b50\u56fe\u3002 \u5982\u679c G''= \\langle V'',E''\\rangle G''= \\langle V'',E''\\rangle \u4f7f\u5f97 E''=E-E' E''=E-E' \uff0c \u4e14 V'' V'' \u4e2d\u4ec5\u5305\u542b E'' E'' \u4e2d\u7684\u8fb9\u6240\u5173\u8054\u7684\u7ed3\u70b9\uff0c\u5219\u79f0 G'' G'' \u662f\u5b50\u56fe G' G' \u76f8\u5bf9\u4e8e\u539f\u56fe G G \u7684\u8865\u56fe\u3002 \u7279\u6b8a\u7684\u56fe \u00b6 \u6811\uff1a\u8fb9\u6570\u6bd4\u7ed3\u70b9\u6570\u5c11\u4e00\u7684\u8fde\u901a\u56fe\u3002\u66f4\u591a\u5185\u5bb9\uff0c\u8be6\u89c1 \u6811\u76f8\u5173\u57fa\u7840 \u3002 \u68ee\u6797\uff1a\u7531 m m \u68f5\uff08 m\\ge 0 m\\ge 0 \uff09\u4e92\u4e0d\u76f8\u4ea4\u7684\u6811\u7ec4\u6210\u7684\u56fe\u3002 \u57fa\u73af\u6811\uff1a\u8fb9\u6570\u548c\u70b9\u6570\u76f8\u7b49\u7684\u8fde\u901a\u56fe\u3002 \u4ed9\u4eba\u638c\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u591a\u5728\u4e00\u4e2a\u7b80\u5355\u73af\u4e0a\u7684\u56fe\u3002 \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5173\u8054\u4e00\u5bf9\u9876\u70b9\u7684\u8fb9\u591a\u4e8e 1 \u6761\uff0c\u5219\u79f0\u8fd9\u4e9b\u8fb9\u4e3a\u91cd\u8fb9\uff08\u5e73\u884c\u8fb9\uff09\uff0c\u91cd\u8fb9\u7684\u6761\u6570\u79f0\u4e3a\u91cd\u6570\u3002 \u7b80\u5355\u56fe\uff1a\u4e0d\u542b\u91cd\u8fb9\u548c\u81ea\u73af\u7684\u56fe\u3002 \u591a\u91cd\u56fe\uff1a\u542b\u91cd\u8fb9\u7684\u56fe\u3002 \u5b8c\u5168\u56fe\uff1a\u6bcf\u5bf9\u4e0d\u540c\u7684\u9876\u70b9\u4e4b\u95f4\u90fd\u6070\u8fde\u6709\u4e00\u6761\u8fb9\u76f8\u8fde\u7684\u7b80\u5355\u65e0\u5411\u56fe\u3002\u5bb9\u6613\u8bc1\u660e\uff0c n n \u4e2a\u9876\u70b9\u7684\u5b8c\u5168\u56fe\u6709 \\frac{n\\times (n-1)}{2} \\frac{n\\times (n-1)}{2} \u6761\u8fb9\u3002 \u7ade\u8d5b\u56fe\uff1a\u901a\u8fc7\u5728\u5b8c\u5168\u56fe\u4e2d\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u65b9\u5411\u800c\u83b7\u5f97\u7684\u6709\u5411\u56fe\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 \u79bb\u6563\u6570\u5b66\uff08\u4fee\u8ba2\u7248\uff09, \u7530\u6587\u6210 \u5468\u7984\u65b0 \u7f16\u8457, \u5929\u6d25\u6587\u5b66\u51fa\u7248\u793e, P184-187","title":"\u56fe\u8bba\u90e8\u5206\u7b80\u4ecb"},{"location":"graph/#_1","text":"\u4e00\u4e2a\u56fe G G \u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff0c\u5373\u5e8f\u5076 \\langle V,E\\rangle \\langle V,E\\rangle \uff0c\u6216\u8bb0\u4f5c G= \\langle V,E\\rangle G= \\langle V,E\\rangle \uff0c\u5176\u4e2d V V \u662f\u6709\u9650\u975e\u7a7a\u96c6\u5408\uff0c\u79f0\u4e3a G G \u7684\u9876\u70b9\u96c6\uff0c V V \u4e2d\u7684\u5143\u7d20\u79f0\u4e3a\u9876\u70b9\u6216\u7ed3\u70b9\uff1b E E \u79f0\u4e3a G G \u7684\u8fb9\u7684\u96c6\u5408\uff0c \\forall e_i \\in E \\forall e_i \\in E \uff0c\u90fd\u6709 V V \u4e2d\u7684\u7ed3\u70b9\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u79f0 e_i e_i \u4e3a G G \u7684\u8fb9\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u56fe G G \u5c31\u662f\u4e00\u4e2a\u7ed3\u70b9\u7684\u96c6\u5408 V V \u548c\u8fb9\u7684\u96c6\u5408 E E \uff0c\u5176\u4e2d\u4efb\u610f\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u82e5 e_i\\in E e_i\\in E \u8868\u793a\u4e3a \\langle u,v\\rangle \\langle u,v\\rangle \uff0c\u5219\u6709 u\\in V , v\\in V u\\in V , v\\in V \u3002","title":"\u56fe\u7684\u5b9a\u4e49"},{"location":"graph/#_2","text":"\u4ee5\u4e0a\u5b9a\u4e49\u7684\u7ed3\u70b9\u5bf9 \u53ef\u4ee5\u662f\u6709\u5e8f\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684 \u3002\u5982\u679c\u8fb9 e_i e_i \u548c\u7ed3\u70b9\u65e0\u5e8f\u5bf9 (u,v) (u,v) \u76f8\u5bf9\u5e94\uff0c\u5219\u79f0 e_i e_i \u4e3a\u65e0\u5411\u8fb9\uff0c\u8bb0\u4f5c e_i=(u,v) e_i=(u,v) \uff0c\u79f0 u,v u,v \u4e3a\u8fb9 e_i e_i \u7684\u4e24\u4e2a\u7aef\u70b9\u3002 \u5982\u679c\u8fb9 e_i e_i \u548c\u7ed3\u70b9\u6709\u5e8f\u5bf9 \\langle u,v\\rangle \\langle u,v\\rangle \u76f8\u5bf9\u5e94\uff0c\u5219\u79f0 e_i e_i \u4e3a\u6709\u5411\u8fb9\uff0c\u8bb0\u4e3a e_i= \\langle u,v\\rangle e_i= \\langle u,v\\rangle \uff0c\u79f0 u u \u4e3a\u8fb9 e_i e_i \u7684 \u59cb\u70b9 \uff0c v v \u4e3a\u8be5\u8fb9\u7684\u7ec8\u70b9\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u8fb9\u5bf9\u7ed3\u70b9\u7684\u5173\u7cfb\u662f\u53cc\u5411\u7684\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u662f\u65e0\u5411\u8fb9\uff1b\u5982\u679c\u662f\u5355\u5411\u7684\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u662f\u6709\u5411\u8fb9\u3002","title":"\u6709\u5411\u8fb9\u548c\u65e0\u5411\u8fb9"},{"location":"graph/#_3","text":"\u65e0\u5411\u56fe\uff1a\u6bcf\u6761\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\u7684\u56fe\u3002 \u6709\u5411\u56fe\uff1a\u6bcf\u6761\u8fb9\u90fd\u662f\u6709\u5411\u8fb9\u7684\u56fe\u3002 \u6df7\u5408\u56fe\uff1a\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u6709\u4e9b\u8fb9\u662f\u6709\u5411\u8fb9\uff0c\u53e6\u4e00\u4e9b\u8fb9\u662f\u65e0\u5411\u8fb9\uff0c\u5219\u8be5\u56fe\u4e3a\u6df7\u5408\u56fe\u3002 \u6709\u9650\u56fe\uff1a\u4e00\u4e2a\u56fe\u7684\u70b9\u96c6\u548c\u8fb9\u96c6\u90fd\u662f\u6709\u7a77\u96c6\u7684\u56fe\u3002 \u96f6\u56fe\uff1a\u8fb9\u96c6\u4e3a\u7a7a\u96c6\u7684\u56fe\u3002 \u5e73\u51e1\u56fe\uff1a\u4ec5\u6709\u4e00\u4e2a\u7ed3\u70b9\u800c\u6ca1\u6709\u8fb9\u6784\u6210\u7684\u56fe\u3002 \u5173\u8054\uff1a\u82e5\u6709 e_i=(u,v) e_i=(u,v) \u4e14 e_i\\in E e_i\\in E \uff0c\u5219\u79f0 u u \u662f\u548c v v \u76f8\u5173\u8054\u7684\u3002 \u5b64\u7acb\u70b9\uff1a\u65e0\u8fb9\u5173\u8054\u7684\u70b9\u3002 \u81ea\u73af\uff1a\u82e5\u4e00\u6761\u8fb9\u6240\u5173\u8054\u7684\u4e24\u4e2a\u7ed3\u70b9\u91cd\u5408\uff0c\u5219\u79f0\u6b64\u8fb9\u4e3a\u81ea\u73af\u3002 \u90bb\u63a5\uff1a\u5173\u8054\u4e8e\u540c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9 u u \u548c v v \u79f0\u4e3a\u90bb\u63a5\u7684\uff1b\u5173\u8054\u4e8e\u540c\u4e00\u4e2a\u70b9\u7684\u4e24\u6761\u8fb9 e_1 e_1 \u548c e_2 e_2 \u662f\u90bb\u63a5\u7684\uff08\u6216\u76f8\u90bb\u7684\uff09\u3002","title":"\u56fe\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"graph/#_4","text":"\u8bbe\u56fe G= \\langle V,E\\rangle G= \\langle V,E\\rangle \u4e3a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c v\\in V v\\in V \uff0c\u5173\u8054\u4e8e\u7ed3\u70b9 v v \u7684 \u8fb9 \u7684\u6761\u6570\uff0c\u79f0\u4e3a\u70b9 v v \u7684\u5ea6\u6570\uff0c\u8bb0\u4f5c deg(v) deg(v) \u3002 \u6ce8\u610f\uff1a\u4e00\u4e2a\u81ea\u73af\u4e3a\u5b83\u7684\u7aef\u70b9\u589e\u52a0 2 \u5ea6\u3002 \u5f53\u56fe G= \\langle V,E\\rangle G= \\langle V,E\\rangle \u4e3a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c v\\in V v\\in V \uff0c\u79f0\u4ee5 v v \u4f5c\u4e3a\u59cb\u70b9\u7684\u8fb9\u6570\u4e4b\u548c\u79f0\u4e3a\u7ed3\u70b9 v v \u7684\u51fa\u5ea6\uff0c\u8bb0\u4e3a deg^{+} (v) deg^{+} (v) \u3002\u5c06\u4ee5 v v \u4f5c\u4e3a\u7ec8\u70b9\u7684\u8fb9\u6570\u4e4b\u548c\u79f0\u4e3a\u7ed3\u70b9 v v \u7684\u5165\u5ea6\uff0c\u8bb0\u4e3a deg^{-} (v) deg^{-} (v) \u3002\u79f0\u4ee5 v v \u4f5c\u4e3a\u7aef\u70b9\u7684\u8fb9\u6570\u4e4b\u548c\u4e3a\u7ed3\u70b9 v v \u7684\u5ea6\u6570\u6216\u5ea6\uff0c\u8bb0\u4e3a deg(v) deg(v) \u3002 \u663e\u7136\uff0c \\forall v\\in V,deg(v)=deg^{+} (v)+deg^{-} (v) \\forall v\\in V,deg(v)=deg^{+} (v)+deg^{-} (v) \u3002","title":"\u7ed3\u70b9\u7684\u5ea6\u6570"},{"location":"graph/#1","text":"\\sum_{v\\in V} deg(v)=2\\times |E| \\sum_{v\\in V} deg(v)=2\\times |E| \u63a8\u8bba\uff1a\u5728\u4efb\u610f\u56fe\u4e2d\uff0c\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u5fc5\u7136\u6709\u5076\u6570\u4e2a\u3002","title":"\u5b9a\u7406 1"},{"location":"graph/#2","text":"\\sum_{v\\in V} deg^{+} (v)=\\sum_{v\\in V} deg^{-} (v)=|E| \\sum_{v\\in V} deg^{+} (v)=\\sum_{v\\in V} deg^{-} (v)=|E| \u5373\u6240\u6709\u70b9\u5165\u5ea6\u4e4b\u548c\u7b49\u4e8e\u51fa\u5ea6\u4e4b\u548c\u3002","title":"\u5b9a\u7406 2"},{"location":"graph/#_5","text":"\u8bbe\u6709\u56fe G= \\langle V,E\\rangle G= \\langle V,E\\rangle \u548c\u56fe G'= \\langle V',E'\\rangle G'= \\langle V',E'\\rangle \u3002 \u5982\u679c V'\\subseteq V,E'\\subseteq E V'\\subseteq V,E'\\subseteq E \uff0c\u5219\u79f0 G' G' \u662f G G \u7684\u5b50\u56fe\uff0c\u8bb0\u4f5c G'\\subseteq G G'\\subseteq G \u3002 \u5982\u679c G'\\subsetneqq G G'\\subsetneqq G \uff0c\u5373 V'\\subset V V'\\subset V \u6216 E'\\subset E E'\\subset E \uff0c \u5219\u79f0 G' G' \u662f G G \u7684\u771f\u5b50\u56fe\uff0c\u8bb0\u4f5c G'\\subset G G'\\subset G \u3002 \u5982\u679c V'=V,E'\\subseteq E V'=V,E'\\subseteq E \uff0c\u5219\u79f0 G' G' \u662f G G \u7684\u751f\u6210\u5b50\u56fe\u3002 \u5982\u679c V''\\subseteq V V''\\subseteq V \u4e14 V'' \\neq \\varnothing V'' \\neq \\varnothing \uff0c\u4ee5 V'' V'' \u4e3a\u7ed3\u70b9\u96c6\uff0c\u4ee5\u4e24\u7aef\u70b9\u5747\u5728 V'' V'' \u4e2d\u7684\u8fb9\u4e3a\u8fb9\u96c6\u7684 G G \u7684\u5b50\u56fe\uff0c\u79f0\u4e3a V'' V'' \u5bfc\u51fa\u7684 G G \u7684\u5b50\u56fe\uff0c\u7b80\u79f0\u4e3a V'' V'' \u7684\u5bfc\u51fa\u5b50\u56fe\u3002 \u5982\u679c G''= \\langle V'',E''\\rangle G''= \\langle V'',E''\\rangle \u4f7f\u5f97 E''=E-E' E''=E-E' \uff0c \u4e14 V'' V'' \u4e2d\u4ec5\u5305\u542b E'' E'' \u4e2d\u7684\u8fb9\u6240\u5173\u8054\u7684\u7ed3\u70b9\uff0c\u5219\u79f0 G'' G'' \u662f\u5b50\u56fe G' G' \u76f8\u5bf9\u4e8e\u539f\u56fe G G \u7684\u8865\u56fe\u3002","title":"\u5b50\u56fe\u7684\u6982\u5ff5"},{"location":"graph/#_6","text":"\u6811\uff1a\u8fb9\u6570\u6bd4\u7ed3\u70b9\u6570\u5c11\u4e00\u7684\u8fde\u901a\u56fe\u3002\u66f4\u591a\u5185\u5bb9\uff0c\u8be6\u89c1 \u6811\u76f8\u5173\u57fa\u7840 \u3002 \u68ee\u6797\uff1a\u7531 m m \u68f5\uff08 m\\ge 0 m\\ge 0 \uff09\u4e92\u4e0d\u76f8\u4ea4\u7684\u6811\u7ec4\u6210\u7684\u56fe\u3002 \u57fa\u73af\u6811\uff1a\u8fb9\u6570\u548c\u70b9\u6570\u76f8\u7b49\u7684\u8fde\u901a\u56fe\u3002 \u4ed9\u4eba\u638c\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u591a\u5728\u4e00\u4e2a\u7b80\u5355\u73af\u4e0a\u7684\u56fe\u3002 \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5173\u8054\u4e00\u5bf9\u9876\u70b9\u7684\u8fb9\u591a\u4e8e 1 \u6761\uff0c\u5219\u79f0\u8fd9\u4e9b\u8fb9\u4e3a\u91cd\u8fb9\uff08\u5e73\u884c\u8fb9\uff09\uff0c\u91cd\u8fb9\u7684\u6761\u6570\u79f0\u4e3a\u91cd\u6570\u3002 \u7b80\u5355\u56fe\uff1a\u4e0d\u542b\u91cd\u8fb9\u548c\u81ea\u73af\u7684\u56fe\u3002 \u591a\u91cd\u56fe\uff1a\u542b\u91cd\u8fb9\u7684\u56fe\u3002 \u5b8c\u5168\u56fe\uff1a\u6bcf\u5bf9\u4e0d\u540c\u7684\u9876\u70b9\u4e4b\u95f4\u90fd\u6070\u8fde\u6709\u4e00\u6761\u8fb9\u76f8\u8fde\u7684\u7b80\u5355\u65e0\u5411\u56fe\u3002\u5bb9\u6613\u8bc1\u660e\uff0c n n \u4e2a\u9876\u70b9\u7684\u5b8c\u5168\u56fe\u6709 \\frac{n\\times (n-1)}{2} \\frac{n\\times (n-1)}{2} \u6761\u8fb9\u3002 \u7ade\u8d5b\u56fe\uff1a\u901a\u8fc7\u5728\u5b8c\u5168\u56fe\u4e2d\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u65b9\u5411\u800c\u83b7\u5f97\u7684\u6709\u5411\u56fe\u3002","title":"\u7279\u6b8a\u7684\u56fe"},{"location":"graph/#_7","text":"\u79bb\u6563\u6570\u5b66\uff08\u4fee\u8ba2\u7248\uff09, \u7530\u6587\u6210 \u5468\u7984\u65b0 \u7f16\u8457, \u5929\u6d25\u6587\u5b66\u51fa\u7248\u793e, P184-187","title":"\u53c2\u8003\u8d44\u6599"},{"location":"graph/2-sat/","text":"SAT \u662f\u9002\u5b9a\u6027\uff08 Satisfiability \uff09\u95ee\u9898\u7684\u7b80\u79f0 \u3002\u4e00\u822c\u5f62\u5f0f\u4e3a k - \u9002\u5b9a\u6027\u95ee\u9898\uff0c\u7b80\u79f0 k-SAT \u3002\u800c\u5f53 k>2 k>2 \u65f6\u8be5\u95ee\u9898\u4e3a NP \u5b8c\u5168\u7684\u3002\u6240\u4ee5\u6211\u4eec\u4e4b\u7814\u7a76 k=2 k=2 \u7684\u60c5\u51b5\u3002 \u5b9a\u4e49 \u00b6 2-SAT \uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u7ed9\u51fa n n \u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u5df2\u77e5\u82e5\u5e72\u4e2a <a,b> <a,b> \uff0c\u8868\u793a a a \u4e0e b b \u77db\u76fe\uff08\u5176\u4e2d a a \u4e0e b b \u5c5e\u4e8e\u4e0d\u540c\u7684\u96c6\u5408\uff09\u3002\u7136\u540e\u4ece\u6bcf\u4e2a\u96c6\u5408\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\uff0c\u5224\u65ad\u80fd\u5426\u4e00\u5171\u9009 n n \u4e2a\u4e24\u4e24\u4e0d\u77db\u76fe\u7684\u5143\u7d20\u3002\u663e\u7136\u53ef\u80fd\u6709\u591a\u79cd\u9009\u62e9\u65b9\u6848\uff0c\u4e00\u822c\u9898\u4e2d\u53ea\u9700\u8981\u6c42\u51fa\u4e00\u79cd\u5373\u53ef\u3002 \u73b0\u5b9e\u610f\u4e49 \u00b6 \u6bd4\u5982\u9080\u8bf7\u4eba\u6765\u5403\u559c\u9152\uff0c\u592b\u59bb\u4e8c\u4eba\u5fc5\u987b\u53bb\u4e00\u4e2a\uff0c\u7136\u800c\u67d0\u4e9b\u4eba\u4e4b\u95f4\u6709\u77db\u76fe\uff08\u6bd4\u5982 A \u5148\u751f\u4e0e B \u5973\u58eb\u6709\u77db\u76fe\uff0cC \u5973\u58eb\u4e0d\u60f3\u548c D \u5148\u751f\u5728\u4e00\u8d77\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u786e\u5b9a\u80fd\u5426\u907f\u514d\u6765\u4eba\u4e4b\u95f4\u6ca1\u6709\u77db\u76fe\uff0c\u6709\u65f6\u9700\u8981\u65b9\u6848\u3002\u8fd9\u662f\u4e00\u7c7b\u751f\u6d3b\u4e2d\u5e38\u89c1\u7684\u95ee\u9898\u3002 \u4f7f\u7528\u5e03\u5c14\u65b9\u7a0b\u8868\u793a\u4e0a\u8ff0\u95ee\u9898\u3002\u8bbe a a \u8868\u793a A \u5148\u751f\u53bb\u53c2\u52a0\uff0c\u90a3\u4e48 B \u5973\u58eb\u5c31\u4e0d\u80fd\u53c2\u52a0\uff08 \\neg a \\neg a )\uff1b b b \u8868\u793a C \u5973\u58eb\u53c2\u52a0\uff0c\u90a3\u4e48 \\neg b \\neg b \u4e5f\u4e00\u5b9a\u6210\u7acb\uff08D \u5148\u751f\u4e0d\u53c2\u52a0\uff09\u3002\u603b\u7ed3\u4e00\u4e0b\uff0c\u5373 (a \\vee b) (a \\vee b) \uff08\u53d8\u91cf a, b a, b \u81f3\u5c11\u6ee1\u8db3\u4e00\u4e2a\uff09 \u3002 \u5bf9\u8fd9\u4e9b\u53d8\u91cf\u5173\u7cfb\u5efa\u6709\u5411\u56fe\uff0c\u5219\u6709\uff1a \\neg a\\Rightarrow b\\wedge\\neg b\\Rightarrow a \\neg a\\Rightarrow b\\wedge\\neg b\\Rightarrow a \uff08 a a \u4e0d\u6210\u7acb\u5219 b b \u4e00\u5b9a\u6210\u7acb\uff1b\u540c\u7406\uff0c b b \u4e0d\u6210\u7acb\u5219 a a \u4e00\u5b9a\u6210\u7acb\uff09\u3002\u5efa\u56fe\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u7f29\u70b9\u7b97\u6cd5\u6765\u6c42\u89e3 2-SAT \u95ee\u9898\u4e86\u3002 \u5e38\u7528\u89e3\u51b3\u65b9\u6cd5 \u00b6 Tarjan SCC \u7f29\u70b9 \u00b6 \u7b97\u6cd5\u8003\u7a76\u5728\u5efa\u56fe\u8fd9\u70b9\uff0c\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bb2\uff1a \u5047\u8bbe\u6709 {a1,a2} {a1,a2} \u548c {b1,b2} {b1,b2} \u4e24\u5bf9\uff0c\u5df2\u77e5 a1 a1 \u548c b2 b2 \u95f4\u6709\u77db\u76fe\uff0c\u4e8e\u662f\u4e3a\u4e86\u65b9\u6848\u81ea\u6d3d\uff0c\u7531\u4e8e\u4e24\u8005\u4e2d\u5fc5\u987b\u9009\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u62c9\u4e24\u6761\u6761\u6709\u5411\u8fb9 (a1,b1) (a1,b1) \u548c (b2,a2) (b2,a2) \u8868\u793a\u9009\u4e86 a1 a1 \u5219\u5fc5\u987b\u9009 b1 b1 \uff0c\u9009\u4e86 b2 b2 \u5219\u5fc5\u987b\u9009 a2 a2 \u624d\u80fd\u591f\u81ea\u6d3d\u3002 \u7136\u540e\u901a\u8fc7\u8fd9\u6837\u5b50\u5efa\u8fb9\u6211\u4eec\u8dd1\u4e00\u904d Tarjan SCC \u5224\u65ad\u662f\u5426\u6709\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u4e2a SCC \u4e2d\uff0c\u82e5\u6709\u5219\u8f93\u51fa\u4e0d\u53ef\u80fd\uff0c\u5426\u5219\u8f93\u51fa\u65b9\u6848\u3002\u6784\u9020\u65b9\u6848\u53ea\u9700\u8981\u628a\u51e0\u4e2a\u4e0d\u77db\u76fe\u7684 SCC \u62fc\u8d77\u6765\u5c31\u597d\u4e86\u3002 \u8f93\u51fa\u65b9\u6848\u65f6\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u5728\u56fe\u4e2d\u7684\u62d3\u6251\u5e8f\u786e\u5b9a\u8be5\u53d8\u91cf\u7684\u53d6\u503c\u3002\u5982\u679c\u53d8\u91cf \\neg x \\neg x \u7684\u62d3\u6251\u5e8f\u5728 x x \u4e4b\u540e\uff0c\u90a3\u4e48\u53d6 x x \u503c\u4e3a\u771f\u3002\u5e94\u7528\u5230 Tarjan \u7b97\u6cd5\u7684\u7f29\u70b9\uff0c\u5373 x x \u6240\u5728 SCC \u7f16\u53f7\u5728 \\neg x \\neg x \u4e4b\u524d\u65f6\uff0c\u53d6 x x \u4e3a\u771f\u3002\u56e0\u4e3a Tarjan \u7b97\u6cd5\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\u4f7f\u7528\u4e86\u6808\uff0c\u6240\u4ee5 Tarjan \u6c42\u5f97\u7684 SCC \u7f16\u53f7\u76f8\u5f53\u4e8e\u53cd\u62d3\u6251\u5e8f\u3002 \u663e\u7136\u5730, \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n+m) O(n+m) \u3002 \u7206\u641c \u00b6 \u5c31\u662f\u6cbf\u7740\u56fe\u4e0a\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4ee5\u540e\u7684\u70b9\u90fd\u5c06\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\uff0c\u51fa\u73b0\u4e0d\u53ef\u884c\u7684\u60c5\u51b5\u5c31\u662f\uff0c\u5b58\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e24\u8005\u90fd\u88ab\u9009\u62e9\u4e86\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6570\u636e\u4e0d\u5927\uff0c\u7b54\u6848\u603b\u662f\u53ef\u4ee5\u51fa\u6765\u7684\u3002 \u7206\u641c\u6a21\u677f \u00b6 \u4e0b\u65b9\u4ee3\u7801\u6765\u81ea\u5218\u6c5d\u4f73\u7684\u767d\u4e66\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // \u6765\u6e90\uff1a\u767d\u4e66\u7b2c 323 \u9875 struct Twosat { int n ; vector < int > g [ maxn * 2 ]; bool mark [ maxn * 2 ]; int s [ maxn * 2 ], c ; bool dfs ( int x ) { if ( mark [ x ^ 1 ]) return false ; if ( mark [ x ]) return true ; mark [ x ] = true ; s [ c ++ ] = x ; for ( int i = 0 ; i < ( int ) g [ x ]. size (); i ++ ) if ( ! dfs ( g [ x ][ i ])) return false ; return true ; } void init ( int n ) { this -> n = n ; for ( int i = 0 ; i < n * 2 ; i ++ ) g [ i ]. clear (); memset ( mark , 0 , sizeof ( mark )); } void add_clause ( int x , int y ) { // \u8fd9\u4e2a\u51fd\u6570\u968f\u9898\u610f\u53d8\u5316 g [ x ]. push_back ( y ^ 1 ); // \u9009\u4e86 x \u5c31\u5fc5\u987b\u9009 y^1 g [ y ]. push_back ( x ^ 1 ); } bool solve () { for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( ! mark [ i ] && ! mark [ i + 1 ]) { c = 0 ; if ( ! dfs ( i )) { while ( c > 0 ) mark [ s [ -- c ]] = false ; if ( ! dfs ( i + 1 )) return false ; } } return true ; } }; \u4f8b\u9898 \u00b6 HDU3062 Party \u00b6 \u9898\u9762\uff1a\u6709 n \u5bf9\u592b\u59bb\u88ab\u9080\u8bf7\u53c2\u52a0\u4e00\u4e2a\u805a\u4f1a\uff0c\u56e0\u4e3a\u573a\u5730\u7684\u95ee\u9898\uff0c\u6bcf\u5bf9\u592b\u59bb\u4e2d\u53ea\u6709 1 1 \u4eba\u53ef\u4ee5\u5217\u5e2d\u3002\u5728 2n 2n \u4e2a\u4eba\u4e2d\uff0c\u67d0\u4e9b\u4eba\u4e4b\u95f4\u6709\u7740\u5f88\u5927\u7684\u77db\u76fe\uff08\u5f53\u7136\u592b\u59bb\u4e4b\u95f4\u662f\u6ca1\u6709\u77db\u76fe\u7684\uff09\uff0c\u6709\u77db\u76fe\u7684 2 2 \u4e2a\u4eba\u662f\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u805a\u4f1a\u4e0a\u7684\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u4f1a\u6709 n n \u4e2a\u4eba\u540c\u65f6\u5217\u5e2d\uff1f \u8fd9\u662f\u4e00\u9053\u591a\u6821\u9898\uff0c\u88f8\u7684 2-SAT \u5224\u65ad\u662f\u5426\u6709\u65b9\u6848\uff0c\u6309\u7167\u6211\u4eec\u4e0a\u9762\u7684\u5206\u6790\uff0c\u5982\u679c a1 a1 \u4e2d\u7684\u4e08\u592b\u548c a2 a2 \u4e2d\u7684\u59bb\u5b50\u4e0d\u5408\uff0c\u6211\u4eec\u5c31\u628a a1 a1 \u4e2d\u7684\u4e08\u592b\u548c a2 a2 \u4e2d\u7684\u4e08\u592b\u8fde\u8fb9\uff0c\u628a a2 a2 \u4e2d\u7684\u59bb\u5b50\u548c a1 a1 \u4e2d\u7684\u59bb\u5b50\u8fde\u8fb9\uff0c\u7136\u540e\u7f29\u70b9\u67d3\u8272\u5224\u65ad\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // \u4f5c\u8005\uff1a\u5c0f\u9ed1 AWM #include <algorithm> #include <cstdio> #include <cstring> #include <iostream> #define maxn 2018 #define maxm 4000400 using namespace std ; int Index , instack [ maxn ], DFN [ maxn ], LOW [ maxn ]; int tot , color [ maxn ]; int numedge , head [ maxn ]; struct Edge { int nxt , to ; } edge [ maxm ]; int sta [ maxn ], top ; int n , m ; void add ( int x , int y ) { edge [ ++ numedge ]. to = y ; edge [ numedge ]. nxt = head [ x ]; head [ x ] = numedge ; } void tarjan ( int x ) { // \u7f29\u70b9\u770b\u4e0d\u61c2\u8bf7\u79fb\u6b65\u5f3a\u8fde\u901a\u5206\u91cf\u4e0a\u9762\u6709\u4e00\u4e2a\u94fe\u63a5\u53ef\u4ee5\u70b9\u3002 sta [ ++ top ] = x ; instack [ x ] = 1 ; DFN [ x ] = LOW [ x ] = ++ Index ; for ( int i = head [ x ]; i ; i = edge [ i ]. nxt ) { int v = edge [ i ]. to ; if ( ! DFN [ v ]) { tarjan ( v ); LOW [ x ] = min ( LOW [ x ], LOW [ v ]); } else if ( instack [ v ]) LOW [ x ] = min ( LOW [ x ], DFN [ v ]); } if ( DFN [ x ] == LOW [ x ]) { tot ++ ; do { color [ sta [ top ]] = tot ; // \u67d3\u8272 instack [ sta [ top ]] = 0 ; } while ( sta [ top -- ] != x ); } } bool solve () { for ( int i = 0 ; i < 2 * n ; i ++ ) if ( ! DFN [ i ]) tarjan ( i ); for ( int i = 0 ; i < 2 * n ; i += 2 ) if ( color [ i ] == color [ i + 1 ]) return 0 ; return 1 ; } void init () { top = 0 ; tot = 0 ; Index = 0 ; numedge = 0 ; memset ( sta , 0 , sizeof ( sta )); memset ( DFN , 0 , sizeof ( DFN )); memset ( instack , 0 , sizeof ( instack )); memset ( LOW , 0 , sizeof ( LOW )); memset ( color , 0 , sizeof ( color )); memset ( head , 0 , sizeof ( head )); } int main () { while ( ~ scanf ( \"%d%d\" , & n , & m )) { init (); for ( int i = 1 ; i <= m ; i ++ ) { int a1 , a2 , c1 , c2 ; scanf ( \"%d%d%d%d\" , & a1 , & a2 , & c1 , & c2 ); // \u81ea\u5df1\u505a\u7684\u65f6\u5019\u522b\u7528 cin \u4f1a\u88ab\u5361 add ( 2 * a1 + c1 , 2 * a2 + 1 - c2 ); // \u6211\u4eec\u5c06 2i+1 \u8868\u793a\u4e3a\u7b2c i \u5bf9\u4e2d\u7684\uff0c2i \u8868\u793a\u4e3a\u59bb\u5b50\u3002 add ( 2 * a2 + c2 , 2 * a1 + 1 - c1 ); } if ( solve ()) printf ( \"YES \\n \" ); else printf ( \"NO \\n \" ); } return 0 ; } \u7ec3\u4e60\u9898 \u00b6 HDU1814 \u548c\u5e73\u59d4\u5458\u4f1a POJ3683 \u7267\u5e08\u5fd9\u788c\u65e5","title":"2-SAT"},{"location":"graph/2-sat/#_1","text":"2-SAT \uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u7ed9\u51fa n n \u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u5df2\u77e5\u82e5\u5e72\u4e2a <a,b> <a,b> \uff0c\u8868\u793a a a \u4e0e b b \u77db\u76fe\uff08\u5176\u4e2d a a \u4e0e b b \u5c5e\u4e8e\u4e0d\u540c\u7684\u96c6\u5408\uff09\u3002\u7136\u540e\u4ece\u6bcf\u4e2a\u96c6\u5408\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\uff0c\u5224\u65ad\u80fd\u5426\u4e00\u5171\u9009 n n \u4e2a\u4e24\u4e24\u4e0d\u77db\u76fe\u7684\u5143\u7d20\u3002\u663e\u7136\u53ef\u80fd\u6709\u591a\u79cd\u9009\u62e9\u65b9\u6848\uff0c\u4e00\u822c\u9898\u4e2d\u53ea\u9700\u8981\u6c42\u51fa\u4e00\u79cd\u5373\u53ef\u3002","title":"\u5b9a\u4e49"},{"location":"graph/2-sat/#_2","text":"\u6bd4\u5982\u9080\u8bf7\u4eba\u6765\u5403\u559c\u9152\uff0c\u592b\u59bb\u4e8c\u4eba\u5fc5\u987b\u53bb\u4e00\u4e2a\uff0c\u7136\u800c\u67d0\u4e9b\u4eba\u4e4b\u95f4\u6709\u77db\u76fe\uff08\u6bd4\u5982 A \u5148\u751f\u4e0e B \u5973\u58eb\u6709\u77db\u76fe\uff0cC \u5973\u58eb\u4e0d\u60f3\u548c D \u5148\u751f\u5728\u4e00\u8d77\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u786e\u5b9a\u80fd\u5426\u907f\u514d\u6765\u4eba\u4e4b\u95f4\u6ca1\u6709\u77db\u76fe\uff0c\u6709\u65f6\u9700\u8981\u65b9\u6848\u3002\u8fd9\u662f\u4e00\u7c7b\u751f\u6d3b\u4e2d\u5e38\u89c1\u7684\u95ee\u9898\u3002 \u4f7f\u7528\u5e03\u5c14\u65b9\u7a0b\u8868\u793a\u4e0a\u8ff0\u95ee\u9898\u3002\u8bbe a a \u8868\u793a A \u5148\u751f\u53bb\u53c2\u52a0\uff0c\u90a3\u4e48 B \u5973\u58eb\u5c31\u4e0d\u80fd\u53c2\u52a0\uff08 \\neg a \\neg a )\uff1b b b \u8868\u793a C \u5973\u58eb\u53c2\u52a0\uff0c\u90a3\u4e48 \\neg b \\neg b \u4e5f\u4e00\u5b9a\u6210\u7acb\uff08D \u5148\u751f\u4e0d\u53c2\u52a0\uff09\u3002\u603b\u7ed3\u4e00\u4e0b\uff0c\u5373 (a \\vee b) (a \\vee b) \uff08\u53d8\u91cf a, b a, b \u81f3\u5c11\u6ee1\u8db3\u4e00\u4e2a\uff09 \u3002 \u5bf9\u8fd9\u4e9b\u53d8\u91cf\u5173\u7cfb\u5efa\u6709\u5411\u56fe\uff0c\u5219\u6709\uff1a \\neg a\\Rightarrow b\\wedge\\neg b\\Rightarrow a \\neg a\\Rightarrow b\\wedge\\neg b\\Rightarrow a \uff08 a a \u4e0d\u6210\u7acb\u5219 b b \u4e00\u5b9a\u6210\u7acb\uff1b\u540c\u7406\uff0c b b \u4e0d\u6210\u7acb\u5219 a a \u4e00\u5b9a\u6210\u7acb\uff09\u3002\u5efa\u56fe\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u7f29\u70b9\u7b97\u6cd5\u6765\u6c42\u89e3 2-SAT \u95ee\u9898\u4e86\u3002","title":"\u73b0\u5b9e\u610f\u4e49"},{"location":"graph/2-sat/#_3","text":"","title":"\u5e38\u7528\u89e3\u51b3\u65b9\u6cd5"},{"location":"graph/2-sat/#tarjan-scc","text":"\u7b97\u6cd5\u8003\u7a76\u5728\u5efa\u56fe\u8fd9\u70b9\uff0c\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bb2\uff1a \u5047\u8bbe\u6709 {a1,a2} {a1,a2} \u548c {b1,b2} {b1,b2} \u4e24\u5bf9\uff0c\u5df2\u77e5 a1 a1 \u548c b2 b2 \u95f4\u6709\u77db\u76fe\uff0c\u4e8e\u662f\u4e3a\u4e86\u65b9\u6848\u81ea\u6d3d\uff0c\u7531\u4e8e\u4e24\u8005\u4e2d\u5fc5\u987b\u9009\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u62c9\u4e24\u6761\u6761\u6709\u5411\u8fb9 (a1,b1) (a1,b1) \u548c (b2,a2) (b2,a2) \u8868\u793a\u9009\u4e86 a1 a1 \u5219\u5fc5\u987b\u9009 b1 b1 \uff0c\u9009\u4e86 b2 b2 \u5219\u5fc5\u987b\u9009 a2 a2 \u624d\u80fd\u591f\u81ea\u6d3d\u3002 \u7136\u540e\u901a\u8fc7\u8fd9\u6837\u5b50\u5efa\u8fb9\u6211\u4eec\u8dd1\u4e00\u904d Tarjan SCC \u5224\u65ad\u662f\u5426\u6709\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u4e2a SCC \u4e2d\uff0c\u82e5\u6709\u5219\u8f93\u51fa\u4e0d\u53ef\u80fd\uff0c\u5426\u5219\u8f93\u51fa\u65b9\u6848\u3002\u6784\u9020\u65b9\u6848\u53ea\u9700\u8981\u628a\u51e0\u4e2a\u4e0d\u77db\u76fe\u7684 SCC \u62fc\u8d77\u6765\u5c31\u597d\u4e86\u3002 \u8f93\u51fa\u65b9\u6848\u65f6\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u5728\u56fe\u4e2d\u7684\u62d3\u6251\u5e8f\u786e\u5b9a\u8be5\u53d8\u91cf\u7684\u53d6\u503c\u3002\u5982\u679c\u53d8\u91cf \\neg x \\neg x \u7684\u62d3\u6251\u5e8f\u5728 x x \u4e4b\u540e\uff0c\u90a3\u4e48\u53d6 x x \u503c\u4e3a\u771f\u3002\u5e94\u7528\u5230 Tarjan \u7b97\u6cd5\u7684\u7f29\u70b9\uff0c\u5373 x x \u6240\u5728 SCC \u7f16\u53f7\u5728 \\neg x \\neg x \u4e4b\u524d\u65f6\uff0c\u53d6 x x \u4e3a\u771f\u3002\u56e0\u4e3a Tarjan \u7b97\u6cd5\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\u4f7f\u7528\u4e86\u6808\uff0c\u6240\u4ee5 Tarjan \u6c42\u5f97\u7684 SCC \u7f16\u53f7\u76f8\u5f53\u4e8e\u53cd\u62d3\u6251\u5e8f\u3002 \u663e\u7136\u5730, \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n+m) O(n+m) \u3002","title":"Tarjan SCC \u7f29\u70b9"},{"location":"graph/2-sat/#_4","text":"\u5c31\u662f\u6cbf\u7740\u56fe\u4e0a\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4ee5\u540e\u7684\u70b9\u90fd\u5c06\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\uff0c\u51fa\u73b0\u4e0d\u53ef\u884c\u7684\u60c5\u51b5\u5c31\u662f\uff0c\u5b58\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e24\u8005\u90fd\u88ab\u9009\u62e9\u4e86\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6570\u636e\u4e0d\u5927\uff0c\u7b54\u6848\u603b\u662f\u53ef\u4ee5\u51fa\u6765\u7684\u3002","title":"\u7206\u641c"},{"location":"graph/2-sat/#_5","text":"\u4e0b\u65b9\u4ee3\u7801\u6765\u81ea\u5218\u6c5d\u4f73\u7684\u767d\u4e66\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // \u6765\u6e90\uff1a\u767d\u4e66\u7b2c 323 \u9875 struct Twosat { int n ; vector < int > g [ maxn * 2 ]; bool mark [ maxn * 2 ]; int s [ maxn * 2 ], c ; bool dfs ( int x ) { if ( mark [ x ^ 1 ]) return false ; if ( mark [ x ]) return true ; mark [ x ] = true ; s [ c ++ ] = x ; for ( int i = 0 ; i < ( int ) g [ x ]. size (); i ++ ) if ( ! dfs ( g [ x ][ i ])) return false ; return true ; } void init ( int n ) { this -> n = n ; for ( int i = 0 ; i < n * 2 ; i ++ ) g [ i ]. clear (); memset ( mark , 0 , sizeof ( mark )); } void add_clause ( int x , int y ) { // \u8fd9\u4e2a\u51fd\u6570\u968f\u9898\u610f\u53d8\u5316 g [ x ]. push_back ( y ^ 1 ); // \u9009\u4e86 x \u5c31\u5fc5\u987b\u9009 y^1 g [ y ]. push_back ( x ^ 1 ); } bool solve () { for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( ! mark [ i ] && ! mark [ i + 1 ]) { c = 0 ; if ( ! dfs ( i )) { while ( c > 0 ) mark [ s [ -- c ]] = false ; if ( ! dfs ( i + 1 )) return false ; } } return true ; } };","title":"\u7206\u641c\u6a21\u677f"},{"location":"graph/2-sat/#_6","text":"","title":"\u4f8b\u9898"},{"location":"graph/2-sat/#hdu3062-party","text":"\u9898\u9762\uff1a\u6709 n \u5bf9\u592b\u59bb\u88ab\u9080\u8bf7\u53c2\u52a0\u4e00\u4e2a\u805a\u4f1a\uff0c\u56e0\u4e3a\u573a\u5730\u7684\u95ee\u9898\uff0c\u6bcf\u5bf9\u592b\u59bb\u4e2d\u53ea\u6709 1 1 \u4eba\u53ef\u4ee5\u5217\u5e2d\u3002\u5728 2n 2n \u4e2a\u4eba\u4e2d\uff0c\u67d0\u4e9b\u4eba\u4e4b\u95f4\u6709\u7740\u5f88\u5927\u7684\u77db\u76fe\uff08\u5f53\u7136\u592b\u59bb\u4e4b\u95f4\u662f\u6ca1\u6709\u77db\u76fe\u7684\uff09\uff0c\u6709\u77db\u76fe\u7684 2 2 \u4e2a\u4eba\u662f\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u805a\u4f1a\u4e0a\u7684\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u4f1a\u6709 n n \u4e2a\u4eba\u540c\u65f6\u5217\u5e2d\uff1f \u8fd9\u662f\u4e00\u9053\u591a\u6821\u9898\uff0c\u88f8\u7684 2-SAT \u5224\u65ad\u662f\u5426\u6709\u65b9\u6848\uff0c\u6309\u7167\u6211\u4eec\u4e0a\u9762\u7684\u5206\u6790\uff0c\u5982\u679c a1 a1 \u4e2d\u7684\u4e08\u592b\u548c a2 a2 \u4e2d\u7684\u59bb\u5b50\u4e0d\u5408\uff0c\u6211\u4eec\u5c31\u628a a1 a1 \u4e2d\u7684\u4e08\u592b\u548c a2 a2 \u4e2d\u7684\u4e08\u592b\u8fde\u8fb9\uff0c\u628a a2 a2 \u4e2d\u7684\u59bb\u5b50\u548c a1 a1 \u4e2d\u7684\u59bb\u5b50\u8fde\u8fb9\uff0c\u7136\u540e\u7f29\u70b9\u67d3\u8272\u5224\u65ad\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // \u4f5c\u8005\uff1a\u5c0f\u9ed1 AWM #include <algorithm> #include <cstdio> #include <cstring> #include <iostream> #define maxn 2018 #define maxm 4000400 using namespace std ; int Index , instack [ maxn ], DFN [ maxn ], LOW [ maxn ]; int tot , color [ maxn ]; int numedge , head [ maxn ]; struct Edge { int nxt , to ; } edge [ maxm ]; int sta [ maxn ], top ; int n , m ; void add ( int x , int y ) { edge [ ++ numedge ]. to = y ; edge [ numedge ]. nxt = head [ x ]; head [ x ] = numedge ; } void tarjan ( int x ) { // \u7f29\u70b9\u770b\u4e0d\u61c2\u8bf7\u79fb\u6b65\u5f3a\u8fde\u901a\u5206\u91cf\u4e0a\u9762\u6709\u4e00\u4e2a\u94fe\u63a5\u53ef\u4ee5\u70b9\u3002 sta [ ++ top ] = x ; instack [ x ] = 1 ; DFN [ x ] = LOW [ x ] = ++ Index ; for ( int i = head [ x ]; i ; i = edge [ i ]. nxt ) { int v = edge [ i ]. to ; if ( ! DFN [ v ]) { tarjan ( v ); LOW [ x ] = min ( LOW [ x ], LOW [ v ]); } else if ( instack [ v ]) LOW [ x ] = min ( LOW [ x ], DFN [ v ]); } if ( DFN [ x ] == LOW [ x ]) { tot ++ ; do { color [ sta [ top ]] = tot ; // \u67d3\u8272 instack [ sta [ top ]] = 0 ; } while ( sta [ top -- ] != x ); } } bool solve () { for ( int i = 0 ; i < 2 * n ; i ++ ) if ( ! DFN [ i ]) tarjan ( i ); for ( int i = 0 ; i < 2 * n ; i += 2 ) if ( color [ i ] == color [ i + 1 ]) return 0 ; return 1 ; } void init () { top = 0 ; tot = 0 ; Index = 0 ; numedge = 0 ; memset ( sta , 0 , sizeof ( sta )); memset ( DFN , 0 , sizeof ( DFN )); memset ( instack , 0 , sizeof ( instack )); memset ( LOW , 0 , sizeof ( LOW )); memset ( color , 0 , sizeof ( color )); memset ( head , 0 , sizeof ( head )); } int main () { while ( ~ scanf ( \"%d%d\" , & n , & m )) { init (); for ( int i = 1 ; i <= m ; i ++ ) { int a1 , a2 , c1 , c2 ; scanf ( \"%d%d%d%d\" , & a1 , & a2 , & c1 , & c2 ); // \u81ea\u5df1\u505a\u7684\u65f6\u5019\u522b\u7528 cin \u4f1a\u88ab\u5361 add ( 2 * a1 + c1 , 2 * a2 + 1 - c2 ); // \u6211\u4eec\u5c06 2i+1 \u8868\u793a\u4e3a\u7b2c i \u5bf9\u4e2d\u7684\uff0c2i \u8868\u793a\u4e3a\u59bb\u5b50\u3002 add ( 2 * a2 + c2 , 2 * a1 + 1 - c1 ); } if ( solve ()) printf ( \"YES \\n \" ); else printf ( \"NO \\n \" ); } return 0 ; }","title":"HDU3062 Party"},{"location":"graph/2-sat/#_7","text":"HDU1814 \u548c\u5e73\u59d4\u5458\u4f1a POJ3683 \u7267\u5e08\u5fd9\u788c\u65e5","title":"\u7ec3\u4e60\u9898"},{"location":"graph/basic/","text":"\u56fe\u662f\u600e\u4e48\u5b58\u7684\uff1f \u00b6 \u76f4\u63a5\u5b58\u8fb9 \u00b6 \u4ec0\u4e48\u610f\u601d\u5462\uff1f\u6211\u4eec\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u6bcf\u4e2a\u5143\u7d20\u662f\u56fe\u7684\u4e00\u6761\u8fb9\u3002 \u8fd9\u6837\u505a\u6709\u4e2a\u7f3a\u70b9\uff0c\u6bcf\u6b21\u60f3\u8981\u77e5\u9053\u4e24\u4e2a\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fde\u8fb9\uff08\u6216\u8005\u8bf4\u4e00\u6761\u8fb9\u662f\u5426\u5b58\u5728\uff09\uff0c\u90fd\u9700\u8981\u5728\u6570\u7ec4\u91cc\u8fdb\u884c\u4e00\u756a\u67e5\u627e\u3002\u800c\u4e14\u5982\u679c\u6ca1\u6709\u5bf9\u8fb9\u4e8b\u5148\u6392\u5e8f\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\uff08 O(\\log n) O(\\log n) \uff09\uff0c\u800c\u662f\u6bcf\u6b21\u53ea\u80fd\u6309\u987a\u5e8f\u627e\uff08 O(n) O(n) \uff09\uff0c\u6210\u672c\u8f83\u9ad8\u3002 \u4ec0\u4e48\u65f6\u5019\u4f1a\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\u5462\uff1f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528 Kruskal \u7b97\u6cd5\u6c42 \u6700\u5c0f\u751f\u6210\u6811 \u7684\u65f6\u5019\u3002 \u90bb\u63a5\u77e9\u9635 \u00b6 \u90bb\u63a5\u77e9\u9635\u7684\u82f1\u6587\u540d\u662f adjacency matrix\u3002\u5b83\u7684\u5f62\u5f0f\u662f bool adj[n][n] \uff0c\u8fd9\u91cc\u9762 n n \u662f\u8282\u70b9\u4e2a\u6570\uff0c adj[i][j] adj[i][j] \u8868\u793a i i \u548c j j \u4e4b\u95f4\u662f\u5426\u6709\u8fb9\u3002 \u5982\u679c\u8fb9\u6709\u6743\u503c\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 int adj[n][n] \uff0c\u76f4\u63a5\u628a\u8fb9\u6743\u5b58\u8fdb\u53bb\u3002 \u5b83\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u5728 O(1) O(1) \u65f6\u95f4\u5185\u5f97\u5230\u4e00\u6761\u8fb9\u662f\u5426\u5b58\u5728\uff0c\u7f3a\u70b9\u662f\u9700\u8981\u5360\u7528 O(n^2) O(n^2) \u7684\u7a7a\u95f4\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7a00\u758f\u7684\u56fe\uff08\u8fb9\u76f8\u5bf9\u4e8e\u70b9\u6570\u7684\u5e73\u65b9\u6bd4\u8f83\u5c11\uff09\u6765\u8bf4\uff0c\u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u7684\u8bdd\uff0c\u6210\u672c\u504f\u9ad8\u3002 \u90bb\u63a5\u8868 \u00b6 \u90bb\u63a5\u8868\u82f1\u6587\u540d\u662f adjacency list\u3002\u5b83\u7684\u5f62\u5f0f\u662f vector adj[n] \uff0c\u7528 adj[i] \u5b58\u4ee5 i i \u4e3a\u8d77\u70b9\u7684\u8fb9\u3002 \u7528 vector \u65e0\u6cd5\u79d1\u5b66\u5730\u5220\u9664\uff0c\u6240\u4ee5\u5e38\u7528 list \u5b9e\u73b0\u3002 \u5b83\u7684\u7279\u70b9\u662f\u53ef\u4ee5\u7528\u6765\u6309\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u70b9\u7684\u51fa\u8fb9\uff08\u6216\u8005\u5165\u8fb9\uff09\u3002 \u524d\u5411\u661f \u00b6 \u4e3a\u4ec0\u4e48\u5b83\u641c\u4e0d\u5230\u82f1\u6587\u540d\u5462\uff1f\u56e0\u4e3a\u662f\u4e2d\u56fd\u73a9\u5bb6\u4e71\u641e\u51fa\u6765\u7684\u3002 \u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u672c\u8d28\u4e0a\u662f\u7528\u5355\u5411\u94fe\u8868\u5b9e\u73b0\u7684\u90bb\u63a5\u8868\u3002 \u5f62\u5f0f\u4e0a\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1a struct edge {edge *pre, int to;} *head[N], edge[M] \u8fd9\u4e2a\u7ed3\u6784\u5e7f\u6cdb\u51fa\u73b0\u4e8e\u7b97\u6cd5\u7ade\u8d5b\u9009\u624b\u7684\u4ee3\u7801\u4e2d\uff0c\u7f16\u5199\u7b80\u6d01\u800c\u4e14\u5bf9\u4e8e\u5927\u591a\u6570\u9898\u76ee\u6548\u7387\u8db3\u591f\u9ad8\u3002 \u5176\u4e2d head[i] \u7528\u6765\u5b58\u4ee5 i i \u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c edge \u6570\u7ec4\u662f\u8fb9\u8868\u3002 \u90a3\u4e48\u4ec0\u4e48\u662f\u524d\u5411\u661f\u5462\uff1f\u4e8b\u5148\u628a edge \u6570\u7ec4\u6392\u4e2a\u5e8f\u5373\u53ef\u3002\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 \u57fa\u6570\u6392\u5e8f \u505a\u5230 O(m) O(m) \u3002 \u4e00\u4e9b\u8ddf\u56fe\u6709\u5173\u7684\u5b9a\u4e49 \u00b6 \u8def\u5f84 \u00b6 path\uff0c\u662f\u6307\u4e00\u4e2a\u8fb9\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u7684\u8fb9\u9996\u5c3e\u76f8\u8fde\u3002 \u7b80\u5355\u8def\u5f84 \u00b6 simple path\uff0c\u662f\u6bcf\u6761\u8fb9\u53ea\u7ecf\u8fc7\u4e86\u4e00\u6b21\u7684\u8def\u5f84\u3002 \u56de\u8def \u00b6 cycle\uff0c\u4e5f\u79f0\u4e3a \u73af \uff0c\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u7684\u8def\u5f84\u3002 \u7b80\u5355\u56de\u8def \u00b6 \u56fe\u7684\u5b9a\u70b9\u5e8f\u5217\u4e2d\uff0c\u9664\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u5916\uff0c\u5176\u4f59\u9876\u70b9\u4e0d\u91cd\u590d\u7684\u56de\u8def\u3002 \u8fde\u901a \u00b6 \u4e24\u4e2a\u70b9\u8fde\u901a \u00b6 \u65e0\u5411\u56fe\u4e2d\u70b9 u u \u548c v v \u8fde\u901a\u662f\u6307\u5b58\u5728\u4e00\u6761 u u \u5230 v v \u7684\u8def\u5f84\u3002 \u56fe\u8fde\u901a \u00b6 \u5982\u679c\u65e0\u5411\u56fe G G \u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u8fde\u901a\uff0c\u79f0\u5176\u4e3a\u662f\u8fde\u901a\u7684\u3002 \u53ef\u8fbe \u00b6 \u6709\u5411\u56fe\u4e2d\u70b9 u u \u5230 v v \u53ef\u8fbe\u662f\u6307\u5b58\u5728\u4e00\u6761 u u \u5230 v v \u7684\u8def\u5f84\u3002 \u5f3a\u8fde\u901a \u00b6 \u6709\u5411\u56fe G G \u5f3a\u8fde\u901a\u662f\u6307\uff0c G G \u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u8fde\u901a\u3002 \u5f31\u8fde\u901a \u00b6 \u6709\u5411\u56fe G G \u5f31\u8fde\u901a\u662f\u6307\uff0c G G \u4e2d\u7684\u6240\u6709\u8fb9\u66ff\u6362\u4e3a\u65e0\u5411\u8fb9\u540e\uff0c G G \u4e3a\u8fde\u901a\u56fe\u3002 \u5b50\u56fe \u00b6 \u9009\u53d6\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u96c6\u548c\u8fb9\u7684\u5b50\u96c6\u6784\u6210\u7684\u56fe\u3002 \u751f\u6210\u5b50\u56fe \u00b6 \u9009\u53d6\u7684\u5b50\u56fe\u7684\u8282\u70b9\u548c\u539f\u56fe\u4e00\u6837\u3002 \u5bfc\u51fa\u5b50\u56fe \u00b6 \u9009\u53d6\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u96c6\uff0c\u518d\u9009\u53d6\u8fd9\u4e9b\u8282\u70b9\u76f8\u5173\u8054\u7684\u8fb9\u7684\u96c6\u5408\u6784\u6210\u7684\u56fe\u3002 \u8fb9\u5bfc\u51fa\u5b50\u56fe \u00b6 \u9009\u53d6\u4e00\u4e2a\u8fb9\u7684\u5b50\u96c6\uff0c\u518d\u9009\u53d6\u8fd9\u4e9b\u8fb9\u76f8\u5173\u8054\u7684\u8282\u70b9\u7684\u96c6\u5408\uff0c\u6784\u6210\u7684\u56fe\u3002 \u8fde\u901a\u5b50\u56fe \u00b6 \uff08\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\uff09\u8fde\u901a\u7684\u5b50\u56fe\u3002 \u8fde\u901a\u5206\u91cf \u00b6 \uff08\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\uff09\u6781\u5927\u7684\u8fde\u901a\u5b50\u56fe\u3002 \u3010\u6ce8\u3011\uff1a\u6781\u5927\u662f\u6307\u6dfb\u52a0\u4efb\u4f55\u8282\u70b9\u6216\u8005\u8fb9\u540e\u90fd\u4e0d\u518d\u6ee1\u8db3\u3002 \u7a00\u758f\u56fe \u00b6 m = \\Theta(n) m = \\Theta(n) \u7684\u56fe\uff0c\u6216\u8005\u6307 m m \u76f8\u5bf9\u8f83\u5c0f\u7684\u56fe\u3002 \u7a20\u5bc6\u56fe \u00b6 m = \\Theta(n^2) m = \\Theta(n^2) \u7684\u56fe\uff0c\u6216\u8005\u6307 m m \u76f8\u5bf9\u8f83\u5927\u7684\u56fe\u3002 \u5b8c\u5168\u56fe \u00b6 m = \\frac{n(n-1)}{2} m = \\frac{n(n-1)}{2} \u7684\u7b80\u5355\u65e0\u5411\u56fe\u3002 \u8def\u5f84\u7684\u957f\u5ea6 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u8def\u5f84\u7684\u957f\u5ea6\u5728\u6570\u503c\u4e0a\u7b49\u4e8e\u8def\u5f84\u7684\u8fb9\u6570\uff0c\u6216\u8005\u5982\u679c\u8fb9\u662f\u5e26\u6743\u7684\uff0c\u5219\u662f\u8def\u5f84\u7684\u8fb9\u6743\u548c\u3002 \u6700\u77ed\u8def\u5f84 \u00b6 \u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\uff0c\u957f\u5ea6\u6700\u5c0f\u7684\u8def\u5f84\u3002 \u3010\u6ce8\u3011\uff1a\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u4e0d\u4e00\u5b9a\u552f\u4e00\u3002","title":"\u56fe\u8bba\u57fa\u7840"},{"location":"graph/basic/#_1","text":"","title":"\u56fe\u662f\u600e\u4e48\u5b58\u7684\uff1f"},{"location":"graph/basic/#_2","text":"\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u6211\u4eec\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u6bcf\u4e2a\u5143\u7d20\u662f\u56fe\u7684\u4e00\u6761\u8fb9\u3002 \u8fd9\u6837\u505a\u6709\u4e2a\u7f3a\u70b9\uff0c\u6bcf\u6b21\u60f3\u8981\u77e5\u9053\u4e24\u4e2a\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fde\u8fb9\uff08\u6216\u8005\u8bf4\u4e00\u6761\u8fb9\u662f\u5426\u5b58\u5728\uff09\uff0c\u90fd\u9700\u8981\u5728\u6570\u7ec4\u91cc\u8fdb\u884c\u4e00\u756a\u67e5\u627e\u3002\u800c\u4e14\u5982\u679c\u6ca1\u6709\u5bf9\u8fb9\u4e8b\u5148\u6392\u5e8f\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\uff08 O(\\log n) O(\\log n) \uff09\uff0c\u800c\u662f\u6bcf\u6b21\u53ea\u80fd\u6309\u987a\u5e8f\u627e\uff08 O(n) O(n) \uff09\uff0c\u6210\u672c\u8f83\u9ad8\u3002 \u4ec0\u4e48\u65f6\u5019\u4f1a\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\u5462\uff1f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528 Kruskal \u7b97\u6cd5\u6c42 \u6700\u5c0f\u751f\u6210\u6811 \u7684\u65f6\u5019\u3002","title":"\u76f4\u63a5\u5b58\u8fb9"},{"location":"graph/basic/#_3","text":"\u90bb\u63a5\u77e9\u9635\u7684\u82f1\u6587\u540d\u662f adjacency matrix\u3002\u5b83\u7684\u5f62\u5f0f\u662f bool adj[n][n] \uff0c\u8fd9\u91cc\u9762 n n \u662f\u8282\u70b9\u4e2a\u6570\uff0c adj[i][j] adj[i][j] \u8868\u793a i i \u548c j j \u4e4b\u95f4\u662f\u5426\u6709\u8fb9\u3002 \u5982\u679c\u8fb9\u6709\u6743\u503c\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 int adj[n][n] \uff0c\u76f4\u63a5\u628a\u8fb9\u6743\u5b58\u8fdb\u53bb\u3002 \u5b83\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u5728 O(1) O(1) \u65f6\u95f4\u5185\u5f97\u5230\u4e00\u6761\u8fb9\u662f\u5426\u5b58\u5728\uff0c\u7f3a\u70b9\u662f\u9700\u8981\u5360\u7528 O(n^2) O(n^2) \u7684\u7a7a\u95f4\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7a00\u758f\u7684\u56fe\uff08\u8fb9\u76f8\u5bf9\u4e8e\u70b9\u6570\u7684\u5e73\u65b9\u6bd4\u8f83\u5c11\uff09\u6765\u8bf4\uff0c\u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u7684\u8bdd\uff0c\u6210\u672c\u504f\u9ad8\u3002","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"graph/basic/#_4","text":"\u90bb\u63a5\u8868\u82f1\u6587\u540d\u662f adjacency list\u3002\u5b83\u7684\u5f62\u5f0f\u662f vector adj[n] \uff0c\u7528 adj[i] \u5b58\u4ee5 i i \u4e3a\u8d77\u70b9\u7684\u8fb9\u3002 \u7528 vector \u65e0\u6cd5\u79d1\u5b66\u5730\u5220\u9664\uff0c\u6240\u4ee5\u5e38\u7528 list \u5b9e\u73b0\u3002 \u5b83\u7684\u7279\u70b9\u662f\u53ef\u4ee5\u7528\u6765\u6309\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u70b9\u7684\u51fa\u8fb9\uff08\u6216\u8005\u5165\u8fb9\uff09\u3002","title":"\u90bb\u63a5\u8868"},{"location":"graph/basic/#_5","text":"\u4e3a\u4ec0\u4e48\u5b83\u641c\u4e0d\u5230\u82f1\u6587\u540d\u5462\uff1f\u56e0\u4e3a\u662f\u4e2d\u56fd\u73a9\u5bb6\u4e71\u641e\u51fa\u6765\u7684\u3002 \u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u672c\u8d28\u4e0a\u662f\u7528\u5355\u5411\u94fe\u8868\u5b9e\u73b0\u7684\u90bb\u63a5\u8868\u3002 \u5f62\u5f0f\u4e0a\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1a struct edge {edge *pre, int to;} *head[N], edge[M] \u8fd9\u4e2a\u7ed3\u6784\u5e7f\u6cdb\u51fa\u73b0\u4e8e\u7b97\u6cd5\u7ade\u8d5b\u9009\u624b\u7684\u4ee3\u7801\u4e2d\uff0c\u7f16\u5199\u7b80\u6d01\u800c\u4e14\u5bf9\u4e8e\u5927\u591a\u6570\u9898\u76ee\u6548\u7387\u8db3\u591f\u9ad8\u3002 \u5176\u4e2d head[i] \u7528\u6765\u5b58\u4ee5 i i \u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c edge \u6570\u7ec4\u662f\u8fb9\u8868\u3002 \u90a3\u4e48\u4ec0\u4e48\u662f\u524d\u5411\u661f\u5462\uff1f\u4e8b\u5148\u628a edge \u6570\u7ec4\u6392\u4e2a\u5e8f\u5373\u53ef\u3002\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 \u57fa\u6570\u6392\u5e8f \u505a\u5230 O(m) O(m) \u3002","title":"\u524d\u5411\u661f"},{"location":"graph/basic/#_6","text":"","title":"\u4e00\u4e9b\u8ddf\u56fe\u6709\u5173\u7684\u5b9a\u4e49"},{"location":"graph/basic/#_7","text":"path\uff0c\u662f\u6307\u4e00\u4e2a\u8fb9\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u7684\u8fb9\u9996\u5c3e\u76f8\u8fde\u3002","title":"\u8def\u5f84"},{"location":"graph/basic/#_8","text":"simple path\uff0c\u662f\u6bcf\u6761\u8fb9\u53ea\u7ecf\u8fc7\u4e86\u4e00\u6b21\u7684\u8def\u5f84\u3002","title":"\u7b80\u5355\u8def\u5f84"},{"location":"graph/basic/#_9","text":"cycle\uff0c\u4e5f\u79f0\u4e3a \u73af \uff0c\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u7684\u8def\u5f84\u3002","title":"\u56de\u8def"},{"location":"graph/basic/#_10","text":"\u56fe\u7684\u5b9a\u70b9\u5e8f\u5217\u4e2d\uff0c\u9664\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u5916\uff0c\u5176\u4f59\u9876\u70b9\u4e0d\u91cd\u590d\u7684\u56de\u8def\u3002","title":"\u7b80\u5355\u56de\u8def"},{"location":"graph/basic/#_11","text":"","title":"\u8fde\u901a"},{"location":"graph/basic/#_12","text":"\u65e0\u5411\u56fe\u4e2d\u70b9 u u \u548c v v \u8fde\u901a\u662f\u6307\u5b58\u5728\u4e00\u6761 u u \u5230 v v \u7684\u8def\u5f84\u3002","title":"\u4e24\u4e2a\u70b9\u8fde\u901a"},{"location":"graph/basic/#_13","text":"\u5982\u679c\u65e0\u5411\u56fe G G \u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u8fde\u901a\uff0c\u79f0\u5176\u4e3a\u662f\u8fde\u901a\u7684\u3002","title":"\u56fe\u8fde\u901a"},{"location":"graph/basic/#_14","text":"\u6709\u5411\u56fe\u4e2d\u70b9 u u \u5230 v v \u53ef\u8fbe\u662f\u6307\u5b58\u5728\u4e00\u6761 u u \u5230 v v \u7684\u8def\u5f84\u3002","title":"\u53ef\u8fbe"},{"location":"graph/basic/#_15","text":"\u6709\u5411\u56fe G G \u5f3a\u8fde\u901a\u662f\u6307\uff0c G G \u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u8fde\u901a\u3002","title":"\u5f3a\u8fde\u901a"},{"location":"graph/basic/#_16","text":"\u6709\u5411\u56fe G G \u5f31\u8fde\u901a\u662f\u6307\uff0c G G \u4e2d\u7684\u6240\u6709\u8fb9\u66ff\u6362\u4e3a\u65e0\u5411\u8fb9\u540e\uff0c G G \u4e3a\u8fde\u901a\u56fe\u3002","title":"\u5f31\u8fde\u901a"},{"location":"graph/basic/#_17","text":"\u9009\u53d6\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u96c6\u548c\u8fb9\u7684\u5b50\u96c6\u6784\u6210\u7684\u56fe\u3002","title":"\u5b50\u56fe"},{"location":"graph/basic/#_18","text":"\u9009\u53d6\u7684\u5b50\u56fe\u7684\u8282\u70b9\u548c\u539f\u56fe\u4e00\u6837\u3002","title":"\u751f\u6210\u5b50\u56fe"},{"location":"graph/basic/#_19","text":"\u9009\u53d6\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u96c6\uff0c\u518d\u9009\u53d6\u8fd9\u4e9b\u8282\u70b9\u76f8\u5173\u8054\u7684\u8fb9\u7684\u96c6\u5408\u6784\u6210\u7684\u56fe\u3002","title":"\u5bfc\u51fa\u5b50\u56fe"},{"location":"graph/basic/#_20","text":"\u9009\u53d6\u4e00\u4e2a\u8fb9\u7684\u5b50\u96c6\uff0c\u518d\u9009\u53d6\u8fd9\u4e9b\u8fb9\u76f8\u5173\u8054\u7684\u8282\u70b9\u7684\u96c6\u5408\uff0c\u6784\u6210\u7684\u56fe\u3002","title":"\u8fb9\u5bfc\u51fa\u5b50\u56fe"},{"location":"graph/basic/#_21","text":"\uff08\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\uff09\u8fde\u901a\u7684\u5b50\u56fe\u3002","title":"\u8fde\u901a\u5b50\u56fe"},{"location":"graph/basic/#_22","text":"\uff08\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\uff09\u6781\u5927\u7684\u8fde\u901a\u5b50\u56fe\u3002 \u3010\u6ce8\u3011\uff1a\u6781\u5927\u662f\u6307\u6dfb\u52a0\u4efb\u4f55\u8282\u70b9\u6216\u8005\u8fb9\u540e\u90fd\u4e0d\u518d\u6ee1\u8db3\u3002","title":"\u8fde\u901a\u5206\u91cf"},{"location":"graph/basic/#_23","text":"m = \\Theta(n) m = \\Theta(n) \u7684\u56fe\uff0c\u6216\u8005\u6307 m m \u76f8\u5bf9\u8f83\u5c0f\u7684\u56fe\u3002","title":"\u7a00\u758f\u56fe"},{"location":"graph/basic/#_24","text":"m = \\Theta(n^2) m = \\Theta(n^2) \u7684\u56fe\uff0c\u6216\u8005\u6307 m m \u76f8\u5bf9\u8f83\u5927\u7684\u56fe\u3002","title":"\u7a20\u5bc6\u56fe"},{"location":"graph/basic/#_25","text":"m = \\frac{n(n-1)}{2} m = \\frac{n(n-1)}{2} \u7684\u7b80\u5355\u65e0\u5411\u56fe\u3002","title":"\u5b8c\u5168\u56fe"},{"location":"graph/basic/#_26","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u8def\u5f84\u7684\u957f\u5ea6\u5728\u6570\u503c\u4e0a\u7b49\u4e8e\u8def\u5f84\u7684\u8fb9\u6570\uff0c\u6216\u8005\u5982\u679c\u8fb9\u662f\u5e26\u6743\u7684\uff0c\u5219\u662f\u8def\u5f84\u7684\u8fb9\u6743\u548c\u3002","title":"\u8def\u5f84\u7684\u957f\u5ea6"},{"location":"graph/basic/#_27","text":"\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\uff0c\u957f\u5ea6\u6700\u5c0f\u7684\u8def\u5f84\u3002 \u3010\u6ce8\u3011\uff1a\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u4e0d\u4e00\u5b9a\u552f\u4e00\u3002","title":"\u6700\u77ed\u8def\u5f84"},{"location":"graph/bcc/","text":"\u7b80\u4ecb \u00b6 \u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\u3002 \u5b9a\u4e49 \u00b6 \u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u5c06\u4e00\u6761\u8fb9\u5220\u53bb\u540e\uff0c\u539f\u56fe\u53d8\u6210\u4e0d\u8054\u901a\u7684\u4e24\u90e8\u5206\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u6761\u8fb9\u662f \u6865 \u3002 \u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u5c06\u4e00\u4e2a\u70b9\u5220\u53bb\u540e\uff0c\u539f\u56fe\u53d8\u6210\u4e0d\u8054\u901a\u7684\u4e24\u90e8\u5206\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a\u70b9\u662f \u5272\u70b9 \u3002 \u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u6761\u8fb9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u6761\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8054\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u8fb9\u53cc\u8054\u901a \u3002 \u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u4e2a\u70b9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u4e2a\uff0c\u4e14\u4e0d\u80fd\u5220 u u \u548c v v \u81ea\u5df1\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8054\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u70b9\u53cc\u8054\u901a \u3002 \u8fb9\u53cc\u8054\u901a\u5177\u6709\u4f20\u9012\u6027\uff0c\u5373\uff0c\u82e5 x,y x,y \u8fb9\u53cc\u8054\u901a\uff0c y,z y,z \u8fb9\u53cc\u8054\u901a\uff0c\u5219 x,z x,z \u8fb9\u53cc\u8054\u901a\u3002 \u70b9\u53cc\u8054\u901a \u4e0d \u5177\u6709\u4f20\u9012\u6027\uff0c\u53cd\u4f8b\u5982\u4e0b\u56fe\uff0c A,B A,B \u70b9\u53cc\u8054\u901a\uff0c B,C B,C \u70b9\u53cc\u8054\u901a\uff0c\u800c A,C A,C \u4e0d \u70b9\u53cc\u8054\u901a\u3002 DFS \u00b6 \u5bf9\u4e8e\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u70b9\u5f00\u59cb DFS\uff0c\u5f97\u5230\u539f\u56fe\u7684\u4e00\u68f5\u751f\u6210\u6811\uff08\u4ee5\u5f00\u59cb DFS \u7684\u90a3\u4e2a\u70b9\u4e3a\u6839\uff09\uff0c\u8fd9\u68f5\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u79f0\u4f5c \u6811\u8fb9 \uff0c\u4e0d\u5728\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u79f0\u4f5c \u975e\u6811\u8fb9 \u3002 \u7531\u4e8e DFS \u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u975e\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u5728\u751f\u6210\u6811\u4e0a\u90fd\u6ee1\u8db3\u5176\u4e2d\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\u3002 DFS \u7684\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 void DFS ( int p ) { visited [ p ] = true ; for ( int to : edge [ p ]) if ( ! visited [ to ]) DFS ( to ); } DFS \u627e\u6865\u5e76\u5224\u65ad\u8fb9\u53cc\u8054\u901a \u00b6 \u9996\u5148\uff0c\u5bf9\u539f\u56fe\u8fdb\u884c DFS\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9ed1\u8272\u4e0e\u7eff\u8272\u8fb9\u4e3a\u6811\u8fb9\uff0c\u7ea2\u8272\u8fb9\u4e3a\u975e\u6811\u8fb9\u3002\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u90fd\u5bf9\u5e94\u4e86\u6811\u4e0a\u7684\u4e00\u6761\u7b80\u5355\u8def\u5f84\uff0c\u6211\u4eec\u8bf4\u8fd9\u6761\u975e\u6811\u8fb9 \u8986\u76d6 \u4e86\u8fd9\u6761\u6811\u4e0a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u3002\u7eff\u8272\u7684\u6811\u8fb9 \u81f3\u5c11 \u88ab\u4e00\u6761\u975e\u6811\u8fb9\u8986\u76d6\uff0c\u9ed1\u8272\u7684\u6811\u8fb9\u4e0d\u88ab \u4efb\u4f55 \u975e\u6811\u8fb9\u8986\u76d6\u3002 \u6211\u4eec\u5982\u4f55\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u4e0d\u662f\u6865\u5462\uff1f\u663e\u7136\uff0c\u975e\u6811\u8fb9\u548c\u7eff\u8272\u7684\u6811\u8fb9\u4e00\u5b9a\u4e0d\u662f\u6865\uff0c\u9ed1\u8272\u7684\u6811\u8fb9\u4e00\u5b9a\u662f\u6865\u3002 \u5982\u4f55\u7528\u7b97\u6cd5\u53bb\u5b9e\u73b0\u4ee5\u4e0a\u8fc7\u7a0b\u5462\uff1f\u9996\u5148\u6709\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u90fd\u9010\u4e2a\u5730\u5c06\u5b83\u8986\u76d6\u7684\u6bcf\u4e00\u6761\u6811\u8fb9\u7f6e\u6210\u7eff\u8272\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002 \u600e\u4e48\u4f18\u5316\u5462\uff1f\u53ef\u4ee5\u7528\u5dee\u5206\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u5728\u5176\u6811\u4e0a\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u5904\u6253\u4e0a -1 \u6807\u8bb0\uff0c\u5728\u5176\u6811\u4e0a\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u5904\u6253\u4e0a +1 \u6807\u8bb0\u3002\u7136\u540e O(n) O(n) \u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u5185\u90e8\u7684\u6807\u8bb0\u4e4b\u548c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9 u u \uff0c\u5176\u5b50\u6811\u5185\u90e8\u7684\u6807\u8bb0\u4e4b\u548c\u7b49\u4e8e\u8986\u76d6\u4e86 u u \u548c u u \u7684\u7236\u4eb2\u4e4b\u95f4\u7684\u6811\u8fb9\u7684\u975e\u6811\u8fb9\u6570\u91cf\u3002\u82e5\u8fd9\u4e2a\u503c\u975e 0 0 \uff0c\u5219 u u \u548c u u \u7684\u7236\u4eb2\u4e4b\u95f4\u7684\u6811\u8fb9\u4e0d\u662f\u6865\uff0c\u5426\u5219\u662f\u6865\u3002 \u7528\u4ee5\u4e0a\u7684\u65b9\u6cd5 O(n+m) O(n+m) \u6c42\u51fa\u6bcf\u6761\u8fb9\u5206\u522b\u662f\u5426\u662f\u6865\u540e\uff0c\u4e24\u4e2a\u70b9\u662f\u8fb9\u53cc\u8054\u901a\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u7684\u6811\u4e0a\u8def\u5f84\u4e2d \u4e0d \u5305\u542b\u6865\u3002 DFS \u627e\u5272\u70b9\u5e76\u5224\u65ad\u70b9\u53cc\u8054\u901a \u00b6 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9ed1\u8272\u8fb9\u4e3a\u6811\u8fb9\uff0c\u7ea2\u8272\u8fb9\u4e3a\u975e\u6811\u8fb9\u3002\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u90fd\u5bf9\u5e94\u4e86\u6811\u4e0a\u7684\u4e00\u6761\u7b80\u5355\u8def\u5f84\u3002 \u8003\u8651\u4e00\u5f20\u65b0\u56fe\uff0c\u65b0\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u5e94\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u6811\u8fb9\uff08\u5728\u4e0a\u56fe\u4e2d\u7528\u84dd\u8272\u70b9\u8868\u793a\uff09\u3002\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u5c06\u8fd9\u6761\u975e\u6811\u8fb9\u5bf9\u5e94\u7684\u6811\u4e0a\u7b80\u5355\u8def\u5f84\u4e2d\u7684\u6240\u6709\u8fb9\u5728\u65b0\u56fe\u4e2d\u5bf9\u5e94\u7684\u84dd\u70b9\u8fde\u6210\u4e00\u4e2a\u8054\u901a\u5757\uff08\u8fd9\u5728\u4e0a\u56fe\u4e2d\u4e5f\u7528\u84dd\u8272\u7684\u8fb9\u4f53\u73b0\u51fa\u6765\u4e86\uff09\u3002 \u8fd9\u6837\uff0c\u4e00\u4e2a\u70b9\u4e0d\u662f\u6865\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u8fb9\u5728\u65b0\u56fe\u4e2d\u5bf9\u5e94\u7684\u84dd\u70b9\u90fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u5757\u3002\u4e24\u4e2a\u70b9\u70b9\u53cc\u8054\u901a\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5728\u539f\u56fe\u7684\u6811\u4e0a\u8def\u5f84\u4e2d\u7684\u6240\u6709\u8fb9\u5728\u65b0\u56fe\u4e2d\u5bf9\u5e94\u7684\u84dd\u70b9\u90fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u5757\u3002 \u84dd\u70b9\u95f4\u7684\u8fde\u901a\u5173\u7cfb\u53ef\u4ee5\u7528\u4e0e\u6c42\u8fb9\u53cc\u8054\u901a\u65f6\u7528\u5230\u7684\u5dee\u5206\u7c7b\u4f3c\u7684\u65b9\u6cd5\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n+m) O(n+m) \u3002","title":"\u53cc\u8fde\u901a\u5206\u91cf"},{"location":"graph/bcc/#_1","text":"\u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\u3002","title":"\u7b80\u4ecb"},{"location":"graph/bcc/#_2","text":"\u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u5c06\u4e00\u6761\u8fb9\u5220\u53bb\u540e\uff0c\u539f\u56fe\u53d8\u6210\u4e0d\u8054\u901a\u7684\u4e24\u90e8\u5206\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u6761\u8fb9\u662f \u6865 \u3002 \u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u5c06\u4e00\u4e2a\u70b9\u5220\u53bb\u540e\uff0c\u539f\u56fe\u53d8\u6210\u4e0d\u8054\u901a\u7684\u4e24\u90e8\u5206\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a\u70b9\u662f \u5272\u70b9 \u3002 \u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u6761\u8fb9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u6761\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8054\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u8fb9\u53cc\u8054\u901a \u3002 \u5728\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u4e2a\u70b9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u4e2a\uff0c\u4e14\u4e0d\u80fd\u5220 u u \u548c v v \u81ea\u5df1\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8054\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u70b9\u53cc\u8054\u901a \u3002 \u8fb9\u53cc\u8054\u901a\u5177\u6709\u4f20\u9012\u6027\uff0c\u5373\uff0c\u82e5 x,y x,y \u8fb9\u53cc\u8054\u901a\uff0c y,z y,z \u8fb9\u53cc\u8054\u901a\uff0c\u5219 x,z x,z \u8fb9\u53cc\u8054\u901a\u3002 \u70b9\u53cc\u8054\u901a \u4e0d \u5177\u6709\u4f20\u9012\u6027\uff0c\u53cd\u4f8b\u5982\u4e0b\u56fe\uff0c A,B A,B \u70b9\u53cc\u8054\u901a\uff0c B,C B,C \u70b9\u53cc\u8054\u901a\uff0c\u800c A,C A,C \u4e0d \u70b9\u53cc\u8054\u901a\u3002","title":"\u5b9a\u4e49"},{"location":"graph/bcc/#dfs","text":"\u5bf9\u4e8e\u4e00\u5f20\u8054\u901a\u7684\u65e0\u5411\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u70b9\u5f00\u59cb DFS\uff0c\u5f97\u5230\u539f\u56fe\u7684\u4e00\u68f5\u751f\u6210\u6811\uff08\u4ee5\u5f00\u59cb DFS \u7684\u90a3\u4e2a\u70b9\u4e3a\u6839\uff09\uff0c\u8fd9\u68f5\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u79f0\u4f5c \u6811\u8fb9 \uff0c\u4e0d\u5728\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u79f0\u4f5c \u975e\u6811\u8fb9 \u3002 \u7531\u4e8e DFS \u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u975e\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u5728\u751f\u6210\u6811\u4e0a\u90fd\u6ee1\u8db3\u5176\u4e2d\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\u3002 DFS \u7684\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 void DFS ( int p ) { visited [ p ] = true ; for ( int to : edge [ p ]) if ( ! visited [ to ]) DFS ( to ); }","title":"DFS"},{"location":"graph/bcc/#dfs_1","text":"\u9996\u5148\uff0c\u5bf9\u539f\u56fe\u8fdb\u884c DFS\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9ed1\u8272\u4e0e\u7eff\u8272\u8fb9\u4e3a\u6811\u8fb9\uff0c\u7ea2\u8272\u8fb9\u4e3a\u975e\u6811\u8fb9\u3002\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u90fd\u5bf9\u5e94\u4e86\u6811\u4e0a\u7684\u4e00\u6761\u7b80\u5355\u8def\u5f84\uff0c\u6211\u4eec\u8bf4\u8fd9\u6761\u975e\u6811\u8fb9 \u8986\u76d6 \u4e86\u8fd9\u6761\u6811\u4e0a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u3002\u7eff\u8272\u7684\u6811\u8fb9 \u81f3\u5c11 \u88ab\u4e00\u6761\u975e\u6811\u8fb9\u8986\u76d6\uff0c\u9ed1\u8272\u7684\u6811\u8fb9\u4e0d\u88ab \u4efb\u4f55 \u975e\u6811\u8fb9\u8986\u76d6\u3002 \u6211\u4eec\u5982\u4f55\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u4e0d\u662f\u6865\u5462\uff1f\u663e\u7136\uff0c\u975e\u6811\u8fb9\u548c\u7eff\u8272\u7684\u6811\u8fb9\u4e00\u5b9a\u4e0d\u662f\u6865\uff0c\u9ed1\u8272\u7684\u6811\u8fb9\u4e00\u5b9a\u662f\u6865\u3002 \u5982\u4f55\u7528\u7b97\u6cd5\u53bb\u5b9e\u73b0\u4ee5\u4e0a\u8fc7\u7a0b\u5462\uff1f\u9996\u5148\u6709\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u90fd\u9010\u4e2a\u5730\u5c06\u5b83\u8986\u76d6\u7684\u6bcf\u4e00\u6761\u6811\u8fb9\u7f6e\u6210\u7eff\u8272\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002 \u600e\u4e48\u4f18\u5316\u5462\uff1f\u53ef\u4ee5\u7528\u5dee\u5206\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u5728\u5176\u6811\u4e0a\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u5904\u6253\u4e0a -1 \u6807\u8bb0\uff0c\u5728\u5176\u6811\u4e0a\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u5904\u6253\u4e0a +1 \u6807\u8bb0\u3002\u7136\u540e O(n) O(n) \u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u5185\u90e8\u7684\u6807\u8bb0\u4e4b\u548c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9 u u \uff0c\u5176\u5b50\u6811\u5185\u90e8\u7684\u6807\u8bb0\u4e4b\u548c\u7b49\u4e8e\u8986\u76d6\u4e86 u u \u548c u u \u7684\u7236\u4eb2\u4e4b\u95f4\u7684\u6811\u8fb9\u7684\u975e\u6811\u8fb9\u6570\u91cf\u3002\u82e5\u8fd9\u4e2a\u503c\u975e 0 0 \uff0c\u5219 u u \u548c u u \u7684\u7236\u4eb2\u4e4b\u95f4\u7684\u6811\u8fb9\u4e0d\u662f\u6865\uff0c\u5426\u5219\u662f\u6865\u3002 \u7528\u4ee5\u4e0a\u7684\u65b9\u6cd5 O(n+m) O(n+m) \u6c42\u51fa\u6bcf\u6761\u8fb9\u5206\u522b\u662f\u5426\u662f\u6865\u540e\uff0c\u4e24\u4e2a\u70b9\u662f\u8fb9\u53cc\u8054\u901a\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u7684\u6811\u4e0a\u8def\u5f84\u4e2d \u4e0d \u5305\u542b\u6865\u3002","title":"DFS \u627e\u6865\u5e76\u5224\u65ad\u8fb9\u53cc\u8054\u901a"},{"location":"graph/bcc/#dfs_2","text":"\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9ed1\u8272\u8fb9\u4e3a\u6811\u8fb9\uff0c\u7ea2\u8272\u8fb9\u4e3a\u975e\u6811\u8fb9\u3002\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u90fd\u5bf9\u5e94\u4e86\u6811\u4e0a\u7684\u4e00\u6761\u7b80\u5355\u8def\u5f84\u3002 \u8003\u8651\u4e00\u5f20\u65b0\u56fe\uff0c\u65b0\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u5e94\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u6811\u8fb9\uff08\u5728\u4e0a\u56fe\u4e2d\u7528\u84dd\u8272\u70b9\u8868\u793a\uff09\u3002\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u5c06\u8fd9\u6761\u975e\u6811\u8fb9\u5bf9\u5e94\u7684\u6811\u4e0a\u7b80\u5355\u8def\u5f84\u4e2d\u7684\u6240\u6709\u8fb9\u5728\u65b0\u56fe\u4e2d\u5bf9\u5e94\u7684\u84dd\u70b9\u8fde\u6210\u4e00\u4e2a\u8054\u901a\u5757\uff08\u8fd9\u5728\u4e0a\u56fe\u4e2d\u4e5f\u7528\u84dd\u8272\u7684\u8fb9\u4f53\u73b0\u51fa\u6765\u4e86\uff09\u3002 \u8fd9\u6837\uff0c\u4e00\u4e2a\u70b9\u4e0d\u662f\u6865\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u8fb9\u5728\u65b0\u56fe\u4e2d\u5bf9\u5e94\u7684\u84dd\u70b9\u90fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u5757\u3002\u4e24\u4e2a\u70b9\u70b9\u53cc\u8054\u901a\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5728\u539f\u56fe\u7684\u6811\u4e0a\u8def\u5f84\u4e2d\u7684\u6240\u6709\u8fb9\u5728\u65b0\u56fe\u4e2d\u5bf9\u5e94\u7684\u84dd\u70b9\u90fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u5757\u3002 \u84dd\u70b9\u95f4\u7684\u8fde\u901a\u5173\u7cfb\u53ef\u4ee5\u7528\u4e0e\u6c42\u8fb9\u53cc\u8054\u901a\u65f6\u7528\u5230\u7684\u5dee\u5206\u7c7b\u4f3c\u7684\u65b9\u6cd5\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n+m) O(n+m) \u3002","title":"DFS \u627e\u5272\u70b9\u5e76\u5224\u65ad\u70b9\u53cc\u8054\u901a"},{"location":"graph/bi-graph/","text":"\u5b9a\u4e49 \u00b6 \u4e8c\u5206\u56fe\u7684\u82f1\u6587\u540d\u53eb Bipartite graph\u3002 \u4e8c\u5206\u56fe\u662f\u4ec0\u4e48\uff1f\u8282\u70b9\u7531\u4e24\u4e2a\u96c6\u5408\u7ec4\u6210\uff0c\u4e14\u4e24\u4e2a\u96c6\u5408\u5185\u90e8\u6ca1\u6709\u8fb9\u7684\u56fe\u3002 \u6362\u8a00\u4e4b\uff0c\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u5c06\u8282\u70b9\u5212\u5206\u6210\u6ee1\u8db3\u4ee5\u4e0a\u6027\u8d28\u7684\u4e24\u4e2a\u96c6\u5408\u3002 \uff08\u56fe\u6e90 \u82f1\u6587\u7ef4\u57fa \uff09 \u6027\u8d28 \u00b6 \u5982\u679c\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\u5206\u522b\u67d3\u6210\u9ed1\u8272\u548c\u767d\u8272\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e8c\u5206\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u4e00\u5b9a\u662f\u8fde\u63a5\u4e00\u4e2a\u9ed1\u8272\u70b9\u548c\u4e00\u4e2a\u767d\u8272\u70b9\u3002 \u4e8c\u5206\u56fe\u4e0d\u5b58\u5728\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u73af \u56e0\u4e3a\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u4ece\u4e00\u4e2a\u96c6\u5408\u8d70\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\uff0c\u53ea\u6709\u8d70\u5076\u6570\u6b21\u624d\u53ef\u80fd\u56de\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u3002 \u5224\u5b9a \u00b6 \u5982\u4f55\u5224\u5b9a\u4e00\u4e2a\u56fe\u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u5462\uff1f \u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u662f\u5426\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u9876\u70b9\u5206\u6210\u4e24\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u3002 \u663e\u7136\uff0c\u76f4\u63a5\u679a\u4e3e\u7b54\u6848\u96c6\u5408\u7684\u8bdd\u5b9e\u5728\u662f\u592a\u6162\u4e86\uff0c\u6211\u4eec\u9700\u8981\u66f4\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u8003\u8651\u4e0a\u6587\u63d0\u5230\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 DFS \u6216\u8005 BFS \u6765\u904d\u5386\u8fd9\u5f20\u56fe\u3002\u5982\u679c\u53d1\u73b0\u4e86\u5947\u73af\uff0c\u90a3\u4e48\u5c31\u4e0d\u662f\u4e8c\u5206\u56fe\uff0c\u5426\u5219\u662f\u3002 \u5e94\u7528 \u00b6 \u4e8c\u5206\u56fe\u5339\u914d \u00b6 \u6700\u5927\u5339\u914d \u00b6 \u6700\u5927\u6743\u5339\u914d \u00b6 \u4e00\u822c\u56fe\u5339\u914d \u00b6","title":"\u4e8c\u5206\u56fe"},{"location":"graph/bi-graph/#_1","text":"\u4e8c\u5206\u56fe\u7684\u82f1\u6587\u540d\u53eb Bipartite graph\u3002 \u4e8c\u5206\u56fe\u662f\u4ec0\u4e48\uff1f\u8282\u70b9\u7531\u4e24\u4e2a\u96c6\u5408\u7ec4\u6210\uff0c\u4e14\u4e24\u4e2a\u96c6\u5408\u5185\u90e8\u6ca1\u6709\u8fb9\u7684\u56fe\u3002 \u6362\u8a00\u4e4b\uff0c\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u5c06\u8282\u70b9\u5212\u5206\u6210\u6ee1\u8db3\u4ee5\u4e0a\u6027\u8d28\u7684\u4e24\u4e2a\u96c6\u5408\u3002 \uff08\u56fe\u6e90 \u82f1\u6587\u7ef4\u57fa \uff09","title":"\u5b9a\u4e49"},{"location":"graph/bi-graph/#_2","text":"\u5982\u679c\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\u5206\u522b\u67d3\u6210\u9ed1\u8272\u548c\u767d\u8272\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e8c\u5206\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u4e00\u5b9a\u662f\u8fde\u63a5\u4e00\u4e2a\u9ed1\u8272\u70b9\u548c\u4e00\u4e2a\u767d\u8272\u70b9\u3002 \u4e8c\u5206\u56fe\u4e0d\u5b58\u5728\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u73af \u56e0\u4e3a\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u4ece\u4e00\u4e2a\u96c6\u5408\u8d70\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\uff0c\u53ea\u6709\u8d70\u5076\u6570\u6b21\u624d\u53ef\u80fd\u56de\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u3002","title":"\u6027\u8d28"},{"location":"graph/bi-graph/#_3","text":"\u5982\u4f55\u5224\u5b9a\u4e00\u4e2a\u56fe\u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u5462\uff1f \u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u662f\u5426\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u9876\u70b9\u5206\u6210\u4e24\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u3002 \u663e\u7136\uff0c\u76f4\u63a5\u679a\u4e3e\u7b54\u6848\u96c6\u5408\u7684\u8bdd\u5b9e\u5728\u662f\u592a\u6162\u4e86\uff0c\u6211\u4eec\u9700\u8981\u66f4\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u8003\u8651\u4e0a\u6587\u63d0\u5230\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 DFS \u6216\u8005 BFS \u6765\u904d\u5386\u8fd9\u5f20\u56fe\u3002\u5982\u679c\u53d1\u73b0\u4e86\u5947\u73af\uff0c\u90a3\u4e48\u5c31\u4e0d\u662f\u4e8c\u5206\u56fe\uff0c\u5426\u5219\u662f\u3002","title":"\u5224\u5b9a"},{"location":"graph/bi-graph/#_4","text":"","title":"\u5e94\u7528"},{"location":"graph/bi-graph/#_5","text":"","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"graph/bi-graph/#_6","text":"","title":"\u6700\u5927\u5339\u914d"},{"location":"graph/bi-graph/#_7","text":"","title":"\u6700\u5927\u6743\u5339\u914d"},{"location":"graph/bi-graph/#_8","text":"","title":"\u4e00\u822c\u56fe\u5339\u914d"},{"location":"graph/bridge/","text":"\u76f8\u5173\u9605\u8bfb\uff1a \u53cc\u8054\u901a\u5206\u91cf \u5272\u70b9 \u00b6 \u5982\u679c\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u5982\u679c\u628a\u4e00\u4e2a\u70b9\u5220\u9664\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e0d\u518d\u8054\u901a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u5272\u70b9\uff08\u5272\u9876\uff09\uff0c\u5f53\u7136\u662f\u5728\u65e0\u5411\u56fe\u3002 \u5982\u4f55\u5b9e\u73b0\uff1f \u00b6 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5220\u9664\u6bcf\u4e2a\u70b9\uff0c\u5e76\u4e14\u5224\u65ad\u8fd9\u4e2a\u56fe\u7684\u8054\u901a\u6027\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u4f1a\u7279\u522b\u7684\u9ad8\u3002\u6240\u4ee5\u8981\u4ecb\u7ecd\u4e00\u4e2a\u5e38\u7528\u7684\u7b97\u6cd5\uff1a Tarjan Tarjan \u3002 \u9996\u5148\uff0c\u6211\u4eec\u4e0a\u4e00\u4e2a\u56fe\uff1a \u5f88\u5bb9\u6613\u7684\u770b\u51fa\u5272\u70b9\u662f \uff12\uff0c\u800c\u4e14\u8fd9\u4e2a\u56fe\u4ec5\u6709\u8fd9\u4e00\u4e2a\u5272\u70b9\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6309\u7167 DFS DFS \u5e8f\u7ed9\u4ed6\u6253\u4e0a\u65f6\u95f4\u6233\uff08\u8bbf\u95ee\u7684\u987a\u5e8f\uff09\u3002 \u8fd9\u4e9b\u4fe1\u606f\u88ab\u6211\u4eec\u4fdd\u5b58\u5728\u4e00\u4e2a\u53eb\u505a num \u7684\u6570\u7ec4\u4e2d\u3002 \u8fd8\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4 low \uff0c\u7528\u5b83\u6765\u5b58\u50a8\u4e0d\u7ecf\u8fc7\u5176\u7236\u4eb2\uff08\u4f60\u6709\u591a\u4e2a\u90a3\u4e48\u5c31\u770b\u4f60\u904d\u5386\u5230\u4e86\u54ea\u4e2a\uff09\u80fd\u5230\u8fbe\u7684\u65f6\u95f4\u6233\u3002 \u4f8b\u5982 \uff12 \u7684\u8bdd\u662f \uff11\uff0c \uff15 \u548c \uff16 \u662f \uff13\u3002 \u7136\u540e\u6211\u4eec\u5f00\u59cb DFS DFS \uff0c\u6211\u4eec\u5224\u65ad\u67d0\u4e2a\u70b9\u662f\u5426\u662f\u5272\u70b9\u7684\u6839\u636e\u662f\uff1a\u5bf9\u4e8e\u67d0\u4e2a\u9876\u70b9 u u \uff0c\u5982\u679c\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u9876\u70b9 v v \uff08 u u \u7684\u513f\u5b50\uff09\uff0c\u4f7f\u5f97 low_v>=num_u low_v>=num_u \uff0c\u5373\u4e0d\u80fd\u56de\u5230\u7956\u5148\uff0c\u90a3\u4e48 u u \u70b9\u4e3a\u5272\u70b9\u3002 \u53e6\u5916\uff0c\u5982\u679c\u641c\u5230\u4e86\u81ea\u5df1\uff08\u5728\u73af\u4e2d\uff09\uff0c\u5982\u679c\u4ed6\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u513f\u5b50\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u5272\u70b9\u4e86\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u628a\u5b83\u5220\u6389\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u7684\u5f71\u54cd\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u56fe\uff0c\u6b64\u5904\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u4ece\u6811\u4e0a\u6765\u8bb2\u5b83\u6709 \uff12 \u4e2a\u513f\u5b50\uff1a \u6211\u4eec\u5728\u8bbf\u95ee \uff11 \u7684\u513f\u5b50\u65f6\u5019\uff0c\u5047\u8bbe\u5148 DFS DFS \u5230\u4e86 \uff12\uff0c\u7136\u540e\u6807\u8bb0\u7528\u8fc7\uff0c\u7136\u540e\u9012\u5f52\u5f80\u4e0b\uff0c\u6765\u5230\u4e86 \uff14\uff0c \uff14 \u53c8\u6765\u5230\u4e86 \uff13\uff0c\u5f53\u9012\u5f52\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u73b0 \uff13 \u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u6240\u4ee5\u4e0d\u662f\u5272\u70b9\u3002 \u66f4\u65b0 low \u7684\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 \u5982\u679c v \u662f u \u7684\u513f\u5b50 low [ u ] = min ( low [ u ], low [ v ]); \u5426\u5219 low [ u ] = min ( low [ u ], num [ v ]); \u4f8b\u9898 \u00b6 \u6d1b\u8c37 P3388 \u3010\u6a21\u677f\u3011\u5272\u70b9\uff08\u5272\u9876\uff09 Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /* \u6d1b\u8c37 P3388 \u3010\u6a21\u677f\u3011\u5272\u70b9\uff08\u5272\u9876\uff09 */ #include <bits/stdc++.h> using namespace std ; int n , m ; // n\uff1a\u70b9\u6570 m\uff1a\u8fb9\u6570 int num [ 100001 ], low [ 100001 ], inde , res ; // num\uff1a\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u65f6\u95f4\u6233 // low\uff1a\u80fd\u4e0d\u7ecf\u8fc7\u7236\u4eb2\u5230\u8fbe\u6700\u5c0f\u7684\u7f16\u53f7\uff0cinde\uff1a\u65f6\u95f4\u6233\uff0cres\uff1a\u7b54\u6848\u6570\u91cf bool vis [ 100001 ], flag [ 100001 ]; // flag: \u7b54\u6848 vis\uff1a\u6807\u8bb0\u662f\u5426\u91cd\u590d vector < int > edge [ 100001 ]; // \u5b58\u56fe\u7528\u7684 void Tarjan ( int u , int father ) // u \u5f53\u524d\u70b9\u7684\u7f16\u53f7\uff0cfather \u81ea\u5df1\u7238\u7238\u7684\u7f16\u53f7 { vis [ u ] = true ; // \u6807\u8bb0 low [ u ] = num [ u ] = ++ inde ; // \u6253\u4e0a\u65f6\u95f4\u6233 int child = 0 ; // \u6bcf\u4e00\u4e2a\u70b9\u513f\u5b50\u6570\u91cf for ( auto v : edge [ u ]) // \u8bbf\u95ee\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45 \uff08C++11\uff09 { if ( ! vis [ v ]) { child ++ ; // \u591a\u4e86\u4e00\u4e2a\u513f\u5b50 Tarjan ( v , u ); // \u7ee7\u7eed low [ u ] = min ( low [ u ], low [ v ]); // \u66f4\u65b0\u80fd\u5230\u7684\u6700\u5c0f\u8282\u70b9\u7f16\u53f7 if ( father != u && low [ v ] >= num [ u ] && ! flag [ u ]) // \u4e3b\u8981\u4ee3\u7801 // \u5982\u679c\u4e0d\u662f\u81ea\u5df1\uff0c\u4e14\u4e0d\u901a\u8fc7\u7236\u4eb2\u8fd4\u56de\u7684\u6700\u5c0f\u70b9\u7b26\u5408\u5272\u70b9\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7 // \u8981\u6c42\u5373\u4e3a\uff1a\u5220\u4e86\u7236\u4eb2\u8fde\u4e0d\u4e0a\u53bb\u4e86\uff0c\u5373\u4e3a\u6700\u591a\u8fde\u5230\u7236\u4eb2 { flag [ u ] = true ; res ++ ; // \u8bb0\u5f55\u7b54\u6848 } } else if ( v != father ) low [ u ] = min ( low [ u ], num [ v ]); // \u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u81ea\u5df1\uff0c\u66f4\u65b0\u80fd\u5230\u7684\u6700\u5c0f\u8282\u70b9\u7f16\u53f7 } if ( father == u && child >= 2 && ! flag [ u ]) // \u4e3b\u8981\u4ee3\u7801\uff0c\u81ea\u5df1\u7684\u8bdd\u9700\u8981 2 \u4e2a\u513f\u5b50\u624d\u53ef\u4ee5 { flag [ u ] = true ; res ++ ; // \u8bb0\u5f55\u7b54\u6848 } } int main () { cin >> n >> m ; // \u8bfb\u5165\u6570\u636e for ( int i = 1 ; i <= m ; i ++ ) // \u6ce8\u610f\u70b9\u662f\u4ece 1 \u5f00\u59cb\u7684 { int x , y ; cin >> x >> y ; edge [ x ]. push_back ( y ); edge [ y ]. push_back ( x ); } // \u4f7f\u7528 vector \u5b58\u56fe for ( int i = 1 ; i <= n ; i ++ ) // \u56e0\u4e3a Tarjan \u56fe\u4e0d\u4e00\u5b9a\u8054\u901a if ( ! vis [ i ]) { inde = 0 ; // \u65f6\u95f4\u6233\u521d\u59cb\u4e3a 0 Tarjan ( i , i ); // \u4ece\u7b2c i \u4e2a\u70b9\u5f00\u59cb\uff0c\u7236\u4eb2\u4e3a\u81ea\u5df1 } cout << res << endl ; for ( int i = 1 ; i <= n ; i ++ ) if ( flag [ i ]) cout << i << \" \" ; // \u8f93\u51fa\u7ed3\u679c for ( int i = 1 ; i <= n ; i ++ ) cout << low [ i ] << endl ; return 0 ; } \u5272\u8fb9 \u00b6 \u548c\u5272\u70b9\u5dee\u4e0d\u591a\uff0c\u8fd8\u53eb\u505a\u5272\u6865\u3002 \u65e0\u5411\u8054\u901a\u56fe\u4e2d\uff0c\u53bb\u6389\u4e00\u6761\u8fb9\uff0c\u56fe\u4e2d\u7684\u8fde\u901a\u5206\u91cf\u6570\u589e\u52a0\uff0c\u5219\u8fd9\u6761\u8fb9\uff0c\u79f0\u4e3a\u6865\u6216\u8005\u5272\u8fb9\uff0c\u5f53\u7136\u4e5f\u662f\u5728\u65e0\u5411\u56fe\u3002 \u5b9e\u73b0 \u00b6 \u548c\u5272\u70b9\u5dee\u4e0d\u591a\uff0c\u53ea\u8981\u6539\u4e00\u5904\uff1a low_v>num_u low_v>num_u \u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u8003\u8651\u6839\u8282\u70b9\u7684\u95ee\u9898\u3002 \u5272\u8fb9\u662f\u548c\u662f\u4e0d\u662f\u6839\u8282\u70b9\u6ca1\u5173\u7cfb\u7684\uff0c\u539f\u6765\u6211\u4eec\u6c42\u5272\u70b9\u7684\u65f6\u5019\u662f\u6307\u70b9 v v \u662f\u4e0d\u53ef\u80fd\u4e0d\u7ecf\u8fc7\u7236\u8282\u70b9 u u \u4e3a\u56de\u5230\u7956\u5148\u8282\u70b9\uff08\u5305\u62ec\u7236\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u9876\u70b9 u u \u662f\u5272\u70b9\u3002\u5982\u679c low_v==num_u low_v==num_u \u8868\u793a\u8fd8\u53ef\u4ee5\u56de\u5230\u7236\u8282\u70b9\uff0c\u5982\u679c\u9876\u70b9 v v \u4e0d\u80fd\u56de\u5230\u7956\u5148\u4e5f\u6ca1\u6709\u53e6\u5916\u4e00\u6761\u56de\u5230\u7236\u4eb2\u7684\u8def\uff0c\u90a3\u4e48 u-v u-v \u8fd9\u6761\u8fb9\u5c31\u662f\u5272\u8fb9 Tarjan Tarjan \u7b97\u6cd5\u8fd8\u6709\u8bb8\u591a\u7528\u9014\uff0c\u5e38\u7528\u7684\u4f8b\u5982\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7f29\u70b9\uff0c\u8fd8\u6709\u6c42 2-SAT 2-SAT \u7684\u7528\u9014\u7b49\u3002","title":"\u5272\u70b9\u548c\u6865"},{"location":"graph/bridge/#_1","text":"\u5982\u679c\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u5982\u679c\u628a\u4e00\u4e2a\u70b9\u5220\u9664\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e0d\u518d\u8054\u901a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u5272\u70b9\uff08\u5272\u9876\uff09\uff0c\u5f53\u7136\u662f\u5728\u65e0\u5411\u56fe\u3002","title":"\u5272\u70b9"},{"location":"graph/bridge/#_2","text":"\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5220\u9664\u6bcf\u4e2a\u70b9\uff0c\u5e76\u4e14\u5224\u65ad\u8fd9\u4e2a\u56fe\u7684\u8054\u901a\u6027\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u4f1a\u7279\u522b\u7684\u9ad8\u3002\u6240\u4ee5\u8981\u4ecb\u7ecd\u4e00\u4e2a\u5e38\u7528\u7684\u7b97\u6cd5\uff1a Tarjan Tarjan \u3002 \u9996\u5148\uff0c\u6211\u4eec\u4e0a\u4e00\u4e2a\u56fe\uff1a \u5f88\u5bb9\u6613\u7684\u770b\u51fa\u5272\u70b9\u662f \uff12\uff0c\u800c\u4e14\u8fd9\u4e2a\u56fe\u4ec5\u6709\u8fd9\u4e00\u4e2a\u5272\u70b9\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6309\u7167 DFS DFS \u5e8f\u7ed9\u4ed6\u6253\u4e0a\u65f6\u95f4\u6233\uff08\u8bbf\u95ee\u7684\u987a\u5e8f\uff09\u3002 \u8fd9\u4e9b\u4fe1\u606f\u88ab\u6211\u4eec\u4fdd\u5b58\u5728\u4e00\u4e2a\u53eb\u505a num \u7684\u6570\u7ec4\u4e2d\u3002 \u8fd8\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4 low \uff0c\u7528\u5b83\u6765\u5b58\u50a8\u4e0d\u7ecf\u8fc7\u5176\u7236\u4eb2\uff08\u4f60\u6709\u591a\u4e2a\u90a3\u4e48\u5c31\u770b\u4f60\u904d\u5386\u5230\u4e86\u54ea\u4e2a\uff09\u80fd\u5230\u8fbe\u7684\u65f6\u95f4\u6233\u3002 \u4f8b\u5982 \uff12 \u7684\u8bdd\u662f \uff11\uff0c \uff15 \u548c \uff16 \u662f \uff13\u3002 \u7136\u540e\u6211\u4eec\u5f00\u59cb DFS DFS \uff0c\u6211\u4eec\u5224\u65ad\u67d0\u4e2a\u70b9\u662f\u5426\u662f\u5272\u70b9\u7684\u6839\u636e\u662f\uff1a\u5bf9\u4e8e\u67d0\u4e2a\u9876\u70b9 u u \uff0c\u5982\u679c\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u9876\u70b9 v v \uff08 u u \u7684\u513f\u5b50\uff09\uff0c\u4f7f\u5f97 low_v>=num_u low_v>=num_u \uff0c\u5373\u4e0d\u80fd\u56de\u5230\u7956\u5148\uff0c\u90a3\u4e48 u u \u70b9\u4e3a\u5272\u70b9\u3002 \u53e6\u5916\uff0c\u5982\u679c\u641c\u5230\u4e86\u81ea\u5df1\uff08\u5728\u73af\u4e2d\uff09\uff0c\u5982\u679c\u4ed6\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u513f\u5b50\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u5272\u70b9\u4e86\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u628a\u5b83\u5220\u6389\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u7684\u5f71\u54cd\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u56fe\uff0c\u6b64\u5904\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u4ece\u6811\u4e0a\u6765\u8bb2\u5b83\u6709 \uff12 \u4e2a\u513f\u5b50\uff1a \u6211\u4eec\u5728\u8bbf\u95ee \uff11 \u7684\u513f\u5b50\u65f6\u5019\uff0c\u5047\u8bbe\u5148 DFS DFS \u5230\u4e86 \uff12\uff0c\u7136\u540e\u6807\u8bb0\u7528\u8fc7\uff0c\u7136\u540e\u9012\u5f52\u5f80\u4e0b\uff0c\u6765\u5230\u4e86 \uff14\uff0c \uff14 \u53c8\u6765\u5230\u4e86 \uff13\uff0c\u5f53\u9012\u5f52\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u73b0 \uff13 \u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u6240\u4ee5\u4e0d\u662f\u5272\u70b9\u3002 \u66f4\u65b0 low \u7684\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 \u5982\u679c v \u662f u \u7684\u513f\u5b50 low [ u ] = min ( low [ u ], low [ v ]); \u5426\u5219 low [ u ] = min ( low [ u ], num [ v ]);","title":"\u5982\u4f55\u5b9e\u73b0\uff1f"},{"location":"graph/bridge/#_3","text":"\u6d1b\u8c37 P3388 \u3010\u6a21\u677f\u3011\u5272\u70b9\uff08\u5272\u9876\uff09","title":"\u4f8b\u9898"},{"location":"graph/bridge/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /* \u6d1b\u8c37 P3388 \u3010\u6a21\u677f\u3011\u5272\u70b9\uff08\u5272\u9876\uff09 */ #include <bits/stdc++.h> using namespace std ; int n , m ; // n\uff1a\u70b9\u6570 m\uff1a\u8fb9\u6570 int num [ 100001 ], low [ 100001 ], inde , res ; // num\uff1a\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u65f6\u95f4\u6233 // low\uff1a\u80fd\u4e0d\u7ecf\u8fc7\u7236\u4eb2\u5230\u8fbe\u6700\u5c0f\u7684\u7f16\u53f7\uff0cinde\uff1a\u65f6\u95f4\u6233\uff0cres\uff1a\u7b54\u6848\u6570\u91cf bool vis [ 100001 ], flag [ 100001 ]; // flag: \u7b54\u6848 vis\uff1a\u6807\u8bb0\u662f\u5426\u91cd\u590d vector < int > edge [ 100001 ]; // \u5b58\u56fe\u7528\u7684 void Tarjan ( int u , int father ) // u \u5f53\u524d\u70b9\u7684\u7f16\u53f7\uff0cfather \u81ea\u5df1\u7238\u7238\u7684\u7f16\u53f7 { vis [ u ] = true ; // \u6807\u8bb0 low [ u ] = num [ u ] = ++ inde ; // \u6253\u4e0a\u65f6\u95f4\u6233 int child = 0 ; // \u6bcf\u4e00\u4e2a\u70b9\u513f\u5b50\u6570\u91cf for ( auto v : edge [ u ]) // \u8bbf\u95ee\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45 \uff08C++11\uff09 { if ( ! vis [ v ]) { child ++ ; // \u591a\u4e86\u4e00\u4e2a\u513f\u5b50 Tarjan ( v , u ); // \u7ee7\u7eed low [ u ] = min ( low [ u ], low [ v ]); // \u66f4\u65b0\u80fd\u5230\u7684\u6700\u5c0f\u8282\u70b9\u7f16\u53f7 if ( father != u && low [ v ] >= num [ u ] && ! flag [ u ]) // \u4e3b\u8981\u4ee3\u7801 // \u5982\u679c\u4e0d\u662f\u81ea\u5df1\uff0c\u4e14\u4e0d\u901a\u8fc7\u7236\u4eb2\u8fd4\u56de\u7684\u6700\u5c0f\u70b9\u7b26\u5408\u5272\u70b9\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7 // \u8981\u6c42\u5373\u4e3a\uff1a\u5220\u4e86\u7236\u4eb2\u8fde\u4e0d\u4e0a\u53bb\u4e86\uff0c\u5373\u4e3a\u6700\u591a\u8fde\u5230\u7236\u4eb2 { flag [ u ] = true ; res ++ ; // \u8bb0\u5f55\u7b54\u6848 } } else if ( v != father ) low [ u ] = min ( low [ u ], num [ v ]); // \u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u81ea\u5df1\uff0c\u66f4\u65b0\u80fd\u5230\u7684\u6700\u5c0f\u8282\u70b9\u7f16\u53f7 } if ( father == u && child >= 2 && ! flag [ u ]) // \u4e3b\u8981\u4ee3\u7801\uff0c\u81ea\u5df1\u7684\u8bdd\u9700\u8981 2 \u4e2a\u513f\u5b50\u624d\u53ef\u4ee5 { flag [ u ] = true ; res ++ ; // \u8bb0\u5f55\u7b54\u6848 } } int main () { cin >> n >> m ; // \u8bfb\u5165\u6570\u636e for ( int i = 1 ; i <= m ; i ++ ) // \u6ce8\u610f\u70b9\u662f\u4ece 1 \u5f00\u59cb\u7684 { int x , y ; cin >> x >> y ; edge [ x ]. push_back ( y ); edge [ y ]. push_back ( x ); } // \u4f7f\u7528 vector \u5b58\u56fe for ( int i = 1 ; i <= n ; i ++ ) // \u56e0\u4e3a Tarjan \u56fe\u4e0d\u4e00\u5b9a\u8054\u901a if ( ! vis [ i ]) { inde = 0 ; // \u65f6\u95f4\u6233\u521d\u59cb\u4e3a 0 Tarjan ( i , i ); // \u4ece\u7b2c i \u4e2a\u70b9\u5f00\u59cb\uff0c\u7236\u4eb2\u4e3a\u81ea\u5df1 } cout << res << endl ; for ( int i = 1 ; i <= n ; i ++ ) if ( flag [ i ]) cout << i << \" \" ; // \u8f93\u51fa\u7ed3\u679c for ( int i = 1 ; i <= n ; i ++ ) cout << low [ i ] << endl ; return 0 ; }","title":"Code"},{"location":"graph/bridge/#_4","text":"\u548c\u5272\u70b9\u5dee\u4e0d\u591a\uff0c\u8fd8\u53eb\u505a\u5272\u6865\u3002 \u65e0\u5411\u8054\u901a\u56fe\u4e2d\uff0c\u53bb\u6389\u4e00\u6761\u8fb9\uff0c\u56fe\u4e2d\u7684\u8fde\u901a\u5206\u91cf\u6570\u589e\u52a0\uff0c\u5219\u8fd9\u6761\u8fb9\uff0c\u79f0\u4e3a\u6865\u6216\u8005\u5272\u8fb9\uff0c\u5f53\u7136\u4e5f\u662f\u5728\u65e0\u5411\u56fe\u3002","title":"\u5272\u8fb9"},{"location":"graph/bridge/#_5","text":"\u548c\u5272\u70b9\u5dee\u4e0d\u591a\uff0c\u53ea\u8981\u6539\u4e00\u5904\uff1a low_v>num_u low_v>num_u \u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u8003\u8651\u6839\u8282\u70b9\u7684\u95ee\u9898\u3002 \u5272\u8fb9\u662f\u548c\u662f\u4e0d\u662f\u6839\u8282\u70b9\u6ca1\u5173\u7cfb\u7684\uff0c\u539f\u6765\u6211\u4eec\u6c42\u5272\u70b9\u7684\u65f6\u5019\u662f\u6307\u70b9 v v \u662f\u4e0d\u53ef\u80fd\u4e0d\u7ecf\u8fc7\u7236\u8282\u70b9 u u \u4e3a\u56de\u5230\u7956\u5148\u8282\u70b9\uff08\u5305\u62ec\u7236\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u9876\u70b9 u u \u662f\u5272\u70b9\u3002\u5982\u679c low_v==num_u low_v==num_u \u8868\u793a\u8fd8\u53ef\u4ee5\u56de\u5230\u7236\u8282\u70b9\uff0c\u5982\u679c\u9876\u70b9 v v \u4e0d\u80fd\u56de\u5230\u7956\u5148\u4e5f\u6ca1\u6709\u53e6\u5916\u4e00\u6761\u56de\u5230\u7236\u4eb2\u7684\u8def\uff0c\u90a3\u4e48 u-v u-v \u8fd9\u6761\u8fb9\u5c31\u662f\u5272\u8fb9 Tarjan Tarjan \u7b97\u6cd5\u8fd8\u6709\u8bb8\u591a\u7528\u9014\uff0c\u5e38\u7528\u7684\u4f8b\u5982\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7f29\u70b9\uff0c\u8fd8\u6709\u6c42 2-SAT 2-SAT \u7684\u7528\u9014\u7b49\u3002","title":"\u5b9e\u73b0"},{"location":"graph/dag/","text":"\u5b9a\u4e49 \u00b6 \u8fb9\u6709\u5411\uff0c\u65e0\u73af\u3002 \u82f1\u6587\u540d\u53eb Directed Acyclic Graph\uff0c\u7f29\u5199\u662f DAG\u3002 \u6027\u8d28 \u00b6 \u80fd \u62d3\u6251\u6392\u5e8f \u7684\u56fe\uff0c\u4e00\u5b9a\u662f\u6709\u5411\u65e0\u73af\u56fe\uff1b \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48\u73af\u4e0a\u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u5728\u4efb\u610f\u5e8f\u5217\u4e2d\u90fd\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\u3002 \u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e00\u5b9a\u80fd\u62d3\u6251\u6392\u5e8f\uff1b \uff08\u5f52\u7eb3\u6cd5\uff09\u5047\u8bbe\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 k k \u7684 \u6709\u5411\u65e0\u73af\u56fe\u90fd\u80fd\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9\u6570\u7b49\u4e8e k k \u7684\uff0c\u8003\u8651\u6267\u884c\u62d3\u6251\u6392\u5e8f\u7b2c\u4e00\u6b65\u4e4b\u540e\u7684\u60c5\u5f62\u5373\u53ef\u3002 \u5224\u5b9a \u00b6 \u5982\u4f55\u5224\u5b9a\u4e00\u4e2a\u56fe\u662f\u5426\u662f\u6709\u5411\u65e0\u73af\u56fe\u5462\uff1f \u68c0\u9a8c\u5b83\u662f\u5426\u53ef\u4ee5\u8fdb\u884c \u62d3\u6251\u6392\u5e8f \u5373\u53ef\u3002 \u5f53\u7136\u4e5f\u6709\u53e6\u5916\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u56fe\u8fdb\u884c\u4e00\u904d DFS \uff0c\u5728\u5f97\u5230\u7684 DFS \u6811\u4e0a\u770b\u770b\u6709\u6ca1\u6709\u8fde\u5411\u7956\u5148\u7684\u975e\u6811\u8fb9\uff08\u8fd4\u7956\u8fb9\uff09\u3002\u5982\u679c\u6709\u7684\u8bdd\uff0c\u90a3\u5c31\u6709\u73af\u4e86\u3002","title":"\u6709\u5411\u65e0\u73af\u56fe"},{"location":"graph/dag/#_1","text":"\u8fb9\u6709\u5411\uff0c\u65e0\u73af\u3002 \u82f1\u6587\u540d\u53eb Directed Acyclic Graph\uff0c\u7f29\u5199\u662f DAG\u3002","title":"\u5b9a\u4e49"},{"location":"graph/dag/#_2","text":"\u80fd \u62d3\u6251\u6392\u5e8f \u7684\u56fe\uff0c\u4e00\u5b9a\u662f\u6709\u5411\u65e0\u73af\u56fe\uff1b \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48\u73af\u4e0a\u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u5728\u4efb\u610f\u5e8f\u5217\u4e2d\u90fd\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\u3002 \u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e00\u5b9a\u80fd\u62d3\u6251\u6392\u5e8f\uff1b \uff08\u5f52\u7eb3\u6cd5\uff09\u5047\u8bbe\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 k k \u7684 \u6709\u5411\u65e0\u73af\u56fe\u90fd\u80fd\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9\u6570\u7b49\u4e8e k k \u7684\uff0c\u8003\u8651\u6267\u884c\u62d3\u6251\u6392\u5e8f\u7b2c\u4e00\u6b65\u4e4b\u540e\u7684\u60c5\u5f62\u5373\u53ef\u3002","title":"\u6027\u8d28"},{"location":"graph/dag/#_3","text":"\u5982\u4f55\u5224\u5b9a\u4e00\u4e2a\u56fe\u662f\u5426\u662f\u6709\u5411\u65e0\u73af\u56fe\u5462\uff1f \u68c0\u9a8c\u5b83\u662f\u5426\u53ef\u4ee5\u8fdb\u884c \u62d3\u6251\u6392\u5e8f \u5373\u53ef\u3002 \u5f53\u7136\u4e5f\u6709\u53e6\u5916\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u56fe\u8fdb\u884c\u4e00\u904d DFS \uff0c\u5728\u5f97\u5230\u7684 DFS \u6811\u4e0a\u770b\u770b\u6709\u6ca1\u6709\u8fde\u5411\u7956\u5148\u7684\u975e\u6811\u8fb9\uff08\u8fd4\u7956\u8fb9\uff09\u3002\u5982\u679c\u6709\u7684\u8bdd\uff0c\u90a3\u5c31\u6709\u73af\u4e86\u3002","title":"\u5224\u5b9a"},{"location":"graph/dfs-order/","text":"","title":"DFS \u5e8f"},{"location":"graph/differential-constraints/","text":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u662f\u4e00\u79cd\u7279\u6b8a\u7684 n n \u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u5b83\u5305\u542b n n \u4e2a\u53d8\u91cf x_1,x_2,...,x_n x_1,x_2,...,x_n \u4ee5\u53ca m m \u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u662f\u7531\u4e24\u4e2a\u5176\u4e2d\u7684\u53d8\u91cf\u505a\u5dee\u6784\u6210\u7684\uff0c\u5f62\u5982 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u5176\u4e2d c_k c_k \u662f\u5e38\u6570\uff08\u53ef\u4ee5\u662f\u975e\u8d1f\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570\uff09\u3002\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff1a\u6c42\u4e00\u7ec4\u89e3 x_1=a_1,x_2=a_2,...,x_n=a_n x_1=a_1,x_2=a_2,...,x_n=a_n \uff0c\u4f7f\u5f97\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u5f97\u5230\u6ee1\u8db3\uff0c\u5426\u5219\u5224\u65ad\u51fa\u65e0\u89e3\u3002 \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \u90fd\u53ef\u4ee5\u53d8\u5f62\u6210 x_i\\leq x_j+c_k x_i\\leq x_j+c_k \uff0c\u8fd9\u4e0e\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f dist[y]\\leq dist[x]+z dist[y]\\leq dist[x]+z \u975e\u5e38\u76f8\u4f3c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u53d8\u91cf x_i x_i \u770b\u505a\u56fe\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u4ece\u7ed3\u70b9 j j \u5411\u7ed3\u70b9 i i \u8fde\u4e00\u6761\u957f\u5ea6\u4e3a c_k c_k \u7684\u6709\u5411\u8fb9\u3002 \u6ce8\u610f\u5230\uff0c\u5982\u679c \\{a_1,a_2,...,a_n\\} \\{a_1,a_2,...,a_n\\} \u662f\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u5e38\u6570 d d \uff0c \\{a_1+d,a_2+d,...,a_n+d\\} \\{a_1+d,a_2+d,...,a_n+d\\} \u663e\u7136\u4e5f\u662f\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5dee\u540e d d \u521a\u597d\u88ab\u6d88\u6389\u3002 \u8bbe dist[0]=0 dist[0]=0 \u5e76\u5411\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u82e5\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u5219\u7ed9\u5b9a\u7684\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u65e0\u89e3\uff0c\u5426\u5219\uff0c x_i=dist[i] x_i=dist[i] \u4e3a\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\u3002 \u4e00\u822c\u4f7f\u7528 Bellman-Ford \u6216\u961f\u5217\u4f18\u5316\u7684 Bellman-Ford\uff08\u4fd7\u79f0 SPFA\uff0c\u5728\u67d0\u4e9b\u968f\u673a\u56fe\u8dd1\u5f97\u5f88\u5feb\uff09 \u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002 \u5e38\u7528\u53d8\u5f62\u6280\u5de7 \u00b6 \u4f8b\u9898 luogu P1993 \u5c0f K \u7684\u519c\u573a \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u6c42\u89e3\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709 m m \u6761\u7ea6\u675f\u6761\u4ef6\uff0c \u6bcf\u6761\u90fd\u4e3a\u5f62\u5982 x_a-x_b\\geq c_k x_a-x_b\\geq c_k \uff0c x_a-x_b\\leq c_k x_a-x_b\\leq c_k \u6216 x_a=x_b x_a=x_b \u7684\u5f62\u5f0f\uff0c\u5224\u65ad\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u6ca1\u6709\u89e3\u3002 \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\geq c x_a - x_b \\geq c x_b - x_a \\leq -c x_b - x_a \\leq -c add(a, b, -c); x_a - x_b \\leq c x_a - x_b \\leq c x_a - x_b \\leq c x_a - x_b \\leq c add(b, a, c); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0); \u8dd1\u5224\u65ad\u8d1f\u73af\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8d1f\u73af\uff0c\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u7ed9\u51fa\u4e00\u79cd\u7528 DFS-SPFA \u5b9e\u73b0\u7684\u5224\u8d1f\u73af\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u5ea6\u4e0d\u7a33\u5b9a\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 400010 ; int n , m , op , u , v , we , cur , h [ maxn ], nxt [ maxn ], p [ maxn ], w [ maxn ], dist [ maxn ]; bool tf [ maxn ], ans ; inline void add_edge ( int x , int y , int z ) { cur ++ ; nxt [ cur ] = h [ x ]; h [ x ] = cur ; p [ cur ] = y ; w [ cur ] = z ; } void dfs ( int x ) { tf [ x ] = true ; for ( int j = h [ x ]; j != - 1 ; j = nxt [ j ]) if ( dist [ p [ j ]] > dist [ x ] + w [ j ]) { if ( tf [ p [ j ]] || ans ) { ans = 1 ; break ; } dist [ p [ j ]] = dist [ x ] + w [ j ]; dfs ( p [ j ]); } tf [ x ] = false ; } int main () { cur = 0 ; ans = false ; memset ( h , - 1 , sizeof h ); memset ( dist , 127 , sizeof dist ); scanf ( \"%d%d\" , & n , & m ); while ( m -- ) { scanf ( \"%d%d%d\" , & op , & u , & v ); if ( op == 1 ) scanf ( \"%d\" , & we ), add_edge ( u , v , - we ); else if ( op == 2 ) scanf ( \"%d\" , & we ), add_edge ( v , u , we ); else if ( op == 3 ) add_edge ( u , v , 0 ), add_edge ( v , u , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) { dfs ( i ); if ( ans ) break ; } if ( ans ) printf ( \"No \\n \" ); else printf ( \"Yes \\n \" ); return 0 ; } \u4f8b\u9898 P4926 [1007] \u500d\u6740\u6d4b\u91cf\u8005 \u00b6 \u4e0d\u8003\u8651\u4e8c\u5206\u7b49\u5176\u4ed6\u7684\u4e1c\u897f\uff0c\u8fd9\u91cc\u53ea\u8bba\u8ff0\u5dee\u5206\u7cfb\u7edf \\frac{x_i}{x_j}\\leq c_k \\frac{x_i}{x_j}\\leq c_k \u7684\u6c42\u89e3\u65b9\u6cd5\u3002 \u5bf9\u6bcf\u4e2a x_i,x_j x_i,x_j \u548c c_k c_k \u53d6\u4e00\u4e2a \\log \\log \u5c31\u53ef\u4ee5\u628a\u4e58\u6cd5\u53d8\u6210\u52a0\u6cd5\u8fd0\u7b97\uff0c\u5373 \\log x_i-\\log x_j \\leq \\log c_k \\log x_i-\\log x_j \\leq \\log c_k \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u5dee\u5206\u7ea6\u675f\u89e3\u51b3\u4e86\u3002 Bellman-Ford \u5224\u8d1f\u73af\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4e0b\u9762\u662f\u7528 Bellman-Ford \u7b97\u6cd5\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u8bf7\u5728\u8c03\u7528\u524d\u5148\u4fdd\u8bc1\u56fe\u662f\u8054\u901a\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 bool Bellman_Ford () { for ( int i = 0 ; i < n ; i ++ ) { bool jud = false ; for ( int j = 1 ; j <= n ; j ++ ) for ( int k = h [ j ]; ~ k ; k = nxt [ k ]) if ( dist [ j ] > dist [ p [ k ]] + w [ k ]) dist [ j ] = dist [ p [ k ]] + w [ k ], jud = true ; if ( ! jud ) break ; } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = h [ i ]; ~ j ; j = nxt [ j ]) if ( dist [ i ] > dist [ p [ j ]] + w [ j ]) return false ; return true ; } \u4e60\u9898 \u00b6 bzoj 1715: [Usaco2006 Dec] Wormholes \u866b\u6d1e bzoj 2330: [SCOI2011] \u7cd6\u679c POJ 1364 King POJ 2983 Is the Information Reliable?","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"graph/differential-constraints/#_1","text":"","title":"\u5e38\u7528\u53d8\u5f62\u6280\u5de7"},{"location":"graph/differential-constraints/#luogu-p1993-k","text":"\u9898\u76ee\u5927\u610f\uff1a\u6c42\u89e3\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709 m m \u6761\u7ea6\u675f\u6761\u4ef6\uff0c \u6bcf\u6761\u90fd\u4e3a\u5f62\u5982 x_a-x_b\\geq c_k x_a-x_b\\geq c_k \uff0c x_a-x_b\\leq c_k x_a-x_b\\leq c_k \u6216 x_a=x_b x_a=x_b \u7684\u5f62\u5f0f\uff0c\u5224\u65ad\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u6ca1\u6709\u89e3\u3002 \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\geq c x_a - x_b \\geq c x_b - x_a \\leq -c x_b - x_a \\leq -c add(a, b, -c); x_a - x_b \\leq c x_a - x_b \\leq c x_a - x_b \\leq c x_a - x_b \\leq c add(b, a, c); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0); \u8dd1\u5224\u65ad\u8d1f\u73af\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8d1f\u73af\uff0c\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u7ed9\u51fa\u4e00\u79cd\u7528 DFS-SPFA \u5b9e\u73b0\u7684\u5224\u8d1f\u73af\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u5ea6\u4e0d\u7a33\u5b9a\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 400010 ; int n , m , op , u , v , we , cur , h [ maxn ], nxt [ maxn ], p [ maxn ], w [ maxn ], dist [ maxn ]; bool tf [ maxn ], ans ; inline void add_edge ( int x , int y , int z ) { cur ++ ; nxt [ cur ] = h [ x ]; h [ x ] = cur ; p [ cur ] = y ; w [ cur ] = z ; } void dfs ( int x ) { tf [ x ] = true ; for ( int j = h [ x ]; j != - 1 ; j = nxt [ j ]) if ( dist [ p [ j ]] > dist [ x ] + w [ j ]) { if ( tf [ p [ j ]] || ans ) { ans = 1 ; break ; } dist [ p [ j ]] = dist [ x ] + w [ j ]; dfs ( p [ j ]); } tf [ x ] = false ; } int main () { cur = 0 ; ans = false ; memset ( h , - 1 , sizeof h ); memset ( dist , 127 , sizeof dist ); scanf ( \"%d%d\" , & n , & m ); while ( m -- ) { scanf ( \"%d%d%d\" , & op , & u , & v ); if ( op == 1 ) scanf ( \"%d\" , & we ), add_edge ( u , v , - we ); else if ( op == 2 ) scanf ( \"%d\" , & we ), add_edge ( v , u , we ); else if ( op == 3 ) add_edge ( u , v , 0 ), add_edge ( v , u , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) { dfs ( i ); if ( ans ) break ; } if ( ans ) printf ( \"No \\n \" ); else printf ( \"Yes \\n \" ); return 0 ; }","title":"\u4f8b\u9898  luogu P1993 \u5c0f K \u7684\u519c\u573a"},{"location":"graph/differential-constraints/#p4926-91100793","text":"\u4e0d\u8003\u8651\u4e8c\u5206\u7b49\u5176\u4ed6\u7684\u4e1c\u897f\uff0c\u8fd9\u91cc\u53ea\u8bba\u8ff0\u5dee\u5206\u7cfb\u7edf \\frac{x_i}{x_j}\\leq c_k \\frac{x_i}{x_j}\\leq c_k \u7684\u6c42\u89e3\u65b9\u6cd5\u3002 \u5bf9\u6bcf\u4e2a x_i,x_j x_i,x_j \u548c c_k c_k \u53d6\u4e00\u4e2a \\log \\log \u5c31\u53ef\u4ee5\u628a\u4e58\u6cd5\u53d8\u6210\u52a0\u6cd5\u8fd0\u7b97\uff0c\u5373 \\log x_i-\\log x_j \\leq \\log c_k \\log x_i-\\log x_j \\leq \\log c_k \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u5dee\u5206\u7ea6\u675f\u89e3\u51b3\u4e86\u3002","title":"\u4f8b\u9898 P4926 [1007] \u500d\u6740\u6d4b\u91cf\u8005"},{"location":"graph/differential-constraints/#bellman-ford","text":"\u4e0b\u9762\u662f\u7528 Bellman-Ford \u7b97\u6cd5\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u8bf7\u5728\u8c03\u7528\u524d\u5148\u4fdd\u8bc1\u56fe\u662f\u8054\u901a\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 bool Bellman_Ford () { for ( int i = 0 ; i < n ; i ++ ) { bool jud = false ; for ( int j = 1 ; j <= n ; j ++ ) for ( int k = h [ j ]; ~ k ; k = nxt [ k ]) if ( dist [ j ] > dist [ p [ k ]] + w [ k ]) dist [ j ] = dist [ p [ k ]] + w [ k ], jud = true ; if ( ! jud ) break ; } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = h [ i ]; ~ j ; j = nxt [ j ]) if ( dist [ i ] > dist [ p [ j ]] + w [ j ]) return false ; return true ; }","title":"Bellman-Ford \u5224\u8d1f\u73af\u4ee3\u7801\u5b9e\u73b0"},{"location":"graph/differential-constraints/#_2","text":"bzoj 1715: [Usaco2006 Dec] Wormholes \u866b\u6d1e bzoj 2330: [SCOI2011] \u7cd6\u679c POJ 1364 King POJ 2983 Is the Information Reliable?","title":"\u4e60\u9898"},{"location":"graph/dynamic-tree-divide/","text":"","title":"\u52a8\u6001\u6811\u5206\u6cbb"},{"location":"graph/euler/","text":"","title":"\u6b27\u62c9\u56fe"},{"location":"graph/flow/","text":"\u6d45\u8c08\u7f51\u7edc\u6d41\u57fa\u7840 \u00b6 \u7f51\u7edc\u6d41\u57fa\u7840\u77e5\u8bc6\u4ee5\u53ca\u89e3\u6cd5 \u00b6 \u7f51\u7edc\u6d41\u5728 OI \u4e2d\u662f\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u7684\u3002\u5728\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u4e2d\u5c31\u7528\u4e86 35 \u9875\u6765\u8bb2\u8ff0\u7f51\u7edc\u6d41\u7684\u77e5\u8bc6\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u6765\u7ed9\u5927\u5bb6\u8bb2\u4e00\u8bb2\u7f51\u7edc\u6d41\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u3002 \u6d41\u91cf \u00b6 \u9996\u5148\u6211\u4eec\u8981\u8ba4\u8bc6 \u6d41\u91cf \u662f\u4ec0\u4e48\u3002\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u57ce\u5e02\u4e2d\u7684\u6bcf\u4e00\u6761\u8def\u80af\u5b9a\u6709\u4e00\u5b9a\u7684\u5bbd\u5ea6\uff0c\u800c\u8fd9\u4e9b\u5bbd\u5ea6\u5c31\u9650\u5b9a\u4e86\u8f66\u8f86\uff08\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u7ea2\u7eff\u706f\u4e24\u7aef\u770b\u4e3a\u4e00\u6761\u8def\u7684\u957f\u5ea6\uff09\u3002 \u7f51\u7edc\u6d41\u5c31\u5bf9 \u56fe \u8be0\u91ca\u4e0a\u4e86\u8fd9\u4e48\u4e00\u4e2a\u503c\uff0c\u5b83\u4e0d\u540c\u4e8e\u6700\u77ed\u8def\u3002 a a \u7ad9\u5411 b b \u7ad9\u6709\u4e00\u6761\u6d41\u91cf\u4e3a 5 5 \u7684\u8def\uff0c\u90a3\u4e48\u4f60\u5c31\u53ea\u80fd\u901a\u8fc7 5 5 \u8f86\uff08\u6216\u8005\u662f\u5176\u5b83\u5355\u4f4d\uff09\u8f66\uff0c\u800c\u4e14\u901a\u8fc7\u4ee5\u540e\u5c31\u65e0\u6cd5\u518d\u901a\u8fc7\u3002\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u63a8\u51fa\u51e0\u4e2a\u4e1c\u897f\uff1a \u6211\u4eec\u53ef\u4ee5\u5148\u901a n n \u8f86\u8f66\uff0c\u518d\u901a m m \u8f86\u8f66\uff08 n+m\\le n+m\\le \u8fd9\u6761\u8def\u7684\u6d41\u91cf\uff09\u3002 \u5982\u679c\u6211\u4eec\u4ece a a \u7ad9\u5230 b b \u7ad9\u53ea\u5269 20 20 \u7684\u6d41\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u6761\u6d41\u91cf\u4e3a 15 15 \u7684\u8fb9\u8fde\u63a5 b b \u548c c c \u3002\u6211\u4eec\u5f88\u5feb\u80fd\u63a8\u51fa a a \u6d41 \u5230 c c \u53ea\u6709 15 15 \u7684\u6d41\u91cf\uff08\u56e0\u4e3a\u540e\u8005\u9650\u5236\u4e86\u524d\u8005\uff09\u3002 \u6700\u5927\u6d41 \u00b6 \u5148\u8ba4\u8bc6\u4e00\u4e0b S S ( source source ) \u548c T T ( sink sink ) \u7684\u6982\u5ff5\u3002 S S \u5c31\u662f\u5e38\u8bf4\u7684\u6e90\u70b9\uff0c T T \u5c31\u662f\u6c47\u70b9\uff08\u4e5f\u5c31\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8fd9\u4e2a\u8ddf\u6700\u77ed\u8def\u7684\u6982\u5ff5\u662f\u4e00\u6837\u7684\uff09\u3002\u6211\u4eec\u6709\u4e00\u5f20\u56fe\uff0c\u8981\u6c42\u4ece\u6e90\u70b9\u6d41\u5411\u6c47\u70b9\u7684\u6700\u5927\u6d41\u91cf\uff08\u53ef\u4ee5\u6709\u5f88\u591a\u6761\u8def\u5230\u8fbe\u6c47\u70b9\uff09\uff0c\u5c31\u662f\u6211\u4eec\u7684\u6700\u5927\u6d41\u95ee\u9898 ( max\\ flow max\\ flow )\uff0c\u4e00\u822c\u6e90\u70b9\u662f\u65e0\u9650\u6d41\u91cf\u7684\u3002 \u7136\u540e\u6211\u4eec\u6765\u8ba4\u8bc6\u4e00\u4e0b \u589e\u5e7f\u8def \uff08\u6ce8\u610f\u8def\u4e0d\u662f\u8fb9\uff09\uff0c\u5c31\u662f\u8bf4\uff0c\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\uff0c\u53ea\u8981\u6709 flow flow ( flow>0 flow>0 ) \u6d41\u8fc7\u53bb\uff0c\u8fd9\u6761\u8def\u5c31\u662f\u589e\u5e7f\u8def\u3002\u5728\u4e00\u4e9b\u6700\u5927\u6d41\u7b97\u6cd5\u4e2d\uff0c\u5c31\u662f\u5c06\u8fd9\u4e9b\u8def \u589e\u5e7f \uff08\u610f\u601d\u5c31\u662f\u8d70\u6389\u8fd9\u6761\u8def\uff0c\u5e26\u8d70\u7684\u6d41\u91cf\u80af\u5b9a\u5c31\u662f\u8fd9\u6761\u8def\u7684\u6700\u5c0f\u6d41\u91cf\uff09\uff0c\u5982\u56fe: \u6211\u4eec\u4ece 4 4 \u5230 3 3 \uff0c\u80af\u5b9a\u53ef\u4ee5\u5148\u4ece\u6d41\u91cf\u4e3a 20 20 \u7684\u8fd9\u6761\u8fb9\u5148\u8d70\u3002\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u88ab\u8d70\u6389\u4e86\uff0c\u4e0d\u80fd\u518d\u9009\uff0c\u603b\u7684\u6d41\u91cf\u4e3a 20 20 \uff08\u73b0\u5728\uff09\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u9009\u62e9: 4\\rightarrow2\\rightarrow3 4\\rightarrow2\\rightarrow3 \u8fd9\u6761 \u589e\u5e7f\u8def \u7684\u603b\u6d41\u91cf\u4e3a 20 20 \u3002\u5230 2 2 \u7684\u65f6\u5019\u8fd8\u662f 30 30 \uff0c\u5230 3 3 \u4e86\u5c31\u53ea\u6709 20 20 \u4e86\u3002 4\\rightarrow2\\rightarrow1\\rightarrow3 4\\rightarrow2\\rightarrow1\\rightarrow3 \u8fd9\u6837\u5b50\u6211\u4eec\u5c31\u5f88\u597d\u7684\u4fdd\u7559\u4e86 30 30 \u7684\u6d41\u91cf\u3002 \u6240\u4ee5\u6211\u4eec\u8fd9\u5f20\u56fe\u7684\u6700\u5927\u6d41\u5c31\u5e94\u8be5\u662f 20+30=50 20+30=50 \u3002 \u6c42\u6700\u5927\u6d41\u662f\u5f88\u7b80\u5355\u7684\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u8bb2\u89e3\u6c42\u6700\u5927\u6d41\u7684 3 3 \u79cd\u65b9\u6cd5\u3002 \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 (MCMF) \u00b6 \u8fd9\u4e5f\u662f\u8033\u719f\u80fd\u95fb\u7684\u8d39\u7528\u6d41\u2014\u2014\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 (Minimum cost Maximum flow)\u3002\u6211\u4eec\u7ed9\u4e88\u8fd9\u5f20\u56fe\u4e00\u4e2a\u8d39\u7528\u503c\uff08\u4e5f\u5c31\u662f\u6700\u77ed\u8def\u95ee\u9898\uff09\uff0c\u7136\u540e\u5728\u6c42\u51fa\u6700\u5927\u6d41\u7684\u57fa\u7840\u4e0a\uff0c\u628a\u6700\u5c0f\u8d39\u7528\u7684\u8def\u5f84\u6c42\u51fa\u6765\u3002\u8fd9\u4e2a\u96be\u5ea6\u5c31\u4e0a\u5347\u5230\u4e86\u63d0\u9ad8\u7ec4\u7684\u96be\u5ea6\uff0c\u5e76\u4e0d\u662f\u5927\u5bb6\u90fd\u53ef\u4ee5\u5148\u51b3\u7684\u3002 \u6700\u5927\u6d41\u89e3\u6cd5\u9526\u96c6 \u00b6 \u6240\u6709\u4ee3\u7801\u8bf7\u770b\uff1a \u526a\u8d34\u677f \u3002 Edmond-Karp \u52a8\u80fd\u7b97\u6cd5\uff08 EK EK \u7b97\u6cd5\uff09 \u00b6 \u8fd9\u4e2a\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u5c31\u662f DFS \u627e\u589e\u5e7f\u8def \uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c \u589e\u5e7f \u3002\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u600e\u4e48\u627e\uff1f\u600e\u4e48\u589e\u5e7f\uff1f \u627e\uff1f \u6211\u4eec\u5c31\u4ece\u6e90\u70b9\u4e00\u76f4 DFS \u8d70\u6765\u8d70\u53bb\uff0c\u78b0\u5230\u6c47\u70b9\u5c31\u505c\uff0c\u7136\u540e\u589e\u5e7f\uff08\u6bcf\u4e00\u6761\u8def\u90fd\u8981\u589e\u5e7f\uff09\u3002\u6211\u4eec\u5728 DFS \u7684\u65f6\u5019\u5c31\u6ce8\u610f\u4e00\u4e0b\u6d41\u91cf\u5408\u4e0d\u5408\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002 \u589e\u5e7f\uff1f\u5176\u5b9e\u5c31\u662f\u6309\u7167\u6211\u4eec\u627e\u7684\u589e\u5e7f\u8def\u5728\u91cd\u65b0\u8d70\u4e00\u904d\u3002\u8d70\u7684\u65f6\u5019\u628a\u8fd9\u6761\u8def\u7684\u80fd\u591f\u6210\u7684\u6700\u5927\u6d41\u91cf\u51cf\u4e00\u51cf\uff0c\u7136\u540e\u7ed9\u7b54\u6848\u52a0\u4e0a\u6700\u5c0f\u6d41\u91cf\u5c31\u53ef\u4ee5\u4e86\u3002 \u518d\u8bb2\u4e00\u4e0b \u53cd\u5411\u8fb9 \u3002\u589e\u5e7f\u7684\u65f6\u5019\u8981\u6ce8\u610f\u5efa\u9020\u53cd\u5411\u8fb9\uff0c\u539f\u56e0\u662f\u8fd9\u6761\u8def\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u8fd9\u6837\u5b50\u7a0b\u5e8f\u53ef\u4ee5\u8fdb\u884c\u53cd\u6094\u3002\u5047\u5982\u6211\u4eec\u5bf9\u8fd9\u6761\u8def\u8fdb\u884c\u589e\u5e7f\u4e86\uff0c\u90a3\u4e48\u5176\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u53cd\u5411\u8fb9\u7684\u6d41\u91cf\u5c31\u662f\u5b83\u7684\u6d41\u91cf\u3002 \u8bb2\u4e00\u4e0b\u4e00\u4e9b\u5c0f\u7ec6\u8282\u3002\u5982\u679c\u4f60\u662f\u7528\u90bb\u63a5\u77e9\u9635\u7684\u8bdd\uff0c\u53cd\u5411\u8fb9\u76f4\u63a5\u5c31\u662f\u4ece table[x,y] table[x,y] \u53d8\u6210 table[y,x] table[y,x] \u3002\u5982\u679c\u662f\u5e38\u7528\u7684\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u90a3\u4e48\u5728\u52a0\u5165\u8fb9\u7684\u65f6\u5019\u5c31\u8981\u5148\u52a0\u5165\u53cd\u5411\u8fb9\u3002\u90a3\u4e48\u5728\u7528\u7684\u65f6\u5019\u5462\uff0c\u6211\u4eec\u76f4\u63a5 i\\operatorname{xor}1 i\\operatorname{xor}1 \u5c31\u53ef\u4ee5\u4e86 ( i i \u4e3a\u8fb9\u7684\u7f16\u53f7)\u3002\u4e3a\u4ec0\u4e48\u5462? \u76f8\u4fe1\u5927\u5bb6\u90fd\u662f\u77e5\u9053 \\operatorname{xor} \\operatorname{xor} \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u52a0\u5165\u6b63\u5411\u8fb9\u540e\u52a0\u5165\u53cd\u5411\u8fb9\uff0c\u5c31\u662f\u9760\u8fd1\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \\operatorname{xor} \\operatorname{xor} \u3002\u6211\u4eec\u8fd8\u8981\u6ce8\u610f\u4e00\u5f00\u59cb\u7684\u7f16\u53f7\u8981\u8bbe\u7f6e\u4e3a tot=1 tot=1 \uff0c\u56e0\u4e3a\u8fb9\u8981\u4ece\u7f16\u53f7 2 2 \u5f00\u59cb\uff0c\u8fd9\u6837\u5b50 \\operatorname{xor} \\operatorname{xor} \u5bf9\u7f16\u53f7 2,3 2,3 \u7684\u8fb9\u624d\u6709\u6548\u679c\u3002 Dinic \u00b6 \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u6761\u8def\u4e00\u6761\u8def\u627e\u662f\u5341\u5206\u7684\u6162\u7684\uff0c\u6211\u4eec\u5c31\u8bbe\u60f3\u53ef\u4e0d\u53ef\u4ee5\u5f88\u591a\u6761\u8def\u4e00\u8d77\u627e\u3002\u7b54\u6848\u5f53\u7136\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e9b\u8def\u662f\u540c\u65f6\u627e\u7684\uff0c\u5982\u679c\u6709\u4e9b\u8def\u5f88\u8c03\u76ae\uff0c\u5f80\u56de (\u522b\u7684\u8def) \u627e\uff0c\u90a3\u4e48\u522b\u7684\u8def\u4e0d\u5c31\u662f\u5f02\u5e38\u5c34\u5c2c\u3002 \u6211\u4eec\u7ed9\u8fd9\u5f20\u56fe\u6bcf\u4e00\u6761\u8fb9\u90fd\u6307\u5b9a\u4e00\u4e2a\u65b9\u5411\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u60c5\u51b5\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053 \u5206\u5c42 \u8fd9\u4e2a\u6982\u5ff5\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u589e\u5e7f\u4ee5\u540e\u7684\u56fe\uff0c\u7ed9\u5b83\u8fdb\u884c\u5206\u5c42\u3002\u6211\u4eec\u89c4\u5b9a\uff0c\u4f4e\u7684\u7ea7\u522b\u53ea\u80fd\u53bb\u9ad8\u7684\u7ea7\u522b\u7684\u70b9\uff08\u800c\u4e14\u53ea\u80fd\u9ad8 1 1 \u7ea7\u522b\uff09\u3002\u800c\u7ea7\u522b\u5c31\u662f\u5b83\u4e0e\u6e90\u70b9\u7684\u8ddd\u79bb\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u6574\u4f53\u589e\u5e7f\u6765\u4e00\u6b21 BFS \u5c31\u53ef\u4ee5\u4e86\u3002 ISAP \u00b6 \u8fd9\u4e2a\u662f SAP SAP \u7b97\u6cd5\u7684\u52a0\u5f3a\u7248 (Improved)\u3002 \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u89e3\u6cd5 \u00b6 \u6700\u7b80\u5355\u7684\u5c31\u662f EK+SPFA\uff0c\u4e5f\u63a8\u8350\u7528 zkw \u8d39\u7528\u6d41\u548c\u539f\u59cb\u5bf9\u5076\u5339\u914d\u7b97\u6cd5\u3002 \u7f51\u7edc\u6d41\u57fa\u7840\u77e5\u8bc6\u62d3\u5c55 \u00b6 \u524d\u9762\u90fd\u770b\u61c2\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee5\u4e0b\u5185\u5bb9\u3002 \u6700\u5c0f\u5272 \u00b6 \u5272\u5176\u5b9e\u5c31\u662f\u5220\u8fb9\u7684\u610f\u601d\uff0c\u5f53\u7136\u6700\u5c0f\u5272\u5c31\u662f\u5272\u6389 X X \u6761\u8fb9\u6765\u8ba9 S S \u8ddf T T \u4e0d\u4e92\u901a\u3002\u6211\u4eec\u8981\u6c42 X X \u6761\u8fb9\u52a0\u8d77\u6765\u7684\u6d41\u91cf\u7efc\u5408\u6700\u5c0f\u3002\u8fd9\u5c31\u662f\u6700\u5c0f\u5272\u95ee\u9898\u3002 \u5176\u4e2d\u6211\u4eec\u8981\u8ba4\u8bc6\u4e00\u4e2a\u5b9a\u7406: \u6700\u5c0f\u5272 = \u6700\u5927\u6d41 \u4e8c\u5206\u56fe\u5339\u914d \u00b6 \u5308\u7259\u5229\u7b97\u6cd5\u5c31\u662f\u5176\u4e2d\u4e00\u4e2a\u53ef\u64a4\u56de\u8d2a\u5fc3\u7684\u8fc7\u7a0b\uff0c\u800c\u7f51\u7edc\u6d41\u66f4\u5feb\uff0c\u5c31\u5728\u4e8e \u64a4\u56de \u8fd9\u4e00\u8fc7\u7a0b\u5f88\u5feb\u3002 \u5efa\u6a21 \u00b6 \u5728\u4f1a\u4e86\u6700\u5927\u6d41\u548c\u8d39\u7528\u6d41\u540e\uff0c\u5efa\u6a21\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u5c31\u50cf JZOI \u7684 \u72fc\u4e0e\u7f8a\u7684\u6545\u4e8b \uff0c\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002 \u524d\u671f \u9047\u5230\u8fd9\u79cd\u9898\u76ee\uff0c\u66b4\u641c\uff1f\u795e\u5947 BFS\uff1f\u9519\u8bef\u3002\u6211\u4eec\u9996\u5148\u8981\u8003\u8651\u4e00\u4e0b\u4f1a\u4e0d\u4f1a\u6709 \u4e8c\u5206\u56fe\u5339\u914d \uff0c \u6700\u5c0f\u5272 \u7684\u6a21\u578b\uff08\u4e00\u822c\u4e0d\u4f1a\u6709\u666e\u901a\u7684\u6700\u5927\u6d41\uff09\u3002\u7136\u540e\u5efa\u7acb\uff08\u8d85\u7ea7\uff09\u6e90\u70b9\u548c\uff08\u8d85\u7ea7\uff09\u6c47\u70b9\u3002\u4ec0\u4e48\u610f\u601d\uff1f\u5c31\u662f\u5f53\u5f88\u591a\u4e2a\u6e90\u70b9\u548c\u5f88\u591a\u4e2a\u6c47\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8d85\u7ea7\u6e90\u70b9\u548c\u8d85\u7ea7\u6c47\u70b9\u4ee3\u66ff\u300c\u6e90\u70b9\u300d\u548c\u300c\u6c47\u70b9\u300d\u7684\u4f4d\u7f6e\uff08\u4e5f\u5c31\u662f\u628a\u8d85\u7ea7\u6e90\u70b9\u8fde\u5411\u5404\u4e2a\u6e90\u70b9\uff0c\u8d85\u7ea7\u6c47\u70b9\u8fde\u5411\u5404\u4e2a\u6c47\u70b9\uff0c\u65b9\u5411\u6309\u9898\u610f\u6765\u5b9a\uff09\u3002 \u8fd9\u662f\u6700\u5e38\u89c1\u7684\u5efa\u6a21\u7684\u65b9\u6cd5\u4e4b\u4e00\uff0c\u4e5f\u662f\u505a\u4e8c\u5206\u56fe\u5339\u914d\u7684\u65b9\u6cd5\u3002\u8fd8\u6709\u5f88\u591a\u5efa\u6a21\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003 \u7f51\u7edc\u6d41\u5efa\u6a21\u57fa\u7840 \u3002 \u6765\u4e00\u9053\u9898\u7ec3\u7ec3\u624b: \u6c99\u8036\u7684\u73a9\u5076 \u3002","title":"\u7f51\u7edc\u6d41\u7b80\u4ecb"},{"location":"graph/flow/#_1","text":"","title":"\u6d45\u8c08\u7f51\u7edc\u6d41\u57fa\u7840"},{"location":"graph/flow/#_2","text":"\u7f51\u7edc\u6d41\u5728 OI \u4e2d\u662f\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u7684\u3002\u5728\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u4e2d\u5c31\u7528\u4e86 35 \u9875\u6765\u8bb2\u8ff0\u7f51\u7edc\u6d41\u7684\u77e5\u8bc6\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u6765\u7ed9\u5927\u5bb6\u8bb2\u4e00\u8bb2\u7f51\u7edc\u6d41\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u3002","title":"\u7f51\u7edc\u6d41\u57fa\u7840\u77e5\u8bc6\u4ee5\u53ca\u89e3\u6cd5"},{"location":"graph/flow/#_3","text":"\u9996\u5148\u6211\u4eec\u8981\u8ba4\u8bc6 \u6d41\u91cf \u662f\u4ec0\u4e48\u3002\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u57ce\u5e02\u4e2d\u7684\u6bcf\u4e00\u6761\u8def\u80af\u5b9a\u6709\u4e00\u5b9a\u7684\u5bbd\u5ea6\uff0c\u800c\u8fd9\u4e9b\u5bbd\u5ea6\u5c31\u9650\u5b9a\u4e86\u8f66\u8f86\uff08\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u7ea2\u7eff\u706f\u4e24\u7aef\u770b\u4e3a\u4e00\u6761\u8def\u7684\u957f\u5ea6\uff09\u3002 \u7f51\u7edc\u6d41\u5c31\u5bf9 \u56fe \u8be0\u91ca\u4e0a\u4e86\u8fd9\u4e48\u4e00\u4e2a\u503c\uff0c\u5b83\u4e0d\u540c\u4e8e\u6700\u77ed\u8def\u3002 a a \u7ad9\u5411 b b \u7ad9\u6709\u4e00\u6761\u6d41\u91cf\u4e3a 5 5 \u7684\u8def\uff0c\u90a3\u4e48\u4f60\u5c31\u53ea\u80fd\u901a\u8fc7 5 5 \u8f86\uff08\u6216\u8005\u662f\u5176\u5b83\u5355\u4f4d\uff09\u8f66\uff0c\u800c\u4e14\u901a\u8fc7\u4ee5\u540e\u5c31\u65e0\u6cd5\u518d\u901a\u8fc7\u3002\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u63a8\u51fa\u51e0\u4e2a\u4e1c\u897f\uff1a \u6211\u4eec\u53ef\u4ee5\u5148\u901a n n \u8f86\u8f66\uff0c\u518d\u901a m m \u8f86\u8f66\uff08 n+m\\le n+m\\le \u8fd9\u6761\u8def\u7684\u6d41\u91cf\uff09\u3002 \u5982\u679c\u6211\u4eec\u4ece a a \u7ad9\u5230 b b \u7ad9\u53ea\u5269 20 20 \u7684\u6d41\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u6761\u6d41\u91cf\u4e3a 15 15 \u7684\u8fb9\u8fde\u63a5 b b \u548c c c \u3002\u6211\u4eec\u5f88\u5feb\u80fd\u63a8\u51fa a a \u6d41 \u5230 c c \u53ea\u6709 15 15 \u7684\u6d41\u91cf\uff08\u56e0\u4e3a\u540e\u8005\u9650\u5236\u4e86\u524d\u8005\uff09\u3002","title":"\u6d41\u91cf"},{"location":"graph/flow/#_4","text":"\u5148\u8ba4\u8bc6\u4e00\u4e0b S S ( source source ) \u548c T T ( sink sink ) \u7684\u6982\u5ff5\u3002 S S \u5c31\u662f\u5e38\u8bf4\u7684\u6e90\u70b9\uff0c T T \u5c31\u662f\u6c47\u70b9\uff08\u4e5f\u5c31\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8fd9\u4e2a\u8ddf\u6700\u77ed\u8def\u7684\u6982\u5ff5\u662f\u4e00\u6837\u7684\uff09\u3002\u6211\u4eec\u6709\u4e00\u5f20\u56fe\uff0c\u8981\u6c42\u4ece\u6e90\u70b9\u6d41\u5411\u6c47\u70b9\u7684\u6700\u5927\u6d41\u91cf\uff08\u53ef\u4ee5\u6709\u5f88\u591a\u6761\u8def\u5230\u8fbe\u6c47\u70b9\uff09\uff0c\u5c31\u662f\u6211\u4eec\u7684\u6700\u5927\u6d41\u95ee\u9898 ( max\\ flow max\\ flow )\uff0c\u4e00\u822c\u6e90\u70b9\u662f\u65e0\u9650\u6d41\u91cf\u7684\u3002 \u7136\u540e\u6211\u4eec\u6765\u8ba4\u8bc6\u4e00\u4e0b \u589e\u5e7f\u8def \uff08\u6ce8\u610f\u8def\u4e0d\u662f\u8fb9\uff09\uff0c\u5c31\u662f\u8bf4\uff0c\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\uff0c\u53ea\u8981\u6709 flow flow ( flow>0 flow>0 ) \u6d41\u8fc7\u53bb\uff0c\u8fd9\u6761\u8def\u5c31\u662f\u589e\u5e7f\u8def\u3002\u5728\u4e00\u4e9b\u6700\u5927\u6d41\u7b97\u6cd5\u4e2d\uff0c\u5c31\u662f\u5c06\u8fd9\u4e9b\u8def \u589e\u5e7f \uff08\u610f\u601d\u5c31\u662f\u8d70\u6389\u8fd9\u6761\u8def\uff0c\u5e26\u8d70\u7684\u6d41\u91cf\u80af\u5b9a\u5c31\u662f\u8fd9\u6761\u8def\u7684\u6700\u5c0f\u6d41\u91cf\uff09\uff0c\u5982\u56fe: \u6211\u4eec\u4ece 4 4 \u5230 3 3 \uff0c\u80af\u5b9a\u53ef\u4ee5\u5148\u4ece\u6d41\u91cf\u4e3a 20 20 \u7684\u8fd9\u6761\u8fb9\u5148\u8d70\u3002\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u88ab\u8d70\u6389\u4e86\uff0c\u4e0d\u80fd\u518d\u9009\uff0c\u603b\u7684\u6d41\u91cf\u4e3a 20 20 \uff08\u73b0\u5728\uff09\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u9009\u62e9: 4\\rightarrow2\\rightarrow3 4\\rightarrow2\\rightarrow3 \u8fd9\u6761 \u589e\u5e7f\u8def \u7684\u603b\u6d41\u91cf\u4e3a 20 20 \u3002\u5230 2 2 \u7684\u65f6\u5019\u8fd8\u662f 30 30 \uff0c\u5230 3 3 \u4e86\u5c31\u53ea\u6709 20 20 \u4e86\u3002 4\\rightarrow2\\rightarrow1\\rightarrow3 4\\rightarrow2\\rightarrow1\\rightarrow3 \u8fd9\u6837\u5b50\u6211\u4eec\u5c31\u5f88\u597d\u7684\u4fdd\u7559\u4e86 30 30 \u7684\u6d41\u91cf\u3002 \u6240\u4ee5\u6211\u4eec\u8fd9\u5f20\u56fe\u7684\u6700\u5927\u6d41\u5c31\u5e94\u8be5\u662f 20+30=50 20+30=50 \u3002 \u6c42\u6700\u5927\u6d41\u662f\u5f88\u7b80\u5355\u7684\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u8bb2\u89e3\u6c42\u6700\u5927\u6d41\u7684 3 3 \u79cd\u65b9\u6cd5\u3002","title":"\u6700\u5927\u6d41"},{"location":"graph/flow/#mcmf","text":"\u8fd9\u4e5f\u662f\u8033\u719f\u80fd\u95fb\u7684\u8d39\u7528\u6d41\u2014\u2014\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 (Minimum cost Maximum flow)\u3002\u6211\u4eec\u7ed9\u4e88\u8fd9\u5f20\u56fe\u4e00\u4e2a\u8d39\u7528\u503c\uff08\u4e5f\u5c31\u662f\u6700\u77ed\u8def\u95ee\u9898\uff09\uff0c\u7136\u540e\u5728\u6c42\u51fa\u6700\u5927\u6d41\u7684\u57fa\u7840\u4e0a\uff0c\u628a\u6700\u5c0f\u8d39\u7528\u7684\u8def\u5f84\u6c42\u51fa\u6765\u3002\u8fd9\u4e2a\u96be\u5ea6\u5c31\u4e0a\u5347\u5230\u4e86\u63d0\u9ad8\u7ec4\u7684\u96be\u5ea6\uff0c\u5e76\u4e0d\u662f\u5927\u5bb6\u90fd\u53ef\u4ee5\u5148\u51b3\u7684\u3002","title":"\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 (MCMF)"},{"location":"graph/flow/#_5","text":"\u6240\u6709\u4ee3\u7801\u8bf7\u770b\uff1a \u526a\u8d34\u677f \u3002","title":"\u6700\u5927\u6d41\u89e3\u6cd5\u9526\u96c6"},{"location":"graph/flow/#edmond-karp-ekek","text":"\u8fd9\u4e2a\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u5c31\u662f DFS \u627e\u589e\u5e7f\u8def \uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c \u589e\u5e7f \u3002\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u600e\u4e48\u627e\uff1f\u600e\u4e48\u589e\u5e7f\uff1f \u627e\uff1f \u6211\u4eec\u5c31\u4ece\u6e90\u70b9\u4e00\u76f4 DFS \u8d70\u6765\u8d70\u53bb\uff0c\u78b0\u5230\u6c47\u70b9\u5c31\u505c\uff0c\u7136\u540e\u589e\u5e7f\uff08\u6bcf\u4e00\u6761\u8def\u90fd\u8981\u589e\u5e7f\uff09\u3002\u6211\u4eec\u5728 DFS \u7684\u65f6\u5019\u5c31\u6ce8\u610f\u4e00\u4e0b\u6d41\u91cf\u5408\u4e0d\u5408\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002 \u589e\u5e7f\uff1f\u5176\u5b9e\u5c31\u662f\u6309\u7167\u6211\u4eec\u627e\u7684\u589e\u5e7f\u8def\u5728\u91cd\u65b0\u8d70\u4e00\u904d\u3002\u8d70\u7684\u65f6\u5019\u628a\u8fd9\u6761\u8def\u7684\u80fd\u591f\u6210\u7684\u6700\u5927\u6d41\u91cf\u51cf\u4e00\u51cf\uff0c\u7136\u540e\u7ed9\u7b54\u6848\u52a0\u4e0a\u6700\u5c0f\u6d41\u91cf\u5c31\u53ef\u4ee5\u4e86\u3002 \u518d\u8bb2\u4e00\u4e0b \u53cd\u5411\u8fb9 \u3002\u589e\u5e7f\u7684\u65f6\u5019\u8981\u6ce8\u610f\u5efa\u9020\u53cd\u5411\u8fb9\uff0c\u539f\u56e0\u662f\u8fd9\u6761\u8def\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u8fd9\u6837\u5b50\u7a0b\u5e8f\u53ef\u4ee5\u8fdb\u884c\u53cd\u6094\u3002\u5047\u5982\u6211\u4eec\u5bf9\u8fd9\u6761\u8def\u8fdb\u884c\u589e\u5e7f\u4e86\uff0c\u90a3\u4e48\u5176\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u53cd\u5411\u8fb9\u7684\u6d41\u91cf\u5c31\u662f\u5b83\u7684\u6d41\u91cf\u3002 \u8bb2\u4e00\u4e0b\u4e00\u4e9b\u5c0f\u7ec6\u8282\u3002\u5982\u679c\u4f60\u662f\u7528\u90bb\u63a5\u77e9\u9635\u7684\u8bdd\uff0c\u53cd\u5411\u8fb9\u76f4\u63a5\u5c31\u662f\u4ece table[x,y] table[x,y] \u53d8\u6210 table[y,x] table[y,x] \u3002\u5982\u679c\u662f\u5e38\u7528\u7684\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u90a3\u4e48\u5728\u52a0\u5165\u8fb9\u7684\u65f6\u5019\u5c31\u8981\u5148\u52a0\u5165\u53cd\u5411\u8fb9\u3002\u90a3\u4e48\u5728\u7528\u7684\u65f6\u5019\u5462\uff0c\u6211\u4eec\u76f4\u63a5 i\\operatorname{xor}1 i\\operatorname{xor}1 \u5c31\u53ef\u4ee5\u4e86 ( i i \u4e3a\u8fb9\u7684\u7f16\u53f7)\u3002\u4e3a\u4ec0\u4e48\u5462? \u76f8\u4fe1\u5927\u5bb6\u90fd\u662f\u77e5\u9053 \\operatorname{xor} \\operatorname{xor} \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u52a0\u5165\u6b63\u5411\u8fb9\u540e\u52a0\u5165\u53cd\u5411\u8fb9\uff0c\u5c31\u662f\u9760\u8fd1\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \\operatorname{xor} \\operatorname{xor} \u3002\u6211\u4eec\u8fd8\u8981\u6ce8\u610f\u4e00\u5f00\u59cb\u7684\u7f16\u53f7\u8981\u8bbe\u7f6e\u4e3a tot=1 tot=1 \uff0c\u56e0\u4e3a\u8fb9\u8981\u4ece\u7f16\u53f7 2 2 \u5f00\u59cb\uff0c\u8fd9\u6837\u5b50 \\operatorname{xor} \\operatorname{xor} \u5bf9\u7f16\u53f7 2,3 2,3 \u7684\u8fb9\u624d\u6709\u6548\u679c\u3002","title":"Edmond-Karp \u52a8\u80fd\u7b97\u6cd5\uff08EKEK \u7b97\u6cd5\uff09"},{"location":"graph/flow/#dinic","text":"\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u6761\u8def\u4e00\u6761\u8def\u627e\u662f\u5341\u5206\u7684\u6162\u7684\uff0c\u6211\u4eec\u5c31\u8bbe\u60f3\u53ef\u4e0d\u53ef\u4ee5\u5f88\u591a\u6761\u8def\u4e00\u8d77\u627e\u3002\u7b54\u6848\u5f53\u7136\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e9b\u8def\u662f\u540c\u65f6\u627e\u7684\uff0c\u5982\u679c\u6709\u4e9b\u8def\u5f88\u8c03\u76ae\uff0c\u5f80\u56de (\u522b\u7684\u8def) \u627e\uff0c\u90a3\u4e48\u522b\u7684\u8def\u4e0d\u5c31\u662f\u5f02\u5e38\u5c34\u5c2c\u3002 \u6211\u4eec\u7ed9\u8fd9\u5f20\u56fe\u6bcf\u4e00\u6761\u8fb9\u90fd\u6307\u5b9a\u4e00\u4e2a\u65b9\u5411\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u60c5\u51b5\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053 \u5206\u5c42 \u8fd9\u4e2a\u6982\u5ff5\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u589e\u5e7f\u4ee5\u540e\u7684\u56fe\uff0c\u7ed9\u5b83\u8fdb\u884c\u5206\u5c42\u3002\u6211\u4eec\u89c4\u5b9a\uff0c\u4f4e\u7684\u7ea7\u522b\u53ea\u80fd\u53bb\u9ad8\u7684\u7ea7\u522b\u7684\u70b9\uff08\u800c\u4e14\u53ea\u80fd\u9ad8 1 1 \u7ea7\u522b\uff09\u3002\u800c\u7ea7\u522b\u5c31\u662f\u5b83\u4e0e\u6e90\u70b9\u7684\u8ddd\u79bb\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u6574\u4f53\u589e\u5e7f\u6765\u4e00\u6b21 BFS \u5c31\u53ef\u4ee5\u4e86\u3002","title":"Dinic"},{"location":"graph/flow/#isap","text":"\u8fd9\u4e2a\u662f SAP SAP \u7b97\u6cd5\u7684\u52a0\u5f3a\u7248 (Improved)\u3002","title":"ISAP"},{"location":"graph/flow/#_6","text":"\u6700\u7b80\u5355\u7684\u5c31\u662f EK+SPFA\uff0c\u4e5f\u63a8\u8350\u7528 zkw \u8d39\u7528\u6d41\u548c\u539f\u59cb\u5bf9\u5076\u5339\u914d\u7b97\u6cd5\u3002","title":"\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u89e3\u6cd5"},{"location":"graph/flow/#_7","text":"\u524d\u9762\u90fd\u770b\u61c2\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee5\u4e0b\u5185\u5bb9\u3002","title":"\u7f51\u7edc\u6d41\u57fa\u7840\u77e5\u8bc6\u62d3\u5c55"},{"location":"graph/flow/#_8","text":"\u5272\u5176\u5b9e\u5c31\u662f\u5220\u8fb9\u7684\u610f\u601d\uff0c\u5f53\u7136\u6700\u5c0f\u5272\u5c31\u662f\u5272\u6389 X X \u6761\u8fb9\u6765\u8ba9 S S \u8ddf T T \u4e0d\u4e92\u901a\u3002\u6211\u4eec\u8981\u6c42 X X \u6761\u8fb9\u52a0\u8d77\u6765\u7684\u6d41\u91cf\u7efc\u5408\u6700\u5c0f\u3002\u8fd9\u5c31\u662f\u6700\u5c0f\u5272\u95ee\u9898\u3002 \u5176\u4e2d\u6211\u4eec\u8981\u8ba4\u8bc6\u4e00\u4e2a\u5b9a\u7406: \u6700\u5c0f\u5272 = \u6700\u5927\u6d41","title":"\u6700\u5c0f\u5272"},{"location":"graph/flow/#_9","text":"\u5308\u7259\u5229\u7b97\u6cd5\u5c31\u662f\u5176\u4e2d\u4e00\u4e2a\u53ef\u64a4\u56de\u8d2a\u5fc3\u7684\u8fc7\u7a0b\uff0c\u800c\u7f51\u7edc\u6d41\u66f4\u5feb\uff0c\u5c31\u5728\u4e8e \u64a4\u56de \u8fd9\u4e00\u8fc7\u7a0b\u5f88\u5feb\u3002","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"graph/flow/#_10","text":"\u5728\u4f1a\u4e86\u6700\u5927\u6d41\u548c\u8d39\u7528\u6d41\u540e\uff0c\u5efa\u6a21\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u5c31\u50cf JZOI \u7684 \u72fc\u4e0e\u7f8a\u7684\u6545\u4e8b \uff0c\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002 \u524d\u671f \u9047\u5230\u8fd9\u79cd\u9898\u76ee\uff0c\u66b4\u641c\uff1f\u795e\u5947 BFS\uff1f\u9519\u8bef\u3002\u6211\u4eec\u9996\u5148\u8981\u8003\u8651\u4e00\u4e0b\u4f1a\u4e0d\u4f1a\u6709 \u4e8c\u5206\u56fe\u5339\u914d \uff0c \u6700\u5c0f\u5272 \u7684\u6a21\u578b\uff08\u4e00\u822c\u4e0d\u4f1a\u6709\u666e\u901a\u7684\u6700\u5927\u6d41\uff09\u3002\u7136\u540e\u5efa\u7acb\uff08\u8d85\u7ea7\uff09\u6e90\u70b9\u548c\uff08\u8d85\u7ea7\uff09\u6c47\u70b9\u3002\u4ec0\u4e48\u610f\u601d\uff1f\u5c31\u662f\u5f53\u5f88\u591a\u4e2a\u6e90\u70b9\u548c\u5f88\u591a\u4e2a\u6c47\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8d85\u7ea7\u6e90\u70b9\u548c\u8d85\u7ea7\u6c47\u70b9\u4ee3\u66ff\u300c\u6e90\u70b9\u300d\u548c\u300c\u6c47\u70b9\u300d\u7684\u4f4d\u7f6e\uff08\u4e5f\u5c31\u662f\u628a\u8d85\u7ea7\u6e90\u70b9\u8fde\u5411\u5404\u4e2a\u6e90\u70b9\uff0c\u8d85\u7ea7\u6c47\u70b9\u8fde\u5411\u5404\u4e2a\u6c47\u70b9\uff0c\u65b9\u5411\u6309\u9898\u610f\u6765\u5b9a\uff09\u3002 \u8fd9\u662f\u6700\u5e38\u89c1\u7684\u5efa\u6a21\u7684\u65b9\u6cd5\u4e4b\u4e00\uff0c\u4e5f\u662f\u505a\u4e8c\u5206\u56fe\u5339\u914d\u7684\u65b9\u6cd5\u3002\u8fd8\u6709\u5f88\u591a\u5efa\u6a21\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003 \u7f51\u7edc\u6d41\u5efa\u6a21\u57fa\u7840 \u3002 \u6765\u4e00\u9053\u9898\u7ec3\u7ec3\u624b: \u6c99\u8036\u7684\u73a9\u5076 \u3002","title":"\u5efa\u6a21"},{"location":"graph/heavy-light-decomposition/","text":"\u5728\u5b66\u4e60\u672c\u90e8\u5206\u65f6\uff0c\u8bf7\u5148\u5b66\u4e60 \u7ebf\u6bb5\u6811 \u7684\u76f8\u5173\u5185\u5bb9\u3002 \u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u53ca\u80fd\u89e3\u51b3\u7684\u95ee\u9898 \u00b6 \u4e00\u68f5\u9759\u6001\uff08\u5f62\u72b6\u56fa\u5b9a\u7684\uff09\u6811\uff0c\u8981\u6c42\u8fdb\u884c\u51e0\u79cd\u64cd\u4f5c\uff1a \u4fee\u6539 \u5355\u4e2a\u8282\u70b9 / \u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84 / \u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0a \u7684\u6240\u6709\u70b9\u7684\u503c\u3002 \u67e5\u8be2 \u5355\u4e2a\u8282\u70b9 / \u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84 / \u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0a \u8282\u70b9\u7684\u503c\u7684 \u548c / \u6781\u503c / \u5176\u4ed6\uff08\u5177\u6709\u8f83\u5f3a\u7684\u5408\u5e76\u6027\uff09 \u3002 \u5982\u679c\u6811\u7684\u5f62\u6001\u662f\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u4fee\u6539\u6216\u67e5\u8be2\u7ebf\u6bb5\u6811\u7684\u503c\u3002 \u56e0\u4e3a\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6811\u5256\u5206\u6210\u591a\u4e2a\u94fe\uff0c\u5e76\u7528\u7ebf\u6bb5\u6811\u4fee\u6539\u6216\u67e5\u8be2\u7b54\u6848\uff0c\u8fd9\u5c31\u662f\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u3002 \u5982\u679c\u6811\u662f\u52a8\u6001\u7684\uff0c\u9700\u8981\u4f7f\u7528 LCT \u6765\u89e3\u51b3\u3002 \u7531\u4e8e\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u5341\u5206\u66b4\u529b\uff0c\u6240\u4ee5\u88ab OIers \u620f\u79f0\u4e3a \u201c\u4f18\u96c5\u7684\u66b4\u529b\u201d \u3002 \u4f8b\u9898 luogu P2590 [ZJOI2008] \u6811\u7684\u7edf\u8ba1 \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u5bf9\u4e00\u68f5\u6709 n n \u4e2a\u8282\u70b9\u7684\u9759\u6001\u6811\uff0c\u8fdb\u884c\u4e09\u79cd\u64cd\u4f5c\u5171 q q \u6b21\uff1a \u4fee\u6539\u5355\u4e2a\u8282\u70b9\u7684\u503c\uff1b \u67e5\u8be2 u u \u5230 v v \u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff1b \u67e5\u8be2 u u \u5230 v v \u7684\u8def\u5f84\u4e0a\u7684\u6743\u503c\u548c\u3002 \u9898\u76ee\u4fdd\u8bc1 1\\le n\\le 30000,0\\le q\\le 200000 1\\le n\\le 30000,0\\le q\\le 200000 \u4e00\u4e9b\u5b9a\u4e49 \u00b6 fa(x) fa(x) \u8868\u793a\u8282\u70b9 x x \u5728\u6811\u4e0a\u7684\u7236\u4eb2\u3002 dep(x) dep(x) \u8868\u793a\u8282\u70b9 x x \u5728\u6811\u4e0a\u7684\u6df1\u5ea6\u3002 siz(x) siz(x) \u8868\u793a\u8282\u70b9 x x \u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002 son(x) son(x) \u8868\u793a\u8282\u70b9 x x \u7684 \u91cd\u513f\u5b50 \uff0c\u5373\u6240\u6709\u513f\u5b50\u4e2d\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u4e00\u4e2a\u3002 \u5b9a\u4e49 \u91cd\u8fb9 \u8868\u793a\u8fde\u63a5\u4e24\u4e2a\u91cd\u513f\u5b50\u7684\u8fb9\u3002 \u5b9a\u4e49 \u91cd\u8def\u5f84 \u8868\u793a\u91cd\u8fb9\u8fde\u6210\u7684\u4e00\u6761\u94fe\u3002 top(x) top(x) \u8868\u793a\u8282\u70b9 x x \u6240\u5728 \u91cd\u8def\u5f84 \u7684\u9876\u90e8\u8282\u70b9\uff08\u6df1\u5ea6\u6700\u5c0f\uff09\u3002 tid(x) tid(x) \u8868\u793a\u8282\u70b9 x x \u7684 \u65f6\u95f4\u6233 \uff0c\u4e5f\u662f\u5176\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u7f16\u53f7\u3002 rnk(x) rnk(x) \u8868\u793a\u65f6\u95f4\u6233\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u6709 rnk(tid(x))=x rnk(tid(x))=x \u3002 \u6211\u4eec\u8fdb\u884c\u4e24\u904d DFS \u9884\u5904\u7406\u51fa\u8fd9\u4e9b\u503c\uff0c\u5176\u4e2d\u7b2c\u4e00\u6b21 DFS \u6c42\u51fa fa(x),dep(x),siz(x),son(x) fa(x),dep(x),siz(x),son(x) \uff0c\u7b2c\u4e8c\u6b21 DFS \u6c42\u51fa top(x),tid(x),rnk(x) top(x),tid(x),rnk(x) \u3002 \u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void dfs1 ( int o , int fat ) { son [ o ] = - 1 ; siz [ o ] = 1 ; for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( ! dep [ p [ j ]]) { dep [ p [ j ]] = dep [ o ] + 1 ; fa [ p [ j ]] = o ; dfs1 ( p [ j ], o ); siz [ o ] += siz [ p [ j ]]; if ( son [ o ] == - 1 || siz [ p [ j ]] > siz [ son [ o ]]) son [ o ] = p [ j ]; } } void dfs2 ( int o , int t ) { top [ o ] = t ; cnt ++ ; tid [ o ] = cnt ; rnk [ cnt ] = o ; if ( son [ o ] == - 1 ) return ; dfs2 ( son [ o ], t ); for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( p [ j ] != son [ o ] && p [ j ] != fa [ o ]) dfs2 ( p [ j ], p [ j ]); } \u8fd9\u6837\u6784\u6210\u7684\u7ebf\u6bb5\u6811\u6709\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28\uff0c\u8fd9\u662f\u539f\u6811\u7684\u4e00\u4e2a DFS \u5e8f\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5728\u7ebf\u6bb5\u6811\u4e2d\u662f\u76f8\u8fde\u7684\uff0c \u6240\u6709\u91cd\u94fe\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e5f\u662f\u76f8\u8fde\u7684 \u3002 \u89e3\u6cd5 \u00b6 \u6839\u636e\u9898\u9762\u4ee5\u53ca\u4ee5\u4e0a\u7684\u6027\u8d28\uff0c\u4f60\u7684\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u4e09\u79cd\u64cd\u4f5c\uff1a \u5355\u70b9\u4fee\u6539\uff1b \u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\uff1b \u533a\u95f4\u67e5\u8be2\u548c\u3002 \u5355\u70b9\u4fee\u6539\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002 \u4fee\u6539\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e5f\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002 \u95ee\u9898\u662f\u5982\u4f55\u4fee\u6539 / \u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u3002 \u8003\u8651\u6211\u4eec\u662f\u5982\u4f55\u7528 \u500d\u589e\u6cd5\u6c42\u89e3 LCA \u7684\u3002\u9996\u5148\u6211\u4eec \u5c06\u4e24\u4e2a\u8282\u70b9\u63d0\u5230\u540c\u4e00\u9ad8\u5ea6\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u8282\u70b9\u4e00\u8d77\u5411\u4e0a\u8df3 \u3002\u5bf9\u4e8e\u6811\u94fe\u5256\u5206\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684\u601d\u60f3\u3002 \u5728\u5411\u4e0a\u8df3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u91cd\u94fe\u4e0a\uff0c\u501f\u52a9\u7ebf\u6bb5\u6811\u5411\u4e0a\u8df3\u5230\u91cd\u94fe\u9876\u7aef\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u5728\u91cd\u94fe\u4e0a\uff0c\u5411\u4e0a\u8df3\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u6b64\u76f4\u5230\u4e24\u8282\u70b9\u76f8\u540c\u3002\u6cbf\u9014\u66f4\u65b0 / \u67e5\u8be2\u533a\u95f4\u4fe1\u606f\u3002 \u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // st \u662f\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53 int querymax ( int x , int y ) { int ret = - inf , fx = top [ x ], fy = top [ y ]; while ( fx != fy ) { if ( dep [ fx ] >= dep [ fy ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fx ], tid [ x ])), x = fa [ fx ]; else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fy ], tid [ y ])), y = fa [ fy ]; fx = top [ x ]; fy = top [ y ]; } if ( x != y ) { if ( tid [ x ] < tid [ y ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ y ], tid [ x ])); } else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); return ret ; } \u5b8c\u6574\u4ee3\u7801 \u00b6 \u9274\u4e8e\u6811\u94fe\u5256\u5206\u7684\u9898\u76ee\u7ec6\u8282\u8f83\u591a\uff0c\u5bb9\u6613\u6253\u9519\uff0c\u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff0c\u4ee5\u4f9b\u53c2\u8003\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #include <algorithm> #include <cstdio> #include <cstring> #define lc o << 1 #define rc o << 1 | 1 using namespace std ; const int maxn = 60010 ; const int inf = 2e9 ; int n , a , b , w [ maxn ], q , u , v ; int cur , h [ maxn ], nxt [ maxn ], p [ maxn ]; int siz [ maxn ], top [ maxn ], son [ maxn ], dep [ maxn ], fa [ maxn ], tid [ maxn ], rnk [ maxn ], cnt ; char op [ 10 ]; inline void add_edge ( int x , int y ) { cur ++ ; nxt [ cur ] = h [ x ]; h [ x ] = cur ; p [ cur ] = y ; } struct SegTree { int sum [ maxn * 4 ], maxx [ maxn * 4 ]; void build ( int o , int l , int r ) { if ( l == r ) { sum [ o ] = maxx [ o ] = w [ rnk [ l ]]; return ; } int mid = ( l + r ) >> 1 ; build ( lc , l , mid ); build ( rc , mid + 1 , r ); sum [ o ] = sum [ lc ] + sum [ rc ]; maxx [ o ] = max ( maxx [ lc ], maxx [ rc ]); } int query1 ( int o , int l , int r , int ql , int qr ) // max { if ( l > qr || r < ql ) return - inf ; if ( ql <= l && r <= qr ) return maxx [ o ]; int mid = ( l + r ) >> 1 ; return max ( query1 ( lc , l , mid , ql , qr ), query1 ( rc , mid + 1 , r , ql , qr )); } int query2 ( int o , int l , int r , int ql , int qr ) // sum { if ( l > qr || r < ql ) return 0 ; if ( ql <= l && r <= qr ) return sum [ o ]; int mid = ( l + r ) >> 1 ; return query2 ( lc , l , mid , ql , qr ) + query2 ( rc , mid + 1 , r , ql , qr ); } void update ( int o , int l , int r , int x , int t ) { if ( l == r ) { maxx [ o ] = sum [ o ] = t ; return ; } int mid = ( l + r ) >> 1 ; if ( x <= mid ) update ( lc , l , mid , x , t ); else update ( rc , mid + 1 , r , x , t ); sum [ o ] = sum [ lc ] + sum [ rc ]; maxx [ o ] = max ( maxx [ lc ], maxx [ rc ]); } } st ; void dfs1 ( int o , int fat ) { son [ o ] = - 1 ; siz [ o ] = 1 ; for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( ! dep [ p [ j ]]) { dep [ p [ j ]] = dep [ o ] + 1 ; fa [ p [ j ]] = o ; dfs1 ( p [ j ], o ); siz [ o ] += siz [ p [ j ]]; if ( son [ o ] == - 1 || siz [ p [ j ]] > siz [ son [ o ]]) son [ o ] = p [ j ]; } } void dfs2 ( int o , int t ) { top [ o ] = t ; cnt ++ ; tid [ o ] = cnt ; rnk [ cnt ] = o ; if ( son [ o ] == - 1 ) return ; dfs2 ( son [ o ], t ); for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( p [ j ] != son [ o ] && p [ j ] != fa [ o ]) dfs2 ( p [ j ], p [ j ]); } int querymax ( int x , int y ) { int ret = - inf , fx = top [ x ], fy = top [ y ]; while ( fx != fy ) { if ( dep [ fx ] >= dep [ fy ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fx ], tid [ x ])), x = fa [ fx ]; else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fy ], tid [ y ])), y = fa [ fy ]; fx = top [ x ]; fy = top [ y ]; } if ( x != y ) { if ( tid [ x ] < tid [ y ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ y ], tid [ x ])); } else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); return ret ; } int querysum ( int x , int y ) { int ret = 0 , fx = top [ x ], fy = top [ y ]; while ( fx != fy ) { if ( dep [ fx ] >= dep [ fy ]) ret += st . query2 ( 1 , 1 , n , tid [ fx ], tid [ x ]), x = fa [ fx ]; else ret += st . query2 ( 1 , 1 , n , tid [ fy ], tid [ y ]), y = fa [ fy ]; fx = top [ x ]; fy = top [ y ]; } if ( x != y ) { if ( tid [ x ] < tid [ y ]) ret += st . query2 ( 1 , 1 , n , tid [ x ], tid [ y ]); else ret += st . query2 ( 1 , 1 , n , tid [ y ], tid [ x ]); } else ret += st . query2 ( 1 , 1 , n , tid [ x ], tid [ y ]); return ret ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; i ++ ) scanf ( \"%d%d\" , & a , & b ), add_edge ( a , b ), add_edge ( b , a ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , w + i ); dep [ 1 ] = 1 ; dfs1 ( 1 , - 1 ); dfs2 ( 1 , 1 ); st . build ( 1 , 1 , n ); scanf ( \"%d\" , & q ); while ( q -- ) { scanf ( \"%s%d%d\" , op , & u , & v ); if ( ! strcmp ( op , \"CHANGE\" )) st . update ( 1 , 1 , n , tid [ u ], v ); if ( ! strcmp ( op , \"QMAX\" )) printf ( \"%d \\n \" , querymax ( u , v )); if ( ! strcmp ( op , \"QSUM\" )) printf ( \"%d \\n \" , querysum ( u , v )); } return 0 ; } \u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e \u00b6 \u4ee5\u4e0a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(q \\log^2 n) O(q \\log^2 n) \uff0c\u4e0b\u8bc1\uff1a \u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c u u \u662f v v \u7684\u7236\u4eb2\uff0c\u4e14 v v \u4e0d\u662f u u \u7684\u91cd\u513f\u5b50\uff0c\u6709 siz(v)\\le \\frac{1}{2} siz(u) siz(v)\\le \\frac{1}{2} siz(u) \u3002 \u56e0\u4e3a\u5982\u679c siz(v)> \\frac{1}{2} siz(u) siz(v)> \\frac{1}{2} siz(u) \uff0c\u90a3\u4e48 siz(v) siz(v) \u5927\u4e8e\u5176\u4ed6 u u \u7684\u513f\u5b50\u7684 siz siz \u7684\u548c\uff0c\u5c31\u6709 siz(v) siz(v) \u5927\u4e8e\u5176\u4ed6 u u \u7684\u513f\u5b50\u7684 siz siz \u3002\u8fd9\u6837 v v \u4e00\u5b9a\u662f u u \u7684\u91cd\u513f\u5b50\uff0c\u4e0e\u9898\u8bbe\u4e0d\u7b26\u3002 \u7531\u6b64\u53ef\u77e5\uff0c\u6bcf\u6b21\u67e5\u8be2\u64cd\u4f5c\uff0c\u6211\u4eec\u987a\u7740 \u975e\u91cd\u94fe \u5411\u4e0a\u8df3\uff0c\u5176\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e00\u5b9a\u81f3\u5c11 \u4e58\u4ee5 2 \u3002\u5982\u679c\u6211\u4eec\u987a\u7740\u91cd\u94fe\u5411\u4e0a\u8df3\uff0c\u5176\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e5f\u4f1a\u4e58\u4ee5 2\uff0c\u6700\u5927\u4e3a n n \u3002 \u7531\u4e8e\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u6700\u591a\u4e3a n n \uff0c\u6240\u4ee5\u6211\u4eec\u6700\u591a\u53ea\u9700\u8981\u5411\u4e0a\u8df3 O(\\log n) O(\\log n) \u6b21\u3002\u518d\u4e58\u4e0a\u7ebf\u6bb5\u6811\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(\\log n) O(\\log n) \u548c\u64cd\u4f5c\u6570 O(q) O(q) \uff0c\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(q \\log^2 n) O(q \\log^2 n) \u3002\u8bc1\u6bd5\u3002 \u7ec3\u4e60 \u00b6 luogu P3258 [JLOI2014] \u677e\u9f20\u7684\u65b0\u5bb6 \uff08\u5f53\u7136\u53ef\u4ee5\u7528\u6811\u4e0a\u5dee\u5206\uff09 luogu P3178 [HAOI2015] \u6811\u4e0a\u64cd\u4f5c luogu P3384 \u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206 luogu P2146 [NOI2015] \u8f6f\u4ef6\u5305\u7ba1\u7406\u5668 luogu P2486 [SDOI2011] \u67d3\u8272 luogu P3313 [SDOI2014] \u65c5\u884c","title":"\u6811\u94fe\u5256\u5206"},{"location":"graph/heavy-light-decomposition/#_1","text":"\u4e00\u68f5\u9759\u6001\uff08\u5f62\u72b6\u56fa\u5b9a\u7684\uff09\u6811\uff0c\u8981\u6c42\u8fdb\u884c\u51e0\u79cd\u64cd\u4f5c\uff1a \u4fee\u6539 \u5355\u4e2a\u8282\u70b9 / \u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84 / \u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0a \u7684\u6240\u6709\u70b9\u7684\u503c\u3002 \u67e5\u8be2 \u5355\u4e2a\u8282\u70b9 / \u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84 / \u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0a \u8282\u70b9\u7684\u503c\u7684 \u548c / \u6781\u503c / \u5176\u4ed6\uff08\u5177\u6709\u8f83\u5f3a\u7684\u5408\u5e76\u6027\uff09 \u3002 \u5982\u679c\u6811\u7684\u5f62\u6001\u662f\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u4fee\u6539\u6216\u67e5\u8be2\u7ebf\u6bb5\u6811\u7684\u503c\u3002 \u56e0\u4e3a\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6811\u5256\u5206\u6210\u591a\u4e2a\u94fe\uff0c\u5e76\u7528\u7ebf\u6bb5\u6811\u4fee\u6539\u6216\u67e5\u8be2\u7b54\u6848\uff0c\u8fd9\u5c31\u662f\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u3002 \u5982\u679c\u6811\u662f\u52a8\u6001\u7684\uff0c\u9700\u8981\u4f7f\u7528 LCT \u6765\u89e3\u51b3\u3002 \u7531\u4e8e\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u5341\u5206\u66b4\u529b\uff0c\u6240\u4ee5\u88ab OIers \u620f\u79f0\u4e3a \u201c\u4f18\u96c5\u7684\u66b4\u529b\u201d \u3002","title":"\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u53ca\u80fd\u89e3\u51b3\u7684\u95ee\u9898"},{"location":"graph/heavy-light-decomposition/#luogu-p2590-91zjoi200893","text":"\u9898\u76ee\u5927\u610f\uff1a\u5bf9\u4e00\u68f5\u6709 n n \u4e2a\u8282\u70b9\u7684\u9759\u6001\u6811\uff0c\u8fdb\u884c\u4e09\u79cd\u64cd\u4f5c\u5171 q q \u6b21\uff1a \u4fee\u6539\u5355\u4e2a\u8282\u70b9\u7684\u503c\uff1b \u67e5\u8be2 u u \u5230 v v \u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff1b \u67e5\u8be2 u u \u5230 v v \u7684\u8def\u5f84\u4e0a\u7684\u6743\u503c\u548c\u3002 \u9898\u76ee\u4fdd\u8bc1 1\\le n\\le 30000,0\\le q\\le 200000 1\\le n\\le 30000,0\\le q\\le 200000","title":"\u4f8b\u9898 luogu P2590 [ZJOI2008] \u6811\u7684\u7edf\u8ba1"},{"location":"graph/heavy-light-decomposition/#_2","text":"fa(x) fa(x) \u8868\u793a\u8282\u70b9 x x \u5728\u6811\u4e0a\u7684\u7236\u4eb2\u3002 dep(x) dep(x) \u8868\u793a\u8282\u70b9 x x \u5728\u6811\u4e0a\u7684\u6df1\u5ea6\u3002 siz(x) siz(x) \u8868\u793a\u8282\u70b9 x x \u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002 son(x) son(x) \u8868\u793a\u8282\u70b9 x x \u7684 \u91cd\u513f\u5b50 \uff0c\u5373\u6240\u6709\u513f\u5b50\u4e2d\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u4e00\u4e2a\u3002 \u5b9a\u4e49 \u91cd\u8fb9 \u8868\u793a\u8fde\u63a5\u4e24\u4e2a\u91cd\u513f\u5b50\u7684\u8fb9\u3002 \u5b9a\u4e49 \u91cd\u8def\u5f84 \u8868\u793a\u91cd\u8fb9\u8fde\u6210\u7684\u4e00\u6761\u94fe\u3002 top(x) top(x) \u8868\u793a\u8282\u70b9 x x \u6240\u5728 \u91cd\u8def\u5f84 \u7684\u9876\u90e8\u8282\u70b9\uff08\u6df1\u5ea6\u6700\u5c0f\uff09\u3002 tid(x) tid(x) \u8868\u793a\u8282\u70b9 x x \u7684 \u65f6\u95f4\u6233 \uff0c\u4e5f\u662f\u5176\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u7f16\u53f7\u3002 rnk(x) rnk(x) \u8868\u793a\u65f6\u95f4\u6233\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u6709 rnk(tid(x))=x rnk(tid(x))=x \u3002 \u6211\u4eec\u8fdb\u884c\u4e24\u904d DFS \u9884\u5904\u7406\u51fa\u8fd9\u4e9b\u503c\uff0c\u5176\u4e2d\u7b2c\u4e00\u6b21 DFS \u6c42\u51fa fa(x),dep(x),siz(x),son(x) fa(x),dep(x),siz(x),son(x) \uff0c\u7b2c\u4e8c\u6b21 DFS \u6c42\u51fa top(x),tid(x),rnk(x) top(x),tid(x),rnk(x) \u3002 \u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void dfs1 ( int o , int fat ) { son [ o ] = - 1 ; siz [ o ] = 1 ; for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( ! dep [ p [ j ]]) { dep [ p [ j ]] = dep [ o ] + 1 ; fa [ p [ j ]] = o ; dfs1 ( p [ j ], o ); siz [ o ] += siz [ p [ j ]]; if ( son [ o ] == - 1 || siz [ p [ j ]] > siz [ son [ o ]]) son [ o ] = p [ j ]; } } void dfs2 ( int o , int t ) { top [ o ] = t ; cnt ++ ; tid [ o ] = cnt ; rnk [ cnt ] = o ; if ( son [ o ] == - 1 ) return ; dfs2 ( son [ o ], t ); for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( p [ j ] != son [ o ] && p [ j ] != fa [ o ]) dfs2 ( p [ j ], p [ j ]); } \u8fd9\u6837\u6784\u6210\u7684\u7ebf\u6bb5\u6811\u6709\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28\uff0c\u8fd9\u662f\u539f\u6811\u7684\u4e00\u4e2a DFS \u5e8f\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5728\u7ebf\u6bb5\u6811\u4e2d\u662f\u76f8\u8fde\u7684\uff0c \u6240\u6709\u91cd\u94fe\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e5f\u662f\u76f8\u8fde\u7684 \u3002","title":"\u4e00\u4e9b\u5b9a\u4e49"},{"location":"graph/heavy-light-decomposition/#_3","text":"\u6839\u636e\u9898\u9762\u4ee5\u53ca\u4ee5\u4e0a\u7684\u6027\u8d28\uff0c\u4f60\u7684\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u4e09\u79cd\u64cd\u4f5c\uff1a \u5355\u70b9\u4fee\u6539\uff1b \u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\uff1b \u533a\u95f4\u67e5\u8be2\u548c\u3002 \u5355\u70b9\u4fee\u6539\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002 \u4fee\u6539\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e5f\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002 \u95ee\u9898\u662f\u5982\u4f55\u4fee\u6539 / \u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u3002 \u8003\u8651\u6211\u4eec\u662f\u5982\u4f55\u7528 \u500d\u589e\u6cd5\u6c42\u89e3 LCA \u7684\u3002\u9996\u5148\u6211\u4eec \u5c06\u4e24\u4e2a\u8282\u70b9\u63d0\u5230\u540c\u4e00\u9ad8\u5ea6\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u8282\u70b9\u4e00\u8d77\u5411\u4e0a\u8df3 \u3002\u5bf9\u4e8e\u6811\u94fe\u5256\u5206\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684\u601d\u60f3\u3002 \u5728\u5411\u4e0a\u8df3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u91cd\u94fe\u4e0a\uff0c\u501f\u52a9\u7ebf\u6bb5\u6811\u5411\u4e0a\u8df3\u5230\u91cd\u94fe\u9876\u7aef\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u5728\u91cd\u94fe\u4e0a\uff0c\u5411\u4e0a\u8df3\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u6b64\u76f4\u5230\u4e24\u8282\u70b9\u76f8\u540c\u3002\u6cbf\u9014\u66f4\u65b0 / \u67e5\u8be2\u533a\u95f4\u4fe1\u606f\u3002 \u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // st \u662f\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53 int querymax ( int x , int y ) { int ret = - inf , fx = top [ x ], fy = top [ y ]; while ( fx != fy ) { if ( dep [ fx ] >= dep [ fy ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fx ], tid [ x ])), x = fa [ fx ]; else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fy ], tid [ y ])), y = fa [ fy ]; fx = top [ x ]; fy = top [ y ]; } if ( x != y ) { if ( tid [ x ] < tid [ y ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ y ], tid [ x ])); } else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); return ret ; }","title":"\u89e3\u6cd5"},{"location":"graph/heavy-light-decomposition/#_4","text":"\u9274\u4e8e\u6811\u94fe\u5256\u5206\u7684\u9898\u76ee\u7ec6\u8282\u8f83\u591a\uff0c\u5bb9\u6613\u6253\u9519\uff0c\u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff0c\u4ee5\u4f9b\u53c2\u8003\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #include <algorithm> #include <cstdio> #include <cstring> #define lc o << 1 #define rc o << 1 | 1 using namespace std ; const int maxn = 60010 ; const int inf = 2e9 ; int n , a , b , w [ maxn ], q , u , v ; int cur , h [ maxn ], nxt [ maxn ], p [ maxn ]; int siz [ maxn ], top [ maxn ], son [ maxn ], dep [ maxn ], fa [ maxn ], tid [ maxn ], rnk [ maxn ], cnt ; char op [ 10 ]; inline void add_edge ( int x , int y ) { cur ++ ; nxt [ cur ] = h [ x ]; h [ x ] = cur ; p [ cur ] = y ; } struct SegTree { int sum [ maxn * 4 ], maxx [ maxn * 4 ]; void build ( int o , int l , int r ) { if ( l == r ) { sum [ o ] = maxx [ o ] = w [ rnk [ l ]]; return ; } int mid = ( l + r ) >> 1 ; build ( lc , l , mid ); build ( rc , mid + 1 , r ); sum [ o ] = sum [ lc ] + sum [ rc ]; maxx [ o ] = max ( maxx [ lc ], maxx [ rc ]); } int query1 ( int o , int l , int r , int ql , int qr ) // max { if ( l > qr || r < ql ) return - inf ; if ( ql <= l && r <= qr ) return maxx [ o ]; int mid = ( l + r ) >> 1 ; return max ( query1 ( lc , l , mid , ql , qr ), query1 ( rc , mid + 1 , r , ql , qr )); } int query2 ( int o , int l , int r , int ql , int qr ) // sum { if ( l > qr || r < ql ) return 0 ; if ( ql <= l && r <= qr ) return sum [ o ]; int mid = ( l + r ) >> 1 ; return query2 ( lc , l , mid , ql , qr ) + query2 ( rc , mid + 1 , r , ql , qr ); } void update ( int o , int l , int r , int x , int t ) { if ( l == r ) { maxx [ o ] = sum [ o ] = t ; return ; } int mid = ( l + r ) >> 1 ; if ( x <= mid ) update ( lc , l , mid , x , t ); else update ( rc , mid + 1 , r , x , t ); sum [ o ] = sum [ lc ] + sum [ rc ]; maxx [ o ] = max ( maxx [ lc ], maxx [ rc ]); } } st ; void dfs1 ( int o , int fat ) { son [ o ] = - 1 ; siz [ o ] = 1 ; for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( ! dep [ p [ j ]]) { dep [ p [ j ]] = dep [ o ] + 1 ; fa [ p [ j ]] = o ; dfs1 ( p [ j ], o ); siz [ o ] += siz [ p [ j ]]; if ( son [ o ] == - 1 || siz [ p [ j ]] > siz [ son [ o ]]) son [ o ] = p [ j ]; } } void dfs2 ( int o , int t ) { top [ o ] = t ; cnt ++ ; tid [ o ] = cnt ; rnk [ cnt ] = o ; if ( son [ o ] == - 1 ) return ; dfs2 ( son [ o ], t ); for ( int j = h [ o ]; j ; j = nxt [ j ]) if ( p [ j ] != son [ o ] && p [ j ] != fa [ o ]) dfs2 ( p [ j ], p [ j ]); } int querymax ( int x , int y ) { int ret = - inf , fx = top [ x ], fy = top [ y ]; while ( fx != fy ) { if ( dep [ fx ] >= dep [ fy ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fx ], tid [ x ])), x = fa [ fx ]; else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ fy ], tid [ y ])), y = fa [ fy ]; fx = top [ x ]; fy = top [ y ]; } if ( x != y ) { if ( tid [ x ] < tid [ y ]) ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ y ], tid [ x ])); } else ret = max ( ret , st . query1 ( 1 , 1 , n , tid [ x ], tid [ y ])); return ret ; } int querysum ( int x , int y ) { int ret = 0 , fx = top [ x ], fy = top [ y ]; while ( fx != fy ) { if ( dep [ fx ] >= dep [ fy ]) ret += st . query2 ( 1 , 1 , n , tid [ fx ], tid [ x ]), x = fa [ fx ]; else ret += st . query2 ( 1 , 1 , n , tid [ fy ], tid [ y ]), y = fa [ fy ]; fx = top [ x ]; fy = top [ y ]; } if ( x != y ) { if ( tid [ x ] < tid [ y ]) ret += st . query2 ( 1 , 1 , n , tid [ x ], tid [ y ]); else ret += st . query2 ( 1 , 1 , n , tid [ y ], tid [ x ]); } else ret += st . query2 ( 1 , 1 , n , tid [ x ], tid [ y ]); return ret ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; i ++ ) scanf ( \"%d%d\" , & a , & b ), add_edge ( a , b ), add_edge ( b , a ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , w + i ); dep [ 1 ] = 1 ; dfs1 ( 1 , - 1 ); dfs2 ( 1 , 1 ); st . build ( 1 , 1 , n ); scanf ( \"%d\" , & q ); while ( q -- ) { scanf ( \"%s%d%d\" , op , & u , & v ); if ( ! strcmp ( op , \"CHANGE\" )) st . update ( 1 , 1 , n , tid [ u ], v ); if ( ! strcmp ( op , \"QMAX\" )) printf ( \"%d \\n \" , querymax ( u , v )); if ( ! strcmp ( op , \"QSUM\" )) printf ( \"%d \\n \" , querysum ( u , v )); } return 0 ; }","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"graph/heavy-light-decomposition/#_5","text":"\u4ee5\u4e0a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(q \\log^2 n) O(q \\log^2 n) \uff0c\u4e0b\u8bc1\uff1a \u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c u u \u662f v v \u7684\u7236\u4eb2\uff0c\u4e14 v v \u4e0d\u662f u u \u7684\u91cd\u513f\u5b50\uff0c\u6709 siz(v)\\le \\frac{1}{2} siz(u) siz(v)\\le \\frac{1}{2} siz(u) \u3002 \u56e0\u4e3a\u5982\u679c siz(v)> \\frac{1}{2} siz(u) siz(v)> \\frac{1}{2} siz(u) \uff0c\u90a3\u4e48 siz(v) siz(v) \u5927\u4e8e\u5176\u4ed6 u u \u7684\u513f\u5b50\u7684 siz siz \u7684\u548c\uff0c\u5c31\u6709 siz(v) siz(v) \u5927\u4e8e\u5176\u4ed6 u u \u7684\u513f\u5b50\u7684 siz siz \u3002\u8fd9\u6837 v v \u4e00\u5b9a\u662f u u \u7684\u91cd\u513f\u5b50\uff0c\u4e0e\u9898\u8bbe\u4e0d\u7b26\u3002 \u7531\u6b64\u53ef\u77e5\uff0c\u6bcf\u6b21\u67e5\u8be2\u64cd\u4f5c\uff0c\u6211\u4eec\u987a\u7740 \u975e\u91cd\u94fe \u5411\u4e0a\u8df3\uff0c\u5176\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e00\u5b9a\u81f3\u5c11 \u4e58\u4ee5 2 \u3002\u5982\u679c\u6211\u4eec\u987a\u7740\u91cd\u94fe\u5411\u4e0a\u8df3\uff0c\u5176\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e5f\u4f1a\u4e58\u4ee5 2\uff0c\u6700\u5927\u4e3a n n \u3002 \u7531\u4e8e\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u6700\u591a\u4e3a n n \uff0c\u6240\u4ee5\u6211\u4eec\u6700\u591a\u53ea\u9700\u8981\u5411\u4e0a\u8df3 O(\\log n) O(\\log n) \u6b21\u3002\u518d\u4e58\u4e0a\u7ebf\u6bb5\u6811\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(\\log n) O(\\log n) \u548c\u64cd\u4f5c\u6570 O(q) O(q) \uff0c\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(q \\log^2 n) O(q \\log^2 n) \u3002\u8bc1\u6bd5\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"graph/heavy-light-decomposition/#_6","text":"luogu P3258 [JLOI2014] \u677e\u9f20\u7684\u65b0\u5bb6 \uff08\u5f53\u7136\u53ef\u4ee5\u7528\u6811\u4e0a\u5dee\u5206\uff09 luogu P3178 [HAOI2015] \u6811\u4e0a\u64cd\u4f5c luogu P3384 \u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206 luogu P2146 [NOI2015] \u8f6f\u4ef6\u5305\u7ba1\u7406\u5668 luogu P2486 [SDOI2011] \u67d3\u8272 luogu P3313 [SDOI2014] \u65c5\u884c","title":"\u7ec3\u4e60"},{"location":"graph/kth-path/","text":"","title":"k \u77ed\u8def"},{"location":"graph/lca/","text":"\u5b9a\u4e49 \u00b6 \u6700\u8fd1\u516c\u5171\u7956\u5148\u7b80\u79f0 LCA\uff08Lowest Common Ancestor\uff09\u3002\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u7684\u516c\u5171\u7956\u5148\u91cc\u9762\uff0c\u79bb\u6839\u6700\u8fdc\u7684\u90a3\u4e2a\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u8bb0\u67d0\u70b9\u96c6 S={v_1,v_2,\\ldots,v_n} S={v_1,v_2,\\ldots,v_n} \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a \\text{LCA}(v_1,v_2,\\ldots,v_n) \\text{LCA}(v_1,v_2,\\ldots,v_n) \u6216 \\text{LCA}(S) \\text{LCA}(S) \u3002 \u6027\u8d28 \u00b6 \\text{LCA}({u})=u \\text{LCA}({u})=u \uff1b u u \u662f v v \u7684\u7956\u5148\uff0c\u5f53\u4e14\u4ec5\u5f53 \\text{LCA}(u,v)=u \\text{LCA}(u,v)=u \uff1b \u5982\u679c u u \u4e0d\u4e3a v v \u7684\u7956\u5148\u5e76\u4e14 v v \u4e0d\u4e3a u u \u7684\u7956\u5148\uff0c\u90a3\u4e48 u,v u,v \u5206\u522b\u5904\u4e8e \\text{LCA}(u,v) \\text{LCA}(u,v) \u7684\u4e24\u68f5\u4e0d\u540c\u5b50\u6811\u4e2d\uff1b \u524d\u5e8f\u904d\u5386\u4e2d\uff0c \\text{LCA}(S) \\text{LCA}(S) \u51fa\u73b0\u5728\u6240\u6709 S S \u4e2d\u5143\u7d20\u4e4b\u524d\uff0c\u540e\u5e8f\u904d\u5386\u4e2d \\text{LCA}(S) \\text{LCA}(S) \u5219\u51fa\u73b0\u5728\u6240\u6709 S S \u4e2d\u5143\u7d20\u4e4b\u540e\uff1b \u4e24\u70b9\u96c6\u5e76\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a\u4e24\u70b9\u96c6\u5206\u522b\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5373 \\text{LCA}(A\\cup B)=\\text{LCA}(\\text{LCA}(A), \\text{LCA}(B)) \\text{LCA}(A\\cup B)=\\text{LCA}(\\text{LCA}(A), \\text{LCA}(B)) \uff1b \u4e24\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5fc5\u5b9a\u5904\u5728\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u4e0a\uff1b d(u,v)=h(u)+h(v)-2h(\\text{LCA}(u,v)) d(u,v)=h(u)+h(v)-2h(\\text{LCA}(u,v)) \uff0c\u5176\u4e2d d d \u662f\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c h h \u4ee3\u8868\u67d0\u70b9\u5230\u6811\u6839\u7684\u8ddd\u79bb\u3002 \u6c42\u6cd5 \u00b6 \u6734\u7d20\u7b97\u6cd5 \u00b6 \u53ef\u4ee5\u6bcf\u6b21\u627e\u6df1\u5ea6\u6bd4\u8f83\u5927\u7684\u90a3\u4e2a\u70b9\uff0c\u8ba9\u5b83\u5411\u4e0a\u8df3\u3002\u663e\u7136\u5728\u6811\u4e0a\uff0c\u8fd9\u4e24\u4e2a\u70b9\u6700\u540e\u4e00\u5b9a\u4f1a\u76f8\u9047\uff0c\u76f8\u9047\u7684\u4f4d\u7f6e\u5c31\u662f\u60f3\u8981\u6c42\u7684 LCA\u3002 \u6216\u8005\u5148\u5411\u4e0a\u8c03\u6574\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\uff0c\u4ee4\u4ed6\u4eec\u6df1\u5ea6\u76f8\u540c\uff0c\u7136\u540e\u518d\u5171\u540c\u5411\u4e0a\u8df3\u8f6c\uff0c\u6700\u540e\u4e5f\u4e00\u5b9a\u4f1a\u76f8\u9047\u3002 \u500d\u589e\u7b97\u6cd5 \u00b6 \u500d\u589e\u7b97\u6cd5\u662f\u6700\u7ecf\u5178\u7684 LCA \u6c42\u6cd5\uff0c\u4ed6\u662f\u6734\u7d20\u7b97\u6cd5\u7684\u6539\u8fdb\u7b97\u6cd5\u3002\u901a\u8fc7\u9884\u5904\u7406 fa[x][i] \u6570\u7ec4\uff0c\u6e38\u6807\u53ef\u4ee5\u5feb\u901f\u79fb\u52a8\uff0c\u5927\u5e45\u51cf\u5c11\u4e86\u6e38\u6807\u8df3\u8f6c\u6b21\u6570\u3002 fa[x][i] \u8868\u793a\u70b9 x x \u7684\u7b2c 2^i 2^i \u4e2a\u7956\u5148\u3002 fa[x][i] \u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7 dfs \u9884\u5904\u7406\u51fa\u6765\u3002 \u73b0\u5728\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f18\u5316\u8fd9\u4e9b\u8df3\u8f6c\uff1a \u5728\u8c03\u6574\u6e38\u6807\u7684\u7b2c\u4e00\u9636\u6bb5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa u,v u,v \u4e24\u70b9\u7684\u6df1\u5ea6\u4e4b\u5dee\uff0c\u8bbe\u5176\u4e3a y y \u3002\u901a\u8fc7\u5c06 y y \u8fdb\u884c\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u6211\u4eec\u5c06 y y \u6b21\u6e38\u6807\u8df3\u8f6c\u4f18\u5316\u4e3a count_one_in_binary_representation(y) \u6b21\u6e38\u6807\u8df3\u8f6c\u3002 \u5728\u7b2c\u4e8c\u9636\u6bb5\u4e2d\uff0c\u6211\u4eec\u4ece\u6700\u5927\u7684 i i \u5f00\u59cb\u5faa\u73af\u5c1d\u8bd5\uff0c\u4e00\u76f4\u5c1d\u8bd5\u5230 0 0 \uff08\u5305\u62ec 0 0 \uff09\uff0c\u5982\u679c fa[u][i] != fa[v][i] \uff0c\u5219\u4ee4 u = fa[u][i]; v = fa[v][i] \uff0c\u90a3\u4e48\u6700\u540e\u7684 LCA \u4e3a fa[u][0] \u3002 \u4f8b\u9898 CODEVS2370 \u5c0f\u673a\u623f\u7684\u6811 \u6811\u4e0a\u6700\u77ed\u8def\u67e5\u8be2 \u53ef\u5148\u6c42\u51fa LCA\uff0c\u518d\u7ed3\u5408\u6027\u8d28 7 7 \u8fdb\u884c\u89e3\u7b54\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u6c42 LCA \u65f6\u6c42\u51fa\u7ed3\u679c\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #include <cstdio> #include <cstring> #include <iostream> #include <vector> #define MXN 50007 using namespace std ; std :: vector < int > v [ MXN ]; std :: vector < int > w [ MXN ]; int fa [ MXN ][ 31 ], cost [ MXN ][ 31 ], dep [ MXN ]; int n , m ; int a , b , c ; void dfs ( int root , int fno ) { fa [ root ][ 0 ] = fno ; dep [ root ] = dep [ fa [ root ][ 0 ]] + 1 ; for ( int i = 1 ; i < 31 ; ++ i ) { fa [ root ][ i ] = fa [ fa [ root ][ i - 1 ]][ i - 1 ]; cost [ root ][ i ] = cost [ fa [ root ][ i - 1 ]][ i - 1 ] + cost [ root ][ i - 1 ]; } int sz = v [ root ]. size (); for ( int i = 0 ; i < sz ; ++ i ) { if ( v [ root ][ i ] == fno ) continue ; cost [ v [ root ][ i ]][ 0 ] = w [ root ][ i ]; dfs ( v [ root ][ i ], root ); } } int lca ( int x , int y ) { if ( dep [ x ] > dep [ y ]) swap ( x , y ); int tmp = dep [ y ] - dep [ x ], ans = 0 ; for ( int j = 0 ; tmp ; ++ j , tmp >>= 1 ) if ( tmp & 1 ) ans += cost [ y ][ j ], y = fa [ y ][ j ]; if ( y == x ) return ans ; for ( int j = 30 ; j >= 0 && y != x ; -- j ) { if ( fa [ x ][ j ] != fa [ y ][ j ]) { ans += cost [ x ][ j ] + cost [ y ][ j ]; x = fa [ x ][ j ]; y = fa [ y ][ j ]; } } ans += cost [ x ][ 0 ] + cost [ y ][ 0 ]; return ans ; } int main () { memset ( fa , 0 , sizeof ( fa )); memset ( cost , 0 , sizeof ( cost )); memset ( dep , 0 , sizeof ( dep )); scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; ++ i ) { scanf ( \"%d %d %d\" , & a , & b , & c ); ++ a , ++ b ; v [ a ]. push_back ( b ); v [ b ]. push_back ( a ); w [ a ]. push_back ( c ); w [ b ]. push_back ( c ); } dfs ( 1 , 0 ); scanf ( \"%d\" , & m ); for ( int i = 0 ; i < m ; ++ i ) { scanf ( \"%d %d\" , & a , & b ); ++ a , ++ b ; printf ( \"%d \\n \" , lca ( a , b )); } return 0 ; } Tarjan \u7b97\u6cd5 \u00b6 \u8f6c\u5316\u4e3a RMQ \u95ee\u9898 \u00b6 \u9996\u5148\u5bf9\u6811\u8fdb\u884c dfs\uff0c dfs(root, 1) \uff0c\u5c06\u6df1\u5ea6\u548c\u8282\u70b9\u7f16\u53f7\u6309\u987a\u5e8f\u8bb0\u5f55\u5230\u6570\u7ec4\u4e2d\uff0c\u5e76\u8bb0\u5f55\u5404\u4e2a\u70b9\u5728 dfs \u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int depth [ N * 2 ], id [ N * 2 ], loc [ N ]; int tot = 1 ; void dfs ( int x , int dep ) { loc [ x ] = tot ; depth [ tot ] = dep ; id [ tot ] = x ; tot ++ ; for ( int i = 0 ; i < v [ x ]. size (); i ++ ) { dfs ( v [ x ][ i ], dep + 1 ); depth [ tot ] = dep ; id [ tot ] = x ; tot ++ ; } } \u7136\u540e\u5bf9 depth \u6570\u7ec4\u5efa\u7acb\u652f\u6301 RMQ \u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9700\u8981\u652f\u6301\u67e5\u8be2\u6700\u5c0f\u503c\u6240\u5904\u4f4d\u7f6e\u3002 \u5f53\u6211\u4eec\u9700\u8981\u67e5\u8be2\u67d0\u70b9\u5bf9 (u, v) \u7684 LCA \u65f6\uff0c\u9700\u8981\u5148\u67e5\u8be2\u533a\u95f4 [min(loc[u], loc[v]), max(loc[u], loc[v])] \u4e0a\u6700\u5c0f\u503c\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u8bbe\u5176\u4e3a pos \uff0c\u5219 (u, v) \u7684 LCA \u4e3a id[pos] \u3002 \u672c\u7b97\u6cd5\u4e0d\u652f\u6301\u5728\u7ebf\u4fee\u6539\u3002 \u6811\u94fe\u5256\u5206 \u00b6 LCA \u4e3a\u4e24\u4e2a\u6e38\u6807\u8df3\u8f6c\u5230\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u65f6\u6df1\u5ea6\u8f83\u5c0f\u7684\u90a3\u4e2a\u6e38\u6807\u6240\u6307\u5411\u7684\u70b9\u3002 \u52a8\u6001\u6811 \u00b6 \u672c\u8282 \u6027\u8d28 \u90e8\u5206\u5185\u5bb9\u7ffb\u8bd1\u81ea wcipeg \uff0c\u5e76\u505a\u8fc7\u4fee\u6539\u3002 \u6807\u51c6 RMQ \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 O(N)-O(1) O(N)-O(1) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) \uff0c\u652f\u6301\u5728\u7ebf\u67e5\u8be2\uff0c\u5e38\u6570\u8f83\u5927\uff0c\u7f16\u7a0b\u590d\u6742\u5ea6\u8f83\u9ad8\u3002 \u6d41\u7a0b\uff1a \u901a\u8fc7 DFS \u5e8f\u5c06\u6811\u4e0a LCA \u95ee\u9898\u8f6c\u4e3a\u5e8f\u5217 RMQ \u95ee\u9898 \u901a\u8fc7\u5355\u8c03\u6808\u5c06\u5e8f\u5217\u8f6c\u4e3a\u7b1b\u5361\u5c14\u6811 \u5728\u7b1b\u5361\u5c14\u6811\u4e0a\u6c42\u6b27\u62c9\u5e8f\uff0c\u5982\u6b64\u8f6c\u5316\u4e3a \\pm 1 \\pm 1 RMQ \u5bf9\u65b0\u5e8f\u5217\u5206\u5757\uff0c\u505a\u5206\u5757 ST \u8868\uff0c\u5757\u5185\u901a\u8fc7\u4e8c\u8fdb\u5236\u72b6\u538b DP \u7ef4\u62a4 \u6bcf\u4e00\u6b65\u7684\u590d\u6742\u5ea6\u90fd\u662f O(N) O(N) \u7684\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4f9d\u7136\u662f O(N) O(N) \u3002 \u63d0\u4f9b RMQ \u8f6c\u6807\u51c6 RMQ \u7684\u4ee3\u7801\uff0c\u4e3a\u6d1b\u8c37\u4e0a ST \u8868\u7684\u4f8b\u9898 P3865 \u3010\u6a21\u677f\u3011ST \u8868 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 // Copyright (C) 2018 Skqliao. All rights served. #include <bits/stdc++.h> #define rep(i, l, r) for (int i = (l), _##i##_ = (r); i < _##i##_; ++i) #define rof(i, l, r) for (int i = (l)-1, _##i##_ = (r); i >= _##i##_; --i) #define ALL(x) (x).begin(), (x).end() #define SZ(x) static_cast<int>((x).size()) typedef long long ll ; typedef std :: pair < int , int > pii ; template < typename T > inline bool chkMin ( T & a , const T & b ) { return a > b ? a = b , 1 : 0 ; } template < typename T > inline bool chkMax ( T & a , const T & b ) { return a < b ? a = b , 1 : 0 ; } const int MAXN = 1e5 + 5 ; struct PlusMinusOneRMQ { const static int M = 8 ; int blocklen , block , Minv [ MAXN ], F [ MAXN / M * 2 + 5 ][ M << 1 ], T [ MAXN ], f [ 1 << M ][ M ][ M ], S [ MAXN ]; void init ( int n ) { blocklen = std :: max ( 1 , ( int )( log ( n * 1.0 ) / log ( 2.0 )) / 2 ); block = n / blocklen + ( n % blocklen > 0 ); int total = 1 << ( blocklen - 1 ); for ( int i = 0 ; i < total ; i ++ ) { for ( int l = 0 ; l < blocklen ; l ++ ) { f [ i ][ l ][ l ] = l ; int now = 0 , minv = 0 ; for ( int r = l + 1 ; r < blocklen ; r ++ ) { f [ i ][ l ][ r ] = f [ i ][ l ][ r - 1 ]; if (( 1 << ( r - 1 )) & i ) { now ++ ; } else { now -- ; if ( now < minv ) { minv = now ; f [ i ][ l ][ r ] = r ; } } } } } T [ 1 ] = 0 ; for ( int i = 2 ; i < MAXN ; i ++ ) { T [ i ] = T [ i - 1 ]; if ( ! ( i & ( i - 1 ))) { T [ i ] ++ ; } } } void initmin ( int a [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % blocklen == 0 ) { Minv [ i / blocklen ] = i ; S [ i / blocklen ] = 0 ; } else { if ( a [ i ] < a [ Minv [ i / blocklen ]]) { Minv [ i / blocklen ] = i ; } if ( a [ i ] > a [ i - 1 ]) { S [ i / blocklen ] |= 1 << ( i % blocklen - 1 ); } } } for ( int i = 0 ; i < block ; i ++ ) { F [ i ][ 0 ] = Minv [ i ]; } for ( int j = 1 ; ( 1 << j ) <= block ; j ++ ) { for ( int i = 0 ; i + ( 1 << j ) - 1 < block ; i ++ ) { int b1 = F [ i ][ j - 1 ], b2 = F [ i + ( 1 << ( j - 1 ))][ j - 1 ]; F [ i ][ j ] = a [ b1 ] < a [ b2 ] ? b1 : b2 ; } } } int querymin ( int a [], int L , int R ) { int idl = L / blocklen , idr = R / blocklen ; if ( idl == idr ) return idl * blocklen + f [ S [ idl ]][ L % blocklen ][ R % blocklen ]; else { int b1 = idl * blocklen + f [ S [ idl ]][ L % blocklen ][ blocklen - 1 ]; int b2 = idr * blocklen + f [ S [ idr ]][ 0 ][ R % blocklen ]; int buf = a [ b1 ] < a [ b2 ] ? b1 : b2 ; int c = T [ idr - idl - 1 ]; if ( idr - idl - 1 ) { int b1 = F [ idl + 1 ][ c ]; int b2 = F [ idr - 1 - ( 1 << c ) + 1 ][ c ]; int b = a [ b1 ] < a [ b2 ] ? b1 : b2 ; return a [ buf ] < a [ b ] ? buf : b ; } return buf ; } } }; struct CartesianTree { private : struct Node { int key , value , l , r ; Node ( int key , int value ) { this -> key = key ; this -> value = value ; l = r = 0 ; } Node () {} }; Node tree [ MAXN ]; int sz ; int S [ MAXN ], top ; public : void build ( int a [], int n ) { top = 0 ; tree [ 0 ] = Node ( - 1 , INT_MAX ); S [ top ++ ] = 0 ; sz = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tree [ ++ sz ] = Node ( i , a [ i ]); int last = 0 ; while ( tree [ S [ top - 1 ]]. value <= tree [ sz ]. value ) { last = S [ top - 1 ]; top -- ; } tree [ sz ]. l = last ; tree [ S [ top - 1 ]]. r = sz ; S [ top ++ ] = sz ; } } Node & operator []( const int x ) { return tree [ x ]; } }; class stdRMQ { public : void work ( int a [], int n ) { ct . build ( a , n ); dfs_clock = 0 ; dfs ( 0 , 0 ); rmq . init ( dfs_clock ); rmq . initmin ( depseq , dfs_clock ); } int query ( int L , int R ) { int cl = clk [ L ], cr = clk [ R ]; if ( cl > cr ) { std :: swap ( cl , cr ); } return Val [ rmq . querymin ( depseq , cl , cr )]; } private : CartesianTree ct ; PlusMinusOneRMQ rmq ; int dfs_clock , clk [ MAXN ], Val [ MAXN << 1 ], depseq [ MAXN << 1 ]; void dfs ( int rt , int d ) { clk [ ct [ rt ]. key ] = dfs_clock ; depseq [ dfs_clock ] = d ; Val [ dfs_clock ++ ] = ct [ rt ]. value ; if ( ct [ rt ]. l ) { dfs ( ct [ rt ]. l , d + 1 ); depseq [ dfs_clock ] = d ; Val [ dfs_clock ++ ] = ct [ rt ]. value ; } if ( ct [ rt ]. r ) { dfs ( ct [ rt ]. r , d + 1 ); depseq [ dfs_clock ] = d ; Val [ dfs_clock ++ ] = ct [ rt ]. value ; } } } doit ; int A [ MAXN ]; int main () { int n , m , l , r ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & A [ i ]); } doit . work ( A , n ); while ( m -- ) { scanf ( \"%d%d\" , & l , & r ); printf ( \"%d \\n \" , doit . query ( l - 1 , r - 1 )); } return 0 ; }","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"graph/lca/#_1","text":"\u6700\u8fd1\u516c\u5171\u7956\u5148\u7b80\u79f0 LCA\uff08Lowest Common Ancestor\uff09\u3002\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u7684\u516c\u5171\u7956\u5148\u91cc\u9762\uff0c\u79bb\u6839\u6700\u8fdc\u7684\u90a3\u4e2a\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u8bb0\u67d0\u70b9\u96c6 S={v_1,v_2,\\ldots,v_n} S={v_1,v_2,\\ldots,v_n} \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a \\text{LCA}(v_1,v_2,\\ldots,v_n) \\text{LCA}(v_1,v_2,\\ldots,v_n) \u6216 \\text{LCA}(S) \\text{LCA}(S) \u3002","title":"\u5b9a\u4e49"},{"location":"graph/lca/#_2","text":"\\text{LCA}({u})=u \\text{LCA}({u})=u \uff1b u u \u662f v v \u7684\u7956\u5148\uff0c\u5f53\u4e14\u4ec5\u5f53 \\text{LCA}(u,v)=u \\text{LCA}(u,v)=u \uff1b \u5982\u679c u u \u4e0d\u4e3a v v \u7684\u7956\u5148\u5e76\u4e14 v v \u4e0d\u4e3a u u \u7684\u7956\u5148\uff0c\u90a3\u4e48 u,v u,v \u5206\u522b\u5904\u4e8e \\text{LCA}(u,v) \\text{LCA}(u,v) \u7684\u4e24\u68f5\u4e0d\u540c\u5b50\u6811\u4e2d\uff1b \u524d\u5e8f\u904d\u5386\u4e2d\uff0c \\text{LCA}(S) \\text{LCA}(S) \u51fa\u73b0\u5728\u6240\u6709 S S \u4e2d\u5143\u7d20\u4e4b\u524d\uff0c\u540e\u5e8f\u904d\u5386\u4e2d \\text{LCA}(S) \\text{LCA}(S) \u5219\u51fa\u73b0\u5728\u6240\u6709 S S \u4e2d\u5143\u7d20\u4e4b\u540e\uff1b \u4e24\u70b9\u96c6\u5e76\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a\u4e24\u70b9\u96c6\u5206\u522b\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5373 \\text{LCA}(A\\cup B)=\\text{LCA}(\\text{LCA}(A), \\text{LCA}(B)) \\text{LCA}(A\\cup B)=\\text{LCA}(\\text{LCA}(A), \\text{LCA}(B)) \uff1b \u4e24\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5fc5\u5b9a\u5904\u5728\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u4e0a\uff1b d(u,v)=h(u)+h(v)-2h(\\text{LCA}(u,v)) d(u,v)=h(u)+h(v)-2h(\\text{LCA}(u,v)) \uff0c\u5176\u4e2d d d \u662f\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c h h \u4ee3\u8868\u67d0\u70b9\u5230\u6811\u6839\u7684\u8ddd\u79bb\u3002","title":"\u6027\u8d28"},{"location":"graph/lca/#_3","text":"","title":"\u6c42\u6cd5"},{"location":"graph/lca/#_4","text":"\u53ef\u4ee5\u6bcf\u6b21\u627e\u6df1\u5ea6\u6bd4\u8f83\u5927\u7684\u90a3\u4e2a\u70b9\uff0c\u8ba9\u5b83\u5411\u4e0a\u8df3\u3002\u663e\u7136\u5728\u6811\u4e0a\uff0c\u8fd9\u4e24\u4e2a\u70b9\u6700\u540e\u4e00\u5b9a\u4f1a\u76f8\u9047\uff0c\u76f8\u9047\u7684\u4f4d\u7f6e\u5c31\u662f\u60f3\u8981\u6c42\u7684 LCA\u3002 \u6216\u8005\u5148\u5411\u4e0a\u8c03\u6574\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\uff0c\u4ee4\u4ed6\u4eec\u6df1\u5ea6\u76f8\u540c\uff0c\u7136\u540e\u518d\u5171\u540c\u5411\u4e0a\u8df3\u8f6c\uff0c\u6700\u540e\u4e5f\u4e00\u5b9a\u4f1a\u76f8\u9047\u3002","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"graph/lca/#_5","text":"\u500d\u589e\u7b97\u6cd5\u662f\u6700\u7ecf\u5178\u7684 LCA \u6c42\u6cd5\uff0c\u4ed6\u662f\u6734\u7d20\u7b97\u6cd5\u7684\u6539\u8fdb\u7b97\u6cd5\u3002\u901a\u8fc7\u9884\u5904\u7406 fa[x][i] \u6570\u7ec4\uff0c\u6e38\u6807\u53ef\u4ee5\u5feb\u901f\u79fb\u52a8\uff0c\u5927\u5e45\u51cf\u5c11\u4e86\u6e38\u6807\u8df3\u8f6c\u6b21\u6570\u3002 fa[x][i] \u8868\u793a\u70b9 x x \u7684\u7b2c 2^i 2^i \u4e2a\u7956\u5148\u3002 fa[x][i] \u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7 dfs \u9884\u5904\u7406\u51fa\u6765\u3002 \u73b0\u5728\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f18\u5316\u8fd9\u4e9b\u8df3\u8f6c\uff1a \u5728\u8c03\u6574\u6e38\u6807\u7684\u7b2c\u4e00\u9636\u6bb5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa u,v u,v \u4e24\u70b9\u7684\u6df1\u5ea6\u4e4b\u5dee\uff0c\u8bbe\u5176\u4e3a y y \u3002\u901a\u8fc7\u5c06 y y \u8fdb\u884c\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u6211\u4eec\u5c06 y y \u6b21\u6e38\u6807\u8df3\u8f6c\u4f18\u5316\u4e3a count_one_in_binary_representation(y) \u6b21\u6e38\u6807\u8df3\u8f6c\u3002 \u5728\u7b2c\u4e8c\u9636\u6bb5\u4e2d\uff0c\u6211\u4eec\u4ece\u6700\u5927\u7684 i i \u5f00\u59cb\u5faa\u73af\u5c1d\u8bd5\uff0c\u4e00\u76f4\u5c1d\u8bd5\u5230 0 0 \uff08\u5305\u62ec 0 0 \uff09\uff0c\u5982\u679c fa[u][i] != fa[v][i] \uff0c\u5219\u4ee4 u = fa[u][i]; v = fa[v][i] \uff0c\u90a3\u4e48\u6700\u540e\u7684 LCA \u4e3a fa[u][0] \u3002 \u4f8b\u9898 CODEVS2370 \u5c0f\u673a\u623f\u7684\u6811 \u6811\u4e0a\u6700\u77ed\u8def\u67e5\u8be2 \u53ef\u5148\u6c42\u51fa LCA\uff0c\u518d\u7ed3\u5408\u6027\u8d28 7 7 \u8fdb\u884c\u89e3\u7b54\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u6c42 LCA \u65f6\u6c42\u51fa\u7ed3\u679c\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #include <cstdio> #include <cstring> #include <iostream> #include <vector> #define MXN 50007 using namespace std ; std :: vector < int > v [ MXN ]; std :: vector < int > w [ MXN ]; int fa [ MXN ][ 31 ], cost [ MXN ][ 31 ], dep [ MXN ]; int n , m ; int a , b , c ; void dfs ( int root , int fno ) { fa [ root ][ 0 ] = fno ; dep [ root ] = dep [ fa [ root ][ 0 ]] + 1 ; for ( int i = 1 ; i < 31 ; ++ i ) { fa [ root ][ i ] = fa [ fa [ root ][ i - 1 ]][ i - 1 ]; cost [ root ][ i ] = cost [ fa [ root ][ i - 1 ]][ i - 1 ] + cost [ root ][ i - 1 ]; } int sz = v [ root ]. size (); for ( int i = 0 ; i < sz ; ++ i ) { if ( v [ root ][ i ] == fno ) continue ; cost [ v [ root ][ i ]][ 0 ] = w [ root ][ i ]; dfs ( v [ root ][ i ], root ); } } int lca ( int x , int y ) { if ( dep [ x ] > dep [ y ]) swap ( x , y ); int tmp = dep [ y ] - dep [ x ], ans = 0 ; for ( int j = 0 ; tmp ; ++ j , tmp >>= 1 ) if ( tmp & 1 ) ans += cost [ y ][ j ], y = fa [ y ][ j ]; if ( y == x ) return ans ; for ( int j = 30 ; j >= 0 && y != x ; -- j ) { if ( fa [ x ][ j ] != fa [ y ][ j ]) { ans += cost [ x ][ j ] + cost [ y ][ j ]; x = fa [ x ][ j ]; y = fa [ y ][ j ]; } } ans += cost [ x ][ 0 ] + cost [ y ][ 0 ]; return ans ; } int main () { memset ( fa , 0 , sizeof ( fa )); memset ( cost , 0 , sizeof ( cost )); memset ( dep , 0 , sizeof ( dep )); scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; ++ i ) { scanf ( \"%d %d %d\" , & a , & b , & c ); ++ a , ++ b ; v [ a ]. push_back ( b ); v [ b ]. push_back ( a ); w [ a ]. push_back ( c ); w [ b ]. push_back ( c ); } dfs ( 1 , 0 ); scanf ( \"%d\" , & m ); for ( int i = 0 ; i < m ; ++ i ) { scanf ( \"%d %d\" , & a , & b ); ++ a , ++ b ; printf ( \"%d \\n \" , lca ( a , b )); } return 0 ; }","title":"\u500d\u589e\u7b97\u6cd5"},{"location":"graph/lca/#tarjan","text":"","title":"Tarjan \u7b97\u6cd5"},{"location":"graph/lca/#rmq","text":"\u9996\u5148\u5bf9\u6811\u8fdb\u884c dfs\uff0c dfs(root, 1) \uff0c\u5c06\u6df1\u5ea6\u548c\u8282\u70b9\u7f16\u53f7\u6309\u987a\u5e8f\u8bb0\u5f55\u5230\u6570\u7ec4\u4e2d\uff0c\u5e76\u8bb0\u5f55\u5404\u4e2a\u70b9\u5728 dfs \u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int depth [ N * 2 ], id [ N * 2 ], loc [ N ]; int tot = 1 ; void dfs ( int x , int dep ) { loc [ x ] = tot ; depth [ tot ] = dep ; id [ tot ] = x ; tot ++ ; for ( int i = 0 ; i < v [ x ]. size (); i ++ ) { dfs ( v [ x ][ i ], dep + 1 ); depth [ tot ] = dep ; id [ tot ] = x ; tot ++ ; } } \u7136\u540e\u5bf9 depth \u6570\u7ec4\u5efa\u7acb\u652f\u6301 RMQ \u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9700\u8981\u652f\u6301\u67e5\u8be2\u6700\u5c0f\u503c\u6240\u5904\u4f4d\u7f6e\u3002 \u5f53\u6211\u4eec\u9700\u8981\u67e5\u8be2\u67d0\u70b9\u5bf9 (u, v) \u7684 LCA \u65f6\uff0c\u9700\u8981\u5148\u67e5\u8be2\u533a\u95f4 [min(loc[u], loc[v]), max(loc[u], loc[v])] \u4e0a\u6700\u5c0f\u503c\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u8bbe\u5176\u4e3a pos \uff0c\u5219 (u, v) \u7684 LCA \u4e3a id[pos] \u3002 \u672c\u7b97\u6cd5\u4e0d\u652f\u6301\u5728\u7ebf\u4fee\u6539\u3002","title":"\u8f6c\u5316\u4e3a RMQ \u95ee\u9898"},{"location":"graph/lca/#_6","text":"LCA \u4e3a\u4e24\u4e2a\u6e38\u6807\u8df3\u8f6c\u5230\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u65f6\u6df1\u5ea6\u8f83\u5c0f\u7684\u90a3\u4e2a\u6e38\u6807\u6240\u6307\u5411\u7684\u70b9\u3002","title":"\u6811\u94fe\u5256\u5206"},{"location":"graph/lca/#_7","text":"\u672c\u8282 \u6027\u8d28 \u90e8\u5206\u5185\u5bb9\u7ffb\u8bd1\u81ea wcipeg \uff0c\u5e76\u505a\u8fc7\u4fee\u6539\u3002","title":"\u52a8\u6001\u6811"},{"location":"graph/lca/#rmq_1","text":"\u65f6\u95f4\u590d\u6742\u5ea6 O(N)-O(1) O(N)-O(1) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(N) O(N) \uff0c\u652f\u6301\u5728\u7ebf\u67e5\u8be2\uff0c\u5e38\u6570\u8f83\u5927\uff0c\u7f16\u7a0b\u590d\u6742\u5ea6\u8f83\u9ad8\u3002 \u6d41\u7a0b\uff1a \u901a\u8fc7 DFS \u5e8f\u5c06\u6811\u4e0a LCA \u95ee\u9898\u8f6c\u4e3a\u5e8f\u5217 RMQ \u95ee\u9898 \u901a\u8fc7\u5355\u8c03\u6808\u5c06\u5e8f\u5217\u8f6c\u4e3a\u7b1b\u5361\u5c14\u6811 \u5728\u7b1b\u5361\u5c14\u6811\u4e0a\u6c42\u6b27\u62c9\u5e8f\uff0c\u5982\u6b64\u8f6c\u5316\u4e3a \\pm 1 \\pm 1 RMQ \u5bf9\u65b0\u5e8f\u5217\u5206\u5757\uff0c\u505a\u5206\u5757 ST \u8868\uff0c\u5757\u5185\u901a\u8fc7\u4e8c\u8fdb\u5236\u72b6\u538b DP \u7ef4\u62a4 \u6bcf\u4e00\u6b65\u7684\u590d\u6742\u5ea6\u90fd\u662f O(N) O(N) \u7684\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4f9d\u7136\u662f O(N) O(N) \u3002 \u63d0\u4f9b RMQ \u8f6c\u6807\u51c6 RMQ \u7684\u4ee3\u7801\uff0c\u4e3a\u6d1b\u8c37\u4e0a ST \u8868\u7684\u4f8b\u9898 P3865 \u3010\u6a21\u677f\u3011ST \u8868 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 // Copyright (C) 2018 Skqliao. All rights served. #include <bits/stdc++.h> #define rep(i, l, r) for (int i = (l), _##i##_ = (r); i < _##i##_; ++i) #define rof(i, l, r) for (int i = (l)-1, _##i##_ = (r); i >= _##i##_; --i) #define ALL(x) (x).begin(), (x).end() #define SZ(x) static_cast<int>((x).size()) typedef long long ll ; typedef std :: pair < int , int > pii ; template < typename T > inline bool chkMin ( T & a , const T & b ) { return a > b ? a = b , 1 : 0 ; } template < typename T > inline bool chkMax ( T & a , const T & b ) { return a < b ? a = b , 1 : 0 ; } const int MAXN = 1e5 + 5 ; struct PlusMinusOneRMQ { const static int M = 8 ; int blocklen , block , Minv [ MAXN ], F [ MAXN / M * 2 + 5 ][ M << 1 ], T [ MAXN ], f [ 1 << M ][ M ][ M ], S [ MAXN ]; void init ( int n ) { blocklen = std :: max ( 1 , ( int )( log ( n * 1.0 ) / log ( 2.0 )) / 2 ); block = n / blocklen + ( n % blocklen > 0 ); int total = 1 << ( blocklen - 1 ); for ( int i = 0 ; i < total ; i ++ ) { for ( int l = 0 ; l < blocklen ; l ++ ) { f [ i ][ l ][ l ] = l ; int now = 0 , minv = 0 ; for ( int r = l + 1 ; r < blocklen ; r ++ ) { f [ i ][ l ][ r ] = f [ i ][ l ][ r - 1 ]; if (( 1 << ( r - 1 )) & i ) { now ++ ; } else { now -- ; if ( now < minv ) { minv = now ; f [ i ][ l ][ r ] = r ; } } } } } T [ 1 ] = 0 ; for ( int i = 2 ; i < MAXN ; i ++ ) { T [ i ] = T [ i - 1 ]; if ( ! ( i & ( i - 1 ))) { T [ i ] ++ ; } } } void initmin ( int a [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % blocklen == 0 ) { Minv [ i / blocklen ] = i ; S [ i / blocklen ] = 0 ; } else { if ( a [ i ] < a [ Minv [ i / blocklen ]]) { Minv [ i / blocklen ] = i ; } if ( a [ i ] > a [ i - 1 ]) { S [ i / blocklen ] |= 1 << ( i % blocklen - 1 ); } } } for ( int i = 0 ; i < block ; i ++ ) { F [ i ][ 0 ] = Minv [ i ]; } for ( int j = 1 ; ( 1 << j ) <= block ; j ++ ) { for ( int i = 0 ; i + ( 1 << j ) - 1 < block ; i ++ ) { int b1 = F [ i ][ j - 1 ], b2 = F [ i + ( 1 << ( j - 1 ))][ j - 1 ]; F [ i ][ j ] = a [ b1 ] < a [ b2 ] ? b1 : b2 ; } } } int querymin ( int a [], int L , int R ) { int idl = L / blocklen , idr = R / blocklen ; if ( idl == idr ) return idl * blocklen + f [ S [ idl ]][ L % blocklen ][ R % blocklen ]; else { int b1 = idl * blocklen + f [ S [ idl ]][ L % blocklen ][ blocklen - 1 ]; int b2 = idr * blocklen + f [ S [ idr ]][ 0 ][ R % blocklen ]; int buf = a [ b1 ] < a [ b2 ] ? b1 : b2 ; int c = T [ idr - idl - 1 ]; if ( idr - idl - 1 ) { int b1 = F [ idl + 1 ][ c ]; int b2 = F [ idr - 1 - ( 1 << c ) + 1 ][ c ]; int b = a [ b1 ] < a [ b2 ] ? b1 : b2 ; return a [ buf ] < a [ b ] ? buf : b ; } return buf ; } } }; struct CartesianTree { private : struct Node { int key , value , l , r ; Node ( int key , int value ) { this -> key = key ; this -> value = value ; l = r = 0 ; } Node () {} }; Node tree [ MAXN ]; int sz ; int S [ MAXN ], top ; public : void build ( int a [], int n ) { top = 0 ; tree [ 0 ] = Node ( - 1 , INT_MAX ); S [ top ++ ] = 0 ; sz = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tree [ ++ sz ] = Node ( i , a [ i ]); int last = 0 ; while ( tree [ S [ top - 1 ]]. value <= tree [ sz ]. value ) { last = S [ top - 1 ]; top -- ; } tree [ sz ]. l = last ; tree [ S [ top - 1 ]]. r = sz ; S [ top ++ ] = sz ; } } Node & operator []( const int x ) { return tree [ x ]; } }; class stdRMQ { public : void work ( int a [], int n ) { ct . build ( a , n ); dfs_clock = 0 ; dfs ( 0 , 0 ); rmq . init ( dfs_clock ); rmq . initmin ( depseq , dfs_clock ); } int query ( int L , int R ) { int cl = clk [ L ], cr = clk [ R ]; if ( cl > cr ) { std :: swap ( cl , cr ); } return Val [ rmq . querymin ( depseq , cl , cr )]; } private : CartesianTree ct ; PlusMinusOneRMQ rmq ; int dfs_clock , clk [ MAXN ], Val [ MAXN << 1 ], depseq [ MAXN << 1 ]; void dfs ( int rt , int d ) { clk [ ct [ rt ]. key ] = dfs_clock ; depseq [ dfs_clock ] = d ; Val [ dfs_clock ++ ] = ct [ rt ]. value ; if ( ct [ rt ]. l ) { dfs ( ct [ rt ]. l , d + 1 ); depseq [ dfs_clock ] = d ; Val [ dfs_clock ++ ] = ct [ rt ]. value ; } if ( ct [ rt ]. r ) { dfs ( ct [ rt ]. r , d + 1 ); depseq [ dfs_clock ] = d ; Val [ dfs_clock ++ ] = ct [ rt ]. value ; } } } doit ; int A [ MAXN ]; int main () { int n , m , l , r ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & A [ i ]); } doit . work ( A , n ); while ( m -- ) { scanf ( \"%d%d\" , & l , & r ); printf ( \"%d \\n \" , doit . query ( l - 1 , r - 1 )); } return 0 ; }","title":"\u6807\u51c6 RMQ"},{"location":"graph/min-circle/","text":"\u95ee\u9898 \u00b6 \u7ed9\u51fa\u4e00\u4e2a\u56fe\uff0c\u95ee\u5176\u4e2d\u7684\u6709 n n \u4e2a\u8282\u70b9\u6784\u6210\u7684\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u73af (n\\ge 3) (n\\ge 3) \u662f\u591a\u5927\u3002 \u66b4\u529b\u89e3\u6cd5 \u00b6 \u8bbe u u \u548c v v \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u957f\u4e3a w w \u7684\u8fb9\uff0c dis(u,v) dis(u,v) \u8868\u793a\u5220\u9664 u u \u548c v v \u4e4b\u95f4\u7684\u8fde\u8fb9\u4e4b\u540e\uff0c u u \u548c v v \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002 \u90a3\u4e48\u6700\u5c0f\u73af\u662f dis(u,v)+w dis(u,v)+w \u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6 O(n^2m) O(n^2m) \u3002 Dijkstra \u00b6 \u679a\u4e3e\u6240\u6709\u8fb9\uff0c\u6bcf\u4e00\u6b21\u6c42\u5220\u9664\u4e00\u6761\u8fb9\u4e4b\u540e\u5bf9\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u8dd1\u4e00\u6b21 Dijkstra\uff0c\u9053\u7406\u540c\u4e0a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(m(n+m)logn) O(m(n+m)logn) \u3002 Floyd \u00b6 \u6700\u5c0f\u73af\u662f\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u6211\u4eec\u5f3a\u8feb\u6700\u77ed\u8def\u51fa\u53bb\u8dd1\u4e00\u904d\u5c31\u884c\u4e86\u3002 \u600e\u4e48\u5f3a\u8feb\uff1f \u5bf9\u4e8e\u6240\u6709\u7684 i i \uff0c\u4f7f\u5b83\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a \\infty \\infty \uff0c\u4e5f\u5c31\u662f 1 dis [ i ][ i ] = ( 1 << 30 ); \u7136\u540e\u5229\u7528 Floyd \u7684\u6027\u8d28\uff0c\u8dd1\u5b8c\u4e4b\u540e\u5bf9\u6240\u6709\u7684 dis[i][i] dis[i][i] \u53d6 \\min \\min \u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n^3) O(n^3) \u4f8b\u9898 \u00b6 GDOI2018 Day2 \u5de1\u903b \u7ed9\u51fa\u4e00\u5f20 n n \u4e2a\u70b9\u7684\u65e0\u8d1f\u6743\u8fb9\u65e0\u5411\u56fe\uff0c\u8981\u6c42\u6267\u884c Q Q \u4e2a\u64cd\u4f5c\uff0c\u4e09\u79cd\u64cd\u4f5c \u5220\u9664\u4e00\u4e2a\u56fe\u4e2d\u7684\u70b9\u4ee5\u53ca\u4e0e\u5b83\u6709\u5173\u7684\u8fb9 \u6062\u590d\u4e00\u4e2a\u88ab\u5220\u9664\u70b9\u4ee5\u53ca\u4e0e\u5b83\u6709\u5173\u7684\u8fb9 \u8be2\u95ee\u70b9 x x \u6240\u5728\u7684\u6700\u5c0f\u73af\u5927\u5c0f \u5bf9\u4e8e 50% \u7684\u6570\u636e\uff0c\u6709 N,Q \\le 100 N,Q \\le 100 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 x x \u6240\u5728\u7684\u7b80\u5355\u73af\uff0c\u90fd\u5b58\u5728\u4e24\u6761\u4e0e x x \u76f8\u90bb\u7684\u8fb9\uff0c\u5220\u53bb\u5176\u4e2d\u7684\u4efb\u610f\u4e00\u6761\uff0c\u7b80\u5355\u73af\u5c06\u53d8\u4e3a\u7b80\u5355\u8def\u5f84\u3002 \u90a3\u4e48\u679a\u4e3e\u6240\u6709\u4e0e x x \u76f8\u90bb\u7684\u8fb9\uff0c\u6bcf\u6b21\u5220\u53bb\u5176\u4e2d\u4e00\u6761\uff0c\u7136\u540e\u8dd1\u4e00\u6b21 Dijkstra\u3002 \u6216\u8005\u76f4\u63a5\u5bf9\u6bcf\u6b21\u8be2\u95ee\u8dd1\u4e00\u904d Floyd \u6c42\u6700\u5c0f\u73af\uff0c O(qn^3) O(qn^3) \u5bf9\u4e8e 100% \u7684\u6570\u636e\uff0c\u6709 N,Q \\le 400 N,Q \\le 400 \u8fd8\u662f\u5229\u7528 Floyd \u6c42\u6700\u5c0f\u73af\u7684\u7b97\u6cd5\u3002 \u82e5\u6ca1\u6709\u5220\u9664\uff0c\u5220\u53bb\u8be2\u95ee\u70b9\u5c06\u7b80\u5355\u73af\u88c2\u5f00\u6210\u4e3a\u4e00\u6761\u7b80\u5355\u8def\u3002 \u7136\u800c\u7b2c\u4e8c\u6b65\u7684\u6c42\u89e3\u6539\u7528 Floyd \u6765\u5f97\u51fa\u3002 \u90a3\u4e48\u7b54\u6848\u5c31\u662f\u8981\u6c42\u51fa\u4e0d\u7ecf\u8fc7\u8be2\u95ee\u70b9 x x \u7684\u60c5\u51b5\u4e0b\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u600e\u4e48\u5728\u7ebf\uff1f \u5f3a\u884c\u79bb\u7ebf\uff0c\u5229\u7528\u79bb\u7ebf\u7684\u65b9\u6cd5\u6765\u907f\u514d\u5220\u9664\u64cd\u4f5c\u3002 \u5c06\u8be2\u95ee\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u6392\u5217\uff0c\u5bf9\u8fd9\u4e9b\u8be2\u95ee\u5efa\u7acb\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002 \u6bcf\u4e2a\u70b9\u7684\u51fa\u73b0\u65f6\u95f4\u8986\u76d6\u6240\u6709\u9664\u53bb\u8be2\u95ee\u8be5\u70b9\u7684\u65f6\u523b\u5916\u7684\u6240\u6709\u8be2\u95ee\uff0c\u5047\u8bbe\u4e00\u4e2a\u70b9\u88ab\u8be2\u95ee x x \u6b21\uff0c\u5219\u5b83\u7684\u51fa\u73b0\u65f6\u95f4\u53ef\u4ee5\u89c6\u4e3a x + 1 x + 1 \u6bb5\u533a\u95f4\uff0c\u63d2\u5165\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002 \u5b8c\u6210\u4e4b\u540e\u904d\u5386\u4e00\u904d\u6574\u68f5\u7ebf\u6bb5\u6811\uff0c\u5728\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u65f6\u5b58\u50a8\u4e00\u4e2a Floyd \u6570\u7ec4\u7684\u5907\u4efd\uff0c\u7136\u540e\u52a0\u5165\u88ab\u63d2\u5165\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u5728\u79bb\u5f00\u65f6\u5229\u7528\u5907\u4efd\u6570\u7ec4\u9000\u56de\u53bb\u5373\u53ef\u3002","title":"\u6700\u5c0f\u73af"},{"location":"graph/min-circle/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff0c\u95ee\u5176\u4e2d\u7684\u6709 n n \u4e2a\u8282\u70b9\u6784\u6210\u7684\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u73af (n\\ge 3) (n\\ge 3) \u662f\u591a\u5927\u3002","title":"\u95ee\u9898"},{"location":"graph/min-circle/#_2","text":"\u8bbe u u \u548c v v \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u957f\u4e3a w w \u7684\u8fb9\uff0c dis(u,v) dis(u,v) \u8868\u793a\u5220\u9664 u u \u548c v v \u4e4b\u95f4\u7684\u8fde\u8fb9\u4e4b\u540e\uff0c u u \u548c v v \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002 \u90a3\u4e48\u6700\u5c0f\u73af\u662f dis(u,v)+w dis(u,v)+w \u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6 O(n^2m) O(n^2m) \u3002","title":"\u66b4\u529b\u89e3\u6cd5"},{"location":"graph/min-circle/#dijkstra","text":"\u679a\u4e3e\u6240\u6709\u8fb9\uff0c\u6bcf\u4e00\u6b21\u6c42\u5220\u9664\u4e00\u6761\u8fb9\u4e4b\u540e\u5bf9\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u8dd1\u4e00\u6b21 Dijkstra\uff0c\u9053\u7406\u540c\u4e0a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(m(n+m)logn) O(m(n+m)logn) \u3002","title":"Dijkstra"},{"location":"graph/min-circle/#floyd","text":"\u6700\u5c0f\u73af\u662f\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u6211\u4eec\u5f3a\u8feb\u6700\u77ed\u8def\u51fa\u53bb\u8dd1\u4e00\u904d\u5c31\u884c\u4e86\u3002 \u600e\u4e48\u5f3a\u8feb\uff1f \u5bf9\u4e8e\u6240\u6709\u7684 i i \uff0c\u4f7f\u5b83\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a \\infty \\infty \uff0c\u4e5f\u5c31\u662f 1 dis [ i ][ i ] = ( 1 << 30 ); \u7136\u540e\u5229\u7528 Floyd \u7684\u6027\u8d28\uff0c\u8dd1\u5b8c\u4e4b\u540e\u5bf9\u6240\u6709\u7684 dis[i][i] dis[i][i] \u53d6 \\min \\min \u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n^3) O(n^3)","title":"Floyd"},{"location":"graph/min-circle/#_3","text":"GDOI2018 Day2 \u5de1\u903b \u7ed9\u51fa\u4e00\u5f20 n n \u4e2a\u70b9\u7684\u65e0\u8d1f\u6743\u8fb9\u65e0\u5411\u56fe\uff0c\u8981\u6c42\u6267\u884c Q Q \u4e2a\u64cd\u4f5c\uff0c\u4e09\u79cd\u64cd\u4f5c \u5220\u9664\u4e00\u4e2a\u56fe\u4e2d\u7684\u70b9\u4ee5\u53ca\u4e0e\u5b83\u6709\u5173\u7684\u8fb9 \u6062\u590d\u4e00\u4e2a\u88ab\u5220\u9664\u70b9\u4ee5\u53ca\u4e0e\u5b83\u6709\u5173\u7684\u8fb9 \u8be2\u95ee\u70b9 x x \u6240\u5728\u7684\u6700\u5c0f\u73af\u5927\u5c0f \u5bf9\u4e8e 50% \u7684\u6570\u636e\uff0c\u6709 N,Q \\le 100 N,Q \\le 100 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 x x \u6240\u5728\u7684\u7b80\u5355\u73af\uff0c\u90fd\u5b58\u5728\u4e24\u6761\u4e0e x x \u76f8\u90bb\u7684\u8fb9\uff0c\u5220\u53bb\u5176\u4e2d\u7684\u4efb\u610f\u4e00\u6761\uff0c\u7b80\u5355\u73af\u5c06\u53d8\u4e3a\u7b80\u5355\u8def\u5f84\u3002 \u90a3\u4e48\u679a\u4e3e\u6240\u6709\u4e0e x x \u76f8\u90bb\u7684\u8fb9\uff0c\u6bcf\u6b21\u5220\u53bb\u5176\u4e2d\u4e00\u6761\uff0c\u7136\u540e\u8dd1\u4e00\u6b21 Dijkstra\u3002 \u6216\u8005\u76f4\u63a5\u5bf9\u6bcf\u6b21\u8be2\u95ee\u8dd1\u4e00\u904d Floyd \u6c42\u6700\u5c0f\u73af\uff0c O(qn^3) O(qn^3) \u5bf9\u4e8e 100% \u7684\u6570\u636e\uff0c\u6709 N,Q \\le 400 N,Q \\le 400 \u8fd8\u662f\u5229\u7528 Floyd \u6c42\u6700\u5c0f\u73af\u7684\u7b97\u6cd5\u3002 \u82e5\u6ca1\u6709\u5220\u9664\uff0c\u5220\u53bb\u8be2\u95ee\u70b9\u5c06\u7b80\u5355\u73af\u88c2\u5f00\u6210\u4e3a\u4e00\u6761\u7b80\u5355\u8def\u3002 \u7136\u800c\u7b2c\u4e8c\u6b65\u7684\u6c42\u89e3\u6539\u7528 Floyd \u6765\u5f97\u51fa\u3002 \u90a3\u4e48\u7b54\u6848\u5c31\u662f\u8981\u6c42\u51fa\u4e0d\u7ecf\u8fc7\u8be2\u95ee\u70b9 x x \u7684\u60c5\u51b5\u4e0b\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u600e\u4e48\u5728\u7ebf\uff1f \u5f3a\u884c\u79bb\u7ebf\uff0c\u5229\u7528\u79bb\u7ebf\u7684\u65b9\u6cd5\u6765\u907f\u514d\u5220\u9664\u64cd\u4f5c\u3002 \u5c06\u8be2\u95ee\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u6392\u5217\uff0c\u5bf9\u8fd9\u4e9b\u8be2\u95ee\u5efa\u7acb\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002 \u6bcf\u4e2a\u70b9\u7684\u51fa\u73b0\u65f6\u95f4\u8986\u76d6\u6240\u6709\u9664\u53bb\u8be2\u95ee\u8be5\u70b9\u7684\u65f6\u523b\u5916\u7684\u6240\u6709\u8be2\u95ee\uff0c\u5047\u8bbe\u4e00\u4e2a\u70b9\u88ab\u8be2\u95ee x x \u6b21\uff0c\u5219\u5b83\u7684\u51fa\u73b0\u65f6\u95f4\u53ef\u4ee5\u89c6\u4e3a x + 1 x + 1 \u6bb5\u533a\u95f4\uff0c\u63d2\u5165\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002 \u5b8c\u6210\u4e4b\u540e\u904d\u5386\u4e00\u904d\u6574\u68f5\u7ebf\u6bb5\u6811\uff0c\u5728\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u65f6\u5b58\u50a8\u4e00\u4e2a Floyd \u6570\u7ec4\u7684\u5907\u4efd\uff0c\u7136\u540e\u52a0\u5165\u88ab\u63d2\u5165\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u5728\u79bb\u5f00\u65f6\u5229\u7528\u5907\u4efd\u6570\u7ec4\u9000\u56de\u53bb\u5373\u53ef\u3002","title":"\u4f8b\u9898"},{"location":"graph/mst/","text":"\u5b9a\u4e49 \u00b6 \uff08\u8fd8\u8bb0\u5f97\u8fd9\u4e9b\u5b9a\u4e49\u5417\uff1f\u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\uff09 \u751f\u6210\u5b50\u56fe \u751f\u6210\u6811 \u6700\u5c0f\u751f\u6210\u6811\uff1a\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u8fde\u901a\u56fe\u624d\u6709\u751f\u6210\u6811\uff0c\u800c\u5bf9\u4e8e\u975e\u8fde\u901a\u56fe\uff0c\u53ea\u80fd\u641e\u51fa\u751f\u6210\u68ee\u6797\u3002 Kruskal \u7b97\u6cd5 \u00b6 \u662f\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u7531 Kruskal \u53d1\u660e\uff0c\u57fa\u672c\u601d\u60f3\u662f\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u8fb9\uff0c\u662f\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u8bc1\u660e \u00b6 \u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e3a\u4e86\u9020\u51fa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u4ece\u6700\u5c0f\u8fb9\u6743\u7684\u8fb9\u5f00\u59cb\uff0c\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u52a0\u5165\uff0c\u5982\u679c\u67d0\u6b21\u52a0\u8fb9\u4ea7\u751f\u4e86\u73af\uff0c\u5c31\u6254\u6389\u8fd9\u6761\u8fb9\uff0c\u76f4\u5230\u52a0\u5165\u4e86 n-1 n-1 \u6761\u8fb9\uff0c\u5373\u5f62\u6210\u4e86\u4e00\u68f5\u6811\u3002 \u8bc1\u660e\uff1a\u4f7f\u7528\u5f52\u7eb3\u6cd5\uff0c\u8bc1\u660e\u4efb\u4f55\u65f6\u5019 K \u7b97\u6cd5\u9009\u62e9\u7684\u8fb9\u96c6\u90fd\u88ab\u67d0\u68f5 MST \u6240\u5305\u542b\u3002 \u57fa\u7840\uff1a\u5bf9\u4e8e\u7b97\u6cd5\u521a\u5f00\u59cb\u65f6\uff0c\u663e\u7136\u6210\u7acb\uff08\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728\uff09\u3002 \u5f52\u7eb3\uff1a\u5047\u8bbe\u67d0\u65f6\u523b\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F F \uff0c\u4ee4 T T \u4e3a\u8fd9\u68f5 MST\uff0c\u8003\u8651\u4e0b\u4e00\u6761\u52a0\u5165\u7684\u8fb9 e e \u3002 \u5982\u679c e e \u5c5e\u4e8e T T \uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\uff0c T+e T+e \u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u73af\uff0c\u8003\u8651\u8fd9\u4e2a\u73af\u4e0a\u4e0d\u5c5e\u4e8e F F \u7684\u53e6\u4e00\u6761\u8fb9 f f \uff08\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\uff09\u3002 \u9996\u5148\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 e e \u5c0f\uff0c\u4e0d\u7136 f f \u4f1a\u5728 e e \u4e4b\u524d\u88ab\u9009\u53d6\u3002 \u7136\u540e\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 e e \u5927\uff0c\u4e0d\u7136 T+e-f T+e-f \u5c31\u662f\u4e00\u68f5\u6bd4 T T \u8fd8\u4f18\u7684\u751f\u6210\u6811\u4e86\u3002 \u6240\u4ee5\uff0c T+e-f T+e-f \u5305\u542b\u4e86 F F \uff0c\u5e76\u4e14\u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f52\u7eb3\u6210\u7acb\u3002 \u5b9e\u73b0 \u00b6 \u7b97\u6cd5\u867d\u7b80\u5355\uff0c\u4f46\u9700\u8981\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u6765\u652f\u6301\u2026\u2026 \u5177\u4f53\u6765\u8bf4\uff0c\u7ef4\u62a4\u4e00\u4e2a\u68ee\u6797\uff0c\u67e5\u8be2\u4e24\u4e2a\u7ed3\u70b9\u662f\u5426\u5728\u540c\u4e00\u68f5\u6811\u4e2d\uff0c\u8fde\u63a5\u4e24\u68f5\u6811\u3002 \u62bd\u8c61\u4e00\u70b9\u5730\u8bf4\uff0c\u7ef4\u62a4\u4e00\u5806 \u96c6\u5408 \uff0c\u67e5\u8be2\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u3002 \u6211\u4eec\u5148\u5565\u90fd\u4e0d\u7ba1\uff0c\u5047\u8bbe\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u2026\u2026 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 for (edge(u, v, len) in sorted(edges)) { a = find_set(u), b = find_set(v); if (a != b) merge(a, b); } find_set \u8c03\u7528 O(m) O(m) \u6b21\uff0cmerge \u8c03\u7528 O(n) O(n) \u6b21\u3002 \u6392\u5e8f\u7684\u590d\u6742\u5ea6\u4e3a O(m \\log m) O(m \\log m) \uff0c\u6216 O(m) O(m) \uff08\u5047\u8bbe\u80fd\u57fa\u6570\u6392\u5e8f\uff09\u3002 \u90a3\u4e48\u8ba9\u6211\u4eec\u6a21\u62df\u4e00\u4e0b\uff1a \u5148\u4e0a\u6570\u636e\uff1a 1 2 3 4 5 6 4 5 1 2 2 1 3 2 1 4 3 2 3 4 3 4 3 \u56fe\u662f\u8fd9\u6837\u7684\uff1a \u6211\u4eec\u7528 F F \u8868\u793a\u5e76\u67e5\u96c6\uff0c E E \u8868\u793a\u6392\u5e8f\u540e\u7684\u7ed3\u6784\u4f53\uff0c\u4e0b\u9762\u662f\u521d\u59cb\u7684\u72b6\u6001\uff1a F F \uff1a \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 2 3 4 E E \uff1a \u7f16\u53f7 1 2 3 4 5 start 1 1 1 3 2 to 2 3 4 4 3 cost 2 2 3 3 4 \u9996\u5148\u6211\u4eec\u53d1\u73b0\u3000\uff11,\uff12\u3000\u662f\u6700\u5c0f\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5728\u3000\uff11\u3000\u4e0e\u3000\uff12\u3000\u5efa\u4e86\u4e00\u6761\u8fb9\uff0c\u7531\u4e8e\u8fd9\u662f\u7b2c\u4e00\u6b21\u561b\uff0c\u80af\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u73af\u4e86\uff0c\u5e76\u4e14\u5c06\u3000\uff11\u3000\u548c\u3000\uff12\u3000\u52a0\u5165\u4e00\u4e2a\u96c6\u5408\uff1a F F \uff1a \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 1 3 4 \u63a5\u7740\u53d1\u73b0\u3000\uff11,\uff13\uff0c\u5224\u65ad\u3000\uff13\u3000\u548c\u3000\uff11\u3000\u7684\u662f\u4e0d\u662f\u5728\u4e00\u4e2a\u96c6\u5408\uff1f\u53d1\u73b0\u4e0d\u662f\uff0c\u4e8e\u662f\u5c06\u3000\uff13\u3000\u52a0\u8fdb\u53bb\uff0c\u5e76\u4e14\u6807\u8bb0\u3000\uff13\u3000\u5f52\u5c5e\uff11\u3002 F F \uff1a \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 1 1 4 \u53d1\u73b0\u3000\uff11,\uff14\uff0c\u540c\u65f6\u3000\uff11\u3000\u548c\u3000\uff14\u3000\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4e8e\u662f\u5c06\u3000\uff14\u3000\u52a0\u8fdb\u53bb\uff0c\u6807\u8bb0\u3000\uff14\u3000\u4e5f\u5f52\u5c5e\u3000\uff11\u3002 \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 1 1 1 \u6b64\u65f6\uff0c\u8fb9\u6570\u4e3a\u70b9\u6570\u3000 -1 -1 \uff0c\u6574\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5b8c\u6210\u4e86\uff0c\u4ee3\u4ef7\u662f\u3000 2+2+3=7 2+2+3=7 \u3002 \u201c\u96c6\u5408\u201d \u6570\u636e\u7ed3\u6784\u7684\u4e00\u79cd\u5b9e\u73b0 \u00b6 \u53ea\u8981\u652f\u6301\u4e24\u4e2a\u63a5\u53e3\uff1afind_set \u548c merge\u3002 \u6211\u4eec\u5148\u8003\u8651\u66b4\u529b\uff0c\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u5143\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u96c6\u5408\u6709\u54ea\u4e9b\u5143\u7d20\u3002 find_set\uff1a O(1) O(1) merge\uff1a O(n) O(n) \uff0c\u9700\u8981\u5c06\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u79fb\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u4e8e\u662f\u8003\u8651\u5982\u4f55\u4f18\u5316 merge\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u601d\u8def\u662f\uff0c\u5c06\u8f83\u5c0f\u7684\u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u79fb\u5230\u8f83\u5927\u7684\u96c6\u5408\u4e2d\u3002 \u590d\u6742\u5ea6\u662f O(\u8f83\u5c0f\u96c6\u5408\u7684\u5927\u5c0f) O(\u8f83\u5c0f\u96c6\u5408\u7684\u5927\u5c0f) \u3002 \u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f \u6211\u4eec\u6362\u4e00\u4e2a\u89d2\u5ea6\u5206\u6790\uff0c\u8003\u8651\u6bcf\u4e2a\u5143\u7d20\u5bf9\u6bcf\u6b21\u5408\u5e76\u64cd\u4f5c\u7684\u8d21\u732e\u3002 \u5f88\u663e\u7136\uff0c\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\u5927\u5c0f\uff0c\u5728\u4f5c\u4e3a\u8f83\u5c0f\u96c6\u5408\u88ab\u5408\u5e76\u4e00\u6b21\u4e4b\u540e\uff0c\u81f3\u5c11\u589e\u52a0\u4e00\u500d\u3002 \u6240\u4ee5\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\uff0c\u6700\u591a\u6709 \\log n \\log n \u6b21\uff0c\u4f5c\u4e3a\u8f83\u5c0f\u96c6\u5408\u88ab\u5408\u5e76\u3002 \u4e00\u5171 n n \u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\log n + m) O(n \\log n + m) \u3002 \u8fd9\u79cd\u505a\u6cd5\u6216\u8005\u601d\u60f3\uff0c\u53eb\u300c\u542f\u53d1\u5f0f\u5408\u5e76\u300d\u3002 \u603b\u4e4b\u6211\u4eec\u5f97\u5230\u4e86 O(n \\log n + m \\log m) O(n \\log n + m \\log m) \u7684 Kruskal \u7b97\u6cd5\u3002 Prim \u7b97\u6cd5 \u00b6 \u662f\u53e6\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u3002 \u57fa\u672c\u601d\u60f3\u662f\u4ece\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u52a0\u70b9\uff08\u800c\u4e0d\u662f Kruskal \u7b97\u6cd5\u7684\u52a0\u8fb9\uff09\u3002 \u8bc1\u660e \u00b6 \u4ece\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u7c7b\uff1a\u5df2\u52a0\u5165\u7684\uff0c\u672a\u52a0\u5165\u7684\u3002 \u6bcf\u6b21\u4ece\u672a\u52a0\u5165\u7684\u7ed3\u70b9\u4e2d\uff0c\u627e\u4e00\u4e2a\u4e0e\u5df2\u52a0\u5165\u7684\u7ed3\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\u6700\u5c0f\u7684\u7ed3\u70b9\u3002 \u7136\u540e\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u52a0\u5165\uff0c\u5e76\u8fde\u4e0a\u90a3\u6761\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002 \u91cd\u590d n-1 n-1 \u6b21\u5373\u53ef\u3002 \u8bc1\u660e\uff1a\u8fd8\u662f\u8bf4\u660e\u5728\u6bcf\u4e00\u6b65\uff0c\u90fd\u5b58\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u5305\u542b\u5df2\u9009\u8fb9\u96c6\u3002 \u57fa\u7840\uff1a\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u663e\u7136\u6210\u7acb\u3002 \u5f52\u7eb3\uff1a\u5982\u679c\u67d0\u4e00\u6b65\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F F \uff0c\u5c5e\u4e8e T T \u8fd9\u68f5 MST\uff0c\u63a5\u4e0b\u6765\u8981\u52a0\u5165\u8fb9 e e \u3002 \u5982\u679c e e \u5c5e\u4e8e T T \uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\u8003\u8651 T+e T+e \u4e2d\u73af\u4e0a\u53e6\u4e00\u6761\u53ef\u4ee5\u52a0\u5165\u5f53\u524d\u8fb9\u96c6\u7684\u8fb9 f f \u3002 \u9996\u5148\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5c0f\u4e8e e e \u7684\u6743\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u9009\u62e9 f f \u800c\u4e0d\u662f e e \u4e86\u3002 \u7136\u540e\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5927\u4e8e e e \u7684\u6743\u503c\uff0c\u5426\u5219 T+e-f T+e-f \u5c31\u662f\u4e00\u68f5\u66f4\u5c0f\u7684\u751f\u6210\u6811\u4e86\u3002 \u56e0\u6b64\uff0c e e \u548c f f \u7684\u6743\u503c\u76f8\u7b49\uff0c T+e-f T+e-f \u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e14\u5305\u542b\u4e86 F F \u3002 \u5b9e\u73b0 \u00b6 \u4e5f\u662f\u9700\u8981\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u652f\u6301\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u8981\u9009\u62e9\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ee5\u53ca\u7528\u65b0\u7684\u8fb9\u66f4\u65b0\u5176\u4ed6\u7ed3\u70b9\u7684\u8ddd\u79bb\u3002 \u7b49\u7b49\uff0c\u8fd9\u5f88\u50cf Dijkstra \u7b97\u6cd5\u2026\u2026 \u5176\u5b9e\u8ddf Dijkstra \u7b97\u6cd5\u4e00\u6837\uff0c\u53ea\u8981\u4e00\u4e2a\u5806\u6765\u7ef4\u62a4\u8ddd\u79bb\u5373\u53ef\u3002 \u66b4\u529b\uff1a O(n^2+m) O(n^2+m) \u3002 \u4e8c\u53c9\u5806\uff1a O((n+m) \\log n) O((n+m) \\log n) \u3002 Fib \u5806\uff1a O(n \\log n + m) O(n \\log n + m) \u3002 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 5 6 7 8 9 H = new heap(); for (i = 1; i <= n; i++) H.insert(i, inf); H.decrease_key(1, 0); for (i = 1; i <= n; i++) { u = H.delete_min(); for each edge(u, v, len) { H.decrease_key(v, len); } } \u6ce8\u610f\uff1a\u4e0a\u8ff0\u4ee3\u7801\u53ea\u662f\u5b9e\u73b0\u4e86 Prim \u7b97\u6cd5\u4e3b\u4f53\uff0c\u5982\u679c\u8981\u8f93\u51fa\u65b9\u6848\u8fd8\u9700\u8981\u8bb0\u5f55\u989d\u5916\u7684\u4fe1\u606f\u3002 \u6ce8\u610f\uff1a\u5728\u904d\u5386\u8fb9\u8868 (u, v) \u65f6\uff0c\u5982\u679c v \u5df2\u7ecf\u88ab delete\uff0c\u5c31\u65e0\u9700 decrease key\u3002 \u6700\u5c0f\u751f\u6210\u6811\u5c0f\u7ed3 \u00b6 \u6211\u4eec\u4ecb\u7ecd\u4e86\u4e24\u79cd\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c\u5404\u6709\u7279\u70b9\u3002 \u7136\u540e\u6211\u4eec\u6765\u8003\u8651\u8fd9\u6837\u4e00\u4e9b\u95ee\u9898\u3002 \u4e00\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684\u3002 \u4ec0\u4e48\u65f6\u5019\u4e00\u5b9a\u552f\u4e00\uff1f \u8003\u8651 Kruskal \u7b97\u6cd5\uff0c\u5f53\u6bcf\u6761\u8fb9\u6743\u90fd\u4e0d\u4e00\u6837\u65f6\uff0c\u4e00\u5f00\u59cb\u7684\u6392\u5e8f\u53ea\u6709\u4e00\u79cd\u65b9\u6848\uff0c\u5c31\u4e00\u5b9a\u552f\u4e00\u4e86\u3002 \u90a3\u4ec0\u4e48\u65f6\u5019\u4e00\u5b9a\u4e0d\u552f\u4e00\uff1f Kruskal \u7b97\u6cd5\u4e2d\u7684\u300c\u96c6\u5408\u300d\uff0c\u80fd\u5426\u8fdb\u4e00\u6b65\u4f18\u5316\uff1f \u6700\u5c0f\u751f\u6210\u6811\u9898\u76ee \u00b6 [HAOI2006] \u806a\u660e\u7684\u7334\u5b50 [SCOI2005] \u7e41\u5fd9\u7684\u90fd\u5e02 \u6700\u5c0f\u751f\u6210\u6811\u7684\u552f\u4e00\u6027 \u00b6 \u8003\u8651\u6700\u5c0f\u751f\u6210\u6811\u7684\u552f\u4e00\u6027\u3002\u5982\u679c\u4e00\u6761\u8fb9 \u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\u4e2d \uff0c\u5e76\u4e14\u53ef\u4ee5\u66ff\u6362\u4e0e\u5176 \u6743\u503c\u76f8\u540c\u3001\u5e76\u4e14\u5728\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u96c6 \u7684\u53e6\u4e00\u6761\u8fb9\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u4e0d\u552f\u4e00\u7684\u3002 \u5bf9\u4e8e Kruskal \u7b97\u6cd5\uff0c\u53ea\u8981\u8ba1\u7b97\u4e3a\u5f53\u524d\u6743\u503c\u7684\u8fb9\u53ef\u4ee5\u653e\u51e0\u6761\uff0c\u5b9e\u9645\u653e\u4e86\u51e0\u6761\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u503c\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u51e0\u6761\u8fb9\u4e0e\u4e4b\u524d\u7684\u8fb9\u4ea7\u751f\u4e86\u4e00\u4e2a\u73af\uff08\u8fd9\u4e2a\u73af\u4e2d\u81f3\u5c11\u6709\u4e24\u6761\u5f53\u524d\u6743\u503c\u7684\u8fb9\uff0c\u5426\u5219\u6839\u636e\u5e76\u67e5\u96c6\uff0c\u8fd9\u6761\u8fb9\u662f\u4e0d\u80fd\u653e\u7684\uff09\uff0c\u5373\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u552f\u4e00\u3002 \u5bfb\u627e\u6743\u503c\u4e0e\u5f53\u524d\u8fb9\u76f8\u540c\u7684\u8fb9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u5934\u5c3e\u6307\u9488\uff0c\u7528\u5355\u8c03\u961f\u5217\u5373\u53ef\u5728 O(\\alpha(m)) O(\\alpha(m)) \uff08m \u4e3a\u8fb9\u6570\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u91cc\u4f18\u79c0\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08\u57fa\u672c\u4e0e\u539f\u7b97\u6cd5\u65f6\u95f4\u76f8\u540c\uff09\u3002 \u4f8b\u9898\uff1a POJ 1679 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include <algorithm> #include <cstdio> using namespace std ; struct tree { int x , y , z ; }; int f [ 100001 ]; tree a [ 100001 ]; int cmp ( const tree a , const tree b ) { return a . z < b . z ; } int find ( int x ) { if ( f [ x ] == x ) return x ; f [ x ] = find ( f [ x ]); return f [ x ]; } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d%d\" , & a [ i ]. x , & a [ i ]. y , & a [ i ]. z ); sort ( a + 1 , a + m + 1 , cmp ); int num = 0 ; int ans = 0 ; int tail = 0 ; int sum1 = 0 ; int sum2 = 0 ; int flag = 1 ; for ( int i = 1 ; i <= m + 1 ; i ++ ) { if ( i > tail ) { if ( sum1 != sum2 ) { flag = 0 ; break ; } sum1 = 0 ; for ( int j = i ; j <= m + 1 ; j ++ ) { if ( a [ j ]. z != a [ i ]. z ) { tail = j - 1 ; break ; } if ( find ( a [ j ]. x ) != find ( a [ j ]. y )) ++ sum1 ; } sum2 = 0 ; } if ( i > m ) break ; int x = find ( a [ i ]. x ); int y = find ( a [ i ]. y ); if ( x != y && num != n - 1 ) { sum2 ++ ; num ++ ; f [ x ] = f [ y ]; ans += a [ i ]. z ; } } if ( flag ) printf ( \"%d \\n \" , ans ); else printf ( \"Not Unique! \\n \" ); } return 0 ; } \u6b21\u5c0f\u751f\u6210\u6811 \u00b6 \u7b2c k \u5c0f\u751f\u6210\u6811 \u00b6","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"graph/mst/#_1","text":"\uff08\u8fd8\u8bb0\u5f97\u8fd9\u4e9b\u5b9a\u4e49\u5417\uff1f\u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\uff09 \u751f\u6210\u5b50\u56fe \u751f\u6210\u6811 \u6700\u5c0f\u751f\u6210\u6811\uff1a\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u8fde\u901a\u56fe\u624d\u6709\u751f\u6210\u6811\uff0c\u800c\u5bf9\u4e8e\u975e\u8fde\u901a\u56fe\uff0c\u53ea\u80fd\u641e\u51fa\u751f\u6210\u68ee\u6797\u3002","title":"\u5b9a\u4e49"},{"location":"graph/mst/#kruskal","text":"\u662f\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u7531 Kruskal \u53d1\u660e\uff0c\u57fa\u672c\u601d\u60f3\u662f\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u8fb9\uff0c\u662f\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u3002","title":"Kruskal \u7b97\u6cd5"},{"location":"graph/mst/#_2","text":"\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e3a\u4e86\u9020\u51fa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u4ece\u6700\u5c0f\u8fb9\u6743\u7684\u8fb9\u5f00\u59cb\uff0c\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u52a0\u5165\uff0c\u5982\u679c\u67d0\u6b21\u52a0\u8fb9\u4ea7\u751f\u4e86\u73af\uff0c\u5c31\u6254\u6389\u8fd9\u6761\u8fb9\uff0c\u76f4\u5230\u52a0\u5165\u4e86 n-1 n-1 \u6761\u8fb9\uff0c\u5373\u5f62\u6210\u4e86\u4e00\u68f5\u6811\u3002 \u8bc1\u660e\uff1a\u4f7f\u7528\u5f52\u7eb3\u6cd5\uff0c\u8bc1\u660e\u4efb\u4f55\u65f6\u5019 K \u7b97\u6cd5\u9009\u62e9\u7684\u8fb9\u96c6\u90fd\u88ab\u67d0\u68f5 MST \u6240\u5305\u542b\u3002 \u57fa\u7840\uff1a\u5bf9\u4e8e\u7b97\u6cd5\u521a\u5f00\u59cb\u65f6\uff0c\u663e\u7136\u6210\u7acb\uff08\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728\uff09\u3002 \u5f52\u7eb3\uff1a\u5047\u8bbe\u67d0\u65f6\u523b\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F F \uff0c\u4ee4 T T \u4e3a\u8fd9\u68f5 MST\uff0c\u8003\u8651\u4e0b\u4e00\u6761\u52a0\u5165\u7684\u8fb9 e e \u3002 \u5982\u679c e e \u5c5e\u4e8e T T \uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\uff0c T+e T+e \u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u73af\uff0c\u8003\u8651\u8fd9\u4e2a\u73af\u4e0a\u4e0d\u5c5e\u4e8e F F \u7684\u53e6\u4e00\u6761\u8fb9 f f \uff08\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\uff09\u3002 \u9996\u5148\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 e e \u5c0f\uff0c\u4e0d\u7136 f f \u4f1a\u5728 e e \u4e4b\u524d\u88ab\u9009\u53d6\u3002 \u7136\u540e\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u6bd4 e e \u5927\uff0c\u4e0d\u7136 T+e-f T+e-f \u5c31\u662f\u4e00\u68f5\u6bd4 T T \u8fd8\u4f18\u7684\u751f\u6210\u6811\u4e86\u3002 \u6240\u4ee5\uff0c T+e-f T+e-f \u5305\u542b\u4e86 F F \uff0c\u5e76\u4e14\u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f52\u7eb3\u6210\u7acb\u3002","title":"\u8bc1\u660e"},{"location":"graph/mst/#_3","text":"\u7b97\u6cd5\u867d\u7b80\u5355\uff0c\u4f46\u9700\u8981\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u6765\u652f\u6301\u2026\u2026 \u5177\u4f53\u6765\u8bf4\uff0c\u7ef4\u62a4\u4e00\u4e2a\u68ee\u6797\uff0c\u67e5\u8be2\u4e24\u4e2a\u7ed3\u70b9\u662f\u5426\u5728\u540c\u4e00\u68f5\u6811\u4e2d\uff0c\u8fde\u63a5\u4e24\u68f5\u6811\u3002 \u62bd\u8c61\u4e00\u70b9\u5730\u8bf4\uff0c\u7ef4\u62a4\u4e00\u5806 \u96c6\u5408 \uff0c\u67e5\u8be2\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u3002 \u6211\u4eec\u5148\u5565\u90fd\u4e0d\u7ba1\uff0c\u5047\u8bbe\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u2026\u2026 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 for (edge(u, v, len) in sorted(edges)) { a = find_set(u), b = find_set(v); if (a != b) merge(a, b); } find_set \u8c03\u7528 O(m) O(m) \u6b21\uff0cmerge \u8c03\u7528 O(n) O(n) \u6b21\u3002 \u6392\u5e8f\u7684\u590d\u6742\u5ea6\u4e3a O(m \\log m) O(m \\log m) \uff0c\u6216 O(m) O(m) \uff08\u5047\u8bbe\u80fd\u57fa\u6570\u6392\u5e8f\uff09\u3002 \u90a3\u4e48\u8ba9\u6211\u4eec\u6a21\u62df\u4e00\u4e0b\uff1a \u5148\u4e0a\u6570\u636e\uff1a 1 2 3 4 5 6 4 5 1 2 2 1 3 2 1 4 3 2 3 4 3 4 3 \u56fe\u662f\u8fd9\u6837\u7684\uff1a \u6211\u4eec\u7528 F F \u8868\u793a\u5e76\u67e5\u96c6\uff0c E E \u8868\u793a\u6392\u5e8f\u540e\u7684\u7ed3\u6784\u4f53\uff0c\u4e0b\u9762\u662f\u521d\u59cb\u7684\u72b6\u6001\uff1a F F \uff1a \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 2 3 4 E E \uff1a \u7f16\u53f7 1 2 3 4 5 start 1 1 1 3 2 to 2 3 4 4 3 cost 2 2 3 3 4 \u9996\u5148\u6211\u4eec\u53d1\u73b0\u3000\uff11,\uff12\u3000\u662f\u6700\u5c0f\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5728\u3000\uff11\u3000\u4e0e\u3000\uff12\u3000\u5efa\u4e86\u4e00\u6761\u8fb9\uff0c\u7531\u4e8e\u8fd9\u662f\u7b2c\u4e00\u6b21\u561b\uff0c\u80af\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u73af\u4e86\uff0c\u5e76\u4e14\u5c06\u3000\uff11\u3000\u548c\u3000\uff12\u3000\u52a0\u5165\u4e00\u4e2a\u96c6\u5408\uff1a F F \uff1a \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 1 3 4 \u63a5\u7740\u53d1\u73b0\u3000\uff11,\uff13\uff0c\u5224\u65ad\u3000\uff13\u3000\u548c\u3000\uff11\u3000\u7684\u662f\u4e0d\u662f\u5728\u4e00\u4e2a\u96c6\u5408\uff1f\u53d1\u73b0\u4e0d\u662f\uff0c\u4e8e\u662f\u5c06\u3000\uff13\u3000\u52a0\u8fdb\u53bb\uff0c\u5e76\u4e14\u6807\u8bb0\u3000\uff13\u3000\u5f52\u5c5e\uff11\u3002 F F \uff1a \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 1 1 4 \u53d1\u73b0\u3000\uff11,\uff14\uff0c\u540c\u65f6\u3000\uff11\u3000\u548c\u3000\uff14\u3000\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4e8e\u662f\u5c06\u3000\uff14\u3000\u52a0\u8fdb\u53bb\uff0c\u6807\u8bb0\u3000\uff14\u3000\u4e5f\u5f52\u5c5e\u3000\uff11\u3002 \u7f16\u53f7 1 2 3 4 \u7956\u5b97 1 1 1 1 \u6b64\u65f6\uff0c\u8fb9\u6570\u4e3a\u70b9\u6570\u3000 -1 -1 \uff0c\u6574\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5b8c\u6210\u4e86\uff0c\u4ee3\u4ef7\u662f\u3000 2+2+3=7 2+2+3=7 \u3002","title":"\u5b9e\u73b0"},{"location":"graph/mst/#_4","text":"\u53ea\u8981\u652f\u6301\u4e24\u4e2a\u63a5\u53e3\uff1afind_set \u548c merge\u3002 \u6211\u4eec\u5148\u8003\u8651\u66b4\u529b\uff0c\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u5143\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u96c6\u5408\u6709\u54ea\u4e9b\u5143\u7d20\u3002 find_set\uff1a O(1) O(1) merge\uff1a O(n) O(n) \uff0c\u9700\u8981\u5c06\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u79fb\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u4e8e\u662f\u8003\u8651\u5982\u4f55\u4f18\u5316 merge\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u601d\u8def\u662f\uff0c\u5c06\u8f83\u5c0f\u7684\u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u79fb\u5230\u8f83\u5927\u7684\u96c6\u5408\u4e2d\u3002 \u590d\u6742\u5ea6\u662f O(\u8f83\u5c0f\u96c6\u5408\u7684\u5927\u5c0f) O(\u8f83\u5c0f\u96c6\u5408\u7684\u5927\u5c0f) \u3002 \u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f \u6211\u4eec\u6362\u4e00\u4e2a\u89d2\u5ea6\u5206\u6790\uff0c\u8003\u8651\u6bcf\u4e2a\u5143\u7d20\u5bf9\u6bcf\u6b21\u5408\u5e76\u64cd\u4f5c\u7684\u8d21\u732e\u3002 \u5f88\u663e\u7136\uff0c\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\u5927\u5c0f\uff0c\u5728\u4f5c\u4e3a\u8f83\u5c0f\u96c6\u5408\u88ab\u5408\u5e76\u4e00\u6b21\u4e4b\u540e\uff0c\u81f3\u5c11\u589e\u52a0\u4e00\u500d\u3002 \u6240\u4ee5\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\uff0c\u6700\u591a\u6709 \\log n \\log n \u6b21\uff0c\u4f5c\u4e3a\u8f83\u5c0f\u96c6\u5408\u88ab\u5408\u5e76\u3002 \u4e00\u5171 n n \u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\log n + m) O(n \\log n + m) \u3002 \u8fd9\u79cd\u505a\u6cd5\u6216\u8005\u601d\u60f3\uff0c\u53eb\u300c\u542f\u53d1\u5f0f\u5408\u5e76\u300d\u3002 \u603b\u4e4b\u6211\u4eec\u5f97\u5230\u4e86 O(n \\log n + m \\log m) O(n \\log n + m \\log m) \u7684 Kruskal \u7b97\u6cd5\u3002","title":"\u201c\u96c6\u5408\u201d \u6570\u636e\u7ed3\u6784\u7684\u4e00\u79cd\u5b9e\u73b0"},{"location":"graph/mst/#prim","text":"\u662f\u53e6\u4e00\u79cd\u5e38\u89c1\u5e76\u4e14\u597d\u5199\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u3002 \u57fa\u672c\u601d\u60f3\u662f\u4ece\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u52a0\u70b9\uff08\u800c\u4e0d\u662f Kruskal \u7b97\u6cd5\u7684\u52a0\u8fb9\uff09\u3002","title":"Prim \u7b97\u6cd5"},{"location":"graph/mst/#_5","text":"\u4ece\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u7c7b\uff1a\u5df2\u52a0\u5165\u7684\uff0c\u672a\u52a0\u5165\u7684\u3002 \u6bcf\u6b21\u4ece\u672a\u52a0\u5165\u7684\u7ed3\u70b9\u4e2d\uff0c\u627e\u4e00\u4e2a\u4e0e\u5df2\u52a0\u5165\u7684\u7ed3\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\u6700\u5c0f\u7684\u7ed3\u70b9\u3002 \u7136\u540e\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u52a0\u5165\uff0c\u5e76\u8fde\u4e0a\u90a3\u6761\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002 \u91cd\u590d n-1 n-1 \u6b21\u5373\u53ef\u3002 \u8bc1\u660e\uff1a\u8fd8\u662f\u8bf4\u660e\u5728\u6bcf\u4e00\u6b65\uff0c\u90fd\u5b58\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u5305\u542b\u5df2\u9009\u8fb9\u96c6\u3002 \u57fa\u7840\uff1a\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u663e\u7136\u6210\u7acb\u3002 \u5f52\u7eb3\uff1a\u5982\u679c\u67d0\u4e00\u6b65\u6210\u7acb\uff0c\u5f53\u524d\u8fb9\u96c6\u4e3a F F \uff0c\u5c5e\u4e8e T T \u8fd9\u68f5 MST\uff0c\u63a5\u4e0b\u6765\u8981\u52a0\u5165\u8fb9 e e \u3002 \u5982\u679c e e \u5c5e\u4e8e T T \uff0c\u90a3\u4e48\u6210\u7acb\u3002 \u5426\u5219\u8003\u8651 T+e T+e \u4e2d\u73af\u4e0a\u53e6\u4e00\u6761\u53ef\u4ee5\u52a0\u5165\u5f53\u524d\u8fb9\u96c6\u7684\u8fb9 f f \u3002 \u9996\u5148\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5c0f\u4e8e e e \u7684\u6743\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u9009\u62e9 f f \u800c\u4e0d\u662f e e \u4e86\u3002 \u7136\u540e\uff0c f f \u7684\u6743\u503c\u4e00\u5b9a\u4e0d\u5927\u4e8e e e \u7684\u6743\u503c\uff0c\u5426\u5219 T+e-f T+e-f \u5c31\u662f\u4e00\u68f5\u66f4\u5c0f\u7684\u751f\u6210\u6811\u4e86\u3002 \u56e0\u6b64\uff0c e e \u548c f f \u7684\u6743\u503c\u76f8\u7b49\uff0c T+e-f T+e-f \u4e5f\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e14\u5305\u542b\u4e86 F F \u3002","title":"\u8bc1\u660e"},{"location":"graph/mst/#_6","text":"\u4e5f\u662f\u9700\u8981\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u652f\u6301\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u8981\u9009\u62e9\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ee5\u53ca\u7528\u65b0\u7684\u8fb9\u66f4\u65b0\u5176\u4ed6\u7ed3\u70b9\u7684\u8ddd\u79bb\u3002 \u7b49\u7b49\uff0c\u8fd9\u5f88\u50cf Dijkstra \u7b97\u6cd5\u2026\u2026 \u5176\u5b9e\u8ddf Dijkstra \u7b97\u6cd5\u4e00\u6837\uff0c\u53ea\u8981\u4e00\u4e2a\u5806\u6765\u7ef4\u62a4\u8ddd\u79bb\u5373\u53ef\u3002 \u66b4\u529b\uff1a O(n^2+m) O(n^2+m) \u3002 \u4e8c\u53c9\u5806\uff1a O((n+m) \\log n) O((n+m) \\log n) \u3002 Fib \u5806\uff1a O(n \\log n + m) O(n \\log n + m) \u3002 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 5 6 7 8 9 H = new heap(); for (i = 1; i <= n; i++) H.insert(i, inf); H.decrease_key(1, 0); for (i = 1; i <= n; i++) { u = H.delete_min(); for each edge(u, v, len) { H.decrease_key(v, len); } } \u6ce8\u610f\uff1a\u4e0a\u8ff0\u4ee3\u7801\u53ea\u662f\u5b9e\u73b0\u4e86 Prim \u7b97\u6cd5\u4e3b\u4f53\uff0c\u5982\u679c\u8981\u8f93\u51fa\u65b9\u6848\u8fd8\u9700\u8981\u8bb0\u5f55\u989d\u5916\u7684\u4fe1\u606f\u3002 \u6ce8\u610f\uff1a\u5728\u904d\u5386\u8fb9\u8868 (u, v) \u65f6\uff0c\u5982\u679c v \u5df2\u7ecf\u88ab delete\uff0c\u5c31\u65e0\u9700 decrease key\u3002","title":"\u5b9e\u73b0"},{"location":"graph/mst/#_7","text":"\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e24\u79cd\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c\u5404\u6709\u7279\u70b9\u3002 \u7136\u540e\u6211\u4eec\u6765\u8003\u8651\u8fd9\u6837\u4e00\u4e9b\u95ee\u9898\u3002 \u4e00\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684\u3002 \u4ec0\u4e48\u65f6\u5019\u4e00\u5b9a\u552f\u4e00\uff1f \u8003\u8651 Kruskal \u7b97\u6cd5\uff0c\u5f53\u6bcf\u6761\u8fb9\u6743\u90fd\u4e0d\u4e00\u6837\u65f6\uff0c\u4e00\u5f00\u59cb\u7684\u6392\u5e8f\u53ea\u6709\u4e00\u79cd\u65b9\u6848\uff0c\u5c31\u4e00\u5b9a\u552f\u4e00\u4e86\u3002 \u90a3\u4ec0\u4e48\u65f6\u5019\u4e00\u5b9a\u4e0d\u552f\u4e00\uff1f Kruskal \u7b97\u6cd5\u4e2d\u7684\u300c\u96c6\u5408\u300d\uff0c\u80fd\u5426\u8fdb\u4e00\u6b65\u4f18\u5316\uff1f","title":"\u6700\u5c0f\u751f\u6210\u6811\u5c0f\u7ed3"},{"location":"graph/mst/#_8","text":"[HAOI2006] \u806a\u660e\u7684\u7334\u5b50 [SCOI2005] \u7e41\u5fd9\u7684\u90fd\u5e02","title":"\u6700\u5c0f\u751f\u6210\u6811\u9898\u76ee"},{"location":"graph/mst/#_9","text":"\u8003\u8651\u6700\u5c0f\u751f\u6210\u6811\u7684\u552f\u4e00\u6027\u3002\u5982\u679c\u4e00\u6761\u8fb9 \u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\u4e2d \uff0c\u5e76\u4e14\u53ef\u4ee5\u66ff\u6362\u4e0e\u5176 \u6743\u503c\u76f8\u540c\u3001\u5e76\u4e14\u5728\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u96c6 \u7684\u53e6\u4e00\u6761\u8fb9\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u4e0d\u552f\u4e00\u7684\u3002 \u5bf9\u4e8e Kruskal \u7b97\u6cd5\uff0c\u53ea\u8981\u8ba1\u7b97\u4e3a\u5f53\u524d\u6743\u503c\u7684\u8fb9\u53ef\u4ee5\u653e\u51e0\u6761\uff0c\u5b9e\u9645\u653e\u4e86\u51e0\u6761\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u503c\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u51e0\u6761\u8fb9\u4e0e\u4e4b\u524d\u7684\u8fb9\u4ea7\u751f\u4e86\u4e00\u4e2a\u73af\uff08\u8fd9\u4e2a\u73af\u4e2d\u81f3\u5c11\u6709\u4e24\u6761\u5f53\u524d\u6743\u503c\u7684\u8fb9\uff0c\u5426\u5219\u6839\u636e\u5e76\u67e5\u96c6\uff0c\u8fd9\u6761\u8fb9\u662f\u4e0d\u80fd\u653e\u7684\uff09\uff0c\u5373\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u552f\u4e00\u3002 \u5bfb\u627e\u6743\u503c\u4e0e\u5f53\u524d\u8fb9\u76f8\u540c\u7684\u8fb9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u5934\u5c3e\u6307\u9488\uff0c\u7528\u5355\u8c03\u961f\u5217\u5373\u53ef\u5728 O(\\alpha(m)) O(\\alpha(m)) \uff08m \u4e3a\u8fb9\u6570\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u91cc\u4f18\u79c0\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08\u57fa\u672c\u4e0e\u539f\u7b97\u6cd5\u65f6\u95f4\u76f8\u540c\uff09\u3002 \u4f8b\u9898\uff1a POJ 1679 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include <algorithm> #include <cstdio> using namespace std ; struct tree { int x , y , z ; }; int f [ 100001 ]; tree a [ 100001 ]; int cmp ( const tree a , const tree b ) { return a . z < b . z ; } int find ( int x ) { if ( f [ x ] == x ) return x ; f [ x ] = find ( f [ x ]); return f [ x ]; } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d%d\" , & a [ i ]. x , & a [ i ]. y , & a [ i ]. z ); sort ( a + 1 , a + m + 1 , cmp ); int num = 0 ; int ans = 0 ; int tail = 0 ; int sum1 = 0 ; int sum2 = 0 ; int flag = 1 ; for ( int i = 1 ; i <= m + 1 ; i ++ ) { if ( i > tail ) { if ( sum1 != sum2 ) { flag = 0 ; break ; } sum1 = 0 ; for ( int j = i ; j <= m + 1 ; j ++ ) { if ( a [ j ]. z != a [ i ]. z ) { tail = j - 1 ; break ; } if ( find ( a [ j ]. x ) != find ( a [ j ]. y )) ++ sum1 ; } sum2 = 0 ; } if ( i > m ) break ; int x = find ( a [ i ]. x ); int y = find ( a [ i ]. y ); if ( x != y && num != n - 1 ) { sum2 ++ ; num ++ ; f [ x ] = f [ y ]; ans += a [ i ]. z ; } } if ( flag ) printf ( \"%d \\n \" , ans ); else printf ( \"Not Unique! \\n \" ); } return 0 ; }","title":"\u6700\u5c0f\u751f\u6210\u6811\u7684\u552f\u4e00\u6027"},{"location":"graph/mst/#_10","text":"","title":"\u6b21\u5c0f\u751f\u6210\u6811"},{"location":"graph/mst/#k","text":"","title":"\u7b2c k \u5c0f\u751f\u6210\u6811"},{"location":"graph/scc/","text":"\u7b80\u4ecb \u00b6 \u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\u3002 \u5f3a\u8fde\u901a\u7684\u5b9a\u4e49\u662f\uff1a\u6709\u5411\u56fe G \u5f3a\u8fde\u901a\u662f\u6307\uff0cG \u4e2d\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8fde\u901a\u3002 \u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components\uff0cSCC\uff09\u7684\u5b9a\u4e49\u662f\uff1a\u6781\u5927\u7684\u5f3a\u8fde\u901a\u5b50\u56fe\u3002 \u8fd9\u91cc\u60f3\u8981\u4ecb\u7ecd\u7684\u662f\u5982\u4f55\u6765\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u3002 Tarjan \u7b97\u6cd5 \u00b6 Robert E. Tarjan (1948~) \u7f8e\u56fd\u4eba\u3002 Tarjan \u53d1\u660e\u4e86\u5f88\u591a\u5f88\u6709\u7528\u7684\u4e1c\u897f\uff0c\u4e0b\u5230 NOIP \u4e0a\u5230 CTSC \u96be\u5ea6\u7684\u90fd\u6709\u3002 \u3010\u4e3e\u4f8b\u5b50\uff1aTarjan \u7b97\u6cd5\uff0c\u5e76\u67e5\u96c6\uff0cSplay \u6811\uff0cTarjan \u79bb\u7ebf\u6c42 lca\uff08Lowest Common Ancestor\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\u7b49\u7b49\u3011 \u6211\u4eec\u8fd9\u91cc\u8981\u4ecb\u7ecd\u7684\u662f\u56fe\u8bba\u4e2d\u7684 Tarjan \u7b97\u6cd5\uff0c\u7528\u6765\u5904\u7406\u5404\u79cd\u8fde\u901a\u6027\u76f8\u5173\u7684\u95ee\u9898\u3002 \u5b9a\u4e49 \u00b6 \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e9b\u4e1c\u897f\u3002 dfn[x] \uff1a\u7ed3\u70b9 x \u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\u6233 (dfs number) low[x] \uff1a\u7ed3\u70b9 x \u6240\u80fd\u8bbf\u95ee\u5230\u7684\u70b9\u7684 dfn \u503c\u7684\u6700\u5c0f\u503c \u8fd9\u91cc\u7684\u6811\u6307\u7684\u662f DFS \u6811 \u6240\u6709\u7ed3\u70b9\u6309 dfn \u6392\u5e8f\u5373\u53ef\u5f97 dfs \u5e8f\u5217 DFS \u6811\u7684\u6027\u8d28 \u00b6 \u4e00\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u5185\u7ed3\u70b9\u7684 dfn \u90fd\u5927\u4e8e\u8be5\u7ed3\u70b9\u7684 dfn\u3002 \u4ece\u6839\u5f00\u59cb\u7684\u4e00\u6761\u8def\u5f84\u4e0a\u7684 dfn \u4e25\u683c\u9012\u589e\u3002 \u4e00\u68f5 DFS \u6811\u88ab\u6784\u9020\u51fa\u6765\u540e\uff0c\u8003\u8651\u56fe\u4e2d\u7684\u975e\u6811\u8fb9\u3002 \u524d\u5411\u8fb9 (forward edge)\uff1a\u7956\u5148\u2192\u513f\u5b50 \u540e\u5411\u8fb9 (backward edge)\uff1a\u513f\u5b50\u2192\u7956\u5148 \u6a2a\u53c9\u8fb9 (cross edge)\uff1a\u6ca1\u6709\u7956\u5148\u2014\u513f\u5b50\u5173\u7cfb\u7684 \u6ce8\u610f\uff1a\u6a2a\u53c9\u8fb9\u53ea\u4f1a\u5f80 dfn \u51cf\u5c0f\u7684\u65b9\u5411\u8fde\u63a5 \u6ce8\u610f\uff1a\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u6ca1\u6709\u6a2a\u53c9\u8fb9\uff08\u4e3a\u4ec0\u4e48\uff1f\uff09 \u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 dfs ( x ) { dfn [ x ] = low [ x ] = ++ index ; S . push ( x ); instack [ x ] = true ; for each edge ( x , y ) { if ( ! dfn [ y ]) { dfs ( y ); low [ x ] = min ( low [ x ], low [ y ]); } else if ( instack [ y ]) { low [ x ] = min ( low [ x ], dfn [ y ]); } } if ( dfn [ x ] == low [ x ]) { while ( 1 ) { t = S . pop (); instack [ t ] = false ; if ( t == x ) break ; } } } \uff08\u8f6c\u81ea\u7ef4\u57fa\uff1a https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm \uff09 \u65f6\u95f4\u590d\u6742\u5ea6 O(n + m) O(n + m) Kosaraju \u7b97\u6cd5 \u00b6 Kosaraju \u7b97\u6cd5\u4f9d\u9760\u4e24\u6b21\u7b80\u5355\u7684 dfs \u5b9e\u73b0\u3002 \u7b2c\u4e00\u6b21 dfs\uff0c\u9009\u53d6\u4efb\u610f\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u904d\u5386\u6240\u6709\u4e3a\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\uff0c\u5e76\u5728\u56de\u6eaf\u4e4b\u524d\u7ed9\u9876\u70b9\u7f16\u53f7\uff0c\u4e5f\u5c31\u662f\u540e\u5e8f\u904d\u5386\u3002 \u7b2c\u4e8c\u6b21 dfs\uff0c\u5bf9\u4e8e\u53cd\u5411\u540e\u7684\u56fe\uff0c\u4ee5\u6807\u53f7\u6700\u5927\u7684\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\u5f00\u59cb dfs\u3002\u8fd9\u6837\u904d\u5386\u5230\u7684\u9876\u70b9\u96c6\u5408\u5c31\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u5bf9\u4e8e\u6240\u6709\u672a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u9009\u53d6\u6807\u53f7\u6700\u5927\u7684\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u4e24\u6b21 dfs \u7ed3\u675f\u540e\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u627e\u51fa\u6765\u4e86\uff0cKosaraju \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n+m) O(n+m) \u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // g \u662f\u539f\u56fe\uff0cg2 \u662f\u53cd\u56fe void dfs1 ( int u ) { vis [ u ] = true ; for ( int v : g [ u ]) if ( ! vis [ v ]) dfs1 ( v ); s . push_back ( v ); } void dfs2 ( int u ) { color [ u ] = sccCnt ; for ( int v : g2 [ u ]) if ( ! color [ v ]) dfs2 ( v ); } void kosaraju () { sccCnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vis [ i ]) dfs1 ( i ); for ( int i = n ; i >= 1 ; -- i ) if ( ! color [ s [ i ]]) { ++ sccCnt ; dfs2 ( s [ i ]) } } Garbow \u7b97\u6cd5 \u00b6 \u5e94\u7528 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u5f20\u56fe\u7684\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u90fd\u7f29\u6210\u4e00\u4e2a\u70b9\u3002 \u7136\u540e\u8fd9\u5f20\u56fe\u4f1a\u53d8\u6210\u4e00\u4e2a DAG\uff08\u4e3a\u4ec0\u4e48\uff1f\uff09\u3002 DAG \u597d\u554a\uff0c\u80fd\u62d3\u6251\u6392\u5e8f\u4e86\u5c31\u80fd\u505a\u5f88\u591a\u4e8b\u60c5\u4e86\u3002 \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u53ef\u4ee5\u7ecf\u8fc7\u91cd\u590d\u7ed3\u70b9\uff0c\u8981\u6c42\u7ecf\u8fc7\u7684\u4e0d\u540c\u7ed3\u70b9\u6570\u91cf\u6700\u591a\u3002 \u63a8\u8350\u9898\u76ee \u00b6 USACO Fall/HAOI 2006 \u53d7\u6b22\u8fce\u7684\u725b POJ1236 Network of Schools","title":"\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"graph/scc/#_1","text":"\u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\u3002 \u5f3a\u8fde\u901a\u7684\u5b9a\u4e49\u662f\uff1a\u6709\u5411\u56fe G \u5f3a\u8fde\u901a\u662f\u6307\uff0cG \u4e2d\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8fde\u901a\u3002 \u5f3a\u8fde\u901a\u5206\u91cf\uff08Strongly Connected Components\uff0cSCC\uff09\u7684\u5b9a\u4e49\u662f\uff1a\u6781\u5927\u7684\u5f3a\u8fde\u901a\u5b50\u56fe\u3002 \u8fd9\u91cc\u60f3\u8981\u4ecb\u7ecd\u7684\u662f\u5982\u4f55\u6765\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u3002","title":"\u7b80\u4ecb"},{"location":"graph/scc/#tarjan","text":"Robert E. Tarjan (1948~) \u7f8e\u56fd\u4eba\u3002 Tarjan \u53d1\u660e\u4e86\u5f88\u591a\u5f88\u6709\u7528\u7684\u4e1c\u897f\uff0c\u4e0b\u5230 NOIP \u4e0a\u5230 CTSC \u96be\u5ea6\u7684\u90fd\u6709\u3002 \u3010\u4e3e\u4f8b\u5b50\uff1aTarjan \u7b97\u6cd5\uff0c\u5e76\u67e5\u96c6\uff0cSplay \u6811\uff0cTarjan \u79bb\u7ebf\u6c42 lca\uff08Lowest Common Ancestor\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\u7b49\u7b49\u3011 \u6211\u4eec\u8fd9\u91cc\u8981\u4ecb\u7ecd\u7684\u662f\u56fe\u8bba\u4e2d\u7684 Tarjan \u7b97\u6cd5\uff0c\u7528\u6765\u5904\u7406\u5404\u79cd\u8fde\u901a\u6027\u76f8\u5173\u7684\u95ee\u9898\u3002","title":"Tarjan \u7b97\u6cd5"},{"location":"graph/scc/#_2","text":"\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e9b\u4e1c\u897f\u3002 dfn[x] \uff1a\u7ed3\u70b9 x \u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\u6233 (dfs number) low[x] \uff1a\u7ed3\u70b9 x \u6240\u80fd\u8bbf\u95ee\u5230\u7684\u70b9\u7684 dfn \u503c\u7684\u6700\u5c0f\u503c \u8fd9\u91cc\u7684\u6811\u6307\u7684\u662f DFS \u6811 \u6240\u6709\u7ed3\u70b9\u6309 dfn \u6392\u5e8f\u5373\u53ef\u5f97 dfs \u5e8f\u5217","title":"\u5b9a\u4e49"},{"location":"graph/scc/#dfs","text":"\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u5185\u7ed3\u70b9\u7684 dfn \u90fd\u5927\u4e8e\u8be5\u7ed3\u70b9\u7684 dfn\u3002 \u4ece\u6839\u5f00\u59cb\u7684\u4e00\u6761\u8def\u5f84\u4e0a\u7684 dfn \u4e25\u683c\u9012\u589e\u3002 \u4e00\u68f5 DFS \u6811\u88ab\u6784\u9020\u51fa\u6765\u540e\uff0c\u8003\u8651\u56fe\u4e2d\u7684\u975e\u6811\u8fb9\u3002 \u524d\u5411\u8fb9 (forward edge)\uff1a\u7956\u5148\u2192\u513f\u5b50 \u540e\u5411\u8fb9 (backward edge)\uff1a\u513f\u5b50\u2192\u7956\u5148 \u6a2a\u53c9\u8fb9 (cross edge)\uff1a\u6ca1\u6709\u7956\u5148\u2014\u513f\u5b50\u5173\u7cfb\u7684 \u6ce8\u610f\uff1a\u6a2a\u53c9\u8fb9\u53ea\u4f1a\u5f80 dfn \u51cf\u5c0f\u7684\u65b9\u5411\u8fde\u63a5 \u6ce8\u610f\uff1a\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u6ca1\u6709\u6a2a\u53c9\u8fb9\uff08\u4e3a\u4ec0\u4e48\uff1f\uff09","title":"DFS \u6811\u7684\u6027\u8d28"},{"location":"graph/scc/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 dfs ( x ) { dfn [ x ] = low [ x ] = ++ index ; S . push ( x ); instack [ x ] = true ; for each edge ( x , y ) { if ( ! dfn [ y ]) { dfs ( y ); low [ x ] = min ( low [ x ], low [ y ]); } else if ( instack [ y ]) { low [ x ] = min ( low [ x ], dfn [ y ]); } } if ( dfn [ x ] == low [ x ]) { while ( 1 ) { t = S . pop (); instack [ t ] = false ; if ( t == x ) break ; } } } \uff08\u8f6c\u81ea\u7ef4\u57fa\uff1a https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm \uff09 \u65f6\u95f4\u590d\u6742\u5ea6 O(n + m) O(n + m)","title":"\u5b9e\u73b0"},{"location":"graph/scc/#kosaraju","text":"Kosaraju \u7b97\u6cd5\u4f9d\u9760\u4e24\u6b21\u7b80\u5355\u7684 dfs \u5b9e\u73b0\u3002 \u7b2c\u4e00\u6b21 dfs\uff0c\u9009\u53d6\u4efb\u610f\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u904d\u5386\u6240\u6709\u4e3a\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\uff0c\u5e76\u5728\u56de\u6eaf\u4e4b\u524d\u7ed9\u9876\u70b9\u7f16\u53f7\uff0c\u4e5f\u5c31\u662f\u540e\u5e8f\u904d\u5386\u3002 \u7b2c\u4e8c\u6b21 dfs\uff0c\u5bf9\u4e8e\u53cd\u5411\u540e\u7684\u56fe\uff0c\u4ee5\u6807\u53f7\u6700\u5927\u7684\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\u5f00\u59cb dfs\u3002\u8fd9\u6837\u904d\u5386\u5230\u7684\u9876\u70b9\u96c6\u5408\u5c31\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u5bf9\u4e8e\u6240\u6709\u672a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u9009\u53d6\u6807\u53f7\u6700\u5927\u7684\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u4e24\u6b21 dfs \u7ed3\u675f\u540e\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u627e\u51fa\u6765\u4e86\uff0cKosaraju \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n+m) O(n+m)","title":"Kosaraju \u7b97\u6cd5"},{"location":"graph/scc/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // g \u662f\u539f\u56fe\uff0cg2 \u662f\u53cd\u56fe void dfs1 ( int u ) { vis [ u ] = true ; for ( int v : g [ u ]) if ( ! vis [ v ]) dfs1 ( v ); s . push_back ( v ); } void dfs2 ( int u ) { color [ u ] = sccCnt ; for ( int v : g2 [ u ]) if ( ! color [ v ]) dfs2 ( v ); } void kosaraju () { sccCnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vis [ i ]) dfs1 ( i ); for ( int i = n ; i >= 1 ; -- i ) if ( ! color [ s [ i ]]) { ++ sccCnt ; dfs2 ( s [ i ]) } }","title":"\u5b9e\u73b0"},{"location":"graph/scc/#garbow","text":"","title":"Garbow \u7b97\u6cd5"},{"location":"graph/scc/#_5","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u5f20\u56fe\u7684\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u90fd\u7f29\u6210\u4e00\u4e2a\u70b9\u3002 \u7136\u540e\u8fd9\u5f20\u56fe\u4f1a\u53d8\u6210\u4e00\u4e2a DAG\uff08\u4e3a\u4ec0\u4e48\uff1f\uff09\u3002 DAG \u597d\u554a\uff0c\u80fd\u62d3\u6251\u6392\u5e8f\u4e86\u5c31\u80fd\u505a\u5f88\u591a\u4e8b\u60c5\u4e86\u3002 \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u53ef\u4ee5\u7ecf\u8fc7\u91cd\u590d\u7ed3\u70b9\uff0c\u8981\u6c42\u7ecf\u8fc7\u7684\u4e0d\u540c\u7ed3\u70b9\u6570\u91cf\u6700\u591a\u3002","title":"\u5e94\u7528"},{"location":"graph/scc/#_6","text":"USACO Fall/HAOI 2006 \u53d7\u6b22\u8fce\u7684\u725b POJ1236 Network of Schools","title":"\u63a8\u8350\u9898\u76ee"},{"location":"graph/shortest-path/","text":"\u5b9a\u4e49 \u00b6 \uff08\u8fd8\u8bb0\u5f97\u8fd9\u4e9b\u5b9a\u4e49\u5417\uff1f\u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\u3002\uff09 \u8def\u5f84 \u6700\u77ed\u8def \u6709\u5411\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u3001\u65e0\u5411\u56fe\u4e2d\u7684\u6700\u77ed\u8def \u5355\u6e90\u6700\u77ed\u8def\u3001\u6bcf\u5bf9\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def \u6027\u8d28 \u00b6 \u5bf9\u4e8e\u8fb9\u6743\u4e3a\u6b63\u7684\u56fe\uff0c\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4e0d\u4f1a\u7ecf\u8fc7\u91cd\u590d\u7684\u7ed3\u70b9\u3002 \u5bf9\u4e8e\u8fb9\u6743\u4e3a\u6b63\u7684\u56fe\uff0c\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4e0d\u4f1a\u7ecf\u8fc7\u91cd\u590d\u7684\u8fb9\u3002 \u5bf9\u4e8e\u8fb9\u6743\u4e3a\u6b63\u7684\u56fe\uff0c\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4efb\u610f\u4e00\u6761\u7684\u7ed3\u70b9\u6570\u4e0d\u4f1a\u8d85\u8fc7 n n \uff0c\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 n-1 n-1 \u3002 Floyd \u7b97\u6cd5 \u00b6 \u662f\u7528\u6765\u6c42\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u3002 \u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u4f46\u662f\u5e38\u6570\u5c0f\uff0c\u5bb9\u6613\u5b9e\u73b0\u3002\uff08\u6211\u4f1a\u8bf4\u53ea\u6709\u4e09\u4e2a for \u5417\uff1f\uff09 \u9002\u7528\u4e8e\u4efb\u4f55\u56fe\uff0c\u4e0d\u7ba1\u6709\u5411\u65e0\u5411\uff0c\u8fb9\u6743\u6b63\u8d1f\uff0c\u4f46\u662f\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002\uff08\u4e0d\u80fd\u6709\u4e2a\u8d1f\u73af\uff09 \u5b9e\u73b0 \u00b6 \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 f[k][x][y] \uff0c\u8868\u793a\u53ea\u5141\u8bb8\u7ecf\u8fc7\u7ed3\u70b9 1 1 \u5230 k k \uff0c\u7ed3\u70b9 x x \u5230\u7ed3\u70b9 y y \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u5f88\u663e\u7136\uff0c f[n][x][y] \u5c31\u662f\u7ed3\u70b9 x x \u5230\u7ed3\u70b9 y y \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u6211\u4eec\u6765\u8003\u8651\u600e\u4e48\u6c42\u8fd9\u4e2a\u6570\u7ec4 f[0][x][y] \uff1a\u8fb9\u6743\uff0c\u6216\u8005 0 0 \uff0c\u6216\u8005 +\\infty +\\infty \uff08 f[0][x][x] \u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u662f +\\infty +\\infty \uff1f\uff09 f[k][x][y] = min(f[k-1][x][y], f[k-1][x][k]+f[k-1][k][y]) \u4e0a\u9762\u4e24\u884c\u90fd\u663e\u7136\u662f\u5bf9\u7684\uff0c\u7136\u800c\u8fd9\u4e2a\u505a\u6cd5\u7a7a\u95f4\u662f O(N^3) O(N^3) \u3002 \u4f46\u6211\u4eec\u53d1\u73b0\u6570\u7ec4\u7684\u7b2c\u4e00\u7ef4\u662f\u6ca1\u6709\u7528\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u6539\u6210 f[x][y] = min(f[x][y], f[x][k]+f[k][y]) \uff0c 1 2 3 4 5 6 7 for ( k = 1 ; k <= n ; k ++ ) { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { f [ i ][ j ] = min ( f [ i ][ j ], f [ i ][ k ] + f [ k ][ j ]); } } } \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N^3) O(N^3) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(N^2) O(N^2) \u3002 \u5e94\u7528 \u00b6 \u7ed9\u4e00\u4e2a\u6b63\u6743\u65e0\u5411\u56fe\uff0c\u627e\u4e00\u4e2a\u6700\u5c0f\u6743\u503c\u548c\u7684\u73af\u3002 \u9996\u5148\u8fd9\u4e00\u5b9a\u662f\u4e00\u4e2a\u7b80\u5355\u73af\u3002 \u60f3\u4e00\u60f3\u8fd9\u4e2a\u73af\u662f\u600e\u4e48\u6784\u6210\u7684\u3002 \u8003\u8651\u73af\u4e0a\u7f16\u53f7\u6700\u5927\u7684\u7ed3\u70b9 u\u3002 f[u-1][x][y] \u548c (u,x), (u,y)\u5171\u540c\u6784\u6210\u4e86\u73af\u3002 \u5728Floyd\u7684\u8fc7\u7a0b\u4e2d\u679a\u4e3eu\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u548c\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 O(n^3) O(n^3) \u3002 \u5df2\u77e5\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fde\u8fb9\uff0c\u8981\u6c42\u5224\u65ad\u4efb\u610f\u4e24\u70b9\u662f\u5426\u8054\u901a\u3002 \u8be5\u95ee\u9898\u5373\u662f\u6c42 \u56fe\u7684\u4f20\u9012\u95ed\u5305 \u3002 \u6211\u4eec\u53ea\u9700\u8981\u6309\u7167 Floyd \u7684\u8fc7\u7a0b\uff0c\u9010\u4e2a\u52a0\u5165\u70b9\u5224\u65ad\u4e00\u4e0b\u3002 \u53ea\u662f\u6b64\u65f6\u7684\u8fb9\u7684\u8fb9\u6743\u53d8\u4e3a 1/0 1/0 \uff0c \u800c\u53d6 \\min \\min \u53d8\u6210\u4e86 \u4e0e \u8fd0\u7b97\u3002 \u518d\u8fdb\u4e00\u6b65\u7528 bitset \u4f18\u5316\uff0c\u590d\u6742\u5ea6\u53ef\u4ee5\u5230 O(\\frac{n^3}{w}) O(\\frac{n^3}{w}) \u3002 1 2 3 4 //std::bitset<SIZE> f[SIZE]; for ( k = 1 ; k <= n ; k ++ ) for ( i = 1 ; i <= n ; i ++ ) if ( f [ i ][ k ]) f [ i ] = f [ i ] & f [ k ]; Bellman-Ford \u7b97\u6cd5 \u00b6 \u4e00\u79cd\u57fa\u4e8e\u677e\u5f1b\uff08relax\uff09\u64cd\u4f5c\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u3002 \u652f\u6301\u8d1f\u6743\u3002 \u80fd\u627e\u5230\u67d0\u4e2a\u7ed3\u70b9\u51fa\u53d1\u5230\u6240\u6709\u7ed3\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6216\u8005\u62a5\u544a\u67d0\u4e9b\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u3002 \u5728\u56fd\u5185 OI \u754c\uff0c\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\u7684 \u201cSPFA\u201d\uff0c\u5c31\u662f Bellman-Ford \u7b97\u6cd5\u7684\u4e00\u79cd\u5b9e\u73b0\u3002\uff08\u4f18\u5316\uff09 \u5b9e\u73b0 \u00b6 \u5047\u8bbe\u7ed3\u70b9\u4e3a S S \u3002 \u5148\u5b9a\u4e49 dist(u) dist(u) \u4e3a S S \u5230 u u \uff08\u5f53\u524d\uff09\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 relax(u,v) relax(u,v) : dist(v) = min(dist(v), dist(u) + edge\\_len(u, v)) dist(v) = min(dist(v), dist(u) + edge\\_len(u, v)) . relax relax \u662f\u4ece\u54ea\u91cc\u6765\u7684\u5462\uff1f \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f: dist(v) \\leq dist(u) + edge\\_len(u, v) dist(v) \\leq dist(u) + edge\\_len(u, v) \u3002 \u8bc1\u660e\uff1a\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528 relax relax \u64cd\u4f5c\u6765\u66f4\u65b0 dist(v) dist(v) \u7684\u503c\u3002 Bellman-Ford \u7b97\u6cd5\u5982\u4e0b\uff1a 1 while (1) for each edge(u, v) relax(u, v); \u5f53\u4e00\u6b21\u5faa\u73af\u4e2d\u6ca1\u6709 relax relax \u64cd\u4f5c\u6210\u529f\u65f6\u505c\u6b62\u3002 \u6bcf\u6b21\u5faa\u73af\u662f O(m) O(m) \u7684\uff0c\u90a3\u4e48\u6700\u591a\u4f1a\u5faa\u73af\u591a\u5c11\u6b21\u5462\uff1f \u7b54\u6848\u662f \\infty \\infty \uff01\uff08\u5982\u679c\u6709\u4e00\u4e2a S S \u80fd\u8d70\u5230\u7684\u8d1f\u73af\u5c31\u4f1a\u8fd9\u6837\uff09 \u4f46\u662f\u6b64\u65f6\u67d0\u4e9b\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u3002 \u6211\u4eec\u8003\u8651\u6700\u77ed\u8def\u5b58\u5728\u7684\u65f6\u5019\u3002 \u7531\u4e8e\u4e00\u6b21 relax relax \u4f1a\u4f7f\uff08\u88ab relax relax \u7684\uff09\u6700\u77ed\u8def\u7684\u8fb9\u6570\u81f3\u5c11 +1 +1 \uff0c\u800c\u6700\u77ed\u8def\u7684\u8fb9\u6570\u6700\u591a\u4e3a n-1 n-1 \u3002 \u6240\u4ee5\u6700\u591a\uff08\u8fde\u7eed\uff09 relax relax n-1 n-1 \u6b21\u2026\u2026\uff08 relax relax \u4e00\u5b9a\u662f\u73af\u73af\u76f8\u6263\u7684\uff0c\u4e0d\u7136\u4e4b\u524d\u5c31\u80fd\u88ab relax relax \u6389\uff09 \u6240\u4ee5\u6700\u591a\u5faa\u73af n-1 n-1 \u6b21\u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6 O(NM) O(NM) \u3002 \uff08\u5bf9\u4e8e\u6700\u77ed\u8def\u5b58\u5728\u7684\u56fe\uff09 1 2 3 4 5 6 7 8 9 10 11 relax(u, v) { dist[v] = min(dist[v], dist[u] + edge_len(u, v)); } for (i = 1; i <= n; i++) { dist[i] = edge_len(S, i); } for (i = 1; i < n; i++) { for each edge(u, v) { relax(u, v); } } \u6ce8\uff1a\u8fd9\u91cc\u7684 edge\\_len(u, v) edge\\_len(u, v) \u8868\u793a\u8fb9\u7684\u6743\u503c\uff0c\u5982\u679c\u8be5\u8fb9\u4e0d\u5b58\u5728\u5219\u4e3a +\\infty +\\infty \uff0c u=v u=v \u5219\u4e3a 0 0 \u3002 \u5e94\u7528 \u00b6 \u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u95ee\u662f\u5426\u5b58\u5728\u8d1f\u6743\u73af\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u8dd1 Bellman-Ford \u7b97\u6cd5\uff0c\u5982\u679c\u6709\u4e2a\u70b9\u88ab relax relax \u6210\u529f\u4e86 n n \u6b21\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5b58\u5728\u3002 \u5982\u679c n-1 n-1 \u6b21\u4e4b\u5185\u7b97\u6cd5\u7ed3\u675f\u4e86\uff0c\u5c31\u4e00\u5b9a\u4e0d\u5b58\u5728\u3002 \u961f\u5217\u4f18\u5316\uff1aSPFA \u00b6 \u5373 Shortest Path Faster Algorithm\u3002 \u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u591a\u65e0\u7528\u7684 relax relax \u64cd\u4f5c\u3002 \u5f88\u663e\u7136\uff0c\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab relax relax \u7684\u7ed3\u70b9\uff0c\u6240\u8fde\u63a5\u7684\u8fb9\uff0c\u624d\u6709\u53ef\u80fd\u5f15\u8d77\u4e0b\u4e00\u6b21\u7684 relax relax \u3002 \u90a3\u4e48\u6211\u4eec\u7528\u961f\u5217\u6765\u7ef4\u62a4 \u201c\u54ea\u4e9b\u7ed3\u70b9\u53ef\u80fd\u4f1a\u5f15\u8d77 relax relax \u201d\uff0c\u5c31\u80fd\u53ea\u8bbf\u95ee\u5fc5\u8981\u7684\u8fb9\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 q = new queue(); q.push(S); in_queue[S] = true; while (!q.empty()) { u = q.pop(); in_queue[u] = false; for each edge(u, v) { if (relax(u, v) && !in_queue[v]) { q.push(v); in_queue[v] = true; } } } SPFA \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(kM)~ (k\\approx 2) O(kM)~ (k\\approx 2) \uff08\u7384\u5b66\uff09\uff0c\u4f46 \u7406\u8bba\u4e0a\u754c \u4e3a O(NM) O(NM) \uff0c\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u7a20\u5bc6\u56fe\u53ef\u4ee5\u968f\u4fbf\u5361\u6389 SPFA\uff0c\u6240\u4ee5\u8003\u8bd5\u65f6\u8c28\u614e\u4f7f\u7528 \uff08NOI 2018 \u5361 SPFA\uff09\u3002 SPFA \u7684\u4f18\u5316\u4e4b SLF \u00b6 \u5373 Small Label First\u3002 \u5373\u5728\u65b0\u5143\u7d20\u52a0\u5165\u961f\u5217\u65f6\uff0c\u5982\u679c\u961f\u9996\u5143\u7d20\u6743\u503c\u5927\u4e8e\u65b0\u5143\u7d20\u6743\u503c\uff0c\u90a3\u4e48\u5c31\u628a\u65b0\u5143\u7d20\u52a0\u5165\u961f\u9996\uff0c\u5426\u5219\u4f9d\u7136\u52a0\u5165\u961f\u5c3e\u3002 \u8be5\u4f18\u5316\u5728\u786e\u5b9e\u5728\u4e00\u4e9b\u56fe\u4e0a\u6709\u663e\u8457\u6548\u679c\uff0c\u5176\u590d\u6742\u5ea6\u4e5f\u6709\u4fdd\u8bc1\uff0c\u4f46\u662f\u5982\u679c\u6709\u8d1f\u6743\u8fb9\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5\u5361\u5230\u6307\u6570\u7ea7\u3002 Dijkstra \u7b97\u6cd5 \u00b6 Dijkstra \u662f\u4e2a\u4eba\u540d\uff08\u8377\u5170\u59d3\u6c0f\uff09\u3002 IPA: /\u02c8dikstr\u0251/ \u6216 /\u02c8d\u025bikstr\u0251/\u3002 \u8fd9\u79cd\u7b97\u6cd5\u53ea\u9002\u7528\u4e8e\u975e\u8d1f\u6743\u56fe\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u4f18\u79c0\u3002 \u4e5f\u662f\u7528\u6765\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002 \u5b9e\u73b0 \u00b6 \u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\uff0c\u672a\u786e\u5b9a\u7684\u3002 \u4e00\u5f00\u59cb\u7b2c\u4e00\u4e2a\u96c6\u5408\u91cc\u53ea\u6709 S S \u3002 \u7136\u540e\u91cd\u590d\u8fd9\u4e9b\u64cd\u4f5c\uff1a \uff081\uff09 relax relax \u90a3\u4e9b\u521a\u521a\u88ab\u52a0\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\u7684\u7ed3\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u3002 \uff082\uff09\u4ece\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\uff0c\u9009\u53d6\u4e00\u4e2a\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u79fb\u5230\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u76f4\u5230\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e3a\u7a7a\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u53ea\u7528\u5206\u6790\u96c6\u5408\u64cd\u4f5c\uff0c n n \u6b21 delete-min \uff0c m m \u6b21 decrease-key \u3002 \u5982\u679c\u7528\u66b4\u529b\uff1a O(n^2 + m) O(n^2 + m) \u3002 \u5982\u679c\u7528\u5806\uff1a O((n+m) \\log m) O((n+m) \\log m) \u3002 \u5982\u679c\u7528\u7ebf\u6bb5\u6811\uff08ZKW \u7ebf\u6bb5\u6811\uff09\uff1a (O(n+m)\\log n) (O(n+m)\\log n) \u5982\u679c\u7528 Fibonacci \u5806\uff1a O(n \\log n + m) O(n \\log n + m) \uff08\u8fd9\u5c31\u662f\u4e3a\u5565\u4f18\u79c0\u4e86\uff09\u3002 \u7b49\u7b49\uff0c\u8fd8\u6ca1\u8bf4\u6b63\u786e\u6027\u5462\uff01 \u5206\u4e24\u6b65\u8bc1\u660e\uff1a\u5148\u8bc1\u660e\u4efb\u4f55\u65f6\u5019\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u7684 dist dist \u4e00\u5b9a\u4e0d\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u7684\u3002 \u518d\u8bc1\u660e\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u7684\u6700\u77ed\u8def\u5df2\u7ecf\u786e\u5b9a\u3002 \u7b2c\u4e00\u6b65\uff0c\u4e00\u5f00\u59cb\u65f6\u6210\u7acb\uff08\u57fa\u7840\uff09\uff0c\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u52a0\u5165\u96c6\u5408\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u6700\u5927\u503c\uff0c\u4e14\u662f\u53e6\u4e00\u8fb9\u6700\u5c0f\u503c\uff0c relax relax \u53c8\u662f\u52a0\u4e0a\u975e\u8d1f\u6570\uff0c\u6240\u4ee5\u4ecd\u7136\u6210\u7acb\u3002\uff08\u5f52\u7eb3\uff09 \uff08\u5229\u7528\u975e\u8d1f\u6743\u503c\u7684\u6027\u8d28\uff09 \u7b2c\u4e8c\u6b65\uff0c\u8003\u8651\u6bcf\u6b21\u52a0\u8fdb\u6765\u7684\u7ed3\u70b9\uff0c\u5230\u4ed6\u7684\u6700\u77ed\u8def\uff0c\u4e0a\u4e00\u6b65\u5fc5\u7136\u662f\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff08\u5426\u5219\u4ed6\u4e0d\u4f1a\u662f\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u800c\u4e14\u6709\u7b2c\u4e00\u6b65\u7684\u6027\u8d28\uff09\uff0c\u53c8\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u96c6\u5408\u5df2\u7ecf\u5168\u90e8 relax relax \u8fc7\u4e86\uff0c\u6240\u4ee5\u6700\u77ed\u8def\u663e\u7136\u786e\u5b9a\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 H = new heap(); H.insert(S, 0); dist[S] = 0; for (i = 1; i <= n; i++) { u = H.delete_min(); for each edge(u, v) { if (relax(u, v)) { H.decrease_key(v, dist[v]); } } } \u4e0d\u540c\u65b9\u6cd5\u7684\u6bd4\u8f83 \u00b6 Floyd Bellman-Ford Dijkstra \u6bcf\u5bf9\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def \u5355\u6e90\u6700\u77ed\u8def \u5355\u6e90\u6700\u77ed\u8def \u6ca1\u6709\u8d1f\u73af\u7684\u56fe \u4efb\u610f\u56fe \u975e\u8d1f\u6743\u56fe O(N^3) O(N^3) O(NM) O(NM) O((N+M)\\log M) O((N+M)\\log M) \u62d3\u5c55\uff1a\u5206\u5c42\u56fe\u6700\u77ed\u8def \u00b6 \u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u4e00\u822c\u6a21\u578b\u4e3a\u6709 k k \u6b21\u96f6\u4ee3\u4ef7\u901a\u8fc7\u4e00\u6761\u8def\u5f84\uff0c\u6c42\u603b\u7684\u6700\u5c0f\u82b1\u8d39\u3002\u5bf9\u4e8e\u8fd9\u79cd\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528 DP \u76f8\u5173\u7684\u601d\u60f3\uff0c\u8bbe \\text{dis}_{i, j} \\text{dis}_{i, j} \u8868\u793a\u5f53\u524d\u4ece\u8d77\u70b9 i i \u53f7\u7ed3\u70b9\uff0c\u4f7f\u7528\u4e86 j j \u6b21\u514d\u8d39\u901a\u884c\u6743\u9650\u540e\u7684\u6700\u77ed\u8def\u5f84\u3002\u663e\u7136\uff0c \\text{dis} \\text{dis} \u6570\u7ec4\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a \\text{dis}_{i, j} = \\min\\{\\min\\{\\text{dis}_{from, j - 1}\\}, \\min\\{\\text{dis}_{from,j} + w\\}\\} \\text{dis}_{i, j} = \\min\\{\\min\\{\\text{dis}_{from, j - 1}\\}, \\min\\{\\text{dis}_{from,j} + w\\}\\} \u5176\u4e2d\uff0c from from \u8868\u793a i i \u7684\u7236\u4eb2\u8282\u70b9\uff0c w w \u8868\u793a\u5f53\u524d\u6240\u8d70\u7684\u8fb9\u7684\u8fb9\u6743\u3002\u5f53 j - 1 \\geq k j - 1 \\geq k \u65f6\uff0c \\text{dis}_{from, j} \\text{dis}_{from, j} = \\infty \\infty \u3002 \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a DP \u5c31\u76f8\u5f53\u4e8e\u628a\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u5206\u6210\u4e86 k+1 k+1 \u4e2a\u7ed3\u70b9\uff0c\u6bcf\u4e2a\u65b0\u7ed3\u70b9\u4ee3\u8868\u4f7f\u7528\u4e0d\u540c\u591a\u6b21\u514d\u8d39\u901a\u884c\u540e\u5230\u8fbe\u7684\u539f\u56fe\u7ed3\u70b9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u6bcf\u4e2a\u7ed3\u70b9 u_i u_i \u8868\u793a\u4f7f\u7528 i i \u6b21\u514d\u8d39\u901a\u884c\u6743\u9650\u540e\u5230\u8fbe u u \u7ed3\u70b9\u3002 \u6a21\u677f\u9898\uff1a [JLOI2011] \u98de\u884c\u8def\u7ebf \u00b6 \u9898\u610f\uff1a\u6709\u4e00\u4e2a n n \u4e2a\u70b9 m m \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 k k \u6761\u9053\u8def\u4ee5\u96f6\u4ee3\u4ef7\u901a\u884c\uff0c\u6c42 s s \u5230 t t \u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u53c2\u8003\u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 struct State { // \u4f18\u5148\u961f\u5217\u7684\u7ed3\u70b9\u7ed3\u6784\u4f53 int v , w , cnt ; // cnt \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u591a\u5c11\u6b21\u514d\u8d39\u901a\u884c\u6743\u9650 State () {} State ( int v , int w , int cnt ) : v ( v ), w ( w ), cnt ( cnt ) {} bool operator < ( const State & rhs ) const { return w > rhs . w ; } }; void dijkstra () { memset ( dis , 0x3f , sizeof dis ); dis [ s ][ 0 ] = 0 ; pq . push ( State ( s , 0 , 0 )); // \u5230\u8d77\u70b9\u4e0d\u9700\u8981\u4f7f\u7528\u514d\u8d39\u901a\u884c\u6743\uff0c\u8ddd\u79bb\u4e3a\u96f6 while ( ! pq . empty ()) { const State top = pq . top (); pq . pop (); int u = top . v , nowCnt = top . cnt ; if ( done [ u ][ nowCnt ]) continue ; done [ u ][ nowCnt ] = true ; for ( int i = head [ u ]; i ; i = edge [ i ]. next ) { int v = edge [ i ]. v , w = edge [ i ]. w ; if ( nowCnt < k && dis [ v ][ nowCnt + 1 ] > dis [ u ][ nowCnt ]) { // \u53ef\u4ee5\u514d\u8d39\u901a\u884c dis [ v ][ nowCnt + 1 ] = dis [ u ][ nowCnt ]; pq . push ( State ( v , dis [ v ][ nowCnt + 1 ], nowCnt + 1 )); } if ( dis [ v ][ nowCnt ] > dis [ u ][ nowCnt ] + w ) { // \u4e0d\u53ef\u4ee5\u514d\u8d39\u901a\u884c dis [ v ][ nowCnt ] = dis [ u ][ nowCnt ] + w ; pq . push ( State ( v , dis [ v ][ nowCnt ], nowCnt )); } } } } int main () { n = read (), m = read (), k = read (); // \u7b14\u8005\u4e60\u60ef\u4ece 1 \u5230 n \u7f16\u53f7\uff0c\u800c\u8fd9\u9053\u9898\u662f\u4ece 0 \u5230 n - 1\uff0c\u6240\u4ee5\u8981\u5904\u7406\u4e00\u4e0b s = read () + 1 , t = read () + 1 ; while ( m -- ) { int u = read () + 1 , v = read () + 1 , w = read (); add ( u , v , w ), add ( v , u , w ); // \u8fd9\u9053\u9898\u662f\u53cc\u5411\u8fb9 } dijkstra (); int ans = std :: numeric_limits < int >:: max (); // ans \u53d6 int \u6700\u5927\u503c\u4e3a\u521d\u503c for ( int i = 0 ; i <= k ; ++ i ) ans = std :: min ( ans , dis [ t ][ i ]); // \u5bf9\u5230\u8fbe\u7ec8\u70b9\u7684\u6240\u6709\u60c5\u51b5\u53d6\u6700\u4f18\u503c println ( ans ); }","title":"\u6700\u77ed\u8def"},{"location":"graph/shortest-path/#_1","text":"\uff08\u8fd8\u8bb0\u5f97\u8fd9\u4e9b\u5b9a\u4e49\u5417\uff1f\u5728\u9605\u8bfb\u4e0b\u5217\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u4e86\u89e3 \u56fe\u8bba\u57fa\u7840 \u90e8\u5206\u3002\uff09 \u8def\u5f84 \u6700\u77ed\u8def \u6709\u5411\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u3001\u65e0\u5411\u56fe\u4e2d\u7684\u6700\u77ed\u8def \u5355\u6e90\u6700\u77ed\u8def\u3001\u6bcf\u5bf9\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def","title":"\u5b9a\u4e49"},{"location":"graph/shortest-path/#_2","text":"\u5bf9\u4e8e\u8fb9\u6743\u4e3a\u6b63\u7684\u56fe\uff0c\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4e0d\u4f1a\u7ecf\u8fc7\u91cd\u590d\u7684\u7ed3\u70b9\u3002 \u5bf9\u4e8e\u8fb9\u6743\u4e3a\u6b63\u7684\u56fe\uff0c\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4e0d\u4f1a\u7ecf\u8fc7\u91cd\u590d\u7684\u8fb9\u3002 \u5bf9\u4e8e\u8fb9\u6743\u4e3a\u6b63\u7684\u56fe\uff0c\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4efb\u610f\u4e00\u6761\u7684\u7ed3\u70b9\u6570\u4e0d\u4f1a\u8d85\u8fc7 n n \uff0c\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 n-1 n-1 \u3002","title":"\u6027\u8d28"},{"location":"graph/shortest-path/#floyd","text":"\u662f\u7528\u6765\u6c42\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u3002 \u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u4f46\u662f\u5e38\u6570\u5c0f\uff0c\u5bb9\u6613\u5b9e\u73b0\u3002\uff08\u6211\u4f1a\u8bf4\u53ea\u6709\u4e09\u4e2a for \u5417\uff1f\uff09 \u9002\u7528\u4e8e\u4efb\u4f55\u56fe\uff0c\u4e0d\u7ba1\u6709\u5411\u65e0\u5411\uff0c\u8fb9\u6743\u6b63\u8d1f\uff0c\u4f46\u662f\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002\uff08\u4e0d\u80fd\u6709\u4e2a\u8d1f\u73af\uff09","title":"Floyd \u7b97\u6cd5"},{"location":"graph/shortest-path/#_3","text":"\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 f[k][x][y] \uff0c\u8868\u793a\u53ea\u5141\u8bb8\u7ecf\u8fc7\u7ed3\u70b9 1 1 \u5230 k k \uff0c\u7ed3\u70b9 x x \u5230\u7ed3\u70b9 y y \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u5f88\u663e\u7136\uff0c f[n][x][y] \u5c31\u662f\u7ed3\u70b9 x x \u5230\u7ed3\u70b9 y y \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u6211\u4eec\u6765\u8003\u8651\u600e\u4e48\u6c42\u8fd9\u4e2a\u6570\u7ec4 f[0][x][y] \uff1a\u8fb9\u6743\uff0c\u6216\u8005 0 0 \uff0c\u6216\u8005 +\\infty +\\infty \uff08 f[0][x][x] \u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u662f +\\infty +\\infty \uff1f\uff09 f[k][x][y] = min(f[k-1][x][y], f[k-1][x][k]+f[k-1][k][y]) \u4e0a\u9762\u4e24\u884c\u90fd\u663e\u7136\u662f\u5bf9\u7684\uff0c\u7136\u800c\u8fd9\u4e2a\u505a\u6cd5\u7a7a\u95f4\u662f O(N^3) O(N^3) \u3002 \u4f46\u6211\u4eec\u53d1\u73b0\u6570\u7ec4\u7684\u7b2c\u4e00\u7ef4\u662f\u6ca1\u6709\u7528\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u6539\u6210 f[x][y] = min(f[x][y], f[x][k]+f[k][y]) \uff0c 1 2 3 4 5 6 7 for ( k = 1 ; k <= n ; k ++ ) { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { f [ i ][ j ] = min ( f [ i ][ j ], f [ i ][ k ] + f [ k ][ j ]); } } } \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N^3) O(N^3) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(N^2) O(N^2) \u3002","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/#_4","text":"\u7ed9\u4e00\u4e2a\u6b63\u6743\u65e0\u5411\u56fe\uff0c\u627e\u4e00\u4e2a\u6700\u5c0f\u6743\u503c\u548c\u7684\u73af\u3002 \u9996\u5148\u8fd9\u4e00\u5b9a\u662f\u4e00\u4e2a\u7b80\u5355\u73af\u3002 \u60f3\u4e00\u60f3\u8fd9\u4e2a\u73af\u662f\u600e\u4e48\u6784\u6210\u7684\u3002 \u8003\u8651\u73af\u4e0a\u7f16\u53f7\u6700\u5927\u7684\u7ed3\u70b9 u\u3002 f[u-1][x][y] \u548c (u,x), (u,y)\u5171\u540c\u6784\u6210\u4e86\u73af\u3002 \u5728Floyd\u7684\u8fc7\u7a0b\u4e2d\u679a\u4e3eu\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u548c\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 O(n^3) O(n^3) \u3002 \u5df2\u77e5\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fde\u8fb9\uff0c\u8981\u6c42\u5224\u65ad\u4efb\u610f\u4e24\u70b9\u662f\u5426\u8054\u901a\u3002 \u8be5\u95ee\u9898\u5373\u662f\u6c42 \u56fe\u7684\u4f20\u9012\u95ed\u5305 \u3002 \u6211\u4eec\u53ea\u9700\u8981\u6309\u7167 Floyd \u7684\u8fc7\u7a0b\uff0c\u9010\u4e2a\u52a0\u5165\u70b9\u5224\u65ad\u4e00\u4e0b\u3002 \u53ea\u662f\u6b64\u65f6\u7684\u8fb9\u7684\u8fb9\u6743\u53d8\u4e3a 1/0 1/0 \uff0c \u800c\u53d6 \\min \\min \u53d8\u6210\u4e86 \u4e0e \u8fd0\u7b97\u3002 \u518d\u8fdb\u4e00\u6b65\u7528 bitset \u4f18\u5316\uff0c\u590d\u6742\u5ea6\u53ef\u4ee5\u5230 O(\\frac{n^3}{w}) O(\\frac{n^3}{w}) \u3002 1 2 3 4 //std::bitset<SIZE> f[SIZE]; for ( k = 1 ; k <= n ; k ++ ) for ( i = 1 ; i <= n ; i ++ ) if ( f [ i ][ k ]) f [ i ] = f [ i ] & f [ k ];","title":"\u5e94\u7528"},{"location":"graph/shortest-path/#bellman-ford","text":"\u4e00\u79cd\u57fa\u4e8e\u677e\u5f1b\uff08relax\uff09\u64cd\u4f5c\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u3002 \u652f\u6301\u8d1f\u6743\u3002 \u80fd\u627e\u5230\u67d0\u4e2a\u7ed3\u70b9\u51fa\u53d1\u5230\u6240\u6709\u7ed3\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6216\u8005\u62a5\u544a\u67d0\u4e9b\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u3002 \u5728\u56fd\u5185 OI \u754c\uff0c\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\u7684 \u201cSPFA\u201d\uff0c\u5c31\u662f Bellman-Ford \u7b97\u6cd5\u7684\u4e00\u79cd\u5b9e\u73b0\u3002\uff08\u4f18\u5316\uff09","title":"Bellman-Ford \u7b97\u6cd5"},{"location":"graph/shortest-path/#_5","text":"\u5047\u8bbe\u7ed3\u70b9\u4e3a S S \u3002 \u5148\u5b9a\u4e49 dist(u) dist(u) \u4e3a S S \u5230 u u \uff08\u5f53\u524d\uff09\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 relax(u,v) relax(u,v) : dist(v) = min(dist(v), dist(u) + edge\\_len(u, v)) dist(v) = min(dist(v), dist(u) + edge\\_len(u, v)) . relax relax \u662f\u4ece\u54ea\u91cc\u6765\u7684\u5462\uff1f \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f: dist(v) \\leq dist(u) + edge\\_len(u, v) dist(v) \\leq dist(u) + edge\\_len(u, v) \u3002 \u8bc1\u660e\uff1a\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528 relax relax \u64cd\u4f5c\u6765\u66f4\u65b0 dist(v) dist(v) \u7684\u503c\u3002 Bellman-Ford \u7b97\u6cd5\u5982\u4e0b\uff1a 1 while (1) for each edge(u, v) relax(u, v); \u5f53\u4e00\u6b21\u5faa\u73af\u4e2d\u6ca1\u6709 relax relax \u64cd\u4f5c\u6210\u529f\u65f6\u505c\u6b62\u3002 \u6bcf\u6b21\u5faa\u73af\u662f O(m) O(m) \u7684\uff0c\u90a3\u4e48\u6700\u591a\u4f1a\u5faa\u73af\u591a\u5c11\u6b21\u5462\uff1f \u7b54\u6848\u662f \\infty \\infty \uff01\uff08\u5982\u679c\u6709\u4e00\u4e2a S S \u80fd\u8d70\u5230\u7684\u8d1f\u73af\u5c31\u4f1a\u8fd9\u6837\uff09 \u4f46\u662f\u6b64\u65f6\u67d0\u4e9b\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u3002 \u6211\u4eec\u8003\u8651\u6700\u77ed\u8def\u5b58\u5728\u7684\u65f6\u5019\u3002 \u7531\u4e8e\u4e00\u6b21 relax relax \u4f1a\u4f7f\uff08\u88ab relax relax \u7684\uff09\u6700\u77ed\u8def\u7684\u8fb9\u6570\u81f3\u5c11 +1 +1 \uff0c\u800c\u6700\u77ed\u8def\u7684\u8fb9\u6570\u6700\u591a\u4e3a n-1 n-1 \u3002 \u6240\u4ee5\u6700\u591a\uff08\u8fde\u7eed\uff09 relax relax n-1 n-1 \u6b21\u2026\u2026\uff08 relax relax \u4e00\u5b9a\u662f\u73af\u73af\u76f8\u6263\u7684\uff0c\u4e0d\u7136\u4e4b\u524d\u5c31\u80fd\u88ab relax relax \u6389\uff09 \u6240\u4ee5\u6700\u591a\u5faa\u73af n-1 n-1 \u6b21\u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6 O(NM) O(NM) \u3002 \uff08\u5bf9\u4e8e\u6700\u77ed\u8def\u5b58\u5728\u7684\u56fe\uff09 1 2 3 4 5 6 7 8 9 10 11 relax(u, v) { dist[v] = min(dist[v], dist[u] + edge_len(u, v)); } for (i = 1; i <= n; i++) { dist[i] = edge_len(S, i); } for (i = 1; i < n; i++) { for each edge(u, v) { relax(u, v); } } \u6ce8\uff1a\u8fd9\u91cc\u7684 edge\\_len(u, v) edge\\_len(u, v) \u8868\u793a\u8fb9\u7684\u6743\u503c\uff0c\u5982\u679c\u8be5\u8fb9\u4e0d\u5b58\u5728\u5219\u4e3a +\\infty +\\infty \uff0c u=v u=v \u5219\u4e3a 0 0 \u3002","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/#_6","text":"\u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u95ee\u662f\u5426\u5b58\u5728\u8d1f\u6743\u73af\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u8dd1 Bellman-Ford \u7b97\u6cd5\uff0c\u5982\u679c\u6709\u4e2a\u70b9\u88ab relax relax \u6210\u529f\u4e86 n n \u6b21\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5b58\u5728\u3002 \u5982\u679c n-1 n-1 \u6b21\u4e4b\u5185\u7b97\u6cd5\u7ed3\u675f\u4e86\uff0c\u5c31\u4e00\u5b9a\u4e0d\u5b58\u5728\u3002","title":"\u5e94\u7528"},{"location":"graph/shortest-path/#spfa","text":"\u5373 Shortest Path Faster Algorithm\u3002 \u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u591a\u65e0\u7528\u7684 relax relax \u64cd\u4f5c\u3002 \u5f88\u663e\u7136\uff0c\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab relax relax \u7684\u7ed3\u70b9\uff0c\u6240\u8fde\u63a5\u7684\u8fb9\uff0c\u624d\u6709\u53ef\u80fd\u5f15\u8d77\u4e0b\u4e00\u6b21\u7684 relax relax \u3002 \u90a3\u4e48\u6211\u4eec\u7528\u961f\u5217\u6765\u7ef4\u62a4 \u201c\u54ea\u4e9b\u7ed3\u70b9\u53ef\u80fd\u4f1a\u5f15\u8d77 relax relax \u201d\uff0c\u5c31\u80fd\u53ea\u8bbf\u95ee\u5fc5\u8981\u7684\u8fb9\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 q = new queue(); q.push(S); in_queue[S] = true; while (!q.empty()) { u = q.pop(); in_queue[u] = false; for each edge(u, v) { if (relax(u, v) && !in_queue[v]) { q.push(v); in_queue[v] = true; } } } SPFA \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(kM)~ (k\\approx 2) O(kM)~ (k\\approx 2) \uff08\u7384\u5b66\uff09\uff0c\u4f46 \u7406\u8bba\u4e0a\u754c \u4e3a O(NM) O(NM) \uff0c\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u7a20\u5bc6\u56fe\u53ef\u4ee5\u968f\u4fbf\u5361\u6389 SPFA\uff0c\u6240\u4ee5\u8003\u8bd5\u65f6\u8c28\u614e\u4f7f\u7528 \uff08NOI 2018 \u5361 SPFA\uff09\u3002","title":"\u961f\u5217\u4f18\u5316\uff1aSPFA"},{"location":"graph/shortest-path/#spfa-slf","text":"\u5373 Small Label First\u3002 \u5373\u5728\u65b0\u5143\u7d20\u52a0\u5165\u961f\u5217\u65f6\uff0c\u5982\u679c\u961f\u9996\u5143\u7d20\u6743\u503c\u5927\u4e8e\u65b0\u5143\u7d20\u6743\u503c\uff0c\u90a3\u4e48\u5c31\u628a\u65b0\u5143\u7d20\u52a0\u5165\u961f\u9996\uff0c\u5426\u5219\u4f9d\u7136\u52a0\u5165\u961f\u5c3e\u3002 \u8be5\u4f18\u5316\u5728\u786e\u5b9e\u5728\u4e00\u4e9b\u56fe\u4e0a\u6709\u663e\u8457\u6548\u679c\uff0c\u5176\u590d\u6742\u5ea6\u4e5f\u6709\u4fdd\u8bc1\uff0c\u4f46\u662f\u5982\u679c\u6709\u8d1f\u6743\u8fb9\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5\u5361\u5230\u6307\u6570\u7ea7\u3002","title":"SPFA \u7684\u4f18\u5316\u4e4b SLF"},{"location":"graph/shortest-path/#dijkstra","text":"Dijkstra \u662f\u4e2a\u4eba\u540d\uff08\u8377\u5170\u59d3\u6c0f\uff09\u3002 IPA: /\u02c8dikstr\u0251/ \u6216 /\u02c8d\u025bikstr\u0251/\u3002 \u8fd9\u79cd\u7b97\u6cd5\u53ea\u9002\u7528\u4e8e\u975e\u8d1f\u6743\u56fe\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u4f18\u79c0\u3002 \u4e5f\u662f\u7528\u6765\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002","title":"Dijkstra \u7b97\u6cd5"},{"location":"graph/shortest-path/#_7","text":"\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\uff0c\u672a\u786e\u5b9a\u7684\u3002 \u4e00\u5f00\u59cb\u7b2c\u4e00\u4e2a\u96c6\u5408\u91cc\u53ea\u6709 S S \u3002 \u7136\u540e\u91cd\u590d\u8fd9\u4e9b\u64cd\u4f5c\uff1a \uff081\uff09 relax relax \u90a3\u4e9b\u521a\u521a\u88ab\u52a0\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\u7684\u7ed3\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u3002 \uff082\uff09\u4ece\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\uff0c\u9009\u53d6\u4e00\u4e2a\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u79fb\u5230\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u76f4\u5230\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e3a\u7a7a\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u53ea\u7528\u5206\u6790\u96c6\u5408\u64cd\u4f5c\uff0c n n \u6b21 delete-min \uff0c m m \u6b21 decrease-key \u3002 \u5982\u679c\u7528\u66b4\u529b\uff1a O(n^2 + m) O(n^2 + m) \u3002 \u5982\u679c\u7528\u5806\uff1a O((n+m) \\log m) O((n+m) \\log m) \u3002 \u5982\u679c\u7528\u7ebf\u6bb5\u6811\uff08ZKW \u7ebf\u6bb5\u6811\uff09\uff1a (O(n+m)\\log n) (O(n+m)\\log n) \u5982\u679c\u7528 Fibonacci \u5806\uff1a O(n \\log n + m) O(n \\log n + m) \uff08\u8fd9\u5c31\u662f\u4e3a\u5565\u4f18\u79c0\u4e86\uff09\u3002 \u7b49\u7b49\uff0c\u8fd8\u6ca1\u8bf4\u6b63\u786e\u6027\u5462\uff01 \u5206\u4e24\u6b65\u8bc1\u660e\uff1a\u5148\u8bc1\u660e\u4efb\u4f55\u65f6\u5019\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u7684 dist dist \u4e00\u5b9a\u4e0d\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u7684\u3002 \u518d\u8bc1\u660e\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u7684\u6700\u77ed\u8def\u5df2\u7ecf\u786e\u5b9a\u3002 \u7b2c\u4e00\u6b65\uff0c\u4e00\u5f00\u59cb\u65f6\u6210\u7acb\uff08\u57fa\u7840\uff09\uff0c\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u52a0\u5165\u96c6\u5408\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u6700\u5927\u503c\uff0c\u4e14\u662f\u53e6\u4e00\u8fb9\u6700\u5c0f\u503c\uff0c relax relax \u53c8\u662f\u52a0\u4e0a\u975e\u8d1f\u6570\uff0c\u6240\u4ee5\u4ecd\u7136\u6210\u7acb\u3002\uff08\u5f52\u7eb3\uff09 \uff08\u5229\u7528\u975e\u8d1f\u6743\u503c\u7684\u6027\u8d28\uff09 \u7b2c\u4e8c\u6b65\uff0c\u8003\u8651\u6bcf\u6b21\u52a0\u8fdb\u6765\u7684\u7ed3\u70b9\uff0c\u5230\u4ed6\u7684\u6700\u77ed\u8def\uff0c\u4e0a\u4e00\u6b65\u5fc5\u7136\u662f\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff08\u5426\u5219\u4ed6\u4e0d\u4f1a\u662f\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u800c\u4e14\u6709\u7b2c\u4e00\u6b65\u7684\u6027\u8d28\uff09\uff0c\u53c8\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u96c6\u5408\u5df2\u7ecf\u5168\u90e8 relax relax \u8fc7\u4e86\uff0c\u6240\u4ee5\u6700\u77ed\u8def\u663e\u7136\u786e\u5b9a\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 H = new heap(); H.insert(S, 0); dist[S] = 0; for (i = 1; i <= n; i++) { u = H.delete_min(); for each edge(u, v) { if (relax(u, v)) { H.decrease_key(v, dist[v]); } } }","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/#_8","text":"Floyd Bellman-Ford Dijkstra \u6bcf\u5bf9\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def \u5355\u6e90\u6700\u77ed\u8def \u5355\u6e90\u6700\u77ed\u8def \u6ca1\u6709\u8d1f\u73af\u7684\u56fe \u4efb\u610f\u56fe \u975e\u8d1f\u6743\u56fe O(N^3) O(N^3) O(NM) O(NM) O((N+M)\\log M) O((N+M)\\log M)","title":"\u4e0d\u540c\u65b9\u6cd5\u7684\u6bd4\u8f83"},{"location":"graph/shortest-path/#_9","text":"\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u4e00\u822c\u6a21\u578b\u4e3a\u6709 k k \u6b21\u96f6\u4ee3\u4ef7\u901a\u8fc7\u4e00\u6761\u8def\u5f84\uff0c\u6c42\u603b\u7684\u6700\u5c0f\u82b1\u8d39\u3002\u5bf9\u4e8e\u8fd9\u79cd\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528 DP \u76f8\u5173\u7684\u601d\u60f3\uff0c\u8bbe \\text{dis}_{i, j} \\text{dis}_{i, j} \u8868\u793a\u5f53\u524d\u4ece\u8d77\u70b9 i i \u53f7\u7ed3\u70b9\uff0c\u4f7f\u7528\u4e86 j j \u6b21\u514d\u8d39\u901a\u884c\u6743\u9650\u540e\u7684\u6700\u77ed\u8def\u5f84\u3002\u663e\u7136\uff0c \\text{dis} \\text{dis} \u6570\u7ec4\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a \\text{dis}_{i, j} = \\min\\{\\min\\{\\text{dis}_{from, j - 1}\\}, \\min\\{\\text{dis}_{from,j} + w\\}\\} \\text{dis}_{i, j} = \\min\\{\\min\\{\\text{dis}_{from, j - 1}\\}, \\min\\{\\text{dis}_{from,j} + w\\}\\} \u5176\u4e2d\uff0c from from \u8868\u793a i i \u7684\u7236\u4eb2\u8282\u70b9\uff0c w w \u8868\u793a\u5f53\u524d\u6240\u8d70\u7684\u8fb9\u7684\u8fb9\u6743\u3002\u5f53 j - 1 \\geq k j - 1 \\geq k \u65f6\uff0c \\text{dis}_{from, j} \\text{dis}_{from, j} = \\infty \\infty \u3002 \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a DP \u5c31\u76f8\u5f53\u4e8e\u628a\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u5206\u6210\u4e86 k+1 k+1 \u4e2a\u7ed3\u70b9\uff0c\u6bcf\u4e2a\u65b0\u7ed3\u70b9\u4ee3\u8868\u4f7f\u7528\u4e0d\u540c\u591a\u6b21\u514d\u8d39\u901a\u884c\u540e\u5230\u8fbe\u7684\u539f\u56fe\u7ed3\u70b9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u6bcf\u4e2a\u7ed3\u70b9 u_i u_i \u8868\u793a\u4f7f\u7528 i i \u6b21\u514d\u8d39\u901a\u884c\u6743\u9650\u540e\u5230\u8fbe u u \u7ed3\u70b9\u3002","title":"\u62d3\u5c55\uff1a\u5206\u5c42\u56fe\u6700\u77ed\u8def"},{"location":"graph/shortest-path/#91jloi201193","text":"\u9898\u610f\uff1a\u6709\u4e00\u4e2a n n \u4e2a\u70b9 m m \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 k k \u6761\u9053\u8def\u4ee5\u96f6\u4ee3\u4ef7\u901a\u884c\uff0c\u6c42 s s \u5230 t t \u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u53c2\u8003\u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 struct State { // \u4f18\u5148\u961f\u5217\u7684\u7ed3\u70b9\u7ed3\u6784\u4f53 int v , w , cnt ; // cnt \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u591a\u5c11\u6b21\u514d\u8d39\u901a\u884c\u6743\u9650 State () {} State ( int v , int w , int cnt ) : v ( v ), w ( w ), cnt ( cnt ) {} bool operator < ( const State & rhs ) const { return w > rhs . w ; } }; void dijkstra () { memset ( dis , 0x3f , sizeof dis ); dis [ s ][ 0 ] = 0 ; pq . push ( State ( s , 0 , 0 )); // \u5230\u8d77\u70b9\u4e0d\u9700\u8981\u4f7f\u7528\u514d\u8d39\u901a\u884c\u6743\uff0c\u8ddd\u79bb\u4e3a\u96f6 while ( ! pq . empty ()) { const State top = pq . top (); pq . pop (); int u = top . v , nowCnt = top . cnt ; if ( done [ u ][ nowCnt ]) continue ; done [ u ][ nowCnt ] = true ; for ( int i = head [ u ]; i ; i = edge [ i ]. next ) { int v = edge [ i ]. v , w = edge [ i ]. w ; if ( nowCnt < k && dis [ v ][ nowCnt + 1 ] > dis [ u ][ nowCnt ]) { // \u53ef\u4ee5\u514d\u8d39\u901a\u884c dis [ v ][ nowCnt + 1 ] = dis [ u ][ nowCnt ]; pq . push ( State ( v , dis [ v ][ nowCnt + 1 ], nowCnt + 1 )); } if ( dis [ v ][ nowCnt ] > dis [ u ][ nowCnt ] + w ) { // \u4e0d\u53ef\u4ee5\u514d\u8d39\u901a\u884c dis [ v ][ nowCnt ] = dis [ u ][ nowCnt ] + w ; pq . push ( State ( v , dis [ v ][ nowCnt ], nowCnt )); } } } } int main () { n = read (), m = read (), k = read (); // \u7b14\u8005\u4e60\u60ef\u4ece 1 \u5230 n \u7f16\u53f7\uff0c\u800c\u8fd9\u9053\u9898\u662f\u4ece 0 \u5230 n - 1\uff0c\u6240\u4ee5\u8981\u5904\u7406\u4e00\u4e0b s = read () + 1 , t = read () + 1 ; while ( m -- ) { int u = read () + 1 , v = read () + 1 , w = read (); add ( u , v , w ), add ( v , u , w ); // \u8fd9\u9053\u9898\u662f\u53cc\u5411\u8fb9 } dijkstra (); int ans = std :: numeric_limits < int >:: max (); // ans \u53d6 int \u6700\u5927\u503c\u4e3a\u521d\u503c for ( int i = 0 ; i <= k ; ++ i ) ans = std :: min ( ans , dis [ t ][ i ]); // \u5bf9\u5230\u8fbe\u7ec8\u70b9\u7684\u6240\u6709\u60c5\u51b5\u53d6\u6700\u4f18\u503c println ( ans ); }","title":"\u6a21\u677f\u9898\uff1a[JLOI2011] \u98de\u884c\u8def\u7ebf"},{"location":"graph/topo/","text":"\u5b9a\u4e49 \u00b6 \u62d3\u6251\u6392\u5e8f\u7684\u82f1\u6587\u540d\u662f Topological sorting\u3002 \u62d3\u6251\u6392\u5e8f\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u7ed9\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u8282\u70b9\u6392\u5e8f\u3002 \u6211\u4eec\u53ef\u4ee5\u62ff\u5927\u5b66\u9009\u8bfe\u7684\u4f8b\u5b50\u6765\u63cf\u8ff0\u8fd9\u4e2a\u8fc7\u7a0b, \u6bd4\u5982\u5b66\u4e60\u5927\u5b66\u8bfe\u7a0b\u4e2d\u6709: \u5355\u53d8\u91cf\u5fae\u79ef\u5206, \u7ebf\u6027\u4ee3\u6570, \u79bb\u6563\u6570\u5b66\u6982\u8ff0, \u6982\u7387\u8bba\u4e0e\u7edf\u8ba1\u5b66\u6982\u8ff0, \u8bed\u8a00\u57fa\u7840, \u7b97\u6cd5\u5bfc\u8bba, \u673a\u5668\u5b66\u4e60\u3002 \u5f53\u6211\u4eec\u60f3\u8981\u5b66\u4e60 \u7b97\u6cd5\u5bfc\u8bba \u7684\u65f6\u5019, \u5c31\u5fc5\u987b\u5148\u5b66\u4f1a \u79bb\u6563\u6570\u5b66\u6982\u8ff0 \u548c \u6982\u7387\u8bba\u4e0e\u7edf\u8ba1\u5b66\u6982\u8ff0, \u4e0d\u7136\u5728\u8bfe\u5802\u5c31\u4f1a\u542c\u7684\u4e00\u8138\u61f5\u903c\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u4e2a\u66f4\u52a0\u524d\u7684\u8bfe\u7a0b \u5355\u53d8\u91cf\u5fae\u79ef\u5206\u3002 \u8fd9\u4e9b\u8bfe\u7a0b\u5c31\u76f8\u5f53\u4e8e\u51e0\u4e2a\u9876\u70b9 u u , \u9876\u70b9\u4e4b\u95f4\u7684\u6709\u5411\u8fb9 (u,v) (u,v) \u5c31\u76f8\u5f53\u4e8e\u5b66\u4e60\u8bfe\u7a0b\u7684\u987a\u5e8f\u3002\u663e\u7136\u62d3\u6251\u6392\u5e8f\u4e0d\u662f\u90a3\u4e48\u7684\u9ebb\u70e6, \u4e0d\u7136\u4f60\u662f\u5982\u4f55\u9009\u51fa\u5408\u9002\u7684\u5b66\u4e60\u987a\u5e8f\u3002\u4e0b\u9762\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u62bd\u8c61\u51fa\u6765, \u7528\u7b97\u6cd5\u6765\u5b9e\u73b0\u3002 \u4f46\u662f\u5982\u679c\u67d0\u4e00\u5929\u6392\u8bfe\u7684\u8001\u5e08\u6253\u778c\u7761\u4e86, \u8bf4\u60f3\u8981\u5b66\u4e60 \u7b97\u6cd5\u5bfc\u8bba, \u8fd8\u5f97\u5148\u5b66 \u673a\u5668\u5b66\u4e60, \u800c \u673a\u5668\u5b66\u4e60 \u7684\u524d\u7f6e\u8bfe\u7a0b\u53c8\u662f \u7b97\u6cd5\u5bfc\u8bba, \u7136\u540e\u4f60\u5c31\u4e00\u4e07\u8138\u61f5\u903c\u4e86, \u6211\u5230\u5e95\u5e94\u8be5\u5148\u5b66\u54ea\u4e00\u4e2a ? \u5f53\u7136\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u8003\u8651\u4ec0\u4e48\u540c\u65f6\u5b66\u51e0\u4e2a\u8bfe\u7a0b\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u91cc, \u7b97\u6cd5\u5bfc\u8bba \u548c \u673a\u5668\u5b66\u4e60 \u95f4\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u73af, \u663e\u7136\u4f60\u73b0\u5728\u6ca1\u529e\u6cd5\u5f04\u6e05\u695a\u4f60\u9700\u8981\u5b66\u4ec0\u4e48\u4e86, \u4e8e\u662f\u4f60\u4e5f\u6ca1\u529e\u6cd5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u4e86\u3002\u56e0\u800c\u5982\u679c\u6709\u5411\u56fe\u4e2d\u5b58\u5728\u73af\u8def, \u90a3\u4e48\u6211\u4eec\u5c31\u6ca1\u529e\u6cd5\u8fdb\u884c \u62d3\u6251\u6392\u5e8f \u4e86\u3002 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bf4 \u5728\u4e00\u4e2a DAG \uff08\u6709\u5411\u65e0\u73af\u56fe\uff09 \u4e2d, \u6211\u4eec\u95f4\u56fe\u4e2d\u7684\u9876\u70b9\u4ee5\u7ebf\u6027\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f, \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u4f55\u7684\u9876\u70b9 u u \u5230 v v \u7684\u6709\u5411\u8fb9 (u,v) (u,v) , \u90fd\u53ef\u4ee5\u6709 u u \u5728 v v \u7684\u524d\u9762\u3002 \u8fd8\u6709\u7ed9\u5b9a\u4e00\u4e2a DAG \uff08\u6709\u5411\u65e0\u73af\u56fe\uff09 \uff0c\u5982\u679c\u4ece i i \u5230 j j \u6709\u8fb9\uff0c\u5219\u8ba4\u4e3a j j \u4f9d\u8d56\u4e8e i i \u3002\u5982\u679c i i \u5230 j j \u6709\u8def\u5f84\uff08 i i \u53ef\u8fbe j j \uff09\uff0c\u5219\u79f0 j j \u95f4\u63a5\u4f9d\u8d56\u4e8e i i \u3002 \u62d3\u6251\u6392\u5e8f\u7684\u76ee\u6807\u662f\u5c06\u6240\u6709\u8282\u70b9\u6392\u5e8f\uff0c\u4f7f\u5f97\u6392\u5728\u524d\u9762\u7684\u8282\u70b9\u4e0d\u80fd\u4f9d\u8d56\u4e8e\u6392\u5728\u540e\u9762\u7684\u8282\u70b9\u3002 Kahn \u7b97\u6cd5 \u00b6 \u5c06\u5165\u5ea6\u4e3a 0 \u7684\u8fb9\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408 S S \u6bcf\u6b21\u4ece S S \u91cc\u9762\u53d6\u51fa\u4e00\u4e2a\u9876\u70b9 v v (\u53ef\u4ee5\u968f\u4fbf\u53d6) \u653e\u5165 L L , \u7136\u540e\u904d\u5386\u9876\u70b9 v v \u7684\u6240\u6709\u8fb9 (u_1, v), (u_2, v), (u_3, v) \\cdots (u_1, v), (u_2, v), (u_3, v) \\cdots , \u5e76\u5220\u9664, \u5e76\u5224\u65ad\u5982\u679c\u8be5\u8fb9\u7684\u53e6\u4e00\u4e2a\u9876\u70b9, \u5982\u679c\u5728\u79fb\u9664\u8fd9\u4e00\u6761\u8fb9\u540e\u5165\u5ea6\u4e3a 0 , \u90a3\u4e48\u5c31\u5c06\u8fd9\u4e2a\u9876\u70b9\u653e\u5165\u96c6\u5408 L L \u4e2d\u3002\u4e0d\u65ad\u5730\u91cd\u590d\u53d6\u51fa\u9876\u70b9\u7136\u540e\u2026\u2026 \u6700\u540e\u5f53\u96c6\u5408\u4e3a\u7a7a\u540e, \u5c31\u68c0\u67e5\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u4efb\u4f55\u8fb9\u3002\u5982\u679c\u6709, \u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u6709\u73af\u8def, \u5426\u8005\u8fd4\u56de L L , L L \u4e2d\u987a\u5e8f\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c \u9996\u5148\u770b\u6765\u81ea Wiki \u7684\u4f2a\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 L\u2190 Empty list that will contain the sorted elements S \u2190 Set of all nodes with no incoming edges while S is non-empty do remove a node n from S insert n into L for each node m with an edge e from n to m do remove edge e from the graph if m has no other incoming edges then insert m into S if graph has edges then return error (graph has at least onecycle) else return L (a topologically sortedorder) \u4ee3\u7801\u7684\u6838\u5fc3\u662f, \u662f\u7ef4\u6301\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9\u3002 \u53ef\u4ee5\u53c2\u8003\u8be5\u56fe \u5bf9\u5176\u6392\u5e8f\u7684\u7ed3\u679c\u5c31\u662f: 2 -> 8 -> 0 -> 3 -> 7 -> 1 -> 5 -> 6 -> 9 -> 4 -> 11 -> 10 -> 12 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5047\u8bbe\u8fd9\u4e2a\u56fe G = (V, E) G = (V, E) \u5728\u521d\u59cb\u5316\u5165\u5ea6\u4e3a 0 \u7684\u96c6\u5408 S S \u7684\u65f6\u5019\u5c31\u9700\u8981\u904d\u5386\u6574\u4e2a\u56fe, \u5e76\u68c0\u67e5\u6bcf\u4e00\u6761\u8fb9, \u56e0\u800c\u6709 \\mathcal{O}(E+V) \\mathcal{O}(E+V) \u7684\u590d\u6742\u5ea6. \u7136\u540e\u5bf9\u8be5\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c, \u663e\u7136\u4e5f\u662f\u9700\u8981 \\mathcal{O}(E+V) \\mathcal{O}(E+V) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u56e0\u800c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u6709 \\mathcal{O}(E+V) \\mathcal{O}(E+V) \u5b9e\u73b0 \u00b6 \u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool toposort() { q = new queue(); for (i = 0; i < n; i++) if (in_deg[i] == 0) q.push(i); ans = new vector(); while (!q.empty()) { u = q.pop(); ans.push_back(u); for each edge(u, v) { if (--in_deg[v] == 0) q.push(v); } } if (ans.size() == n) { for (i = 0; i < n; i++) std::cout << ans[i] << std::endl; return true; } else { return false; } } DFS \u7b97\u6cd5 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // dfs \u7248\u672c bool dfs ( int u ) { c [ u ] = - 1 ; for ( int v = 0 ; v <= n ; v ++ ) if ( G [ u ][ v ]) { if ( c [ v ] < 0 ) return false ; else if ( ! c [ v ]) dfs ( v ); } c [ u ] = 1 ; topo . push_back ( u ); return true ; } bool toposort () { topo . clear (); memset ( c , 0 , sizeof ( c )); for ( int u = 0 ; u <= n ; u ++ ) if ( ! c [ u ]) if ( ! dfs ( u )) return false ; reverse ( topo . begin (), topo . end ()); return true ; } \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n+m) O(n+m) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(n) O(n) \u5408\u7406\u6027\u8bc1\u660e \u00b6 \u8003\u8651\u4e00\u4e2a\u56fe\uff0c\u5220\u6389\u67d0\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u4e4b\u540e\uff0c\u5982\u679c\u65b0\u56fe\u53ef\u4ee5\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u539f\u56fe\u4e00\u5b9a\u4e5f\u53ef\u4ee5\u3002\u53cd\u8fc7\u6765\uff0c\u5982\u679c\u539f\u56fe\u53ef\u4ee5\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u5220\u6389\u540e\u4e5f\u53ef\u4ee5\u3002 \u53c2\u8003 \u00b6 \u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528. ISBN:9787111555391 https://blog.csdn.net/dm_vincent/article/details/7714519 Topological sorting, https://en.wikipedia.org/w/index.php?title=Topological_sorting&oldid=854351542","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"graph/topo/#_1","text":"\u62d3\u6251\u6392\u5e8f\u7684\u82f1\u6587\u540d\u662f Topological sorting\u3002 \u62d3\u6251\u6392\u5e8f\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u7ed9\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u8282\u70b9\u6392\u5e8f\u3002 \u6211\u4eec\u53ef\u4ee5\u62ff\u5927\u5b66\u9009\u8bfe\u7684\u4f8b\u5b50\u6765\u63cf\u8ff0\u8fd9\u4e2a\u8fc7\u7a0b, \u6bd4\u5982\u5b66\u4e60\u5927\u5b66\u8bfe\u7a0b\u4e2d\u6709: \u5355\u53d8\u91cf\u5fae\u79ef\u5206, \u7ebf\u6027\u4ee3\u6570, \u79bb\u6563\u6570\u5b66\u6982\u8ff0, \u6982\u7387\u8bba\u4e0e\u7edf\u8ba1\u5b66\u6982\u8ff0, \u8bed\u8a00\u57fa\u7840, \u7b97\u6cd5\u5bfc\u8bba, \u673a\u5668\u5b66\u4e60\u3002 \u5f53\u6211\u4eec\u60f3\u8981\u5b66\u4e60 \u7b97\u6cd5\u5bfc\u8bba \u7684\u65f6\u5019, \u5c31\u5fc5\u987b\u5148\u5b66\u4f1a \u79bb\u6563\u6570\u5b66\u6982\u8ff0 \u548c \u6982\u7387\u8bba\u4e0e\u7edf\u8ba1\u5b66\u6982\u8ff0, \u4e0d\u7136\u5728\u8bfe\u5802\u5c31\u4f1a\u542c\u7684\u4e00\u8138\u61f5\u903c\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u4e2a\u66f4\u52a0\u524d\u7684\u8bfe\u7a0b \u5355\u53d8\u91cf\u5fae\u79ef\u5206\u3002 \u8fd9\u4e9b\u8bfe\u7a0b\u5c31\u76f8\u5f53\u4e8e\u51e0\u4e2a\u9876\u70b9 u u , \u9876\u70b9\u4e4b\u95f4\u7684\u6709\u5411\u8fb9 (u,v) (u,v) \u5c31\u76f8\u5f53\u4e8e\u5b66\u4e60\u8bfe\u7a0b\u7684\u987a\u5e8f\u3002\u663e\u7136\u62d3\u6251\u6392\u5e8f\u4e0d\u662f\u90a3\u4e48\u7684\u9ebb\u70e6, \u4e0d\u7136\u4f60\u662f\u5982\u4f55\u9009\u51fa\u5408\u9002\u7684\u5b66\u4e60\u987a\u5e8f\u3002\u4e0b\u9762\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u62bd\u8c61\u51fa\u6765, \u7528\u7b97\u6cd5\u6765\u5b9e\u73b0\u3002 \u4f46\u662f\u5982\u679c\u67d0\u4e00\u5929\u6392\u8bfe\u7684\u8001\u5e08\u6253\u778c\u7761\u4e86, \u8bf4\u60f3\u8981\u5b66\u4e60 \u7b97\u6cd5\u5bfc\u8bba, \u8fd8\u5f97\u5148\u5b66 \u673a\u5668\u5b66\u4e60, \u800c \u673a\u5668\u5b66\u4e60 \u7684\u524d\u7f6e\u8bfe\u7a0b\u53c8\u662f \u7b97\u6cd5\u5bfc\u8bba, \u7136\u540e\u4f60\u5c31\u4e00\u4e07\u8138\u61f5\u903c\u4e86, \u6211\u5230\u5e95\u5e94\u8be5\u5148\u5b66\u54ea\u4e00\u4e2a ? \u5f53\u7136\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u8003\u8651\u4ec0\u4e48\u540c\u65f6\u5b66\u51e0\u4e2a\u8bfe\u7a0b\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u91cc, \u7b97\u6cd5\u5bfc\u8bba \u548c \u673a\u5668\u5b66\u4e60 \u95f4\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u73af, \u663e\u7136\u4f60\u73b0\u5728\u6ca1\u529e\u6cd5\u5f04\u6e05\u695a\u4f60\u9700\u8981\u5b66\u4ec0\u4e48\u4e86, \u4e8e\u662f\u4f60\u4e5f\u6ca1\u529e\u6cd5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u4e86\u3002\u56e0\u800c\u5982\u679c\u6709\u5411\u56fe\u4e2d\u5b58\u5728\u73af\u8def, \u90a3\u4e48\u6211\u4eec\u5c31\u6ca1\u529e\u6cd5\u8fdb\u884c \u62d3\u6251\u6392\u5e8f \u4e86\u3002 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bf4 \u5728\u4e00\u4e2a DAG \uff08\u6709\u5411\u65e0\u73af\u56fe\uff09 \u4e2d, \u6211\u4eec\u95f4\u56fe\u4e2d\u7684\u9876\u70b9\u4ee5\u7ebf\u6027\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f, \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u4f55\u7684\u9876\u70b9 u u \u5230 v v \u7684\u6709\u5411\u8fb9 (u,v) (u,v) , \u90fd\u53ef\u4ee5\u6709 u u \u5728 v v \u7684\u524d\u9762\u3002 \u8fd8\u6709\u7ed9\u5b9a\u4e00\u4e2a DAG \uff08\u6709\u5411\u65e0\u73af\u56fe\uff09 \uff0c\u5982\u679c\u4ece i i \u5230 j j \u6709\u8fb9\uff0c\u5219\u8ba4\u4e3a j j \u4f9d\u8d56\u4e8e i i \u3002\u5982\u679c i i \u5230 j j \u6709\u8def\u5f84\uff08 i i \u53ef\u8fbe j j \uff09\uff0c\u5219\u79f0 j j \u95f4\u63a5\u4f9d\u8d56\u4e8e i i \u3002 \u62d3\u6251\u6392\u5e8f\u7684\u76ee\u6807\u662f\u5c06\u6240\u6709\u8282\u70b9\u6392\u5e8f\uff0c\u4f7f\u5f97\u6392\u5728\u524d\u9762\u7684\u8282\u70b9\u4e0d\u80fd\u4f9d\u8d56\u4e8e\u6392\u5728\u540e\u9762\u7684\u8282\u70b9\u3002","title":"\u5b9a\u4e49"},{"location":"graph/topo/#kahn","text":"\u5c06\u5165\u5ea6\u4e3a 0 \u7684\u8fb9\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408 S S \u6bcf\u6b21\u4ece S S \u91cc\u9762\u53d6\u51fa\u4e00\u4e2a\u9876\u70b9 v v (\u53ef\u4ee5\u968f\u4fbf\u53d6) \u653e\u5165 L L , \u7136\u540e\u904d\u5386\u9876\u70b9 v v \u7684\u6240\u6709\u8fb9 (u_1, v), (u_2, v), (u_3, v) \\cdots (u_1, v), (u_2, v), (u_3, v) \\cdots , \u5e76\u5220\u9664, \u5e76\u5224\u65ad\u5982\u679c\u8be5\u8fb9\u7684\u53e6\u4e00\u4e2a\u9876\u70b9, \u5982\u679c\u5728\u79fb\u9664\u8fd9\u4e00\u6761\u8fb9\u540e\u5165\u5ea6\u4e3a 0 , \u90a3\u4e48\u5c31\u5c06\u8fd9\u4e2a\u9876\u70b9\u653e\u5165\u96c6\u5408 L L \u4e2d\u3002\u4e0d\u65ad\u5730\u91cd\u590d\u53d6\u51fa\u9876\u70b9\u7136\u540e\u2026\u2026 \u6700\u540e\u5f53\u96c6\u5408\u4e3a\u7a7a\u540e, \u5c31\u68c0\u67e5\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u4efb\u4f55\u8fb9\u3002\u5982\u679c\u6709, \u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u6709\u73af\u8def, \u5426\u8005\u8fd4\u56de L L , L L \u4e2d\u987a\u5e8f\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c \u9996\u5148\u770b\u6765\u81ea Wiki \u7684\u4f2a\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 L\u2190 Empty list that will contain the sorted elements S \u2190 Set of all nodes with no incoming edges while S is non-empty do remove a node n from S insert n into L for each node m with an edge e from n to m do remove edge e from the graph if m has no other incoming edges then insert m into S if graph has edges then return error (graph has at least onecycle) else return L (a topologically sortedorder) \u4ee3\u7801\u7684\u6838\u5fc3\u662f, \u662f\u7ef4\u6301\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9\u3002 \u53ef\u4ee5\u53c2\u8003\u8be5\u56fe \u5bf9\u5176\u6392\u5e8f\u7684\u7ed3\u679c\u5c31\u662f: 2 -> 8 -> 0 -> 3 -> 7 -> 1 -> 5 -> 6 -> 9 -> 4 -> 11 -> 10 -> 12","title":"Kahn \u7b97\u6cd5"},{"location":"graph/topo/#_2","text":"\u5047\u8bbe\u8fd9\u4e2a\u56fe G = (V, E) G = (V, E) \u5728\u521d\u59cb\u5316\u5165\u5ea6\u4e3a 0 \u7684\u96c6\u5408 S S \u7684\u65f6\u5019\u5c31\u9700\u8981\u904d\u5386\u6574\u4e2a\u56fe, \u5e76\u68c0\u67e5\u6bcf\u4e00\u6761\u8fb9, \u56e0\u800c\u6709 \\mathcal{O}(E+V) \\mathcal{O}(E+V) \u7684\u590d\u6742\u5ea6. \u7136\u540e\u5bf9\u8be5\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c, \u663e\u7136\u4e5f\u662f\u9700\u8981 \\mathcal{O}(E+V) \\mathcal{O}(E+V) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u56e0\u800c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u6709 \\mathcal{O}(E+V) \\mathcal{O}(E+V)","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"graph/topo/#_3","text":"\u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool toposort() { q = new queue(); for (i = 0; i < n; i++) if (in_deg[i] == 0) q.push(i); ans = new vector(); while (!q.empty()) { u = q.pop(); ans.push_back(u); for each edge(u, v) { if (--in_deg[v] == 0) q.push(v); } } if (ans.size() == n) { for (i = 0; i < n; i++) std::cout << ans[i] << std::endl; return true; } else { return false; } }","title":"\u5b9e\u73b0"},{"location":"graph/topo/#dfs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // dfs \u7248\u672c bool dfs ( int u ) { c [ u ] = - 1 ; for ( int v = 0 ; v <= n ; v ++ ) if ( G [ u ][ v ]) { if ( c [ v ] < 0 ) return false ; else if ( ! c [ v ]) dfs ( v ); } c [ u ] = 1 ; topo . push_back ( u ); return true ; } bool toposort () { topo . clear (); memset ( c , 0 , sizeof ( c )); for ( int u = 0 ; u <= n ; u ++ ) if ( ! c [ u ]) if ( ! dfs ( u )) return false ; reverse ( topo . begin (), topo . end ()); return true ; } \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n+m) O(n+m) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(n) O(n)","title":"DFS \u7b97\u6cd5"},{"location":"graph/topo/#_4","text":"\u8003\u8651\u4e00\u4e2a\u56fe\uff0c\u5220\u6389\u67d0\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u4e4b\u540e\uff0c\u5982\u679c\u65b0\u56fe\u53ef\u4ee5\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u539f\u56fe\u4e00\u5b9a\u4e5f\u53ef\u4ee5\u3002\u53cd\u8fc7\u6765\uff0c\u5982\u679c\u539f\u56fe\u53ef\u4ee5\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u5220\u6389\u540e\u4e5f\u53ef\u4ee5\u3002","title":"\u5408\u7406\u6027\u8bc1\u660e"},{"location":"graph/topo/#_5","text":"\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528. ISBN:9787111555391 https://blog.csdn.net/dm_vincent/article/details/7714519 Topological sorting, https://en.wikipedia.org/w/index.php?title=Topological_sorting&oldid=854351542","title":"\u53c2\u8003"},{"location":"graph/traverse/","text":"\u5728\u6811 / \u56fe\u4e0a DFS \u00b6 \u524d\u7f6e\u77e5\u8bc6\uff1a DFS \u57fa\u7840 \u6811\u4e0a DFS \u00b6 \u5728\u6811\u4e0a DFS \u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u5206\u522b\u8bbf\u95ee\u6839\u8282\u70b9\u6bcf\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u3002 \u53ef\u4ee5\u7528\u6765\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u3001\u7236\u4eb2\u7b49\u4fe1\u606f\u3002 DFS \u5e8f\u5217 \u00b6 DFS \u5e8f\u5217\u662f\u6307 DFS \u8c03\u7528\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7\u7684\u5e8f\u5217\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u4e2a\u5b50\u6811\u90fd\u5bf9\u5e94 DFS \u5e8f\u5217\u4e2d\u7684\u8fde\u7eed\u4e00\u6bb5\uff08\u4e00\u6bb5\u533a\u95f4\uff09\u3002 \u62ec\u53f7\u5e8f\u5217 \u00b6 DFS \u8fdb\u5165\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u5de6\u62ec\u53f7 ( \uff0c\u9000\u51fa\u67d0\u4e2a\u8282\u70b9\u7684\u5565\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u53f3\u62ec\u53f7 ) \u3002 \u6bcf\u4e2a\u8282\u70b9\u4f1a\u51fa\u73b0\u4e24\u6b21\u3002\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u76f8\u5dee 1\u3002 \u4e8c\u53c9\u6811\u4e0a DFS \u00b6 \uff08\u56fe\u5f85\u8865\uff09 \u5148\u5e8f\u904d\u5386 \u00b6 \u5148\u8bbf\u95ee\u6839\uff0c\u518d\u8bbf\u95ee\u5b50\u8282\u70b9\u3002 \u4e2d\u5e8f\u904d\u5386 \u00b6 \u5148\u8bbf\u95ee\u5de6\u5b50\u6811\uff0c\u518d\u8bbf\u95ee\u6839\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u6811\u3002 \u540e\u5e8f\u904d\u5386 \u00b6 \u5148\u8bbf\u95ee\u5b50\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u3002 \u5df2\u77e5\u4e2d\u5e8f\u904d\u5386\u548c\u53e6\u5916\u4e00\u4e2a\u53ef\u4ee5\u6c42\u7b2c\u4e09\u4e2a\u3002 \u4e00\u822c\u56fe\u4e0a DFS \u00b6 \u5bf9\u4e8e\u975e\u8fde\u901a\u56fe\uff0c\u53ea\u80fd\u8bbf\u95ee\u5230\u8d77\u70b9\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u3002 \u5bf9\u4e8e\u8fde\u901a\u56fe\uff0cDFS \u5e8f\u5217\u901a\u5e38\u4e0d\u552f\u4e00\u3002 \u6ce8\uff1a\u6811\u7684 DFS \u5e8f\u5217\u4e5f\u662f\u4e0d\u552f\u4e00\u7684\u3002 \u5728 DFS \u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4ece\u54ea\u4e2a\u70b9\u8bbf\u95ee\u800c\u6765\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u6811\u7ed3\u6784\uff0c\u79f0\u4e3a DFS \u6811\u3002 DFS \u6811\u662f\u539f\u56fe\u7684\u4e00\u4e2a\u751f\u6210\u6811\u3002 DFS \u6811\u6709\u5f88\u591a\u6027\u8d28\uff0c\u6bd4\u5982\u7528\u6765\u6c42 \u5f3a\u8fde\u901a\u5206\u91cf BFS \u00b6 \u524d\u7f6e\u77e5\u8bc6\uff1a BFS \u57fa\u7840 \u6811\u4e0a BFS \u00b6 \u4ece\u6811\u6839\u5f00\u59cb\uff0c\u4e25\u683c\u6309\u7167\u5c42\u6b21\u6765\u8bbf\u95ee\u8282\u70b9\u3002 BFS \u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u4ee5\u987a\u4fbf\u6c42\u51fa\u5404\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u548c\u7236\u4eb2\u8282\u70b9\u3002 BFS \u5e8f\u5217 \u00b6 \u7c7b\u4f3c BFS \u5e8f\u5217\uff0cBFS \u5e8f\u5217\u662f\u6307\u5728 BFS \u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7\u7684\u5e8f\u5217\u3002 \u4e00\u822c\u56fe\u4e0a BFS \u00b6 \u540c\u6837\uff0c\u5982\u679c\u539f\u56fe\u4e0d\u8fde\u901a\uff0c\u53ea\u80fd\u8bbf\u95ee\u5230\u8d77\u70b9\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u3002 BFS \u5e8f\u5217\u901a\u5e38\u4e5f\u4e0d\u552f\u4e00\u3002 \u7c7b\u4f3c\u7684\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49 BFS \u6811\uff1a\u5728 BFS \u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4ece\u54ea\u4e2a\u70b9\u8bbf\u95ee\u800c\u6765\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u6811\u7ed3\u6784\uff0c\u5373\u4e3a BFS \u6811\u3002","title":"\u56fe\u7684\u904d\u5386"},{"location":"graph/traverse/#dfs","text":"\u524d\u7f6e\u77e5\u8bc6\uff1a DFS \u57fa\u7840","title":"\u5728\u6811 / \u56fe\u4e0a DFS"},{"location":"graph/traverse/#dfs_1","text":"\u5728\u6811\u4e0a DFS \u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u5206\u522b\u8bbf\u95ee\u6839\u8282\u70b9\u6bcf\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u3002 \u53ef\u4ee5\u7528\u6765\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u3001\u7236\u4eb2\u7b49\u4fe1\u606f\u3002","title":"\u6811\u4e0a DFS"},{"location":"graph/traverse/#dfs_2","text":"DFS \u5e8f\u5217\u662f\u6307 DFS \u8c03\u7528\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7\u7684\u5e8f\u5217\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u4e2a\u5b50\u6811\u90fd\u5bf9\u5e94 DFS \u5e8f\u5217\u4e2d\u7684\u8fde\u7eed\u4e00\u6bb5\uff08\u4e00\u6bb5\u533a\u95f4\uff09\u3002","title":"DFS \u5e8f\u5217"},{"location":"graph/traverse/#_1","text":"DFS \u8fdb\u5165\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u5de6\u62ec\u53f7 ( \uff0c\u9000\u51fa\u67d0\u4e2a\u8282\u70b9\u7684\u5565\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u53f3\u62ec\u53f7 ) \u3002 \u6bcf\u4e2a\u8282\u70b9\u4f1a\u51fa\u73b0\u4e24\u6b21\u3002\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u76f8\u5dee 1\u3002","title":"\u62ec\u53f7\u5e8f\u5217"},{"location":"graph/traverse/#dfs_3","text":"\uff08\u56fe\u5f85\u8865\uff09","title":"\u4e8c\u53c9\u6811\u4e0a DFS"},{"location":"graph/traverse/#_2","text":"\u5148\u8bbf\u95ee\u6839\uff0c\u518d\u8bbf\u95ee\u5b50\u8282\u70b9\u3002","title":"\u5148\u5e8f\u904d\u5386"},{"location":"graph/traverse/#_3","text":"\u5148\u8bbf\u95ee\u5de6\u5b50\u6811\uff0c\u518d\u8bbf\u95ee\u6839\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u6811\u3002","title":"\u4e2d\u5e8f\u904d\u5386"},{"location":"graph/traverse/#_4","text":"\u5148\u8bbf\u95ee\u5b50\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u3002 \u5df2\u77e5\u4e2d\u5e8f\u904d\u5386\u548c\u53e6\u5916\u4e00\u4e2a\u53ef\u4ee5\u6c42\u7b2c\u4e09\u4e2a\u3002","title":"\u540e\u5e8f\u904d\u5386"},{"location":"graph/traverse/#dfs_4","text":"\u5bf9\u4e8e\u975e\u8fde\u901a\u56fe\uff0c\u53ea\u80fd\u8bbf\u95ee\u5230\u8d77\u70b9\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u3002 \u5bf9\u4e8e\u8fde\u901a\u56fe\uff0cDFS \u5e8f\u5217\u901a\u5e38\u4e0d\u552f\u4e00\u3002 \u6ce8\uff1a\u6811\u7684 DFS \u5e8f\u5217\u4e5f\u662f\u4e0d\u552f\u4e00\u7684\u3002 \u5728 DFS \u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4ece\u54ea\u4e2a\u70b9\u8bbf\u95ee\u800c\u6765\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u6811\u7ed3\u6784\uff0c\u79f0\u4e3a DFS \u6811\u3002 DFS \u6811\u662f\u539f\u56fe\u7684\u4e00\u4e2a\u751f\u6210\u6811\u3002 DFS \u6811\u6709\u5f88\u591a\u6027\u8d28\uff0c\u6bd4\u5982\u7528\u6765\u6c42 \u5f3a\u8fde\u901a\u5206\u91cf","title":"\u4e00\u822c\u56fe\u4e0a DFS"},{"location":"graph/traverse/#bfs","text":"\u524d\u7f6e\u77e5\u8bc6\uff1a BFS \u57fa\u7840","title":"BFS"},{"location":"graph/traverse/#bfs_1","text":"\u4ece\u6811\u6839\u5f00\u59cb\uff0c\u4e25\u683c\u6309\u7167\u5c42\u6b21\u6765\u8bbf\u95ee\u8282\u70b9\u3002 BFS \u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u4ee5\u987a\u4fbf\u6c42\u51fa\u5404\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u548c\u7236\u4eb2\u8282\u70b9\u3002","title":"\u6811\u4e0a BFS"},{"location":"graph/traverse/#bfs_2","text":"\u7c7b\u4f3c BFS \u5e8f\u5217\uff0cBFS \u5e8f\u5217\u662f\u6307\u5728 BFS \u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7\u7684\u5e8f\u5217\u3002","title":"BFS \u5e8f\u5217"},{"location":"graph/traverse/#bfs_3","text":"\u540c\u6837\uff0c\u5982\u679c\u539f\u56fe\u4e0d\u8fde\u901a\uff0c\u53ea\u80fd\u8bbf\u95ee\u5230\u8d77\u70b9\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u3002 BFS \u5e8f\u5217\u901a\u5e38\u4e5f\u4e0d\u552f\u4e00\u3002 \u7c7b\u4f3c\u7684\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49 BFS \u6811\uff1a\u5728 BFS \u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4ece\u54ea\u4e2a\u70b9\u8bbf\u95ee\u800c\u6765\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u6811\u7ed3\u6784\uff0c\u5373\u4e3a BFS \u6811\u3002","title":"\u4e00\u822c\u56fe\u4e0a BFS"},{"location":"graph/tree-basic/","text":"\u7b97\u6cd5\u7ade\u8d5b\u7684\u6811\u548c\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u6811\u957f\u5f97\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u4e60\u60ef\u4e8e\u5904\u7406\u95ee\u9898\u7684\u65f6\u5019\u628a\u6811\u6839\u653e\u5230\u4e0a\u65b9\u6765\u8003\u8651\u3002 \u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u5012\u6302\u7684\u6811\uff0c\u56e0\u6b64\u5f97\u540d\u3002 \u5f62\u5f0f\u5316\u7684\u5b9a\u4e49\uff1a \u6709 n n \u4e2a\u8282\u70b9\uff0c n-1 n-1 \u6761\u8fb9\u7684\u8fde\u901a\u65e0\u5411\u56fe \u65e0\u5411\u65e0\u73af\u8fde\u901a\u56fe \u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84\u7684\u65e0\u5411\u56fe \u6709\u5173\u6811\u7684\u5b9a\u4e49 \u00b6 \u68ee\u6797 \u00b6 \u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\uff08\u8fde\u901a\u5757\uff09\u90fd\u662f\u6811\u7684\u56fe \u751f\u6210\u6811 \u00b6 \u4e00\u4e2a\u56fe\u7684\u751f\u6210\u5b50\u56fe\uff0c\u540c\u65f6\u8981\u6c42\u662f\u6811\u3002 \u6709\u6839\u6811 \u00b6 \u6307\u5b9a\u4e86\u4e00\u4e2a\u70b9\u662f\u6839\u7684\u6811 \u65e0\u6839\u6811 \u00b6 \u6ca1\u6709\u6307\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u6811 \u6df1\u5ea6 \u00b6 \u8282\u70b9\u7684\u6df1\u5ea6 \u00b6 \u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff08\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\uff09 \u6811\u7684\u6df1\u5ea6 \u00b6 \u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u7684\u6700\u5927\u503c \u7236\u4eb2 \u00b6 \u4e00\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9 \u7956\u5148 \u00b6 \u4e00\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u9664\u4e86\u5b83\u672c\u8eab\u5916\u7684\u6240\u6709\u8282\u70b9 \u5b50\u8282\u70b9 \u00b6 \u5982\u679c u u \u662f v v \u7684\u7236\u4eb2\uff0c\u90a3\u4e48 v v \u662f u u \u7684\u5b50\u8282\u70b9\u3002 \u5144\u5f1f \u00b6 \u540c\u4e00\u4e2a\u7236\u4eb2\u7684\u591a\u4e2a\u5b50\u8282\u70b9\u4e92\u4e3a\u5144\u5f1f \u540e\u4ee3\uff08\u5b50\u5b59\uff09 \u00b6 \u5b50\u8282\u70b9\u548c\u5b50\u8282\u70b9\u7684\u540e\u4ee3 \u6216\u8005\u7406\u89e3\u6210\uff1a\u5982\u679c u u \u662f v v \u7684\u7956\u5148\uff0c\u90a3\u4e48 v v \u662f u u \u7684\u540e\u4ee3\u3002 \u5ea6\u6570 \u00b6 \u65e0\u6839\u6811 \u00b6 \u548c\u4e00\u4e2a\u70b9\u76f8\u5173\u7684\u8fb9\u7684\u4e2a\u6570 \u6709\u6839\u6811 \u00b6 \u5b50\u8282\u70b9\u4e2a\u6570 \u53f6\u8282\u70b9 \u00b6 \u65e0\u6839\u6811 \u00b6 \u5ea6\u6570\u4e0d\u8d85\u8fc7 1 1 \u7684\u8282\u70b9 \u4e3a\u4ec0\u4e48\u4e0d\u662f\u5ea6\u4e3a 1 1 \uff1f \u8003\u8651 n = 1 n = 1 \u7684\u65f6\u5019\u3002 \u6709\u6839\u6811 \u00b6 \u6ca1\u6709\u5b50\u8282\u70b9\uff08\u5ea6\u6570\u4e3a 0 0 \uff09\u7684\u8282\u70b9 \u5b50\u6811 \u00b6 \u5220\u6389\u4e0e\u7236\u4eb2\u76f8\u8fde\u7684\u8fb9\u540e\uff0c\u8be5\u8282\u70b9\u6240\u5728\u7684\u5b50\u56fe \u7279\u6b8a\u7684\u6811 \u00b6 \u53ea\u6709\u4e00\u4e2a\u8282\u70b9 \u00b6 \u6ca1\u6709\u8fb9 n = 1, m = 0 n = 1, m = 0 \u94fe \u00b6 \u70b9 i i \u7684\u7236\u4eb2\u4e3a i - 1 i - 1 \u3002 \u6811\u7684\u6df1\u5ea6\u4e3a n - i n - i \u3002 \u83ca\u82b1 \u00b6 \u6240\u6709\u975e\u6839\u8282\u70b9\u7684\u7236\u4eb2\u5747\u4e3a\u6839\u8282\u70b9\u3002 \u6811\u7684\u6df1\u5ea6\u4e3a 1 1 \u3002 \u4e8c\u53c9\u6811 \u00b6 \u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u513f\u5b50\uff08\u5b50\u8282\u70b9\uff09\u7684\u6811 \u6ee1\u4e8c\u53c9\u6811 \u00b6 Full binary tree\uff0c\u6bcf\u4e2a\u8282\u70b9\u5ea6\u6570\u4e3a 0 \u6216\u8005 2\u3002\u6362\u8a00\u4e4b\uff0c\u6bcf\u4e2a\u8282\u70b9\u6216\u8005\u662f\u6811\u53f6\uff0c\u6216\u8005\u5de6\u53f3\u5b50\u6811\u5747\u975e\u7a7a\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811 \u00b6 Complete binary tree\uff0c\u53ea\u6709\u6700\u4e0b\u9762\u4e24\u5c42\u8282\u70b9\u7684\u5ea6\u6570\u53ef\u4ee5\u5c0f\u4e8e 2\uff0c\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u8fde\u7eed\u4f4d\u7f6e\u4e0a\u3002 \u5982\u4f55\u5b58\u6811 \u00b6 \u5b58\u7236\u4eb2 \u00b6 \u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff1a fa \u6570\u7ec4 \u90bb\u63a5\u8868 \u00b6 \u5f53\u6210\u56fe\u6765\u5b58 \u6709\u6839\u6811\uff1a vector<int> childs[n], fa[n] \u4e8c\u53c9\u6811\uff1a int lch[n], rch[n], fa[n]","title":"\u6811\u57fa\u7840"},{"location":"graph/tree-basic/#_1","text":"","title":"\u6709\u5173\u6811\u7684\u5b9a\u4e49"},{"location":"graph/tree-basic/#_2","text":"\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\uff08\u8fde\u901a\u5757\uff09\u90fd\u662f\u6811\u7684\u56fe","title":"\u68ee\u6797"},{"location":"graph/tree-basic/#_3","text":"\u4e00\u4e2a\u56fe\u7684\u751f\u6210\u5b50\u56fe\uff0c\u540c\u65f6\u8981\u6c42\u662f\u6811\u3002","title":"\u751f\u6210\u6811"},{"location":"graph/tree-basic/#_4","text":"\u6307\u5b9a\u4e86\u4e00\u4e2a\u70b9\u662f\u6839\u7684\u6811","title":"\u6709\u6839\u6811"},{"location":"graph/tree-basic/#_5","text":"\u6ca1\u6709\u6307\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u6811","title":"\u65e0\u6839\u6811"},{"location":"graph/tree-basic/#_6","text":"","title":"\u6df1\u5ea6"},{"location":"graph/tree-basic/#_7","text":"\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff08\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\uff09","title":"\u8282\u70b9\u7684\u6df1\u5ea6"},{"location":"graph/tree-basic/#_8","text":"\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u7684\u6700\u5927\u503c","title":"\u6811\u7684\u6df1\u5ea6"},{"location":"graph/tree-basic/#_9","text":"\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9","title":"\u7236\u4eb2"},{"location":"graph/tree-basic/#_10","text":"\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u9664\u4e86\u5b83\u672c\u8eab\u5916\u7684\u6240\u6709\u8282\u70b9","title":"\u7956\u5148"},{"location":"graph/tree-basic/#_11","text":"\u5982\u679c u u \u662f v v \u7684\u7236\u4eb2\uff0c\u90a3\u4e48 v v \u662f u u \u7684\u5b50\u8282\u70b9\u3002","title":"\u5b50\u8282\u70b9"},{"location":"graph/tree-basic/#_12","text":"\u540c\u4e00\u4e2a\u7236\u4eb2\u7684\u591a\u4e2a\u5b50\u8282\u70b9\u4e92\u4e3a\u5144\u5f1f","title":"\u5144\u5f1f"},{"location":"graph/tree-basic/#_13","text":"\u5b50\u8282\u70b9\u548c\u5b50\u8282\u70b9\u7684\u540e\u4ee3 \u6216\u8005\u7406\u89e3\u6210\uff1a\u5982\u679c u u \u662f v v \u7684\u7956\u5148\uff0c\u90a3\u4e48 v v \u662f u u \u7684\u540e\u4ee3\u3002","title":"\u540e\u4ee3\uff08\u5b50\u5b59\uff09"},{"location":"graph/tree-basic/#_14","text":"","title":"\u5ea6\u6570"},{"location":"graph/tree-basic/#_15","text":"\u548c\u4e00\u4e2a\u70b9\u76f8\u5173\u7684\u8fb9\u7684\u4e2a\u6570","title":"\u65e0\u6839\u6811"},{"location":"graph/tree-basic/#_16","text":"\u5b50\u8282\u70b9\u4e2a\u6570","title":"\u6709\u6839\u6811"},{"location":"graph/tree-basic/#_17","text":"","title":"\u53f6\u8282\u70b9"},{"location":"graph/tree-basic/#_18","text":"\u5ea6\u6570\u4e0d\u8d85\u8fc7 1 1 \u7684\u8282\u70b9 \u4e3a\u4ec0\u4e48\u4e0d\u662f\u5ea6\u4e3a 1 1 \uff1f \u8003\u8651 n = 1 n = 1 \u7684\u65f6\u5019\u3002","title":"\u65e0\u6839\u6811"},{"location":"graph/tree-basic/#_19","text":"\u6ca1\u6709\u5b50\u8282\u70b9\uff08\u5ea6\u6570\u4e3a 0 0 \uff09\u7684\u8282\u70b9","title":"\u6709\u6839\u6811"},{"location":"graph/tree-basic/#_20","text":"\u5220\u6389\u4e0e\u7236\u4eb2\u76f8\u8fde\u7684\u8fb9\u540e\uff0c\u8be5\u8282\u70b9\u6240\u5728\u7684\u5b50\u56fe","title":"\u5b50\u6811"},{"location":"graph/tree-basic/#_21","text":"","title":"\u7279\u6b8a\u7684\u6811"},{"location":"graph/tree-basic/#_22","text":"\u6ca1\u6709\u8fb9 n = 1, m = 0 n = 1, m = 0","title":"\u53ea\u6709\u4e00\u4e2a\u8282\u70b9"},{"location":"graph/tree-basic/#_23","text":"\u70b9 i i \u7684\u7236\u4eb2\u4e3a i - 1 i - 1 \u3002 \u6811\u7684\u6df1\u5ea6\u4e3a n - i n - i \u3002","title":"\u94fe"},{"location":"graph/tree-basic/#_24","text":"\u6240\u6709\u975e\u6839\u8282\u70b9\u7684\u7236\u4eb2\u5747\u4e3a\u6839\u8282\u70b9\u3002 \u6811\u7684\u6df1\u5ea6\u4e3a 1 1 \u3002","title":"\u83ca\u82b1"},{"location":"graph/tree-basic/#_25","text":"\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u513f\u5b50\uff08\u5b50\u8282\u70b9\uff09\u7684\u6811","title":"\u4e8c\u53c9\u6811"},{"location":"graph/tree-basic/#_26","text":"Full binary tree\uff0c\u6bcf\u4e2a\u8282\u70b9\u5ea6\u6570\u4e3a 0 \u6216\u8005 2\u3002\u6362\u8a00\u4e4b\uff0c\u6bcf\u4e2a\u8282\u70b9\u6216\u8005\u662f\u6811\u53f6\uff0c\u6216\u8005\u5de6\u53f3\u5b50\u6811\u5747\u975e\u7a7a\u3002","title":"\u6ee1\u4e8c\u53c9\u6811"},{"location":"graph/tree-basic/#_27","text":"Complete binary tree\uff0c\u53ea\u6709\u6700\u4e0b\u9762\u4e24\u5c42\u8282\u70b9\u7684\u5ea6\u6570\u53ef\u4ee5\u5c0f\u4e8e 2\uff0c\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u8fde\u7eed\u4f4d\u7f6e\u4e0a\u3002","title":"\u5b8c\u5168\u4e8c\u53c9\u6811"},{"location":"graph/tree-basic/#_28","text":"","title":"\u5982\u4f55\u5b58\u6811"},{"location":"graph/tree-basic/#_29","text":"\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff1a fa \u6570\u7ec4","title":"\u5b58\u7236\u4eb2"},{"location":"graph/tree-basic/#_30","text":"\u5f53\u6210\u56fe\u6765\u5b58 \u6709\u6839\u6811\uff1a vector<int> childs[n], fa[n] \u4e8c\u53c9\u6811\uff1a int lch[n], rch[n], fa[n]","title":"\u90bb\u63a5\u8868"},{"location":"graph/tree-divide/","text":"","title":"\u6811\u5206\u6cbb"},{"location":"graph/tree-misc/","text":"\u6811\u7684\u91cd\u5fc3 \u00b6 \u5b9a\u4e49 \u00b6 \u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5b50\u6811\uff08\u4e0d\u7b97\u6574\u4e2a\u6811\u81ea\u8eab\uff09\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u4e2a\u6811\u5927\u5c0f\u7684\u4e00\u534a\u3002 \u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11, \u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u91cd\u5fc3\u3002 \u5220\u53bb\u91cd\u5fc3\u540e\uff0c\u751f\u6210\u7684\u591a\u68f5\u6811\u5c3d\u53ef\u80fd\u5e73\u8861\u3002 \u6027\u8d28 \u00b6 \u6811\u4e2d\u6240\u6709\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c\u4e2d\uff0c\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u662f\u6700\u5c0f\u7684\uff1b\u5982\u679c\u6709\u4e24\u4e2a\u91cd\u5fc3\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u8ddd\u79bb\u548c\u4e00\u6837\u3002 \u628a\u4e24\u4e2a\u6811\u901a\u8fc7\u4e00\u6761\u8fb9\u76f8\u8fde\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6811\uff0c\u90a3\u4e48\u65b0\u7684\u6811\u7684\u91cd\u5fc3\u5728\u8fde\u63a5\u539f\u6765\u4e24\u4e2a\u6811\u7684\u91cd\u5fc3\u7684\u8def\u5f84\u4e0a\u3002 \u628a\u4e00\u4e2a\u6811\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u4e2a\u53f6\u5b50\uff0c\u90a3\u4e48\u5b83\u7684\u91cd\u5fc3\u6700\u591a\u53ea\u79fb\u52a8\u4e00\u6761\u8fb9\u7684\u8ddd\u79bb\u3002 \u6c42\u6cd5 \u00b6 \u6811\u7684\u91cd\u5fc3\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u4e24\u6b21\u641c\u7d22\u6c42\u51fa\u3002 \u7b2c\u4e00\u904d\u641c\u7d22\u6c42\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u6570\u91cf sz[u] sz[u] \u7b2c\u4e8c\u904d\u641c\u7d22\u627e\u51fa\u4f7f max\\{sz[u],n-sz[u]-1\\} max\\{sz[u],n-sz[u]-1\\} \u6700\u5c0f\u7684\u7ed3\u70b9\u3002 \u5b9e\u9645\u4e0a\u8fd9\u4e24\u6b65\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e00\u6b21\u904d\u5386\u4e2d\u89e3\u51b3\u3002\u5bf9\u7ed3\u70b9 u \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50 v\uff0c\u9012\u5f52\u7684\u5904\u7406 v\uff0c\u6c42\u51fa sz[v]\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u662f\u7ed3\u70b9\u6570\u6700\u591a\u7684\u5b50\u6811\uff0c\u5904\u7406\u5b8c\u6240\u6709\u5b50\u7ed3\u70b9\u540e\uff0c\u5224\u65ad u \u662f\u5426\u4e3a\u91cd\u5fc3\u3002 \uff08\u4ee3\u7801\u6765\u81ea\u53c9\u59d0\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 struct CenterTree { int n ; int ans ; int siz ; int son [ maxn ]; void dfs ( int u , int pa ) { son [ u ] = 1 ; int res = 0 ; for ( int i = head [ u ]; i != - 1 ; i = edges [ i ]. next ) { int v = edges [ i ]. to ; if ( v == pa ) continue ; if ( vis [ v ]) continue ; dfs ( v , u ); son [ u ] += son [ v ]; res = max ( res , son [ v ] - 1 ); } res = max ( res , n - son [ u ]); if ( res < siz ) { ans = u ; siz = res ; } } int getCenter ( int x ) { ans = 0 ; siz = INF ; dfs ( x , - 1 ); return ans ; } } \u53c2\u8003 \u00b6 http://fanhq666.blog.163.com/blog/static/81943426201172472943638/ https://www.cnblogs.com/zinthos/p/3899075.html","title":"\u6811\u7684\u5176\u4ed6\u95ee\u9898"},{"location":"graph/tree-misc/#_1","text":"","title":"\u6811\u7684\u91cd\u5fc3"},{"location":"graph/tree-misc/#_2","text":"\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5b50\u6811\uff08\u4e0d\u7b97\u6574\u4e2a\u6811\u81ea\u8eab\uff09\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u4e2a\u6811\u5927\u5c0f\u7684\u4e00\u534a\u3002 \u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11, \u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u91cd\u5fc3\u3002 \u5220\u53bb\u91cd\u5fc3\u540e\uff0c\u751f\u6210\u7684\u591a\u68f5\u6811\u5c3d\u53ef\u80fd\u5e73\u8861\u3002","title":"\u5b9a\u4e49"},{"location":"graph/tree-misc/#_3","text":"\u6811\u4e2d\u6240\u6709\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c\u4e2d\uff0c\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u662f\u6700\u5c0f\u7684\uff1b\u5982\u679c\u6709\u4e24\u4e2a\u91cd\u5fc3\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u8ddd\u79bb\u548c\u4e00\u6837\u3002 \u628a\u4e24\u4e2a\u6811\u901a\u8fc7\u4e00\u6761\u8fb9\u76f8\u8fde\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6811\uff0c\u90a3\u4e48\u65b0\u7684\u6811\u7684\u91cd\u5fc3\u5728\u8fde\u63a5\u539f\u6765\u4e24\u4e2a\u6811\u7684\u91cd\u5fc3\u7684\u8def\u5f84\u4e0a\u3002 \u628a\u4e00\u4e2a\u6811\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u4e2a\u53f6\u5b50\uff0c\u90a3\u4e48\u5b83\u7684\u91cd\u5fc3\u6700\u591a\u53ea\u79fb\u52a8\u4e00\u6761\u8fb9\u7684\u8ddd\u79bb\u3002","title":"\u6027\u8d28"},{"location":"graph/tree-misc/#_4","text":"\u6811\u7684\u91cd\u5fc3\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u4e24\u6b21\u641c\u7d22\u6c42\u51fa\u3002 \u7b2c\u4e00\u904d\u641c\u7d22\u6c42\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u6570\u91cf sz[u] sz[u] \u7b2c\u4e8c\u904d\u641c\u7d22\u627e\u51fa\u4f7f max\\{sz[u],n-sz[u]-1\\} max\\{sz[u],n-sz[u]-1\\} \u6700\u5c0f\u7684\u7ed3\u70b9\u3002 \u5b9e\u9645\u4e0a\u8fd9\u4e24\u6b65\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e00\u6b21\u904d\u5386\u4e2d\u89e3\u51b3\u3002\u5bf9\u7ed3\u70b9 u \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50 v\uff0c\u9012\u5f52\u7684\u5904\u7406 v\uff0c\u6c42\u51fa sz[v]\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u662f\u7ed3\u70b9\u6570\u6700\u591a\u7684\u5b50\u6811\uff0c\u5904\u7406\u5b8c\u6240\u6709\u5b50\u7ed3\u70b9\u540e\uff0c\u5224\u65ad u \u662f\u5426\u4e3a\u91cd\u5fc3\u3002 \uff08\u4ee3\u7801\u6765\u81ea\u53c9\u59d0\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 struct CenterTree { int n ; int ans ; int siz ; int son [ maxn ]; void dfs ( int u , int pa ) { son [ u ] = 1 ; int res = 0 ; for ( int i = head [ u ]; i != - 1 ; i = edges [ i ]. next ) { int v = edges [ i ]. to ; if ( v == pa ) continue ; if ( vis [ v ]) continue ; dfs ( v , u ); son [ u ] += son [ v ]; res = max ( res , son [ v ] - 1 ); } res = max ( res , n - son [ u ]); if ( res < siz ) { ans = u ; siz = res ; } } int getCenter ( int x ) { ans = 0 ; siz = INF ; dfs ( x , - 1 ); return ans ; } }","title":"\u6c42\u6cd5"},{"location":"graph/tree-misc/#_5","text":"http://fanhq666.blog.163.com/blog/static/81943426201172472943638/ https://www.cnblogs.com/zinthos/p/3899075.html","title":"\u53c2\u8003"},{"location":"graph/flow/bound/","text":"","title":"\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41"},{"location":"graph/flow/max-flow/","text":"","title":"\u6700\u5927\u6d41"},{"location":"graph/flow/min-cost/","text":"","title":"\u8d39\u7528\u6d41"},{"location":"graph/flow/min-cut/","text":"","title":"\u6700\u5c0f\u5272"},{"location":"graph/flow/node/","text":"\u62c6\u70b9\u662f\u4e00\u79cd \u7f51\u7edc\u6d41 \u5efa\u6a21\u601d\u60f3\uff0c\u7528\u6765\u5904\u7406 \u70b9\u6743\u6216\u8005\u70b9\u7684\u6d41\u91cf\u9650\u5236 \u7684\u95ee\u9898\u3002\u8fd9\u79cd\u601d\u8def\u540c\u6837\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u7684\u56fe\u8bba\u7b97\u6cd5\u4e2d\uff08\u6bd4\u8f83\u7ecf\u5178\u7684\u6709 \u5206\u5c42\u56fe \uff09 \u4f8b\u9898 \u7ecf\u5178\u95ee\u9898 \u7ed3\u70b9\u6709\u6d41\u91cf\u9650\u5236\u7684\u6700\u5927\u6d41 \u00b6 \u5982\u679c\u628a\u7ed3\u70b9\u8f6c\u5316\u6210\u8fb9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u53ef\u4ee5\u5957\u677f\u5b50\u89e3\u51b3\u4e86\u3002 \u6211\u4eec\u8003\u8651\u628a\u6709\u6d41\u91cf\u9650\u5236\u7684\u7ed3\u70b9\u8f6c\u5316\u6210\u8fd9\u6837\u4e00\u79cd\u5f62\u5f0f\uff1a\u7531\u4e24\u4e2a\u7ed3\u70b9 u,v u,v \u548c\u4e00\u6761\u8fb9 <u,v> <u,v> \u7ec4\u6210\u7684\u90e8\u5206\u3002\u5176\u4e2d\uff0c\u7ed3\u70b9 u u \u627f\u63a5\u6240\u6709\u4ece\u539f\u56fe\u4e0a\u5176\u4ed6\u70b9\u7684\u51fa\u53d1\u5230\u539f\u56fe\u4e0a\u8be5\u70b9\u7684\u8fb9\uff0c\u7ed3\u70b9 v v \u5f15\u51fa\u6240\u6709\u4ece\u539f\u56fe\u4e0a\u8be5\u70b9\u51fa\u53d1\u5230\u8fbe\u539f\u56fe\u4e0a\u5176\u4ed6\u70b9\u7684\u8fb9\u3002\u8fb9 <u,v> <u,v> \u7684\u6d41\u91cf\u9650\u5236\u4e3a\u539f\u56fe\u8be5\u70b9\u7684\u6d41\u91cf\u9650\u5236\uff0c\u518d\u5957\u677f\u5b50\u5c31\u53ef\u4ee5\u89e3\u51b3\u672c\u9898\u3002\u8fd9\u5c31\u662f\u62c6\u70b9\u7684\u57fa\u672c\u601d\u60f3\u3002 \u5982\u679c\u539f\u56fe\u662f\u8fd9\u6837\uff1a \u62c6\u70b9\u4e4b\u540e\u7684\u56fe\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u4f8b\u9898 luogu P4568 [JLOI2011] \u98de\u884c\u8def\u7ebf \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u6709 n n \u4e2a\u7ed3\u70b9\uff0c m m \u6761\u8fb9\uff0c k k \u5f20\u65c5\u884c\u5238\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u5f20\u65c5\u884c\u5238\u4f7f\u5f97\u7ecf\u8fc7\u8be5\u8fb9\u7684\u8fb9\u6743\u9664\u4ee5\u4e8c\u5411\u4e0b\u53d6\u6574\uff0c\u6c42\u4ece\u7ed3\u70b9 s s \u5230 t t \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u3002 \u5f53\u7136\u53ef\u4ee5\u4f7f\u7528 DP \u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\u3002\u6211\u4eec\u8003\u8651\u4f7f\u7528\u62c6\u70b9\u7684\u89e3\u6cd5\u3002 \u5c06\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u6210 k k \u4e2a\u70b9\uff0c\u8fd9\u6837\u56fe\u5c31\u53ef\u4ee5\u5f62\u8c61\u5316\u5730\u770b\u505a\u662f k k \u5c42\uff0c\u6bcf\u5c42\u7684\u7ed3\u70b9\u4e4b\u95f4\u8fde\u4e0a\u539f\u6765\u5c31\u6709\u7684\u8fb9\uff0c\u8fb9\u6743\u548c\u539f\u6765\u76f8\u7b49\uff1b\u82e5\u56fe\u4e0a\u5b58\u5728\u8fb9 <u,v> <u,v> \uff0c\u5219\u5728\u5f53\u524d\u5c42\u7684 u u \u6240\u5bf9\u5e94\u7684\u7ed3\u70b9\u548c\u66f4\u9ad8\u4e00\u5c42\u7684 v v \u6240\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0c\u8fde\u63a5\u4e00\u6761\u8fb9\u6743\u4e3a\u539f\u8fb9\u6743\u9664\u4ee5\u4e8c\u5411\u4e0b\u53d6\u6574\u7684\u8fb9\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6700\u591a\u53ea\u4f7f\u7528 k k \u6b21\u65c5\u884c\u5238\uff0c\u56e0\u4e3a\u6bcf\u6b21\u4ece\u8f83\u4f4e\u7684\u4e00\u5c42\u5230\u4e0a\u9762\u4e00\u5c42\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u4f7f\u7528\u4e86\u4e00\u5f20\u65c5\u884c\u5238\u3002\u4ee5\u6700\u5e95\u5c42\u7684 s s \u6240\u5bf9\u5e94\u7684\u70b9\u8dd1\u5355\u5143\u6700\u77ed\u8def\u5373\u53ef\u3002","title":"\u62c6\u70b9"},{"location":"graph/flow/node/#_1","text":"\u5982\u679c\u628a\u7ed3\u70b9\u8f6c\u5316\u6210\u8fb9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u53ef\u4ee5\u5957\u677f\u5b50\u89e3\u51b3\u4e86\u3002 \u6211\u4eec\u8003\u8651\u628a\u6709\u6d41\u91cf\u9650\u5236\u7684\u7ed3\u70b9\u8f6c\u5316\u6210\u8fd9\u6837\u4e00\u79cd\u5f62\u5f0f\uff1a\u7531\u4e24\u4e2a\u7ed3\u70b9 u,v u,v \u548c\u4e00\u6761\u8fb9 <u,v> <u,v> \u7ec4\u6210\u7684\u90e8\u5206\u3002\u5176\u4e2d\uff0c\u7ed3\u70b9 u u \u627f\u63a5\u6240\u6709\u4ece\u539f\u56fe\u4e0a\u5176\u4ed6\u70b9\u7684\u51fa\u53d1\u5230\u539f\u56fe\u4e0a\u8be5\u70b9\u7684\u8fb9\uff0c\u7ed3\u70b9 v v \u5f15\u51fa\u6240\u6709\u4ece\u539f\u56fe\u4e0a\u8be5\u70b9\u51fa\u53d1\u5230\u8fbe\u539f\u56fe\u4e0a\u5176\u4ed6\u70b9\u7684\u8fb9\u3002\u8fb9 <u,v> <u,v> \u7684\u6d41\u91cf\u9650\u5236\u4e3a\u539f\u56fe\u8be5\u70b9\u7684\u6d41\u91cf\u9650\u5236\uff0c\u518d\u5957\u677f\u5b50\u5c31\u53ef\u4ee5\u89e3\u51b3\u672c\u9898\u3002\u8fd9\u5c31\u662f\u62c6\u70b9\u7684\u57fa\u672c\u601d\u60f3\u3002 \u5982\u679c\u539f\u56fe\u662f\u8fd9\u6837\uff1a \u62c6\u70b9\u4e4b\u540e\u7684\u56fe\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a","title":"\u4f8b\u9898 \u7ecf\u5178\u95ee\u9898 \u7ed3\u70b9\u6709\u6d41\u91cf\u9650\u5236\u7684\u6700\u5927\u6d41"},{"location":"graph/flow/node/#luogu-p4568-91jloi201193","text":"\u9898\u76ee\u5927\u610f\uff1a\u6709 n n \u4e2a\u7ed3\u70b9\uff0c m m \u6761\u8fb9\uff0c k k \u5f20\u65c5\u884c\u5238\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u5f20\u65c5\u884c\u5238\u4f7f\u5f97\u7ecf\u8fc7\u8be5\u8fb9\u7684\u8fb9\u6743\u9664\u4ee5\u4e8c\u5411\u4e0b\u53d6\u6574\uff0c\u6c42\u4ece\u7ed3\u70b9 s s \u5230 t t \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u3002 \u5f53\u7136\u53ef\u4ee5\u4f7f\u7528 DP \u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\u3002\u6211\u4eec\u8003\u8651\u4f7f\u7528\u62c6\u70b9\u7684\u89e3\u6cd5\u3002 \u5c06\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u6210 k k \u4e2a\u70b9\uff0c\u8fd9\u6837\u56fe\u5c31\u53ef\u4ee5\u5f62\u8c61\u5316\u5730\u770b\u505a\u662f k k \u5c42\uff0c\u6bcf\u5c42\u7684\u7ed3\u70b9\u4e4b\u95f4\u8fde\u4e0a\u539f\u6765\u5c31\u6709\u7684\u8fb9\uff0c\u8fb9\u6743\u548c\u539f\u6765\u76f8\u7b49\uff1b\u82e5\u56fe\u4e0a\u5b58\u5728\u8fb9 <u,v> <u,v> \uff0c\u5219\u5728\u5f53\u524d\u5c42\u7684 u u \u6240\u5bf9\u5e94\u7684\u7ed3\u70b9\u548c\u66f4\u9ad8\u4e00\u5c42\u7684 v v \u6240\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0c\u8fde\u63a5\u4e00\u6761\u8fb9\u6743\u4e3a\u539f\u8fb9\u6743\u9664\u4ee5\u4e8c\u5411\u4e0b\u53d6\u6574\u7684\u8fb9\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6700\u591a\u53ea\u4f7f\u7528 k k \u6b21\u65c5\u884c\u5238\uff0c\u56e0\u4e3a\u6bcf\u6b21\u4ece\u8f83\u4f4e\u7684\u4e00\u5c42\u5230\u4e0a\u9762\u4e00\u5c42\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u4f7f\u7528\u4e86\u4e00\u5f20\u65c5\u884c\u5238\u3002\u4ee5\u6700\u5e95\u5c42\u7684 s s \u6240\u5bf9\u5e94\u7684\u70b9\u8dd1\u5355\u5143\u6700\u77ed\u8def\u5373\u53ef\u3002","title":"\u4f8b\u9898 luogu P4568 [JLOI2011] \u98de\u884c\u8def\u7ebf"},{"location":"intro/about/","text":"\u5173\u4e8e\u672c\u9879\u76ee \u00b6 Q\uff1a\u4f60\u4eec\u662f\u4e3a\u4ec0\u4e48\u60f3\u8981\u505a\u8fd9\u4e2a Wiki \u7684\u5462\uff1f A\uff1a\u4e0d\u77e5\u9053\u4f60\u5728\u5b66 OI \u7684\u65f6\u5019\uff0c\u9762\u5bf9\u5e9e\u5927\u7684\u77e5\u8bc6\u4f53\u7cfb\uff0c\u6709\u6ca1\u6709\u611f\u5230\u8fc7\u8ff7\u832b\u65e0\u52a9\u7684\u65f6\u5019\uff1f OI Wiki \u60f3\u8981\u505a\u7684\u4e8b\u60c5\u53ef\u80fd\u7c7b\u4f3c\u4e8e \u201c\u8ba9\u66f4\u591a\u7ade\u8d5b\u8d44\u6e90\u4e0d\u5145\u88d5\u7684\u540c\u5b66\u80fd\u65b9\u4fbf\u5730\u63a5\u89e6\u5230\u8bad\u7ec3\u8d44\u6e90\u201d\u3002\u5f53\u7136\u8fd9\u4e48\u8868\u8ff0\u4e5f\u4e0d\u5b8c\u5168\uff0c\u505a Wiki \u7684\u52a8\u673a\u53ef\u80fd\u4e5f\u5f88\u7eaf\u7cb9\uff0c\u53ea\u662f\u7b80\u5355\u5730\u60f3\u8981\u5bf9 OI \u7684\u53d1\u5c55\u505a\u51fa\u4e00\u70b9\u70b9\u5fae\u5c0f\u7684\u8d21\u732e\u5427\u3002XD Q\uff1a\u6211\u5f88\u611f\u5174\u8da3\uff0c\u600e\u4e48\u53c2\u4e0e\u5462\uff1f A\uff1a OI Wiki \u73b0\u5728\u6258\u7ba1\u5728 GitHub \u4e0a\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e2a repo \u6765\u67e5\u770b\u6700\u65b0\u8fdb\u5c55\u3002\u53c2\u4e0e\u7684\u9014\u5f84\u5305\u62ec\u5728 GitHub \u4e0a\u9762\u5f00 Issue\u3001Pull Request\uff0c\u6216\u8005\u5728\u4ea4\u6d41\u7fa4\u4e2d\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\u3001\u76f4\u63a5\u5411\u7ba1\u7406\u5458\u6295\u7a3f\u3002\u76ee\u524d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6846\u67b6\u662f mkdocs \uff0c\u652f\u6301 Markdown \u683c\u5f0f\uff08\u4e5f\u652f\u6301\u63d2\u5165\u6570\u5b66\u516c\u5f0f\uff09\u3002 Q\uff1a\u53ef\u662f\u6211\u6bd4\u8f83\u5f31\u2026\u2026 \u4e0d\u77e5\u9053\u6211\u80fd\u505a\u70b9\u4ec0\u4e48\uff1f A\uff1a\u4e00\u5207\u6e90\u4e8e\u70ed\u7231\u3002\u4f60\u53ef\u4ee5\u534f\u52a9\u5176\u4ed6\u4eba\u5ba1\u6838\u4fee\u6539\u7a3f\u4ef6\uff0c\u5e2e\u52a9\u6211\u4eec\u5ba3\u4f20 OI Wiki \uff0c\u4e3a\u793e\u533a\u8425\u9020\u826f\u597d\u5b66\u4e60\u4ea4\u6d41\u6c1b\u56f4\uff01 Q\uff1a\u73b0\u5728\u4e3b\u8981\u662f\u8c01\u5728\u505a\u8fd9\u4ef6\u4e8b\u554a\uff1f\u611f\u89c9\u8fd9\u662f\u4e2a\u5927\u5751\uff0c\u771f\u7684\u80fd\u505a\u597d\u5417\uff1f A\uff1a\u6700\u5f00\u59cb\u4e3b\u8981\u662f\u4e00\u4e9b\u9000\u5f79\u8001\u5e74\u9009\u624b\u5728\u505a\u8fd9\u4ef6\u4e8b\uff0c\u540e\u6765\u9047\u5230\u4e86\u5f88\u591a\u5fd7\u540c\u9053\u5408\u7684\u5c0f\u4f19\u4f34\uff1a\u6709\u73b0\u5f79\u9009\u624b\uff0c\u9000\u5f79\u73a9\u5bb6\uff0c\u4e5f\u6709\u4ece\u672a\u53c2\u52a0\u8fc7 OI \u7684\u670b\u53cb\u3002\u76ee\u524d\uff0c\u8fd9\u4e2a\u9879\u76ee\u4e3b\u8981\u662f\u7531 OI Wiki Team \u6765\u7ef4\u62a4\u3002\uff08\u4e0b\u9762\u662f\u4e00\u5f20\u5408\u5f71\uff09 \u5f53\u7136\uff0c\u8fd9\u4e2a\u9879\u76ee\u53ea\u9760\u6211\u4eec\u7684\u529b\u91cf\u662f\u5f88\u96be\u505a\u5f97\u5341\u5168\u5341\u7f8e\u7684\uff0c\u6211\u4eec\u8bda\u631a\u5730\u9080\u8bf7\u4f60\u4e00\u8d77\u6765\u5b8c\u5584 OI Wiki \u3002 Q\uff1a\u542c\u8bf4\u8fc7 nocow \u5427\uff0c OI Wiki \u600e\u4e48\u4fdd\u8bc1\u6211\u4eec\u6dfb\u52a0\u7684\u5185\u5bb9\u4e0d\u4f1a\u50cf nocow \u90a3\u6837\u7a81\u7136\u95f4\u5c31\u4e0d\u89c1\u4e86\u5462\uff1f A\uff1a\u6211\u4eec\u628a\u5185\u5bb9\u6258\u7ba1\u5728 GitHub \u4e0a\u9762\uff0c\u5373\u4f7f\u6211\u4eec\u7684\u670d\u52a1\u5668\u7ffb\u8f66\u4e86\uff0c\u5185\u5bb9\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002\u53e6\u5916\uff0c\u6211\u4eec\u4e5f\u4f1a\u5b9a\u671f\u5907\u4efd\u5927\u5bb6\u7684\u5fc3\u8840\uff0c\u5373\u4f7f\u6709\u4e00\u5929 GitHub \u5012\u95ed\u4e86\uff08\uff1f\uff09\uff0c\u6211\u4eec\u7684\u5185\u5bb9\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002 Q\uff1a OI Wiki \u597d\u50cf\u73b0\u5728\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u662f\u7a7a\u7684\u554a\uff1f A\uff1a\u662f\u7684\uff0c\u76ee\u524d\u8fdb\u5ea6\u53ea\u5b8c\u6210\u4e86 57% \uff08\u91cd\u65b0\u7edf\u8ba1\u4e8e 2018.9.13\uff09\uff0c\u8fd8\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u4e3b\u8981\u6dfb\u52a0\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a OI Wiki \u5b8c\u5584\u8d77\u6765\u3002 Q\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u53bb\u5199 \u4e2d\u6587\u7ef4\u57fa \u5462\uff1f A\uff1a\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u771f\u6b63\u5e2e\u5230\u66f4\u591a\u7684\u9009\u624b\u6216\u8005\u5bf9\u8fd9\u4e9b\u5185\u5bb9\u611f\u5174\u8da3\u7684\u4eba\uff0c\u7531\u4e8e\u4f17\u6240\u5468\u77e5\u7684\u539f\u56e0\uff0c\u4e2d\u6587\u7ef4\u57fa\u4e0a\u7684\u5185\u5bb9\u5e76\u4e0d\u662f\u65e0\u95e8\u69db\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u7684\u3002 \u611f\u8c22\u4f60\u770b\u5230\u4e86\u6700\u540e\uff0c\u6211\u4eec\u73b0\u5728\u6025\u9700\u7684\uff0c\u5c31\u662f\u4f60\u7684\u5e2e\u52a9\u3002 OI Wiki Team 2018.8","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"intro/about/#_1","text":"Q\uff1a\u4f60\u4eec\u662f\u4e3a\u4ec0\u4e48\u60f3\u8981\u505a\u8fd9\u4e2a Wiki \u7684\u5462\uff1f A\uff1a\u4e0d\u77e5\u9053\u4f60\u5728\u5b66 OI \u7684\u65f6\u5019\uff0c\u9762\u5bf9\u5e9e\u5927\u7684\u77e5\u8bc6\u4f53\u7cfb\uff0c\u6709\u6ca1\u6709\u611f\u5230\u8fc7\u8ff7\u832b\u65e0\u52a9\u7684\u65f6\u5019\uff1f OI Wiki \u60f3\u8981\u505a\u7684\u4e8b\u60c5\u53ef\u80fd\u7c7b\u4f3c\u4e8e \u201c\u8ba9\u66f4\u591a\u7ade\u8d5b\u8d44\u6e90\u4e0d\u5145\u88d5\u7684\u540c\u5b66\u80fd\u65b9\u4fbf\u5730\u63a5\u89e6\u5230\u8bad\u7ec3\u8d44\u6e90\u201d\u3002\u5f53\u7136\u8fd9\u4e48\u8868\u8ff0\u4e5f\u4e0d\u5b8c\u5168\uff0c\u505a Wiki \u7684\u52a8\u673a\u53ef\u80fd\u4e5f\u5f88\u7eaf\u7cb9\uff0c\u53ea\u662f\u7b80\u5355\u5730\u60f3\u8981\u5bf9 OI \u7684\u53d1\u5c55\u505a\u51fa\u4e00\u70b9\u70b9\u5fae\u5c0f\u7684\u8d21\u732e\u5427\u3002XD Q\uff1a\u6211\u5f88\u611f\u5174\u8da3\uff0c\u600e\u4e48\u53c2\u4e0e\u5462\uff1f A\uff1a OI Wiki \u73b0\u5728\u6258\u7ba1\u5728 GitHub \u4e0a\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e2a repo \u6765\u67e5\u770b\u6700\u65b0\u8fdb\u5c55\u3002\u53c2\u4e0e\u7684\u9014\u5f84\u5305\u62ec\u5728 GitHub \u4e0a\u9762\u5f00 Issue\u3001Pull Request\uff0c\u6216\u8005\u5728\u4ea4\u6d41\u7fa4\u4e2d\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\u3001\u76f4\u63a5\u5411\u7ba1\u7406\u5458\u6295\u7a3f\u3002\u76ee\u524d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6846\u67b6\u662f mkdocs \uff0c\u652f\u6301 Markdown \u683c\u5f0f\uff08\u4e5f\u652f\u6301\u63d2\u5165\u6570\u5b66\u516c\u5f0f\uff09\u3002 Q\uff1a\u53ef\u662f\u6211\u6bd4\u8f83\u5f31\u2026\u2026 \u4e0d\u77e5\u9053\u6211\u80fd\u505a\u70b9\u4ec0\u4e48\uff1f A\uff1a\u4e00\u5207\u6e90\u4e8e\u70ed\u7231\u3002\u4f60\u53ef\u4ee5\u534f\u52a9\u5176\u4ed6\u4eba\u5ba1\u6838\u4fee\u6539\u7a3f\u4ef6\uff0c\u5e2e\u52a9\u6211\u4eec\u5ba3\u4f20 OI Wiki \uff0c\u4e3a\u793e\u533a\u8425\u9020\u826f\u597d\u5b66\u4e60\u4ea4\u6d41\u6c1b\u56f4\uff01 Q\uff1a\u73b0\u5728\u4e3b\u8981\u662f\u8c01\u5728\u505a\u8fd9\u4ef6\u4e8b\u554a\uff1f\u611f\u89c9\u8fd9\u662f\u4e2a\u5927\u5751\uff0c\u771f\u7684\u80fd\u505a\u597d\u5417\uff1f A\uff1a\u6700\u5f00\u59cb\u4e3b\u8981\u662f\u4e00\u4e9b\u9000\u5f79\u8001\u5e74\u9009\u624b\u5728\u505a\u8fd9\u4ef6\u4e8b\uff0c\u540e\u6765\u9047\u5230\u4e86\u5f88\u591a\u5fd7\u540c\u9053\u5408\u7684\u5c0f\u4f19\u4f34\uff1a\u6709\u73b0\u5f79\u9009\u624b\uff0c\u9000\u5f79\u73a9\u5bb6\uff0c\u4e5f\u6709\u4ece\u672a\u53c2\u52a0\u8fc7 OI \u7684\u670b\u53cb\u3002\u76ee\u524d\uff0c\u8fd9\u4e2a\u9879\u76ee\u4e3b\u8981\u662f\u7531 OI Wiki Team \u6765\u7ef4\u62a4\u3002\uff08\u4e0b\u9762\u662f\u4e00\u5f20\u5408\u5f71\uff09 \u5f53\u7136\uff0c\u8fd9\u4e2a\u9879\u76ee\u53ea\u9760\u6211\u4eec\u7684\u529b\u91cf\u662f\u5f88\u96be\u505a\u5f97\u5341\u5168\u5341\u7f8e\u7684\uff0c\u6211\u4eec\u8bda\u631a\u5730\u9080\u8bf7\u4f60\u4e00\u8d77\u6765\u5b8c\u5584 OI Wiki \u3002 Q\uff1a\u542c\u8bf4\u8fc7 nocow \u5427\uff0c OI Wiki \u600e\u4e48\u4fdd\u8bc1\u6211\u4eec\u6dfb\u52a0\u7684\u5185\u5bb9\u4e0d\u4f1a\u50cf nocow \u90a3\u6837\u7a81\u7136\u95f4\u5c31\u4e0d\u89c1\u4e86\u5462\uff1f A\uff1a\u6211\u4eec\u628a\u5185\u5bb9\u6258\u7ba1\u5728 GitHub \u4e0a\u9762\uff0c\u5373\u4f7f\u6211\u4eec\u7684\u670d\u52a1\u5668\u7ffb\u8f66\u4e86\uff0c\u5185\u5bb9\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002\u53e6\u5916\uff0c\u6211\u4eec\u4e5f\u4f1a\u5b9a\u671f\u5907\u4efd\u5927\u5bb6\u7684\u5fc3\u8840\uff0c\u5373\u4f7f\u6709\u4e00\u5929 GitHub \u5012\u95ed\u4e86\uff08\uff1f\uff09\uff0c\u6211\u4eec\u7684\u5185\u5bb9\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002 Q\uff1a OI Wiki \u597d\u50cf\u73b0\u5728\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u662f\u7a7a\u7684\u554a\uff1f A\uff1a\u662f\u7684\uff0c\u76ee\u524d\u8fdb\u5ea6\u53ea\u5b8c\u6210\u4e86 57% \uff08\u91cd\u65b0\u7edf\u8ba1\u4e8e 2018.9.13\uff09\uff0c\u8fd8\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u4e3b\u8981\u6dfb\u52a0\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a OI Wiki \u5b8c\u5584\u8d77\u6765\u3002 Q\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u53bb\u5199 \u4e2d\u6587\u7ef4\u57fa \u5462\uff1f A\uff1a\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u771f\u6b63\u5e2e\u5230\u66f4\u591a\u7684\u9009\u624b\u6216\u8005\u5bf9\u8fd9\u4e9b\u5185\u5bb9\u611f\u5174\u8da3\u7684\u4eba\uff0c\u7531\u4e8e\u4f17\u6240\u5468\u77e5\u7684\u539f\u56e0\uff0c\u4e2d\u6587\u7ef4\u57fa\u4e0a\u7684\u5185\u5bb9\u5e76\u4e0d\u662f\u65e0\u95e8\u69db\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u7684\u3002 \u611f\u8c22\u4f60\u770b\u5230\u4e86\u6700\u540e\uff0c\u6211\u4eec\u73b0\u5728\u6025\u9700\u7684\uff0c\u5c31\u662f\u4f60\u7684\u5e2e\u52a9\u3002 OI Wiki Team 2018.8","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"intro/common-mistakes/","text":"\u672c\u9875\u9762\u4e3b\u8981\u5206\u4eab\u4e00\u4e0b\u5728\u7ade\u8d5b\u4e2d\u7ecf\u5e38 / \u5f88\u591a\u4eba\u4f1a\u51fa\u73b0\u7684\u9519\u8bef\u3002 \u7531\u4e8e\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4ea7\u751f\u7684\u9519\u8bef\u3002 1 << 1+1 : 1 \u5de6\u79fb\u4e86 2\uff0c\u5373\u8be5\u8868\u8fbe\u5f0f\u8fd4\u56de\u7684\u503c\u662f 4 \u3002 \u7531\u4e8e\u5b8f\u7684\u5c55\u5f00\uff0c\u4e14\u672a\u52a0\u62ec\u53f7\u5bfc\u81f4\u7684\u9519\u8bef\uff1a 1 2 #define pwr(x) x* x pwr ( 2 + 2 ) \u8be5\u5b8f\u8fd4\u56de\u7684\u503c\u5e76\u975e 4^2 = 16 4^2 = 16 \u800c\u662f 2+2\\times 2+2 = 8 2+2\\times 2+2 = 8 \u3002 \u6587\u4ef6\u64cd\u4f5c\u6709\u53ef\u80fd\u4f1a\u53d1\u751f\u7684\u9519\u8bef\u3002 \u5bf9\u62cd\u65f6\u672a\u6e05\u9664\u6587\u4ef6\u6307\u9488\u5373 fclose(fp) \u5c31\u53c8\u4ee4 fp = fopen() , \u8fd9\u4f1a\u4f7f\u5f97\u8fdb\u7a0b\u51fa\u73b0\u5927\u91cf\u7684\u6587\u4ef6\u91ce\u6307\u9488\u3002 freopen() \u4e2d\u7684\u6587\u4ef6\u540d\u672a\u52a0 .in / .out \u3002 int mian() \u3002 \u65e0\u5411\u56fe\u8fb9\u8868\u672a\u5f00 2 \u500d\u3002 \u591a\u7ec4\u6570\u636e\u672a\u6e05\u7a7a\u6570\u7ec4\u3002 \u8f93\u51fa double \u8981\u4f7f\u7528 %f \u800c\u975e %lf \u3002 \u53c2\u8003 \u94fe\u63a5 \u5206\u6cbb\u672a\u5224\u8fb9\u754c\u5bfc\u81f4\u6b7b\u9012\u5f52\u3002 \u8bfb\u5165\u4f18\u5316\u672a\u5224\u65ad\u8d1f\u6570\u3002 \u4e0d\u6b63\u786e\u5730\u4f7f\u7528\u3000 static \u4fee\u9970\u7b26\u3002 -1 >> 1 == 1 \u4e0d\u6b63\u786e\u5730\u4f7f\u7528\u5b8f\u3002 #define min(x,y) x<y?x:y \u3000\u5982\u679c\u8fd9\u91cc\u7684 x \u6216 y \u662f\u8868\u8fbe\u5f0f\uff0c\u4f1a\u88ab\u91cd\u590d\u8ba1\u7b97 \u4e00\u4e9b OJ \u4e0a\u9009\u62e9 c++ \u548c g++ \u63d0\u4ea4\u5f97\u5230\u7684\u7ed3\u679c\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837","title":"\u5e38\u89c1\u9519\u8bef"},{"location":"intro/common-tricks/","text":"","title":"\u5e38\u89c1\u6280\u5de7"},{"location":"intro/docker-deploy/","text":"\u53ef\u4ee5\u4f7f\u7528 Docker \u90e8\u7f72\u73af\u5883\u3002 \u4ee5\u4e0b\u6b65\u9aa4\u987b\u5728 root \u7528\u6237\u4e0b\u6216 docker \u7ec4\u7528\u6237\u4e0b\u6267\u884c \u62c9\u53d6 oi-wiki \u955c\u50cf \u00b6 1 2 3 4 5 6 7 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c\u5176\u4e2d\u4e00\u4e2a\u5373\u53ef # Docker Hub \u955c\u50cf\uff08\u5b98\u65b9\u955c\u50cf\u4ed3\u5e93\uff09 docker pull 24oi/oi-wiki # DaoCloud Hub \u955c\u50cf\uff08\u56fd\u5185\u955c\u50cf\u4ed3\u5e93\uff09 docker pull daocloud.io/sirius/oi-wiki # Tencent Hub \u955c\u50cf\uff08\u56fd\u5185\u955c\u50cf\u4ed3\u5e93\uff09 docker pull ccr.ccs.tencentyun.com/oi-wiki/oi-wiki \u8fd0\u884c\u5bb9\u5668 \u00b6 1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker run -d -it [ image ] \u8bbe\u7f6e [image] \uff08\u5fc5\u987b\uff09\u4ee5\u8bbe\u7f6e\u955c\u50cf\uff0c\u5982\u4ece Docker Hub \u62c9\u53d6\u7684\u5219\u4e3a 24oi/oi-wiki \uff0cDaoCloud Hub \u62c9\u53d6\u7684\u5219\u4e3a daocloud.io/sirius/oi-wiki \u8bbe\u7f6e --name [name] \uff08\u9ed8\u8ba4\u7a7a\uff0c\u82e5\u60f3\u67e5\u770b\u5bb9\u5668 id\uff0c\u5219\u8f93\u5165 docker ps \uff0c\u82e5\u8bbe\u7f6e\u8bf7\u66ff\u6362 [name] \u4e3a\u81ea\u5b9a\u4e49\u7684\u5bb9\u5668\u540d\u5b57\uff09\u4ee5\u8bbe\u7f6e\u5bb9\u5668\u540d\u5b57 \u8bbe\u7f6e -p [port]:8000 \uff08\u5fc5\u987b\uff09\uff08\u4e0d\u5199\u8be5\u8bed\u53e5\u5219\u9ed8\u8ba4\u4e3a\u4e0d\u66b4\u9732\u7aef\u53e3\uff0c\u82e5\u8bbe\u7f6e\u8bf7\u66ff\u6362 [port] \u4e3a\u4e3b\u673a\u7aef\u53e3\uff09\u4ee5\u6620\u5c04\u5bb9\u5668\u7aef\u53e3\u81f3\u4e3b\u673a\u7aef\u53e3\uff08\u53ef\u4ee5\u5728\u4e3b\u673a\u4f7f\u7528 http://127.0.0.1:[port] \u8bbf\u95ee OI Wiki \uff09 \u4f7f\u7528 \u00b6 \u57fa\u4e8e Ubuntu 16.04 \u90e8\u7f72 \u8fdb\u5165\u5bb9\u5668\uff1a 1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker exec -it [ name ] /bin/bash \u82e5\u5728\u4e0a\u8ff0\u8fd0\u884c\u5bb9\u5668\u4e2d\u53bb\u6389 -d \uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165\u5bb9\u5668 bash \uff0c\u9000\u51fa\u540e\u5bb9\u5668\u505c\u6b62\uff0c\u52a0\u4e0a -d \u5219\u540e\u53f0\u8fd0\u884c\uff0c\u8bf7\u624b\u52a8\u505c\u6b62\u3002\u4e0a\u8ff0\u8fdb\u5165\u5bb9\u5668\u9488\u5bf9\u52a0\u4e0a -d \u7684\u65b9\u6cd5\u8fd0\u884c\u3002 \u7279\u6b8a\u7528\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c # \u66f4\u65b0 git \u4ed3\u5e93 wiki-upd # \u4f7f\u7528\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u4e3b\u9898 wiki-theme # \u6784\u5efa mkdocs \uff0c\u4f1a\u5728 site \u6587\u4ef6\u5939\u4e0b\u5f97\u5230\u9759\u6001\u9875\u9762 wiki-bld # \u6784\u5efa mkdocs \u5e76\u6e32\u67d3 MathJax \uff0c\u4f1a\u5728 site \u6587\u4ef6\u5939\u4e0b\u5f97\u5230\u9759\u6001\u9875\u9762 wiki-bld-math # \u8fd0\u884c\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u8bbf\u95ee\u5bb9\u5668\u4e2d http://127.0.0.1:8000 \u6216\u8bbf\u95ee\u4e3b\u673a\u4e2d http://127.0.0.1:[port] \u53ef\u4ee5\u67e5\u770b\u6548\u679c wiki-svr \u9000\u51fa\u5bb9\u5668\uff1a 1 2 3 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c # \u9000\u51fa exit \u505c\u6b62\u5bb9\u5668 \u00b6 1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker stop [ name ] \u542f\u52a8\u5bb9\u5668 \u00b6 1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker start [ name ] \u91cd\u542f\u5bb9\u5668 \u00b6 1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker restart [ name ] \u5220\u9664\u5bb9\u5668 \u00b6 1 2 3 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c # \u5220\u9664\u524d\u8bf7\u5148\u505c\u6b62\u5bb9\u5668 docker rm [ name ] \u66f4\u65b0\u955c\u50cf \u00b6 \u91cd\u65b0\u518d pull \u4e00\u6b21\u5373\u53ef\uff0c\u901a\u5e38\u4e0d\u4f1a\u66f4\u65b0 \u5220\u9664\u955c\u50cf \u00b6 1 2 3 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c # \u5220\u9664\u524d\u8bf7\u5148\u5220\u9664\u4f7f\u7528 oi-wiki \u955c\u50cf\u6784\u5efa\u7684\u5bb9\u5668 docker rmi [ image ] \u7591\u95ee \u00b6 \u5982\u679c\u60a8\u6709\u7591\u95ee\uff0c\u6b22\u8fce\u63d0\u51fa issue \uff01","title":"Docker \u90e8\u7f72"},{"location":"intro/docker-deploy/#oi-wiki","text":"1 2 3 4 5 6 7 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c\u5176\u4e2d\u4e00\u4e2a\u5373\u53ef # Docker Hub \u955c\u50cf\uff08\u5b98\u65b9\u955c\u50cf\u4ed3\u5e93\uff09 docker pull 24oi/oi-wiki # DaoCloud Hub \u955c\u50cf\uff08\u56fd\u5185\u955c\u50cf\u4ed3\u5e93\uff09 docker pull daocloud.io/sirius/oi-wiki # Tencent Hub \u955c\u50cf\uff08\u56fd\u5185\u955c\u50cf\u4ed3\u5e93\uff09 docker pull ccr.ccs.tencentyun.com/oi-wiki/oi-wiki","title":"\u62c9\u53d6 oi-wiki \u955c\u50cf"},{"location":"intro/docker-deploy/#_1","text":"1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker run -d -it [ image ] \u8bbe\u7f6e [image] \uff08\u5fc5\u987b\uff09\u4ee5\u8bbe\u7f6e\u955c\u50cf\uff0c\u5982\u4ece Docker Hub \u62c9\u53d6\u7684\u5219\u4e3a 24oi/oi-wiki \uff0cDaoCloud Hub \u62c9\u53d6\u7684\u5219\u4e3a daocloud.io/sirius/oi-wiki \u8bbe\u7f6e --name [name] \uff08\u9ed8\u8ba4\u7a7a\uff0c\u82e5\u60f3\u67e5\u770b\u5bb9\u5668 id\uff0c\u5219\u8f93\u5165 docker ps \uff0c\u82e5\u8bbe\u7f6e\u8bf7\u66ff\u6362 [name] \u4e3a\u81ea\u5b9a\u4e49\u7684\u5bb9\u5668\u540d\u5b57\uff09\u4ee5\u8bbe\u7f6e\u5bb9\u5668\u540d\u5b57 \u8bbe\u7f6e -p [port]:8000 \uff08\u5fc5\u987b\uff09\uff08\u4e0d\u5199\u8be5\u8bed\u53e5\u5219\u9ed8\u8ba4\u4e3a\u4e0d\u66b4\u9732\u7aef\u53e3\uff0c\u82e5\u8bbe\u7f6e\u8bf7\u66ff\u6362 [port] \u4e3a\u4e3b\u673a\u7aef\u53e3\uff09\u4ee5\u6620\u5c04\u5bb9\u5668\u7aef\u53e3\u81f3\u4e3b\u673a\u7aef\u53e3\uff08\u53ef\u4ee5\u5728\u4e3b\u673a\u4f7f\u7528 http://127.0.0.1:[port] \u8bbf\u95ee OI Wiki \uff09","title":"\u8fd0\u884c\u5bb9\u5668"},{"location":"intro/docker-deploy/#_2","text":"\u57fa\u4e8e Ubuntu 16.04 \u90e8\u7f72 \u8fdb\u5165\u5bb9\u5668\uff1a 1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker exec -it [ name ] /bin/bash \u82e5\u5728\u4e0a\u8ff0\u8fd0\u884c\u5bb9\u5668\u4e2d\u53bb\u6389 -d \uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165\u5bb9\u5668 bash \uff0c\u9000\u51fa\u540e\u5bb9\u5668\u505c\u6b62\uff0c\u52a0\u4e0a -d \u5219\u540e\u53f0\u8fd0\u884c\uff0c\u8bf7\u624b\u52a8\u505c\u6b62\u3002\u4e0a\u8ff0\u8fdb\u5165\u5bb9\u5668\u9488\u5bf9\u52a0\u4e0a -d \u7684\u65b9\u6cd5\u8fd0\u884c\u3002 \u7279\u6b8a\u7528\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c # \u66f4\u65b0 git \u4ed3\u5e93 wiki-upd # \u4f7f\u7528\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u4e3b\u9898 wiki-theme # \u6784\u5efa mkdocs \uff0c\u4f1a\u5728 site \u6587\u4ef6\u5939\u4e0b\u5f97\u5230\u9759\u6001\u9875\u9762 wiki-bld # \u6784\u5efa mkdocs \u5e76\u6e32\u67d3 MathJax \uff0c\u4f1a\u5728 site \u6587\u4ef6\u5939\u4e0b\u5f97\u5230\u9759\u6001\u9875\u9762 wiki-bld-math # \u8fd0\u884c\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u8bbf\u95ee\u5bb9\u5668\u4e2d http://127.0.0.1:8000 \u6216\u8bbf\u95ee\u4e3b\u673a\u4e2d http://127.0.0.1:[port] \u53ef\u4ee5\u67e5\u770b\u6548\u679c wiki-svr \u9000\u51fa\u5bb9\u5668\uff1a 1 2 3 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c # \u9000\u51fa exit","title":"\u4f7f\u7528"},{"location":"intro/docker-deploy/#_3","text":"1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker stop [ name ]","title":"\u505c\u6b62\u5bb9\u5668"},{"location":"intro/docker-deploy/#_4","text":"1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker start [ name ]","title":"\u542f\u52a8\u5bb9\u5668"},{"location":"intro/docker-deploy/#_5","text":"1 2 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c docker restart [ name ]","title":"\u91cd\u542f\u5bb9\u5668"},{"location":"intro/docker-deploy/#_6","text":"1 2 3 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c # \u5220\u9664\u524d\u8bf7\u5148\u505c\u6b62\u5bb9\u5668 docker rm [ name ]","title":"\u5220\u9664\u5bb9\u5668"},{"location":"intro/docker-deploy/#_7","text":"\u91cd\u65b0\u518d pull \u4e00\u6b21\u5373\u53ef\uff0c\u901a\u5e38\u4e0d\u4f1a\u66f4\u65b0","title":"\u66f4\u65b0\u955c\u50cf"},{"location":"intro/docker-deploy/#_8","text":"1 2 3 # \u4ee5\u4e0b\u547d\u4ee4\u5728\u4e3b\u673a\u4e2d\u8fd0\u884c # \u5220\u9664\u524d\u8bf7\u5148\u5220\u9664\u4f7f\u7528 oi-wiki \u955c\u50cf\u6784\u5efa\u7684\u5bb9\u5668 docker rmi [ image ]","title":"\u5220\u9664\u955c\u50cf"},{"location":"intro/docker-deploy/#_9","text":"\u5982\u679c\u60a8\u6709\u7591\u95ee\uff0c\u6b22\u8fce\u63d0\u51fa issue \uff01","title":"\u7591\u95ee"},{"location":"intro/editors/","text":"Vim -- \u7f16\u8f91\u5668\u4e4b\u795e \u00b6 \u5386\u53f2\u4e0e\u4e89\u7aef \u00b6 Vim \u7684\u524d\u8eab\u662f vi\uff0c\u4e00\u4e2a\u7b80\u6d01\u4f46\u662f\u7565\u6709\u4e0d\u8db3\u7684\u7f16\u8f91\u5668\uff0c\u4f46\u662f\u4ece vi \u5f00\u59cb\uff0c\u7f16\u8f91\u5668\u7684\u6a21\u5f0f\u533a\u5206\u548c\u552f\u5feb\u4e0d\u7834\u7684\u601d\u60f3\u5c31\u5df2\u7ecf\u4f53\u73b0\u7684\u5f88\u5230\u4f4d\u4e86\u3002Vim \u5373\u662f vi improved\uff0c\u662f\u5728 vi \u539f\u672c\u6240\u6709\u7684\u65b9\u5f0f\u4e0a\u8fdb\u884c\u7684\u8fdb\u4e00\u6b65\u63d0\u5347\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u6539\u53d8 vi \u7684\u5176\u4ed6\u672c\u8d28\uff0c\u53ea\u662f\u589e\u52a0\u4e86\u66f4\u591a\u9002\u5e94\u5982\u4eca\u9700\u8981\u7684\u4e00\u4e9b\u529f\u80fd\u3002 vi \u4e8e 1976 \u5e74\u8bde\u751f\uff0c\u4e0e Emacs \u4e0d\u5206\u5148\u540e\uff0c\u4e24\u8005\u56e0\u5176\u5feb\u6377\u7684\u7f16\u8f91\u88ab\u5949\u4e3a\u795e\u5668\uff0c\u751a\u81f3\u4f7f\u7528\u8005\u4eec\u8fd8\u6709\u7206\u53d1\u8fc7 \u201c\u5723\u6218\u201d\uff0c\u5373\u662f \u795e\u7684\u7f16\u8f91\u5668 Emacs VS \u7f16\u8f91\u5668\u4e4b\u795e Vim \uff0c\u4f46\u662f\u5f53\u7136\u5206\u4e0d\u51fa\u7ed3\u679c\uff0c\u56e0\u4e3a\u5404\u6709\u4f18\u52a3\u3002\u4f46\u5b83\u4eec\u5171\u6709\u7684\u7279\u70b9\u5c31\u662f\u9ad8\u5ea6\u7684\u6269\u5c55\u6027\u4e0e\u9ad8\u5ea6\u7684\u53ef\u5b9a\u5236\u6027\u4ee5\u53ca\u5feb\u6377\u65b9\u4fbf\u7684\u4f7f\u7528\u3002 Vim \u7684\u6a21\u5f0f\u533a\u5206\u662f\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u8bbe\u5b9a\uff0c\u666e\u901a\u6a21\u5f0f\u4e0e\u63d2\u5165\u6a21\u5f0f\u662f\u6700\u4e3b\u8981\u5e38\u7528\u7684\u6a21\u5f0f\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u7684\u6bcf\u4e2a\u952e\u90fd\u662f\u547d\u4ee4\uff0c\u8fd9\u4fbf\u662f Vim \u4e0d\u540c\u4e8e Emacs \u7684\u5730\u65b9\uff0c\u82e5\u662f\u4e60\u60ef\u4e86 Vim \u7684\u6a21\u5f0f\u4e4b\u95f4\u7684\u5207\u6362\uff0c\u5927\u90e8\u5206\u90fd\u662f\u5355\u4e2a\u952e\u7684\u547d\u4ee4\u5fc5\u7136\u6bd4 Emacs \u7684\u65e0\u9650 Ctrl \u4f1a\u66f4\u9ad8\u6548\uff0c\u867d\u7136 Vim \u7684\u5c0f\u5bb9\u91cf\u6ce8\u5b9a\u6bd4\u4e0d\u4e86 Emacs \u201c\u64cd\u4f5c\u7cfb\u7edf\u201d \u8fd9\u4e2a\u4e1c\u897f\u90a3\u4e48\u4e07\u80fd\uff0c\u4f46\u662f\u8bba\u5feb\u800c\u8a00\uff0cVim \u662f\u65e0\u53ef\u4e89\u8bae\u7684\u9876\u5c16\u7f16\u8f91\u5668\u3002 Vim \u6709\u4e30\u5bcc\u7684\u63d2\u4ef6\u6269\u5c55\uff0c\u8fd9\u70b9\u663e\u7136\u662f\u6bd4\u914d\u7f6e\u66f4\u8ff7\u4eba\u7684\u5b58\u5728\u3002\u6709\u8fd9\u4e9b\u6269\u5c55\u6027\u5b58\u5728\uff0cVim \u6210\u4e3a\u4e00\u4e2a IDE \u4e5f\u4e0d\u4f1a\u662f\u4e0d\u53ef\u80fd\u7684\u4e8b\u60c5\u3002 \u4f46\u662f\uff0cVim \u7684\u521d\u59cb\u5b66\u4e60\u6ce8\u5b9a\u662f\u8270\u96be\u7684\uff0c\u56e0\u4e3a\u5176\u4e0e\u591a\u6570\u4e3b\u6d41\u64cd\u4f5c\u4e0d\u540c\u7684\u65b9\u5f0f\u4ee4\u7a0d\u61d2\u7684\u65b0\u624b\u671b\u800c\u5374\u6b65\uff0c\u8fd9\u9700\u8981\u65f6\u95f4\u6765\u9002\u5e94\u4f46\u5f53\u5ea6\u8fc7\u6700\u5f00\u59cb\u7684\u4e0d\u9002\u5e94\u671f\u4e4b\u540e\uff0cVim \u5c31\u518d\u65e0\u96be\u5ea6\uff0c\u4f60\u4f1a\u6162\u6162\u4e0a\u763e\uff0c\u4e0d\u65ad\u4f18\u5316\u4f60\u7684\u914d\u7f6e\uff0c\u5bfb\u627e\u65b0\u7684\u66f4\u597d\u7528\u7684\u63d2\u4ef6\u3002\u5f00\u59cb\u7684\u8fc7\u7a0b\u5c31\u50cf\u662f\u94f8\u5251\uff0c\u4e4b\u540e\u7684\u8fc7\u7a0b\u5c31\u50cf\u662f\u4e0e\u5251\u7684\u66f4\u597d\u7684\u78e8\u5408\uff0c\u7136\u540e\u5728\u5251\u4e2d\u9010\u6e10\u6ce8\u5165\u4f60\u7684\u7075\u9b42\uff0c\u8fd9\u6837\u5b83\u5c31\u6210\u4e3a\u4e86\u4f60\u6700\u597d\u7684\u5229\u5668\uff0c\u4ee4\u4f60\u65e0\u6cd5\u5272\u820d\u3002\u4e43\u81f3\u4f60\u4f1a\u81ea\u5df1\u5199\u9002\u5408\u81ea\u5df1\u7684\u63d2\u4ef6\uff0c\u5c31\u50cf\u662f\u81ea\u521b\u5251\u6cd5\uff0c\u800c\u4e0d\u50cf\u662f\u4ece\u522b\u4eba\u90a3\u91cc\u501f\u6765\u5251\u6cd5\uff0c\u6742\u4e03\u6742\u516b\u878d\u4e3a\u4e00\u7089\u3002 \u6709\u4eba\u8bf4\u4e86\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a Vim \u662f\u4e00\u6b3e\u975e\u5e38\u4f18\u79c0\u7684\u6587\u672c\u7f16\u8f91\u5668\uff0c\u4f46\u7531\u4e8e\u5176\u9661\u5ced\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u5f88\u591a\u4eba\u8fd8\u6ca1\u5f00\u59cb\u5b66\u5c31\u653e\u5f03\u4e86\uff0c\u6240\u4ee5\u4ed6\u4eec\u65e0\u6cd5\u9886\u609f Vim \u552f\u5feb\u4e0d\u7834\u7684\u8bbe\u8ba1\u601d\u60f3\u548c\u7cbe\u5de7\u7684\u4f7f\u7528\u4f53\u9a8c\u3002 \u9644\u4e00\u5f20\u56fe\uff0c\u8bba\u5404\u5927\u7f16\u8f91\u5668\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u7eb5\u5750\u6807\u4ee3\u8868\u638c\u63e1\u77e5\u8bc6\u91cf\u53ca\u96be\u5ea6\uff0c\u6a2a\u5750\u6807\u4ee3\u8868\u4f7f\u7528\u7684\u719f\u7ec3\u7a0b\u5ea6\u4e0e\u5b8c\u6210\u4efb\u52a1\u7684\u6548\u7387\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cVim \u7684\u66f2\u7ebf\u5c82\u6b62\u9661\u5ced\uff0c\u90fd\u5782\u76f4\u4e86\u2026\u2026 \u4f46\u662f\u5f00\u59cb\u8fc7\u53bb\u540e\uff0c\u662f\u5e73\u7a33\u7684\u63d0\u5347\uff0c\u53ea\u8981\u5ea6\u8fc7\u5f00\u59cb\u7684\u9636\u6bb5\uff0cVim \u7684\u5b66\u4e60\u5c06\u518d\u65e0\u963b\u788d\uff0c\u4e00\u8def\u76f4\u4e0a\u6709\u6ca1\u6709\u3002 \u5b89\u88c5 \u00b6 \u4e00\u822c\u7684\u8bdd\uff0cLinux \u7cfb\u7edf\u90fd\u662f\u4f1a\u81ea\u5e26 Vim \u7684\uff0c\u6253\u5f00\u7ec8\u7aef\u8f93\u5165 vim \u5373\u53ef\u542f\u7528\u3002 Vim \u4f9d\u9644\u4e8e\u7ec8\u7aef\uff0c\u6240\u4ee5\u8c03\u6574\u7ec8\u7aef\u8bbe\u7f6e\u4e5f\u53ef\u4ee5\u8fbe\u5230\u7f8e\u5316\u6548\u679c\u3002 \u4f46\u662f\u81ea\u5e26\u7684 Vim \u5f88\u5bb9\u6613\u6709\u529f\u80fd\u6b8b\u7f3a\uff0c\u6bd4\u5982\u6709\u7684\u5c31\u4e0d\u80fd\u4e0e\u7cfb\u7edf\u526a\u5207\u677f\u4ea4\u4e92 (\u5c06\u4f1a\u5728\u8fdb\u9636\u7bc7\u8bb2\u89e3)\uff0c\u5404\u79cd\u672a\u5f00\u542f\u652f\u6301\u3002\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u624b\u52a8\u5b89\u88c5\uff0c\u65b9\u6cd5\u6709\u4e8c\u3002\u7b2c\u4e00\u6b65\u5148\u662f\u5378\u8f7d Vim\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a 1 sudo apt-get remove vim \u7136\u540e\u5b89\u88c5\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u4e00\u662f\u4f7f\u7528\u547d\u4ee4\u5b89\u88c5\uff0c\u4f46\u6211\u65e0\u6cd5\u786e\u5b9a\u8f6f\u4ef6\u6e90\u7684\u7248\u672c\u6709\u6ca1\u6709\u95ee\u9898 = =\u3002 1 sudo apt-get install vim \u505a\u6cd5\u4e8c\uff0c\u5148\u5230 Releases - vim/vim \u4e0b\u8f7d\u6e90\u7801\u5305\uff0c\u7136\u540e\u89e3\u538b\uff0c\u5e76\u8fdb\u5165\u89e3\u538b\u540e\u7684\u6587\u4ef6\u5939\uff0c\u5e76\u6253\u5f00\u7ec8\u7aef\uff0ccd \u81f3\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u5e76\u4f9d\u6b21\u8f93\u5165\u5982\u4e0b\u547d\u4ee4\uff1a 1 2 3 ./configure make sudo make install make \u7684\u8fc7\u7a0b\u53ef\u80fd\u7a0d\u4e45\uff0c\u6de1\u5b9a\u70b9\u7b49\u3002 \u6700\u540e\u5728\u7ec8\u7aef\u8f93\u5165 1 vim \u5c31\u8df3\u51fa\u4e86\u90a3\u4e2a\u5e2e\u5e2e\u4e4c\u5e72\u8fbe\u7684\u53ef\u601c\u513f\u7ae5\u5565\u7684\uff0c\u6309 a \u6216 i \u952e\u5f00\u59cb\u7f16\u8f91\u65b0\u6587\u4ef6\u5427\u3002 \u6216\u8005\u8981\u6253\u5f00\u67d0\u4e2a\u6587\u4ef6\u7684\u8bdd\u5c31\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d 1 vim \u6587\u4ef6\u8def\u5f84 \u53ef\u4ee5\u76f4\u63a5\u7f16\u8f91\u6587\u4ef6\u3002 \u7f16\u8bd1 \u00b6 \u7f16\u8bd1\u7684\u8bdd\uff0c\u5148\u8981\u5b89\u88c5 g++\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a 1 sudo apt-get install g++ \u7136\u540e cd \u81f3 cpp \u6587\u4ef6\u6307\u5b9a\u8def\u5f84\u6267\u884c\u5982\u4e0b\u547d\u4ee4 1 2 g++ filename.cpp -o filename ./filename \u7b2c\u4e00\u4e2a\u547d\u4ee4\u662f\u7f16\u8bd1\uff0c\u7b2c\u4e8c\u4e2a\u5219\u662f\u8fd0\u884c\u3002 \u4e00\u952e\u7f16\u8bd1\u8fd0\u884c\u7684\u914d\u7f6e\u5728\u914d\u7f6e\u7bc7\u7ed9\u51fa\u3002 \u57fa\u7840\u7bc7 \u00b6 \u5206\u6a21\u5f0f\u6765\u5427\u3002 \u63d2\u5165\u6a21\u5f0f (insert) \u00b6 \u63d2\u5165\u6a21\u5f0f\u7684\u77e5\u8bc6\u70b9\u5176\u5b9e\u6ca1\u6709\u592a\u591a\uff0c\u8f93\u5165\u624d\u662f\u4e3b\u804c\u662f\u4f10\u3002 \u9996\u5148\uff0c\u4ece\u666e\u901a\u6a21\u5f0f\u5982\u4f55\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u5462\uff1f\u6709\u6570\u4e2a\u547d\u4ee4\uff1a i \u4e0e a \u4e0e A \u4e0e o \u3002\u524d\u4e24\u4e2a\u5dee\u522b\u4e0d\u5927\uff0c i \u662f\u5728\u5149\u6807\u5f53\u524d\u4f4d\u7f6e\u8fdb\u884c\u5199\u4ee3\u7801\uff0c a \u662f\u5f80\u540e\u632a\u4e00\u4e2a\u5b57\u7b26\u5199\u4ee3\u7801\u3002 A \u662f\u79fb\u52a8\u5230\u5f53\u524d\u884c\u5c3e\u8fdb\u884c\u63d2\u5165\uff0c o \u662f\u5728\u884c\u5c3e\u6dfb\u52a0\u6362\u884c\u7b26\u5e76\u5728\u4e0b\u4e00\u884c\u63d2\u5165\u3002 \u800c\u5982\u4f55\u8fd4\u56de\u666e\u901a\u6a21\u5f0f\uff1f\u5f53\u7136\u662f Esc \u5566\u3002\u4f46\u662f\uff0cVim \u7684\u63d2\u5165\u4e0e\u666e\u901a\u6a21\u5f0f\u5207\u6362\u5f02\u5e38\u9891\u7e41\uff0c\u800c Esc \u53c8\u592a\u8fdc\u4e86\uff0c\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1fVim \u8fd8\u63d0\u4f9b\u4e86 Ctrl + [ \u7684\u5feb\u6377\u952e\u6765\u8fd4\u56de\u666e\u901a\u6a21\u5f0f\uff0c\u662f\u5426\u8fd1\u591a\u4e86\u5462\uff1f \u867d\u8bf4\u80fd\u591f\u719f\u7ec3\u4e86\u540e\uff0c\u5207\u6362\u6a21\u5f0f\u4e0d\u518d\u662f\u95ee\u9898\uff0c\u4f46\u662f\u5176\u5b9e\u6709\u7684\u65f6\u5019\u6211\u4eec\u53ea\u662f\u9700\u8981\u8fdb\u5165\u666e\u901a\u6a21\u5f0f\u4e0b\u6309\u4e00\u6b21\u5c0f\u547d\u4ee4\uff0c\u6765\u56de\u5207\u6362\u53c8\u663e\u5f97\u6d6a\u8d39\u4e86\u4e00\u70b9\u70b9\u65f6\u95f4\u3002\u800c Vim \u53c8\u63d0\u4f9b\u4e86\u63d2\u5165 - \u666e\u901a\u6a21\u5f0f\u6765\u907f\u514d\u8fd9\u4e00\u5c34\u5c2c\u7684\u95ee\u9898\u3002\u5728\u63d2\u5165\u6a21\u5f0f\u4e0b\uff0c\u53ea\u9700\u8981\u6309 Ctrl + o \u5373\u53ef\u8fdb\u5165\u6b64\u6a21\u5f0f\uff0c\u5f53\u8fdb\u884c\u5b8c\u4e00\u6b21\u64cd\u4f5c\u540e\u53c8\u4f1a\u81ea\u52a8\u56de\u5230\u63d2\u5165\u6a21\u5f0f\u3002\u8fd9\u6837\u5c82\u4e0d\u662f\u66f4\u7701\u65f6\u95f4\uff1f \u666e\u901a\u6a21\u5f0f (normal) \u00b6 Vim \u7684\u547d\u4ee4\u5927\u90e8\u5206\u90fd\u662f\u5728\u666e\u901a\u6a21\u5f0f\u4e0b\u5b8c\u6210\u7684\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u53ef\u4e0d\u80fd\u4e71\u6309\uff0c\u53ef\u4ee5\u8bf4\u6bcf\u4e2a\u952e\u90fd\u662f\u547d\u4ee4\u3002 1 2 3 4 \u9996\u5148\u662f hjkl \u56db\u4e2a\u65b9\u5411\u952e\u3002 k ^ h < > l v j \u5176\u5b9e\u5927\u591a\u6570\u7f16\u8f91\u5668\u90fd\u662f\u7528\u65b9\u5411\u952e\u505a\u51fa\u79fb\u52a8\u547d\u4ee4\uff0cVim \u4e5f\u4e0d\u4f8b\u5916\uff0c\u4f46 hjkl \u7ed9\u4e86\u6211\u4eec\u66f4\u597d\u7684\u9009\u62e9\uff0c\u53ea\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u7684\u9002\u5e94\uff0c\u4f60\u4fbf\u80fd\u5feb\u901f\u5730\u64cd\u4f5c\u5b83\u4eec\u8fdb\u884c\u79fb\u52a8\uff0c\u800c\u4e14\u5b83\u4eec\u53ef\u6ca1\u6709\u65b9\u5411\u952e\u90a3\u4e48\u8fdc\uff0c\u8282\u7701\u65f6\u95f4\u662f\u4e00\u6d41\u7684\u3002 \u666e\u901a\u6a21\u5f0f\u4e0b\u6700\u91cd\u8981\u7684\u547d\u4ee4\uff0c\u6ca1\u6709\u4e4b\u4e00\uff0c\u90a3\u5c31\u662f u \u3002\u64a4\u9500\u547d\u4ee4\uff0c\u4f5c\u7528\u662f\u64a4\u9500\u4e0a\u4e00\u6b21\u5bf9\u6587\u672c\u7684\u66f4\u6539\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u7684 x \uff0c d \uff0c p \u547d\u4ee4\u90fd\u4f1a\u88ab\u64a4\u9500\uff0c\u540c\u65f6\u8fdb\u5165\u4e00\u6b21\u63d2\u5165\u6a21\u5f0f\u6240\u7f16\u8f91\u7684\u6587\u672c\u4e5f\u7b97\u4e00\u6b21\u66f4\u6539\uff0c u \u547d\u4ee4\u4f1a\u5220\u53bb\u4ece\u8fdb\u5165\u5230\u9000\u51fa\u63d2\u5165\u6a21\u5f0f\u6240\u8f93\u5165\u7684\u6240\u6709\u4e1c\u897f\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\u662f Ctrl + r \u547d\u4ee4\uff0c\u4ed6\u7684\u4f5c\u7528\u662f\u64a4\u9500\u4e0a\u6b21\u7684\u64a4\u9500\u547d\u4ee4\uff0c\u76f8\u5f53\u4e8e\u5927\u90e8\u5206 windows \u4e0b\u7a0b\u5e8f\u4e2d\u7684 Ctrl + y \u3002 \u7136\u540e\u7684\u8bdd, \u5c31\u662f\u666e\u901a\u6a21\u5f0f\u4e0b\u5e38\u7528\u7684\u547d\u4ee4\u3002\u7531\u4e8e\u5bf9\u884c\u547d\u4ee4\u7684\u4f7f\u7528\u5f88\u9891\u7e41\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u7684\u5355\u952e\u547d\u4ee4\u90fd\u53ef\u4ee5\u901a\u8fc7\u6309\u4e24\u6b21\u6765\u5b9e\u73b0\u5bf9\u884c\u64cd\u4f5c\u3002\u5e38\u7528\u547d\u4ee4\u662f x \uff0c\u7528\u4e8e\u5220\u9664\u5149\u6807\u540e\u7684\u4e00\u4e2a\u5b57\u7b26\u3002\u7136\u540e\u662f d \u547d\u4ee4\uff0c\u4e5f\u662f\u5220\u9664\uff0c\u4f46\u662f\u79cd\u7c7b\u66f4\u591a\uff0c\u8fd9\u91cc\u4e0d\u505a\u8d58\u8ff0\u3002\u540c\u65f6 d \u547d\u4ee4\u50cf\u4e4b\u524d\u8bf4\u7684\uff0c\u6309\u4e24\u6b21\u5373\u53ef\u5220\u9664\u6574\u884c\uff0c\u5373 dd \u3002 \u7136\u540e\u662f y \u547d\u4ee4\uff0c\u53ef\u4ee5\u590d\u5236\u88ab\u9009\u4e2d\u7684\u533a\u57df\uff0c\u8fd9\u6d89\u53ca\u5230\u53ef\u89c6\u6a21\u5f0f\uff0c\u5373\u6309 v \u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\uff0c\u591a\u7528\u4e8e\u9009\u4e2d\u533a\u57df\u3002\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\u540e\u79fb\u52a8\u5149\u6807\u6765\u786e\u5b9a\u9009\u53d6\u8303\u56f4\u662f\u53ef\u4ee5\u7684\uff0c\u6b64\u65f6\u6309 o \u952e\u5373\u53ef\u5207\u6362\u6d3b\u52a8\u7aef\uff0c\u7701\u53bb\u4e86\u5982\u679c\u8dd1\u53cd\u65b9\u5411\u7684\u9ebb\u70e6\u3002\u5f53\u7136\uff0c\u6211\u76f8\u4fe1\u5f88\u591a\u4eba\u8fd8\u662f\u4e60\u60ef\u7528\u9f20\u6807\u64cd\u4f5c\u8fd9\u4e00\u8fc7\u7a0b\u7684\uff0c\u5305\u62ec\u79fb\u52a8\u5149\u6807\u3002Vim \u5f88\u6e29\u99a8\u7684\u63d0\u4f9b\u4e86\u8fd9\u4e00\u914d\u7f6e\uff1a set mouse=a \u3002\u4f60\u53ef\u4ee5\u5c06\u5b83\u5199\u5165\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u53bb\u3002\u6709\u4e86\u5b83\u4e4b\u540e\uff0c\u4f60\u5c06\u80fd\u591f\u7528\u9f20\u6807\u9009\u4e2d\u533a\u57df\u5e76\u8fdb\u884c\u590d\u5236\u64cd\u4f5c\u3002\u5f53\u7136\uff0c\u9009\u4e2d\u540e\u6309 x \u6216 d \u4ea6\u53ef\u5220\u9664\u3002\u540c\u65f6\uff0c y \u4e5f\u7b26\u5408 d \u7684\u6027\u8d28\uff0c yy \u5c06\u53ef\u4ee5\u590d\u5236\u5f53\u524d\u884c\u3002 \u7136\u540e\u5c31\u662f\u66f4\u5feb\u7684\u8df3\u8dc3\u4e86\u3002\u5982\u679c\u8bf4\u53ea\u662f\u4f7f\u7528 hjkl \u7684\u8bdd\uff0c\u5149\u6807\u7684\u79fb\u52a8\u663e\u7136\u4e0d\u591f\u5feb\uff0c\u800c\u9f20\u6807\u5374\u53c8\u8981\u4f38\u624b\u53bb\u62ff\u3002Vim \u63d0\u4f9b\u4e86\u666e\u901a\u6a21\u5f0f\u4e0b\u66f4\u5feb\u7684\u8df3\u8dc3\u65b9\u6cd5\uff0c w \u53ef\u4ee5\u8df3\u5230\u4e0b\u4e2a\u5355\u8bcd\u7684\u5f00\u5934\uff0c\u800c e \u53ef\u4ee5\u8df3\u5230\u5f53\u524d\u5355\u8bcd\u7ed3\u5c3e\uff0c 0 \u53ef\u4ee5\u8df3\u81f3\u884c\u9996\uff0c $ \u53ef\u4ee5\u8df3\u81f3\u884c\u5c3e\uff0c\u5c82\u4e0d\u662f\u5feb\u591a\u4e86\uff1f\u800c\u4e14 w \uff0c e \uff0c 0 \uff0c $ \u8fd8\u53ef\u4ee5\u7528\u4e8e\u8bb8\u591a\u547d\u4ee4\u4e2d de \uff0c dw \uff0c d0 \uff0c d& \u5206\u522b\u5bf9\u5e94\u5220\u81f3\u5355\u8bcd\u5c3e\uff0c\u5220\u81f3\u4e0b\u4e2a\u5355\u8bcd\u5934\uff0c\u5220\u81f3\u884c\u9996\uff0c\u5220\u81f3\u884c\u5c3e\u3002\u4ee5\u53ca y \u547d\u4ee4\u4ea6\u53ef\u540c\u7406\u3002 \u7136\u540e\u662f Vim \u7684\u53ef\u91cd\u590d\u3002\u5728\u8f93\u5165\u67d0\u4e2a\u547d\u4ee4\u524d\uff0c\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\u7684\u8bdd\uff0c\u5c31\u4f1a\u91cd\u590d\u90a3\u4e48\u591a\u6b21\u3002\u5982\u5728\u666e\u901a\u6a21\u5f0f\u4e0b\uff1a 1 2 3 asdasdasdasdasd asdadasdddd asdasdasd \u5149\u6807\u6b63\u4f4d\u4e8e\u7b2c\u4e00\u884c\uff0c\u8be5\u5982\u4f55\u5220\u9664\u8fd9\u4e09\u884c\u5462\uff1f\u666e\u901a\u6a21\u5f0f\u4e0b\u6309 3 dd \u5373\u53ef\u3002\u5176\u5b9e\u8fd8\u6709 . \u547d\u4ee4\u4e5f\u662f\u53ef\u4ee5\u505a\u5230\u4e00\u4e9b\u91cd\u590d\u7684\uff0c\u8fd9\u4f1a\u5728\u6548\u7387\u7bc7\u4e2d\u63d0\u5230\u3002 \u7136\u540e\u662f\u5168\u6587\u7684\u8df3\u8dc3\uff0c\u6309 gg \u53ef\u8df3\u81f3\u4ee3\u7801\u7684\u5f00\u5934\uff0c\u6309 G \u53ef\u8df3\u81f3\u4ee3\u7801\u6700\u540e\u4e00\u884c\uff0c\u5148\u6309\u6570\u5b57\u518d\u6309 G \u53ef\u8df3\u81f3\u6307\u5b9a\u884c\u3002 \u90a3\u4e48\u5728\u6587\u4e2d\u8fd8\u6709\u6781\u4e3a\u65b9\u4fbf\u7684\u67e5\u627e\u529f\u80fd\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u53ea\u9700\u6309 / \u4e0b\u65b9\u5373\u4f1a\u51fa\u73b0\u67e5\u627e\u6846\u6846\uff0c\u8f93\u5165\u9700\u8981\u67e5\u627e\u7684\u5b57\u7b26\u6309\u56de\u8f66\u5c31\u597d\u5566\uff0c\u5982\u679c\u6709\u591a\u4e2a\u67e5\u627e\u7ed3\u679c\uff0c\u53ea\u9700\u6309 n \u5373\u53ef\u8df3\u81f3\u4e0b\u4e00\u4e2a\u67e5\u627e\u5904\uff0c\u6309 N \u5373\u53ef\u8df3\u81f3\u4e0a\u4e00\u4e2a\u3002 \u5e38\u7528\u547d\u4ee4\u5927\u6982\u5c31\u8fd9\u4e9b\u4e86\u2026\u2026 \u547d\u4ee4\u884c\u6a21\u5f0f \u00b6 \u5176\u5b9e\u8fd9\u5e76\u4e0d\u80fd\u79f0\u4f5c\u662f\u4e00\u4e2a\u6a21\u5f0f = =\u3002 \u666e\u901a\u6a21\u5f0f\u4e0b\u53ea\u9700\u8981\u6309 : \u4e0b\u65b9\u5c31\u4f1a\u8e66\u51fa\u547d\u4ee4\u6846\u6846\uff0c\u8f93\u5165\u76f8\u5173\u547d\u4ee4\u5373\u53ef\u3002\u5982 Vim \u5728\u7ebf\u5e2e\u52a9\u6587\u6863\uff0c\u8f93\u5165 :help \u5373\u53ef\uff0c\u5982\u679c\u770b\u4e0d\u61c2\u82f1\u6587\u2026\u2026 \u8bf7\u4e0b\u8f7d Vim \u7528\u6237\u624b\u518c\u4e2d\u6587\uff0c\u6216\u8005\u79fb\u6b65\u63d2\u4ef6\u7bc7\u3002 \u6b64\u6a21\u5f0f\u4e0b\u6709\u4e00\u4e9b\u5f88\u6709\u7528\u7684\u547d\u4ee4 :q \u9000\u51fa\uff0c :w \u4fdd\u5b58\uff0c :wq \u4fdd\u5b58\u5e76\u9000\u51fa\uff0c :q! \u4e0d\u4fdd\u5b58\u5e76\u9000\u51fa\uff0c :e filename \u6253\u5f00\u5f53\u524d\u76ee\u5f55\u4e0b\u6307\u5b9a\u6587\u4ef6\uff0c\u8fd9\u4e9b\u662f\u6bd4\u8f83\u57fa\u7840\u7684\u3002 \u7136\u540e\u662f\u5f88\u5f3a\u5927\u7684\u547d\u4ee4 :x1,x2 s/A \u4e32 / B \u4e32 / \u4f5c\u7528\u662f\u628a\u7b2c x1 \u884c\u81f3 x2 \u884c\u4e2d\u7684\u6240\u6709 A \u4e32\u66ff\u6362\u6210 B \u4e32\u3002\u60f3\u8c61\u4e00\u4e0b\u9898\u5199\u5b8c\u4e86\uff0c\u4f46\u662f\u53d1\u73b0\u6ca1\u5f00 long long \u7684\u65f6\u5019\uff0c\u5b8c\u5168\u4e0d\u7edd\u671b\u6709\u6ca1\u6709\uff0c\u4e00\u4e2a\u5c0f\u547d\u4ee4\uff0c\u5999\u4e0d\u53ef\u8a00\u3002\u77ac\u95f4\u6240\u6709 int \u53d8 long long \u3002 \u4ee5\u4e0a\u90fd\u662f Vim \u5185\u90e8\u7684\u547d\u4ee4\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5982\u679c\u547d\u4ee4\u5f62\u5f0f\u662f :! \u547d\u4ee4 \u90a3\u4e48\u5c31\u5c06\u5728\u5916\u90e8\u6267\u884c\u547d\u4ee4\uff0c\u5373\u662f\u4ee5 bash \u7ec8\u7aef\u6267\u884c\u547d\u4ee4\u3002\u65e2\u7136\u90fd\u662f\u5916\u90e8 bash \u4e86\u6211\u5c31\u4e0d\u591a\u505a\u4ecb\u7ecd\u4e86\uff0c\u90a3\u5757\u5730\u4e0d\u5f52\u6211\u7ba1\u2026\u2026 \u53ef\u89c6\u6a21\u5f0f \u00b6 \u53ef\u89c6\u6a21\u5f0f\u7684\u4f5c\u7528\u603b\u7ed3\u8d77\u6765\u5927\u6982\u5c31\u662f\u9009\u4e2d\u9ad8\u4eae\uff0c\u4f46\u662f\u5757\u72b6\u7684\u53ef\u89c6\u6a21\u5f0f\u53ef\u4ee5\u5e72\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u4e0d\u8fc7\u592a\u9ebb\u70e6\u4e86\uff0c\u5bf9\u4e8e\u65b0\u4eba\u6765\u8bf4\u5927\u6982\u4f1a\u8111\u9614\u75bc\u3002 \u666e\u901a\u6a21\u5f0f\u4e0b\u6309 v \u5373\u53ef\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\uff0c hjkl \u53ef\u4ee5\u79fb\u52a8\u9ad8\u4eae\u9009\u533a\u67d0\u4e00\u5934\uff0c\u5982\u679c\u53d1\u73b0\u53cd\u4e86\u6216\u8005\u4f60\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\u7684\u65f6\u5019\u662f\u5728\u60f3\u8981\u9009\u4e2d\u533a\u57df\u7684\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u4e0d\u7528\u6025\u7740\u9000\u51fa\u91cd\u8fdb\uff0c\u66f4\u4e0d\u7528\u82b1\u65f6\u95f4\u53c8\u79fb\u56de\u53bb\uff0c\u53ea\u9700\u8981\u6309 o \u5373\u53ef\u5207\u6362\u6d3b\u52a8\u7aef\uff0c\u64cd\u4f5c\u9ad8\u4eae\u9009\u533a\u7684\u53e6\u4e00\u5934\u3002\u6216\u8005\u7528\u9f20\u6807\u4e5f\u4e0d\u662f\u4e0d\u884c\u5566\u2026\u2026 \u7528\u9f20\u6807\u9009\u4e2d\u9ad8\u4eae\u9009\u533a\u5f53\u7136\u4e5f\u53ef\u4ee5\u8bf4\u662f\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\u7684\u529e\u6cd5\u4e4b\u4e00\u3002 \u7136\u540e\u5c31\u662f y \u6216\u8005 d \u64cd\u4f5c\uff0c\u6ca1\u4e86 QwQ\u3002 emm \u57fa\u7840\u5e94\u8be5\u5c31\u7528\u5230\u8fd9\u4e9b\u4e86\u5427\uff0c\u5f80\u540e\u7684\u63d2\u4ef6\uff0c\u914d\u7f6e\uff0c\u66f4\u591a\u64cd\u4f5c\u5728\u5bf9\u5e94\u7bc7\u5e45\u91cc\u3002 \u6700\u540e\u5176\u5b9e Vim \u8fd8\u6709\u4e00\u4e9b\u57fa\u7840\u64cd\u4f5c\uff0c\u5b83\u4eec\u5728 Vim \u81ea\u5e26\u7684\u6559\u7a0b\u91cc\u5c06\u4f1a\u8bb2\u8ff0\u3002\u6253\u5f00\u7ec8\u7aef\u8f93\u5165\uff1a 1 vimtutor \u5373\u53ef\u8fdb\u5165\u6559\u7a0b\uff0c\u4e8c\u4e09\u5341\u5206\u949f\u4f60\u5c31\u80fd\u638c\u63e1\u57fa\u7840\u4e86\uff0c\u4f46\u5e94\u5f53\u52a0\u4ee5\u7ec3\u4e60\u624d\u80fd\u5f7b\u5e95\u638c\u63e1\u3002 \u63d2\u4ef6\u7bc7 \u00b6 \u57fa\u7840\u7bc7\u91cc\u8bf4\u8fc7\uff0cVim \u4e0e Emacs \u4e4b\u6240\u4ee5\u80fd\u6210\u4e3a\u4e24\u5927\u5dc5\u5cf0\u7684\u795e\u5668\u662f\u56e0\u4e3a\u5176\u9ad8\u5ea6\u7684\u6269\u5c55\u4e0e\u53ef\u5b9a\u5236\u6027\uff0c\u800c\u6700\u80fd\u4f53\u73b0\u8fd9\u4e00\u7279\u6027\u7684\u5c31\u662f\u63d2\u4ef6\u4e86\u3002\u5b83\u4eec\u662f\u6700\u6709\u9b45\u529b\u7684\u4e00\u90e8\u5206\uff0c\u662f\u6700\u4ee4\u4f60\u65e0\u6cd5\u6297\u62d2\u7684\u7ec4\u6210\u3002 \u867d\u7136\u8003\u573a\u4e0a\u57fa\u672c\u4e0a\u4e0d\u80fd\u7528\u63d2\u4ef6\uff0c\u4f46\u662f\u65e5\u5e38\u7684\u5b66\u4e60\u4e2d\uff0c\u63d2\u4ef6\u5c06\u5bf9\u4f60\u7684\u6548\u7387\u6709\u5f88\u5927\u7684\u63d0\u9ad8\uff0c\u800c\u4e14\u4e00\u4e9b\u63d2\u4ef6\u7684\u90e8\u5206\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7 Vim \u81ea\u5e26\u5b9e\u73b0\u4ee5\u53ca\u914d\u7f6e\u5b9e\u73b0\u3002 \u9996\u5148\uff0c\u5176\u5b9e\u4ece\u524d\u63d2\u4ef6\u7684\u5b89\u88c5\u5fc5\u987b\u4e0b\u8f7d\u4e4b\u540e\u4e22\u5230 .vim \u6587\u4ef6\u5939\u4e2d\uff0c\u5220\u4e86\u53c8\u8981\u4e0b\u4e91\u4e91\uff0c\u5341\u5206\u9ebb\u70e6\u3002\u4e8e\u662f\u5728\u4f7f\u7528\u8005\u4eec\u7684\u6363\u9f13\u4e0b\uff0c\u4e00\u679a\u5f3a\u5927\u7684\u63d2\u4ef6\u7ba1\u7406\u5668\u7531\u6b64\u8bde\u751f\u2014\u2014Vundle\u3002 \u5f53\u7136\u4f60\u7684\u914d\u7f6e\u91cc\u5fc5\u987b\u6709\u5982\u4e0b\u4e24\u884c\uff1a 1 2 set nocompatible filetype plugin on \u4ee5\u786e\u4fdd\u4f60\u7684 Vim \u53ef\u4ee5\u52a0\u8f7d\u63d2\u4ef6\uff0c\u54ea\u6015\u662f Vim \u539f\u751f\u5185\u7f6e\u7684\u63d2\u4ef6\u4e5f\u9700\u8981\u7684\u3002 \u81f3\u4e8e\u5177\u4f53\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u662f\u5728 home \u76ee\u5f55\u4e0b\u5efa\u7acb\u6587\u4ef6\u5939 .vim\u3002\u7136\u540e\u6253\u5f00\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a 1 2 sudo apt-get install git git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim \u5c31\u5b89\u88c5\u597d\u4e86\u3002 \u7136\u540e\u5728 .vim \u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u6587\u4ef6\u5939 plugin \u3002\u8fd9\u4e2a\u6587\u4ef6\u5939\u7528\u4e8e\u5b58\u653e\u90a3\u79cd\u4e0d\u80fd\u7528 Vundle \u63d2\u4ef6\u4e0b\u8f7d\uff0c\u800c\u5728\u522b\u7684\u5730\u65b9\u6709\u5f97\u4e0b\u8f7d\u7684\u811a\u672c\u63d2\u4ef6\uff0c\u540d\u5b57\u662f xxx.vim\uff0c\u76f4\u63a5\u6254\u8fdb\u8fd9\u4e2a\u6587\u4ef6\u5939\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\u3002 Vundle \u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u7ba1\u7406\u63d2\u4ef6\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u4e2d\u5199\u4e00\u4e0b\uff0c\u5e76\u5728 Vim \u4e2d\u6267\u884c :PluginInstall \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u4ece github \u4e0a\u62c9\u53d6\u63d2\u4ef6\uff0c\u5f53\u7136\u4e5f\u62c9\u53d6\u4e0d\u4e86 github \u4e0a\u6ca1\u6709\u7684 = =\u3002\u800c\u5982\u679c\u4e0d\u60f3\u7528\u4e86\u4ec0\u4e48\u63d2\u4ef6\u4e5f\u65e0\u987b\u5220\u53bb\uff0c\u5728\u914d\u7f6e\u4e2d\u6ce8\u91ca\u6389\u90a3\u4e2a\u63d2\u4ef6\u7684\u76f8\u5173\u5c31\u884c\u4e86\u3002\u5177\u4f53\u914d\u7f6e\u8bf7\u79fb\u6b65\u914d\u7f6e\u7bc7\uff0c\u6b64\u5904\u5c06\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u6211\u7684\u5404\u4e2a\u63d2\u4ef6\u3002 \u6587\u4ef6\u7ba1\u7406 \u00b6 \u4f7f\u7528 Vim \u7684\u65f6\u5019\u6253\u5f00\u6587\u4ef6\u663e\u7136\u6beb\u4e0d\u65b9\u4fbf\uff0c\u4e0d\u8bba\u662f\u5728\u76ee\u6807\u6587\u4ef6\u5939\u4e0b\u5229\u7528 1 vim filename \u6253\u5f00\u6587\u4ef6\u8fd8\u662f\u5728 Vim \u5185\u4f7f\u7528 :e filename \u6765\u6253\u5f00\u6587\u4ef6\u663e\u7136\u90fd\u8fc7\u4e8e\u9ebb\u70e6\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u66f4\u597d\u7684\u6cd5\u5b50\uff1f \u7b54\u6848\u662f\u663e\u7136\u7684\uff0cVim \u7684\u7528\u6237\u4eec\u5f00\u53d1\u4e86 nerdtree \u8fd9\u4e00\u63d2\u4ef6\u3002\u8fd9\u4e2a\u63d2\u4ef6\u8fbe\u5230\u4e86\u4e00\u79cd\u7c7b\u4f3c\u4e8e VScode \u4e2d\u7684\u6548\u679c\u2014\u2014\u5de5\u7a0b\u76ee\u5f55\u6811\uff0c\u4e4b\u9700\u5728\u5de6\u4fa7\u76ee\u5f55\u680f\u9009\u4e2d\u76f8\u5e94\u6587\u4ef6\u5373\u53ef\u6253\u5f00\u76f8\u5e94\u6587\u4ef6\u3002\u8fd9\u5728\u914d\u7f6e\u7bc7\u4e2d\u5c06\u4f1a\u6709\u4ecb\u7ecd\u3002nerdtree \u7684\u5f00\u542f\u65b9\u5f0f\u662f\u5728 Vim \u4e2d\u8f93\u5165 :NERDTreeToggle \uff0c\u5b83\u4f1a\u5728\u5de6\u4fa7\u6253\u5f00\u4e00\u4e2a\u4fa7\u8fb9\u680f\u7a97\u53e3\u3002\u6211\u77e5\u9053\u8fd9\u663e\u7136\u592a\u8fc7\u9ebb\u70e6\uff0c\u6240\u4ee5\u5728\u914d\u7f6e\u4e2d\u6211\u7ed9\u5b83\u8d4b\u4e88\u4e86 F10 \u8fd9\u4e2a\u5feb\u6377\u952e\u3002\u81f3\u4e8e\u5177\u4f53\u8fd8\u6709\u4ec0\u4e48\u5feb\u6377\u952e\uff0c\u8be6\u8bf7\u53c2\u7167 \u6b64\u6587\u7ae0 \u3002 \u4e5f\u8bb8\u6709\u4eba\u8981\u8bf4\u8003\u573a\u4e0a\u8be5\u5982\u4f55\u5462\uff1f\u6ca1\u5173\u7cfb\uff0cVim \u81ea\u5e26\u4e86\u4e00\u4e2a\u7a0d\u900a\u4e00\u7b79\u7684\u6587\u4ef6\u7ba1\u7406\u5668 netrw \u3002\u5982\u679c\u4f60\u7684\u547d\u4ee4\u662f\u8fd9\u6837\u7684 1 vim \u6587\u4ef6\u5939 ( \u6216\u8005\u8bf4\u76ee\u5f55 ) \u8def\u5f84 \u6216\u8005\u662f\u5728 Vim \u4e2d e \u6587\u4ef6\u5939\u8def\u5f84 \u5373\u53ef\u6253\u5f00\u76ee\u5f55\u63d2\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4eb2\u624b\u8bd5\u4e00\u8bd5\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u8fd8\u662f\u4e0d\u96be\u7422\u78e8\u7684\u3002\u540c\u65f6\u5728\u4e0a\u8ff0\u4e24\u4e2a\u547d\u4ee4\u4e2d\u53ef\u4ee5\u7528 . \u6765\u8868\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u610f\u601d\u662f\u53ef\u4ee5\u7528 1 vim . \u6216\u8005\u5728 Vim \u4e2d\u4f7f\u7528 e . \u6765\u5f00\u542f\u63d2\u4ef6 \u5f53\u7136\uff0c\u5982\u679c\u4ec5\u662f\u5982\u6b64\u8fd8\u4e0d\u591f\uff0c\u4f7f\u7528\u6587\u4ef6\u7ba1\u7406\u5668\u6253\u5f00\u6587\u4ef6\u7684\u8bdd\uff0c\u5bb9\u6613\u4f7f\u5de5\u4f5c\u76ee\u5f55\u51fa\u73b0\u5dee\u9519\uff0c\u4ece\u800c\u5bfc\u81f4\u7f16\u8bd1\u7684\u7a0b\u5e8f\u4e0d\u5b58\u5728\u4e8e\u539f\u6587\u4ef6\u5939\u4e2d\uff0c\u6240\u4ee5\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd8\u9700\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 set autochdir \u5b83\u7684\u4f5c\u7528\u662f\u4f1a\u81ea\u52a8\u628a\u5de5\u4f5c\u76ee\u5f55\u79fb\u52a8\u5230\u5f53\u524d\u7f16\u8f91\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u3002 \u7f8e\u5316\u754c\u9762 \u00b6 \u9996\u5148\u5c31\u662f\u90a3\u884c\u767d\u4e4e\u4e4e\u7684\u72b6\u6001\u680f\uff0c\u663e\u793a\u7684\u4fe1\u606f\u8fd8\u4e0d\u591f\u591a\uff0c\u4e5f\u4e0d\u597d\u770b\u5bf9\u5427\u3002\u663e\u793a\u7684\u4fe1\u606f\u662f\u53ef\u4ee5\u5728\u914d\u7f6e\u4e2d\u5199\u7684\uff0c\u8bf7\u79fb\u6b65\u914d\u7f6e\u7bc7\u3002\u4f46\u662f\u4e0d\u597d\u770b\u7684\u95ee\u9898\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u8fd9\u4e2a\u65f6\u5019\u5c31\u8f6e\u5230\u4e86 airline \u63d2\u4ef6\u51fa\u9a6c\u4e86\uff0c\u4e0d\u591a\u8bf4\uff0c\u653e\u4e24\u5f20\u56fe\u81ea\u7136\u660e\u767d\u3002 \u7136\u540e\uff0c\u5176\u5b9e\u6211\u4eec\u7684 nerdtree \u63d2\u4ef6\u4e5f\u662f\u53ef\u4ee5\u7f8e\u5316\u7684\uff0c\u540c\u65f6\u591a\u5b89\u88c5\u4e00\u4e2a\u5c0f\u63d2\u4ef6\u548c\u4e00\u70b9\u914d\u7f6e\u5373\u53ef\u8fbe\u5230\u7f8e\u5316\u6548\u679c\uff0c\u5177\u4f53\u8bf7\u79fb\u6b65\u914d\u7f6e\u7bc7\u98df\u7528\u3002 \u542f\u52a8\u754c\u9762 \u00b6 \u8fd9\u4e2a\u5176\u5b9e\u53ef\u6709\u53ef\u65e0\uff0c\u662f\u4e00\u4e2a\u80fd\u5feb\u6377\u952e\u6253\u5f00\u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u4e2a\u63d2\u4ef6 vimplus-startify\uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u3002 \u5c0f\u65b9\u4fbf\u6027\u63d2\u4ef6 \u00b6 commentary \uff1a\u5feb\u6377\u952e gc \u6ce8\u91ca\u9009\u4e2d\u884c\uff0c gcu \u64a4\u9500\u4e0a\u6b21\u6ce8\u91ca\u3002 syntastic \uff1a :w \u4fdd\u5b58\u65f6\u63d0\u793a\u8bed\u6cd5\u9519\u8bef\uff0c\u9700\u914d\u7f6e\u4e2d\u8bbe\u7f6e\u6807\u9519\u6837\u5f0f\uff0c\u5982\u6211\u7684\u5c31\u4f1a\u5728\u884c\u524d\u663e\u793a >> \u3002 easymotion \uff1a\u5feb\u901f\u8df3\u8f6c\uff0c\u6211\u81ea\u5df1\u5176\u5b9e\u90fd\u4e0d\u4f1a\u7528 233\uff0c\u9700\u8981\u53ef\u4ee5\u67e5\u9605\u8d44\u6599\u3002 rainbow \uff1a \u5f69\u8679\u62ec\u53f7\uff0c\u4f7f\u5177\u6709\u5305\u542b\u5173\u7cfb\u7684\u62ec\u53f7\u663e\u73b0\u51fa\u4e0d\u540c\u7684\u989c\u8272\uff0c\u589e\u5f3a\u591a\u62ec\u53f7\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 delimitMate \uff1a \u62ec\u53f7\u8865\u5168\u529f\u80fd\u3002\u540c\u65f6\u8003\u8bd5\u4e2d\u53ef\u7528\u914d\u7f6e\u5b9e\u73b0\u90e8\u5206\u529f\u80fd\uff0c\u914d\u7f6e\u7bc7\u4e2d\u4f1a\u8bb2\u8ff0\u3002 vimcdoc \uff1a\u6c49\u5316 Vim \u5728\u7ebf\u6587\u6863\u3002 gundo \uff1a\u8fd9\u4e2a\u63d2\u4ef6\u5c06\u80fd\u591f\u663e\u793a\u4f60\u7684\u6587\u4ef6\u4fee\u6539\u6811\uff0c\u5c31\u50cf github \u4e0a\u4e00\u822c\u80fd\u591f\u56de\u5230\u5386\u53f2\u7248\u672c\uff0c\u65f6\u5149\u673a\u554a QwQ \u3002Vim \u4e2d :GundoToggle \u5373\u53ef\u5728\u5de6\u4fa7\u6253\u5f00\u65f6\u5149\u673a\u3002 vimim \uff1a\u8fd9\u4e2a\u7684\u5b89\u88c5\u4e0d\u5728\u914d\u7f6e\u4e2d\uff0c\u76f8\u5f53\u4e8e Vim \u81ea\u5e26\u4e2d\u6587\u8f93\u5165\u6cd5\uff0c\u9700\u5728 .vim \u4e2d\u521b\u5efa\u6587\u4ef6\u5939 plugin \u5e76\u628a \u4ece\u8fd9\u91cc \u4e0b\u5f97\u7684\u6587\u4ef6\u6254\u5165\u6b64\u6587\u4ef6\u5939\u4e2d\u5373\u53ef\u3002\u6253\u5f00 Vim \u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u6309\u4e0b Ctrl + / \u5373\u53ef\u542f\u7528\u3002\u4f46\u662f\u4f7f\u7528\u7684\u662f\u4e91\u8bcd\u5e93\uff0c\u82e5\u6ca1\u7f51\u5c31\u4f1a\u5361\u6b7b\u3002\u6240\u4ee5\u5efa\u8bae\u4e0b\u8f7d \u672c\u5730\u8d85\u5927\u8bcd\u5e93 \uff0c\u4e5f\u653e\u5165 plugin \u6587\u4ef6\u5939\u4e2d\uff0c\u4e0e\u63d2\u4ef6\u811a\u672c\u540c\u76ee\u5f55\u5373\u53ef\u542f\u7528\u3002 vim-instant-markdown \uff1a\u8fd9\u4e2a\u63d2\u4ef6\u53ef\u5c31\u5389\u5bb3\u4e86\u3002Vim \u7528\u4e60\u60ef\u4e86\u4e4b\u540e\u4ec0\u4e48\u90fd\u60f3\u7528 Vim \u6765\u505a\uff0c\u6bd4\u5982\u60f3\u7528 Vim \u6765\u5199 Markdown \u5e76\u5b9e\u65f6\u9884\u89c8\u600e\u4e48\u529e\uff1f\u4e8e\u662f\u8fd9\u4e2a\u5f3a\u5927\u7684\u63d2\u4ef6\u5c31\u8bde\u751f\u4e86\uff0c\u5f53\u6253\u5f00 Markdown \u6587\u4ef6\u65f6\u4f1a\u81ea\u52a8\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u4e00\u4e2a\u6807\u7b7e\u9875\uff0c\u5c06\u80fd\u591f\u5b9e\u65f6\u9884\u89c8\u4f60\u7684 Vim \u4e2d\u7684 markdown \u5185\u5bb9\u3002 \u4e00\u5207\u63d2\u4ef6\u7684\u5b89\u88c5\u5199\u6cd5\u53ca\u5feb\u6377\u952e\u53ca\u914d\u7f6e\u7686\u5728\u914d\u7f6e\u7bc7\u4e2d\uff0c\u8bf7\u79fb\u6b65\u3002 \u914d\u7f6e\u7bc7 \u00b6 \u6211\u7684\u914d\u7f6e Ps: \u6211\u7684 .vimrc \u65f6\u523b\u5728\u6539\uff0c\u6240\u4ee5\u8fd9\u53ea\u662f\u4e2a\u526f\u672c\u2026\u2026 \u7ed3\u5408\u6211\u7684\u914d\u7f6e\u8bb2\u4e00\u8bb2\u4e00\u4e9b Vim \u4e2d\u7684\u5c0f\u7ec6\u8282\u548c\u5feb\u6377\u952e\u4ee5\u53ca\u4e00\u4e9b\u2026\u2026 \u4e03\u91cc\u516b\u91cc\u7684\u4e1c\u897f\uff1f Vim \u7684\u914d\u7f6e\u8bed\u6cd5\u6ca1\u90a3\u4e48\u9ebb\u70e6\uff0c\u57fa\u672c\u4e0a\u5c31\u662f set \u5f00\u542f\u9009\u9879\uff0ccall xxx() \u8c03\u7528\u51fd\u6570\uff0cfunc \u4e0e endfunc \u5b9a\u4e49\u51fd\u6570\uff0cexec \u6267\u884c\u547d\u4ee4\uff0cif \u548c endif \u63cf\u8ff0\u4ee5\u4e0b\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\" \u8868\u793a\u6ce8\u91ca\uff0csource \u8868\u793a\u5e94\u7528\u5565\u7684\uff0c\u8bed\u6cd5\u548c Vim \u547d\u4ee4\u884c\u4e0b\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u662f\u5f53\u4f60\u628a\u914d\u7f6e\u6587\u4ef6\u5199\u5165\uff0cVim \u5f00\u542f\u65f6\u4f1a\u81ea\u52a8\u6267\u884c\u914d\u7f6e\u4e2d\u7684\u6bcf\u4e00\u884c\u8bed\u53e5\u3002 \u57fa\u7840\u8bbe\u7f6e \u00b6 \u6211\u5fc5\u987b\u8bf4\u6211\u7684\u914d\u7f6e\u91cc\u5176\u5b9e\u6ca1\u6709\u80cc\u666f\u65b9\u9762\u7684\u8bbe\u7f6e\uff0c\u56e0\u4e3a\u6211\u9ed1\u80cc\u666f\u52a0\u4e2a\u900f\u660e\u5316\u5f88\u8212\u670d\u4e86\u2026\u2026 \u63a5\u4e0b\u6765\u6211\u4f1a\u6311\u91cd\u8981\u7684\u914d\u7f6e\u6765\u8bb2\uff0c\u5269\u4e0b\u7684\u53ef\u4ee5\u7ed3\u5408\u6211\u7684\u914d\u7f6e\u5185\u7684\u6ce8\u91ca\u6765\u770b \u9996\u5148\u4f7f\u7528\u5404\u79cd\u63d2\u4ef6\u5bb9\u6613\u4e0e vi \u7684\u6a21\u5f0f\u4ea7\u751f\u51b2\u7a81\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5173\u95ed vi \u7684\u529f\u80fd\uff0c\u90a3\u4e48\u5c31\u6709\u4e86\u5982\u4e0b\u914d\u7f6e\uff1a 1 set nocompatible \u901a\u8fc7\u8fd9\u4e2a\u8bbe\u7f6e\u5c06\u5173\u95ed\u539f\u6709 vi \u7684\u529f\u80fd\u4ee5\u9632\u51b2\u7a81 \u968f\u540e\uff0c\u5f53\u4f60\u6253\u5f00\u4f60\u7684 cpp \u6587\u4ef6\u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u53ca\u5176\u4e4b\u4e11\uff0c\u56e0\u4e3a\u6ca1\u6709\u4e86\u8bed\u6cd5\u9ad8\u4eae\uff0c\u4e00\u5207\u90fd\u662f\u4e00\u4e2a\u989c\u8272\u4e86\u3002\u90a3\u4e48\u914d\u7f6e\u4e2d\u9700\u52a0\u5165\u5982\u4e0b\u4e24\u884c 1 2 syntax enable syntax on \u5206\u522b\u662f\u5f00\u542f\u9ad8\u4eae\u652f\u6301\u4e0e\u5f00\u542f\u8bed\u6cd5\u9ad8\u4eae \u7136\u540e\u662f\u6211\u4eec\u53ef\u7231\u7684\u72b6\u6001\u680f\uff0c set laststatus=2 \u8fd9\u884c\u914d\u7f6e\u5c06\u4f1a\u4f7f\u5f97\u72b6\u6001\u680f\u603b\u662f\u663e\u793a\uff0c\u800c\u72b6\u6001\u680f\u6240\u663e\u793a\u7684\u4fe1\u606f\u5728\u914d\u7f6e\u4e2d\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u3002\u8bbe\u7f6e\u5982\u4e0b\uff1a 1 set statusline = \\ % < %F[% 1 *%M%*% n %R%H]% = \\ % y \\ % 0 ( %{& fileformat }\\ [%{ ( & fenc == \\ \"\\\"?&enc:&fenc).(&bomb?\\\",BOM\\\":\\\"\\\" ) }]\\ % c :% l /%L% ) \u8fd9\u4e00\u884c\u4f1a\u4f7f\u72b6\u6001\u680f\u663e\u793a\u5305\u62ec\u6587\u4ef6\u8def\u5f84\uff0c\u6a21\u5f0f\uff0c\u6587\u4ef6\u7c7b\u578b\uff0c\u6587\u4ef6\u7f16\u7801\uff0c\u6240\u5728\u884c\u6570\u4e0e\u5217\u6570\uff0c\u4ee5\u53ca\u5149\u6807\u6240\u5728\u5904\u662f\u6587\u4ef6\u7684\u767e\u5206\u4e4b\u591a\u5c11\u3002\u52a0\u4e0a airline \u63d2\u4ef6\uff0c\u65e2\u7f8e\u89c2\u53c8\u5b9e\u7528\u3002 \u518d\u7136\u540e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6362\u884c\u7b26\u662f\u4e0d\u53ef\u88ab\u5220\u9664\u7684\uff0c\u9664\u975e\u4f7f\u7528 dd \u547d\u4ee4\u6216\u8005 J \u547d\u4ee4\u624d\u53ef\u505a\u5230\u3002\u90a3\u4e48\u6211\u4eec\u9700\u8981 set backspace=indent,eol,start \u8fd9\u884c\u914d\u7f6e\u6765\u89e3\u9664\u8fd9\u79cd\u9650\u5236\u3002 \u663e\u7136\u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u90a3\u5c31\u662f\u884c\u53f7\u7684\u95ee\u9898\u3002\u4e0d\u7ba1\u662f\u8bc4\u6d4b\u6587\u4ef6\u5199\u4e86\u591a\u5c11\u884c\u8fd8\u662f\u60f3\u8981\u4f7f\u7528 \u6570\u5b57 + G \u7684\u547d\u4ee4\u8df3\u81f3\u6307\u5b9a\u884c\uff0c\u6ca1\u6709\u884c\u53f7\u7684\u663e\u793a\u80af\u5b9a\u662f\u5d29\u6e83\u7684\u3002\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 set number \u5f00\u542f\u884c\u53f7\u663e\u793a\u7684\u529f\u80fd\u3002\u7136\u540e\u662f Vim \u7684\u81ea\u52a8\u6298\u884c\u529f\u80fd\uff0c\u90a3\u5c31\u662f\u5f53\u67d0\u4e00\u884c\u8d85\u8fc7\u4e86 Vim \u7a97\u53e3\u7684\u8fb9\u754c\uff0cVim \u4f1a\u600e\u4e48\u505a\u5462\uff1f\u591a\u51fa\u7684\u90e8\u5206\u4f1a\u81ea\u52a8\u663e\u793a\u5728\u4e0b\u4e00\u884c\uff0c\u800c\u8fd9\u79cd\u591a\u51fa\u6765\u7684\u884c\u524d\u9762\u662f\u6ca1\u6709\u884c\u53f7\u7684\uff0c\u6bd4\u8f83\u597d\u8fa8\u8ba4\uff0c\u8fd9\u4e9b\u884c\u88ab\u79f0\u4e3a\u5c4f\u5e55\u884c\uff0c\u800c\u6839\u636e\u884c\u53f7\u4e00\u4e00\u5bf9\u5e94\u7684\u4fbf\u79f0\u4f5c\u5b9e\u9645\u884c\u3002\u4f46\u662f\u4ec5\u4ec5\u51ed\u7740\u770b\u524d\u9762\u7684\u884c\u53f7\u6765\u8fa8\u8ba4\u67d0\u4e2a\u6298\u4e0b\u6765\u7684\u884c\u5c5e\u4e8e\u90a3\u4e2a\u5b9e\u9645\u884c\u7684\u8bdd\uff0c\u8fd8\u662f\u4e0d\u591f\u5feb\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 set cursorline \u6765\u5f00\u542f\u9ad8\u4eae\u663e\u793a\u5f53\u524d\u884c\uff0c\u800c\u8fd9\u4e2a\u9ad8\u4eae\u4e5f\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\uff0c\u6211\u7684\u914d\u7f6e\u91cc\u4e5f\u6709\u3002 \u7136\u540e\u662f\u6211\u4eec\u5728\u57fa\u7840\u7bc7\u4e2d\u63d0\u5230\u8fc7\u7684\uff0c\u5f00\u542f\u9f20\u6807\u652f\u6301 set mouse=a \uff0c\u4ee5\u53ca\u63d2\u4ef6\u7bc7\u4e2d\u63d0\u53ca\u7684 set autochdir \u4e0e\u8fdb\u9636\u7bc7\u4e2d\u6709\u7684 set fillchars=vert:\\ ,stl:\\ ,stlnc:\\ \u8fd9\u4e09\u4e2a\u914d\u7f6e\uff0c\u4f5c\u7528\u5404\u6709\u63d0\u53ca\u3002 \u5176\u4ed6\u7684\u5f80\u6211\u914d\u7f6e\u91cc\u770b\u5566 wwww\u3002 \u90a3\u4e2a zsh \u662f\u4e00\u4e2a shell \u7684\u76f8\u5173\u7a0b\u5e8f\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u67e5\uff0c\u6ca1\u5174\u8da3\u7684\u5220\u6389\u5427 QwQ\u3002 \u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u5c31\u662f\u6587\u4ef6\u7f16\u7801\uff0c\u8bbe\u7f6e\u5982\u4e0b\uff1a 1 2 3 4 5 set langmenu = zh_CN.UTF -8 set helplang = cn set termencoding = utf -8 set encoding = utf8 set fileencodings = utf8 , ucs - bom , gbk , cp936 , gb2312 , gb18030 \u5feb\u6377\u952e\u8bbe\u7f6e \u00b6 \u5176\u5b9e Vim \u666e\u901a\u6a21\u5f0f\u4e0b\u6ca1\u6709\u591a\u5c11\u6309\u952e\u662f \"\u81ea\u7531\u8eab\"\uff0c\u90a3\u4e48\u7528\u6237\u8be5\u5982\u4f55\u5b9a\u5236\u81ea\u5df1\u7684\u5feb\u6377\u952e\u5462\uff1fVim \u4e3a\u6b64\u63d0\u4f9b\u4e86 leader \u952e\u6765\u670d\u52a1\u3002 leader \u952e\u5728\u914d\u7f6e\u4e2d\u7531\u81ea\u5df1\u5b9a\u5236\uff0c\u53ea\u9700\u8981\u77ed\u77ed\u4e00\u884c 1 let mapleader \uff1d \"\" \u53cc\u5f15\u53f7\u4e4b\u95f4\u5c31\u662f\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684 leader \u952e\u5566\u3002 \u8bbe\u7f6e\u5feb\u6377\u952e\u600e\u4e48\u5199\u5462\uff1f 1 2 nnoremap \u5feb\u6377\u952e \u6307\u4ee4 inoremap \u5feb\u6377\u952e \u6307\u4ee4 \u4e24\u884c\u5206\u522b\u4ee3\u8868\u4e86\u5728\u666e\u901a\u6a21\u5f0f\u4e0b\u548c\u63d2\u5165\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u6267\u884c\u6307\u4ee4\u3002\u5f53\u7136\u6307\u4ee4\u4e0d\u7528\u60f3\u591a\u4e86\uff0c\u6ca1\u6709\u4ec0\u4e48\u8bed\u6cd5\uff0c\u5c31\u662f\u76f8\u5f53\u4e8e\u5728\u952e\u76d8\u4e0a\u6309\u4f60\u6307\u4ee4\u4e2d\u5199\u4e0b\u7684\u952e\u800c\u5df2\u2026\u2026 \u9996\u5148\u6211\u7684\u4e2a\u4eba\u5feb\u6377\u952e\u9700\u6c42\u5176\u5b9e\u4e0d\u662f\u5f88\u591a\uff0c\u6211\u7684 leader \u952e\u662f ` \uff0c\u4f46\u662f\u5904\u4e8e\u4e00\u79cd\u5750\u51b7\u677f\u51f3\u7684\u72b6\u6001\uff0c\u5c31\u66f4\u65b0\u63d2\u4ef6\u7684\u65f6\u5019\u7528\u4e00\u7528\uff0c\u4e0d\u8fc7\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u6211\u7684\u8bbe\u7f6e\u662f\uff1a 1 nnoremap < leader >< leader > i :PluginInstall < CR > <CR> \u4ee3\u8868\u56de\u8f66\u3002\u8bbe\u7f6e\u4e4b\u540e\u53ea\u9700\u8981\u8fde\u7eed\u6309 ``i \u5373\u53ef\u66f4\u65b0\u63d2\u4ef6\uff0c\u5f88\u65b9\u4fbf\u3002 \u90a3\u4e48\u4f60\u6709\u6ca1\u6709\u731c\u5230\u5982\u4f55\u5229\u7528\u914d\u7f6e\u5199\u51fa\u62ec\u53f7\u8865\u5168\u7684\u90e8\u5206\u529f\u80fd\u5462\uff1f\u6ca1\u9519\uff0c\u5c31\u662f\u5229\u7528\u5feb\u6377\u952e\u3002\u5c06\u63d2\u5165\u6a21\u5f0f\u4e0b\u7684\u5de6\u6269\u53f7\u5f53\u505a\u5feb\u6377\u952e\u5373\u53ef\uff0c\u6307\u4ee4\u5c31\u662f () \u3002\u5982\u679c\u8865\u5168\u540e\u8981\u4f7f\u5149\u6807\u5728\u62ec\u53f7\u91cc\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u4ed4\u7ec6\u89c2\u5bdf\u4f60\u5c31\u4f1a\u53d1\u73b0\u6bcf\u5f53\u9000\u51fa\u63d2\u5165\u6a21\u5f0f\uff0c\u5149\u6807\u603b\u662f\u4f1a\u5411\u540e\u8df3\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\uff0c\u7ec4\u5408 Esc + i \u4e0d\u5c31\u53d8\u6210\u4e86\u5411\u524d\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u63d2\u5165\u5417\uff1f\u603b\u7ed3\u4e0b\u6765\u914d\u7f6e\u5982\u4e0b\uff1a 1 2 3 4 inoremap ( ()< esc > i inoremap [ [] < esc > i inoremap \" \" \" < esc > i inoremap ' ' ' < esc > i \u5f53\u7136\u6211\u7684\u914d\u7f6e\u91cc\u6ca1\u6709\uff0c\u800c\u4e14\u6211\u4e5f\u4e0d\u7528\u62ec\u53f7\u8865\u5168\u63d2\u4ef6\uff0c\u5176\u5b9e\u539f\u56e0\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u7684\u64a4\u9500\u6811\u4f1a\u66f4\u5408\u7406\u4e0e\u597d\u770b\u3002\u4f60\u4f1a\u53d1\u73b0\uff0c\u62ec\u53f7\u8865\u5168\u4e3a\u4e86\u4f7f\u5149\u6807\u56de\u5230\u62ec\u53f7\u5185\uff0c\u5df2\u7ecf\u9000\u51fa\u4e86\u4e00\u6b21\u63d2\u5165\u6a21\u5f0f\uff0c\u90a3\u4e48\u64a4\u9500\u547d\u4ee4\u7684\u6548\u679c\u5c31\u4e0d\u5b8c\u6574\u4e86\u3002\u800c\u4e14\u5176\u5b9e\u63d2\u5165\u6a21\u5f0f\u4e0b\u4f7f\u7528\u65b9\u5411\u952e\uff0c\u4e5f\u76f8\u5f53\u4e0e\u63a8\u51fa\u63d2\u5165\u6a21\u5f0f\u79fb\u52a8\u53c8\u91cd\u65b0\u56de\u5230\u63d2\u5165\u6a21\u5f0f\uff0c\u4e5f\u4f1a\u4f7f\u64a4\u9500\u6811\u4e0d\u5b8c\u6574 = =\u3002\u6240\u4ee5\u4f60\u4f1a\u53d1\u73b0\u8fdb\u9636\u7bc7\u63d0\u5230\u7684\uff0c\u6211\u7684\u914d\u7f6e\u91cc\u90a3\u4e2a\u4e27\u5fc3\u75c5\u72c2\u7684\u4e1c\u897f\u2026\u2026 \u8fd8\u8bb0\u5f97\u8fdb\u9636\u7bc7\u91cc\u7684\u5206\u5c4f\u5417\uff1f\u663e\u7136\u4f7f\u7528\u9f20\u6807\u70b9\u51fb\u6765\u9009\u62e9\u6d3b\u52a8\u7a97\u53e3\u592a\u6162\uff0c\u800c\u79fb\u52a8\u547d\u4ee4\u524d\u52a0\u4e2a Ctrl + w \u4e5f\u4e0d\u4e60\u60ef\u5bf9\u4e0d\u5bf9\uff0c\u6240\u4ee5\u6211\u7684\u505a\u6cd5\u662f\u7528 Ctrl + \u79fb\u52a8\u547d\u4ee4\u6765\u6620\u5c04\u524d\u9762\u7684\u6309\u952e\u7ec4\u5408\u3002 1 2 3 4 nnoremap < c - h > < c - w > h nnoremap < c - l > < c - w > l nnoremap < c - j > < c - w > j nnoremap < c - k > < c - w > k \u5e94\u8be5\u6bd4\u539f\u6765\u7684\u6309\u6cd5\u597d\u8bb0\u4e5f\u597d\u6309\u2026\u2026 \u5427\u2026\u2026 \u8fd8\u8bb0\u5f97\u81ea\u52a8\u6298\u884c\u5427\uff0c\u6211\u4eec\u7684 hjkl \u547d\u4ee4\u5176\u5b9e\u90fd\u662f\u5728\u5b9e\u9645\u884c\u4e4b\u95f4\u79fb\u52a8\uff0c\u800c\u6298\u4e0b\u6765\u7684\u5c4f\u5e55\u884c\u5b9e\u5728\u662f\u6ca1\u6cd5\u5b50\uff0c\u53ea\u80fd\u7528 l \u952e\u4e0d\u65ad\u79fb\u8fc7\u53bb\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c g + \u79fb\u52a8\u547d\u4ee4 \u4fbf\u80fd\u591f\u4f7f\u4f60\u5728\u5c4f\u5e55\u884c\u95f4\u79fb\u52a8\uff0c\u56e0\u4e3a\u8003\u8651\u5230\u8fd9\u79cd\u79fb\u52a8\u7684\u5e38\u7528\uff0c\u6211\u9009\u62e9\u5c06 g + \u79fb\u52a8\u547d\u4ee4 \u4e0e\u79fb\u52a8\u547d\u4ee4\u53cd\u8fc7\u6765\u6620\u5c04\u3002 1 2 3 4 noremap j gj noremap gj j noremap gk k noremap k gk \u521a\u624d\u4e5f\u90fd\u8bf4\u4e86\uff0c\u81ea\u7531\u8eab\u7684\u5feb\u6377\u952e\u4e0d\u591a\uff0c F1~F12 \u5c31\u662f\u65b9\u4fbf\u800c\u81ea\u7531\u7684\u5feb\u6377\u952e\u3002\u90a3\u7528\u5b83\u4eec\u6765\u5e72\u561b\u5462\uff1f F9 \u4e00\u952e\u7f16\u8bd1 \u6211\u60f3\u6709\u4e86\u4e4b\u524d\u7684\u7f16\u8bd1\u547d\u4ee4\uff0c\u57fa\u7840\u7bc7\u547d\u4ee4\u884c\u6a21\u5f0f\u4e2d\u7684\u4ecb\u7ecd\uff0c\u4f60\u5e94\u8be5\u5927\u6982\u80fd\u6709\u4e2a\u601d\u8def\u4e86\u5427\u3002\u4f5c\u51fa\u7684\u64cd\u4f5c\u80af\u5b9a\u5982\u4e0b\uff1a 1 2 3 : w \" \u4fdd\u5b58 : g ++ xxx.cpp - o xxx \" \u7f16\u8bd1 : ./xxx \" \u8fd0\u884c \u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\u6211\u503e\u5411\u4e8e\u5199\u4e2a\u51fd\u6570\uff1a 1 2 3 4 5 6 nnoremap < F9 > : call CompileRunGcc ()< CR > func ! CompileRunGcc () exec \"w\" exec '!g++ % -o %<' exec '!time ./%<' endfunc \u7b2c\u4e00\u884c\u4ee3\u8868\u8fd0\u884c CompileRunGcc \u51fd\u6570\uff0c\u7b2c\u4e8c\u884c\u4ee3\u8868\u5b9a\u4e49\u51fd\u6570\uff0c\u4e09\u81f3\u4e94\u884c\u4ee3\u8868\u51fd\u6570\u8fd0\u884c\u5185\u5bb9\uff0c\u7b2c\u516d\u884c\u4ee3\u8868\u51fd\u6570\u7ed3\u675f\u3002 exec \u8868\u793a\u6267\u884c\u547d\u4ee4\uff0c % \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d\uff0c %< \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d\u53bb\u6389\u540e\u7f00\u7684\u540d\u5b57\u3002\u6211\u60f3\u4f60\u5e94\u8be5\u662f\u770b\u5f97\u61c2\u51fd\u6570\u5185\u5bb9\u7684\u3002 \u4e0d\u8fc7\u5982\u679c\u4f60\u4f7f\u7528\u5f97\u591a\u4e86\uff0c\u5c31\u4f1a\u53d1\u73b0\u5f53\u6309\u4e0b F9 \u7684\u65f6\u5019\u8f6c\u5230\u53e6\u4e00\u4e2a\u5c4f\u5373\u7ec8\u7aef\u8fdb\u884c\u8fd0\u884c\uff0c\u4f46\u662f\u6bcf\u8fd0\u884c\u4e00\u6b21\u90fd\u4f1a\u591a\u4e00\u4e9b\u4fe1\u606f\u3002\u5982\u6b64\u7d2f\u79ef\u7684\u8bdd\u591a\u6765\u51e0\u6b21\u6574\u4e2a\u7ec8\u7aef\u5c31\u6ee1\u4e86\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 bash \u4e0b\u7684\u547d\u4ee4 1 clear \u6765\u6e05\u5c4f\uff0c\u4e0d\u8fc7\u6211\u503e\u5411\u4e8e\u4e5f\u628a\u5b83\u5c01\u88c5\u5728\u4e00\u4e2a\u5feb\u6377\u952e\u5185\uff0c\u6309 F12 \u5c31\u4f1a\u81ea\u52a8\u6e05\u5c4f\u4e86\uff0c\u4e2a\u4eba\u89c9\u5f97\u7528\u7740\u633a\u723d\u2026\u2026 1 2 3 4 nnoremap < F12 > : call Clss ()< CR > func ! Clss () exec '!clear' endfunc \u8fd8\u6709\uff0c\u5728 Vim \u4e2d\u6267\u884c\u5916\u90e8\u547d\u4ee4\u7eb5\u4f7f\u6709 :! \u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u8fd8\u662f\u4e0d\u65b9\u4fbf\uff0c\u8981\u662f\u80fd\u76f4\u63a5\u5728 Vim \u4e2d\u518d\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u5c31\u597d\u4e86\uff0c\u5bf9\u5427\u3002Vim \u4ece 8.0 \u4e4b\u540e\u5c31\u589e\u6dfb\u4e86\u5728\u5185\u90e8\u5206\u4e2a\u5c4f\u6765\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7684\u529f\u80fd\uff0c\u547d\u4ee4\u662f :terminal \u3002\u6211\u4e2a\u4eba\u4e5f\u5c06\u5b83\u8bbe\u7f6e\u6210\u4e86\u5feb\u6377\u952e\uff0c\u4f5c\u4e3a\u5f3a\u8feb\u75c7\u8fd8\u662f\u88c5\u5728\u4e86\u51fd\u6570\u4e2d = =\u3002\u6211\u60f3\u6709\u4e86\u547d\u4ee4\u4f60\u5e94\u8be5\u81ea\u5df1\u4f1a\u5199\u4e86\u3002 1 2 3 4 nnoremap < F8 > : call Term ()< CR > func ! Term () exec 'terminal' endfunc \u6309 F8 \u5c31\u80fd\u5728\u4e0a\u9762\u5206\u51fa\u4e00\u4e2a\u7a97\u53e3\u6253\u5f00\u7ec8\u7aef\u4e86\u3002 \u4ecb\u4e8e\u66f4\u5404\u79cd Vim \u7248\u672c\u7684\u538b\u8feb\uff0cVim \u4f5c\u8005\u4e5f\u662f\u594b\u53d1\u56fe\u5f3a\uff0cVim 8.1 \u53c8\u66f4\u65b0\u4e86\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u5148\u7528 packadd termdebug \u5f00\u542f\u6b64\u8bbe\u7f6e\uff0c\u7136\u540e\u5728 Vim \u4e2d\u8f93\u5165 :Termdebug + \u7f16\u8bd1\u51fa\u7684\u7a0b\u5e8f\u540d\u79f0 \u5373\u53ef\u5f00\u59cb GDB \u7684\u8fc7\u7a0b\uff0c\u5177\u4f53\u8be6\u7ec6\u64cd\u4f5c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u3002\u8fd9\u4e2a\u81ea\u7136\u4e5f\u88ab\u6211\u5c01\u88c5\u51fd\u6570\u4e86 >_<\u3002 1 2 3 4 5 packadd termdebug nnoremap < F11 > : call GDB ()< CR > func ! GDB () exec 'Termdebug %<' endfunc \u5199\u4ee3\u7801\u597d\u7528\u7684 \u00b6 \u9996\u5148\u662f Tab \u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 set tabstop= \u6765\u5b9a\u4e49 Tab \u7684\u957f\u5ea6\uff0c\u4e00\u822c\u5f53\u7136\u662f 4 \u4e2a\u7a7a\u683c\uff0c\u5728\u7b49\u4e8e\u53f7\u540e\u9762\u586b\u7684\u6570\u5b57\u662f\u591a\u5c11\u90a3\u4e48\u957f\u5ea6\u5c31\u662f\u591a\u5c11\u7a7a\u683c\u3002 \u7136\u540e\u662f\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5f53\u591a\u4e2a\u62ec\u53f7\u5d4c\u5957\u65f6\u7528\u8089\u773c\u663e\u7136\u4e0d\u597d\u770b\u51fa\u5bf9\u5e94\u7684\u62ec\u53f7\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528 set showmatch \u5f00\u542f\u9ad8\u4eae\u663e\u793a\u5339\u914d\u62ec\u53f7\u3002 \u6709\u7684\u65f6\u5019\u6253\u5f00 Vim \u662f\u4e0d\u662f\u7ecf\u5e38\u4f1a\u63d0\u793a\u6709\u4ec0\u4e48 swap \u6587\u4ef6\u662f\u5426\u786e\u8ba4\u5565\u7684\uff0c\u90a3\u4e2a\u662f\u4e34\u65f6\u7f13\u5b58\u6587\u4ef6\uff0c\u633a\u70e6\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 set nobackup \u4e0e set noswapfilei \u6765\u7981\u6b62\u5176\u751f\u6210\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u8212\u723d\u591a\u4e86\uff08\u8fd8\u662f\u5f00\u7740\u5427\uff09\u3002 \u6700\u540e\u561b\uff0c\u5927\u591a\u6570\u65f6\u5019\u8c03\u8bd5\u4ee3\u7801\u90fd\u4f1a\u7528 freopen \u6765\u8f93\u5165\u8f93\u51fa\uff0c\u518d\u5229\u7528\u5206\u5c4f\u64cd\u4f5c\u6765\u6253\u5f00 .in .out \u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5b9e\u65f6\u770b\u5230\u7ed3\u679c\u3002\u4e0d\u8fc7\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u4e4b\u540e\u4f60\u90fd\u4f1a\u53d1\u73b0\u56e0\u4e3a .out \u6587\u4ef6\u7684\u4fee\u6539\u800c\u4f1a\u5f39\u51fa\u4e00\u4e2a\u786e\u8ba4\u9009\u9879\u662f\u5426\u91cd\u65b0\u52a0\u8f7d\u6587\u4ef6\uff0c\u8fd9\u4e2a\u4e5f\u662f\u5f88\u4e0d\u723d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u542f set autoread \u9009\u9879\u4ee5\u81ea\u52a8\u52a0\u8f7d\u6539\u52a8\u7684\u6587\u4ef6\u3002 \u5173\u4e8e\u63d2\u4ef6 \u00b6 \u63d2\u4ef6\u7bc7\u4e2d\u8bf4\u5230\u4e86\u5f3a\u5927\u7684\u63d2\u4ef6\u7ba1\u7406\u5668 Vundle\uff0c\u90a3\u4e48\u5728\u914d\u7f6e\u4e2d\u8be5\u5982\u4f55\u5199\u5462\uff1f\u6846\u67b6\u5982\u4e0b\uff1a 1 2 3 4 set rtp +=~ /.vim/ bundle/Vundle. vim call vundle#begin ( '~/.vim/\u81ea\u5df1\u521b\u5efa\u7684\u7528\u6765\u653e\u63d2\u4ef6\u6587\u4ef6\u7684\u6587\u4ef6\u5939' ) call vundle# end () \u5728\u4e24\u5757\u4e4b\u95f4\u6765\u5199\u9700\u8981\u5b89\u88c5\u7684\u63d2\u4ef6\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a 1 Plugin '\u4f5c\u8005 Github \u4e0a\u7684\u540d\u5b57/Github \u4e0a\u7684\u63d2\u4ef6\u4ed3\u5e93\u540d' \u5199\u5b8c\u4fdd\u5b58\u540e\u8fdb\u5165 Vim\uff0c\u4f7f\u7528 :PluginInstall \u5373\u53ef\u81ea\u52a8\u5f00\u59cb\u5b89\u88c5\u3002 \u6211\u7684\u63d2\u4ef6\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 set rtp +=~ /.vim/ bundle/Vundle. vim call vundle#begin ( '~/.vim/plugged' ) Plugin 'VundleVim/Vundle.vim' \" \u4f7f\u7528Vundle\u7684\u5fc5\u987b\u914d\u7f6e Plugin 'chxuan/vimplus-startify' \" \u542f\u52a8\u754c\u9762 Plugin 'scrooloose/nerdtree' \" \u76ee\u5f55\u6811 Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' \" \u76ee\u5f55\u6811\u7f8e\u5316 Plugin 'vim-airline/vim-airline' \" \u72b6\u6001\u680f\u7f8e\u5316 Plugin 'vim-airline/vim-airline-themes' \" \u72b6\u6001\u680f\u7f8e\u5316\u4e3b\u9898 Plugin 'tpope/vim-commentary' \" \u5feb\u901f\u6ce8\u91ca Plugin 'scrooloose/syntastic' \" \u8bed\u6cd5\u9519\u8bef\u63d0\u793a Plugin 'Lokaltog/vim-easymotion' \" \u5feb\u901f\u8df3\u8f6c Plugin 'luochen1990/rainbow' \" \u5f69\u8679\u62ec\u53f7 \"Plugin 'Raimondi/delimitMate' \" \u62ec\u53f7\u8865\u5168 Plugin 'yianwillis/vimcdoc' \" HELP\u6587\u6863\u4e2d\u6587 Plugin 'sjl/gundo.vim' \" \u64a4\u9500\u6811 Plugin 'suan/vim-instant-markdown' \" markdown \u5b9e\u65f6\u9884\u89c8 call vundle# end () \u5173\u4e8e\u63d2\u4ef6\u5176\u5b9e\u4e5f\u6709\u76f8\u5173\u914d\u7f6e\uff0c\u4f46\u662f\u90fd\u5199\u5728\u4e00\u8d77\u5c06\u4f1a\u4f7f\u5f97 .vimrc \u5341\u5206\u81c3\u80bf\uff0c\u6211\u4eec\u53ef\u4ee5\u989d\u5916\u5199\u5728\u522b\u7684\u6587\u4ef6\u91cc\uff0c\u4e00\u822c\u6587\u4ef6\u5e94\u8be5\u4fdd\u5b58\u5728 home \u4e0b\uff0c\u7136\u540e\u5728\u914d\u7f6e\u4e2d\u5199\u4e0b source $HOME / \u6587\u4ef6\u8def\u5f84 \u5373\u53ef\u3002\u6211\u7684 nerdtree, syntastic \u548c airline \u90fd\u989d\u5916\u5199\u4e86\u522b\u7684\u6587\u4ef6\u3002 \u540c\u65f6\u6211\u7684\u914d\u7f6e\u91cc\u5173\u4e8e\u63d2\u4ef6\u7684\u5feb\u6377\u952e\u5982\u4e0b\uff1a 1 2 F10 \uff1a\u542f\u52a8 nerdtree \u4fa7\u8fb9\u5de5\u7a0b\u76ee\u5f55\u6811 F7 \uff1a\u542f\u52a8 Gundo \u65f6\u5149\u673a \u5173\u4e8e\u9ad8\u6548\u7f16\u8f91\u7684\u5efa\u8bae \u00b6 \u4e3a\u4ec0\u4e48 Emacs \u548c Vim \u8fd9\u4e9b\u7f16\u8f91\u5668\u6548\u7387\u9ad8\uff1f \u5f88\u91cd\u8981\u7684\u4e00\u70b9\u5728\u4e8e\u8fd9\u4e9b\u7f16\u8f91\u5668\u53ef\u4ee5\u8ba9\u4f60\u5207\u6389\u4f60\u7684\u53f3\u534a\u90e8\u5206\u7684\u952e\u76d8\u800c\u8ba9\u4f60\u7684\u53cc\u624b\u59cb\u7ec8\u5904\u4e8e\u4e3b\u952e\u76d8\u533a\u57df, \u5e76\u4e14\u8ba9\u4f60\u7684\u53cc\u624b\u4fdd\u6301\u5408\u4f5c, \u800c\u4e0d\u4f1a\u51fa\u73b0\u4e00\u53ea\u624b\u4e0d\u505c\u7684\u6309\u800c\u53e6\u4e00\u53ea\u624b\u644a\u5728\u952e\u76d8\u4e0a\u3002 \u6240\u4ee5, \u5982\u679c\u4f60\u60f3\u7528\u597d Vim(\u6216\u8005\u5176\u4ed6\u9ad8\u7ea7\u7f16\u8f91\u5668), \u4e0d\u8981\u53bb\u6309\u65b9\u5411\u952e, \u4e0d\u8981\u53bb\u78b0\u9f20\u6807, \u4f60\u751a\u81f3\u53ef\u4ee5\u5f3a\u8feb\u81ea\u5df1\uff1a 1 2 3 4 5 \" \u4f7f\u65b9\u5411\u952e\u5931\u6548 inoremap < UP > a < Bs > inoremap < DOWN > a < Bs > inoremap < LEFT > a < Bs > inoremap < RIGHT > a < Bs > \u4f46\u4e5f\u8bb8\u8fd9\u8fd8\u4e0d\u591f, \u4f60\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7f29\u5c0f\u4f60\u53cc\u624b\u9700\u8981\u63a7\u5236\u7684\u533a\u57df\u3002 Esc \u952e\u5728 Vim \u4e2d\u4f7f\u7528\u9891\u7e41, \u867d\u7136\u6709 ctrl+[ \u6765\u4ee3\u66ff\u5b83, \u4f46\u8fd9\u4ecd\u7136\u4e0d\u591f\u3002 \u4e8b\u5b9e\u4e0a\u8fd8\u7528\u4e00\u79cd\u9ad8\u6548\u5374\u9c9c\u4e3a\u4eba\u77e5\u7684\u529e\u6cd5: \u7528 alt \u3002 \u5728 TUI(\u7ec8\u7aef) \u4e2d\u4efb\u4f55\u6a21\u5f0f alt + \u4efb\u4f55\u6309\u952e\u5b8c\u5168\u7b49\u6548\u4e8e Esc + \u8be5\u6309\u952e\u3002 \u4f8b\u5982\u4f60\u8981\u9000\u51fa\u63d2\u5165\u6a21\u5f0f\u5411\u4e0a\u79fb\u52a8, \u666e\u901a\u505a\u6cd5\u662f Esc+k, \u4f46 alt+k \u6709\u540c\u6837\u7684\u6548\u679c\u5e76\u4e14\u5341\u5206\u9ad8\u6548\u3002 Backspace (\u5220\u9664\u952e) \u4f7f\u7528\u5341\u5206\u9891\u7e41, \u4f46\u5b83\u5904\u5728\u4e3b\u952e\u76d8\u7684\u89d2\u843d, \u4f60\u4e0d\u5f97\u4e0d\u632a\u5f00\u624b\u6216\u662f\u4f38\u957f\u5c0f\u62c7\u6307\u3002 \u4f46\u5728 Vim (\u751a\u81f3\u7ec8\u7aef) \u91cc, \u4f60\u53ef\u4ee5\u7528 ctrl+h \u6765\u5f7b\u5e95\u4ee3\u66ff Backspace\u3002 \u56de\u8f66\u952e\u4f7f\u7528\u540c\u6837\u9891\u7e41, \u4f46\u540c\u6837\u4e0d\u632a\u4e00\u632a\u624b\u5c31\u5f97\u4f38\u957f\u5c0f\u62c7\u6307\u3002 \u5e78\u8fd0\u7684\u662f\u5728 Vim \u548c\u7ec8\u7aef\u4e2d, ctrl+m \u5b8c\u5168\u7b49\u6548\u4e0e\u56de\u8f66\u3002 \u5728\u7edd\u5927\u591a\u6570\u7684\u60c5\u51b5\u4e0b, \u4e0d\u8981\u53bb\u6309\u53f3\u8fb9\u7684 ctrl, shift, \u7528\u5de6\u8fb9\u7684\u4ee3\u66ff\u3002 \u6700\u597d\u4e0d\u7528 F1 \u5230 F12, \u5982\u679c\u8981\u6620\u5c04, \u7528 Leader \u5f00\u5934\u7684\u81ea\u5b9a\u4e49\u5feb\u6377\u952e\u3002 Visual Studio Code - \u5fae\u8f6f\u5bb6\u7684\u7f16\u8f91\u5668 \u00b6 \u7b80\u4ecb \u00b6 Visual Studio Code (\u4ee5\u4e0b\u7b80\u79f0 VS Code) \u662f\u4e00\u4e2a\u514d\u8d39\u3001\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684\u7531\u5fae\u8f6f\u5f00\u53d1\u7684\u7a0b\u5e8f\u7f16\u8f91\u5668\u3002\u5b83\u662f\u7528 Typescript \u7f16\u5199\u7684\uff0c\u5e76\u4e14\u91c7\u7528 Electron \u67b6\u6784\u3002\u5b98\u7f51\u662f https://code.visualstudio.com/ \u3002\u5b83\u5e26\u6709\u5bf9 JavaScript\u3001TypeScript \u548c Node.js \u7684\u5185\u7f6e\u652f\u6301\uff0c\u5e76\u4e3a\u5176\u4ed6\u8bed\u8a00\uff08\u5982 C++\u3001Cype\u3001Java\u3001Python\u3001PHP\u3001GO\uff09\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6269\u5c55\u751f\u6001\u7cfb\u7edf\u3002","title":"\u7f16\u8f91\u5de5\u5177"},{"location":"intro/editors/#vim-","text":"","title":"Vim -- \u7f16\u8f91\u5668\u4e4b\u795e"},{"location":"intro/editors/#_1","text":"Vim \u7684\u524d\u8eab\u662f vi\uff0c\u4e00\u4e2a\u7b80\u6d01\u4f46\u662f\u7565\u6709\u4e0d\u8db3\u7684\u7f16\u8f91\u5668\uff0c\u4f46\u662f\u4ece vi \u5f00\u59cb\uff0c\u7f16\u8f91\u5668\u7684\u6a21\u5f0f\u533a\u5206\u548c\u552f\u5feb\u4e0d\u7834\u7684\u601d\u60f3\u5c31\u5df2\u7ecf\u4f53\u73b0\u7684\u5f88\u5230\u4f4d\u4e86\u3002Vim \u5373\u662f vi improved\uff0c\u662f\u5728 vi \u539f\u672c\u6240\u6709\u7684\u65b9\u5f0f\u4e0a\u8fdb\u884c\u7684\u8fdb\u4e00\u6b65\u63d0\u5347\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u6539\u53d8 vi \u7684\u5176\u4ed6\u672c\u8d28\uff0c\u53ea\u662f\u589e\u52a0\u4e86\u66f4\u591a\u9002\u5e94\u5982\u4eca\u9700\u8981\u7684\u4e00\u4e9b\u529f\u80fd\u3002 vi \u4e8e 1976 \u5e74\u8bde\u751f\uff0c\u4e0e Emacs \u4e0d\u5206\u5148\u540e\uff0c\u4e24\u8005\u56e0\u5176\u5feb\u6377\u7684\u7f16\u8f91\u88ab\u5949\u4e3a\u795e\u5668\uff0c\u751a\u81f3\u4f7f\u7528\u8005\u4eec\u8fd8\u6709\u7206\u53d1\u8fc7 \u201c\u5723\u6218\u201d\uff0c\u5373\u662f \u795e\u7684\u7f16\u8f91\u5668 Emacs VS \u7f16\u8f91\u5668\u4e4b\u795e Vim \uff0c\u4f46\u662f\u5f53\u7136\u5206\u4e0d\u51fa\u7ed3\u679c\uff0c\u56e0\u4e3a\u5404\u6709\u4f18\u52a3\u3002\u4f46\u5b83\u4eec\u5171\u6709\u7684\u7279\u70b9\u5c31\u662f\u9ad8\u5ea6\u7684\u6269\u5c55\u6027\u4e0e\u9ad8\u5ea6\u7684\u53ef\u5b9a\u5236\u6027\u4ee5\u53ca\u5feb\u6377\u65b9\u4fbf\u7684\u4f7f\u7528\u3002 Vim \u7684\u6a21\u5f0f\u533a\u5206\u662f\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u8bbe\u5b9a\uff0c\u666e\u901a\u6a21\u5f0f\u4e0e\u63d2\u5165\u6a21\u5f0f\u662f\u6700\u4e3b\u8981\u5e38\u7528\u7684\u6a21\u5f0f\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u7684\u6bcf\u4e2a\u952e\u90fd\u662f\u547d\u4ee4\uff0c\u8fd9\u4fbf\u662f Vim \u4e0d\u540c\u4e8e Emacs \u7684\u5730\u65b9\uff0c\u82e5\u662f\u4e60\u60ef\u4e86 Vim \u7684\u6a21\u5f0f\u4e4b\u95f4\u7684\u5207\u6362\uff0c\u5927\u90e8\u5206\u90fd\u662f\u5355\u4e2a\u952e\u7684\u547d\u4ee4\u5fc5\u7136\u6bd4 Emacs \u7684\u65e0\u9650 Ctrl \u4f1a\u66f4\u9ad8\u6548\uff0c\u867d\u7136 Vim \u7684\u5c0f\u5bb9\u91cf\u6ce8\u5b9a\u6bd4\u4e0d\u4e86 Emacs \u201c\u64cd\u4f5c\u7cfb\u7edf\u201d \u8fd9\u4e2a\u4e1c\u897f\u90a3\u4e48\u4e07\u80fd\uff0c\u4f46\u662f\u8bba\u5feb\u800c\u8a00\uff0cVim \u662f\u65e0\u53ef\u4e89\u8bae\u7684\u9876\u5c16\u7f16\u8f91\u5668\u3002 Vim \u6709\u4e30\u5bcc\u7684\u63d2\u4ef6\u6269\u5c55\uff0c\u8fd9\u70b9\u663e\u7136\u662f\u6bd4\u914d\u7f6e\u66f4\u8ff7\u4eba\u7684\u5b58\u5728\u3002\u6709\u8fd9\u4e9b\u6269\u5c55\u6027\u5b58\u5728\uff0cVim \u6210\u4e3a\u4e00\u4e2a IDE \u4e5f\u4e0d\u4f1a\u662f\u4e0d\u53ef\u80fd\u7684\u4e8b\u60c5\u3002 \u4f46\u662f\uff0cVim \u7684\u521d\u59cb\u5b66\u4e60\u6ce8\u5b9a\u662f\u8270\u96be\u7684\uff0c\u56e0\u4e3a\u5176\u4e0e\u591a\u6570\u4e3b\u6d41\u64cd\u4f5c\u4e0d\u540c\u7684\u65b9\u5f0f\u4ee4\u7a0d\u61d2\u7684\u65b0\u624b\u671b\u800c\u5374\u6b65\uff0c\u8fd9\u9700\u8981\u65f6\u95f4\u6765\u9002\u5e94\u4f46\u5f53\u5ea6\u8fc7\u6700\u5f00\u59cb\u7684\u4e0d\u9002\u5e94\u671f\u4e4b\u540e\uff0cVim \u5c31\u518d\u65e0\u96be\u5ea6\uff0c\u4f60\u4f1a\u6162\u6162\u4e0a\u763e\uff0c\u4e0d\u65ad\u4f18\u5316\u4f60\u7684\u914d\u7f6e\uff0c\u5bfb\u627e\u65b0\u7684\u66f4\u597d\u7528\u7684\u63d2\u4ef6\u3002\u5f00\u59cb\u7684\u8fc7\u7a0b\u5c31\u50cf\u662f\u94f8\u5251\uff0c\u4e4b\u540e\u7684\u8fc7\u7a0b\u5c31\u50cf\u662f\u4e0e\u5251\u7684\u66f4\u597d\u7684\u78e8\u5408\uff0c\u7136\u540e\u5728\u5251\u4e2d\u9010\u6e10\u6ce8\u5165\u4f60\u7684\u7075\u9b42\uff0c\u8fd9\u6837\u5b83\u5c31\u6210\u4e3a\u4e86\u4f60\u6700\u597d\u7684\u5229\u5668\uff0c\u4ee4\u4f60\u65e0\u6cd5\u5272\u820d\u3002\u4e43\u81f3\u4f60\u4f1a\u81ea\u5df1\u5199\u9002\u5408\u81ea\u5df1\u7684\u63d2\u4ef6\uff0c\u5c31\u50cf\u662f\u81ea\u521b\u5251\u6cd5\uff0c\u800c\u4e0d\u50cf\u662f\u4ece\u522b\u4eba\u90a3\u91cc\u501f\u6765\u5251\u6cd5\uff0c\u6742\u4e03\u6742\u516b\u878d\u4e3a\u4e00\u7089\u3002 \u6709\u4eba\u8bf4\u4e86\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a Vim \u662f\u4e00\u6b3e\u975e\u5e38\u4f18\u79c0\u7684\u6587\u672c\u7f16\u8f91\u5668\uff0c\u4f46\u7531\u4e8e\u5176\u9661\u5ced\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u5f88\u591a\u4eba\u8fd8\u6ca1\u5f00\u59cb\u5b66\u5c31\u653e\u5f03\u4e86\uff0c\u6240\u4ee5\u4ed6\u4eec\u65e0\u6cd5\u9886\u609f Vim \u552f\u5feb\u4e0d\u7834\u7684\u8bbe\u8ba1\u601d\u60f3\u548c\u7cbe\u5de7\u7684\u4f7f\u7528\u4f53\u9a8c\u3002 \u9644\u4e00\u5f20\u56fe\uff0c\u8bba\u5404\u5927\u7f16\u8f91\u5668\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u7eb5\u5750\u6807\u4ee3\u8868\u638c\u63e1\u77e5\u8bc6\u91cf\u53ca\u96be\u5ea6\uff0c\u6a2a\u5750\u6807\u4ee3\u8868\u4f7f\u7528\u7684\u719f\u7ec3\u7a0b\u5ea6\u4e0e\u5b8c\u6210\u4efb\u52a1\u7684\u6548\u7387\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cVim \u7684\u66f2\u7ebf\u5c82\u6b62\u9661\u5ced\uff0c\u90fd\u5782\u76f4\u4e86\u2026\u2026 \u4f46\u662f\u5f00\u59cb\u8fc7\u53bb\u540e\uff0c\u662f\u5e73\u7a33\u7684\u63d0\u5347\uff0c\u53ea\u8981\u5ea6\u8fc7\u5f00\u59cb\u7684\u9636\u6bb5\uff0cVim \u7684\u5b66\u4e60\u5c06\u518d\u65e0\u963b\u788d\uff0c\u4e00\u8def\u76f4\u4e0a\u6709\u6ca1\u6709\u3002","title":"\u5386\u53f2\u4e0e\u4e89\u7aef"},{"location":"intro/editors/#_2","text":"\u4e00\u822c\u7684\u8bdd\uff0cLinux \u7cfb\u7edf\u90fd\u662f\u4f1a\u81ea\u5e26 Vim \u7684\uff0c\u6253\u5f00\u7ec8\u7aef\u8f93\u5165 vim \u5373\u53ef\u542f\u7528\u3002 Vim \u4f9d\u9644\u4e8e\u7ec8\u7aef\uff0c\u6240\u4ee5\u8c03\u6574\u7ec8\u7aef\u8bbe\u7f6e\u4e5f\u53ef\u4ee5\u8fbe\u5230\u7f8e\u5316\u6548\u679c\u3002 \u4f46\u662f\u81ea\u5e26\u7684 Vim \u5f88\u5bb9\u6613\u6709\u529f\u80fd\u6b8b\u7f3a\uff0c\u6bd4\u5982\u6709\u7684\u5c31\u4e0d\u80fd\u4e0e\u7cfb\u7edf\u526a\u5207\u677f\u4ea4\u4e92 (\u5c06\u4f1a\u5728\u8fdb\u9636\u7bc7\u8bb2\u89e3)\uff0c\u5404\u79cd\u672a\u5f00\u542f\u652f\u6301\u3002\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u624b\u52a8\u5b89\u88c5\uff0c\u65b9\u6cd5\u6709\u4e8c\u3002\u7b2c\u4e00\u6b65\u5148\u662f\u5378\u8f7d Vim\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a 1 sudo apt-get remove vim \u7136\u540e\u5b89\u88c5\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u4e00\u662f\u4f7f\u7528\u547d\u4ee4\u5b89\u88c5\uff0c\u4f46\u6211\u65e0\u6cd5\u786e\u5b9a\u8f6f\u4ef6\u6e90\u7684\u7248\u672c\u6709\u6ca1\u6709\u95ee\u9898 = =\u3002 1 sudo apt-get install vim \u505a\u6cd5\u4e8c\uff0c\u5148\u5230 Releases - vim/vim \u4e0b\u8f7d\u6e90\u7801\u5305\uff0c\u7136\u540e\u89e3\u538b\uff0c\u5e76\u8fdb\u5165\u89e3\u538b\u540e\u7684\u6587\u4ef6\u5939\uff0c\u5e76\u6253\u5f00\u7ec8\u7aef\uff0ccd \u81f3\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u5e76\u4f9d\u6b21\u8f93\u5165\u5982\u4e0b\u547d\u4ee4\uff1a 1 2 3 ./configure make sudo make install make \u7684\u8fc7\u7a0b\u53ef\u80fd\u7a0d\u4e45\uff0c\u6de1\u5b9a\u70b9\u7b49\u3002 \u6700\u540e\u5728\u7ec8\u7aef\u8f93\u5165 1 vim \u5c31\u8df3\u51fa\u4e86\u90a3\u4e2a\u5e2e\u5e2e\u4e4c\u5e72\u8fbe\u7684\u53ef\u601c\u513f\u7ae5\u5565\u7684\uff0c\u6309 a \u6216 i \u952e\u5f00\u59cb\u7f16\u8f91\u65b0\u6587\u4ef6\u5427\u3002 \u6216\u8005\u8981\u6253\u5f00\u67d0\u4e2a\u6587\u4ef6\u7684\u8bdd\u5c31\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d 1 vim \u6587\u4ef6\u8def\u5f84 \u53ef\u4ee5\u76f4\u63a5\u7f16\u8f91\u6587\u4ef6\u3002","title":"\u5b89\u88c5"},{"location":"intro/editors/#_3","text":"\u7f16\u8bd1\u7684\u8bdd\uff0c\u5148\u8981\u5b89\u88c5 g++\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a 1 sudo apt-get install g++ \u7136\u540e cd \u81f3 cpp \u6587\u4ef6\u6307\u5b9a\u8def\u5f84\u6267\u884c\u5982\u4e0b\u547d\u4ee4 1 2 g++ filename.cpp -o filename ./filename \u7b2c\u4e00\u4e2a\u547d\u4ee4\u662f\u7f16\u8bd1\uff0c\u7b2c\u4e8c\u4e2a\u5219\u662f\u8fd0\u884c\u3002 \u4e00\u952e\u7f16\u8bd1\u8fd0\u884c\u7684\u914d\u7f6e\u5728\u914d\u7f6e\u7bc7\u7ed9\u51fa\u3002","title":"\u7f16\u8bd1"},{"location":"intro/editors/#_4","text":"\u5206\u6a21\u5f0f\u6765\u5427\u3002","title":"\u57fa\u7840\u7bc7"},{"location":"intro/editors/#insert","text":"\u63d2\u5165\u6a21\u5f0f\u7684\u77e5\u8bc6\u70b9\u5176\u5b9e\u6ca1\u6709\u592a\u591a\uff0c\u8f93\u5165\u624d\u662f\u4e3b\u804c\u662f\u4f10\u3002 \u9996\u5148\uff0c\u4ece\u666e\u901a\u6a21\u5f0f\u5982\u4f55\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u5462\uff1f\u6709\u6570\u4e2a\u547d\u4ee4\uff1a i \u4e0e a \u4e0e A \u4e0e o \u3002\u524d\u4e24\u4e2a\u5dee\u522b\u4e0d\u5927\uff0c i \u662f\u5728\u5149\u6807\u5f53\u524d\u4f4d\u7f6e\u8fdb\u884c\u5199\u4ee3\u7801\uff0c a \u662f\u5f80\u540e\u632a\u4e00\u4e2a\u5b57\u7b26\u5199\u4ee3\u7801\u3002 A \u662f\u79fb\u52a8\u5230\u5f53\u524d\u884c\u5c3e\u8fdb\u884c\u63d2\u5165\uff0c o \u662f\u5728\u884c\u5c3e\u6dfb\u52a0\u6362\u884c\u7b26\u5e76\u5728\u4e0b\u4e00\u884c\u63d2\u5165\u3002 \u800c\u5982\u4f55\u8fd4\u56de\u666e\u901a\u6a21\u5f0f\uff1f\u5f53\u7136\u662f Esc \u5566\u3002\u4f46\u662f\uff0cVim \u7684\u63d2\u5165\u4e0e\u666e\u901a\u6a21\u5f0f\u5207\u6362\u5f02\u5e38\u9891\u7e41\uff0c\u800c Esc \u53c8\u592a\u8fdc\u4e86\uff0c\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1fVim \u8fd8\u63d0\u4f9b\u4e86 Ctrl + [ \u7684\u5feb\u6377\u952e\u6765\u8fd4\u56de\u666e\u901a\u6a21\u5f0f\uff0c\u662f\u5426\u8fd1\u591a\u4e86\u5462\uff1f \u867d\u8bf4\u80fd\u591f\u719f\u7ec3\u4e86\u540e\uff0c\u5207\u6362\u6a21\u5f0f\u4e0d\u518d\u662f\u95ee\u9898\uff0c\u4f46\u662f\u5176\u5b9e\u6709\u7684\u65f6\u5019\u6211\u4eec\u53ea\u662f\u9700\u8981\u8fdb\u5165\u666e\u901a\u6a21\u5f0f\u4e0b\u6309\u4e00\u6b21\u5c0f\u547d\u4ee4\uff0c\u6765\u56de\u5207\u6362\u53c8\u663e\u5f97\u6d6a\u8d39\u4e86\u4e00\u70b9\u70b9\u65f6\u95f4\u3002\u800c Vim \u53c8\u63d0\u4f9b\u4e86\u63d2\u5165 - \u666e\u901a\u6a21\u5f0f\u6765\u907f\u514d\u8fd9\u4e00\u5c34\u5c2c\u7684\u95ee\u9898\u3002\u5728\u63d2\u5165\u6a21\u5f0f\u4e0b\uff0c\u53ea\u9700\u8981\u6309 Ctrl + o \u5373\u53ef\u8fdb\u5165\u6b64\u6a21\u5f0f\uff0c\u5f53\u8fdb\u884c\u5b8c\u4e00\u6b21\u64cd\u4f5c\u540e\u53c8\u4f1a\u81ea\u52a8\u56de\u5230\u63d2\u5165\u6a21\u5f0f\u3002\u8fd9\u6837\u5c82\u4e0d\u662f\u66f4\u7701\u65f6\u95f4\uff1f","title":"\u63d2\u5165\u6a21\u5f0f (insert)"},{"location":"intro/editors/#normal","text":"Vim \u7684\u547d\u4ee4\u5927\u90e8\u5206\u90fd\u662f\u5728\u666e\u901a\u6a21\u5f0f\u4e0b\u5b8c\u6210\u7684\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u53ef\u4e0d\u80fd\u4e71\u6309\uff0c\u53ef\u4ee5\u8bf4\u6bcf\u4e2a\u952e\u90fd\u662f\u547d\u4ee4\u3002 1 2 3 4 \u9996\u5148\u662f hjkl \u56db\u4e2a\u65b9\u5411\u952e\u3002 k ^ h < > l v j \u5176\u5b9e\u5927\u591a\u6570\u7f16\u8f91\u5668\u90fd\u662f\u7528\u65b9\u5411\u952e\u505a\u51fa\u79fb\u52a8\u547d\u4ee4\uff0cVim \u4e5f\u4e0d\u4f8b\u5916\uff0c\u4f46 hjkl \u7ed9\u4e86\u6211\u4eec\u66f4\u597d\u7684\u9009\u62e9\uff0c\u53ea\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u7684\u9002\u5e94\uff0c\u4f60\u4fbf\u80fd\u5feb\u901f\u5730\u64cd\u4f5c\u5b83\u4eec\u8fdb\u884c\u79fb\u52a8\uff0c\u800c\u4e14\u5b83\u4eec\u53ef\u6ca1\u6709\u65b9\u5411\u952e\u90a3\u4e48\u8fdc\uff0c\u8282\u7701\u65f6\u95f4\u662f\u4e00\u6d41\u7684\u3002 \u666e\u901a\u6a21\u5f0f\u4e0b\u6700\u91cd\u8981\u7684\u547d\u4ee4\uff0c\u6ca1\u6709\u4e4b\u4e00\uff0c\u90a3\u5c31\u662f u \u3002\u64a4\u9500\u547d\u4ee4\uff0c\u4f5c\u7528\u662f\u64a4\u9500\u4e0a\u4e00\u6b21\u5bf9\u6587\u672c\u7684\u66f4\u6539\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u7684 x \uff0c d \uff0c p \u547d\u4ee4\u90fd\u4f1a\u88ab\u64a4\u9500\uff0c\u540c\u65f6\u8fdb\u5165\u4e00\u6b21\u63d2\u5165\u6a21\u5f0f\u6240\u7f16\u8f91\u7684\u6587\u672c\u4e5f\u7b97\u4e00\u6b21\u66f4\u6539\uff0c u \u547d\u4ee4\u4f1a\u5220\u53bb\u4ece\u8fdb\u5165\u5230\u9000\u51fa\u63d2\u5165\u6a21\u5f0f\u6240\u8f93\u5165\u7684\u6240\u6709\u4e1c\u897f\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\u662f Ctrl + r \u547d\u4ee4\uff0c\u4ed6\u7684\u4f5c\u7528\u662f\u64a4\u9500\u4e0a\u6b21\u7684\u64a4\u9500\u547d\u4ee4\uff0c\u76f8\u5f53\u4e8e\u5927\u90e8\u5206 windows \u4e0b\u7a0b\u5e8f\u4e2d\u7684 Ctrl + y \u3002 \u7136\u540e\u7684\u8bdd, \u5c31\u662f\u666e\u901a\u6a21\u5f0f\u4e0b\u5e38\u7528\u7684\u547d\u4ee4\u3002\u7531\u4e8e\u5bf9\u884c\u547d\u4ee4\u7684\u4f7f\u7528\u5f88\u9891\u7e41\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u7684\u5355\u952e\u547d\u4ee4\u90fd\u53ef\u4ee5\u901a\u8fc7\u6309\u4e24\u6b21\u6765\u5b9e\u73b0\u5bf9\u884c\u64cd\u4f5c\u3002\u5e38\u7528\u547d\u4ee4\u662f x \uff0c\u7528\u4e8e\u5220\u9664\u5149\u6807\u540e\u7684\u4e00\u4e2a\u5b57\u7b26\u3002\u7136\u540e\u662f d \u547d\u4ee4\uff0c\u4e5f\u662f\u5220\u9664\uff0c\u4f46\u662f\u79cd\u7c7b\u66f4\u591a\uff0c\u8fd9\u91cc\u4e0d\u505a\u8d58\u8ff0\u3002\u540c\u65f6 d \u547d\u4ee4\u50cf\u4e4b\u524d\u8bf4\u7684\uff0c\u6309\u4e24\u6b21\u5373\u53ef\u5220\u9664\u6574\u884c\uff0c\u5373 dd \u3002 \u7136\u540e\u662f y \u547d\u4ee4\uff0c\u53ef\u4ee5\u590d\u5236\u88ab\u9009\u4e2d\u7684\u533a\u57df\uff0c\u8fd9\u6d89\u53ca\u5230\u53ef\u89c6\u6a21\u5f0f\uff0c\u5373\u6309 v \u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\uff0c\u591a\u7528\u4e8e\u9009\u4e2d\u533a\u57df\u3002\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\u540e\u79fb\u52a8\u5149\u6807\u6765\u786e\u5b9a\u9009\u53d6\u8303\u56f4\u662f\u53ef\u4ee5\u7684\uff0c\u6b64\u65f6\u6309 o \u952e\u5373\u53ef\u5207\u6362\u6d3b\u52a8\u7aef\uff0c\u7701\u53bb\u4e86\u5982\u679c\u8dd1\u53cd\u65b9\u5411\u7684\u9ebb\u70e6\u3002\u5f53\u7136\uff0c\u6211\u76f8\u4fe1\u5f88\u591a\u4eba\u8fd8\u662f\u4e60\u60ef\u7528\u9f20\u6807\u64cd\u4f5c\u8fd9\u4e00\u8fc7\u7a0b\u7684\uff0c\u5305\u62ec\u79fb\u52a8\u5149\u6807\u3002Vim \u5f88\u6e29\u99a8\u7684\u63d0\u4f9b\u4e86\u8fd9\u4e00\u914d\u7f6e\uff1a set mouse=a \u3002\u4f60\u53ef\u4ee5\u5c06\u5b83\u5199\u5165\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u53bb\u3002\u6709\u4e86\u5b83\u4e4b\u540e\uff0c\u4f60\u5c06\u80fd\u591f\u7528\u9f20\u6807\u9009\u4e2d\u533a\u57df\u5e76\u8fdb\u884c\u590d\u5236\u64cd\u4f5c\u3002\u5f53\u7136\uff0c\u9009\u4e2d\u540e\u6309 x \u6216 d \u4ea6\u53ef\u5220\u9664\u3002\u540c\u65f6\uff0c y \u4e5f\u7b26\u5408 d \u7684\u6027\u8d28\uff0c yy \u5c06\u53ef\u4ee5\u590d\u5236\u5f53\u524d\u884c\u3002 \u7136\u540e\u5c31\u662f\u66f4\u5feb\u7684\u8df3\u8dc3\u4e86\u3002\u5982\u679c\u8bf4\u53ea\u662f\u4f7f\u7528 hjkl \u7684\u8bdd\uff0c\u5149\u6807\u7684\u79fb\u52a8\u663e\u7136\u4e0d\u591f\u5feb\uff0c\u800c\u9f20\u6807\u5374\u53c8\u8981\u4f38\u624b\u53bb\u62ff\u3002Vim \u63d0\u4f9b\u4e86\u666e\u901a\u6a21\u5f0f\u4e0b\u66f4\u5feb\u7684\u8df3\u8dc3\u65b9\u6cd5\uff0c w \u53ef\u4ee5\u8df3\u5230\u4e0b\u4e2a\u5355\u8bcd\u7684\u5f00\u5934\uff0c\u800c e \u53ef\u4ee5\u8df3\u5230\u5f53\u524d\u5355\u8bcd\u7ed3\u5c3e\uff0c 0 \u53ef\u4ee5\u8df3\u81f3\u884c\u9996\uff0c $ \u53ef\u4ee5\u8df3\u81f3\u884c\u5c3e\uff0c\u5c82\u4e0d\u662f\u5feb\u591a\u4e86\uff1f\u800c\u4e14 w \uff0c e \uff0c 0 \uff0c $ \u8fd8\u53ef\u4ee5\u7528\u4e8e\u8bb8\u591a\u547d\u4ee4\u4e2d de \uff0c dw \uff0c d0 \uff0c d& \u5206\u522b\u5bf9\u5e94\u5220\u81f3\u5355\u8bcd\u5c3e\uff0c\u5220\u81f3\u4e0b\u4e2a\u5355\u8bcd\u5934\uff0c\u5220\u81f3\u884c\u9996\uff0c\u5220\u81f3\u884c\u5c3e\u3002\u4ee5\u53ca y \u547d\u4ee4\u4ea6\u53ef\u540c\u7406\u3002 \u7136\u540e\u662f Vim \u7684\u53ef\u91cd\u590d\u3002\u5728\u8f93\u5165\u67d0\u4e2a\u547d\u4ee4\u524d\uff0c\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\u7684\u8bdd\uff0c\u5c31\u4f1a\u91cd\u590d\u90a3\u4e48\u591a\u6b21\u3002\u5982\u5728\u666e\u901a\u6a21\u5f0f\u4e0b\uff1a 1 2 3 asdasdasdasdasd asdadasdddd asdasdasd \u5149\u6807\u6b63\u4f4d\u4e8e\u7b2c\u4e00\u884c\uff0c\u8be5\u5982\u4f55\u5220\u9664\u8fd9\u4e09\u884c\u5462\uff1f\u666e\u901a\u6a21\u5f0f\u4e0b\u6309 3 dd \u5373\u53ef\u3002\u5176\u5b9e\u8fd8\u6709 . \u547d\u4ee4\u4e5f\u662f\u53ef\u4ee5\u505a\u5230\u4e00\u4e9b\u91cd\u590d\u7684\uff0c\u8fd9\u4f1a\u5728\u6548\u7387\u7bc7\u4e2d\u63d0\u5230\u3002 \u7136\u540e\u662f\u5168\u6587\u7684\u8df3\u8dc3\uff0c\u6309 gg \u53ef\u8df3\u81f3\u4ee3\u7801\u7684\u5f00\u5934\uff0c\u6309 G \u53ef\u8df3\u81f3\u4ee3\u7801\u6700\u540e\u4e00\u884c\uff0c\u5148\u6309\u6570\u5b57\u518d\u6309 G \u53ef\u8df3\u81f3\u6307\u5b9a\u884c\u3002 \u90a3\u4e48\u5728\u6587\u4e2d\u8fd8\u6709\u6781\u4e3a\u65b9\u4fbf\u7684\u67e5\u627e\u529f\u80fd\uff0c\u666e\u901a\u6a21\u5f0f\u4e0b\u53ea\u9700\u6309 / \u4e0b\u65b9\u5373\u4f1a\u51fa\u73b0\u67e5\u627e\u6846\u6846\uff0c\u8f93\u5165\u9700\u8981\u67e5\u627e\u7684\u5b57\u7b26\u6309\u56de\u8f66\u5c31\u597d\u5566\uff0c\u5982\u679c\u6709\u591a\u4e2a\u67e5\u627e\u7ed3\u679c\uff0c\u53ea\u9700\u6309 n \u5373\u53ef\u8df3\u81f3\u4e0b\u4e00\u4e2a\u67e5\u627e\u5904\uff0c\u6309 N \u5373\u53ef\u8df3\u81f3\u4e0a\u4e00\u4e2a\u3002 \u5e38\u7528\u547d\u4ee4\u5927\u6982\u5c31\u8fd9\u4e9b\u4e86\u2026\u2026","title":"\u666e\u901a\u6a21\u5f0f (normal)"},{"location":"intro/editors/#_5","text":"\u5176\u5b9e\u8fd9\u5e76\u4e0d\u80fd\u79f0\u4f5c\u662f\u4e00\u4e2a\u6a21\u5f0f = =\u3002 \u666e\u901a\u6a21\u5f0f\u4e0b\u53ea\u9700\u8981\u6309 : \u4e0b\u65b9\u5c31\u4f1a\u8e66\u51fa\u547d\u4ee4\u6846\u6846\uff0c\u8f93\u5165\u76f8\u5173\u547d\u4ee4\u5373\u53ef\u3002\u5982 Vim \u5728\u7ebf\u5e2e\u52a9\u6587\u6863\uff0c\u8f93\u5165 :help \u5373\u53ef\uff0c\u5982\u679c\u770b\u4e0d\u61c2\u82f1\u6587\u2026\u2026 \u8bf7\u4e0b\u8f7d Vim \u7528\u6237\u624b\u518c\u4e2d\u6587\uff0c\u6216\u8005\u79fb\u6b65\u63d2\u4ef6\u7bc7\u3002 \u6b64\u6a21\u5f0f\u4e0b\u6709\u4e00\u4e9b\u5f88\u6709\u7528\u7684\u547d\u4ee4 :q \u9000\u51fa\uff0c :w \u4fdd\u5b58\uff0c :wq \u4fdd\u5b58\u5e76\u9000\u51fa\uff0c :q! \u4e0d\u4fdd\u5b58\u5e76\u9000\u51fa\uff0c :e filename \u6253\u5f00\u5f53\u524d\u76ee\u5f55\u4e0b\u6307\u5b9a\u6587\u4ef6\uff0c\u8fd9\u4e9b\u662f\u6bd4\u8f83\u57fa\u7840\u7684\u3002 \u7136\u540e\u662f\u5f88\u5f3a\u5927\u7684\u547d\u4ee4 :x1,x2 s/A \u4e32 / B \u4e32 / \u4f5c\u7528\u662f\u628a\u7b2c x1 \u884c\u81f3 x2 \u884c\u4e2d\u7684\u6240\u6709 A \u4e32\u66ff\u6362\u6210 B \u4e32\u3002\u60f3\u8c61\u4e00\u4e0b\u9898\u5199\u5b8c\u4e86\uff0c\u4f46\u662f\u53d1\u73b0\u6ca1\u5f00 long long \u7684\u65f6\u5019\uff0c\u5b8c\u5168\u4e0d\u7edd\u671b\u6709\u6ca1\u6709\uff0c\u4e00\u4e2a\u5c0f\u547d\u4ee4\uff0c\u5999\u4e0d\u53ef\u8a00\u3002\u77ac\u95f4\u6240\u6709 int \u53d8 long long \u3002 \u4ee5\u4e0a\u90fd\u662f Vim \u5185\u90e8\u7684\u547d\u4ee4\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5982\u679c\u547d\u4ee4\u5f62\u5f0f\u662f :! \u547d\u4ee4 \u90a3\u4e48\u5c31\u5c06\u5728\u5916\u90e8\u6267\u884c\u547d\u4ee4\uff0c\u5373\u662f\u4ee5 bash \u7ec8\u7aef\u6267\u884c\u547d\u4ee4\u3002\u65e2\u7136\u90fd\u662f\u5916\u90e8 bash \u4e86\u6211\u5c31\u4e0d\u591a\u505a\u4ecb\u7ecd\u4e86\uff0c\u90a3\u5757\u5730\u4e0d\u5f52\u6211\u7ba1\u2026\u2026","title":"\u547d\u4ee4\u884c\u6a21\u5f0f"},{"location":"intro/editors/#_6","text":"\u53ef\u89c6\u6a21\u5f0f\u7684\u4f5c\u7528\u603b\u7ed3\u8d77\u6765\u5927\u6982\u5c31\u662f\u9009\u4e2d\u9ad8\u4eae\uff0c\u4f46\u662f\u5757\u72b6\u7684\u53ef\u89c6\u6a21\u5f0f\u53ef\u4ee5\u5e72\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u4e0d\u8fc7\u592a\u9ebb\u70e6\u4e86\uff0c\u5bf9\u4e8e\u65b0\u4eba\u6765\u8bf4\u5927\u6982\u4f1a\u8111\u9614\u75bc\u3002 \u666e\u901a\u6a21\u5f0f\u4e0b\u6309 v \u5373\u53ef\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\uff0c hjkl \u53ef\u4ee5\u79fb\u52a8\u9ad8\u4eae\u9009\u533a\u67d0\u4e00\u5934\uff0c\u5982\u679c\u53d1\u73b0\u53cd\u4e86\u6216\u8005\u4f60\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\u7684\u65f6\u5019\u662f\u5728\u60f3\u8981\u9009\u4e2d\u533a\u57df\u7684\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u4e0d\u7528\u6025\u7740\u9000\u51fa\u91cd\u8fdb\uff0c\u66f4\u4e0d\u7528\u82b1\u65f6\u95f4\u53c8\u79fb\u56de\u53bb\uff0c\u53ea\u9700\u8981\u6309 o \u5373\u53ef\u5207\u6362\u6d3b\u52a8\u7aef\uff0c\u64cd\u4f5c\u9ad8\u4eae\u9009\u533a\u7684\u53e6\u4e00\u5934\u3002\u6216\u8005\u7528\u9f20\u6807\u4e5f\u4e0d\u662f\u4e0d\u884c\u5566\u2026\u2026 \u7528\u9f20\u6807\u9009\u4e2d\u9ad8\u4eae\u9009\u533a\u5f53\u7136\u4e5f\u53ef\u4ee5\u8bf4\u662f\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\u7684\u529e\u6cd5\u4e4b\u4e00\u3002 \u7136\u540e\u5c31\u662f y \u6216\u8005 d \u64cd\u4f5c\uff0c\u6ca1\u4e86 QwQ\u3002 emm \u57fa\u7840\u5e94\u8be5\u5c31\u7528\u5230\u8fd9\u4e9b\u4e86\u5427\uff0c\u5f80\u540e\u7684\u63d2\u4ef6\uff0c\u914d\u7f6e\uff0c\u66f4\u591a\u64cd\u4f5c\u5728\u5bf9\u5e94\u7bc7\u5e45\u91cc\u3002 \u6700\u540e\u5176\u5b9e Vim \u8fd8\u6709\u4e00\u4e9b\u57fa\u7840\u64cd\u4f5c\uff0c\u5b83\u4eec\u5728 Vim \u81ea\u5e26\u7684\u6559\u7a0b\u91cc\u5c06\u4f1a\u8bb2\u8ff0\u3002\u6253\u5f00\u7ec8\u7aef\u8f93\u5165\uff1a 1 vimtutor \u5373\u53ef\u8fdb\u5165\u6559\u7a0b\uff0c\u4e8c\u4e09\u5341\u5206\u949f\u4f60\u5c31\u80fd\u638c\u63e1\u57fa\u7840\u4e86\uff0c\u4f46\u5e94\u5f53\u52a0\u4ee5\u7ec3\u4e60\u624d\u80fd\u5f7b\u5e95\u638c\u63e1\u3002","title":"\u53ef\u89c6\u6a21\u5f0f"},{"location":"intro/editors/#_7","text":"\u57fa\u7840\u7bc7\u91cc\u8bf4\u8fc7\uff0cVim \u4e0e Emacs \u4e4b\u6240\u4ee5\u80fd\u6210\u4e3a\u4e24\u5927\u5dc5\u5cf0\u7684\u795e\u5668\u662f\u56e0\u4e3a\u5176\u9ad8\u5ea6\u7684\u6269\u5c55\u4e0e\u53ef\u5b9a\u5236\u6027\uff0c\u800c\u6700\u80fd\u4f53\u73b0\u8fd9\u4e00\u7279\u6027\u7684\u5c31\u662f\u63d2\u4ef6\u4e86\u3002\u5b83\u4eec\u662f\u6700\u6709\u9b45\u529b\u7684\u4e00\u90e8\u5206\uff0c\u662f\u6700\u4ee4\u4f60\u65e0\u6cd5\u6297\u62d2\u7684\u7ec4\u6210\u3002 \u867d\u7136\u8003\u573a\u4e0a\u57fa\u672c\u4e0a\u4e0d\u80fd\u7528\u63d2\u4ef6\uff0c\u4f46\u662f\u65e5\u5e38\u7684\u5b66\u4e60\u4e2d\uff0c\u63d2\u4ef6\u5c06\u5bf9\u4f60\u7684\u6548\u7387\u6709\u5f88\u5927\u7684\u63d0\u9ad8\uff0c\u800c\u4e14\u4e00\u4e9b\u63d2\u4ef6\u7684\u90e8\u5206\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7 Vim \u81ea\u5e26\u5b9e\u73b0\u4ee5\u53ca\u914d\u7f6e\u5b9e\u73b0\u3002 \u9996\u5148\uff0c\u5176\u5b9e\u4ece\u524d\u63d2\u4ef6\u7684\u5b89\u88c5\u5fc5\u987b\u4e0b\u8f7d\u4e4b\u540e\u4e22\u5230 .vim \u6587\u4ef6\u5939\u4e2d\uff0c\u5220\u4e86\u53c8\u8981\u4e0b\u4e91\u4e91\uff0c\u5341\u5206\u9ebb\u70e6\u3002\u4e8e\u662f\u5728\u4f7f\u7528\u8005\u4eec\u7684\u6363\u9f13\u4e0b\uff0c\u4e00\u679a\u5f3a\u5927\u7684\u63d2\u4ef6\u7ba1\u7406\u5668\u7531\u6b64\u8bde\u751f\u2014\u2014Vundle\u3002 \u5f53\u7136\u4f60\u7684\u914d\u7f6e\u91cc\u5fc5\u987b\u6709\u5982\u4e0b\u4e24\u884c\uff1a 1 2 set nocompatible filetype plugin on \u4ee5\u786e\u4fdd\u4f60\u7684 Vim \u53ef\u4ee5\u52a0\u8f7d\u63d2\u4ef6\uff0c\u54ea\u6015\u662f Vim \u539f\u751f\u5185\u7f6e\u7684\u63d2\u4ef6\u4e5f\u9700\u8981\u7684\u3002 \u81f3\u4e8e\u5177\u4f53\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u662f\u5728 home \u76ee\u5f55\u4e0b\u5efa\u7acb\u6587\u4ef6\u5939 .vim\u3002\u7136\u540e\u6253\u5f00\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a 1 2 sudo apt-get install git git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim \u5c31\u5b89\u88c5\u597d\u4e86\u3002 \u7136\u540e\u5728 .vim \u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u6587\u4ef6\u5939 plugin \u3002\u8fd9\u4e2a\u6587\u4ef6\u5939\u7528\u4e8e\u5b58\u653e\u90a3\u79cd\u4e0d\u80fd\u7528 Vundle \u63d2\u4ef6\u4e0b\u8f7d\uff0c\u800c\u5728\u522b\u7684\u5730\u65b9\u6709\u5f97\u4e0b\u8f7d\u7684\u811a\u672c\u63d2\u4ef6\uff0c\u540d\u5b57\u662f xxx.vim\uff0c\u76f4\u63a5\u6254\u8fdb\u8fd9\u4e2a\u6587\u4ef6\u5939\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\u3002 Vundle \u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u7ba1\u7406\u63d2\u4ef6\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u4e2d\u5199\u4e00\u4e0b\uff0c\u5e76\u5728 Vim \u4e2d\u6267\u884c :PluginInstall \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u4ece github \u4e0a\u62c9\u53d6\u63d2\u4ef6\uff0c\u5f53\u7136\u4e5f\u62c9\u53d6\u4e0d\u4e86 github \u4e0a\u6ca1\u6709\u7684 = =\u3002\u800c\u5982\u679c\u4e0d\u60f3\u7528\u4e86\u4ec0\u4e48\u63d2\u4ef6\u4e5f\u65e0\u987b\u5220\u53bb\uff0c\u5728\u914d\u7f6e\u4e2d\u6ce8\u91ca\u6389\u90a3\u4e2a\u63d2\u4ef6\u7684\u76f8\u5173\u5c31\u884c\u4e86\u3002\u5177\u4f53\u914d\u7f6e\u8bf7\u79fb\u6b65\u914d\u7f6e\u7bc7\uff0c\u6b64\u5904\u5c06\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u6211\u7684\u5404\u4e2a\u63d2\u4ef6\u3002","title":"\u63d2\u4ef6\u7bc7"},{"location":"intro/editors/#_8","text":"\u4f7f\u7528 Vim \u7684\u65f6\u5019\u6253\u5f00\u6587\u4ef6\u663e\u7136\u6beb\u4e0d\u65b9\u4fbf\uff0c\u4e0d\u8bba\u662f\u5728\u76ee\u6807\u6587\u4ef6\u5939\u4e0b\u5229\u7528 1 vim filename \u6253\u5f00\u6587\u4ef6\u8fd8\u662f\u5728 Vim \u5185\u4f7f\u7528 :e filename \u6765\u6253\u5f00\u6587\u4ef6\u663e\u7136\u90fd\u8fc7\u4e8e\u9ebb\u70e6\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u66f4\u597d\u7684\u6cd5\u5b50\uff1f \u7b54\u6848\u662f\u663e\u7136\u7684\uff0cVim \u7684\u7528\u6237\u4eec\u5f00\u53d1\u4e86 nerdtree \u8fd9\u4e00\u63d2\u4ef6\u3002\u8fd9\u4e2a\u63d2\u4ef6\u8fbe\u5230\u4e86\u4e00\u79cd\u7c7b\u4f3c\u4e8e VScode \u4e2d\u7684\u6548\u679c\u2014\u2014\u5de5\u7a0b\u76ee\u5f55\u6811\uff0c\u4e4b\u9700\u5728\u5de6\u4fa7\u76ee\u5f55\u680f\u9009\u4e2d\u76f8\u5e94\u6587\u4ef6\u5373\u53ef\u6253\u5f00\u76f8\u5e94\u6587\u4ef6\u3002\u8fd9\u5728\u914d\u7f6e\u7bc7\u4e2d\u5c06\u4f1a\u6709\u4ecb\u7ecd\u3002nerdtree \u7684\u5f00\u542f\u65b9\u5f0f\u662f\u5728 Vim \u4e2d\u8f93\u5165 :NERDTreeToggle \uff0c\u5b83\u4f1a\u5728\u5de6\u4fa7\u6253\u5f00\u4e00\u4e2a\u4fa7\u8fb9\u680f\u7a97\u53e3\u3002\u6211\u77e5\u9053\u8fd9\u663e\u7136\u592a\u8fc7\u9ebb\u70e6\uff0c\u6240\u4ee5\u5728\u914d\u7f6e\u4e2d\u6211\u7ed9\u5b83\u8d4b\u4e88\u4e86 F10 \u8fd9\u4e2a\u5feb\u6377\u952e\u3002\u81f3\u4e8e\u5177\u4f53\u8fd8\u6709\u4ec0\u4e48\u5feb\u6377\u952e\uff0c\u8be6\u8bf7\u53c2\u7167 \u6b64\u6587\u7ae0 \u3002 \u4e5f\u8bb8\u6709\u4eba\u8981\u8bf4\u8003\u573a\u4e0a\u8be5\u5982\u4f55\u5462\uff1f\u6ca1\u5173\u7cfb\uff0cVim \u81ea\u5e26\u4e86\u4e00\u4e2a\u7a0d\u900a\u4e00\u7b79\u7684\u6587\u4ef6\u7ba1\u7406\u5668 netrw \u3002\u5982\u679c\u4f60\u7684\u547d\u4ee4\u662f\u8fd9\u6837\u7684 1 vim \u6587\u4ef6\u5939 ( \u6216\u8005\u8bf4\u76ee\u5f55 ) \u8def\u5f84 \u6216\u8005\u662f\u5728 Vim \u4e2d e \u6587\u4ef6\u5939\u8def\u5f84 \u5373\u53ef\u6253\u5f00\u76ee\u5f55\u63d2\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4eb2\u624b\u8bd5\u4e00\u8bd5\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u8fd8\u662f\u4e0d\u96be\u7422\u78e8\u7684\u3002\u540c\u65f6\u5728\u4e0a\u8ff0\u4e24\u4e2a\u547d\u4ee4\u4e2d\u53ef\u4ee5\u7528 . \u6765\u8868\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u610f\u601d\u662f\u53ef\u4ee5\u7528 1 vim . \u6216\u8005\u5728 Vim \u4e2d\u4f7f\u7528 e . \u6765\u5f00\u542f\u63d2\u4ef6 \u5f53\u7136\uff0c\u5982\u679c\u4ec5\u662f\u5982\u6b64\u8fd8\u4e0d\u591f\uff0c\u4f7f\u7528\u6587\u4ef6\u7ba1\u7406\u5668\u6253\u5f00\u6587\u4ef6\u7684\u8bdd\uff0c\u5bb9\u6613\u4f7f\u5de5\u4f5c\u76ee\u5f55\u51fa\u73b0\u5dee\u9519\uff0c\u4ece\u800c\u5bfc\u81f4\u7f16\u8bd1\u7684\u7a0b\u5e8f\u4e0d\u5b58\u5728\u4e8e\u539f\u6587\u4ef6\u5939\u4e2d\uff0c\u6240\u4ee5\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd8\u9700\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 set autochdir \u5b83\u7684\u4f5c\u7528\u662f\u4f1a\u81ea\u52a8\u628a\u5de5\u4f5c\u76ee\u5f55\u79fb\u52a8\u5230\u5f53\u524d\u7f16\u8f91\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u3002","title":"\u6587\u4ef6\u7ba1\u7406"},{"location":"intro/editors/#_9","text":"\u9996\u5148\u5c31\u662f\u90a3\u884c\u767d\u4e4e\u4e4e\u7684\u72b6\u6001\u680f\uff0c\u663e\u793a\u7684\u4fe1\u606f\u8fd8\u4e0d\u591f\u591a\uff0c\u4e5f\u4e0d\u597d\u770b\u5bf9\u5427\u3002\u663e\u793a\u7684\u4fe1\u606f\u662f\u53ef\u4ee5\u5728\u914d\u7f6e\u4e2d\u5199\u7684\uff0c\u8bf7\u79fb\u6b65\u914d\u7f6e\u7bc7\u3002\u4f46\u662f\u4e0d\u597d\u770b\u7684\u95ee\u9898\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u8fd9\u4e2a\u65f6\u5019\u5c31\u8f6e\u5230\u4e86 airline \u63d2\u4ef6\u51fa\u9a6c\u4e86\uff0c\u4e0d\u591a\u8bf4\uff0c\u653e\u4e24\u5f20\u56fe\u81ea\u7136\u660e\u767d\u3002 \u7136\u540e\uff0c\u5176\u5b9e\u6211\u4eec\u7684 nerdtree \u63d2\u4ef6\u4e5f\u662f\u53ef\u4ee5\u7f8e\u5316\u7684\uff0c\u540c\u65f6\u591a\u5b89\u88c5\u4e00\u4e2a\u5c0f\u63d2\u4ef6\u548c\u4e00\u70b9\u914d\u7f6e\u5373\u53ef\u8fbe\u5230\u7f8e\u5316\u6548\u679c\uff0c\u5177\u4f53\u8bf7\u79fb\u6b65\u914d\u7f6e\u7bc7\u98df\u7528\u3002","title":"\u7f8e\u5316\u754c\u9762"},{"location":"intro/editors/#_10","text":"\u8fd9\u4e2a\u5176\u5b9e\u53ef\u6709\u53ef\u65e0\uff0c\u662f\u4e00\u4e2a\u80fd\u5feb\u6377\u952e\u6253\u5f00\u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u4e2a\u63d2\u4ef6 vimplus-startify\uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u3002","title":"\u542f\u52a8\u754c\u9762"},{"location":"intro/editors/#_11","text":"commentary \uff1a\u5feb\u6377\u952e gc \u6ce8\u91ca\u9009\u4e2d\u884c\uff0c gcu \u64a4\u9500\u4e0a\u6b21\u6ce8\u91ca\u3002 syntastic \uff1a :w \u4fdd\u5b58\u65f6\u63d0\u793a\u8bed\u6cd5\u9519\u8bef\uff0c\u9700\u914d\u7f6e\u4e2d\u8bbe\u7f6e\u6807\u9519\u6837\u5f0f\uff0c\u5982\u6211\u7684\u5c31\u4f1a\u5728\u884c\u524d\u663e\u793a >> \u3002 easymotion \uff1a\u5feb\u901f\u8df3\u8f6c\uff0c\u6211\u81ea\u5df1\u5176\u5b9e\u90fd\u4e0d\u4f1a\u7528 233\uff0c\u9700\u8981\u53ef\u4ee5\u67e5\u9605\u8d44\u6599\u3002 rainbow \uff1a \u5f69\u8679\u62ec\u53f7\uff0c\u4f7f\u5177\u6709\u5305\u542b\u5173\u7cfb\u7684\u62ec\u53f7\u663e\u73b0\u51fa\u4e0d\u540c\u7684\u989c\u8272\uff0c\u589e\u5f3a\u591a\u62ec\u53f7\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 delimitMate \uff1a \u62ec\u53f7\u8865\u5168\u529f\u80fd\u3002\u540c\u65f6\u8003\u8bd5\u4e2d\u53ef\u7528\u914d\u7f6e\u5b9e\u73b0\u90e8\u5206\u529f\u80fd\uff0c\u914d\u7f6e\u7bc7\u4e2d\u4f1a\u8bb2\u8ff0\u3002 vimcdoc \uff1a\u6c49\u5316 Vim \u5728\u7ebf\u6587\u6863\u3002 gundo \uff1a\u8fd9\u4e2a\u63d2\u4ef6\u5c06\u80fd\u591f\u663e\u793a\u4f60\u7684\u6587\u4ef6\u4fee\u6539\u6811\uff0c\u5c31\u50cf github \u4e0a\u4e00\u822c\u80fd\u591f\u56de\u5230\u5386\u53f2\u7248\u672c\uff0c\u65f6\u5149\u673a\u554a QwQ \u3002Vim \u4e2d :GundoToggle \u5373\u53ef\u5728\u5de6\u4fa7\u6253\u5f00\u65f6\u5149\u673a\u3002 vimim \uff1a\u8fd9\u4e2a\u7684\u5b89\u88c5\u4e0d\u5728\u914d\u7f6e\u4e2d\uff0c\u76f8\u5f53\u4e8e Vim \u81ea\u5e26\u4e2d\u6587\u8f93\u5165\u6cd5\uff0c\u9700\u5728 .vim \u4e2d\u521b\u5efa\u6587\u4ef6\u5939 plugin \u5e76\u628a \u4ece\u8fd9\u91cc \u4e0b\u5f97\u7684\u6587\u4ef6\u6254\u5165\u6b64\u6587\u4ef6\u5939\u4e2d\u5373\u53ef\u3002\u6253\u5f00 Vim \u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u6309\u4e0b Ctrl + / \u5373\u53ef\u542f\u7528\u3002\u4f46\u662f\u4f7f\u7528\u7684\u662f\u4e91\u8bcd\u5e93\uff0c\u82e5\u6ca1\u7f51\u5c31\u4f1a\u5361\u6b7b\u3002\u6240\u4ee5\u5efa\u8bae\u4e0b\u8f7d \u672c\u5730\u8d85\u5927\u8bcd\u5e93 \uff0c\u4e5f\u653e\u5165 plugin \u6587\u4ef6\u5939\u4e2d\uff0c\u4e0e\u63d2\u4ef6\u811a\u672c\u540c\u76ee\u5f55\u5373\u53ef\u542f\u7528\u3002 vim-instant-markdown \uff1a\u8fd9\u4e2a\u63d2\u4ef6\u53ef\u5c31\u5389\u5bb3\u4e86\u3002Vim \u7528\u4e60\u60ef\u4e86\u4e4b\u540e\u4ec0\u4e48\u90fd\u60f3\u7528 Vim \u6765\u505a\uff0c\u6bd4\u5982\u60f3\u7528 Vim \u6765\u5199 Markdown \u5e76\u5b9e\u65f6\u9884\u89c8\u600e\u4e48\u529e\uff1f\u4e8e\u662f\u8fd9\u4e2a\u5f3a\u5927\u7684\u63d2\u4ef6\u5c31\u8bde\u751f\u4e86\uff0c\u5f53\u6253\u5f00 Markdown \u6587\u4ef6\u65f6\u4f1a\u81ea\u52a8\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u4e00\u4e2a\u6807\u7b7e\u9875\uff0c\u5c06\u80fd\u591f\u5b9e\u65f6\u9884\u89c8\u4f60\u7684 Vim \u4e2d\u7684 markdown \u5185\u5bb9\u3002 \u4e00\u5207\u63d2\u4ef6\u7684\u5b89\u88c5\u5199\u6cd5\u53ca\u5feb\u6377\u952e\u53ca\u914d\u7f6e\u7686\u5728\u914d\u7f6e\u7bc7\u4e2d\uff0c\u8bf7\u79fb\u6b65\u3002","title":"\u5c0f\u65b9\u4fbf\u6027\u63d2\u4ef6"},{"location":"intro/editors/#_12","text":"\u6211\u7684\u914d\u7f6e Ps: \u6211\u7684 .vimrc \u65f6\u523b\u5728\u6539\uff0c\u6240\u4ee5\u8fd9\u53ea\u662f\u4e2a\u526f\u672c\u2026\u2026 \u7ed3\u5408\u6211\u7684\u914d\u7f6e\u8bb2\u4e00\u8bb2\u4e00\u4e9b Vim \u4e2d\u7684\u5c0f\u7ec6\u8282\u548c\u5feb\u6377\u952e\u4ee5\u53ca\u4e00\u4e9b\u2026\u2026 \u4e03\u91cc\u516b\u91cc\u7684\u4e1c\u897f\uff1f Vim \u7684\u914d\u7f6e\u8bed\u6cd5\u6ca1\u90a3\u4e48\u9ebb\u70e6\uff0c\u57fa\u672c\u4e0a\u5c31\u662f set \u5f00\u542f\u9009\u9879\uff0ccall xxx() \u8c03\u7528\u51fd\u6570\uff0cfunc \u4e0e endfunc \u5b9a\u4e49\u51fd\u6570\uff0cexec \u6267\u884c\u547d\u4ee4\uff0cif \u548c endif \u63cf\u8ff0\u4ee5\u4e0b\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\" \u8868\u793a\u6ce8\u91ca\uff0csource \u8868\u793a\u5e94\u7528\u5565\u7684\uff0c\u8bed\u6cd5\u548c Vim \u547d\u4ee4\u884c\u4e0b\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u662f\u5f53\u4f60\u628a\u914d\u7f6e\u6587\u4ef6\u5199\u5165\uff0cVim \u5f00\u542f\u65f6\u4f1a\u81ea\u52a8\u6267\u884c\u914d\u7f6e\u4e2d\u7684\u6bcf\u4e00\u884c\u8bed\u53e5\u3002","title":"\u914d\u7f6e\u7bc7"},{"location":"intro/editors/#_13","text":"\u6211\u5fc5\u987b\u8bf4\u6211\u7684\u914d\u7f6e\u91cc\u5176\u5b9e\u6ca1\u6709\u80cc\u666f\u65b9\u9762\u7684\u8bbe\u7f6e\uff0c\u56e0\u4e3a\u6211\u9ed1\u80cc\u666f\u52a0\u4e2a\u900f\u660e\u5316\u5f88\u8212\u670d\u4e86\u2026\u2026 \u63a5\u4e0b\u6765\u6211\u4f1a\u6311\u91cd\u8981\u7684\u914d\u7f6e\u6765\u8bb2\uff0c\u5269\u4e0b\u7684\u53ef\u4ee5\u7ed3\u5408\u6211\u7684\u914d\u7f6e\u5185\u7684\u6ce8\u91ca\u6765\u770b \u9996\u5148\u4f7f\u7528\u5404\u79cd\u63d2\u4ef6\u5bb9\u6613\u4e0e vi \u7684\u6a21\u5f0f\u4ea7\u751f\u51b2\u7a81\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5173\u95ed vi \u7684\u529f\u80fd\uff0c\u90a3\u4e48\u5c31\u6709\u4e86\u5982\u4e0b\u914d\u7f6e\uff1a 1 set nocompatible \u901a\u8fc7\u8fd9\u4e2a\u8bbe\u7f6e\u5c06\u5173\u95ed\u539f\u6709 vi \u7684\u529f\u80fd\u4ee5\u9632\u51b2\u7a81 \u968f\u540e\uff0c\u5f53\u4f60\u6253\u5f00\u4f60\u7684 cpp \u6587\u4ef6\u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u53ca\u5176\u4e4b\u4e11\uff0c\u56e0\u4e3a\u6ca1\u6709\u4e86\u8bed\u6cd5\u9ad8\u4eae\uff0c\u4e00\u5207\u90fd\u662f\u4e00\u4e2a\u989c\u8272\u4e86\u3002\u90a3\u4e48\u914d\u7f6e\u4e2d\u9700\u52a0\u5165\u5982\u4e0b\u4e24\u884c 1 2 syntax enable syntax on \u5206\u522b\u662f\u5f00\u542f\u9ad8\u4eae\u652f\u6301\u4e0e\u5f00\u542f\u8bed\u6cd5\u9ad8\u4eae \u7136\u540e\u662f\u6211\u4eec\u53ef\u7231\u7684\u72b6\u6001\u680f\uff0c set laststatus=2 \u8fd9\u884c\u914d\u7f6e\u5c06\u4f1a\u4f7f\u5f97\u72b6\u6001\u680f\u603b\u662f\u663e\u793a\uff0c\u800c\u72b6\u6001\u680f\u6240\u663e\u793a\u7684\u4fe1\u606f\u5728\u914d\u7f6e\u4e2d\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u3002\u8bbe\u7f6e\u5982\u4e0b\uff1a 1 set statusline = \\ % < %F[% 1 *%M%*% n %R%H]% = \\ % y \\ % 0 ( %{& fileformat }\\ [%{ ( & fenc == \\ \"\\\"?&enc:&fenc).(&bomb?\\\",BOM\\\":\\\"\\\" ) }]\\ % c :% l /%L% ) \u8fd9\u4e00\u884c\u4f1a\u4f7f\u72b6\u6001\u680f\u663e\u793a\u5305\u62ec\u6587\u4ef6\u8def\u5f84\uff0c\u6a21\u5f0f\uff0c\u6587\u4ef6\u7c7b\u578b\uff0c\u6587\u4ef6\u7f16\u7801\uff0c\u6240\u5728\u884c\u6570\u4e0e\u5217\u6570\uff0c\u4ee5\u53ca\u5149\u6807\u6240\u5728\u5904\u662f\u6587\u4ef6\u7684\u767e\u5206\u4e4b\u591a\u5c11\u3002\u52a0\u4e0a airline \u63d2\u4ef6\uff0c\u65e2\u7f8e\u89c2\u53c8\u5b9e\u7528\u3002 \u518d\u7136\u540e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6362\u884c\u7b26\u662f\u4e0d\u53ef\u88ab\u5220\u9664\u7684\uff0c\u9664\u975e\u4f7f\u7528 dd \u547d\u4ee4\u6216\u8005 J \u547d\u4ee4\u624d\u53ef\u505a\u5230\u3002\u90a3\u4e48\u6211\u4eec\u9700\u8981 set backspace=indent,eol,start \u8fd9\u884c\u914d\u7f6e\u6765\u89e3\u9664\u8fd9\u79cd\u9650\u5236\u3002 \u663e\u7136\u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u90a3\u5c31\u662f\u884c\u53f7\u7684\u95ee\u9898\u3002\u4e0d\u7ba1\u662f\u8bc4\u6d4b\u6587\u4ef6\u5199\u4e86\u591a\u5c11\u884c\u8fd8\u662f\u60f3\u8981\u4f7f\u7528 \u6570\u5b57 + G \u7684\u547d\u4ee4\u8df3\u81f3\u6307\u5b9a\u884c\uff0c\u6ca1\u6709\u884c\u53f7\u7684\u663e\u793a\u80af\u5b9a\u662f\u5d29\u6e83\u7684\u3002\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 set number \u5f00\u542f\u884c\u53f7\u663e\u793a\u7684\u529f\u80fd\u3002\u7136\u540e\u662f Vim \u7684\u81ea\u52a8\u6298\u884c\u529f\u80fd\uff0c\u90a3\u5c31\u662f\u5f53\u67d0\u4e00\u884c\u8d85\u8fc7\u4e86 Vim \u7a97\u53e3\u7684\u8fb9\u754c\uff0cVim \u4f1a\u600e\u4e48\u505a\u5462\uff1f\u591a\u51fa\u7684\u90e8\u5206\u4f1a\u81ea\u52a8\u663e\u793a\u5728\u4e0b\u4e00\u884c\uff0c\u800c\u8fd9\u79cd\u591a\u51fa\u6765\u7684\u884c\u524d\u9762\u662f\u6ca1\u6709\u884c\u53f7\u7684\uff0c\u6bd4\u8f83\u597d\u8fa8\u8ba4\uff0c\u8fd9\u4e9b\u884c\u88ab\u79f0\u4e3a\u5c4f\u5e55\u884c\uff0c\u800c\u6839\u636e\u884c\u53f7\u4e00\u4e00\u5bf9\u5e94\u7684\u4fbf\u79f0\u4f5c\u5b9e\u9645\u884c\u3002\u4f46\u662f\u4ec5\u4ec5\u51ed\u7740\u770b\u524d\u9762\u7684\u884c\u53f7\u6765\u8fa8\u8ba4\u67d0\u4e2a\u6298\u4e0b\u6765\u7684\u884c\u5c5e\u4e8e\u90a3\u4e2a\u5b9e\u9645\u884c\u7684\u8bdd\uff0c\u8fd8\u662f\u4e0d\u591f\u5feb\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 set cursorline \u6765\u5f00\u542f\u9ad8\u4eae\u663e\u793a\u5f53\u524d\u884c\uff0c\u800c\u8fd9\u4e2a\u9ad8\u4eae\u4e5f\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\uff0c\u6211\u7684\u914d\u7f6e\u91cc\u4e5f\u6709\u3002 \u7136\u540e\u662f\u6211\u4eec\u5728\u57fa\u7840\u7bc7\u4e2d\u63d0\u5230\u8fc7\u7684\uff0c\u5f00\u542f\u9f20\u6807\u652f\u6301 set mouse=a \uff0c\u4ee5\u53ca\u63d2\u4ef6\u7bc7\u4e2d\u63d0\u53ca\u7684 set autochdir \u4e0e\u8fdb\u9636\u7bc7\u4e2d\u6709\u7684 set fillchars=vert:\\ ,stl:\\ ,stlnc:\\ \u8fd9\u4e09\u4e2a\u914d\u7f6e\uff0c\u4f5c\u7528\u5404\u6709\u63d0\u53ca\u3002 \u5176\u4ed6\u7684\u5f80\u6211\u914d\u7f6e\u91cc\u770b\u5566 wwww\u3002 \u90a3\u4e2a zsh \u662f\u4e00\u4e2a shell \u7684\u76f8\u5173\u7a0b\u5e8f\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u67e5\uff0c\u6ca1\u5174\u8da3\u7684\u5220\u6389\u5427 QwQ\u3002 \u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u5c31\u662f\u6587\u4ef6\u7f16\u7801\uff0c\u8bbe\u7f6e\u5982\u4e0b\uff1a 1 2 3 4 5 set langmenu = zh_CN.UTF -8 set helplang = cn set termencoding = utf -8 set encoding = utf8 set fileencodings = utf8 , ucs - bom , gbk , cp936 , gb2312 , gb18030","title":"\u57fa\u7840\u8bbe\u7f6e"},{"location":"intro/editors/#_14","text":"\u5176\u5b9e Vim \u666e\u901a\u6a21\u5f0f\u4e0b\u6ca1\u6709\u591a\u5c11\u6309\u952e\u662f \"\u81ea\u7531\u8eab\"\uff0c\u90a3\u4e48\u7528\u6237\u8be5\u5982\u4f55\u5b9a\u5236\u81ea\u5df1\u7684\u5feb\u6377\u952e\u5462\uff1fVim \u4e3a\u6b64\u63d0\u4f9b\u4e86 leader \u952e\u6765\u670d\u52a1\u3002 leader \u952e\u5728\u914d\u7f6e\u4e2d\u7531\u81ea\u5df1\u5b9a\u5236\uff0c\u53ea\u9700\u8981\u77ed\u77ed\u4e00\u884c 1 let mapleader \uff1d \"\" \u53cc\u5f15\u53f7\u4e4b\u95f4\u5c31\u662f\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684 leader \u952e\u5566\u3002 \u8bbe\u7f6e\u5feb\u6377\u952e\u600e\u4e48\u5199\u5462\uff1f 1 2 nnoremap \u5feb\u6377\u952e \u6307\u4ee4 inoremap \u5feb\u6377\u952e \u6307\u4ee4 \u4e24\u884c\u5206\u522b\u4ee3\u8868\u4e86\u5728\u666e\u901a\u6a21\u5f0f\u4e0b\u548c\u63d2\u5165\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u6267\u884c\u6307\u4ee4\u3002\u5f53\u7136\u6307\u4ee4\u4e0d\u7528\u60f3\u591a\u4e86\uff0c\u6ca1\u6709\u4ec0\u4e48\u8bed\u6cd5\uff0c\u5c31\u662f\u76f8\u5f53\u4e8e\u5728\u952e\u76d8\u4e0a\u6309\u4f60\u6307\u4ee4\u4e2d\u5199\u4e0b\u7684\u952e\u800c\u5df2\u2026\u2026 \u9996\u5148\u6211\u7684\u4e2a\u4eba\u5feb\u6377\u952e\u9700\u6c42\u5176\u5b9e\u4e0d\u662f\u5f88\u591a\uff0c\u6211\u7684 leader \u952e\u662f ` \uff0c\u4f46\u662f\u5904\u4e8e\u4e00\u79cd\u5750\u51b7\u677f\u51f3\u7684\u72b6\u6001\uff0c\u5c31\u66f4\u65b0\u63d2\u4ef6\u7684\u65f6\u5019\u7528\u4e00\u7528\uff0c\u4e0d\u8fc7\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u6211\u7684\u8bbe\u7f6e\u662f\uff1a 1 nnoremap < leader >< leader > i :PluginInstall < CR > <CR> \u4ee3\u8868\u56de\u8f66\u3002\u8bbe\u7f6e\u4e4b\u540e\u53ea\u9700\u8981\u8fde\u7eed\u6309 ``i \u5373\u53ef\u66f4\u65b0\u63d2\u4ef6\uff0c\u5f88\u65b9\u4fbf\u3002 \u90a3\u4e48\u4f60\u6709\u6ca1\u6709\u731c\u5230\u5982\u4f55\u5229\u7528\u914d\u7f6e\u5199\u51fa\u62ec\u53f7\u8865\u5168\u7684\u90e8\u5206\u529f\u80fd\u5462\uff1f\u6ca1\u9519\uff0c\u5c31\u662f\u5229\u7528\u5feb\u6377\u952e\u3002\u5c06\u63d2\u5165\u6a21\u5f0f\u4e0b\u7684\u5de6\u6269\u53f7\u5f53\u505a\u5feb\u6377\u952e\u5373\u53ef\uff0c\u6307\u4ee4\u5c31\u662f () \u3002\u5982\u679c\u8865\u5168\u540e\u8981\u4f7f\u5149\u6807\u5728\u62ec\u53f7\u91cc\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u4ed4\u7ec6\u89c2\u5bdf\u4f60\u5c31\u4f1a\u53d1\u73b0\u6bcf\u5f53\u9000\u51fa\u63d2\u5165\u6a21\u5f0f\uff0c\u5149\u6807\u603b\u662f\u4f1a\u5411\u540e\u8df3\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\uff0c\u7ec4\u5408 Esc + i \u4e0d\u5c31\u53d8\u6210\u4e86\u5411\u524d\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u63d2\u5165\u5417\uff1f\u603b\u7ed3\u4e0b\u6765\u914d\u7f6e\u5982\u4e0b\uff1a 1 2 3 4 inoremap ( ()< esc > i inoremap [ [] < esc > i inoremap \" \" \" < esc > i inoremap ' ' ' < esc > i \u5f53\u7136\u6211\u7684\u914d\u7f6e\u91cc\u6ca1\u6709\uff0c\u800c\u4e14\u6211\u4e5f\u4e0d\u7528\u62ec\u53f7\u8865\u5168\u63d2\u4ef6\uff0c\u5176\u5b9e\u539f\u56e0\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u7684\u64a4\u9500\u6811\u4f1a\u66f4\u5408\u7406\u4e0e\u597d\u770b\u3002\u4f60\u4f1a\u53d1\u73b0\uff0c\u62ec\u53f7\u8865\u5168\u4e3a\u4e86\u4f7f\u5149\u6807\u56de\u5230\u62ec\u53f7\u5185\uff0c\u5df2\u7ecf\u9000\u51fa\u4e86\u4e00\u6b21\u63d2\u5165\u6a21\u5f0f\uff0c\u90a3\u4e48\u64a4\u9500\u547d\u4ee4\u7684\u6548\u679c\u5c31\u4e0d\u5b8c\u6574\u4e86\u3002\u800c\u4e14\u5176\u5b9e\u63d2\u5165\u6a21\u5f0f\u4e0b\u4f7f\u7528\u65b9\u5411\u952e\uff0c\u4e5f\u76f8\u5f53\u4e0e\u63a8\u51fa\u63d2\u5165\u6a21\u5f0f\u79fb\u52a8\u53c8\u91cd\u65b0\u56de\u5230\u63d2\u5165\u6a21\u5f0f\uff0c\u4e5f\u4f1a\u4f7f\u64a4\u9500\u6811\u4e0d\u5b8c\u6574 = =\u3002\u6240\u4ee5\u4f60\u4f1a\u53d1\u73b0\u8fdb\u9636\u7bc7\u63d0\u5230\u7684\uff0c\u6211\u7684\u914d\u7f6e\u91cc\u90a3\u4e2a\u4e27\u5fc3\u75c5\u72c2\u7684\u4e1c\u897f\u2026\u2026 \u8fd8\u8bb0\u5f97\u8fdb\u9636\u7bc7\u91cc\u7684\u5206\u5c4f\u5417\uff1f\u663e\u7136\u4f7f\u7528\u9f20\u6807\u70b9\u51fb\u6765\u9009\u62e9\u6d3b\u52a8\u7a97\u53e3\u592a\u6162\uff0c\u800c\u79fb\u52a8\u547d\u4ee4\u524d\u52a0\u4e2a Ctrl + w \u4e5f\u4e0d\u4e60\u60ef\u5bf9\u4e0d\u5bf9\uff0c\u6240\u4ee5\u6211\u7684\u505a\u6cd5\u662f\u7528 Ctrl + \u79fb\u52a8\u547d\u4ee4\u6765\u6620\u5c04\u524d\u9762\u7684\u6309\u952e\u7ec4\u5408\u3002 1 2 3 4 nnoremap < c - h > < c - w > h nnoremap < c - l > < c - w > l nnoremap < c - j > < c - w > j nnoremap < c - k > < c - w > k \u5e94\u8be5\u6bd4\u539f\u6765\u7684\u6309\u6cd5\u597d\u8bb0\u4e5f\u597d\u6309\u2026\u2026 \u5427\u2026\u2026 \u8fd8\u8bb0\u5f97\u81ea\u52a8\u6298\u884c\u5427\uff0c\u6211\u4eec\u7684 hjkl \u547d\u4ee4\u5176\u5b9e\u90fd\u662f\u5728\u5b9e\u9645\u884c\u4e4b\u95f4\u79fb\u52a8\uff0c\u800c\u6298\u4e0b\u6765\u7684\u5c4f\u5e55\u884c\u5b9e\u5728\u662f\u6ca1\u6cd5\u5b50\uff0c\u53ea\u80fd\u7528 l \u952e\u4e0d\u65ad\u79fb\u8fc7\u53bb\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c g + \u79fb\u52a8\u547d\u4ee4 \u4fbf\u80fd\u591f\u4f7f\u4f60\u5728\u5c4f\u5e55\u884c\u95f4\u79fb\u52a8\uff0c\u56e0\u4e3a\u8003\u8651\u5230\u8fd9\u79cd\u79fb\u52a8\u7684\u5e38\u7528\uff0c\u6211\u9009\u62e9\u5c06 g + \u79fb\u52a8\u547d\u4ee4 \u4e0e\u79fb\u52a8\u547d\u4ee4\u53cd\u8fc7\u6765\u6620\u5c04\u3002 1 2 3 4 noremap j gj noremap gj j noremap gk k noremap k gk \u521a\u624d\u4e5f\u90fd\u8bf4\u4e86\uff0c\u81ea\u7531\u8eab\u7684\u5feb\u6377\u952e\u4e0d\u591a\uff0c F1~F12 \u5c31\u662f\u65b9\u4fbf\u800c\u81ea\u7531\u7684\u5feb\u6377\u952e\u3002\u90a3\u7528\u5b83\u4eec\u6765\u5e72\u561b\u5462\uff1f F9 \u4e00\u952e\u7f16\u8bd1 \u6211\u60f3\u6709\u4e86\u4e4b\u524d\u7684\u7f16\u8bd1\u547d\u4ee4\uff0c\u57fa\u7840\u7bc7\u547d\u4ee4\u884c\u6a21\u5f0f\u4e2d\u7684\u4ecb\u7ecd\uff0c\u4f60\u5e94\u8be5\u5927\u6982\u80fd\u6709\u4e2a\u601d\u8def\u4e86\u5427\u3002\u4f5c\u51fa\u7684\u64cd\u4f5c\u80af\u5b9a\u5982\u4e0b\uff1a 1 2 3 : w \" \u4fdd\u5b58 : g ++ xxx.cpp - o xxx \" \u7f16\u8bd1 : ./xxx \" \u8fd0\u884c \u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\u6211\u503e\u5411\u4e8e\u5199\u4e2a\u51fd\u6570\uff1a 1 2 3 4 5 6 nnoremap < F9 > : call CompileRunGcc ()< CR > func ! CompileRunGcc () exec \"w\" exec '!g++ % -o %<' exec '!time ./%<' endfunc \u7b2c\u4e00\u884c\u4ee3\u8868\u8fd0\u884c CompileRunGcc \u51fd\u6570\uff0c\u7b2c\u4e8c\u884c\u4ee3\u8868\u5b9a\u4e49\u51fd\u6570\uff0c\u4e09\u81f3\u4e94\u884c\u4ee3\u8868\u51fd\u6570\u8fd0\u884c\u5185\u5bb9\uff0c\u7b2c\u516d\u884c\u4ee3\u8868\u51fd\u6570\u7ed3\u675f\u3002 exec \u8868\u793a\u6267\u884c\u547d\u4ee4\uff0c % \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d\uff0c %< \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d\u53bb\u6389\u540e\u7f00\u7684\u540d\u5b57\u3002\u6211\u60f3\u4f60\u5e94\u8be5\u662f\u770b\u5f97\u61c2\u51fd\u6570\u5185\u5bb9\u7684\u3002 \u4e0d\u8fc7\u5982\u679c\u4f60\u4f7f\u7528\u5f97\u591a\u4e86\uff0c\u5c31\u4f1a\u53d1\u73b0\u5f53\u6309\u4e0b F9 \u7684\u65f6\u5019\u8f6c\u5230\u53e6\u4e00\u4e2a\u5c4f\u5373\u7ec8\u7aef\u8fdb\u884c\u8fd0\u884c\uff0c\u4f46\u662f\u6bcf\u8fd0\u884c\u4e00\u6b21\u90fd\u4f1a\u591a\u4e00\u4e9b\u4fe1\u606f\u3002\u5982\u6b64\u7d2f\u79ef\u7684\u8bdd\u591a\u6765\u51e0\u6b21\u6574\u4e2a\u7ec8\u7aef\u5c31\u6ee1\u4e86\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 bash \u4e0b\u7684\u547d\u4ee4 1 clear \u6765\u6e05\u5c4f\uff0c\u4e0d\u8fc7\u6211\u503e\u5411\u4e8e\u4e5f\u628a\u5b83\u5c01\u88c5\u5728\u4e00\u4e2a\u5feb\u6377\u952e\u5185\uff0c\u6309 F12 \u5c31\u4f1a\u81ea\u52a8\u6e05\u5c4f\u4e86\uff0c\u4e2a\u4eba\u89c9\u5f97\u7528\u7740\u633a\u723d\u2026\u2026 1 2 3 4 nnoremap < F12 > : call Clss ()< CR > func ! Clss () exec '!clear' endfunc \u8fd8\u6709\uff0c\u5728 Vim \u4e2d\u6267\u884c\u5916\u90e8\u547d\u4ee4\u7eb5\u4f7f\u6709 :! \u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u8fd8\u662f\u4e0d\u65b9\u4fbf\uff0c\u8981\u662f\u80fd\u76f4\u63a5\u5728 Vim \u4e2d\u518d\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u5c31\u597d\u4e86\uff0c\u5bf9\u5427\u3002Vim \u4ece 8.0 \u4e4b\u540e\u5c31\u589e\u6dfb\u4e86\u5728\u5185\u90e8\u5206\u4e2a\u5c4f\u6765\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7684\u529f\u80fd\uff0c\u547d\u4ee4\u662f :terminal \u3002\u6211\u4e2a\u4eba\u4e5f\u5c06\u5b83\u8bbe\u7f6e\u6210\u4e86\u5feb\u6377\u952e\uff0c\u4f5c\u4e3a\u5f3a\u8feb\u75c7\u8fd8\u662f\u88c5\u5728\u4e86\u51fd\u6570\u4e2d = =\u3002\u6211\u60f3\u6709\u4e86\u547d\u4ee4\u4f60\u5e94\u8be5\u81ea\u5df1\u4f1a\u5199\u4e86\u3002 1 2 3 4 nnoremap < F8 > : call Term ()< CR > func ! Term () exec 'terminal' endfunc \u6309 F8 \u5c31\u80fd\u5728\u4e0a\u9762\u5206\u51fa\u4e00\u4e2a\u7a97\u53e3\u6253\u5f00\u7ec8\u7aef\u4e86\u3002 \u4ecb\u4e8e\u66f4\u5404\u79cd Vim \u7248\u672c\u7684\u538b\u8feb\uff0cVim \u4f5c\u8005\u4e5f\u662f\u594b\u53d1\u56fe\u5f3a\uff0cVim 8.1 \u53c8\u66f4\u65b0\u4e86\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u5148\u7528 packadd termdebug \u5f00\u542f\u6b64\u8bbe\u7f6e\uff0c\u7136\u540e\u5728 Vim \u4e2d\u8f93\u5165 :Termdebug + \u7f16\u8bd1\u51fa\u7684\u7a0b\u5e8f\u540d\u79f0 \u5373\u53ef\u5f00\u59cb GDB \u7684\u8fc7\u7a0b\uff0c\u5177\u4f53\u8be6\u7ec6\u64cd\u4f5c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u3002\u8fd9\u4e2a\u81ea\u7136\u4e5f\u88ab\u6211\u5c01\u88c5\u51fd\u6570\u4e86 >_<\u3002 1 2 3 4 5 packadd termdebug nnoremap < F11 > : call GDB ()< CR > func ! GDB () exec 'Termdebug %<' endfunc","title":"\u5feb\u6377\u952e\u8bbe\u7f6e"},{"location":"intro/editors/#_15","text":"\u9996\u5148\u662f Tab \u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 set tabstop= \u6765\u5b9a\u4e49 Tab \u7684\u957f\u5ea6\uff0c\u4e00\u822c\u5f53\u7136\u662f 4 \u4e2a\u7a7a\u683c\uff0c\u5728\u7b49\u4e8e\u53f7\u540e\u9762\u586b\u7684\u6570\u5b57\u662f\u591a\u5c11\u90a3\u4e48\u957f\u5ea6\u5c31\u662f\u591a\u5c11\u7a7a\u683c\u3002 \u7136\u540e\u662f\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5f53\u591a\u4e2a\u62ec\u53f7\u5d4c\u5957\u65f6\u7528\u8089\u773c\u663e\u7136\u4e0d\u597d\u770b\u51fa\u5bf9\u5e94\u7684\u62ec\u53f7\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528 set showmatch \u5f00\u542f\u9ad8\u4eae\u663e\u793a\u5339\u914d\u62ec\u53f7\u3002 \u6709\u7684\u65f6\u5019\u6253\u5f00 Vim \u662f\u4e0d\u662f\u7ecf\u5e38\u4f1a\u63d0\u793a\u6709\u4ec0\u4e48 swap \u6587\u4ef6\u662f\u5426\u786e\u8ba4\u5565\u7684\uff0c\u90a3\u4e2a\u662f\u4e34\u65f6\u7f13\u5b58\u6587\u4ef6\uff0c\u633a\u70e6\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 set nobackup \u4e0e set noswapfilei \u6765\u7981\u6b62\u5176\u751f\u6210\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u8212\u723d\u591a\u4e86\uff08\u8fd8\u662f\u5f00\u7740\u5427\uff09\u3002 \u6700\u540e\u561b\uff0c\u5927\u591a\u6570\u65f6\u5019\u8c03\u8bd5\u4ee3\u7801\u90fd\u4f1a\u7528 freopen \u6765\u8f93\u5165\u8f93\u51fa\uff0c\u518d\u5229\u7528\u5206\u5c4f\u64cd\u4f5c\u6765\u6253\u5f00 .in .out \u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5b9e\u65f6\u770b\u5230\u7ed3\u679c\u3002\u4e0d\u8fc7\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u4e4b\u540e\u4f60\u90fd\u4f1a\u53d1\u73b0\u56e0\u4e3a .out \u6587\u4ef6\u7684\u4fee\u6539\u800c\u4f1a\u5f39\u51fa\u4e00\u4e2a\u786e\u8ba4\u9009\u9879\u662f\u5426\u91cd\u65b0\u52a0\u8f7d\u6587\u4ef6\uff0c\u8fd9\u4e2a\u4e5f\u662f\u5f88\u4e0d\u723d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u542f set autoread \u9009\u9879\u4ee5\u81ea\u52a8\u52a0\u8f7d\u6539\u52a8\u7684\u6587\u4ef6\u3002","title":"\u5199\u4ee3\u7801\u597d\u7528\u7684"},{"location":"intro/editors/#_16","text":"\u63d2\u4ef6\u7bc7\u4e2d\u8bf4\u5230\u4e86\u5f3a\u5927\u7684\u63d2\u4ef6\u7ba1\u7406\u5668 Vundle\uff0c\u90a3\u4e48\u5728\u914d\u7f6e\u4e2d\u8be5\u5982\u4f55\u5199\u5462\uff1f\u6846\u67b6\u5982\u4e0b\uff1a 1 2 3 4 set rtp +=~ /.vim/ bundle/Vundle. vim call vundle#begin ( '~/.vim/\u81ea\u5df1\u521b\u5efa\u7684\u7528\u6765\u653e\u63d2\u4ef6\u6587\u4ef6\u7684\u6587\u4ef6\u5939' ) call vundle# end () \u5728\u4e24\u5757\u4e4b\u95f4\u6765\u5199\u9700\u8981\u5b89\u88c5\u7684\u63d2\u4ef6\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a 1 Plugin '\u4f5c\u8005 Github \u4e0a\u7684\u540d\u5b57/Github \u4e0a\u7684\u63d2\u4ef6\u4ed3\u5e93\u540d' \u5199\u5b8c\u4fdd\u5b58\u540e\u8fdb\u5165 Vim\uff0c\u4f7f\u7528 :PluginInstall \u5373\u53ef\u81ea\u52a8\u5f00\u59cb\u5b89\u88c5\u3002 \u6211\u7684\u63d2\u4ef6\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 set rtp +=~ /.vim/ bundle/Vundle. vim call vundle#begin ( '~/.vim/plugged' ) Plugin 'VundleVim/Vundle.vim' \" \u4f7f\u7528Vundle\u7684\u5fc5\u987b\u914d\u7f6e Plugin 'chxuan/vimplus-startify' \" \u542f\u52a8\u754c\u9762 Plugin 'scrooloose/nerdtree' \" \u76ee\u5f55\u6811 Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' \" \u76ee\u5f55\u6811\u7f8e\u5316 Plugin 'vim-airline/vim-airline' \" \u72b6\u6001\u680f\u7f8e\u5316 Plugin 'vim-airline/vim-airline-themes' \" \u72b6\u6001\u680f\u7f8e\u5316\u4e3b\u9898 Plugin 'tpope/vim-commentary' \" \u5feb\u901f\u6ce8\u91ca Plugin 'scrooloose/syntastic' \" \u8bed\u6cd5\u9519\u8bef\u63d0\u793a Plugin 'Lokaltog/vim-easymotion' \" \u5feb\u901f\u8df3\u8f6c Plugin 'luochen1990/rainbow' \" \u5f69\u8679\u62ec\u53f7 \"Plugin 'Raimondi/delimitMate' \" \u62ec\u53f7\u8865\u5168 Plugin 'yianwillis/vimcdoc' \" HELP\u6587\u6863\u4e2d\u6587 Plugin 'sjl/gundo.vim' \" \u64a4\u9500\u6811 Plugin 'suan/vim-instant-markdown' \" markdown \u5b9e\u65f6\u9884\u89c8 call vundle# end () \u5173\u4e8e\u63d2\u4ef6\u5176\u5b9e\u4e5f\u6709\u76f8\u5173\u914d\u7f6e\uff0c\u4f46\u662f\u90fd\u5199\u5728\u4e00\u8d77\u5c06\u4f1a\u4f7f\u5f97 .vimrc \u5341\u5206\u81c3\u80bf\uff0c\u6211\u4eec\u53ef\u4ee5\u989d\u5916\u5199\u5728\u522b\u7684\u6587\u4ef6\u91cc\uff0c\u4e00\u822c\u6587\u4ef6\u5e94\u8be5\u4fdd\u5b58\u5728 home \u4e0b\uff0c\u7136\u540e\u5728\u914d\u7f6e\u4e2d\u5199\u4e0b source $HOME / \u6587\u4ef6\u8def\u5f84 \u5373\u53ef\u3002\u6211\u7684 nerdtree, syntastic \u548c airline \u90fd\u989d\u5916\u5199\u4e86\u522b\u7684\u6587\u4ef6\u3002 \u540c\u65f6\u6211\u7684\u914d\u7f6e\u91cc\u5173\u4e8e\u63d2\u4ef6\u7684\u5feb\u6377\u952e\u5982\u4e0b\uff1a 1 2 F10 \uff1a\u542f\u52a8 nerdtree \u4fa7\u8fb9\u5de5\u7a0b\u76ee\u5f55\u6811 F7 \uff1a\u542f\u52a8 Gundo \u65f6\u5149\u673a","title":"\u5173\u4e8e\u63d2\u4ef6"},{"location":"intro/editors/#_17","text":"\u4e3a\u4ec0\u4e48 Emacs \u548c Vim \u8fd9\u4e9b\u7f16\u8f91\u5668\u6548\u7387\u9ad8\uff1f \u5f88\u91cd\u8981\u7684\u4e00\u70b9\u5728\u4e8e\u8fd9\u4e9b\u7f16\u8f91\u5668\u53ef\u4ee5\u8ba9\u4f60\u5207\u6389\u4f60\u7684\u53f3\u534a\u90e8\u5206\u7684\u952e\u76d8\u800c\u8ba9\u4f60\u7684\u53cc\u624b\u59cb\u7ec8\u5904\u4e8e\u4e3b\u952e\u76d8\u533a\u57df, \u5e76\u4e14\u8ba9\u4f60\u7684\u53cc\u624b\u4fdd\u6301\u5408\u4f5c, \u800c\u4e0d\u4f1a\u51fa\u73b0\u4e00\u53ea\u624b\u4e0d\u505c\u7684\u6309\u800c\u53e6\u4e00\u53ea\u624b\u644a\u5728\u952e\u76d8\u4e0a\u3002 \u6240\u4ee5, \u5982\u679c\u4f60\u60f3\u7528\u597d Vim(\u6216\u8005\u5176\u4ed6\u9ad8\u7ea7\u7f16\u8f91\u5668), \u4e0d\u8981\u53bb\u6309\u65b9\u5411\u952e, \u4e0d\u8981\u53bb\u78b0\u9f20\u6807, \u4f60\u751a\u81f3\u53ef\u4ee5\u5f3a\u8feb\u81ea\u5df1\uff1a 1 2 3 4 5 \" \u4f7f\u65b9\u5411\u952e\u5931\u6548 inoremap < UP > a < Bs > inoremap < DOWN > a < Bs > inoremap < LEFT > a < Bs > inoremap < RIGHT > a < Bs > \u4f46\u4e5f\u8bb8\u8fd9\u8fd8\u4e0d\u591f, \u4f60\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7f29\u5c0f\u4f60\u53cc\u624b\u9700\u8981\u63a7\u5236\u7684\u533a\u57df\u3002 Esc \u952e\u5728 Vim \u4e2d\u4f7f\u7528\u9891\u7e41, \u867d\u7136\u6709 ctrl+[ \u6765\u4ee3\u66ff\u5b83, \u4f46\u8fd9\u4ecd\u7136\u4e0d\u591f\u3002 \u4e8b\u5b9e\u4e0a\u8fd8\u7528\u4e00\u79cd\u9ad8\u6548\u5374\u9c9c\u4e3a\u4eba\u77e5\u7684\u529e\u6cd5: \u7528 alt \u3002 \u5728 TUI(\u7ec8\u7aef) \u4e2d\u4efb\u4f55\u6a21\u5f0f alt + \u4efb\u4f55\u6309\u952e\u5b8c\u5168\u7b49\u6548\u4e8e Esc + \u8be5\u6309\u952e\u3002 \u4f8b\u5982\u4f60\u8981\u9000\u51fa\u63d2\u5165\u6a21\u5f0f\u5411\u4e0a\u79fb\u52a8, \u666e\u901a\u505a\u6cd5\u662f Esc+k, \u4f46 alt+k \u6709\u540c\u6837\u7684\u6548\u679c\u5e76\u4e14\u5341\u5206\u9ad8\u6548\u3002 Backspace (\u5220\u9664\u952e) \u4f7f\u7528\u5341\u5206\u9891\u7e41, \u4f46\u5b83\u5904\u5728\u4e3b\u952e\u76d8\u7684\u89d2\u843d, \u4f60\u4e0d\u5f97\u4e0d\u632a\u5f00\u624b\u6216\u662f\u4f38\u957f\u5c0f\u62c7\u6307\u3002 \u4f46\u5728 Vim (\u751a\u81f3\u7ec8\u7aef) \u91cc, \u4f60\u53ef\u4ee5\u7528 ctrl+h \u6765\u5f7b\u5e95\u4ee3\u66ff Backspace\u3002 \u56de\u8f66\u952e\u4f7f\u7528\u540c\u6837\u9891\u7e41, \u4f46\u540c\u6837\u4e0d\u632a\u4e00\u632a\u624b\u5c31\u5f97\u4f38\u957f\u5c0f\u62c7\u6307\u3002 \u5e78\u8fd0\u7684\u662f\u5728 Vim \u548c\u7ec8\u7aef\u4e2d, ctrl+m \u5b8c\u5168\u7b49\u6548\u4e0e\u56de\u8f66\u3002 \u5728\u7edd\u5927\u591a\u6570\u7684\u60c5\u51b5\u4e0b, \u4e0d\u8981\u53bb\u6309\u53f3\u8fb9\u7684 ctrl, shift, \u7528\u5de6\u8fb9\u7684\u4ee3\u66ff\u3002 \u6700\u597d\u4e0d\u7528 F1 \u5230 F12, \u5982\u679c\u8981\u6620\u5c04, \u7528 Leader \u5f00\u5934\u7684\u81ea\u5b9a\u4e49\u5feb\u6377\u952e\u3002","title":"\u5173\u4e8e\u9ad8\u6548\u7f16\u8f91\u7684\u5efa\u8bae"},{"location":"intro/editors/#visual-studio-code-","text":"","title":"Visual Studio Code - \u5fae\u8f6f\u5bb6\u7684\u7f16\u8f91\u5668"},{"location":"intro/editors/#_18","text":"Visual Studio Code (\u4ee5\u4e0b\u7b80\u79f0 VS Code) \u662f\u4e00\u4e2a\u514d\u8d39\u3001\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684\u7531\u5fae\u8f6f\u5f00\u53d1\u7684\u7a0b\u5e8f\u7f16\u8f91\u5668\u3002\u5b83\u662f\u7528 Typescript \u7f16\u5199\u7684\uff0c\u5e76\u4e14\u91c7\u7528 Electron \u67b6\u6784\u3002\u5b98\u7f51\u662f https://code.visualstudio.com/ \u3002\u5b83\u5e26\u6709\u5bf9 JavaScript\u3001TypeScript \u548c Node.js \u7684\u5185\u7f6e\u652f\u6301\uff0c\u5e76\u4e3a\u5176\u4ed6\u8bed\u8a00\uff08\u5982 C++\u3001Cype\u3001Java\u3001Python\u3001PHP\u3001GO\uff09\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6269\u5c55\u751f\u6001\u7cfb\u7edf\u3002","title":"\u7b80\u4ecb"},{"location":"intro/faq/","text":"\u4ea4\u6d41\u65b9\u5f0f \u00b6 \u672c\u9879\u76ee\u4e3b\u8981\u4f7f\u7528 Issues / QQ / Telegram \u8fdb\u884c\u4ea4\u6d41\u6c9f\u901a\u3002 Telegram \u7fa4\u7ec4\u94fe\u63a5\u4e3a @OIwiki \uff0c QQ \u7fa4\u53f7\u7801\u4e3a 588793226 \uff0c\u6b22\u8fce\u52a0\u5165\u3002 \u8d21\u732e\u65b9\u5f0f \u00b6 \u6211\u4eec\u73b0\u5728\u5728\u4f7f\u7528 Projects \uff0c\u8fd9\u91cc\u8be6\u7ec6\u5217\u4e3e\u4e86\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u4ee5\u53ca\u5f85\u505a\u4e8b\u9879\u3002 \u5728\u5f00\u59cb\u7f16\u5199\u4e00\u6bb5\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u67e5\u9605 Issues \uff0c\u786e\u8ba4\u6ca1\u6709\u522b\u4eba\u5728\u505a\u76f8\u540c\u7684\u5de5\u4f5c\u4e4b\u540e\uff0c \u5f00\u4e2a \u65b0 issue \u8bb0\u5f55\u4f60\u8981\u7f16\u5199\u7684\u5185\u5bb9\u3002 \u6211\u4e4b\u524d\u6ca1\u600e\u4e48\u7528\u8fc7 GitHub \u00b6 \u53c2\u4e0e Wiki \u7684\u7f16\u5199 \u9700\u8981 \u4e00\u4e2a GitHub \u8d26\u53f7\uff0c \u4e0d\u9700\u8981 \u9ad8\u8d85\u7684 GitHub \u6280\u5de7\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5047\u5982\u6211\u60f3\u8981\u4fee\u6539\u4e00\u4e2a\u9875\u9762\u5185\u5bb9\uff0c\u5e94\u8be5\u600e\u4e48\u64cd\u4f5c\u5462\uff1f \u5728 OI Wiki \u7f51\u7ad9\u4e0a\u627e\u5230\u5bf9\u5e94\u9875\u9762\u3002 \u70b9\u51fb \u6b63\u6587\u53f3\u4e0a\u65b9\u3001\u76ee\u5f55\u5de6\u4fa7\u7684 \u201c\u7f16\u8f91\u6b64\u9875\u201d edit \u6309\u94ae\u3002 \uff08\u5e94\u8be5\u5df2\u7ecf\u8df3\u8f6c\u5230\u4e86 GitHub \u4e0a\u7684\u5bf9\u5e94\u9875\u9762\u5427\uff1f\uff09\u8fd9\u65f6\u5019\u53f3\u4e0a\u65b9\u8fd8\u4f1a\u6709\u4e00\u4e2a \u201c\u7f16\u8f91\u6b64\u9875\u201d edit \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5b83\u5c31\u53ef\u4ee5\u5728\u7ebf\u7f16\u8f91\u4e86\u3002 \u5199\u597d\u4e86\u4e4b\u540e\u70b9\u4e0b\u65b9\u7684\u7eff\u8272\u6309\u94ae\uff08Propose file change\uff09\uff0c\u53ef\u80fd\u4f1a\u63d0\u793a\u6ca1\u6709\u6743\u9650\u3002\u4e0d\u5fc5\u62c5\u5fc3\uff01GitHub \u4f1a\u81ea\u52a8\u5e2e\u4f60 fork \u4e00\u4efd\u9879\u76ee\u7684\u6587\u4ef6\u5e76\u521b\u5efa Pull Request\u3002 \u4e4b\u540e\u70b9\u4e0a\u65b9\u7684\u7eff\u8272\u6309\u94ae\uff08Create pull request\uff09\u540e\uff0c\u518d\u70b9\u4e00\u4e0b\u51fa\u73b0\u7684\u7eff\u8272\u6309\u94ae\uff08Create pull request\uff09\u3002 \u63d0\u4ea4\u4e4b\u540e\u5c31\u53ef\u4ee5\u7b49\u5f85\u4ed6\u4eba\u5408\u5e76\u6216\u8005\u6307\u51fa\u8fd8\u8981\u4fee\u6539\u7684\u5730\u65b9\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7ed9\u4ed6\u4eba\u7684 PR \u63d0\u51fa\u4fee\u6539\u610f\u89c1\uff0c\u6216\u8005\u53ea\u662f\u70b9\u8d5e / \u8e29\u3002\u5982\u679c\u6709\u6d88\u606f\uff0c\u4f1a\u6709\u90ae\u4ef6\u901a\u77e5\u548c / \u6216\u7f51\u9875\u4e0a\u7684\u63d0\u9192\uff08\u53d6\u51b3\u4e8e\u5728\u4f60\u4e2a\u4eba Settings \u4e2d\u7684\u8bbe\u7f6e\uff09\u3002 \uff08\u6709\u6728\u6709\u5f88\u7b80\u5355\uff1f\uff09 \u5982\u679c\u8fd8\u662f\u4e0d\u653e\u5fc3\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \uff0c\u6216\u8005\u8bd5\u8bd5 Github \u7684\u5b98\u65b9\u6559\u7a0b \u3002 \u6211\u4e4b\u524d\u7528\u8fc7 GitHub \u00b6 \u57fa\u672c\u534f\u4f5c\u65b9\u5f0f\u5982\u4e0b\uff1a Fork \u4e3b\u4ed3\u5e93\u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u4e2d\u3002 \u5f53\u60f3\u8981\u8d21\u732e\u67d0\u90e8\u5206\u5185\u5bb9\u65f6\uff0c\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u67e5\u770b Issues \uff0c\u4ee5\u4fbf\u786e\u5b9a\u662f\u5426\u6709\u4eba\u5df2\u7ecf\u5f00\u59cb\u4e86\u8fd9\u9879\u5de5\u4f5c\u3002\u5f53\u7136\uff0c\u6211\u4eec\u66f4\u5e0c\u671b\u4f60\u53ef\u4ee5\u52a0\u5165 QQ / Telegram \u7fa4\u7ec4\uff0c\u65b9\u4fbf\u4ea4\u6d41\u3002 \u5728\u51b3\u5b9a\u5c06\u5185\u5bb9\u63a8\u9001\u5230\u672c\u4ed3\u5e93\u65f6\uff0c \u8bf7\u4f60\u9996\u5148\u62c9\u53d6\u672c\u4ed3\u5e93\u4ee3\u7801\u8fdb\u884c\u5408\u5e76\uff0c\u81ea\u884c\u5904\u7406\u597d\u51b2\u7a81\uff0c\u540c\u65f6\u786e\u4fdd\u5728\u672c\u5730\u53ef\u4ee5\u6b63\u5e38\u751f\u6210\u6587\u6863 \uff0c\u7136\u540e\u518d\u5c06\u5206\u652f PR \u5230\u4e3b\u4ed3\u5e93\u7684 master \u5206\u652f\u4e0a\u3002\u5176\u4e2d\uff0cPR \u9700\u8981\u5305\u542b\u4ee5\u4e0b\u57fa\u672c\u4fe1\u606f\uff1a \u6807\u9898\uff1a\u672c\u6b21 PR \u7684\u76ee\u7684\uff08\u505a\u4e86\u4ec0\u4e48\u5de5\u4f5c\uff0c\u4fee\u590d\u4e86\u4ec0\u4e48\u95ee\u9898\uff09\uff1b \u5185\u5bb9\uff1a\u5982\u679c\u5fc5\u8981\u7684\u8bdd\uff0c\u8bf7\u7ed9\u51fa\u5bf9\u4fee\u590d\u95ee\u9898\u7684\u53d9\u8ff0\u3002 \u8d21\u732e\u6587\u6863\u8981\u6c42 \u00b6 \u5f53\u4f60\u6253\u7b97\u8d21\u732e\u67d0\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u4f60\u5e94\u8be5\u5c3d\u91cf\u786e\u4fdd\uff1a \u6587\u6863\u5185\u5bb9\u6ee1\u8db3\u57fa\u672c\u683c\u5f0f\u8981\u6c42\uff1b \u6587\u6863\u7684\u5408\u7406\u6027\uff1b \u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f\u3002 \u6587\u6863\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f \u00b6 \u5728\u63d0\u4ea4 PR \u524d\uff0c\u8bf7\u5148\u786e\u4fdd\u6587\u6863\u5185\u5bb9\u7b26\u5408 \u5982\u4f55\u8d21\u732e How to contribute \u4e2d\u7684\u683c\u5f0f\u8981\u6c42\u3002\u683c\u5f0f\u7f3a\u4e4f\u57fa\u672c\u7684\u89c4\u8303\u6027\u3001\u4e25\u8c28\u6027\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u8d21\u732e\u4e0d\u80fd\u53ca\u65f6\u901a\u8fc7\u5ba1\u6838\u3002 \u6587\u6863\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f\u4e3b\u8981\u662f\u6307 \u4e2d\u6587\u6392\u7248\u6307\u5357 \u4e0e MkDocs \u4f7f\u7528\u8bf4\u660e \u3002\u540e\u8005\u989d\u5916\u4ecb\u7ecd\u4e86 mkdocs-material \u4e3b\u9898\u7684\u63d2\u4ef6\u4f7f\u7528\u65b9\u5f0f\u3002 \u5982\u679c\u5bf9 mkdocs-material \uff08\u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u4e2a\u4e3b\u9898\uff09\u8fd8\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8fd8\u53ef\u4ee5\u67e5\u9605 cyent \u7684\u7b14\u8bb0 \uff0c\u4ed6\u6709\u4ecb\u7ecd markdown \u4f20\u7edf\u8bed\u6cd5\u548c mkdocs-material \u652f\u6301\u7684\u6269\u5c55\u8bed\u6cd5\u3002 \u6587\u6863\u7684\u5408\u7406\u6027 \u00b6 \u6240\u8c13\u5408\u7406\u6027\uff0c\u6307\u6240\u7f16\u5199\u7684 \u5185\u5bb9 \u5fc5\u987b\u5177\u6709\u5982\u4e0b\u7684\u7279\u6027\uff1a \u7531\u6d45\u5165\u6df1\uff0c\u5185\u5bb9\u7684\u96be\u5ea6\u5e94\u8be5\u5177\u6709\u6e10\u8fdb\u6027\u3002 \u903b\u8f91\u6027\uff0c\u5bf9\u4e8e\u6bcf\u7c7b\u5185\u5bb9\u7684\u64b0\u5199\u5e94\u8be5\u5c3d\u91cf\u5305\u542b\u4ee5\u4e0b\u7684\u5185\u5bb9\uff1a \u539f\u7406\uff0c\u8bf4\u660e\u8be5\u5185\u5bb9\u5bf9\u5e94\u7684\u539f\u7406\u3002 \u4f8b\u5b50\uff0c\u7ed9\u51fa 1 ~ 2 \u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002 \u9898\u76ee\uff0c\u5728\u8be5\u6807\u9898\u4e0b\uff0c \u53ea\u9700\u8981\u7ed9\u51fa\u9898\u76ee\u540d\u5b57\u3001\u9898\u76ee\u94fe\u63a5 \u3002 \u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f \u00b6 \u5bf9\u4e8e\u6bcf\u7c7b\u8981\u7f16\u5199\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94\u7684\u6587\u6863\u5e94\u8be5\u5b58\u50a8\u5728\u5408\u9002\u7684\u76ee\u5f55\u4e0b\u3002 images\uff0c \u5b58\u50a8\u6587\u6863\u4ecb\u7ecd\u65f6\u6240\u4f7f\u7528\u7684\u56fe\u7247\uff0c\u4f4d\u7f6e\u4e3a\u6240\u6dfb\u52a0\u7684\u76ee\u5f55\u4e0b\uff08\u5373\u683c\u5f0f\u4e3a ![](./images/xx.jpg) \uff09\u3002 \u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c \u5982 file-name \u3002 F.A.Q. \u00b6 \u76ee\u5f55\u5728\u54ea \u00b6 \u76ee\u5f55\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 mkdocs.yml \u6587\u4ef6\u4e2d\u3002 \u5982\u4f55\u4fee\u6539\u4e00\u4e2a topic \u7684\u5185\u5bb9 \u00b6 \u5728\u5bf9\u5e94\u9875\u9762\u53f3\u4e0a\u65b9\u6709\u4e00\u4e2a\u7f16\u8f91\u6309\u94ae edit \uff0c\u70b9\u51fb\u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230 GitHub \u4e0a\u5bf9\u5e94\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u6216\u8005\u4e5f\u53ef\u4ee5\u81ea\u884c\u9605\u8bfb\u76ee\u5f55 (mkdocs.yml) \u67e5\u627e\u6587\u4ef6\u4f4d\u7f6e\u3002 \u5982\u4f55\u6dfb\u52a0\u4e00\u4e2a topic \u00b6 \u53ef\u4ee5\u5f00\u4e00\u4e2a Issue\uff0c\u6ce8\u660e\u5e0c\u671b\u80fd\u6dfb\u52a0\u7684\u5185\u5bb9\u3002 \u53ef\u4ee5\u5f00\u4e00\u4e2a Pull Request\uff0c\u5728\u76ee\u5f55 (mkdocs.yml) \u4e2d\u52a0\u4e0a\u65b0\u7684 topic\uff0c\u5e76\u5728 docs \u6587\u4ef6\u5939\u4e0b\u5bf9\u5e94\u4f4d\u7f6e\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 .md \u6587\u4ef6\u3002 \u6ce8\u610f \u5199 .md \u6587\u4ef6\u65f6\uff0c\u8bf7\u52ff\u5728\u5f00\u5934\u5199\u4e0a\u6807\u9898\u3002 commit message \u600e\u4e48\u5199 \u00b6 \u6211\u4eec\u63a8\u8350\u4f7f\u7528 commitizen/cz-cli \u6765\u89c4\u8303 commit message \uff08\u5e76\u975e\u5f3a\u6c42\uff09\u3002 \u6211\u5c1d\u8bd5\u8bbf\u95ee GitHub \u7684\u65f6\u5019\u9047\u5230\u4e86\u56f0\u96be \u00b6 \u63a8\u8350\u5728 hosts \u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u51e0\u884c\uff1a\uff08\u6765\u6e90\uff1a @GoogleHosts \uff09 1 2 3 4 5 ## GitHub Start 192.30.253.118 gist.github.com 192.30.253.112 github.com 192.30.253.112 www.github.com ## GitHub End \u53ef\u4ee5\u5728 @GoogleHosts \u4e3b\u9875 \u4e0a\u4e86\u89e3\u5230\u66f4\u591a\u4fe1\u606f\u3002 \u6211\u8fd9\u91cc pip \u4e5f\u592a\u6162\u4e86 \u00b6 \u53ef\u4ee5\u9009\u62e9\u66f4\u6362\u56fd\u5185\u6e90\uff0c\u53c2\u8003\uff1a \u66f4\u6539 pip \u6e90\u81f3\u56fd\u5185\u955c\u50cf - L \u745c - CSDN \u535a\u5ba2 \uff0c\u6216\u8005\uff1a 1 pip install -U -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/ \u6211\u5728\u5ba2\u6237\u7aef clone \u4e86\u8fd9\u4e2a\u9879\u76ee\uff0c\u901f\u5ea6\u592a\u6162 \u00b6 \u5982\u679c\u6709\u5b89\u88c5 git bash \uff0c\u53ef\u4ee5\u52a0\u51e0\u4e2a\u9650\u5236\u6765\u51cf\u5c11\u4e0b\u8f7d\u91cf\uff1a 1 git clone https://github.com/24OI/OI-wiki.git --depth = 1 -b master \u53c2\u8003\uff1a https://blog.csdn.net/FreeApe/article/details/46845555 \u6211\u6ca1\u88c5\u8fc7 Python 3 \u00b6 \u53ef\u4ee5\u8bbf\u95ee Python \u5b98\u7f51 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 \u597d\u50cf\u63d0\u793a\u6211 pip \u7248\u672c\u8fc7\u4f4e \u00b6 \u8fdb\u5165 cmd / shell \u4e4b\u540e\uff0c 1 python -m pip install --upgrade pip \u6211\u5b89\u88c5\u4f9d\u8d56\u5931\u8d25\u4e86 \u00b6 \u68c0\u67e5\u4e00\u4e0b\uff1a\u7f51\u7edc\uff1f\u6743\u9650\uff1f\u67e5\u770b\u9519\u8bef\u4fe1\u606f\uff1f \u6211\u5df2\u7ecf clone \u4e0b\u6765\u4e86\uff0c\u4e3a\u4ec0\u4e48\u90e8\u7f72\u4e0d\u4e86 \u00b6 \u68c0\u67e5\u4e00\u4e0b\u662f\u5426\u5b89\u88c5\u597d\u4e86\u4f9d\u8d56\uff1f \u6211 clone \u4e86\u5f88\u4e45\u4e4b\u524d\u7684 repo\uff0c\u600e\u4e48\u66f4\u65b0\u5230\u65b0\u7248\u672c\u5462 \u00b6 \u53c2\u8003\uff1a https://help.github.com/articles/syncing-a-fork/ \u3002 \u5982\u679c\u662f\u88c5\u4e86\u4e4b\u524d\u7684\u4f9d\u8d56\u600e\u4e48\u66f4\u65b0 \u00b6 1 pip install -U -r requirements.txt \u4e3a\u4ec0\u4e48\u6211\u7684 markdown \u683c\u5f0f\u4e71\u4e86 \u00b6 \u53ef\u4ee5\u67e5\u9605 cyent \u7684\u7b14\u8bb0 \uff0c\u6216\u8005 MkDocs \u4f7f\u7528\u8bf4\u660e \u3002 \u6211\u4eec\u76ee\u524d\u5728\u4f7f\u7528 remark-lint \u6765\u81ea\u52a8\u5316\u4fee\u6b63\u683c\u5f0f\uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b \u914d\u7f6e \u4e0d\u591f\u597d\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u6307\u51fa\u3002 remark-lint \u8981\u6c42\u600e\u6837\u7684\u683c\u5f0f \u00b6 \u6211\u4eec\u73b0\u5728\u542f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u5728 .remarkrc \uff0c\u5b83\u53ef\u4ee5\u81ea\u52a8\u7ed9\u9879\u76ee\u5185\u6587\u4ef6\u7edf\u4e00\u98ce\u683c\u3002 \u5728\u914d\u7f6e\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e5f\u9047\u5230\u4e86\u4e00\u4e9b remark-lint \u4e0d\u80fd\u5f88\u597d\u5904\u7406\u7684\u95ee\u9898\uff1a ## \u7b80\u4ecb \u6807\u9898\u8981\u7a7a\u4e00\u683c\uff08\u82f1\u6587\u534a\u89d2\u7a7a\u683c\uff09\uff0c\u4e5f\u4e0d\u8981\u5199\u6210 ## \u7b80\u4ecb ## \u3002 \u5217\u8868 \u5217\u8868\u524d\u8981\u6709\u7a7a\u884c\uff0c\u65b0\u5f00\u4e00\u6bb5\u3002 1. \u4f8b\u5b50 \u70b9\u53f7\u540e\u8981\u6709\u7a7a\u683c\u3002 \u884c\u95f4\u516c\u5f0f\u4e0d\u80fd\u5199\u5728\u4e00\u884c\u91cc\uff0c\u5426\u5219\u4f1a\u88ab\u5f53\u505a\u662f\u884c\u5185\u516c\u5f0f \u4f2a\u4ee3\u7801\u8bf7\u4f7f\u7528 ```text GitHub \u662f\u4e0d\u662f\u4e0d\u663e\u793a\u6211\u7684\u6570\u5b66\u516c\u5f0f\uff1f \u00b6 \u662f\u7684\uff0cGitHub \u7684\u9884\u89c8\u4e0d\u663e\u793a\u6570\u5b66\u516c\u5f0f\u3002\u4f46\u662f\u8bf7\u653e\u5fc3\uff0cmkdocs \u662f\u652f\u6301\u6570\u5b66\u516c\u5f0f\u7684\uff0c\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\uff0c\u53ea\u8981\u662f MathJax \u652f\u6301\u7684\u53e5\u5f0f\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 \u6211\u7684\u6570\u5b66\u516c\u5f0f\u600e\u4e48\u4e71\u7801\u4e86 \u00b6 \u5982\u679c\u662f\u884c\u95f4\u516c\u5f0f\uff08\u7528\u7684 $$ \uff09\uff0c\u76ee\u524d\u5df2\u77e5\u7684\u95ee\u9898\u662f\u9700\u8981\u5728 $$ \u4e24\u4fa7\u7559\u6709\u7a7a\u884c\uff0c\u4e14 $$ \u8981 \u5355\u72ec \u653e\u5728\u4e00\u884c\u91cc\uff08\u4e14\u4e0d\u8981\u5728\u524d\u52a0\u7a7a\u683c\uff09\u3002\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 4 5 // \u7a7a\u884c $$ a_i $$ // \u7a7a\u884c \u6211\u7684\u516c\u5f0f\u4e3a\u4ec0\u4e48\u5728\u76ee\u5f55\u91cc\u6ca1\u6709\u6b63\u5e38\u663e\u793a\uff1f\u597d\u50cf\u53cc\u500d\u4e86\uff1f \u00b6 \u662f\u7684\uff0c\u8fd9\u4e2a\u662f python-markdown \u7684\u4e00\u4e2a bug\uff0c\u53ef\u80fd\u8fd1\u671f\u4f1a\u4fee\u590d\u3002 \u5982\u679c\u73b0\u5728\u60f3\u8981\u907f\u514d\u76ee\u5f55\u4e2d\u51fa\u73b0\u53cc\u500d\u516c\u5f0f\uff0c\u53ef\u4ee5\u53c2\u8003 https://github.com/24OI/OI-wiki/blame/master/docs/string/sam.md#L82 1 ### \u7ed3\u675f\u4f4d\u7f6e <script type=\"math/tex\">endpos</script> \u5728\u76ee\u5f55\u4e2d\u4f1a\u53d8\u6210 1 \u7ed3\u675f\u4f4d\u7f6e endpos \u6ce8\uff1a\u73b0\u5728\u8bf7\u5c3d\u91cf\u907f\u514d\u5728\u76ee\u5f55\u4e2d\u5f15\u5165 MathJax \u516c\u5f0f\u3002 \u5982\u4f55\u7ed9\u4e00\u4e2a\u9875\u9762\u5355\u72ec\u58f0\u660e\u7248\u6743\u4fe1\u606f \u00b6 \u53c2\u8003 Metadata \u7684\u4f7f\u7528\uff0c\u5728\u9875\u9762\u5f00\u5934\u52a0\u4e00\u884c\u5373\u53ef\u3002 \u6bd4\u5982\uff1a 1 copyright: SATA \u6ce8\uff1a\u9ed8\u8ba4\u7684\u662f \u2018CC BY-SA 4.0 \u548c SATA\u2019\u3002 \u5982\u4f55\u7ed9\u4e00\u4e2a\u9875\u9762\u5173\u95ed\u5b57\u6570\u7edf\u8ba1 \uff08\u73b0\u5df2\u9ed8\u8ba4\u5173\u95ed\uff09 \u00b6 \u53c2\u8003 Metadata \u7684\u4f7f\u7528\uff0c\u5728\u9875\u9762\u5f00\u5934\u52a0\u4e00\u884c\u5373\u53ef\u3002 \u6bd4\u5982\uff1a 1 pagetime:","title":"F.A.Q."},{"location":"intro/faq/#_1","text":"\u672c\u9879\u76ee\u4e3b\u8981\u4f7f\u7528 Issues / QQ / Telegram \u8fdb\u884c\u4ea4\u6d41\u6c9f\u901a\u3002 Telegram \u7fa4\u7ec4\u94fe\u63a5\u4e3a @OIwiki \uff0c QQ \u7fa4\u53f7\u7801\u4e3a 588793226 \uff0c\u6b22\u8fce\u52a0\u5165\u3002","title":"\u4ea4\u6d41\u65b9\u5f0f"},{"location":"intro/faq/#_2","text":"\u6211\u4eec\u73b0\u5728\u5728\u4f7f\u7528 Projects \uff0c\u8fd9\u91cc\u8be6\u7ec6\u5217\u4e3e\u4e86\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u4ee5\u53ca\u5f85\u505a\u4e8b\u9879\u3002 \u5728\u5f00\u59cb\u7f16\u5199\u4e00\u6bb5\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u67e5\u9605 Issues \uff0c\u786e\u8ba4\u6ca1\u6709\u522b\u4eba\u5728\u505a\u76f8\u540c\u7684\u5de5\u4f5c\u4e4b\u540e\uff0c \u5f00\u4e2a \u65b0 issue \u8bb0\u5f55\u4f60\u8981\u7f16\u5199\u7684\u5185\u5bb9\u3002","title":"\u8d21\u732e\u65b9\u5f0f"},{"location":"intro/faq/#github","text":"\u53c2\u4e0e Wiki \u7684\u7f16\u5199 \u9700\u8981 \u4e00\u4e2a GitHub \u8d26\u53f7\uff0c \u4e0d\u9700\u8981 \u9ad8\u8d85\u7684 GitHub \u6280\u5de7\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5047\u5982\u6211\u60f3\u8981\u4fee\u6539\u4e00\u4e2a\u9875\u9762\u5185\u5bb9\uff0c\u5e94\u8be5\u600e\u4e48\u64cd\u4f5c\u5462\uff1f \u5728 OI Wiki \u7f51\u7ad9\u4e0a\u627e\u5230\u5bf9\u5e94\u9875\u9762\u3002 \u70b9\u51fb \u6b63\u6587\u53f3\u4e0a\u65b9\u3001\u76ee\u5f55\u5de6\u4fa7\u7684 \u201c\u7f16\u8f91\u6b64\u9875\u201d edit \u6309\u94ae\u3002 \uff08\u5e94\u8be5\u5df2\u7ecf\u8df3\u8f6c\u5230\u4e86 GitHub \u4e0a\u7684\u5bf9\u5e94\u9875\u9762\u5427\uff1f\uff09\u8fd9\u65f6\u5019\u53f3\u4e0a\u65b9\u8fd8\u4f1a\u6709\u4e00\u4e2a \u201c\u7f16\u8f91\u6b64\u9875\u201d edit \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5b83\u5c31\u53ef\u4ee5\u5728\u7ebf\u7f16\u8f91\u4e86\u3002 \u5199\u597d\u4e86\u4e4b\u540e\u70b9\u4e0b\u65b9\u7684\u7eff\u8272\u6309\u94ae\uff08Propose file change\uff09\uff0c\u53ef\u80fd\u4f1a\u63d0\u793a\u6ca1\u6709\u6743\u9650\u3002\u4e0d\u5fc5\u62c5\u5fc3\uff01GitHub \u4f1a\u81ea\u52a8\u5e2e\u4f60 fork \u4e00\u4efd\u9879\u76ee\u7684\u6587\u4ef6\u5e76\u521b\u5efa Pull Request\u3002 \u4e4b\u540e\u70b9\u4e0a\u65b9\u7684\u7eff\u8272\u6309\u94ae\uff08Create pull request\uff09\u540e\uff0c\u518d\u70b9\u4e00\u4e0b\u51fa\u73b0\u7684\u7eff\u8272\u6309\u94ae\uff08Create pull request\uff09\u3002 \u63d0\u4ea4\u4e4b\u540e\u5c31\u53ef\u4ee5\u7b49\u5f85\u4ed6\u4eba\u5408\u5e76\u6216\u8005\u6307\u51fa\u8fd8\u8981\u4fee\u6539\u7684\u5730\u65b9\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7ed9\u4ed6\u4eba\u7684 PR \u63d0\u51fa\u4fee\u6539\u610f\u89c1\uff0c\u6216\u8005\u53ea\u662f\u70b9\u8d5e / \u8e29\u3002\u5982\u679c\u6709\u6d88\u606f\uff0c\u4f1a\u6709\u90ae\u4ef6\u901a\u77e5\u548c / \u6216\u7f51\u9875\u4e0a\u7684\u63d0\u9192\uff08\u53d6\u51b3\u4e8e\u5728\u4f60\u4e2a\u4eba Settings \u4e2d\u7684\u8bbe\u7f6e\uff09\u3002 \uff08\u6709\u6728\u6709\u5f88\u7b80\u5355\uff1f\uff09 \u5982\u679c\u8fd8\u662f\u4e0d\u653e\u5fc3\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \uff0c\u6216\u8005\u8bd5\u8bd5 Github \u7684\u5b98\u65b9\u6559\u7a0b \u3002","title":"\u6211\u4e4b\u524d\u6ca1\u600e\u4e48\u7528\u8fc7 GitHub"},{"location":"intro/faq/#github_1","text":"\u57fa\u672c\u534f\u4f5c\u65b9\u5f0f\u5982\u4e0b\uff1a Fork \u4e3b\u4ed3\u5e93\u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u4e2d\u3002 \u5f53\u60f3\u8981\u8d21\u732e\u67d0\u90e8\u5206\u5185\u5bb9\u65f6\uff0c\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u67e5\u770b Issues \uff0c\u4ee5\u4fbf\u786e\u5b9a\u662f\u5426\u6709\u4eba\u5df2\u7ecf\u5f00\u59cb\u4e86\u8fd9\u9879\u5de5\u4f5c\u3002\u5f53\u7136\uff0c\u6211\u4eec\u66f4\u5e0c\u671b\u4f60\u53ef\u4ee5\u52a0\u5165 QQ / Telegram \u7fa4\u7ec4\uff0c\u65b9\u4fbf\u4ea4\u6d41\u3002 \u5728\u51b3\u5b9a\u5c06\u5185\u5bb9\u63a8\u9001\u5230\u672c\u4ed3\u5e93\u65f6\uff0c \u8bf7\u4f60\u9996\u5148\u62c9\u53d6\u672c\u4ed3\u5e93\u4ee3\u7801\u8fdb\u884c\u5408\u5e76\uff0c\u81ea\u884c\u5904\u7406\u597d\u51b2\u7a81\uff0c\u540c\u65f6\u786e\u4fdd\u5728\u672c\u5730\u53ef\u4ee5\u6b63\u5e38\u751f\u6210\u6587\u6863 \uff0c\u7136\u540e\u518d\u5c06\u5206\u652f PR \u5230\u4e3b\u4ed3\u5e93\u7684 master \u5206\u652f\u4e0a\u3002\u5176\u4e2d\uff0cPR \u9700\u8981\u5305\u542b\u4ee5\u4e0b\u57fa\u672c\u4fe1\u606f\uff1a \u6807\u9898\uff1a\u672c\u6b21 PR \u7684\u76ee\u7684\uff08\u505a\u4e86\u4ec0\u4e48\u5de5\u4f5c\uff0c\u4fee\u590d\u4e86\u4ec0\u4e48\u95ee\u9898\uff09\uff1b \u5185\u5bb9\uff1a\u5982\u679c\u5fc5\u8981\u7684\u8bdd\uff0c\u8bf7\u7ed9\u51fa\u5bf9\u4fee\u590d\u95ee\u9898\u7684\u53d9\u8ff0\u3002","title":"\u6211\u4e4b\u524d\u7528\u8fc7 GitHub"},{"location":"intro/faq/#_3","text":"\u5f53\u4f60\u6253\u7b97\u8d21\u732e\u67d0\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u4f60\u5e94\u8be5\u5c3d\u91cf\u786e\u4fdd\uff1a \u6587\u6863\u5185\u5bb9\u6ee1\u8db3\u57fa\u672c\u683c\u5f0f\u8981\u6c42\uff1b \u6587\u6863\u7684\u5408\u7406\u6027\uff1b \u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f\u3002","title":"\u8d21\u732e\u6587\u6863\u8981\u6c42"},{"location":"intro/faq/#_4","text":"\u5728\u63d0\u4ea4 PR \u524d\uff0c\u8bf7\u5148\u786e\u4fdd\u6587\u6863\u5185\u5bb9\u7b26\u5408 \u5982\u4f55\u8d21\u732e How to contribute \u4e2d\u7684\u683c\u5f0f\u8981\u6c42\u3002\u683c\u5f0f\u7f3a\u4e4f\u57fa\u672c\u7684\u89c4\u8303\u6027\u3001\u4e25\u8c28\u6027\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u8d21\u732e\u4e0d\u80fd\u53ca\u65f6\u901a\u8fc7\u5ba1\u6838\u3002 \u6587\u6863\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f\u4e3b\u8981\u662f\u6307 \u4e2d\u6587\u6392\u7248\u6307\u5357 \u4e0e MkDocs \u4f7f\u7528\u8bf4\u660e \u3002\u540e\u8005\u989d\u5916\u4ecb\u7ecd\u4e86 mkdocs-material \u4e3b\u9898\u7684\u63d2\u4ef6\u4f7f\u7528\u65b9\u5f0f\u3002 \u5982\u679c\u5bf9 mkdocs-material \uff08\u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u4e2a\u4e3b\u9898\uff09\u8fd8\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8fd8\u53ef\u4ee5\u67e5\u9605 cyent \u7684\u7b14\u8bb0 \uff0c\u4ed6\u6709\u4ecb\u7ecd markdown \u4f20\u7edf\u8bed\u6cd5\u548c mkdocs-material \u652f\u6301\u7684\u6269\u5c55\u8bed\u6cd5\u3002","title":"\u6587\u6863\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f"},{"location":"intro/faq/#_5","text":"\u6240\u8c13\u5408\u7406\u6027\uff0c\u6307\u6240\u7f16\u5199\u7684 \u5185\u5bb9 \u5fc5\u987b\u5177\u6709\u5982\u4e0b\u7684\u7279\u6027\uff1a \u7531\u6d45\u5165\u6df1\uff0c\u5185\u5bb9\u7684\u96be\u5ea6\u5e94\u8be5\u5177\u6709\u6e10\u8fdb\u6027\u3002 \u903b\u8f91\u6027\uff0c\u5bf9\u4e8e\u6bcf\u7c7b\u5185\u5bb9\u7684\u64b0\u5199\u5e94\u8be5\u5c3d\u91cf\u5305\u542b\u4ee5\u4e0b\u7684\u5185\u5bb9\uff1a \u539f\u7406\uff0c\u8bf4\u660e\u8be5\u5185\u5bb9\u5bf9\u5e94\u7684\u539f\u7406\u3002 \u4f8b\u5b50\uff0c\u7ed9\u51fa 1 ~ 2 \u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002 \u9898\u76ee\uff0c\u5728\u8be5\u6807\u9898\u4e0b\uff0c \u53ea\u9700\u8981\u7ed9\u51fa\u9898\u76ee\u540d\u5b57\u3001\u9898\u76ee\u94fe\u63a5 \u3002","title":"\u6587\u6863\u7684\u5408\u7406\u6027"},{"location":"intro/faq/#_6","text":"\u5bf9\u4e8e\u6bcf\u7c7b\u8981\u7f16\u5199\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94\u7684\u6587\u6863\u5e94\u8be5\u5b58\u50a8\u5728\u5408\u9002\u7684\u76ee\u5f55\u4e0b\u3002 images\uff0c \u5b58\u50a8\u6587\u6863\u4ecb\u7ecd\u65f6\u6240\u4f7f\u7528\u7684\u56fe\u7247\uff0c\u4f4d\u7f6e\u4e3a\u6240\u6dfb\u52a0\u7684\u76ee\u5f55\u4e0b\uff08\u5373\u683c\u5f0f\u4e3a ![](./images/xx.jpg) \uff09\u3002 \u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c \u5982 file-name \u3002","title":"\u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f"},{"location":"intro/faq/#faq","text":"","title":"F.A.Q."},{"location":"intro/faq/#_7","text":"\u76ee\u5f55\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 mkdocs.yml \u6587\u4ef6\u4e2d\u3002","title":"\u76ee\u5f55\u5728\u54ea"},{"location":"intro/faq/#topic","text":"\u5728\u5bf9\u5e94\u9875\u9762\u53f3\u4e0a\u65b9\u6709\u4e00\u4e2a\u7f16\u8f91\u6309\u94ae edit \uff0c\u70b9\u51fb\u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230 GitHub \u4e0a\u5bf9\u5e94\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u6216\u8005\u4e5f\u53ef\u4ee5\u81ea\u884c\u9605\u8bfb\u76ee\u5f55 (mkdocs.yml) \u67e5\u627e\u6587\u4ef6\u4f4d\u7f6e\u3002","title":"\u5982\u4f55\u4fee\u6539\u4e00\u4e2a topic \u7684\u5185\u5bb9"},{"location":"intro/faq/#topic_1","text":"\u53ef\u4ee5\u5f00\u4e00\u4e2a Issue\uff0c\u6ce8\u660e\u5e0c\u671b\u80fd\u6dfb\u52a0\u7684\u5185\u5bb9\u3002 \u53ef\u4ee5\u5f00\u4e00\u4e2a Pull Request\uff0c\u5728\u76ee\u5f55 (mkdocs.yml) \u4e2d\u52a0\u4e0a\u65b0\u7684 topic\uff0c\u5e76\u5728 docs \u6587\u4ef6\u5939\u4e0b\u5bf9\u5e94\u4f4d\u7f6e\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 .md \u6587\u4ef6\u3002 \u6ce8\u610f \u5199 .md \u6587\u4ef6\u65f6\uff0c\u8bf7\u52ff\u5728\u5f00\u5934\u5199\u4e0a\u6807\u9898\u3002","title":"\u5982\u4f55\u6dfb\u52a0\u4e00\u4e2a topic"},{"location":"intro/faq/#commit-message","text":"\u6211\u4eec\u63a8\u8350\u4f7f\u7528 commitizen/cz-cli \u6765\u89c4\u8303 commit message \uff08\u5e76\u975e\u5f3a\u6c42\uff09\u3002","title":"commit message \u600e\u4e48\u5199"},{"location":"intro/faq/#github_2","text":"\u63a8\u8350\u5728 hosts \u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u51e0\u884c\uff1a\uff08\u6765\u6e90\uff1a @GoogleHosts \uff09 1 2 3 4 5 ## GitHub Start 192.30.253.118 gist.github.com 192.30.253.112 github.com 192.30.253.112 www.github.com ## GitHub End \u53ef\u4ee5\u5728 @GoogleHosts \u4e3b\u9875 \u4e0a\u4e86\u89e3\u5230\u66f4\u591a\u4fe1\u606f\u3002","title":"\u6211\u5c1d\u8bd5\u8bbf\u95ee GitHub \u7684\u65f6\u5019\u9047\u5230\u4e86\u56f0\u96be"},{"location":"intro/faq/#pip","text":"\u53ef\u4ee5\u9009\u62e9\u66f4\u6362\u56fd\u5185\u6e90\uff0c\u53c2\u8003\uff1a \u66f4\u6539 pip \u6e90\u81f3\u56fd\u5185\u955c\u50cf - L \u745c - CSDN \u535a\u5ba2 \uff0c\u6216\u8005\uff1a 1 pip install -U -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/","title":"\u6211\u8fd9\u91cc pip \u4e5f\u592a\u6162\u4e86"},{"location":"intro/faq/#clone","text":"\u5982\u679c\u6709\u5b89\u88c5 git bash \uff0c\u53ef\u4ee5\u52a0\u51e0\u4e2a\u9650\u5236\u6765\u51cf\u5c11\u4e0b\u8f7d\u91cf\uff1a 1 git clone https://github.com/24OI/OI-wiki.git --depth = 1 -b master \u53c2\u8003\uff1a https://blog.csdn.net/FreeApe/article/details/46845555","title":"\u6211\u5728\u5ba2\u6237\u7aef clone \u4e86\u8fd9\u4e2a\u9879\u76ee\uff0c\u901f\u5ea6\u592a\u6162"},{"location":"intro/faq/#python-3","text":"\u53ef\u4ee5\u8bbf\u95ee Python \u5b98\u7f51 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002","title":"\u6211\u6ca1\u88c5\u8fc7 Python 3"},{"location":"intro/faq/#pip_1","text":"\u8fdb\u5165 cmd / shell \u4e4b\u540e\uff0c 1 python -m pip install --upgrade pip","title":"\u597d\u50cf\u63d0\u793a\u6211 pip \u7248\u672c\u8fc7\u4f4e"},{"location":"intro/faq/#_8","text":"\u68c0\u67e5\u4e00\u4e0b\uff1a\u7f51\u7edc\uff1f\u6743\u9650\uff1f\u67e5\u770b\u9519\u8bef\u4fe1\u606f\uff1f","title":"\u6211\u5b89\u88c5\u4f9d\u8d56\u5931\u8d25\u4e86"},{"location":"intro/faq/#clone_1","text":"\u68c0\u67e5\u4e00\u4e0b\u662f\u5426\u5b89\u88c5\u597d\u4e86\u4f9d\u8d56\uff1f","title":"\u6211\u5df2\u7ecf clone \u4e0b\u6765\u4e86\uff0c\u4e3a\u4ec0\u4e48\u90e8\u7f72\u4e0d\u4e86"},{"location":"intro/faq/#clone-repo","text":"\u53c2\u8003\uff1a https://help.github.com/articles/syncing-a-fork/ \u3002","title":"\u6211 clone \u4e86\u5f88\u4e45\u4e4b\u524d\u7684 repo\uff0c\u600e\u4e48\u66f4\u65b0\u5230\u65b0\u7248\u672c\u5462"},{"location":"intro/faq/#_9","text":"1 pip install -U -r requirements.txt","title":"\u5982\u679c\u662f\u88c5\u4e86\u4e4b\u524d\u7684\u4f9d\u8d56\u600e\u4e48\u66f4\u65b0"},{"location":"intro/faq/#markdown","text":"\u53ef\u4ee5\u67e5\u9605 cyent \u7684\u7b14\u8bb0 \uff0c\u6216\u8005 MkDocs \u4f7f\u7528\u8bf4\u660e \u3002 \u6211\u4eec\u76ee\u524d\u5728\u4f7f\u7528 remark-lint \u6765\u81ea\u52a8\u5316\u4fee\u6b63\u683c\u5f0f\uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b \u914d\u7f6e \u4e0d\u591f\u597d\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u6307\u51fa\u3002","title":"\u4e3a\u4ec0\u4e48\u6211\u7684 markdown \u683c\u5f0f\u4e71\u4e86"},{"location":"intro/faq/#remark-lint","text":"\u6211\u4eec\u73b0\u5728\u542f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u5728 .remarkrc \uff0c\u5b83\u53ef\u4ee5\u81ea\u52a8\u7ed9\u9879\u76ee\u5185\u6587\u4ef6\u7edf\u4e00\u98ce\u683c\u3002 \u5728\u914d\u7f6e\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e5f\u9047\u5230\u4e86\u4e00\u4e9b remark-lint \u4e0d\u80fd\u5f88\u597d\u5904\u7406\u7684\u95ee\u9898\uff1a ## \u7b80\u4ecb \u6807\u9898\u8981\u7a7a\u4e00\u683c\uff08\u82f1\u6587\u534a\u89d2\u7a7a\u683c\uff09\uff0c\u4e5f\u4e0d\u8981\u5199\u6210 ## \u7b80\u4ecb ## \u3002 \u5217\u8868 \u5217\u8868\u524d\u8981\u6709\u7a7a\u884c\uff0c\u65b0\u5f00\u4e00\u6bb5\u3002 1. \u4f8b\u5b50 \u70b9\u53f7\u540e\u8981\u6709\u7a7a\u683c\u3002 \u884c\u95f4\u516c\u5f0f\u4e0d\u80fd\u5199\u5728\u4e00\u884c\u91cc\uff0c\u5426\u5219\u4f1a\u88ab\u5f53\u505a\u662f\u884c\u5185\u516c\u5f0f \u4f2a\u4ee3\u7801\u8bf7\u4f7f\u7528 ```text","title":"remark-lint \u8981\u6c42\u600e\u6837\u7684\u683c\u5f0f"},{"location":"intro/faq/#github_3","text":"\u662f\u7684\uff0cGitHub \u7684\u9884\u89c8\u4e0d\u663e\u793a\u6570\u5b66\u516c\u5f0f\u3002\u4f46\u662f\u8bf7\u653e\u5fc3\uff0cmkdocs \u662f\u652f\u6301\u6570\u5b66\u516c\u5f0f\u7684\uff0c\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\uff0c\u53ea\u8981\u662f MathJax \u652f\u6301\u7684\u53e5\u5f0f\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002","title":"GitHub \u662f\u4e0d\u662f\u4e0d\u663e\u793a\u6211\u7684\u6570\u5b66\u516c\u5f0f\uff1f"},{"location":"intro/faq/#_10","text":"\u5982\u679c\u662f\u884c\u95f4\u516c\u5f0f\uff08\u7528\u7684 $$ \uff09\uff0c\u76ee\u524d\u5df2\u77e5\u7684\u95ee\u9898\u662f\u9700\u8981\u5728 $$ \u4e24\u4fa7\u7559\u6709\u7a7a\u884c\uff0c\u4e14 $$ \u8981 \u5355\u72ec \u653e\u5728\u4e00\u884c\u91cc\uff08\u4e14\u4e0d\u8981\u5728\u524d\u52a0\u7a7a\u683c\uff09\u3002\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 4 5 // \u7a7a\u884c $$ a_i $$ // \u7a7a\u884c","title":"\u6211\u7684\u6570\u5b66\u516c\u5f0f\u600e\u4e48\u4e71\u7801\u4e86"},{"location":"intro/faq/#_11","text":"\u662f\u7684\uff0c\u8fd9\u4e2a\u662f python-markdown \u7684\u4e00\u4e2a bug\uff0c\u53ef\u80fd\u8fd1\u671f\u4f1a\u4fee\u590d\u3002 \u5982\u679c\u73b0\u5728\u60f3\u8981\u907f\u514d\u76ee\u5f55\u4e2d\u51fa\u73b0\u53cc\u500d\u516c\u5f0f\uff0c\u53ef\u4ee5\u53c2\u8003 https://github.com/24OI/OI-wiki/blame/master/docs/string/sam.md#L82 1 ### \u7ed3\u675f\u4f4d\u7f6e <script type=\"math/tex\">endpos</script> \u5728\u76ee\u5f55\u4e2d\u4f1a\u53d8\u6210 1 \u7ed3\u675f\u4f4d\u7f6e endpos \u6ce8\uff1a\u73b0\u5728\u8bf7\u5c3d\u91cf\u907f\u514d\u5728\u76ee\u5f55\u4e2d\u5f15\u5165 MathJax \u516c\u5f0f\u3002","title":"\u6211\u7684\u516c\u5f0f\u4e3a\u4ec0\u4e48\u5728\u76ee\u5f55\u91cc\u6ca1\u6709\u6b63\u5e38\u663e\u793a\uff1f\u597d\u50cf\u53cc\u500d\u4e86\uff1f"},{"location":"intro/faq/#_12","text":"\u53c2\u8003 Metadata \u7684\u4f7f\u7528\uff0c\u5728\u9875\u9762\u5f00\u5934\u52a0\u4e00\u884c\u5373\u53ef\u3002 \u6bd4\u5982\uff1a 1 copyright: SATA \u6ce8\uff1a\u9ed8\u8ba4\u7684\u662f \u2018CC BY-SA 4.0 \u548c SATA\u2019\u3002","title":"\u5982\u4f55\u7ed9\u4e00\u4e2a\u9875\u9762\u5355\u72ec\u58f0\u660e\u7248\u6743\u4fe1\u606f"},{"location":"intro/faq/#_13","text":"\u53c2\u8003 Metadata \u7684\u4f7f\u7528\uff0c\u5728\u9875\u9762\u5f00\u5934\u52a0\u4e00\u884c\u5373\u53ef\u3002 \u6bd4\u5982\uff1a 1 pagetime:","title":"\u5982\u4f55\u7ed9\u4e00\u4e2a\u9875\u9762\u5173\u95ed\u5b57\u6570\u7edf\u8ba1 \uff08\u73b0\u5df2\u9ed8\u8ba4\u5173\u95ed\uff09"},{"location":"intro/judgers/","text":"\u5f88\u591a\u65f6\u5019\uff0c\u4f60\u62ff\u5230\u4e86\u4e00\u5957\u9898\uff0c\u60f3\u8981\u5728\u672c\u5730\u6d4b\u8bd5\u4e00\u4e0b\u81ea\u5df1\u80fd\u5f97\u591a\u5c11\u5206\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u8bc4\u6d4b\u8f6f\u4ef6\u4e86\u3002 Cena \u00b6 Cena \u662f\u7531\u5218\u5176\u5e05\u548c\u674e\u5b50\u661f\u4f7f\u7528 Pascal \u8bed\u8a00\u7f16\u5199\u7684\u5f00\u6e90\u8bc4\u6d4b\u5de5\u5177\uff0c\u662f\u6d41\u4f20\u6700\u5e7f\u6cdb\u7684\u672c\u5730\u8bc4\u6d4b\u5de5\u5177\u3002Cena \u6700\u521d\u5f00\u6e90\u4e8e Google Code \u5e73\u53f0\uff0c\u7531\u4e8e\u4e0d\u660e\u539f\u56e0 Google \u5220\u9664\u4e86 Cena \u9879\u76ee\uff0c\u76ee\u524d\u53ef\u4ee5\u5728 Web Archive \u4e0a\u627e\u5230 Cena \u7684\u5b98\u7f51\u3002 Cena \u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 Cena \u5bf9\u6743\u9650\u7684\u9650\u5236\u4e0d\u662f\u5f88\u660e\u786e\uff0c\u6d4b\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u8bfb\u6d4b\u70b9 AC QAQ Lemon \u00b6 Lemon \u662f zhipeng-jia \u5199\u7684\u5f00\u6e90\u7684\u8bc4\u6d4b\u5de5\u5177\uff0c\u5730\u5740\u5728\uff1a zhipeng-jia/project-lemon \u3002 Ir1d \u63d0\u4f9b\u4e86\u4e00\u4efd linux \u4e0b\u7f16\u8bd1\u597d\u7684\u7248\u672c\u5728 FreestyleOJ/Project_lemon \u3002 Menci \u63d0\u4f9b\u4e86\u4e00\u4efd\u66f4\u65b0\u7684\u7248\u672c\u5728 Menci/Lemon \u3002 \u6ce8\u610f macOS \u4e0b Lemon \u53ef\u80fd\u4f1a\u51fa\u73b0\u5185\u5b58\u6d4b\u8bd5\u4e0d\u51c6\u786e\u7684\u60c5\u51b5\uff0c \u8fd9\u662f\u7531\u4e8e mac \u4e0b\u6ca1\u6709\u4e00\u4e9b Linux \u7684\u76d1\u6d4b\u5de5\u5177\uff0c\u800c Lemon-Linux \u4e5f\u6ca1\u6709\u5bf9\u4e8e macOS \u7684\u4f7f\u7528\u4f18\u5316\u3002 \u81ea\u884c\u7f16\u8bd1 \u00b6 \u5728 Ubuntu \u4e0b\u7f16\u8bd1\uff1a 1 2 3 4 5 6 7 8 9 sudo apt update sudo apt install qt5-default build-essential git -y git clone --depth = 1 http://github.com/menci/lemon.git cd lemon # \u53ef\u4ee5\u4fee\u6539 make \u6587\u4ef6\u6765\u8c03\u6574 make job \u7684\u7ebf\u7a0b\u6570 sed -i 's/make $/make -j 1 $/g' make ./make cp Lemon ~ cd .. \u6570\u636e\u683c\u5f0f \u00b6 \u9996\u5148\u6253\u5f00 lemon \u9009\u62e9\u65b0\u5efa\u8bd5\u9898\uff0c\u800c\u540e\u6253\u5f00\u65b0\u5efa\u8bd5\u9898\u7684\u6587\u4ef6\u5939 \u9898\u76ee\u548c\u6570\u636e\u5e94\u8be5\u5982\u4ee5\u4e0b\u683c\u5f0f\u6240\u793a 1 2 3 4 5 6 7 8 9 \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 gendata.py \u2502 \u251c\u2500\u2500 product \u2502 \u2502 \u251c\u2500\u2500 product100.in \u2502 \u2502 \u251c\u2500\u2500 product100.out \u2502 \u2502 \u251c\u2500\u2500 product10.in \u2502 \u2502 \u251c\u2500\u2500 product10.out \u2502 \u2502 \u251c\u2500\u2500 product11.in ... \u5f53\u6240\u6709\u8bd5\u9898\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u56de\u5230 lemon \u9009\u62e9\u81ea\u52a8\u6dfb\u52a0\u8bd5\u9898 \u6b64\u65f6\u4f60\u7684\u9898\u76ee\u548c\u6570\u636e\u70b9\u5e94\u8be5\u90fd\u663e\u793a\u5728 lemon \u5f53\u4e2d\u4e86 Arbiter \u00b6 Arbiter \u4e3a\u5317\u4eac\u822a\u7a7a\u822a\u5929\u5927\u5b66\u4e3a NOI Linux \u5f00\u53d1\u7684\u8bc4\u6d4b\u5de5\u5177\uff0c\u73b0\u5df2\u7528\u4e8e\u5404\u5927 NOI \u7cfb\u5217\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u7684\u8bc4\u6d4b\u3002\u636e\u5415\u51ef\u98ce\u5728 2016 \u5e74\u51ac\u4ee4\u8425\u4e0a\u7684\u8bb2\u7a3f\u300a\u4e0b\u4e00\u4ee3\u6d4b\u8bc4\u7cfb\u7edf\u300b\uff0cArbiter \u662f\u7531\u5317\u4eac\u822a\u7a7a\u822a\u5929\u5927\u5b66\u7684\u56e2\u961f\uff08\u8c8c\u4f3c\u53eb GAIT\uff09\u5728\u5c39\u5b9d\u6797\u8001\u5e08\u7684\u5e26\u9886\u4e0b\u5f00\u53d1\u5b8c\u6210\u7684\u3002\u4e0d\u8fc7\u8be5\u6d4b\u8bc4\u5de5\u5177\u5728\u5f00\u53d1\u5b8c\u6210\u540e\u5c31\u4e00\u76f4\u6ca1\u6709\u7ef4\u62a4\u4e0e\u66f4\u65b0\uff0c\u5bfc\u81f4\u6d4b\u8bc4\u4f53\u9a8c\u6781\u5dee\uff0c\u548c NOI Linux \u81ea\u5e26\u7684 GUIDE \u4e00\u6837\u6ca6\u4e3a\u9009\u624b\u4e0e\u6559\u7ec3\u75af\u72c2\u5410\u69fd\u7684\u5bf9\u8c61\u3002\u4f46\u662f NOIP \u4e0e NOI \u7684\u9898\u76ee\u6d4b\u8bc4\u662f\u5728 Arbiter \u4e0b\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u4ecd\u7136\u9700\u8981\u4e86\u89e3 Arbiter \u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u4f7f\u7528\u65b9\u6cd5 \u00b6 \u9996\u5148\u51c6\u5907\u597d\u9009\u624b\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5939\u3002\u9009\u624b\u6587\u4ef6\u5939\u5982 NOIP \u683c\u5f0f\u521b\u5efa\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 players/ | -- <contestant_1's ID> | | -- <problem_1> | | `-- <problem_1>.c/cpp/pas | | -- <problem_2> | | `-- <problem_2>.c/cpp/pas | | ... | | -- <problem_x> | `-- <problem_x>.c/cpp/pas | -- <contestant_2's ID> | | -- <problem_1> | ... ... \u5176\u4e2d\uff0c <contestant_x's ID> \u6307\u7684\u662f\u9009\u624b\u7f16\u53f7\uff0c\u5f62\u5982 <\u7701\u4efd>-< \u7f16\u53f7 > \uff0c\u4f8b\u5982 HL-001,JL-125 \u7b49\u7b49\uff0c <problem_x> \u6307\u7684\u662f\u9898\u76ee\u540d\u79f0\u3002 \u5f53\u7136\uff0c\u5728\u81ea\u6d4b\u65f6\u53ef\u4ee5\u4f7f\u7528\u5b57\u6bcd\uff0c\u77ed\u7ebf\uff08\u5373 - \uff09\u548c\u6570\u5b57\u7684\u7ec4\u5408\u4f5c\u4e3a\u9009\u624b\u7f16\u53f7\u3002 \u51c6\u5907\u597d\u9009\u624b\u6587\u4ef6\u5939\u8fd8\u4e0d\u591f\uff0c\u9700\u8981\u51c6\u5907\u9009\u624b\u540d\u5355\u3002\u540d\u5355\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 <contestant_1's ID>, <contestant_1's name> <contestant_2's ID>, <contestant_2's name> ... \u5176\u4e2d <contestant_x's name> \u8868\u793a\u9009\u624b\u59d3\u540d\uff0c\u4fdd\u5b58\u8fd9\u4e2a\u6587\u4ef6\u4e3a\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u6587\u4ef6\u7f16\u7801\u662f GB2312\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\uff0c\u7a0d\u540e\u4ecb\u7ecd\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u9009\u624b\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5939\u5df2\u7ecf\u641e\u5b9a\uff0c\u73b0\u5728\u914d\u7f6e\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u7684\u547d\u540d\u683c\u5f0f\u5982\u4e0b\uff1a 1 <problem_x><y>.in <problem_x><y>.ans \u5176\u4e2d\uff0c <y> \u662f\u6570\u636e\u7f16\u53f7\uff0c\u7f16\u53f7\u4ece 1 \u5f00\u59cb\u3002 \u9ed8\u8ba4\u6d4b\u8bd5\u6570\u636e\u540e\u7f00\u540d\u662f .ans \uff0c\u9009\u624b\u8f93\u51fa\u7684\u540e\u7f00\u540d\u662f .out \uff0c\u4e0d\u80fd\u6df7\u6dc6\u3002\u4e0d\u7528\u5c06\u6bcf\u9898\u7684\u6d4b\u8bd5\u6570\u636e\u653e\u7f6e\u5728\u5404\u81ea\u6587\u4ef6\u5939\u91cc\uff0c\u53ea\u9700\u8981\u653e\u5728\u4e00\u8d77\u5373\u53ef\u3002 \u8fd9\u6837\u5c31\u51c6\u5907\u597d\u4e86\uff0c\u73b0\u5728\u5f00\u59cb\u6d4b\u8bc4\u6587\u4ef6\u5939\u7684\u914d\u7f6e\u3002 \u5de5\u5177\u680f - \u5e94\u7528\u7a0b\u5e8f - \u7f16\u7a0b - Arbiter \u6d4b\u8bc4\u7cfb\u7edf\uff0c\u542f\u52a8 Arbiter\u3002 \u5982\u679c\u8981\u6253\u5f00\u5df2\u7ecf\u5efa\u7acb\u7684\u6bd4\u8d5b\uff0c\u8bf7\u70b9\u51fb OPEN\uff0c\u8fd9\u91cc\u65b0\u5efa\u4e00\u4e2a\u7ade\u8d5b\uff0c\u9009\u62e9 New\uff0c\u8bbe\u7f6e\u4e00\u4e0b\u540d\u79f0\u548c\u6bd4\u8d5b\u76ee\u5f55\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7136\u540e\u9009\u62e9\u5176\u4e3a\u6bd4\u8d5b\u76ee\u5f55\u3002 \u5728\u5de6\u8fb9\u8bd5\u9898\u6982\u8981\u91cc\u53f3\u952e - \u6dfb\u52a0\u8003\u8bd5\uff0c\u518d\u5728\u8003\u8bd5\u6807\u7b7e\u4e0a\u53f3\u952e - \u6dfb\u52a0\u8bd5\u9898\uff0c\u65b0\u5efa\u51fa\u8bd5\u9898\u5373\u53ef\u3002 \u5355\u51fb\u8003\u8bd5\u5de6\u8fb9\u7684 + \u5373\u53ef\u5168\u90e8\u663e\u793a\uff0c\u5355\u51fb\u8bd5\u9898\u6807\u7b7e\u5bf9\u8bd5\u9898\u540d\u79f0\u8fdb\u884c\u4fee\u6539\uff0c\u6539\u4e3a\u9898\u76ee\u7684\u82f1\u6587\u540d\u79f0\uff0c\u540c\u65f6\u4fee\u6539\u9898\u76ee\u65f6\u95f4\u4e0e\u7a7a\u95f4\u9650\u5236\u548c\u6bd4\u8f83\u65b9\u5f0f\u3002\u6bd4\u8f83\u65b9\u5f0f\u5341\u5206\u4e0d\u63a8\u8350\u7528\u5168\u6587\u5b8c\u5168\u76f4\u63a5\u6bd4\u8f83\uff0c\u5bf9\u4e8e Windows \u4e0b\u5236\u4f5c\u7684\u6570\u636e\u5341\u5206\u4e0d\u53cb\u597d\u3002\u6bd4\u8f83\u65b9\u5f0f\u4e0d\u9009\u7684\u8bdd\u9ed8\u8ba4\u4e3a\u5b57\u7b26\u4e32\u6bd4\u8f83\u4e2d\u7684\u5355\u884c\u5355\u5b57\u7b26\u4e32\u6bd4\u8f83\u65b9\u5f0f\u3002\u5982\u679c\u6d4b\u8bd5\u6570\u636e\u4e0d\u540c\u7684\u8bdd\u4e00\u5b9a\u8981\u6ce8\u610f\u6bd4\u8f83\u65b9\u5f0f\u7684\u9009\u62e9\uff01 \uff08\u5efa\u4e86\u4e00\u4e9b\u65e0\u804a\u7684\u95ee\u9898\uff09 \u8fd9\u4e00\u6b65 \u5341\u5206\u91cd\u8981\uff1a \u70b9\u51fb\u6587\u4ef6 - \u4fdd\u5b58\uff01\u4e00\u5b9a\u8981\u4fdd\u5b58\uff0c\u5426\u5219\u6ca1\u6709\u9898\u76ee\u914d\u7f6e\u6587\u4ef6\uff01\u6bcf\u4e00\u6b21\u5bf9\u9898\u76ee\u914d\u7f6e\u7684\u4fee\u6539\u90fd\u8981\u4fdd\u5b58\uff01 \u6b64\u65f6\uff0c\u6253\u5f00\u8003\u8bd5\u6587\u4ef6\u5939\uff0c\u4f1a\u53d1\u73b0\u6709\u5982\u4e0b\u5185\u5bb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <name>/ | -- data | -- evaldata | -- filter | -- final | -- players | -- result | -- tmp `-- day1.info `-- player.info `-- setup.cfg `-- task1_1.info `-- task1_2.info `-- task1_3.info `-- team.info \u6211\u4eec\u628a\u5df2\u7ecf\u5efa\u597d\u7684\u9009\u624b\u7a0b\u5e8f\u6587\u4ef6\u5939\u653e\u5728 players/ \u76ee\u5f55\u4e0b\uff0c\u5c06\u6240\u6709\u6d4b\u8bd5\u6570\u636e\uff08\u4e0d\u653e\u5728\u6587\u4ef6\u5939\u91cc\uff09\u653e\u5728 evaldata \u4e2d\u3002 filter/ \u6587\u4ef6\u5939\u653e\u7f6e\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5668\u53ca\u5176\u6e90\u4ee3\u7801\uff0c\u5199\u81ea\u5b9a\u4e49\u6bd4\u8f83\u5668\u65f6\u53ef\u4ee5\u53c2\u8003\uff0c result/ \u6587\u4ef6\u5939\u5b58\u653e\u9009\u624b\u7684\u6d4b\u8bc4\u7ed3\u679c\uff0c tmp/ \u6587\u4ef6\u5939\u662f\u6d4b\u8bc4\u65f6\u6587\u4ef6\u5939\u3002 \u914d\u7f6e\u597d\u540e\uff0c\u5c31\u662f\u6b63\u5f0f\u6d4b\u8bc4\u73af\u8282\u4e86\u3002\u70b9\u5f00 \u201c\u8bd5\u9898\u8bc4\u6d4b\u201d \u6807\u7b7e\uff0c\u7136\u540e\u4f1a\u51fa\u73b0\u5982\u4e0b\u6240\u793a\u60c5\u51b5\u3002 \u5982\u679c\u5df2\u7ecf\u5efa\u7acb\u597d\u9009\u624b\u540d\u5355\u4e86\uff0c\u9009\u62e9\u53f3\u8fb9\u7684\u5bfc\u5165\u540d\u5355\u8fdb\u884c\u5bfc\u5165\u3002\u5982\u679c\u4eba\u6570\u8f83\u5c11\uff0c\u53ef\u4ee5\u9009\u62e9\u53f3\u8fb9\u7684\u6dfb\u52a0\u9009\u624b\u8fdb\u884c\u5bfc\u5165\u3002 \u5bfc\u5165\u597d\u540e\u662f\u8fd9\u6837\u7684\u3002 \u56e0\u4e3a\u6211\u53d6\u5f97\u7f16\u53f7\u662f HL-001 \uff0c\u6240\u4ee5\u4f1a\u81ea\u52a8\u8bc6\u522b\u51fa \u201c\u6240\u5c5e\u201d \u4e00\u680f\u3002\u5982\u679c\u4e0d\u662f NOIP \u89c4\u8303\u7684\u7f16\u53f7\u662f\u8bc6\u522b\u4e0d\u51fa\u6765\u7684\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u8981\u7528 \u5411\u4e0a\u7bad\u5934 \u628a\u6d4b\u8bc4\u7b2c 0 \u573a\u53d8\u4e3a\u6d4b\u8bc4\u7b2c 1 \u573a\uff0c\u5982\u679c\u76f4\u63a5\u4fee\u6539\u7684\u8bdd\u4f1a\u8bc6\u522b\u5931\u8d25\u3002 \u7136\u540e\u9009\u62e9\u53f3\u8fb9\u7684\u5168\u9009\uff0c\u518d\u9009\u62e9\u4e0b\u9762\u7684\u8bc4\u6d4b\u9009\u5b9a\u9009\u624b\uff0c\u9009\u62e9\u8981\u6d4b\u8bc4\u7684\u9898\u76ee\uff08\u6709\u5168\u90e8\u8bd5\u9898\uff09\uff0c\u7b49\u5f85\u6d4b\u8bc4\u7ed3\u675f\u5373\u53ef\u3002 \u6ce8\u610f\u4e8b\u9879\uff0c\u69fd\u70b9 \u00b6 \u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u7684\u7f16\u5199 \u00b6 \u6ce8\u610f\u7f16\u8bd1\u540e\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u540d\u79f0\u4e3a <problem>_e \uff0c\u5176\u4e2d <problem> \u4e3a\u9898\u76ee\u540d\u79f0\uff0c\u5fc5\u987b\u653e\u5728 filter/ \u6587\u4ef6\u5939\u4e0b\u3002\u5728\u914d\u7f6e\u9898\u76ee\u65f6\u9009\u62e9\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\uff0c\u7136\u540e\u9009\u62e9\u9700\u8981\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u3002 \u53ef\u4ee5\u53c2\u8003 filter/ \u4e0b\u7684\u6e90\u4ee3\u7801\u7f16\u5199\u3002 \u6d4b\u8bc4\u65f6\u6ce8\u610f\u4e8b\u9879 \u00b6 \u4ee5\u4e0b\u4fe1\u606f\u5747\u6765\u81ea\u655d\u6821\u6559\u7ec3\u3002 \u636e\u8bf4\u5f88\u5bb9\u6613\u6b7b\u673a\uff0c\u9700\u8981\u6ce8\u610f\u3002 \u636e\u8bf4\u5927\u91cf\u6d4b\u8bc4\u65f6\u79fb\u52a8\u9f20\u6807\u4f1a\u5bfc\u81f4\u6b7b\u673a\uff0c\u9700\u8981\u6ce8\u610f\u3002 \u636e\u8bf4\u4e0d\u5b9a\u65f6\u95ea\u9000\uff0c\u548c Anjuta \u4e00\u6837\uff0c\u9700\u8981\u6ce8\u610f\u3002 \u636e\u8bf4\u914d\u7f6e\u65f6\u9700\u8981\u6ce8\u610f\u6743\u9650\u95ee\u9898\uff08\u4f46\u662f\u6211\u5e76\u672a\u9047\u5230\uff09\u3002 \u2026\u2026 \u8bf6\u6211\u600e\u4e48\u53ea\u80fd\u770b\u89c1\u4ee3\u7801\u4e0d\u80fd\u770b\u89c1\u6bcf\u4e2a\u70b9\u5f97\u591a\u5c11\u5206 \u00b6 \u6d4b\u8bd5\u70b9\u8be6\u7ec6\u4fe1\u606f\u9700\u8981\u5728 result/ \u6587\u4ef6\u5939\u4e0b\u67e5\u770b\uff0c\u6587\u4ef6\u5939\u4e0b\u4f1a\u6709\u9009\u624b\u7684\u7ed3\u679c\u6587\u4ef6\u5939\uff0c\u7ed3\u679c\u6587\u4ef6\u7684\u540e\u7f00\u540d\u4e3a .result \uff0c\u7528\u7eaf\u6587\u672c\u65b9\u5f0f\u67e5\u770b\u5373\u53ef\u3002 \uff08\u6211\u89c9\u5f97\u8fd9\u4e2a\u8bbe\u8ba1\u5f88\u503c\u5f97\u5410\u69fd\uff09 \u8bf6\u8fd9\u4e2a\u6d4b\u8bc4\u7cfb\u7edf\u597d\u96be\u770b \u00b6 \u6211\u89c9\u5f97\u4e5f\u662f\u2026\u2026 \u8bf6\u600e\u4e48\u6d4b\u63d0\u4ea4\u7b54\u6848\u9898\u554a \u00b6 \u5728\u8bd5\u9898\u7ba1\u7406\u4e2d\u9898\u76ee\u914d\u7f6e\u7684\u5730\u65b9\uff0c\u5c06\u63d0\u4ea4\u65b9\u5f0f\u7531\u6e90\u4ee3\u7801\u6539\u4e3a\u7b54\u6848\u6587\u4ef6\u3002\u7136\u540e\u9009\u62e9\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u5373\u53ef\u3002 \u8bf6\u8fd9\u4e2a\u6d4b\u8bc4\u7cfb\u7edf\u6709\u6ca1\u6709\u6f0f\u6d1e \u00b6 \u81f3\u5c11\u4e0d\u80fd\u8bfb\u53d6\u7b54\u6848\u6587\u4ef6\u2026\u2026 bits/stdc++.h \u6d4b\u5f97\u53ef\u7528\u3002 #pragma G++ optimize(\"O2\") \u7adf\u7136\u53ef\u7528\u3002 __attribute__((__optimize__(\"-O2\"))) \u7adf\u7136\u4e5f\u53ef\u7528\u3002 \u6211\u53ef\u80fd\u7528\u7684\u662f\u5047 Arbiter\u2026\u2026 \u5410\u69fd \u00b6 \u8bb2\u4e2a\u6545\u4e8b\uff1a \u6709\u4e00\u5929\uff0c\u4e00\u4f4d\u7ade\u8d5b\u6559\u7ec3\u5728\u7528 GUIDE \u7684\u65f6\u5019\u53d1\u73b0\u5355\u6b65\u8c03\u8bd5\u529f\u80fd\u51fa\u73b0\u4e86 Bug\uff0c\u4e8e\u662f\u4ed6\u81f4\u4fe1\u5317\u822a\u76f8\u5173\u9879\u76ee\u8d1f\u8d23\u4eba\u8be2\u95ee\u89e3\u51b3\u529e\u6cd5\uff0c\u5f97\u5230\u7684\u56de\u590d\u662f\uff1a\u201c\u8fd9\u4e2a\u9879\u76ee\u5df2\u7ecf\u505c\u6b62\u66f4\u65b0\u4e86\u3002\u201d \u5e0c\u671b\u4e00\u4e2a\u6210\u719f\u7684\u7ebf\u4e0b\u6d4b\u8bc4\u7cfb\u7edf\u65e9\u65e5\u5b9e\u73b0\u2026\u2026 CCR-Plus \u00b6 \u4e00\u6b3e\u5f00\u6e90\u7684\u754c\u9762\u597d\u770b\u7684\u8bc4\u6d4b\u5de5\u5177 GitHub \u5730\u5740 \uff1a sxyzccr/CCR-Plus","title":"\u8bc4\u6d4b\u5de5\u5177"},{"location":"intro/judgers/#cena","text":"Cena \u662f\u7531\u5218\u5176\u5e05\u548c\u674e\u5b50\u661f\u4f7f\u7528 Pascal \u8bed\u8a00\u7f16\u5199\u7684\u5f00\u6e90\u8bc4\u6d4b\u5de5\u5177\uff0c\u662f\u6d41\u4f20\u6700\u5e7f\u6cdb\u7684\u672c\u5730\u8bc4\u6d4b\u5de5\u5177\u3002Cena \u6700\u521d\u5f00\u6e90\u4e8e Google Code \u5e73\u53f0\uff0c\u7531\u4e8e\u4e0d\u660e\u539f\u56e0 Google \u5220\u9664\u4e86 Cena \u9879\u76ee\uff0c\u76ee\u524d\u53ef\u4ee5\u5728 Web Archive \u4e0a\u627e\u5230 Cena \u7684\u5b98\u7f51\u3002 Cena \u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 Cena \u5bf9\u6743\u9650\u7684\u9650\u5236\u4e0d\u662f\u5f88\u660e\u786e\uff0c\u6d4b\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u8bfb\u6d4b\u70b9 AC QAQ","title":"Cena"},{"location":"intro/judgers/#lemon","text":"Lemon \u662f zhipeng-jia \u5199\u7684\u5f00\u6e90\u7684\u8bc4\u6d4b\u5de5\u5177\uff0c\u5730\u5740\u5728\uff1a zhipeng-jia/project-lemon \u3002 Ir1d \u63d0\u4f9b\u4e86\u4e00\u4efd linux \u4e0b\u7f16\u8bd1\u597d\u7684\u7248\u672c\u5728 FreestyleOJ/Project_lemon \u3002 Menci \u63d0\u4f9b\u4e86\u4e00\u4efd\u66f4\u65b0\u7684\u7248\u672c\u5728 Menci/Lemon \u3002 \u6ce8\u610f macOS \u4e0b Lemon \u53ef\u80fd\u4f1a\u51fa\u73b0\u5185\u5b58\u6d4b\u8bd5\u4e0d\u51c6\u786e\u7684\u60c5\u51b5\uff0c \u8fd9\u662f\u7531\u4e8e mac \u4e0b\u6ca1\u6709\u4e00\u4e9b Linux \u7684\u76d1\u6d4b\u5de5\u5177\uff0c\u800c Lemon-Linux \u4e5f\u6ca1\u6709\u5bf9\u4e8e macOS \u7684\u4f7f\u7528\u4f18\u5316\u3002","title":"Lemon"},{"location":"intro/judgers/#_1","text":"\u5728 Ubuntu \u4e0b\u7f16\u8bd1\uff1a 1 2 3 4 5 6 7 8 9 sudo apt update sudo apt install qt5-default build-essential git -y git clone --depth = 1 http://github.com/menci/lemon.git cd lemon # \u53ef\u4ee5\u4fee\u6539 make \u6587\u4ef6\u6765\u8c03\u6574 make job \u7684\u7ebf\u7a0b\u6570 sed -i 's/make $/make -j 1 $/g' make ./make cp Lemon ~ cd ..","title":"\u81ea\u884c\u7f16\u8bd1"},{"location":"intro/judgers/#_2","text":"\u9996\u5148\u6253\u5f00 lemon \u9009\u62e9\u65b0\u5efa\u8bd5\u9898\uff0c\u800c\u540e\u6253\u5f00\u65b0\u5efa\u8bd5\u9898\u7684\u6587\u4ef6\u5939 \u9898\u76ee\u548c\u6570\u636e\u5e94\u8be5\u5982\u4ee5\u4e0b\u683c\u5f0f\u6240\u793a 1 2 3 4 5 6 7 8 9 \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 gendata.py \u2502 \u251c\u2500\u2500 product \u2502 \u2502 \u251c\u2500\u2500 product100.in \u2502 \u2502 \u251c\u2500\u2500 product100.out \u2502 \u2502 \u251c\u2500\u2500 product10.in \u2502 \u2502 \u251c\u2500\u2500 product10.out \u2502 \u2502 \u251c\u2500\u2500 product11.in ... \u5f53\u6240\u6709\u8bd5\u9898\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u56de\u5230 lemon \u9009\u62e9\u81ea\u52a8\u6dfb\u52a0\u8bd5\u9898 \u6b64\u65f6\u4f60\u7684\u9898\u76ee\u548c\u6570\u636e\u70b9\u5e94\u8be5\u90fd\u663e\u793a\u5728 lemon \u5f53\u4e2d\u4e86","title":"\u6570\u636e\u683c\u5f0f"},{"location":"intro/judgers/#arbiter","text":"Arbiter \u4e3a\u5317\u4eac\u822a\u7a7a\u822a\u5929\u5927\u5b66\u4e3a NOI Linux \u5f00\u53d1\u7684\u8bc4\u6d4b\u5de5\u5177\uff0c\u73b0\u5df2\u7528\u4e8e\u5404\u5927 NOI \u7cfb\u5217\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u7684\u8bc4\u6d4b\u3002\u636e\u5415\u51ef\u98ce\u5728 2016 \u5e74\u51ac\u4ee4\u8425\u4e0a\u7684\u8bb2\u7a3f\u300a\u4e0b\u4e00\u4ee3\u6d4b\u8bc4\u7cfb\u7edf\u300b\uff0cArbiter \u662f\u7531\u5317\u4eac\u822a\u7a7a\u822a\u5929\u5927\u5b66\u7684\u56e2\u961f\uff08\u8c8c\u4f3c\u53eb GAIT\uff09\u5728\u5c39\u5b9d\u6797\u8001\u5e08\u7684\u5e26\u9886\u4e0b\u5f00\u53d1\u5b8c\u6210\u7684\u3002\u4e0d\u8fc7\u8be5\u6d4b\u8bc4\u5de5\u5177\u5728\u5f00\u53d1\u5b8c\u6210\u540e\u5c31\u4e00\u76f4\u6ca1\u6709\u7ef4\u62a4\u4e0e\u66f4\u65b0\uff0c\u5bfc\u81f4\u6d4b\u8bc4\u4f53\u9a8c\u6781\u5dee\uff0c\u548c NOI Linux \u81ea\u5e26\u7684 GUIDE \u4e00\u6837\u6ca6\u4e3a\u9009\u624b\u4e0e\u6559\u7ec3\u75af\u72c2\u5410\u69fd\u7684\u5bf9\u8c61\u3002\u4f46\u662f NOIP \u4e0e NOI \u7684\u9898\u76ee\u6d4b\u8bc4\u662f\u5728 Arbiter \u4e0b\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u4ecd\u7136\u9700\u8981\u4e86\u89e3 Arbiter \u7684\u4f7f\u7528\u65b9\u6cd5\u3002","title":"Arbiter"},{"location":"intro/judgers/#_3","text":"\u9996\u5148\u51c6\u5907\u597d\u9009\u624b\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5939\u3002\u9009\u624b\u6587\u4ef6\u5939\u5982 NOIP \u683c\u5f0f\u521b\u5efa\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 players/ | -- <contestant_1's ID> | | -- <problem_1> | | `-- <problem_1>.c/cpp/pas | | -- <problem_2> | | `-- <problem_2>.c/cpp/pas | | ... | | -- <problem_x> | `-- <problem_x>.c/cpp/pas | -- <contestant_2's ID> | | -- <problem_1> | ... ... \u5176\u4e2d\uff0c <contestant_x's ID> \u6307\u7684\u662f\u9009\u624b\u7f16\u53f7\uff0c\u5f62\u5982 <\u7701\u4efd>-< \u7f16\u53f7 > \uff0c\u4f8b\u5982 HL-001,JL-125 \u7b49\u7b49\uff0c <problem_x> \u6307\u7684\u662f\u9898\u76ee\u540d\u79f0\u3002 \u5f53\u7136\uff0c\u5728\u81ea\u6d4b\u65f6\u53ef\u4ee5\u4f7f\u7528\u5b57\u6bcd\uff0c\u77ed\u7ebf\uff08\u5373 - \uff09\u548c\u6570\u5b57\u7684\u7ec4\u5408\u4f5c\u4e3a\u9009\u624b\u7f16\u53f7\u3002 \u51c6\u5907\u597d\u9009\u624b\u6587\u4ef6\u5939\u8fd8\u4e0d\u591f\uff0c\u9700\u8981\u51c6\u5907\u9009\u624b\u540d\u5355\u3002\u540d\u5355\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 <contestant_1's ID>, <contestant_1's name> <contestant_2's ID>, <contestant_2's name> ... \u5176\u4e2d <contestant_x's name> \u8868\u793a\u9009\u624b\u59d3\u540d\uff0c\u4fdd\u5b58\u8fd9\u4e2a\u6587\u4ef6\u4e3a\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u6587\u4ef6\u7f16\u7801\u662f GB2312\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\uff0c\u7a0d\u540e\u4ecb\u7ecd\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u9009\u624b\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5939\u5df2\u7ecf\u641e\u5b9a\uff0c\u73b0\u5728\u914d\u7f6e\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u7684\u547d\u540d\u683c\u5f0f\u5982\u4e0b\uff1a 1 <problem_x><y>.in <problem_x><y>.ans \u5176\u4e2d\uff0c <y> \u662f\u6570\u636e\u7f16\u53f7\uff0c\u7f16\u53f7\u4ece 1 \u5f00\u59cb\u3002 \u9ed8\u8ba4\u6d4b\u8bd5\u6570\u636e\u540e\u7f00\u540d\u662f .ans \uff0c\u9009\u624b\u8f93\u51fa\u7684\u540e\u7f00\u540d\u662f .out \uff0c\u4e0d\u80fd\u6df7\u6dc6\u3002\u4e0d\u7528\u5c06\u6bcf\u9898\u7684\u6d4b\u8bd5\u6570\u636e\u653e\u7f6e\u5728\u5404\u81ea\u6587\u4ef6\u5939\u91cc\uff0c\u53ea\u9700\u8981\u653e\u5728\u4e00\u8d77\u5373\u53ef\u3002 \u8fd9\u6837\u5c31\u51c6\u5907\u597d\u4e86\uff0c\u73b0\u5728\u5f00\u59cb\u6d4b\u8bc4\u6587\u4ef6\u5939\u7684\u914d\u7f6e\u3002 \u5de5\u5177\u680f - \u5e94\u7528\u7a0b\u5e8f - \u7f16\u7a0b - Arbiter \u6d4b\u8bc4\u7cfb\u7edf\uff0c\u542f\u52a8 Arbiter\u3002 \u5982\u679c\u8981\u6253\u5f00\u5df2\u7ecf\u5efa\u7acb\u7684\u6bd4\u8d5b\uff0c\u8bf7\u70b9\u51fb OPEN\uff0c\u8fd9\u91cc\u65b0\u5efa\u4e00\u4e2a\u7ade\u8d5b\uff0c\u9009\u62e9 New\uff0c\u8bbe\u7f6e\u4e00\u4e0b\u540d\u79f0\u548c\u6bd4\u8d5b\u76ee\u5f55\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7136\u540e\u9009\u62e9\u5176\u4e3a\u6bd4\u8d5b\u76ee\u5f55\u3002 \u5728\u5de6\u8fb9\u8bd5\u9898\u6982\u8981\u91cc\u53f3\u952e - \u6dfb\u52a0\u8003\u8bd5\uff0c\u518d\u5728\u8003\u8bd5\u6807\u7b7e\u4e0a\u53f3\u952e - \u6dfb\u52a0\u8bd5\u9898\uff0c\u65b0\u5efa\u51fa\u8bd5\u9898\u5373\u53ef\u3002 \u5355\u51fb\u8003\u8bd5\u5de6\u8fb9\u7684 + \u5373\u53ef\u5168\u90e8\u663e\u793a\uff0c\u5355\u51fb\u8bd5\u9898\u6807\u7b7e\u5bf9\u8bd5\u9898\u540d\u79f0\u8fdb\u884c\u4fee\u6539\uff0c\u6539\u4e3a\u9898\u76ee\u7684\u82f1\u6587\u540d\u79f0\uff0c\u540c\u65f6\u4fee\u6539\u9898\u76ee\u65f6\u95f4\u4e0e\u7a7a\u95f4\u9650\u5236\u548c\u6bd4\u8f83\u65b9\u5f0f\u3002\u6bd4\u8f83\u65b9\u5f0f\u5341\u5206\u4e0d\u63a8\u8350\u7528\u5168\u6587\u5b8c\u5168\u76f4\u63a5\u6bd4\u8f83\uff0c\u5bf9\u4e8e Windows \u4e0b\u5236\u4f5c\u7684\u6570\u636e\u5341\u5206\u4e0d\u53cb\u597d\u3002\u6bd4\u8f83\u65b9\u5f0f\u4e0d\u9009\u7684\u8bdd\u9ed8\u8ba4\u4e3a\u5b57\u7b26\u4e32\u6bd4\u8f83\u4e2d\u7684\u5355\u884c\u5355\u5b57\u7b26\u4e32\u6bd4\u8f83\u65b9\u5f0f\u3002\u5982\u679c\u6d4b\u8bd5\u6570\u636e\u4e0d\u540c\u7684\u8bdd\u4e00\u5b9a\u8981\u6ce8\u610f\u6bd4\u8f83\u65b9\u5f0f\u7684\u9009\u62e9\uff01 \uff08\u5efa\u4e86\u4e00\u4e9b\u65e0\u804a\u7684\u95ee\u9898\uff09 \u8fd9\u4e00\u6b65 \u5341\u5206\u91cd\u8981\uff1a \u70b9\u51fb\u6587\u4ef6 - \u4fdd\u5b58\uff01\u4e00\u5b9a\u8981\u4fdd\u5b58\uff0c\u5426\u5219\u6ca1\u6709\u9898\u76ee\u914d\u7f6e\u6587\u4ef6\uff01\u6bcf\u4e00\u6b21\u5bf9\u9898\u76ee\u914d\u7f6e\u7684\u4fee\u6539\u90fd\u8981\u4fdd\u5b58\uff01 \u6b64\u65f6\uff0c\u6253\u5f00\u8003\u8bd5\u6587\u4ef6\u5939\uff0c\u4f1a\u53d1\u73b0\u6709\u5982\u4e0b\u5185\u5bb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <name>/ | -- data | -- evaldata | -- filter | -- final | -- players | -- result | -- tmp `-- day1.info `-- player.info `-- setup.cfg `-- task1_1.info `-- task1_2.info `-- task1_3.info `-- team.info \u6211\u4eec\u628a\u5df2\u7ecf\u5efa\u597d\u7684\u9009\u624b\u7a0b\u5e8f\u6587\u4ef6\u5939\u653e\u5728 players/ \u76ee\u5f55\u4e0b\uff0c\u5c06\u6240\u6709\u6d4b\u8bd5\u6570\u636e\uff08\u4e0d\u653e\u5728\u6587\u4ef6\u5939\u91cc\uff09\u653e\u5728 evaldata \u4e2d\u3002 filter/ \u6587\u4ef6\u5939\u653e\u7f6e\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5668\u53ca\u5176\u6e90\u4ee3\u7801\uff0c\u5199\u81ea\u5b9a\u4e49\u6bd4\u8f83\u5668\u65f6\u53ef\u4ee5\u53c2\u8003\uff0c result/ \u6587\u4ef6\u5939\u5b58\u653e\u9009\u624b\u7684\u6d4b\u8bc4\u7ed3\u679c\uff0c tmp/ \u6587\u4ef6\u5939\u662f\u6d4b\u8bc4\u65f6\u6587\u4ef6\u5939\u3002 \u914d\u7f6e\u597d\u540e\uff0c\u5c31\u662f\u6b63\u5f0f\u6d4b\u8bc4\u73af\u8282\u4e86\u3002\u70b9\u5f00 \u201c\u8bd5\u9898\u8bc4\u6d4b\u201d \u6807\u7b7e\uff0c\u7136\u540e\u4f1a\u51fa\u73b0\u5982\u4e0b\u6240\u793a\u60c5\u51b5\u3002 \u5982\u679c\u5df2\u7ecf\u5efa\u7acb\u597d\u9009\u624b\u540d\u5355\u4e86\uff0c\u9009\u62e9\u53f3\u8fb9\u7684\u5bfc\u5165\u540d\u5355\u8fdb\u884c\u5bfc\u5165\u3002\u5982\u679c\u4eba\u6570\u8f83\u5c11\uff0c\u53ef\u4ee5\u9009\u62e9\u53f3\u8fb9\u7684\u6dfb\u52a0\u9009\u624b\u8fdb\u884c\u5bfc\u5165\u3002 \u5bfc\u5165\u597d\u540e\u662f\u8fd9\u6837\u7684\u3002 \u56e0\u4e3a\u6211\u53d6\u5f97\u7f16\u53f7\u662f HL-001 \uff0c\u6240\u4ee5\u4f1a\u81ea\u52a8\u8bc6\u522b\u51fa \u201c\u6240\u5c5e\u201d \u4e00\u680f\u3002\u5982\u679c\u4e0d\u662f NOIP \u89c4\u8303\u7684\u7f16\u53f7\u662f\u8bc6\u522b\u4e0d\u51fa\u6765\u7684\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u8981\u7528 \u5411\u4e0a\u7bad\u5934 \u628a\u6d4b\u8bc4\u7b2c 0 \u573a\u53d8\u4e3a\u6d4b\u8bc4\u7b2c 1 \u573a\uff0c\u5982\u679c\u76f4\u63a5\u4fee\u6539\u7684\u8bdd\u4f1a\u8bc6\u522b\u5931\u8d25\u3002 \u7136\u540e\u9009\u62e9\u53f3\u8fb9\u7684\u5168\u9009\uff0c\u518d\u9009\u62e9\u4e0b\u9762\u7684\u8bc4\u6d4b\u9009\u5b9a\u9009\u624b\uff0c\u9009\u62e9\u8981\u6d4b\u8bc4\u7684\u9898\u76ee\uff08\u6709\u5168\u90e8\u8bd5\u9898\uff09\uff0c\u7b49\u5f85\u6d4b\u8bc4\u7ed3\u675f\u5373\u53ef\u3002","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"intro/judgers/#_4","text":"","title":"\u6ce8\u610f\u4e8b\u9879\uff0c\u69fd\u70b9"},{"location":"intro/judgers/#_5","text":"\u6ce8\u610f\u7f16\u8bd1\u540e\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u540d\u79f0\u4e3a <problem>_e \uff0c\u5176\u4e2d <problem> \u4e3a\u9898\u76ee\u540d\u79f0\uff0c\u5fc5\u987b\u653e\u5728 filter/ \u6587\u4ef6\u5939\u4e0b\u3002\u5728\u914d\u7f6e\u9898\u76ee\u65f6\u9009\u62e9\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\uff0c\u7136\u540e\u9009\u62e9\u9700\u8981\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u3002 \u53ef\u4ee5\u53c2\u8003 filter/ \u4e0b\u7684\u6e90\u4ee3\u7801\u7f16\u5199\u3002","title":"\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u7684\u7f16\u5199"},{"location":"intro/judgers/#_6","text":"\u4ee5\u4e0b\u4fe1\u606f\u5747\u6765\u81ea\u655d\u6821\u6559\u7ec3\u3002 \u636e\u8bf4\u5f88\u5bb9\u6613\u6b7b\u673a\uff0c\u9700\u8981\u6ce8\u610f\u3002 \u636e\u8bf4\u5927\u91cf\u6d4b\u8bc4\u65f6\u79fb\u52a8\u9f20\u6807\u4f1a\u5bfc\u81f4\u6b7b\u673a\uff0c\u9700\u8981\u6ce8\u610f\u3002 \u636e\u8bf4\u4e0d\u5b9a\u65f6\u95ea\u9000\uff0c\u548c Anjuta \u4e00\u6837\uff0c\u9700\u8981\u6ce8\u610f\u3002 \u636e\u8bf4\u914d\u7f6e\u65f6\u9700\u8981\u6ce8\u610f\u6743\u9650\u95ee\u9898\uff08\u4f46\u662f\u6211\u5e76\u672a\u9047\u5230\uff09\u3002 \u2026\u2026","title":"\u6d4b\u8bc4\u65f6\u6ce8\u610f\u4e8b\u9879"},{"location":"intro/judgers/#_7","text":"\u6d4b\u8bd5\u70b9\u8be6\u7ec6\u4fe1\u606f\u9700\u8981\u5728 result/ \u6587\u4ef6\u5939\u4e0b\u67e5\u770b\uff0c\u6587\u4ef6\u5939\u4e0b\u4f1a\u6709\u9009\u624b\u7684\u7ed3\u679c\u6587\u4ef6\u5939\uff0c\u7ed3\u679c\u6587\u4ef6\u7684\u540e\u7f00\u540d\u4e3a .result \uff0c\u7528\u7eaf\u6587\u672c\u65b9\u5f0f\u67e5\u770b\u5373\u53ef\u3002 \uff08\u6211\u89c9\u5f97\u8fd9\u4e2a\u8bbe\u8ba1\u5f88\u503c\u5f97\u5410\u69fd\uff09","title":"\u8bf6\u6211\u600e\u4e48\u53ea\u80fd\u770b\u89c1\u4ee3\u7801\u4e0d\u80fd\u770b\u89c1\u6bcf\u4e2a\u70b9\u5f97\u591a\u5c11\u5206"},{"location":"intro/judgers/#_8","text":"\u6211\u89c9\u5f97\u4e5f\u662f\u2026\u2026","title":"\u8bf6\u8fd9\u4e2a\u6d4b\u8bc4\u7cfb\u7edf\u597d\u96be\u770b"},{"location":"intro/judgers/#_9","text":"\u5728\u8bd5\u9898\u7ba1\u7406\u4e2d\u9898\u76ee\u914d\u7f6e\u7684\u5730\u65b9\uff0c\u5c06\u63d0\u4ea4\u65b9\u5f0f\u7531\u6e90\u4ee3\u7801\u6539\u4e3a\u7b54\u6848\u6587\u4ef6\u3002\u7136\u540e\u9009\u62e9\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u5373\u53ef\u3002","title":"\u8bf6\u600e\u4e48\u6d4b\u63d0\u4ea4\u7b54\u6848\u9898\u554a"},{"location":"intro/judgers/#_10","text":"\u81f3\u5c11\u4e0d\u80fd\u8bfb\u53d6\u7b54\u6848\u6587\u4ef6\u2026\u2026 bits/stdc++.h \u6d4b\u5f97\u53ef\u7528\u3002 #pragma G++ optimize(\"O2\") \u7adf\u7136\u53ef\u7528\u3002 __attribute__((__optimize__(\"-O2\"))) \u7adf\u7136\u4e5f\u53ef\u7528\u3002 \u6211\u53ef\u80fd\u7528\u7684\u662f\u5047 Arbiter\u2026\u2026","title":"\u8bf6\u8fd9\u4e2a\u6d4b\u8bc4\u7cfb\u7edf\u6709\u6ca1\u6709\u6f0f\u6d1e"},{"location":"intro/judgers/#_11","text":"\u8bb2\u4e2a\u6545\u4e8b\uff1a \u6709\u4e00\u5929\uff0c\u4e00\u4f4d\u7ade\u8d5b\u6559\u7ec3\u5728\u7528 GUIDE \u7684\u65f6\u5019\u53d1\u73b0\u5355\u6b65\u8c03\u8bd5\u529f\u80fd\u51fa\u73b0\u4e86 Bug\uff0c\u4e8e\u662f\u4ed6\u81f4\u4fe1\u5317\u822a\u76f8\u5173\u9879\u76ee\u8d1f\u8d23\u4eba\u8be2\u95ee\u89e3\u51b3\u529e\u6cd5\uff0c\u5f97\u5230\u7684\u56de\u590d\u662f\uff1a\u201c\u8fd9\u4e2a\u9879\u76ee\u5df2\u7ecf\u505c\u6b62\u66f4\u65b0\u4e86\u3002\u201d \u5e0c\u671b\u4e00\u4e2a\u6210\u719f\u7684\u7ebf\u4e0b\u6d4b\u8bc4\u7cfb\u7edf\u65e9\u65e5\u5b9e\u73b0\u2026\u2026","title":"\u5410\u69fd"},{"location":"intro/judgers/#ccr-plus","text":"\u4e00\u6b3e\u5f00\u6e90\u7684\u754c\u9762\u597d\u770b\u7684\u8bc4\u6d4b\u5de5\u5177 GitHub \u5730\u5740 \uff1a sxyzccr/CCR-Plus","title":"CCR-Plus"},{"location":"intro/mode/","text":"\u8d5b\u4e8b\u4ecb\u7ecd \u00b6 OI \u7ade\u8d5b\u662f\u4e00\u9879\u5168\u7403\u7684\u8d5b\u4e8b\uff0c\u6bcf\u5e74\u590f\u5929\u4f1a\u6709\u4e16\u754c\u7ea7\u7ade\u8d5b\uff08IOI\uff09\u4e3e\u884c\uff0c\u53c2\u8d5b\u9009\u624b\u5927\u591a\u90fd\u7ecf\u8fc7\u5c42\u5c42\u9009\u62d4\u3002\u5bf9\u4e8e\u5927\u90e8\u5206\u9009\u624b\u800c\u8a00\uff0c\u6bcf\u5e74\u65b0\u8d5b\u5b63\u4ece 10 \u6708\u7684 NOIP \uff08\u7701\u7ea7\u9009\u62d4\u8d5b\uff09\u5f00\u59cb\u3002 OI \u7ade\u8d5b\u4e2d\u5141\u8bb8\u4f7f\u7528\u7684\u8bed\u8a00\u5305\u62ec Pascal\uff08NOI \u5c06\u4e8e 2020 \u5e74\u505c\u6b62\u4f7f\u7528 Pascal\uff0cNOIP \u5c06\u4e8e 2022 \u5e74\u505c\u6b62\u4f7f\u7528 Pascal\uff09\uff0cC \u548c C++\u3002\u5176\u4e2d C++ \u7684\u7248\u672c\u4e0d\u540c\u8003\u8bd5\u6709\u4e0d\u540c\u7684\u89c4\u5b9a\u3002\u8003\u8bd5\u9898\u76ee\u4e00\u822c\u4e3a\u7b97\u6cd5\u6216\u8005\u6570\u636e\u7ed3\u6784\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u9898\u76ee\u5f62\u5f0f\u5305\u62ec\u4f20\u7edf\u9898\uff08\u6700\u5e38\u89c1\u7684\u89c4\u5b9a\u8f93\u5165\u548c\u8f93\u51fa\u5230\u6587\u4ef6\u7684\u9898\u76ee\uff09\u548c\u975e\u4f20\u7edf\u9898\uff08\u63d0\u4ea4\u7b54\u6848\u9898\u3001\u4ea4\u4e92\u9898\u3001\u8865\u5168\u4ee3\u7801\u9898\u7b49\u7b49\uff09\u3002 NOIP \u00b6 NOIP\uff08National Olympiad in Informatics in Provinces\uff09\u662f\u5168\u56fd\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u8054\u8d5b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u4ee5\u7701\u4e3a\u5355\u4f4d\u6392\u540d\u8bc4\u5956\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u9ad8\u6821\u6765\u8bf4\uff0c\u83b7\u5f97\u7701\u4e00\u7b49\u5956\u53ef\u4ee5\u7528\u4e8e\u83b7\u5f97\u81ea\u4e3b\u62db\u751f\u8d44\u683c\u3002 NOIP \u5206\u4e3a\u521d\u8d5b\u548c\u590d\u8d5b\u4e24\u4e2a\u9636\u6bb5\u3002\u521d\u8d5b\u4f1a\u8003\u5bdf\u4e00\u4e9b\u8ba1\u7b97\u673a\u57fa\u7840\u77e5\u8bc6\u548c\u7b97\u6cd5\u57fa\u7840\uff08\u7b14\u8bd5\uff09\uff0c\u590d\u8d5b\u662f\u4e0a\u673a\u8003\u8bd5\uff0c\u65f6\u95f4\u4e0a\u4e00\u822c\u662f 11 \u6708\u7684\u7b2c\u4e8c\u4e2a\u5468\u672b\u3002\u5168\u56fd\u4f7f\u7528\u540c\u4e00\u5957\u8bd5\u5377\uff0c\u4f46\u662f\u8bc4\u5956\u89c4\u5219\u662f\u6309\u7167\u7701\u5185\u60c5\u51b5\u7531 CCF \uff08\u4e2d\u56fd\u8ba1\u7b97\u673a\u5b66\u4f1a\uff09\u7edf\u4e00\u6307\u5b9a\uff0c\u5e76\u4e8e\u8d5b\u540e\u5728 NOI \u5b98\u65b9\u7f51\u7ad9 \u4e0a\u516c\u5e03\u3002 \u7701\u9009 \u00b6 \u7701\u961f\u9009\u62d4\u8d5b\u662f\u7528\u4e8e\u9009\u62d4\u5404\u7701\u53c2\u52a0\u5168\u56fd\u8d5b\u7684\u4ee3\u8868\u961f\uff0c\u5404\u4e2a\u7701\u961f\u7684\u540d\u989d\u6709\u590d\u6742\u7684\u8ba1\u7b97\u516c\u5f0f\uff0c\u4e00\u822c\u548c\u4e4b\u524d\u7684\u6210\u7ee9\u548c\u53c2\u8d5b\u4eba\u6570\u6709\u5173\u3002\u7701\u9009\u7531\u5404\u4e2a\u7701\u81ea\u884c\u51b3\u5b9a\uff0c\u76ee\u524d\u7684\u8d8b\u52bf\u662f\u5f88\u591a\u7701\u4efd\u9009\u62e9\u8054\u5408\u547d\u9898\u3002\u901a\u5e38\u6765\u8bb2\uff0cNOIP \u5206\u6570\u9700\u8981\u5728\u7701\u9009\u4e2d\u5360\u4e00\u5b9a\u6bd4\u4f8b\u3002 NOI \u00b6 NOI\uff08National Olympiad in Informatics\uff09\u662f\u5168\u56fd\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff0c\u4e00\u822c\u5728\u4e03\u6708\u4efd\u4e3e\u884c\uff0c\u6709\u73b0\u573a\u8d5b\u548c\u7f51\u7edc\u8d5b\u3002\u73b0\u573a\u8d5b\u9009\u624b\u5206\u4e3a\u56db\u7c7b\uff0c\u5176\u4e2d A\u3001B\u3001C \u7c7b\u4e3a\u6b63\u5f0f\u9009\u624b\u3002A\u3001B \u7c7b\u5bf9\u5e94\u7701\u961f\u7684 A\u3001B \u7c7b\u9009\u624b\uff08\u5176\u4e2d A \u7c7b\u5728\u8ba1\u7b97\u6210\u7ee9\u65f6\u4f1a\u6709 5 \u5206\u52a0\u5206\uff09\uff0cC \u7c7b\u540d\u4e49\u4e0a\u662f\u5b66\u6821\u5bf9 CCF \u505a\u51fa\u7a81\u51fa\u8d21\u732e\u540e\u7684\u5956\u52b1\u540d\u989d\uff0cD \u7c7b\u662f\u9080\u8bf7\u8d5b\u9009\u624b\uff0c\u5982\u679c\u6210\u7ee9\u8d85\u8fc7\u5206\u6570\u7ebf\u7684\u8bdd\uff0c\u53ea\u6709\u6210\u7ee9\u8bc1\u660e\u800c\u6ca1\u6709\u5956\u724c\uff08\u540c\u7b49\u5206\u6570\u542b\u91d1\u91cf\u8981\u4f4e\u4e00\u4e9b\uff09\u3002\u6b63\u5f0f\u9009\u624b\u524d 50 \u540d\u7ec4\u6210\u56fd\u5bb6\u96c6\u8bad\u961f\uff0c\u83b7\u5f97\u4fdd\u9001\u8d44\u683c\u3002\u7f51\u7edc\u8d5b\u62a5\u540d\u5f62\u5f0f\u4e0a\u6ca1\u6709\u95e8\u69db\u3002 WC \u00b6 WC\uff08Winter Camp\uff09\u662f\u5168\u56fd\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\u51ac\u4ee4\u8425\uff0c\u662f\u6bcf\u5e74\u51ac\u5929\u5728\u5f53\u5e74 NOI \u4e3e\u529e\u5730\u8fdb\u884c\u7684\u4e00\u9879\u6d3b\u52a8\uff0c\u5185\u5bb9\u5305\u62ec\u82e5\u5e72\u5929\u7684\u57f9\u8bad\u548c\u4e00\u5929\u7684\u8003\u8bd5\u3002\u8fd9\u9879\u8003\u8bd5\u4e3b\u8981\u7528\u4e8e\u4ece\u56fd\u5bb6\u96c6\u8bad\u961f\uff08 50 \u4eba\uff09\u9009\u62d4\u56fd\u5bb6\u5019\u9009\u961f\uff08 15 \u4eba\uff09\u3002 APIO \u00b6 APIO\uff08Asia-Pacific Informatics Olympiad\uff09\u662f\u4e9a\u592a\u5730\u533a\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff0cCCF \u6bcf\u5e74\u4f1a\u5728\u4e94\u6708\u521d\u4e3e\u529e\u4e2d\u56fd\u8d5b\u533a\u955c\u50cf\u8d5b\u3002\u5728\u6bd4\u8d5b\u65e5\u524d\u540e\u4f1a\u6709\u57f9\u8bad\u6d3b\u52a8\u3002 CTSC \u00b6 CTSC\uff08China Team Selection Competition\uff09\u662f\u4e2d\u56fd\u961f\u9009\u62d4\u8d5b\u3002\u7528\u6765\u4ece\u56fd\u5bb6\u5019\u9009\u961f\uff08 15 \u4eba\uff09\u4e2d\u9009\u62d4\u56fd\u5bb6\u961f\uff08 6 \u4eba\uff09\u51c6\u5907\u53c2\u52a0\u5f53\u5e74\u590f\u5929\u7684 IOI \u6bd4\u8d5b\uff0c\u5176\u4e2d\u6b63\u5f0f\u9009\u624b 4 \u4eba\uff0c\u66ff\u8865\u9009\u624b 2 \u4eba\u3002 \u6ce8\uff1a APIO \u548c CTSC \u90fd\u662f\u4ee5\u7701\u4e3a\u5355\u4f4d\u62a5\u540d\uff0c\u4e00\u822c\u662f\u6309\u7167 NOIP \u6210\u7ee9\u6392\u5e8f\u6765\u786e\u5b9a\u8c01\u4f1a\u6709\u673a\u4f1a\u53c2\u52a0 APIO \u548c CTSC \uff08\u4e8c\u8005\u4e00\u822c\u65f6\u95f4\u4e0a\u975e\u5e38\u63a5\u8fd1\uff09\u3002 IOI \u00b6 IOI\uff08International Olympiad in Informatics\uff09\u662f\u56fd\u9645\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u6709\u56db\u4eba\u53c2\u8d5b\uff0c\u6bd4\u8d5b\u4e00\u822c\u4f1a\u6709\u76f4\u64ad\u3002IOI \u8d5b\u5236\u4e2d\u6bcf\u4e2a\u9898\u76ee\u4f1a\u6709 subtask \uff08\u5b50\u4efb\u52a1\uff09\uff0c\u6bcf\u4e2a\u5b50\u4efb\u52a1\u5bf9\u5e94\u4e00\u5b9a\u7684\u5206\u6570\u3002 \u8d5b\u5236\u4ecb\u7ecd \u00b6 OI \u8d5b\u5236 \u00b6 \u4e00\u822c\u7684 OI \u8d5b\u5236\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u4eba\u5728 5 \u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\u5185\u5c1d\u8bd5\u89e3\u51b3 3 \u4e2a\u9898\u3002\u6bcf\u4e2a\u9898\u76ee\u53ef\u4ee5\u4e0d\u5168\u90e8\u89e3\u51b3\uff0c\u4f1a\u6709\u591a\u4e2a\u6570\u636e\u70b9\uff0c\u9898\u76ee\u7684\u5206\u6570\u4e00\u822c\u662f\u6570\u636e\u70b9\u5f97\u5206\u4e4b\u548c\u3002\u6bcf\u4e2a\u6570\u636e\u70b9\u8fd8\u53ef\u80fd\u4f1a\u6709\u90e8\u5206\u5206\uff0c\u5c31\u662f\u6570\u636e\u70b9\u5185\u90e8\u4e5f\u4e0d\u9700\u8981\u5b8c\u5168\u6b63\u786e\u624d\u80fd\u5f97\u5230\u5206\u6570\u3002\u8bc4\u5206\u65b9\u5f0f\u662f\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u7edf\u4e00\u8bc4\u6d4b\uff0c\u53ea\u6709\u4e00\u6b21\u63d0\u4ea4\u673a\u4f1a\u3002 NOIP\u3001NOI\u3001\u7701\u9009\u90fd\u662f OI \u8d5b\u5236\u3002 IOI \u8d5b\u5236 \u00b6 \u76ee\u524d\u56fd\u5185\u6bd4\u8d5b\u4e5f\u5728\u9010\u6e10\u5411 IOI \u8d5b\u5236\u9760\u62e2\u3002 IOI \u8d5b\u5236\u53ef\u4ee5\u8d5b\u65f6\u4efb\u610f\u63d0\u4ea4\uff0c\u53ef\u4ee5\u5373\u65f6\u67e5\u770b\u8bc4\u6d4b\u7ed3\u679c\uff0c APIO\u3001IOI \u90fd\u662f IOI \u8d5b\u5236\u3002 ACM / ICPC \u8d5b\u5236 \u00b6 \u5728 ACM / ICPC \u6bd4\u8d5b\u4e2d\u4e00\u822c\u662f\u4e09\u4e2a\u4eba\u4f7f\u7528\u4e00\u53f0\u673a\u5668\uff0c\u6bcf\u4e2a\u9898\u76ee\u53ea\u6709\u5728\u6240\u6709\u6570\u636e\u70b9\u5168\u90e8\u6b63\u786e\u540e\u624d\u80fd\u5f97\u5230\u5206\u6570\u3002\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u6709\u591a\u6b21\u63d0\u4ea4\u673a\u4f1a\uff0c\u5b9e\u65f6\u8bc4\u6d4b\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u6bd4\u8d5b\u6392\u540d\u6839\u636e\u505a\u9898\u6570\u548c\u7f5a\u65f6\u6765\u8bc4\u5224\uff0c\u7f5a\u65f6\u662f\u901a\u8fc7\u9898\u76ee\u7684\u7528\u65f6\u4e4b\u548c\u52a0\u4e0a\u9519\u8bef\u63d0\u4ea4\u6b21\u6570\u4e58\u4ee5\u4e00\u4e2a\u7cfb\u6570\u3002\u5728 ACM \u76f8\u5173\u8d5b\u4e8b\u4e2d\uff0c\u9009\u624b\u5141\u8bb8\u5e26\u7eb8\u8d28\u8d44\u6599\u3002 Codeforces (CF) \u8d5b\u5236 \u00b6 Codeforces \u662f\u4e00\u4e2a\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\uff0c\u5b9a\u671f\u4f1a\u4e3e\u529e\u6bd4\u8d5b\u3002\u5b83\u7684\u6bd4\u8d5b\u7279\u70b9\u662f\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u53ea\u6d4b\u8bd5\u4e00\u90e8\u5206\u6570\u636e\uff08pretests\uff09\uff0c\u800c\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fd4\u56de\u5b8c\u6574\u7684\u6240\u6709\u6d4b\u8bd5\u70b9\u7684\u6d4b\u8bd5\u7ed3\u679c\uff08system tests\uff09\u3002\u6bd4\u8d5b\u65f6\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\uff0c\u5141\u8bb8 hack \u522b\u4eba\u7684\u4ee3\u7801\uff08\u6b64\u5904 hack \u7684\u610f\u601d\u662f\u63d0\u4ea4\u4e00\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4f7f\u5f97\u522b\u4eba\u7684\u4ee3\u7801\u65e0\u6cd5\u7ed9\u51fa\u6b63\u786e\u7b54\u6848\uff09\u3002\u5f53\u7136\uff0c\u5982\u679c\u60f3\u8981 hack \uff0c\u5fc5\u987b\u8981\u9501\u5b9a\u81ea\u5df1\u7684\u4ee3\u7801\uff08\u6362\u8a00\u4e4b\uff0c\u6bd4\u8d5b\u65f6\u65e0\u6cd5\u91cd\u65b0\u63d0\u4ea4\u8be5\u9898\uff09\u3002 \u5176\u4ed6\u56fd\u5bb6\u548c\u5730\u533a\u7684 OI \u7ade\u8d5b \u00b6 \u7f8e\u56fd\uff1aUSACO \u00b6 \u5b98\u7f51\u5730\u5740\uff1a https://www.usaco.org/ USACO \u6216\u8bb8\u662f\u56fd\u5185\u9009\u624b\u6700\u719f\u6089\u7684\u5916\u56fd OI \u7ade\u8d5b\uff08\u56e0\u6b64\u53ef\u80fd\u4e5f\u662f\u4e2d\u6587\u9898\u89e3\u6700\u591a\u7684\u5916\u56fd OI \u7ade\u8d5b\uff09\u3002 \u6bcf\u5e74\u51ac\u5b63\u5230\u521d\u6625\uff0cUSACO \u4f1a\u6bcf\u6708\u4e3e\u529e\u4e00\u573a\u7f51\u7edc\u8d5b\u3002\u4e00\u573a\u6bd4\u8d5b\u6301\u7eed 3\\sim5 3\\sim5 \u4e2a\u5c0f\u65f6\u3002 \u6839\u636e\u5b98\u7f51\u7684\u4ecb\u7ecd\uff0cUSACO \u7684\u6bd4\u8d5b\u5206\u6210\u8fd9 4 \u6863\u96be\u5ea6\uff082015~2016 \u5b66\u5e74\u4e4b\u524d\u4e3a 3 \u6863\uff09\uff1a \u94dc\u724c\u7ec4\uff0c\u9002\u5408\u7f16\u7a0b\u521d\u5b66\u8005\uff0c\u5c24\u5176\u662f\u53ea\u5b66\u4e86\u6700\u6700\u57fa\u7840\u7684\u7b97\u6cd5\uff08\u5982\uff1a\u6392\u5e8f\uff0c\u4e8c\u5206\u67e5\u627e\uff09\u7684\u5b66\u751f\u3002 \u94f6\u724c\u7ec4\uff0c\u9002\u5408\u5f00\u59cb\u5b66\u4e60\u57fa\u672c\u7684\u7b97\u6cd5\u6280\u5de7\uff08\u5982\uff1a\u9012\u5f52\uff0c\u641c\u7d22\uff0c\u8d2a\u5fc3\u7b97\u6cd5\uff09\u548c\u57fa\u7840\u6570\u636e\u7ed3\u6784\u7684\u5b66\u751f\u3002 \u91d1\u724c\u7ec4\uff0c\u5b66\u751f\u4f1a\u9047\u5230\u66f4\u590d\u6742\u7684\u7b97\u6cd5\uff08\u5982\uff1a\u6700\u77ed\u8def\u5f84\uff0cDP\uff09\u548c\u66f4\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u3002 \u94c2\u91d1\u7ec4\uff0c\u9002\u5408\u6709\u7740\u624e\u5b9e\u7684\u7b97\u6cd5\u8bbe\u8ba1\u80fd\u529b\u7684\u9009\u624b\uff0c\u94c2\u91d1\u7ec4\u53ef\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u4ee5\u590d\u6742\u4e14\u66f4\u5f00\u653e\u7684\u95ee\u9898\u6765 \u653e\u98de \u6311\u6218\u81ea\u6211\u3002 \u5728\u56fd\u5185\uff0c\u76ee\u524d USACO \u9898\u76ee\u6700\u9f50\u5168\u7684\u662f\u6d1b\u8c37\u3002 \u6ce2\u5170\uff1aPOI \u00b6 \u5b98\u7f51\uff1a https://oi.edu.pl/ \u5b98\u65b9\u63d0\u4ea4\u5730\u5740\uff1a https://szkopul.edu.pl/p/default/problemset/ POI \u662f\u4e0d\u5c11\u7701\u9009\u9009\u624b\u6700\u5e38\u5237\u7684\u5916\u56fd OI \u6bd4\u8d5b\u3002 \u6839\u636e\uff08\u5df2\u7ecf\u51c9\u51c9\u7684\uff09 http://main.edu.pl/en/ \u7684\u63cf\u8ff0\uff0cPOI \u7684\u6d41\u7a0b\u5982\u4e0b\uff1a \u7b2c\u4e00\u8f6e\uff1a\u4e94\u9898\uff0c\u7f51\u7edc\u8d5b\uff0c\u516c\u5f00\u8d5b\u3002 \u7b2c\u4e8c\u8f6e\uff1a\u5305\u542b\u4e00\u573a\u7ec3\u4e60\u8d5b\uff0c\u548c\u4e24\u573a\u6b63\u5f0f\u6bd4\u8d5b\u3002 \u7b2c\u4e09\u8f6e\uff1a\u8d5b\u5236\u540c\u4e0a\u3002 ONTAK\uff1aPOI \u8bad\u7ec3\u8425\uff08\u7c7b\u4f3c\u56fd\u5185\u7684\u96c6\u8bad\u961f\uff09 \u4f60\u53ef\u80fd\u8fd8\u542c\u8bf4\u8fc7 PA\u3002PA \u7684\u5927\u610f\u662f \u201c\u7b97\u6cd5\u5927\u6218\u201d\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u5b83\u53eb\u8fd9\u540d\u5b57\uff09\u3002 \u76ee\u524d\u5728\u56fd\u5185 OJ \u4e2d\uff0cPOI \u9898\u76ee\u6700\u5168\u7684\u662f BZOJ\u3002 \u514b\u7f57\u5730\u4e9a\uff1aCOCI \u00b6 \u5b98\u7f51\u5730\u5740\uff1a http://www.hsin.hr/coci/ \uff08\u6709\u65f6\u5019\u82f1\u6587\u7248\u7684\u66f4\u65b0\u4f1a\u5ef6\u8fdf\uff0c\u514b\u7f57\u5730\u4e9a\u8bed\u7248\u672c\uff1a http://www.hsin.hr/honi/ \uff09 \u96be\u5ea6\u8de8\u5ea6\u5f88\u5927\u7684\u6bd4\u8d5b\uff0c\u5927\u7ea6\u662f\u4ece\u666e\u53ca - \\sim \\sim \u7701\u9009 -\u3002\u4ee5\u5f80 COCI \u6240\u6709\u7684\u9898\u76ee\u5747\u63d0\u4f9b\u9898\u76ee\u3001\u6570\u636e\u3001\u9898\u89e3\u548c\u6807\u7a0b\uff0c\u7136\u800c\u4ece 2017 \u5e74\u5e95\u4e4b\u540e\uff0cCOCI \u7684\u9898\u89e3\u548c\u6807\u7a0b\u5c31\u65ad\u66f4\u4e86\uff08\u4e0d\u662f\u6ca1\u6709\u82f1\u8bed\u7248\u7ffb\u8bd1\uff0c\u800c\u662f\u8fde\u514b\u7f57\u5730\u4e9a\u8bed\u7684\u7248\u672c\u90fd\u6ca1\u6709\uff09\u3002 \u6d1b\u8c37\u3001BZOJ \u548c LibreOJ \u90fd\u6709\u5c11\u91cf\u7684 COCI \u9898\u76ee\u3002 \u65e5\u672c\uff1aJOI \u00b6 \u5b98\u7f51\u5730\u5740\uff1a https://www.ioi-jp.org/ \u65e5\u672c\u4fe1\u606f\u5b66\u5965\u8d5b\uff08\u65e5\u672c\u60c5\u5831\u30aa\u30ea\u30f3\u30d4\u30c3\u30af\uff09\u4e00\u822c\u7b80\u79f0\u4e3a JOI\u3002JOI \u6240\u6709\u7684\u9898\u76ee\u90fd\u63d0\u4f9b\u9898\u76ee\u3001\u6570\u636e\u3001\u9898\u89e3\u548c\u6807\u7a0b\u3002\u8fd1\u4e24\u5e74\u7684 JOI \u51b3\u8d5b\u548c\u6625\u8bad\u8425\u63d0\u4f9b\u4e86\u82f1\u8bed\u9898\u9762\uff0c\u4f46\u5e76\u6ca1\u6709\u82f1\u8bed\u9898\u89e3\u3002\u5386\u5e74\u7684 JOI Open \u90fd\u63d0\u4f9b\u4e86\u82f1\u8bed\u7248\u9898\u9762\u548c\u9898\u89e3\u3002\u7edd\u5927\u90e8\u5206 JOI \u9898\u53ef\u4ee5\u5de6\u8f6c AtCoder \u63d0\u4ea4\u3002 JOI \u7684\u6d41\u7a0b\uff1a \u9884\u8d5b\uff08\u4e88\u9078\uff09 \u51b3\u8d5b\uff08\u672c\u9078 / JOI Final\uff09 \u6625\u8bad\u8425\uff08\u6625\u5b63\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u5408\u5bbf / JOI Spring Camp / JOISC\uff09 \u516c\u5f00\u8d5b\uff08\u901a\u4fe1\u6559\u80b2 / JOI Open Contest\uff09 \u76ee\u524d LibreOJ \u548c BZOJ \u6709\u8fd1\u4e9b\u5e74\u7684 JOI Final\u3001JOISC \u548c JOI Open \u7684\u9898\u76ee\u3002UOJ \u6709\u90e8\u5206 JOISC 2017 \u7684\u9898\u76ee\u3002 JOI Final \u7684\u96be\u5ea6\u5728\u63d0\u9ad8 - \\sim \\sim \u63d0\u9ad8 + \u5de6\u53f3\u3002JOISC \u548c JOI Open \u7684\u9898\u76ee\u7684\u96be\u5ea6\u5728\u63d0\u9ad8 \\sim \\sim NOI - \u4e0d\u7b49\u3002 \u4f60\u53ef\u4ee5\u5728 JOI \u5b98\u7f51\u6216\u8005 AtCoder \u4e0a\u627e\u5230\u66f4\u591a\u7684 JOI \u9898 (\u65e5\u6587\u9898\u9762) \u53f0\u6e7e\u5730\u533a\uff1a\u8cc7\u8a0a\u5967\u6797\u5339\u4e9e\u7af6\u8cfd \u00b6 \u53f0\u6e7e\u5730\u533a\u628a OI \u4e2d\u7684 informatics \u7ffb\u8bd1\u6210 \u201c\u8d44\u8baf\u201d \u800c\u975e\u5927\u9646\u901a\u7528\u7684\u7ffb\u8bd1 \u201c\u4fe1\u606f\u201d\u3002 \u53f0\u6e7e\u5730\u533a\u7684\u9009\u624b\u5982\u679c\u60f3\u53bb\u53c2\u52a0 IOI\uff0c\u9700\u8981\u7ecf\u8fc7\u8fd9\u51e0\u573a\u6bd4\u8d5b\u7684\u6d17\u793c\uff1a \u5340\u57df\u8cc7\u8a0a\u5b78\u79d1\u80fd\u529b\u7af6\u8cfd \u5168\u570b\u8cc7\u8a0a\u5b78\u79d1\u80fd\u529b\u7af6\u8cfd \u8cc7\u8a0a\u7814\u7fd2\u71df\uff08TOI\uff09 \u4fc4\u7f57\u65af\uff1aROI \u00b6 \u4fc4\u7f57\u65af\u4fe1\u606f\u5b66\u5965\u8d5b\uff08\u043e\u043b\u0438\u043c\u043f\u0438\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\uff09\u4e00\u822c\u7b80\u79f0\u4e3a ROI\u3002 \u5b98\u7f51\uff1a http://neerc.ifmo.ru/school/archive/index.html \u5728\u7ebf\u63d0\u4ea4\u5730\u5740\uff1a https://contest.yandex.ru/roiarchive/ \u4e00\u822c\u7b80\u79f0\u4e3a ROI\u3002\u6d41\u7a0b\uff1a \u5e02\u7ea7\u6bd4\u8d5b\uff08Municipal stage / \u041c\u0443\u043d\u0438\u0446\u0438\u043f\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u043f\uff09 \u5730\u533a\u7ea7\u6bd4\u8d5b\uff08Regional Stage / \u0420\u0435\u0433\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u043f\uff09 \u51b3\u8d5b\uff08Final Stage / \u0417\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u043f\uff09 \u4f60\u53ef\u80fd\u5df2\u7ecf\u5728 Codeforces \u4e0a\u89c1\u8fc7\u4e86\u4e00\u4e9b ROI \u9898\u3002\u76ee\u524d LibreOJ \u6709\u8fd1\u4e24\u5e74\u7684 ROI \u51b3\u8d5b\u9898\uff08\u5305\u62ec\u7ffb\u8bd1\uff09\u3002 \u52a0\u62ff\u5927\uff1aCCC & CCO \u00b6 CCC: Canadian Computing Competition CCO: Canadian Computing Olympiad \u5b98\u7f51\u5730\u5740\uff1a https://cemc.math.uwaterloo.ca/contests/past_contests.html#ccc CCC \u63d0\u4ea4\u5730\u5740\uff1a https://dmoj.ca/problems/?category=4 CCO \u63d0\u4ea4\u5730\u5740\uff1a https://dmoj.ca/problems/?category=24 CCC \u5728 DMOJ \u6709\u5b98\u65b9 (?) \u9898\u89e3\u3002 CCC Junior / Senior \u8d34\u8fd1 NOIP \u666e\u53ca\u7ec4 / \u63d0\u9ad8\u7ec4\u96be\u5ea6\u3002CCO \u60f3\u8981\u62ff\u5230\u91d1\u724c\u53ef\u80fd\u5f97\u6709 NOI \u94f6\u7684\u6c34\u5e73\u3002 \u6cd5\u56fd\u4e0e\u6fb3\u5927\u5229\u4e9a\uff1aFARIO \u00b6 \u63d0\u4ea4\u5730\u5740\uff1a http://orac.amt.edu.au/cgi-bin/train/hub.pl FARIO \u7684\u9898\u76ee\u4e0e NOI \u7684\u96be\u5ea6\u65d7\u9f13\u76f8\u5f53\u3002 \u5176\u5b83\u5927\u6d32\u7ea7 OI \u7ade\u8d5b \u00b6 BalticOI \u00b6 BalticOI \u9762\u5411\u7684\u662f\u6ce2\u7f57\u7684\u6d77\u5468\u8fb9\u5404\u56fd\u3002BalticOI 2018 \u7684\u53c2\u8d5b\u56fd\u6709\u7acb\u9676\u5b9b\u3001\u6ce2\u5170\u3001\u7231\u6c99\u5c3c\u4e9a\u3001\u82ac\u5170\u7b49 9 \u56fd\u3002 \u9664\u4e86 2017 \u5e74\uff0cBalticOI \u6bcf\u5e74\u90fd\u516c\u5f00\u9898\u9762\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u9898\u89e3\u3002\u7136\u800c BalticOI \u6ca1\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u5b98\u7f51\uff0c\u6bcf\u5e74\u7684\u4e3b\u529e\u65b9\u90fd\u4f1a\u65b0\u5efa\u4e00\u4e2a\u7f51\u7ad9\u2026\u2026 \u5173\u4e8e\u5386\u5e74\u7684\u5b98\u7f51\u5730\u5740\uff0cPlanet6174 \u6574\u7406\u51fa\u4e86\u4e00\u4e2a \u5e16\u5b50 \u3002 \u76ee\u524d LibreOJ \u6709\u8fd1\u5341\u5e74\u7684 BalticOI \u9898\u3002 BalkanOI \u00b6 BalkanOI \u9762\u5411\u5df4\u5c14\u5e72\u5730\u533a\u5468\u8fb9\u5404\u56fd\u3002BalkanOI 2018 \u7684\u53c2\u8d5b\u56fd\u6709\u7f57\u9a6c\u5c3c\u4e9a\u3001\u5e0c\u814a\u3001\u4fdd\u52a0\u5229\u4e9a\u3001\u585e\u5c14\u7ef4\u4e9a\u7b49 12 \u56fd\u3002 BalkanOI \u53ea\u6709\u67d0\u51e0\u5e74\u516c\u5f00\u9898\u9762\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u9898\u89e3\uff0c\u5b98\u7f51\u5730\u5740\u53c2\u89c1\u4e0a\u9762\u90a3\u4e2a\u5e16\u5b50\u3002 CEOI \u00b6 CEOI 2018 \u7684\u53c2\u8d5b\u56fd\u4e0e\u4e0a\u9762\u4e24\u4e2a\u6bd4\u8d5b\u6709\u90e8\u5206\u91cd\u53e0\uff0c\u5305\u62ec\u6ce2\u5170\u3001\u7f57\u9a6c\u5c3c\u4e9a\u3001\u683c\u9c81\u5409\u4e9a\u3001\u514b\u7f57\u5730\u4e9a\u7b49\u56fd\u3002 CEOI \u6bcf\u5e74\u90fd\u516c\u5f00\u9898\u9762\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u9898\u89e3\uff0c\u5b98\u7f51\u5730\u5740\u53c2\u89c1\u4e0a\u9762\u90a3\u4e2a\u5e16\u5b50\u3002 \u5728\u56fd\u5185 OJ \u4e2d\uff0cBZOJ \u7684 CEOI \u9898\u76f8\u5bf9\u6700\u9f50\u3002 Nordic Olympiads in Informatics (NOI) \u00b6 \u5b98\u7f51\u5730\u5740\uff1a http://nordic.progolymp.se \u8fd1\u4e24\u5e74\u624d\u5f00\u59cb\u4e3e\u529e\u7684\u6bd4\u8d5b\uff0c\u9762\u5411\u5317\u6b27\u5404\u56fd\u3002","title":"OI \u8d5b\u4e8b\u4e0e\u8d5b\u5236"},{"location":"intro/mode/#_1","text":"OI \u7ade\u8d5b\u662f\u4e00\u9879\u5168\u7403\u7684\u8d5b\u4e8b\uff0c\u6bcf\u5e74\u590f\u5929\u4f1a\u6709\u4e16\u754c\u7ea7\u7ade\u8d5b\uff08IOI\uff09\u4e3e\u884c\uff0c\u53c2\u8d5b\u9009\u624b\u5927\u591a\u90fd\u7ecf\u8fc7\u5c42\u5c42\u9009\u62d4\u3002\u5bf9\u4e8e\u5927\u90e8\u5206\u9009\u624b\u800c\u8a00\uff0c\u6bcf\u5e74\u65b0\u8d5b\u5b63\u4ece 10 \u6708\u7684 NOIP \uff08\u7701\u7ea7\u9009\u62d4\u8d5b\uff09\u5f00\u59cb\u3002 OI \u7ade\u8d5b\u4e2d\u5141\u8bb8\u4f7f\u7528\u7684\u8bed\u8a00\u5305\u62ec Pascal\uff08NOI \u5c06\u4e8e 2020 \u5e74\u505c\u6b62\u4f7f\u7528 Pascal\uff0cNOIP \u5c06\u4e8e 2022 \u5e74\u505c\u6b62\u4f7f\u7528 Pascal\uff09\uff0cC \u548c C++\u3002\u5176\u4e2d C++ \u7684\u7248\u672c\u4e0d\u540c\u8003\u8bd5\u6709\u4e0d\u540c\u7684\u89c4\u5b9a\u3002\u8003\u8bd5\u9898\u76ee\u4e00\u822c\u4e3a\u7b97\u6cd5\u6216\u8005\u6570\u636e\u7ed3\u6784\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u9898\u76ee\u5f62\u5f0f\u5305\u62ec\u4f20\u7edf\u9898\uff08\u6700\u5e38\u89c1\u7684\u89c4\u5b9a\u8f93\u5165\u548c\u8f93\u51fa\u5230\u6587\u4ef6\u7684\u9898\u76ee\uff09\u548c\u975e\u4f20\u7edf\u9898\uff08\u63d0\u4ea4\u7b54\u6848\u9898\u3001\u4ea4\u4e92\u9898\u3001\u8865\u5168\u4ee3\u7801\u9898\u7b49\u7b49\uff09\u3002","title":"\u8d5b\u4e8b\u4ecb\u7ecd"},{"location":"intro/mode/#noip","text":"NOIP\uff08National Olympiad in Informatics in Provinces\uff09\u662f\u5168\u56fd\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u8054\u8d5b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u4ee5\u7701\u4e3a\u5355\u4f4d\u6392\u540d\u8bc4\u5956\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u9ad8\u6821\u6765\u8bf4\uff0c\u83b7\u5f97\u7701\u4e00\u7b49\u5956\u53ef\u4ee5\u7528\u4e8e\u83b7\u5f97\u81ea\u4e3b\u62db\u751f\u8d44\u683c\u3002 NOIP \u5206\u4e3a\u521d\u8d5b\u548c\u590d\u8d5b\u4e24\u4e2a\u9636\u6bb5\u3002\u521d\u8d5b\u4f1a\u8003\u5bdf\u4e00\u4e9b\u8ba1\u7b97\u673a\u57fa\u7840\u77e5\u8bc6\u548c\u7b97\u6cd5\u57fa\u7840\uff08\u7b14\u8bd5\uff09\uff0c\u590d\u8d5b\u662f\u4e0a\u673a\u8003\u8bd5\uff0c\u65f6\u95f4\u4e0a\u4e00\u822c\u662f 11 \u6708\u7684\u7b2c\u4e8c\u4e2a\u5468\u672b\u3002\u5168\u56fd\u4f7f\u7528\u540c\u4e00\u5957\u8bd5\u5377\uff0c\u4f46\u662f\u8bc4\u5956\u89c4\u5219\u662f\u6309\u7167\u7701\u5185\u60c5\u51b5\u7531 CCF \uff08\u4e2d\u56fd\u8ba1\u7b97\u673a\u5b66\u4f1a\uff09\u7edf\u4e00\u6307\u5b9a\uff0c\u5e76\u4e8e\u8d5b\u540e\u5728 NOI \u5b98\u65b9\u7f51\u7ad9 \u4e0a\u516c\u5e03\u3002","title":"NOIP"},{"location":"intro/mode/#_2","text":"\u7701\u961f\u9009\u62d4\u8d5b\u662f\u7528\u4e8e\u9009\u62d4\u5404\u7701\u53c2\u52a0\u5168\u56fd\u8d5b\u7684\u4ee3\u8868\u961f\uff0c\u5404\u4e2a\u7701\u961f\u7684\u540d\u989d\u6709\u590d\u6742\u7684\u8ba1\u7b97\u516c\u5f0f\uff0c\u4e00\u822c\u548c\u4e4b\u524d\u7684\u6210\u7ee9\u548c\u53c2\u8d5b\u4eba\u6570\u6709\u5173\u3002\u7701\u9009\u7531\u5404\u4e2a\u7701\u81ea\u884c\u51b3\u5b9a\uff0c\u76ee\u524d\u7684\u8d8b\u52bf\u662f\u5f88\u591a\u7701\u4efd\u9009\u62e9\u8054\u5408\u547d\u9898\u3002\u901a\u5e38\u6765\u8bb2\uff0cNOIP \u5206\u6570\u9700\u8981\u5728\u7701\u9009\u4e2d\u5360\u4e00\u5b9a\u6bd4\u4f8b\u3002","title":"\u7701\u9009"},{"location":"intro/mode/#noi","text":"NOI\uff08National Olympiad in Informatics\uff09\u662f\u5168\u56fd\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff0c\u4e00\u822c\u5728\u4e03\u6708\u4efd\u4e3e\u884c\uff0c\u6709\u73b0\u573a\u8d5b\u548c\u7f51\u7edc\u8d5b\u3002\u73b0\u573a\u8d5b\u9009\u624b\u5206\u4e3a\u56db\u7c7b\uff0c\u5176\u4e2d A\u3001B\u3001C \u7c7b\u4e3a\u6b63\u5f0f\u9009\u624b\u3002A\u3001B \u7c7b\u5bf9\u5e94\u7701\u961f\u7684 A\u3001B \u7c7b\u9009\u624b\uff08\u5176\u4e2d A \u7c7b\u5728\u8ba1\u7b97\u6210\u7ee9\u65f6\u4f1a\u6709 5 \u5206\u52a0\u5206\uff09\uff0cC \u7c7b\u540d\u4e49\u4e0a\u662f\u5b66\u6821\u5bf9 CCF \u505a\u51fa\u7a81\u51fa\u8d21\u732e\u540e\u7684\u5956\u52b1\u540d\u989d\uff0cD \u7c7b\u662f\u9080\u8bf7\u8d5b\u9009\u624b\uff0c\u5982\u679c\u6210\u7ee9\u8d85\u8fc7\u5206\u6570\u7ebf\u7684\u8bdd\uff0c\u53ea\u6709\u6210\u7ee9\u8bc1\u660e\u800c\u6ca1\u6709\u5956\u724c\uff08\u540c\u7b49\u5206\u6570\u542b\u91d1\u91cf\u8981\u4f4e\u4e00\u4e9b\uff09\u3002\u6b63\u5f0f\u9009\u624b\u524d 50 \u540d\u7ec4\u6210\u56fd\u5bb6\u96c6\u8bad\u961f\uff0c\u83b7\u5f97\u4fdd\u9001\u8d44\u683c\u3002\u7f51\u7edc\u8d5b\u62a5\u540d\u5f62\u5f0f\u4e0a\u6ca1\u6709\u95e8\u69db\u3002","title":"NOI"},{"location":"intro/mode/#wc","text":"WC\uff08Winter Camp\uff09\u662f\u5168\u56fd\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\u51ac\u4ee4\u8425\uff0c\u662f\u6bcf\u5e74\u51ac\u5929\u5728\u5f53\u5e74 NOI \u4e3e\u529e\u5730\u8fdb\u884c\u7684\u4e00\u9879\u6d3b\u52a8\uff0c\u5185\u5bb9\u5305\u62ec\u82e5\u5e72\u5929\u7684\u57f9\u8bad\u548c\u4e00\u5929\u7684\u8003\u8bd5\u3002\u8fd9\u9879\u8003\u8bd5\u4e3b\u8981\u7528\u4e8e\u4ece\u56fd\u5bb6\u96c6\u8bad\u961f\uff08 50 \u4eba\uff09\u9009\u62d4\u56fd\u5bb6\u5019\u9009\u961f\uff08 15 \u4eba\uff09\u3002","title":"WC"},{"location":"intro/mode/#apio","text":"APIO\uff08Asia-Pacific Informatics Olympiad\uff09\u662f\u4e9a\u592a\u5730\u533a\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff0cCCF \u6bcf\u5e74\u4f1a\u5728\u4e94\u6708\u521d\u4e3e\u529e\u4e2d\u56fd\u8d5b\u533a\u955c\u50cf\u8d5b\u3002\u5728\u6bd4\u8d5b\u65e5\u524d\u540e\u4f1a\u6709\u57f9\u8bad\u6d3b\u52a8\u3002","title":"APIO"},{"location":"intro/mode/#ctsc","text":"CTSC\uff08China Team Selection Competition\uff09\u662f\u4e2d\u56fd\u961f\u9009\u62d4\u8d5b\u3002\u7528\u6765\u4ece\u56fd\u5bb6\u5019\u9009\u961f\uff08 15 \u4eba\uff09\u4e2d\u9009\u62d4\u56fd\u5bb6\u961f\uff08 6 \u4eba\uff09\u51c6\u5907\u53c2\u52a0\u5f53\u5e74\u590f\u5929\u7684 IOI \u6bd4\u8d5b\uff0c\u5176\u4e2d\u6b63\u5f0f\u9009\u624b 4 \u4eba\uff0c\u66ff\u8865\u9009\u624b 2 \u4eba\u3002 \u6ce8\uff1a APIO \u548c CTSC \u90fd\u662f\u4ee5\u7701\u4e3a\u5355\u4f4d\u62a5\u540d\uff0c\u4e00\u822c\u662f\u6309\u7167 NOIP \u6210\u7ee9\u6392\u5e8f\u6765\u786e\u5b9a\u8c01\u4f1a\u6709\u673a\u4f1a\u53c2\u52a0 APIO \u548c CTSC \uff08\u4e8c\u8005\u4e00\u822c\u65f6\u95f4\u4e0a\u975e\u5e38\u63a5\u8fd1\uff09\u3002","title":"CTSC"},{"location":"intro/mode/#ioi","text":"IOI\uff08International Olympiad in Informatics\uff09\u662f\u56fd\u9645\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u6709\u56db\u4eba\u53c2\u8d5b\uff0c\u6bd4\u8d5b\u4e00\u822c\u4f1a\u6709\u76f4\u64ad\u3002IOI \u8d5b\u5236\u4e2d\u6bcf\u4e2a\u9898\u76ee\u4f1a\u6709 subtask \uff08\u5b50\u4efb\u52a1\uff09\uff0c\u6bcf\u4e2a\u5b50\u4efb\u52a1\u5bf9\u5e94\u4e00\u5b9a\u7684\u5206\u6570\u3002","title":"IOI"},{"location":"intro/mode/#_3","text":"","title":"\u8d5b\u5236\u4ecb\u7ecd"},{"location":"intro/mode/#oi","text":"\u4e00\u822c\u7684 OI \u8d5b\u5236\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u4eba\u5728 5 \u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\u5185\u5c1d\u8bd5\u89e3\u51b3 3 \u4e2a\u9898\u3002\u6bcf\u4e2a\u9898\u76ee\u53ef\u4ee5\u4e0d\u5168\u90e8\u89e3\u51b3\uff0c\u4f1a\u6709\u591a\u4e2a\u6570\u636e\u70b9\uff0c\u9898\u76ee\u7684\u5206\u6570\u4e00\u822c\u662f\u6570\u636e\u70b9\u5f97\u5206\u4e4b\u548c\u3002\u6bcf\u4e2a\u6570\u636e\u70b9\u8fd8\u53ef\u80fd\u4f1a\u6709\u90e8\u5206\u5206\uff0c\u5c31\u662f\u6570\u636e\u70b9\u5185\u90e8\u4e5f\u4e0d\u9700\u8981\u5b8c\u5168\u6b63\u786e\u624d\u80fd\u5f97\u5230\u5206\u6570\u3002\u8bc4\u5206\u65b9\u5f0f\u662f\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u7edf\u4e00\u8bc4\u6d4b\uff0c\u53ea\u6709\u4e00\u6b21\u63d0\u4ea4\u673a\u4f1a\u3002 NOIP\u3001NOI\u3001\u7701\u9009\u90fd\u662f OI \u8d5b\u5236\u3002","title":"OI \u8d5b\u5236"},{"location":"intro/mode/#ioi_1","text":"\u76ee\u524d\u56fd\u5185\u6bd4\u8d5b\u4e5f\u5728\u9010\u6e10\u5411 IOI \u8d5b\u5236\u9760\u62e2\u3002 IOI \u8d5b\u5236\u53ef\u4ee5\u8d5b\u65f6\u4efb\u610f\u63d0\u4ea4\uff0c\u53ef\u4ee5\u5373\u65f6\u67e5\u770b\u8bc4\u6d4b\u7ed3\u679c\uff0c APIO\u3001IOI \u90fd\u662f IOI \u8d5b\u5236\u3002","title":"IOI \u8d5b\u5236"},{"location":"intro/mode/#acm-icpc","text":"\u5728 ACM / ICPC \u6bd4\u8d5b\u4e2d\u4e00\u822c\u662f\u4e09\u4e2a\u4eba\u4f7f\u7528\u4e00\u53f0\u673a\u5668\uff0c\u6bcf\u4e2a\u9898\u76ee\u53ea\u6709\u5728\u6240\u6709\u6570\u636e\u70b9\u5168\u90e8\u6b63\u786e\u540e\u624d\u80fd\u5f97\u5230\u5206\u6570\u3002\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u6709\u591a\u6b21\u63d0\u4ea4\u673a\u4f1a\uff0c\u5b9e\u65f6\u8bc4\u6d4b\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u6bd4\u8d5b\u6392\u540d\u6839\u636e\u505a\u9898\u6570\u548c\u7f5a\u65f6\u6765\u8bc4\u5224\uff0c\u7f5a\u65f6\u662f\u901a\u8fc7\u9898\u76ee\u7684\u7528\u65f6\u4e4b\u548c\u52a0\u4e0a\u9519\u8bef\u63d0\u4ea4\u6b21\u6570\u4e58\u4ee5\u4e00\u4e2a\u7cfb\u6570\u3002\u5728 ACM \u76f8\u5173\u8d5b\u4e8b\u4e2d\uff0c\u9009\u624b\u5141\u8bb8\u5e26\u7eb8\u8d28\u8d44\u6599\u3002","title":"ACM / ICPC \u8d5b\u5236"},{"location":"intro/mode/#codeforces-cf","text":"Codeforces \u662f\u4e00\u4e2a\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\uff0c\u5b9a\u671f\u4f1a\u4e3e\u529e\u6bd4\u8d5b\u3002\u5b83\u7684\u6bd4\u8d5b\u7279\u70b9\u662f\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u53ea\u6d4b\u8bd5\u4e00\u90e8\u5206\u6570\u636e\uff08pretests\uff09\uff0c\u800c\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fd4\u56de\u5b8c\u6574\u7684\u6240\u6709\u6d4b\u8bd5\u70b9\u7684\u6d4b\u8bd5\u7ed3\u679c\uff08system tests\uff09\u3002\u6bd4\u8d5b\u65f6\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\uff0c\u5141\u8bb8 hack \u522b\u4eba\u7684\u4ee3\u7801\uff08\u6b64\u5904 hack \u7684\u610f\u601d\u662f\u63d0\u4ea4\u4e00\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4f7f\u5f97\u522b\u4eba\u7684\u4ee3\u7801\u65e0\u6cd5\u7ed9\u51fa\u6b63\u786e\u7b54\u6848\uff09\u3002\u5f53\u7136\uff0c\u5982\u679c\u60f3\u8981 hack \uff0c\u5fc5\u987b\u8981\u9501\u5b9a\u81ea\u5df1\u7684\u4ee3\u7801\uff08\u6362\u8a00\u4e4b\uff0c\u6bd4\u8d5b\u65f6\u65e0\u6cd5\u91cd\u65b0\u63d0\u4ea4\u8be5\u9898\uff09\u3002","title":"Codeforces (CF) \u8d5b\u5236"},{"location":"intro/mode/#oi_1","text":"","title":"\u5176\u4ed6\u56fd\u5bb6\u548c\u5730\u533a\u7684 OI \u7ade\u8d5b"},{"location":"intro/mode/#usaco","text":"\u5b98\u7f51\u5730\u5740\uff1a https://www.usaco.org/ USACO \u6216\u8bb8\u662f\u56fd\u5185\u9009\u624b\u6700\u719f\u6089\u7684\u5916\u56fd OI \u7ade\u8d5b\uff08\u56e0\u6b64\u53ef\u80fd\u4e5f\u662f\u4e2d\u6587\u9898\u89e3\u6700\u591a\u7684\u5916\u56fd OI \u7ade\u8d5b\uff09\u3002 \u6bcf\u5e74\u51ac\u5b63\u5230\u521d\u6625\uff0cUSACO \u4f1a\u6bcf\u6708\u4e3e\u529e\u4e00\u573a\u7f51\u7edc\u8d5b\u3002\u4e00\u573a\u6bd4\u8d5b\u6301\u7eed 3\\sim5 3\\sim5 \u4e2a\u5c0f\u65f6\u3002 \u6839\u636e\u5b98\u7f51\u7684\u4ecb\u7ecd\uff0cUSACO \u7684\u6bd4\u8d5b\u5206\u6210\u8fd9 4 \u6863\u96be\u5ea6\uff082015~2016 \u5b66\u5e74\u4e4b\u524d\u4e3a 3 \u6863\uff09\uff1a \u94dc\u724c\u7ec4\uff0c\u9002\u5408\u7f16\u7a0b\u521d\u5b66\u8005\uff0c\u5c24\u5176\u662f\u53ea\u5b66\u4e86\u6700\u6700\u57fa\u7840\u7684\u7b97\u6cd5\uff08\u5982\uff1a\u6392\u5e8f\uff0c\u4e8c\u5206\u67e5\u627e\uff09\u7684\u5b66\u751f\u3002 \u94f6\u724c\u7ec4\uff0c\u9002\u5408\u5f00\u59cb\u5b66\u4e60\u57fa\u672c\u7684\u7b97\u6cd5\u6280\u5de7\uff08\u5982\uff1a\u9012\u5f52\uff0c\u641c\u7d22\uff0c\u8d2a\u5fc3\u7b97\u6cd5\uff09\u548c\u57fa\u7840\u6570\u636e\u7ed3\u6784\u7684\u5b66\u751f\u3002 \u91d1\u724c\u7ec4\uff0c\u5b66\u751f\u4f1a\u9047\u5230\u66f4\u590d\u6742\u7684\u7b97\u6cd5\uff08\u5982\uff1a\u6700\u77ed\u8def\u5f84\uff0cDP\uff09\u548c\u66f4\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u3002 \u94c2\u91d1\u7ec4\uff0c\u9002\u5408\u6709\u7740\u624e\u5b9e\u7684\u7b97\u6cd5\u8bbe\u8ba1\u80fd\u529b\u7684\u9009\u624b\uff0c\u94c2\u91d1\u7ec4\u53ef\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u4ee5\u590d\u6742\u4e14\u66f4\u5f00\u653e\u7684\u95ee\u9898\u6765 \u653e\u98de \u6311\u6218\u81ea\u6211\u3002 \u5728\u56fd\u5185\uff0c\u76ee\u524d USACO \u9898\u76ee\u6700\u9f50\u5168\u7684\u662f\u6d1b\u8c37\u3002","title":"\u7f8e\u56fd\uff1aUSACO"},{"location":"intro/mode/#poi","text":"\u5b98\u7f51\uff1a https://oi.edu.pl/ \u5b98\u65b9\u63d0\u4ea4\u5730\u5740\uff1a https://szkopul.edu.pl/p/default/problemset/ POI \u662f\u4e0d\u5c11\u7701\u9009\u9009\u624b\u6700\u5e38\u5237\u7684\u5916\u56fd OI \u6bd4\u8d5b\u3002 \u6839\u636e\uff08\u5df2\u7ecf\u51c9\u51c9\u7684\uff09 http://main.edu.pl/en/ \u7684\u63cf\u8ff0\uff0cPOI \u7684\u6d41\u7a0b\u5982\u4e0b\uff1a \u7b2c\u4e00\u8f6e\uff1a\u4e94\u9898\uff0c\u7f51\u7edc\u8d5b\uff0c\u516c\u5f00\u8d5b\u3002 \u7b2c\u4e8c\u8f6e\uff1a\u5305\u542b\u4e00\u573a\u7ec3\u4e60\u8d5b\uff0c\u548c\u4e24\u573a\u6b63\u5f0f\u6bd4\u8d5b\u3002 \u7b2c\u4e09\u8f6e\uff1a\u8d5b\u5236\u540c\u4e0a\u3002 ONTAK\uff1aPOI \u8bad\u7ec3\u8425\uff08\u7c7b\u4f3c\u56fd\u5185\u7684\u96c6\u8bad\u961f\uff09 \u4f60\u53ef\u80fd\u8fd8\u542c\u8bf4\u8fc7 PA\u3002PA \u7684\u5927\u610f\u662f \u201c\u7b97\u6cd5\u5927\u6218\u201d\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u5b83\u53eb\u8fd9\u540d\u5b57\uff09\u3002 \u76ee\u524d\u5728\u56fd\u5185 OJ \u4e2d\uff0cPOI \u9898\u76ee\u6700\u5168\u7684\u662f BZOJ\u3002","title":"\u6ce2\u5170\uff1aPOI"},{"location":"intro/mode/#coci","text":"\u5b98\u7f51\u5730\u5740\uff1a http://www.hsin.hr/coci/ \uff08\u6709\u65f6\u5019\u82f1\u6587\u7248\u7684\u66f4\u65b0\u4f1a\u5ef6\u8fdf\uff0c\u514b\u7f57\u5730\u4e9a\u8bed\u7248\u672c\uff1a http://www.hsin.hr/honi/ \uff09 \u96be\u5ea6\u8de8\u5ea6\u5f88\u5927\u7684\u6bd4\u8d5b\uff0c\u5927\u7ea6\u662f\u4ece\u666e\u53ca - \\sim \\sim \u7701\u9009 -\u3002\u4ee5\u5f80 COCI \u6240\u6709\u7684\u9898\u76ee\u5747\u63d0\u4f9b\u9898\u76ee\u3001\u6570\u636e\u3001\u9898\u89e3\u548c\u6807\u7a0b\uff0c\u7136\u800c\u4ece 2017 \u5e74\u5e95\u4e4b\u540e\uff0cCOCI \u7684\u9898\u89e3\u548c\u6807\u7a0b\u5c31\u65ad\u66f4\u4e86\uff08\u4e0d\u662f\u6ca1\u6709\u82f1\u8bed\u7248\u7ffb\u8bd1\uff0c\u800c\u662f\u8fde\u514b\u7f57\u5730\u4e9a\u8bed\u7684\u7248\u672c\u90fd\u6ca1\u6709\uff09\u3002 \u6d1b\u8c37\u3001BZOJ \u548c LibreOJ \u90fd\u6709\u5c11\u91cf\u7684 COCI \u9898\u76ee\u3002","title":"\u514b\u7f57\u5730\u4e9a\uff1aCOCI"},{"location":"intro/mode/#joi","text":"\u5b98\u7f51\u5730\u5740\uff1a https://www.ioi-jp.org/ \u65e5\u672c\u4fe1\u606f\u5b66\u5965\u8d5b\uff08\u65e5\u672c\u60c5\u5831\u30aa\u30ea\u30f3\u30d4\u30c3\u30af\uff09\u4e00\u822c\u7b80\u79f0\u4e3a JOI\u3002JOI \u6240\u6709\u7684\u9898\u76ee\u90fd\u63d0\u4f9b\u9898\u76ee\u3001\u6570\u636e\u3001\u9898\u89e3\u548c\u6807\u7a0b\u3002\u8fd1\u4e24\u5e74\u7684 JOI \u51b3\u8d5b\u548c\u6625\u8bad\u8425\u63d0\u4f9b\u4e86\u82f1\u8bed\u9898\u9762\uff0c\u4f46\u5e76\u6ca1\u6709\u82f1\u8bed\u9898\u89e3\u3002\u5386\u5e74\u7684 JOI Open \u90fd\u63d0\u4f9b\u4e86\u82f1\u8bed\u7248\u9898\u9762\u548c\u9898\u89e3\u3002\u7edd\u5927\u90e8\u5206 JOI \u9898\u53ef\u4ee5\u5de6\u8f6c AtCoder \u63d0\u4ea4\u3002 JOI \u7684\u6d41\u7a0b\uff1a \u9884\u8d5b\uff08\u4e88\u9078\uff09 \u51b3\u8d5b\uff08\u672c\u9078 / JOI Final\uff09 \u6625\u8bad\u8425\uff08\u6625\u5b63\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u5408\u5bbf / JOI Spring Camp / JOISC\uff09 \u516c\u5f00\u8d5b\uff08\u901a\u4fe1\u6559\u80b2 / JOI Open Contest\uff09 \u76ee\u524d LibreOJ \u548c BZOJ \u6709\u8fd1\u4e9b\u5e74\u7684 JOI Final\u3001JOISC \u548c JOI Open \u7684\u9898\u76ee\u3002UOJ \u6709\u90e8\u5206 JOISC 2017 \u7684\u9898\u76ee\u3002 JOI Final \u7684\u96be\u5ea6\u5728\u63d0\u9ad8 - \\sim \\sim \u63d0\u9ad8 + \u5de6\u53f3\u3002JOISC \u548c JOI Open \u7684\u9898\u76ee\u7684\u96be\u5ea6\u5728\u63d0\u9ad8 \\sim \\sim NOI - \u4e0d\u7b49\u3002 \u4f60\u53ef\u4ee5\u5728 JOI \u5b98\u7f51\u6216\u8005 AtCoder \u4e0a\u627e\u5230\u66f4\u591a\u7684 JOI \u9898 (\u65e5\u6587\u9898\u9762)","title":"\u65e5\u672c\uff1aJOI"},{"location":"intro/mode/#_4","text":"\u53f0\u6e7e\u5730\u533a\u628a OI \u4e2d\u7684 informatics \u7ffb\u8bd1\u6210 \u201c\u8d44\u8baf\u201d \u800c\u975e\u5927\u9646\u901a\u7528\u7684\u7ffb\u8bd1 \u201c\u4fe1\u606f\u201d\u3002 \u53f0\u6e7e\u5730\u533a\u7684\u9009\u624b\u5982\u679c\u60f3\u53bb\u53c2\u52a0 IOI\uff0c\u9700\u8981\u7ecf\u8fc7\u8fd9\u51e0\u573a\u6bd4\u8d5b\u7684\u6d17\u793c\uff1a \u5340\u57df\u8cc7\u8a0a\u5b78\u79d1\u80fd\u529b\u7af6\u8cfd \u5168\u570b\u8cc7\u8a0a\u5b78\u79d1\u80fd\u529b\u7af6\u8cfd \u8cc7\u8a0a\u7814\u7fd2\u71df\uff08TOI\uff09","title":"\u53f0\u6e7e\u5730\u533a\uff1a\u8cc7\u8a0a\u5967\u6797\u5339\u4e9e\u7af6\u8cfd"},{"location":"intro/mode/#roi","text":"\u4fc4\u7f57\u65af\u4fe1\u606f\u5b66\u5965\u8d5b\uff08\u043e\u043b\u0438\u043c\u043f\u0438\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\uff09\u4e00\u822c\u7b80\u79f0\u4e3a ROI\u3002 \u5b98\u7f51\uff1a http://neerc.ifmo.ru/school/archive/index.html \u5728\u7ebf\u63d0\u4ea4\u5730\u5740\uff1a https://contest.yandex.ru/roiarchive/ \u4e00\u822c\u7b80\u79f0\u4e3a ROI\u3002\u6d41\u7a0b\uff1a \u5e02\u7ea7\u6bd4\u8d5b\uff08Municipal stage / \u041c\u0443\u043d\u0438\u0446\u0438\u043f\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u043f\uff09 \u5730\u533a\u7ea7\u6bd4\u8d5b\uff08Regional Stage / \u0420\u0435\u0433\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u043f\uff09 \u51b3\u8d5b\uff08Final Stage / \u0417\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u043f\uff09 \u4f60\u53ef\u80fd\u5df2\u7ecf\u5728 Codeforces \u4e0a\u89c1\u8fc7\u4e86\u4e00\u4e9b ROI \u9898\u3002\u76ee\u524d LibreOJ \u6709\u8fd1\u4e24\u5e74\u7684 ROI \u51b3\u8d5b\u9898\uff08\u5305\u62ec\u7ffb\u8bd1\uff09\u3002","title":"\u4fc4\u7f57\u65af\uff1aROI"},{"location":"intro/mode/#ccc-cco","text":"CCC: Canadian Computing Competition CCO: Canadian Computing Olympiad \u5b98\u7f51\u5730\u5740\uff1a https://cemc.math.uwaterloo.ca/contests/past_contests.html#ccc CCC \u63d0\u4ea4\u5730\u5740\uff1a https://dmoj.ca/problems/?category=4 CCO \u63d0\u4ea4\u5730\u5740\uff1a https://dmoj.ca/problems/?category=24 CCC \u5728 DMOJ \u6709\u5b98\u65b9 (?) \u9898\u89e3\u3002 CCC Junior / Senior \u8d34\u8fd1 NOIP \u666e\u53ca\u7ec4 / \u63d0\u9ad8\u7ec4\u96be\u5ea6\u3002CCO \u60f3\u8981\u62ff\u5230\u91d1\u724c\u53ef\u80fd\u5f97\u6709 NOI \u94f6\u7684\u6c34\u5e73\u3002","title":"\u52a0\u62ff\u5927\uff1aCCC &amp; CCO"},{"location":"intro/mode/#fario","text":"\u63d0\u4ea4\u5730\u5740\uff1a http://orac.amt.edu.au/cgi-bin/train/hub.pl FARIO \u7684\u9898\u76ee\u4e0e NOI \u7684\u96be\u5ea6\u65d7\u9f13\u76f8\u5f53\u3002","title":"\u6cd5\u56fd\u4e0e\u6fb3\u5927\u5229\u4e9a\uff1aFARIO"},{"location":"intro/mode/#oi_2","text":"","title":"\u5176\u5b83\u5927\u6d32\u7ea7 OI \u7ade\u8d5b"},{"location":"intro/mode/#balticoi","text":"BalticOI \u9762\u5411\u7684\u662f\u6ce2\u7f57\u7684\u6d77\u5468\u8fb9\u5404\u56fd\u3002BalticOI 2018 \u7684\u53c2\u8d5b\u56fd\u6709\u7acb\u9676\u5b9b\u3001\u6ce2\u5170\u3001\u7231\u6c99\u5c3c\u4e9a\u3001\u82ac\u5170\u7b49 9 \u56fd\u3002 \u9664\u4e86 2017 \u5e74\uff0cBalticOI \u6bcf\u5e74\u90fd\u516c\u5f00\u9898\u9762\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u9898\u89e3\u3002\u7136\u800c BalticOI \u6ca1\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u5b98\u7f51\uff0c\u6bcf\u5e74\u7684\u4e3b\u529e\u65b9\u90fd\u4f1a\u65b0\u5efa\u4e00\u4e2a\u7f51\u7ad9\u2026\u2026 \u5173\u4e8e\u5386\u5e74\u7684\u5b98\u7f51\u5730\u5740\uff0cPlanet6174 \u6574\u7406\u51fa\u4e86\u4e00\u4e2a \u5e16\u5b50 \u3002 \u76ee\u524d LibreOJ \u6709\u8fd1\u5341\u5e74\u7684 BalticOI \u9898\u3002","title":"BalticOI"},{"location":"intro/mode/#balkanoi","text":"BalkanOI \u9762\u5411\u5df4\u5c14\u5e72\u5730\u533a\u5468\u8fb9\u5404\u56fd\u3002BalkanOI 2018 \u7684\u53c2\u8d5b\u56fd\u6709\u7f57\u9a6c\u5c3c\u4e9a\u3001\u5e0c\u814a\u3001\u4fdd\u52a0\u5229\u4e9a\u3001\u585e\u5c14\u7ef4\u4e9a\u7b49 12 \u56fd\u3002 BalkanOI \u53ea\u6709\u67d0\u51e0\u5e74\u516c\u5f00\u9898\u9762\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u9898\u89e3\uff0c\u5b98\u7f51\u5730\u5740\u53c2\u89c1\u4e0a\u9762\u90a3\u4e2a\u5e16\u5b50\u3002","title":"BalkanOI"},{"location":"intro/mode/#ceoi","text":"CEOI 2018 \u7684\u53c2\u8d5b\u56fd\u4e0e\u4e0a\u9762\u4e24\u4e2a\u6bd4\u8d5b\u6709\u90e8\u5206\u91cd\u53e0\uff0c\u5305\u62ec\u6ce2\u5170\u3001\u7f57\u9a6c\u5c3c\u4e9a\u3001\u683c\u9c81\u5409\u4e9a\u3001\u514b\u7f57\u5730\u4e9a\u7b49\u56fd\u3002 CEOI \u6bcf\u5e74\u90fd\u516c\u5f00\u9898\u9762\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u9898\u89e3\uff0c\u5b98\u7f51\u5730\u5740\u53c2\u89c1\u4e0a\u9762\u90a3\u4e2a\u5e16\u5b50\u3002 \u5728\u56fd\u5185 OJ \u4e2d\uff0cBZOJ \u7684 CEOI \u9898\u76f8\u5bf9\u6700\u9f50\u3002","title":"CEOI"},{"location":"intro/mode/#nordic-olympiads-in-informatics-noi","text":"\u5b98\u7f51\u5730\u5740\uff1a http://nordic.progolymp.se \u8fd1\u4e24\u5e74\u624d\u5f00\u59cb\u4e3e\u529e\u7684\u6bd4\u8d5b\uff0c\u9762\u5411\u5317\u6b27\u5404\u56fd\u3002","title":"Nordic Olympiads in Informatics (NOI)"},{"location":"intro/resources/","text":"\u5728\u7ebf\u6d4b\u8bd5 (\u8bad\u7ec3) \u5e73\u53f0 \u00b6 \u5728\u7ebf\u6d4b\u8bd5\u5e73\u53f0\u53c8\u79f0 Online Judging System\uff0c\u4e00\u822c\u7528\u6765\u5237\u9898\u3001\u7ec4\u7ec7\u6bd4\u8d5b\uff0c\u4e5f\u6709\u7684\u4f1a\u63d0\u4f9b\u535a\u5ba2\u529f\u80fd\u65b9\u4fbf\u9009\u624b\u4ea4\u6d41\u3002 \u56fd\u5185 \u00b6 51Nod (\u6709\u5f88\u591a\u597d\u7684\u6570\u5b66\u9898\u548c\u601d\u7ef4\u9898) BZOJ (\u4f18\u8d28\u7684\u9898\u5de8\u591a) CodeVS FZUOJ (\u798f\u5dde\u5927\u5b66) HDU OJ (\u676d\u7535\u7684 OJ\uff0c\u591a\u6821\u8bad\u7ec3\u7684\u9898\u76ee\u653e\u5728\u8fd9\u91cc) hihoCoder \u8ba1\u849c\u5ba2 Judge Duck Online (\u677e\u677e\u677e\u7684 OJ\uff0c\u7cbe\u786e\u5230 \\mu s \\mu s ) JoyOI (\u539f Tyvj) LibreOJ \u6d1b\u8c37 (\u5e38\u7528 OJ\uff0c\u73b0\u4ee3 OJ \u652f\u6301\u53d1\u5e03\u6bd4\u8d5b\u7b49\u5f88\u591a\u529f\u80fd\uff0c\u8bc4\u6d4b\u673a\u5feb) \u725b\u5ba2\u7f51 OpenJudge POJ (PKU OJ\uff0c\u56fd\u5185\u5386\u53f2\u6700\u60a0\u4e45\u7684 OJ \u4e4b\u4e00\uff0c\u5f88\u591a\u82f1\u6587\u9898\uff0c\u6709\u4e00\u4e9b\u57fa\u7840\u9898\u548c\u597d\u9898) Universal OJ (VFK \u7684 OJ\uff0c\u591a\u539f\u521b\u6bd4\u8d5b\u9898\u548c CCF/THU \u9898 \u96be\u5ea6\u8f83\u9ad8) Vijos Virtual Judge (\u53ef\u4ee5\u65b9\u4fbf\u7684\u5728 Vjudge \u4e0a\u63d0\u4ea4\u522b\u7684 OJ \u7684\u9898\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u56fd\u5185\u4e0d\u592a\u65b9\u4fbf\u7684 OJ) ZOJ (\u6d59\u5927) \u56fd\u5916 \u00b6 AtCoder (\u65e5\u672c\u7684\u4e00\u4e2a OJ\uff0c\u7c7b\u4f3c Codeforces \u4f46\u662f\u4e5f\u4f1a\u653e JOI \u7684\u9898) CodeChef (\u5370\u5ea6 OJ\uff0c\u5468\u671f\u6027\u6709\u6bd4\u8d5b) Codeforces (\u4fc4\u7f57\u65af OJ\uff0c\u6709\u5f88\u591a\u6bd4\u8d5b) CS Academy DMOJ (\u52a0\u62ff\u5927\u5f00\u6e90\u7684 OJ\uff0c\u8bed\u8a00\u652f\u6301\u5e7f\uff1b\u9898\u5e93\u662f\u5404\u5927\u6bd4\u8d5b\u7684\u5b58\u6863\uff0c\u4e5f\u6709\u5b9a\u671f\u81ea\u884c\u4e3e\u529e\u7684\u6bd4\u8d5b) HackerRank (\u6709\u5f88\u591a\u6bd4\u8d5b) Kattis LeetCode (\u6709\u4e2d\u6587\u5206\u7ad9\uff1a LeetCode China ) SPOJ Topcoder (\u6709\u5f88\u591a\u6bd4\u8d5b) Ural UVa (\u505a lrj \u7684\u4e66\u600e\u4e48\u53ef\u80fd\u4e0d\u77e5\u9053\u8fd9\u4e2a OJ) Yandex (\u5b58\u6863\u4e86\u8fd1\u51e0\u5e74\u7684\u5168\u4fc4\u7f57\u65af\u4fe1\u606f\u5b66\u5965\u8d5b) Light OJ \uff08\u4e00\u4e2a\u5feb\u6302\u4e86\u7684 OJ\uff0c www \u57df\u540d\u65e0\u6cd5\u8bbf\u95ee\uff0c\u8bf7\u4f7f\u7528 \u6839\u57df\u540d \u8bbf\u95ee\uff09 \u6559\u7a0b \u00b6 OI Wiki Codeforces \u4e0a\u7f51\u53cb\u6574\u7406\u7684\u4e00\u4efd\u6559\u7a0b\u5408\u96c6 \u82f1\u6587\u7248 E-Maxx \u7b97\u6cd5\u6559\u7a0b \u6f14\u7b97\u6cd5\u7b14\u8bb0 \u53f0\u6e7e\u5e08\u8303\u5927\u5b66\u603b\u7ed3\u7684\u6559\u7a0b algo.is CS 97SI: Introduction to Programming Contests \u65af\u5766\u798f\u7684\u4e00\u95e8\u8bfe \u5982\u4f55\u4e3a ACM-ICPC \u505a\u51c6\u5907\uff1f - geeksforgeeks Topcoder \u6574\u7406\u7684\u6559\u7a0b \u4e66\u7c4d \u00b6 \u4fe1\u606f\u5b66\u5965\u8d5b\u4e00\u672c\u901a (\u521d\u5b66\u8005\u5411) \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178 (\u4eba\u79f0\u7d2b\u4e66) \u7b2c\u4e00\u7248 \u914d\u5957\u8d44\u6e90\u4ed3\u5e93 (mirror) \u7b2c\u4e8c\u7248 \u914d\u5957\u8d44\u6e90\u4ed3\u5e93 \u7b2c\u4e8c\u7248 \u4e60\u9898\u9009\u89e3 \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u2014\u2014\u8bad\u7ec3\u6307\u5357 (\u4eba\u79f0\u5927\u767d) \u7b97\u6cd5\u827a\u672f\u4e0e\u4fe1\u606f\u5b66\u7ade\u8d5b (\u4eba\u79f0\u9ed1\u4e66) \u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357 \u914d\u5957\u8d44\u6e90\u4ed3\u5e93 \u5177\u4f53\u6570\u5b66 Competitive Programmer's Handbook \u7b97\u6cd5\u5bfc\u8bba \u7b54\u6848\u89e3\u6790 (English) \u554a\u54c8\u7b97\u6cd5 \u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u5168\u5957 (\u901a\u4fd7\u6613\u61c2) \u7b97\u6cd5\u6982\u8bba (\u63d0\u7eb2\u631a\u9886\uff0c\u4f46\u5185\u5bb9\u8f83\u5c11) Legend-K \u7684\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u7684\u7b14\u8bb0 \u5de5\u5177 \u00b6 \u7ecf\u5178\u7b97\u6cd5\u7684\u53ef\u89c6\u5316\u7ed3\u679c - VisuAlgo \u7b97\u6cd5\u53ef\u89c6\u5316 - USF OEIS \u6574\u6570\u6570\u5217\u641c\u7d22\u5f15\u64ce Ubuntu Pastebin\uff0c\u53ef\u4ee5\u7528\u6765\u5206\u4eab\u4ee3\u7801 uDebug \u63d0\u4f9b\u4e00\u4e9b OJ \u9898\u76ee\u7684\u8c03\u8bd5\u8f85\u52a9 \u63d0\u4f9b C++ \u5185\u8bed\u6cd5\u7684\u67e5\u8be2\u7b49 - cppreference.com \u56fe\u8bba\u753b\u677f (\u540c\u65f6\u63a8\u8350 GraphViz) LaTeX \u6570\u5b66\u516c\u5f0f\u53c2\u8003 Godbolt - \u5728\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u7f16\u8bd1\u540e\u4ee3\u7801\u5757\u5bf9\u5e94\u7684\u6c47\u7f16\u8bed\u53e5 \u300a100 \u4e2a gdb \u5c0f\u6280\u5de7\u300b \u622a\u56fe\u8f6c LaTeX - Mathpix \u9898\u96c6 \u00b6 POJ \u8bad\u7ec3\u8ba1\u5212 USACO \u6d1b\u8c37\u8bd5\u70bc\u573a -Morass- \u8d34\u5728 Codeforces \u4e0a\u7684\u4e00\u4efd\u9898\u5355 \u5317\u4eac\u5927\u5b66\u6691\u671f\u8bfe\u8bfe\u4ef6\u4f8b\u9898","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"intro/resources/#_1","text":"\u5728\u7ebf\u6d4b\u8bd5\u5e73\u53f0\u53c8\u79f0 Online Judging System\uff0c\u4e00\u822c\u7528\u6765\u5237\u9898\u3001\u7ec4\u7ec7\u6bd4\u8d5b\uff0c\u4e5f\u6709\u7684\u4f1a\u63d0\u4f9b\u535a\u5ba2\u529f\u80fd\u65b9\u4fbf\u9009\u624b\u4ea4\u6d41\u3002","title":"\u5728\u7ebf\u6d4b\u8bd5 (\u8bad\u7ec3) \u5e73\u53f0"},{"location":"intro/resources/#_2","text":"51Nod (\u6709\u5f88\u591a\u597d\u7684\u6570\u5b66\u9898\u548c\u601d\u7ef4\u9898) BZOJ (\u4f18\u8d28\u7684\u9898\u5de8\u591a) CodeVS FZUOJ (\u798f\u5dde\u5927\u5b66) HDU OJ (\u676d\u7535\u7684 OJ\uff0c\u591a\u6821\u8bad\u7ec3\u7684\u9898\u76ee\u653e\u5728\u8fd9\u91cc) hihoCoder \u8ba1\u849c\u5ba2 Judge Duck Online (\u677e\u677e\u677e\u7684 OJ\uff0c\u7cbe\u786e\u5230 \\mu s \\mu s ) JoyOI (\u539f Tyvj) LibreOJ \u6d1b\u8c37 (\u5e38\u7528 OJ\uff0c\u73b0\u4ee3 OJ \u652f\u6301\u53d1\u5e03\u6bd4\u8d5b\u7b49\u5f88\u591a\u529f\u80fd\uff0c\u8bc4\u6d4b\u673a\u5feb) \u725b\u5ba2\u7f51 OpenJudge POJ (PKU OJ\uff0c\u56fd\u5185\u5386\u53f2\u6700\u60a0\u4e45\u7684 OJ \u4e4b\u4e00\uff0c\u5f88\u591a\u82f1\u6587\u9898\uff0c\u6709\u4e00\u4e9b\u57fa\u7840\u9898\u548c\u597d\u9898) Universal OJ (VFK \u7684 OJ\uff0c\u591a\u539f\u521b\u6bd4\u8d5b\u9898\u548c CCF/THU \u9898 \u96be\u5ea6\u8f83\u9ad8) Vijos Virtual Judge (\u53ef\u4ee5\u65b9\u4fbf\u7684\u5728 Vjudge \u4e0a\u63d0\u4ea4\u522b\u7684 OJ \u7684\u9898\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u56fd\u5185\u4e0d\u592a\u65b9\u4fbf\u7684 OJ) ZOJ (\u6d59\u5927)","title":"\u56fd\u5185"},{"location":"intro/resources/#_3","text":"AtCoder (\u65e5\u672c\u7684\u4e00\u4e2a OJ\uff0c\u7c7b\u4f3c Codeforces \u4f46\u662f\u4e5f\u4f1a\u653e JOI \u7684\u9898) CodeChef (\u5370\u5ea6 OJ\uff0c\u5468\u671f\u6027\u6709\u6bd4\u8d5b) Codeforces (\u4fc4\u7f57\u65af OJ\uff0c\u6709\u5f88\u591a\u6bd4\u8d5b) CS Academy DMOJ (\u52a0\u62ff\u5927\u5f00\u6e90\u7684 OJ\uff0c\u8bed\u8a00\u652f\u6301\u5e7f\uff1b\u9898\u5e93\u662f\u5404\u5927\u6bd4\u8d5b\u7684\u5b58\u6863\uff0c\u4e5f\u6709\u5b9a\u671f\u81ea\u884c\u4e3e\u529e\u7684\u6bd4\u8d5b) HackerRank (\u6709\u5f88\u591a\u6bd4\u8d5b) Kattis LeetCode (\u6709\u4e2d\u6587\u5206\u7ad9\uff1a LeetCode China ) SPOJ Topcoder (\u6709\u5f88\u591a\u6bd4\u8d5b) Ural UVa (\u505a lrj \u7684\u4e66\u600e\u4e48\u53ef\u80fd\u4e0d\u77e5\u9053\u8fd9\u4e2a OJ) Yandex (\u5b58\u6863\u4e86\u8fd1\u51e0\u5e74\u7684\u5168\u4fc4\u7f57\u65af\u4fe1\u606f\u5b66\u5965\u8d5b) Light OJ \uff08\u4e00\u4e2a\u5feb\u6302\u4e86\u7684 OJ\uff0c www \u57df\u540d\u65e0\u6cd5\u8bbf\u95ee\uff0c\u8bf7\u4f7f\u7528 \u6839\u57df\u540d \u8bbf\u95ee\uff09","title":"\u56fd\u5916"},{"location":"intro/resources/#_4","text":"OI Wiki Codeforces \u4e0a\u7f51\u53cb\u6574\u7406\u7684\u4e00\u4efd\u6559\u7a0b\u5408\u96c6 \u82f1\u6587\u7248 E-Maxx \u7b97\u6cd5\u6559\u7a0b \u6f14\u7b97\u6cd5\u7b14\u8bb0 \u53f0\u6e7e\u5e08\u8303\u5927\u5b66\u603b\u7ed3\u7684\u6559\u7a0b algo.is CS 97SI: Introduction to Programming Contests \u65af\u5766\u798f\u7684\u4e00\u95e8\u8bfe \u5982\u4f55\u4e3a ACM-ICPC \u505a\u51c6\u5907\uff1f - geeksforgeeks Topcoder \u6574\u7406\u7684\u6559\u7a0b","title":"\u6559\u7a0b"},{"location":"intro/resources/#_5","text":"\u4fe1\u606f\u5b66\u5965\u8d5b\u4e00\u672c\u901a (\u521d\u5b66\u8005\u5411) \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178 (\u4eba\u79f0\u7d2b\u4e66) \u7b2c\u4e00\u7248 \u914d\u5957\u8d44\u6e90\u4ed3\u5e93 (mirror) \u7b2c\u4e8c\u7248 \u914d\u5957\u8d44\u6e90\u4ed3\u5e93 \u7b2c\u4e8c\u7248 \u4e60\u9898\u9009\u89e3 \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u2014\u2014\u8bad\u7ec3\u6307\u5357 (\u4eba\u79f0\u5927\u767d) \u7b97\u6cd5\u827a\u672f\u4e0e\u4fe1\u606f\u5b66\u7ade\u8d5b (\u4eba\u79f0\u9ed1\u4e66) \u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357 \u914d\u5957\u8d44\u6e90\u4ed3\u5e93 \u5177\u4f53\u6570\u5b66 Competitive Programmer's Handbook \u7b97\u6cd5\u5bfc\u8bba \u7b54\u6848\u89e3\u6790 (English) \u554a\u54c8\u7b97\u6cd5 \u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u5168\u5957 (\u901a\u4fd7\u6613\u61c2) \u7b97\u6cd5\u6982\u8bba (\u63d0\u7eb2\u631a\u9886\uff0c\u4f46\u5185\u5bb9\u8f83\u5c11) Legend-K \u7684\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u7684\u7b14\u8bb0","title":"\u4e66\u7c4d"},{"location":"intro/resources/#_6","text":"\u7ecf\u5178\u7b97\u6cd5\u7684\u53ef\u89c6\u5316\u7ed3\u679c - VisuAlgo \u7b97\u6cd5\u53ef\u89c6\u5316 - USF OEIS \u6574\u6570\u6570\u5217\u641c\u7d22\u5f15\u64ce Ubuntu Pastebin\uff0c\u53ef\u4ee5\u7528\u6765\u5206\u4eab\u4ee3\u7801 uDebug \u63d0\u4f9b\u4e00\u4e9b OJ \u9898\u76ee\u7684\u8c03\u8bd5\u8f85\u52a9 \u63d0\u4f9b C++ \u5185\u8bed\u6cd5\u7684\u67e5\u8be2\u7b49 - cppreference.com \u56fe\u8bba\u753b\u677f (\u540c\u65f6\u63a8\u8350 GraphViz) LaTeX \u6570\u5b66\u516c\u5f0f\u53c2\u8003 Godbolt - \u5728\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u7f16\u8bd1\u540e\u4ee3\u7801\u5757\u5bf9\u5e94\u7684\u6c47\u7f16\u8bed\u53e5 \u300a100 \u4e2a gdb \u5c0f\u6280\u5de7\u300b \u622a\u56fe\u8f6c LaTeX - Mathpix","title":"\u5de5\u5177"},{"location":"intro/resources/#_7","text":"POJ \u8bad\u7ec3\u8ba1\u5212 USACO \u6d1b\u8c37\u8bd5\u70bc\u573a -Morass- \u8d34\u5728 Codeforces \u4e0a\u7684\u4e00\u4efd\u9898\u5355 \u5317\u4eac\u5927\u5b66\u6691\u671f\u8bfe\u8bfe\u4ef6\u4f8b\u9898","title":"\u9898\u96c6"},{"location":"intro/spj/","text":"\u4e00\u9053\u9898\u5982\u679c\u6709\u591a\u7ec4\u89e3\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5224\u65ad\u7b54\u6848\u5408\u6cd5\u6027\uff0c\u8fd9\u4fbf\u662f Special Judge (spj)\uff0c\u53c8\u5e38\u88ab\u79f0\u4f5c checker\uff0c\u4e0b\u9762\u4ecb\u7ecd\u90e8\u5206\u8bc4\u6d4b\u5de5\u5177 /OJ \u7684 spj \u7f16\u5199\u65b9\u6cd5\u3002 Warning spj \u8fd8\u5e94\u5f53\u5224\u65ad\u6587\u4ef6\u5c3e\u662f\u5426\u6709\u591a\u4f59\u5185\u5bb9\uff0c\u53ca\u8f93\u51fa\u683c\u5f0f\u662f\u5426\u6b63\u786e\uff08\u5982\u9898\u76ee\u8981\u6c42\u6570\u5b57\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u800c\u9009\u624b\u5374\u4f7f\u7528\u4e86\u6362\u884c\uff09\u3002\u4f46\u662f\uff0c\u76ee\u524d\u524d\u8005\u53ea\u6709 Testlib \u53ef\u4ee5\u65b9\u4fbf\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u800c\u540e\u8005\u51e0\u4e4e\u65e0\u4eba\u53bb\u7279\u610f\u8fdb\u884c\u8fd9\u79cd\u5224\u65ad\u3002 \u6d6e\u70b9\u6570\u65f6\u5e94\u6ce8\u610f nan\uff0c\u4e0d\u5408\u7406\u7684\u5224\u65ad\u65b9\u5f0f\u4f1a\u5bfc\u81f4\u8f93\u51fa nan \u5373\u53ef AC\u3002 \u4ee5\u4e0b\u5747\u4f7f\u7528 C++\uff0c\u4ee5 \u201c\u8981\u6c42\u6807\u51c6\u7b54\u6848\u4e0e\u9009\u624b\u7b54\u6848\u5dee\u503c\u5c0f\u4e8e 1e-3\uff0c\u6587\u4ef6\u540d\u4e3a num\u201d \u4e3a\u4f8b\u3002 Testlib \u00b6 Testlib \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u7b97\u6cd5\u7ade\u8d5b\u9898\u76ee\u8f85\u52a9\u7cfb\u7edf\uff0c\u53ea\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u5f15\u5165 testlib.h \u5934\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u3002\u7528\u6cd5\u8be6\u89c1 Testlib \u9875\u9762\u3002 \u4f7f\u7528 Testlib \u7f16\u5199 spj \u7684\u597d\u5904\u4e3a\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5224\u65ad\u6587\u4ef6\u5c3e\u7684\u591a\u4f59\u5185\u5bb9\uff0c\u5176\u4f1a\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u5224\u65ad\uff0c\u4e5f\u65e0\u9700\u62c5\u5fe7 nan\u3002 \u5fc5\u987b\u4f7f\u7528 Testlib \u505a spj \u7684 \u8bc4\u6d4b\u5de5\u5177 /OJ\uff1aCodeforces\u3001\u6d1b\u8c37\u3001UOJ \u7b49 \u53ef\u4ee5\u4f7f\u7528 Testlib \u505a spj \u7684 \u8bc4\u6d4b\u5de5\u5177 /OJ\uff1aLibreOJ(SYZOJ 2)\u3001Lemon \u7b49 SYZOJ 2 \u6240\u9700\u7684\u4fee\u6539\u7248 Testlib \u53ef\u4ee5\u5728 \u8fd9\u91cc \u83b7\u53d6\u5230\uff0c\u611f\u8c22 cyand1317 \u3002 Lemon \u6240\u9700\u7684\u4fee\u6539\u7248 Testlib \u53ef\u4ee5\u5728 \u8fd9\u91cc \u83b7\u53d6\u5230\uff0c\u611f\u8c22 matthew99\u3002\u6ce8\u610f\u6b64\u7248\u672c Testlib \u6ce8\u518c checker \u5e94\u4f7f\u7528 registerLemonChecker() \u800c\u975e registerTestlibCmd() \u3002 \u5176\u4ed6\u8bc4\u6d4b\u5de5\u5177 /OJ \u5927\u90e8\u5206\u9700\u8981\u6309\u7167\u5176 spj \u7f16\u5199\u683c\u5f0f\u4fee\u6539 Testlib\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <testlib.h> #include <cmath> int main ( int argc , char * argv []) { /* * inf\uff1a\u8f93\u5165 * ouf\uff1a\u9009\u624b\u8f93\u51fa * ans\uff1a\u6807\u51c6\u8f93\u51fa */ registerTestlibCmd ( argc , argv ); double pans = ouf . readDouble (), jans = ans . readDouble (); if ( abs ( pans - jans ) < 1e-3 ) quitf ( _ok , \"Good job\" ); else quitf ( _wa , \"Too big or too small, expected %f, found %f\" , jans , pans ); } Lemon \u00b6 Lemon \u6709\u73b0\u6210\u7684\u4fee\u6539\u7248 Testlib\uff0c\u5efa\u8bae\u4f7f\u7528 Testlib\uff0c\u89c1 Testlib 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * argv[1]\uff1a\u8f93\u5165 * argv[2]\uff1a\u9009\u624b\u8f93\u51fa * argv[3]\uff1a\u6807\u51c6\u8f93\u51fa * argv[4]\uff1a\u5355\u4e2a\u6d4b\u8bd5\u70b9\u5206\u503c * argv[5]\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206 * argv[6]\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fin = fopen ( argv [ 1 ], \"r\" ); FILE * fout = fopen ( argv [ 2 ], \"r\" ); FILE * fstd = fopen ( argv [ 3 ], \"r\" ); FILE * fscore = fopen ( argv [ 5 ], \"w\" ); FILE * freport = fopen ( argv [ 6 ], \"w\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { fprintf ( fscore , \"%s\" , argv [ 4 ]); fprintf ( freport , \"Good job\" ); } else { fprintf ( fscore , \"%d\" , 0 ); fprintf ( freport , \"Too big or too small, expected %f, found %f\" , jans , pans ); } } Cena \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * FILENAME.in\uff1a\u8f93\u5165 * FILENAME.out\uff1a\u9009\u624b\u8f93\u51fa * argv[2]\uff1a\u6807\u51c6\u8f93\u51fa * argv[1]\uff1a\u5355\u4e2a\u6d4b\u8bd5\u70b9\u5206\u503c * score.log\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206 * report.log\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fin = fopen ( \"num.in\" , \"r\" ); FILE * fout = fopen ( \"num.out\" , \"r\" ); FILE * fstd = fopen ( argv [ 2 ], \"r\" ); FILE * fscore = fopen ( \"score.log\" , \"w\" ); FILE * freport = fopen ( \"report.log\" , \"w\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { fprintf ( fscore , \"%s\" , argv [ 1 ]); fprintf ( freport , \"Good job\" ); } else { fprintf ( fscore , \"%d\" , 0 ); fprintf ( freport , \"Too big or too small, expected %f, found %f\" , jans , pans ); } } CCR \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * stdin\uff1a\u8f93\u5165 * argv[3]\uff1a\u9009\u624b\u8f93\u51fa * argv[2]\uff1a\u6807\u51c6\u8f93\u51fa * stdout:L1\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206\u6bd4\u7387 * stdout:L2\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fout = fopen ( argv [ 3 ], \"r\" ); FILE * fstd = fopen ( argv [ 2 ], \"r\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { printf ( \"%d \\n \" , 1 ); printf ( \"Good job\" ); } else { printf ( \"%d \\n \" , 0 ); printf ( \"Too big or too small, expected %f, found %f\" , jans , pans ); } } Arbiter \u00b6 HUSTOJ \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <cmath> #include <cstdio> #define AC 0 #define WA 1 int main ( int argc , char * argv []) { /* * argv[1]\uff1a\u8f93\u5165 * argv[3]\uff1a\u9009\u624b\u8f93\u51fa * argv[2]\uff1a\u6807\u51c6\u8f93\u51fa * exit code\uff1a\u8fd4\u56de\u5224\u65ad\u7ed3\u679c */ FILE * fout = fopen ( argv [ 3 ], \"r\" ); FILE * fstd = fopen ( argv [ 2 ], \"r\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) return AC ; else return WA ; } QDUOJ \u00b6 QDUOJ \u5c31\u9ebb\u70e6\u4e00\u70b9\uff0c\u56e0\u4e3a\u5b83\u7684\u5e26 spj \u7684\u9898\u76ee\u6ca1\u6709\u6807\u51c6\u8f93\u51fa\uff0c\u53ea\u80fd\u628a std \u5199\u8fdb spj \u8dd1\u51fa\u6807\u51c6\u8f93\u51fa\u518d\u5224\u65ad\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <cmath> #include <cstdio> #define AC 0 #define WA 1 #define ERROR -1 double solve (...) { // std } int main ( int argc , char * argv []) { /* * argv[1]\uff1a\u8f93\u5165 * argv[2]\uff1a\u9009\u624b\u8f93\u51fa * exit code\uff1a\u8fd4\u56de\u5224\u65ad\u7ed3\u679c */ FILE * fin = fopen ( argv [ 1 ], \"r\" ); FILE * fout = fopen ( argv [ 2 ], \"r\" ); //\u8bfb\u5165 double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); jans = solve (...); if ( abs ( pans - jans ) < 1e-3 ) return AC ; else return WA ; } LibreOJ(SYZOJ 2) \u00b6 LibreOJ(SYZOJ 2) \u6709\u73b0\u6210\u7684\u4fee\u6539\u7248 Testlib\uff0c\u5efa\u8bae\u4f7f\u7528 Testlib\uff0c\u89c1 Testlib 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * in\uff1a\u8f93\u5165 * user_out\uff1a\u9009\u624b\u8f93\u51fa * answer\uff1a\u6807\u51c6\u8f93\u51fa * code\uff1a\u9009\u624b\u4ee3\u7801 * stdout\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206 * stderr\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fin = fopen ( \"in\" , \"r\" ); FILE * fout = fopen ( \"user_out\" , \"r\" ); FILE * fstd = fopen ( \"answer\" , \"r\" ); FILE * fcode = fopen ( \"code\" , \"r\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { printf ( \"%d\" , 100 ); fprintf ( stderr , \"Good job\" ); } else { printf ( \"%d\" , 0 ); fprintf ( stderr , \"Too big or too small, expected %f, found %f\" , jans , pans ); } }","title":"Special Judge"},{"location":"intro/spj/#testlib","text":"Testlib \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u7b97\u6cd5\u7ade\u8d5b\u9898\u76ee\u8f85\u52a9\u7cfb\u7edf\uff0c\u53ea\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u5f15\u5165 testlib.h \u5934\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u3002\u7528\u6cd5\u8be6\u89c1 Testlib \u9875\u9762\u3002 \u4f7f\u7528 Testlib \u7f16\u5199 spj \u7684\u597d\u5904\u4e3a\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5224\u65ad\u6587\u4ef6\u5c3e\u7684\u591a\u4f59\u5185\u5bb9\uff0c\u5176\u4f1a\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u5224\u65ad\uff0c\u4e5f\u65e0\u9700\u62c5\u5fe7 nan\u3002 \u5fc5\u987b\u4f7f\u7528 Testlib \u505a spj \u7684 \u8bc4\u6d4b\u5de5\u5177 /OJ\uff1aCodeforces\u3001\u6d1b\u8c37\u3001UOJ \u7b49 \u53ef\u4ee5\u4f7f\u7528 Testlib \u505a spj \u7684 \u8bc4\u6d4b\u5de5\u5177 /OJ\uff1aLibreOJ(SYZOJ 2)\u3001Lemon \u7b49 SYZOJ 2 \u6240\u9700\u7684\u4fee\u6539\u7248 Testlib \u53ef\u4ee5\u5728 \u8fd9\u91cc \u83b7\u53d6\u5230\uff0c\u611f\u8c22 cyand1317 \u3002 Lemon \u6240\u9700\u7684\u4fee\u6539\u7248 Testlib \u53ef\u4ee5\u5728 \u8fd9\u91cc \u83b7\u53d6\u5230\uff0c\u611f\u8c22 matthew99\u3002\u6ce8\u610f\u6b64\u7248\u672c Testlib \u6ce8\u518c checker \u5e94\u4f7f\u7528 registerLemonChecker() \u800c\u975e registerTestlibCmd() \u3002 \u5176\u4ed6\u8bc4\u6d4b\u5de5\u5177 /OJ \u5927\u90e8\u5206\u9700\u8981\u6309\u7167\u5176 spj \u7f16\u5199\u683c\u5f0f\u4fee\u6539 Testlib\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <testlib.h> #include <cmath> int main ( int argc , char * argv []) { /* * inf\uff1a\u8f93\u5165 * ouf\uff1a\u9009\u624b\u8f93\u51fa * ans\uff1a\u6807\u51c6\u8f93\u51fa */ registerTestlibCmd ( argc , argv ); double pans = ouf . readDouble (), jans = ans . readDouble (); if ( abs ( pans - jans ) < 1e-3 ) quitf ( _ok , \"Good job\" ); else quitf ( _wa , \"Too big or too small, expected %f, found %f\" , jans , pans ); }","title":"Testlib"},{"location":"intro/spj/#lemon","text":"Lemon \u6709\u73b0\u6210\u7684\u4fee\u6539\u7248 Testlib\uff0c\u5efa\u8bae\u4f7f\u7528 Testlib\uff0c\u89c1 Testlib 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * argv[1]\uff1a\u8f93\u5165 * argv[2]\uff1a\u9009\u624b\u8f93\u51fa * argv[3]\uff1a\u6807\u51c6\u8f93\u51fa * argv[4]\uff1a\u5355\u4e2a\u6d4b\u8bd5\u70b9\u5206\u503c * argv[5]\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206 * argv[6]\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fin = fopen ( argv [ 1 ], \"r\" ); FILE * fout = fopen ( argv [ 2 ], \"r\" ); FILE * fstd = fopen ( argv [ 3 ], \"r\" ); FILE * fscore = fopen ( argv [ 5 ], \"w\" ); FILE * freport = fopen ( argv [ 6 ], \"w\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { fprintf ( fscore , \"%s\" , argv [ 4 ]); fprintf ( freport , \"Good job\" ); } else { fprintf ( fscore , \"%d\" , 0 ); fprintf ( freport , \"Too big or too small, expected %f, found %f\" , jans , pans ); } }","title":"Lemon"},{"location":"intro/spj/#cena","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * FILENAME.in\uff1a\u8f93\u5165 * FILENAME.out\uff1a\u9009\u624b\u8f93\u51fa * argv[2]\uff1a\u6807\u51c6\u8f93\u51fa * argv[1]\uff1a\u5355\u4e2a\u6d4b\u8bd5\u70b9\u5206\u503c * score.log\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206 * report.log\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fin = fopen ( \"num.in\" , \"r\" ); FILE * fout = fopen ( \"num.out\" , \"r\" ); FILE * fstd = fopen ( argv [ 2 ], \"r\" ); FILE * fscore = fopen ( \"score.log\" , \"w\" ); FILE * freport = fopen ( \"report.log\" , \"w\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { fprintf ( fscore , \"%s\" , argv [ 1 ]); fprintf ( freport , \"Good job\" ); } else { fprintf ( fscore , \"%d\" , 0 ); fprintf ( freport , \"Too big or too small, expected %f, found %f\" , jans , pans ); } }","title":"Cena"},{"location":"intro/spj/#ccr","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * stdin\uff1a\u8f93\u5165 * argv[3]\uff1a\u9009\u624b\u8f93\u51fa * argv[2]\uff1a\u6807\u51c6\u8f93\u51fa * stdout:L1\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206\u6bd4\u7387 * stdout:L2\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fout = fopen ( argv [ 3 ], \"r\" ); FILE * fstd = fopen ( argv [ 2 ], \"r\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { printf ( \"%d \\n \" , 1 ); printf ( \"Good job\" ); } else { printf ( \"%d \\n \" , 0 ); printf ( \"Too big or too small, expected %f, found %f\" , jans , pans ); } }","title":"CCR"},{"location":"intro/spj/#arbiter","text":"","title":"Arbiter"},{"location":"intro/spj/#hustoj","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <cmath> #include <cstdio> #define AC 0 #define WA 1 int main ( int argc , char * argv []) { /* * argv[1]\uff1a\u8f93\u5165 * argv[3]\uff1a\u9009\u624b\u8f93\u51fa * argv[2]\uff1a\u6807\u51c6\u8f93\u51fa * exit code\uff1a\u8fd4\u56de\u5224\u65ad\u7ed3\u679c */ FILE * fout = fopen ( argv [ 3 ], \"r\" ); FILE * fstd = fopen ( argv [ 2 ], \"r\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) return AC ; else return WA ; }","title":"HUSTOJ"},{"location":"intro/spj/#qduoj","text":"QDUOJ \u5c31\u9ebb\u70e6\u4e00\u70b9\uff0c\u56e0\u4e3a\u5b83\u7684\u5e26 spj \u7684\u9898\u76ee\u6ca1\u6709\u6807\u51c6\u8f93\u51fa\uff0c\u53ea\u80fd\u628a std \u5199\u8fdb spj \u8dd1\u51fa\u6807\u51c6\u8f93\u51fa\u518d\u5224\u65ad\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <cmath> #include <cstdio> #define AC 0 #define WA 1 #define ERROR -1 double solve (...) { // std } int main ( int argc , char * argv []) { /* * argv[1]\uff1a\u8f93\u5165 * argv[2]\uff1a\u9009\u624b\u8f93\u51fa * exit code\uff1a\u8fd4\u56de\u5224\u65ad\u7ed3\u679c */ FILE * fin = fopen ( argv [ 1 ], \"r\" ); FILE * fout = fopen ( argv [ 2 ], \"r\" ); //\u8bfb\u5165 double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); jans = solve (...); if ( abs ( pans - jans ) < 1e-3 ) return AC ; else return WA ; }","title":"QDUOJ"},{"location":"intro/spj/#libreojsyzoj-2","text":"LibreOJ(SYZOJ 2) \u6709\u73b0\u6210\u7684\u4fee\u6539\u7248 Testlib\uff0c\u5efa\u8bae\u4f7f\u7528 Testlib\uff0c\u89c1 Testlib 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <cmath> #include <cstdio> int main ( int argc , char * argv []) { /* * in\uff1a\u8f93\u5165 * user_out\uff1a\u9009\u624b\u8f93\u51fa * answer\uff1a\u6807\u51c6\u8f93\u51fa * code\uff1a\u9009\u624b\u4ee3\u7801 * stdout\uff1a\u8f93\u51fa\u6700\u7ec8\u5f97\u5206 * stderr\uff1a\u8f93\u51fa\u9519\u8bef\u62a5\u544a */ FILE * fin = fopen ( \"in\" , \"r\" ); FILE * fout = fopen ( \"user_out\" , \"r\" ); FILE * fstd = fopen ( \"answer\" , \"r\" ); FILE * fcode = fopen ( \"code\" , \"r\" ); double pans , jans ; fscanf ( fout , \"%lf\" , & pans ); fscanf ( fstd , \"%lf\" , & jans ); if ( abs ( pans - jans ) < 1e-3 ) { printf ( \"%d\" , 100 ); fprintf ( stderr , \"Good job\" ); } else { printf ( \"%d\" , 0 ); fprintf ( stderr , \"Too big or too small, expected %f, found %f\" , jans , pans ); } }","title":"LibreOJ(SYZOJ 2)"},{"location":"intro/testlib/","text":"","title":"Testlib"},{"location":"intro/wsl/","text":"\u5f15\u8a00 \u00b6 \u4f17\u6240\u5468\u77e5\uff0c\u5c3d\u7ba1\u73b0\u5728\u5927\u90e8\u5206\u5b66\u6821\u7684\u7ade\u8d5b\u7ec3\u4e60\u73af\u5883\u90fd\u662f\u6784\u5efa XP \u7b49 Windows \u7cfb\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f46\u662f\u5728 NOI \u7cfb\u5217\u8d5b\u4e2d\uff0c\u65e9\u5df2\u7528\u4e0a\u4e86 NOI Linux \u8fd9\u4e2a Ubuntu \u64cd\u4f5c\u7cfb\u7edf\u7684\u9609\u5272\u7248\u3002 NOI \u7ade\u8d5b\u7684\u73af\u5883\u8981\u6c42 \u6216\u8bb8\u5927\u5bb6\u5bf9\u81ea\u5df1 Windows \u73af\u5883\u4e0b\u7684 Dev-C++ \u7b49\u90fd\u5df2\u719f\u8bc6\uff0c\u4f46\u662f\u5f53\u573a\u666f\u7a81\u7136\u5207\u6362\u5230 Linux \u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u4e0d\u77e5\u6240\u63aa\uff1f \u300c\u60f3\u7528 Ctrl + C \u590d\u5236\uff0c\u7ed3\u679c\u9000\u51fa\u4e86\u7a0b\u5e8f\u300d \u300c\u5e73\u65f6 AC \u7684\u7a0b\u5e8f\u6a21\u677f\u5230\u4e86 Linux \u4e0a\u5c31 WA\u300d\u2026\u2026 \u5e73\u53f0\u5dee\u5f02\uff08\u8f6c\u81ea\u767e\u5ea6\u6587\u5e93\u201cNOIP \u6807\u51c6\u8bc4\u6d4b\u7cfb\u7edf\u53ca\u76f8\u5173\u95ee\u9898\u201d\uff09 \u4e3a\u4e86\u9632\u6b62\u8003\u573a\u4e0a\u51fa\u73b0\u6b64\u7c7b\u5c34\u5c2c\u60c5\u51b5\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u63d0\u524d\u719f\u6089\u4e0b Linux \u7cfb\u7edf\u7684\u64cd\u4f5c\u65b9\u6cd5\u3002 \u867d\u7136\u5728 NOI \u7684\u5b98\u7f51\u5df2\u7ecf\u653e\u51fa\u4e86 NOI Linux \u7684 ISO \u955c\u50cf\uff0c\u4f46\u662f\u5982\u679c\u8dd1\u865a\u62df\u673a\u7684\u8bdd\uff0c\u914d\u7f6e\u4e5f\u76f8\u5f53\u9ebb\u70e6\uff0c\u5305\u62ec\u6fc0\u6d3b VMware\uff0c\u7528 VMware \u88c5\u7cfb\u7edf\u5f00\u865a\u62df\u673a\u7b49\u6b65\u9aa4\uff0c\u4e14 NOI Linux \u9ed8\u8ba4\u81ea\u5e26\u56fe\u5f62\u754c\u9762\uff0c\u4e24\u4e2a\u7cfb\u7edf\u4e00\u8d77\u8fd0\u884c\u662f\u4f4e\u914d\u515a\u7684\u5669\u68a6\u3002 \u8865\u5145\u8d44\u6599\uff1a\u4f55\u4e3a Linux \u5b50\u7cfb\u7edf\uff08WSL\uff09\uff1f(via \u767e\u5ea6\u767e\u79d1) Windows Subsystem for Linux\uff08\u7b80\u79f0 WSL\uff09\u662f\u4e00\u4e2a\u4e3a\u5728 Windows 10 \u4e0a\u80fd\u591f\u539f\u751f\u8fd0\u884c Linux \u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\uff08ELF \u683c\u5f0f\uff09\u7684\u517c\u5bb9\u5c42\u3002\u5b83\u662f\u7531\u5fae\u8f6f\u4e0e Canonical \u516c\u53f8\u5408\u4f5c\u5f00\u53d1\uff0c\u76ee\u6807\u662f\u4f7f\u7eaf\u6b63\u7684 Ubuntu, OpenSUSE, Kali Linux \u548c Debian \u6620\u50cf\u80fd\u4e0b\u8f7d\u548c\u89e3\u538b\u5230\u7528\u6237\u7684\u672c\u5730\u8ba1\u7b97\u673a\uff0c\u5e76\u4e14\u6620\u50cf\u5185\u7684\u5de5\u5177\u548c\u5b9e\u7528\u5de5\u5177\u80fd\u5728\u6b64\u5b50\u7cfb\u7edf\u4e0a\u539f\u751f\u8fd0\u884c\u3002 WSL \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5fae\u8f6f\u5f00\u53d1\u7684 Linux \u517c\u5bb9\u5185\u6838\u63a5\u53e3\uff08\u4e0d\u5305\u542b Linux \u4ee3\u7801\uff09\uff0c\u6765\u81ea Linux \u7684\u7528\u6237\u6a21\u5f0f\u4e8c\u8fdb\u5236\u6587\u4ef6\u5728\u5176\u4e0a\u8fd0\u884c\u3002 \u6b64\u5b50\u7cfb\u7edf\u8d77\u6e90\u4e8e\u547d\u8fd0\u591a\u821b\u7684 Astoria \u9879\u76ee\uff0c\u5176\u76ee\u7684\u662f\u5141\u8bb8 Android \u5e94\u7528\u8fd0\u884c\u5728 Windows 10 Mobile \u4e0a\u3002\u6b64\u529f\u80fd\u7ec4\u4ef6\u4ece Windows 10 Insider Preview build 14316 \u5f00\u59cb\u53ef\u7528\u3002 \u51c6\u5907 \u00b6 \u9996\u5148\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u6700\u65b0\u7684 Windows 10 \u64cd\u4f5c\u7cfb\u7edf\uff0c\u8fd9\u70b9\u4e0d\u5fc5\u591a\u8bf4\u3002 \u5176\u6b21\uff0c\u4f60\u9700\u8981\u914d\u7f6e\u4e00\u4e0b\u5f00\u53d1\u4eba\u5458\u6a21\u5f0f\u73af\u5883\u3002 \u8bbe\u7f6e -> \u66f4\u65b0\u4e0e\u5b89\u5168 -> \u5f00\u53d1\u4eba\u5458\u6a21\u5f0f\u6846\u9009 -> \u662f \u6765\uff0c\u8ddf\u7740\u7bad\u5934\u8d70 \u63a7\u5236\u9762\u677f ->\u7a0b\u5e8f ->\u542f\u7528\u548c\u5173\u95ed Windows \u529f\u80fd ->\u6846\u9009 \u201c\u9002\u7528\u4e8e Linux \u7684 Windows \u5b50\u7cfb\u7edf\u201d-> \u786e\u5b9a ->\u91cd\u542f \u7ed9\u7cfb\u7edf\u76d8\u7559\u4e0b\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u6bd5\u7adf\u88c5\u597d\u7684 Linux \u6ca1\u6cd5\u8fc1\u79fb\u3002 \u8fd9\u6b21\u6f14\u793a\u6211\u4eec\u4f1a\u5b89\u88c5 Ubuntu\uff0c\u56e0\u4e3a NOI Linux \u6b63\u662f Ubuntu \u7684\u4fee\u6539\u7248\u3002 \u53ea\u8981\u5b66\u4f1a\u4e86\u65b9\u6cd5\uff0c\u4f60\u4e5f\u53ef\u7167\u846b\u82a6\u753b\u74e2\uff0c\u5b89\u88c5 Windows \u5e94\u7528\u5546\u5e97\u4e2d\u7684\u5176\u4ed6\u5b50\u7cfb\u7edf\u3002 \u5f00\u641e \u00b6 Warning Windows 10 \u5546\u5e97\u7684\u7b2c\u4e00\u4e2a Ubuntu \u968f\u7740 Ubuntu \u7684\u66f4\u65b0\u800c\u66f4\u65b0\uff0c\u56e0\u6b64\u5185\u5bb9\u53ef\u80fd\u4f1a\u6709\u6240\u6539\u53d8\u3002 \u53ef\u4f7f\u7528 sudo lsb_release -a \u67e5\u770b\u81ea\u5df1\u7684 Ubuntu \u7248\u672c\u3002 \u4e5f\u53ef\u5b89\u88c5\u5e26\u6709\u7248\u672c\u53f7\u7684\u65e7 Linux \u7248\u672c\uff08\u5982\u672c\u6b21\u6f14\u793a\u4f7f\u7528\u4e86 16.04 \uff09\u3002 \u5b89\u88c5\u5b8c\u540e\uff0c\u6253\u5f00 Ubuntu\uff0c\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u8ba9\u5176\u81ea\u5df1\u914d\u7f6e\uff0c\u4e0d\u4e45\u5c31\u4f1a\u63d0\u793a\u4f60\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \uff08\u8fd9\u91cc\u770b\u4f60\u559c\u597d\uff0c\u63a8\u8350\u8bbe\u7f6e\u77ed\u70b9\uff0c\u6bd5\u7adf \u672c\u5730\u73af\u5883\u4e0d\u6015\u653b\u51fb \uff09 Linux \u533a\u5206\u5927\u5c0f\u5199\uff01 \u8fd9\u6837\u4e4b\u540e\uff0c\u4e00\u4e2a\u7eaf\u51c0\u7684 Ubuntu \u7cfb\u7edf\u5b89\u88c5\u5b8c\u6210\u4e86\uff01 \u57fa\u7840\u914d\u7f6e \u00b6 \u4ee5\u4e0b\u547d\u4ee4\u5747\u53ef\u76f4\u63a5\u53f3\u952e\u590d\u5236\u7c98\u8d34\u8fdb\u7a97\u53e3\u54e6\uff01 \u6b63\u5982\u56fe\u7247\u6240\u793a\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u7eaf\u51c0\u5230\u8fde\u4e2a\u7f16\u8bd1\u5668\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u8fd9\u4e00\u8282\u6765\u770b\u770b\u57fa\u7840\u7684\u73af\u5883\u914d\u7f6e\u3002 \u66f4\u6362\u4e3a\u56fd\u5185\u8f6f\u4ef6\u6e90 \u00b6 Ubuntu \u9ed8\u8ba4\u7684\u8f6f\u4ef6\u6e90\u5728\u56fd\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u6362\u4e3a\u56fd\u5185\u7684\u52a0\u5feb\u901f\u5ea6\uff0c\u5982 \u6e05\u534e TUNA \u7684\u8f6f\u4ef6\u6e90 \u3002 \u53ef\u4ee5\u8bbf\u95ee TUNA \u7684\u9875\u9762 \u6765\u83b7\u5f97\u56fd\u5185\u6e90\u7684\u4fe1\u606f\u3002 Warning \u8bf7\u5728\u9875\u9762\u4e2d\u5bfb\u627e\u4e0e\u81ea\u5df1\u7cfb\u7edf\u7248\u672c\u76f8\u914d\u7684\u6e90\uff08\u53ef\u4f7f\u7528 sudo lsb_release -a \u67e5\u770b\uff0c\u5177\u4f53\u8be6\u89c1 0x03 \uff09 \u9664\u975e\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\uff0c\u5426\u5219\u4e0d\u8981\u4f7f\u7528\u4e0e\u81ea\u5df1\u7684\u7cfb\u7edf\u7248\u672c\u4e0d\u5339\u914d\u7684\u6e90\uff01** \u4f7f\u7528\u7684\u547d\u4ee4 1 2 3 4 5 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak sudo vim /etc/apt/sources.list # \uff08\u6309 i \u4e4b\u540e\u5c06\u4e0a\u6587\u7684\u6e90\u53f3\u952e\u7c98\u8d34\u8fdb\u53bb\uff0c\u7f16\u8f91\u5b8c\u540e\u6309 Esc\uff0c\u518d\u8f93\u5165 :wq \u548c\u56de\u8f66\uff09 sudo apt update sudo apt upgrade -y \u5b89\u88c5\u4e2d\u6587\u73af\u5883 \u00b6 1 2 3 4 5 6 7 8 9 sudo apt install language-pack-zh-han* -y sudo locale-gen zh_CN.GB18030 && sudo locale-gen zh_CN.GB2312 && sudo locale-gen zh_CN.UTF8 # \u4e2d\u6587\u5b57\u4f53\uff0c\u522b\u5fd8\u4e86\u540c\u610f EULA sudo apt install fontconfig -y sudo apt install ttf-mscorefonts-installer -y # \u4e0b\u9762\u7684\u518d\u6267\u884c\u4e00\u904d\u4ee5\u9632\u4e07\u4e00 sudo apt install -y --force-yes --no-install-recommends fonts-wqy-microhei sudo apt install -y --force-yes --no-install-recommends ttf-wqy-zenhei sudo dpkg-reconfigure locales \u4f7f\u7528 sudo dpkg-reconfigure locales \u8fdb\u5165\u83dc\u5355\uff0c\u6309\u7a7a\u683c\u9009\u62e9\u5e26 zh_CN \u7684\u9009\u9879\uff0c\u9009\u5b8c\u540e\u56de\u8f66\uff0c\u4e0b\u4e00\u4e2a\u83dc\u5355\u4e2d\u9009 zh_CN.UTF-8 \u6253\u56de\u8f66\u3002 \u4e4b\u540e\u5173\u4e0a Ubuntu \u91cd\u5f00\u4e00\u904d\u767b\u5f55\uff0c\u662f\u4e0d\u662f\u53d8\u4e2d\u6587\u4e86\uff1f \u518d\u4f9d\u6b21\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\uff0c\u628a man \u5e2e\u52a9\u9875\u66ff\u6362\u4e3a\u4e2d\u6587\uff1a via 1 2 3 4 sudo apt install manpages-zh sudo vi /etc/manpath.config :1, $s #/usr/share/man#/usr/share/man/zh_CN#g :wq \u53ef\u4ee5\u7528 man help \u6d4b\u8bd5\u4e0b\u3002 \u5b89\u88c5\u7f16\u8bd1\u73af\u5883 \u00b6 1 2 3 4 5 sudo apt install build-essential vim ddd gdb fpc emacs gedit anjuta lazarus -y wget http://download.noi.cn/T/noi/GUIDE-1.0.2-ubuntu.tar tar -xvf GUIDE-1.0.2-ubuntu.tar cd GUIDE-1.0.2-ubuntu chmod +x install.sh && ./install.sh \u8fd9\u662f\u57fa\u7840\u7684 + NOI \u5b98\u65b9\u8981\u6c42\u73af\u5883\uff0c\u5982\u6709\u9700\u8981\u53ef\u4ee5\u7528 apt install \u7a0b\u5e8f\u540d \u6765\u5b89\u88c5\u522b\u7684\u3002 \u82e5\u60f3\u5b89\u88c5\u5176\u4ed6\u7248\u672c\u53ef\u4ee5\u53c2\u8003\u4e0b \u8fd9\u4e2a \u6765\u4e2a\u7a0b\u5e8f\u73a9\u73a9\uff1a 1 2 3 4 $ vim cpuid.cpp $ g++ -Wall cpuid.cpp -o cpuid $ ./cpuid AMD Ryzen 5 1400 Quad-Core Processor Tips\uff1aLinux \u73af\u5883\u4e0b\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4e0d\u5e26\u6269\u5c55\u540d\uff0c\u5b9e\u73b0\u65b9\u5f0f\u770b\u4e0a\u65b9\u547d\u4ee4\u884c \u8fdb\u9636\u64cd\u4f5c \u00b6 \u5b89\u88c5\u56fe\u5f62\u73af\u5883\uff0c\u5e76\u4f7f\u7528\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5 \u00b6 \u63a8\u8350\u56fe\u5f62\u73af\u5883\u7528 xfce4\uff0c\u4e0d\u81c3\u80bf\u3002 1 2 3 sudo apt install xfce4 tightvncserver -y # \u6216\u4f7f\u7528 sudo apt install xubuntu-desktop -y # xubuntu \u5b89\u88c5\u7684\u8f6f\u4ef6\u591a\uff0c\u57fa\u7840\u73af\u5883\u53ef\u7528\u7b2c\u4e00\u79cd \u56fe\u5f62\u73af\u5883\u662f\u4e2a\u5927\u5934\uff0c\u56e0\u6b64\u8981\u591a\u7b49\u4f1a\uff0c\u9759\u9759\u7b49\u5f85\u4e0b\u8f7d\u89e3\u5305\u3002 \u4e0b\u9762\u914d\u7f6e xrdp\uff1a 1 2 3 sudo apt install xrdp -y echo \"xfce4-session\" >~/.xsession sudo service xrdp restart \u4e3a\u4e86\u9632\u6b62\u548c\u4f60\u8ba1\u7b97\u673a\u672c\u6765\u5e26\u7684\u8fdc\u7a0b\u684c\u9762\u51b2\u7a81\uff0c\u6700\u597d\u6362\u4e00\u4e0b\u7aef\u53e3\u3002 \u4e0d\u6362\u7aef\u53e3\u7684\u7ed3\u679c \u8fd0\u884c\u547d\u4ee4 vim /etc/xrdp/xrdp.ini \uff0c\u628a port=3389 \u6539\u4e3a\u522b\u7684\uff08\u5982 port=3390 \uff09\uff0c\u7136\u540e\u4fdd\u5b58\u5373\u53ef\u3002 \u8fd0\u884c sudo service xrdp restart \uff0c\u7136\u540e\u53bb\u5f00\u59cb\u83dc\u5355\uff0c\u7528 localhost: \u4f60\u914d\u7f6e\u7684\u7aef\u53e3 \u6765\u8bbf\u95ee\u3002 \u8865\u5145\uff1a\u4f7f\u7528 Xming \u8fde\u63a5 \u00b6 \u6709\u7f51\u53cb\u8bf4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528 Xming \u8fde\u63a5\uff0c\u90a3\u6211\u4eec\u5c31\u6765\u7814\u7a76\u4e00\u4e0b\u3002 \u5ba2\u6237\u7aef\uff1a\u5b89\u88c5 Xterm \u00b6 \u6211\u4eec\u8fdb\u5165 Ubuntu \u73af\u5883\uff0c\u5b89\u88c5 xterm\uff1a 1 sudo apt-get install xterm -y \u670d\u52a1\u7aef\uff1a\u4e0b\u8f7d Xming Server \u00b6 \u53bb https://sourceforge.net/projects/xming/ \u4e0b\u8f7d\u6700\u65b0\u7684 Xming Server\uff0c\u7136\u540e\u4e00\u8def\u5b89\u88c5\uff1a \u5982\u679c\u4f60\u628a Launch Xming \u6846\u70b9\u6389\u4e86\uff0c\u8bb0\u5f97\u53bb\u5f00\u59cb\u83dc\u5355\u518d\u6253\u5f00\uff1a \u4e4b\u540e\u518d\u56de\u5230 Ubuntu\uff0c\u952e\u5165\u5982\u4e0b\u6307\u4ee4\uff1a 1 DISPLAY = :0 xterm Duang\uff01 \u4e0d\u8fc7\u8c8c\u4f3c\u53ea\u652f\u6301\u547d\u4ee4\u884c\u2026\u2026 \u8fd9\u65f6\u4e0a\u4e00\u79cd\u65b9\u6cd5\u7684\u4f18\u52bf\u5c31\u663e\u800c\u6613\u89c1\u4e86 \u5982\u679c\u4f60\u548c\u6211\u4e00\u6837\u4f7f\u7528\u4e86 xfce4\uff0c\u5728\u5f39\u51fa\u7684\u7a97\u53e3\u4e2d\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6fc0\u6d3b xfce4\uff1a 1 xfce4-session \u4e0d\u8fc7\u8fd9\u662f\u4ec0\u4e48\u6548\u679c...... \uff08\u5728 Xming \u4e2d\u4f7f\u7528 Ctrl + C \u5c31\u53ef\u4ee5\u9000\u51fa\u8fd9\u4e2a\u9b3c\u755c\u754c\u9762\uff09 \u8fbe\u6210\u6210\u5c31\uff1aWindows+Linux \u4e8c\u5408\u4e00 \u611f\u53d7\u4e00\u4e0b\u4e24\u4e2a\u7248\u672c\u878d\u5408\u7684\u611f\u89c9\uff1a \u4e0e Windows \u5185\u539f\u786c\u76d8\u5206\u533a\u4ea4\u4e92 \u00b6 \u786c\u76d8\u5206\u533a\u4f5c\u4e3a\u6587\u4ef6\u5939\u5728 /mnt/ \u91cc\u653e\u7740\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4ea4\u4e92\uff0c\u6bd4\u5982\u8bf4\u76f4\u63a5\u7f16\u8bd1\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6216\u8005\u5f80 Ubuntu \u91cc\u4f20\u6587\u4ef6\u4ec0\u4e48\u7684...... \u5177\u4f53\u6f14\u793a\uff1a \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e9b Windows\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\uff09\u5efa\u4e0d\u4e86\u7684\u6587\u4ef6\uff0c\u4f8b\u5982\u5e26\u70b9\u6587\u4ef6\u5939 \u4e71\u7801\u662f\u56e0\u4e3a\u6211\u7528\u7684\u9884\u89c8\u4f53\u9a8c\u7cfb\u7edf\u2026\u2026\u4e0d\u8fc7\u7528\u6b63\u5f0f\u7248\u4e5f\u53ef\u4ee5\u4e86\uff01 FAQ \u00b6 \u5982\u4f55\u5728\u5b50\u7cfb\u7edf\u4e0b\u8fdb\u884c xxx\uff1f \u8be5\u600e\u4e48\u7528\u600e\u4e48\u7528\uff0c\u53ef\u4ee5\u7528\u81ea\u5e26\u547d\u4ee4\u884c\uff0c\u5b9e\u5728\u4e0d\u884c\u53c2\u8003\u6559\u7a0b\u5524\u9192\u56fe\u5f62\u754c\u9762\u3002 \u6bd4\u5982\u8bf4 vim\uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u952e\u5165 man vim \uff0c\u4f1a\u7ed9\u51fa\u4e00\u4efd\u8be6\u5c3d\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u4ea6\u53ef\u4f7f\u7528 vim --help \u3002 \u5360\u7528\u91cf\u5927\uff1f Sorry\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u548c Windows 10 \u5171\u7528 Host\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u662f\u6bd4\u865a\u62df\u673a\u5360\u7528\u5c0f\u7684\u3002 \u800c\u4e14\u53ea\u8981\u522b\u88c5\u592a\u591a\u5e94\u7528\uff0c\u5e94\u8be5\u8fd8\u662f\u53ef\u4ee5\u5e26\u52a8\u7684\u3002 \u6c49\u8bed\u5316\u65f6\u63d0\u793a\u4e0d\u5b58\u5728\uff1f \u7384\u5b66\u95ee\u9898\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002\u4fee\u4e86\u4e2a\u758f\u5ffd\u5bfc\u81f4\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u91cd\u4e0a\u4e00\u4e0b\u8bd5\u8bd5\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 \u8fd9\u91cc\u5217\u4e3e\u4e86\u6587\u4e2d\u63d0\u5230\u7684\u94fe\u63a5\uff0c\u4ee5\u4fbf\u67e5\u9605\u3002 NOIP \u6807\u51c6\u8bc4\u6d4b\u7cfb\u7edf\u53ca\u76f8\u5173\u95ee\u9898, smart0326, 2014-05-19, \u767e\u5ea6\u6587\u5e93 WSL, \u767e\u5ea6\u767e\u79d1 Run Bash on Ubuntu on Windows, Mike Harsh, 2016-05-30, Windows Blog Windows Subsystem for Linux Documentation, MSDN NOI \u7cfb\u5217\u6d3b\u52a8\u6807\u51c6\u7ade\u8d5b\u73af\u5883, 2016-11-08, NOI \u5b98\u7f51 \u8d2d\u4e70 Ubuntu, Microsoft Store Ubuntu \u955c\u50cf\u4f7f\u7528\u5e2e\u52a9, \u6e05\u534e TUNA Ubuntu \u7684 man \u547d\u4ee4\u5e2e\u52a9\u5982\u4f55\u8bbe\u7f6e\u4e2d\u6587\u7248, Frank \u770b\u5e90\u5c71, 2017-06-09 Xming X Server for Windows, SourceForge Sudo, Wikipedia \u5ef6\u4f38\u5185\u5bb9 \u00b6 Dev on Windows with WSL\uff08\u5728 Windows \u4e0a\u7528 WSL \u4f18\u96c5\u5f00\u53d1\uff09 \u540e\u8bb0 \u00b6 \u672c\u6587\u6700\u521d\u53d1\u5e03\u4e8e \u6d1b\u8c37\u65e5\u62a5 #6 \uff0c\u73b0\u7531\u539f\u4f5c\u8005\u642c\u8fd0\u81f3\u6b64\uff0c\u6709\u5220\u6539\u3002","title":"WSL (Windows 10)"},{"location":"intro/wsl/#_1","text":"\u4f17\u6240\u5468\u77e5\uff0c\u5c3d\u7ba1\u73b0\u5728\u5927\u90e8\u5206\u5b66\u6821\u7684\u7ade\u8d5b\u7ec3\u4e60\u73af\u5883\u90fd\u662f\u6784\u5efa XP \u7b49 Windows \u7cfb\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f46\u662f\u5728 NOI \u7cfb\u5217\u8d5b\u4e2d\uff0c\u65e9\u5df2\u7528\u4e0a\u4e86 NOI Linux \u8fd9\u4e2a Ubuntu \u64cd\u4f5c\u7cfb\u7edf\u7684\u9609\u5272\u7248\u3002 NOI \u7ade\u8d5b\u7684\u73af\u5883\u8981\u6c42 \u6216\u8bb8\u5927\u5bb6\u5bf9\u81ea\u5df1 Windows \u73af\u5883\u4e0b\u7684 Dev-C++ \u7b49\u90fd\u5df2\u719f\u8bc6\uff0c\u4f46\u662f\u5f53\u573a\u666f\u7a81\u7136\u5207\u6362\u5230 Linux \u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u4e0d\u77e5\u6240\u63aa\uff1f \u300c\u60f3\u7528 Ctrl + C \u590d\u5236\uff0c\u7ed3\u679c\u9000\u51fa\u4e86\u7a0b\u5e8f\u300d \u300c\u5e73\u65f6 AC \u7684\u7a0b\u5e8f\u6a21\u677f\u5230\u4e86 Linux \u4e0a\u5c31 WA\u300d\u2026\u2026 \u5e73\u53f0\u5dee\u5f02\uff08\u8f6c\u81ea\u767e\u5ea6\u6587\u5e93\u201cNOIP \u6807\u51c6\u8bc4\u6d4b\u7cfb\u7edf\u53ca\u76f8\u5173\u95ee\u9898\u201d\uff09 \u4e3a\u4e86\u9632\u6b62\u8003\u573a\u4e0a\u51fa\u73b0\u6b64\u7c7b\u5c34\u5c2c\u60c5\u51b5\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u63d0\u524d\u719f\u6089\u4e0b Linux \u7cfb\u7edf\u7684\u64cd\u4f5c\u65b9\u6cd5\u3002 \u867d\u7136\u5728 NOI \u7684\u5b98\u7f51\u5df2\u7ecf\u653e\u51fa\u4e86 NOI Linux \u7684 ISO \u955c\u50cf\uff0c\u4f46\u662f\u5982\u679c\u8dd1\u865a\u62df\u673a\u7684\u8bdd\uff0c\u914d\u7f6e\u4e5f\u76f8\u5f53\u9ebb\u70e6\uff0c\u5305\u62ec\u6fc0\u6d3b VMware\uff0c\u7528 VMware \u88c5\u7cfb\u7edf\u5f00\u865a\u62df\u673a\u7b49\u6b65\u9aa4\uff0c\u4e14 NOI Linux \u9ed8\u8ba4\u81ea\u5e26\u56fe\u5f62\u754c\u9762\uff0c\u4e24\u4e2a\u7cfb\u7edf\u4e00\u8d77\u8fd0\u884c\u662f\u4f4e\u914d\u515a\u7684\u5669\u68a6\u3002 \u8865\u5145\u8d44\u6599\uff1a\u4f55\u4e3a Linux \u5b50\u7cfb\u7edf\uff08WSL\uff09\uff1f(via \u767e\u5ea6\u767e\u79d1) Windows Subsystem for Linux\uff08\u7b80\u79f0 WSL\uff09\u662f\u4e00\u4e2a\u4e3a\u5728 Windows 10 \u4e0a\u80fd\u591f\u539f\u751f\u8fd0\u884c Linux \u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\uff08ELF \u683c\u5f0f\uff09\u7684\u517c\u5bb9\u5c42\u3002\u5b83\u662f\u7531\u5fae\u8f6f\u4e0e Canonical \u516c\u53f8\u5408\u4f5c\u5f00\u53d1\uff0c\u76ee\u6807\u662f\u4f7f\u7eaf\u6b63\u7684 Ubuntu, OpenSUSE, Kali Linux \u548c Debian \u6620\u50cf\u80fd\u4e0b\u8f7d\u548c\u89e3\u538b\u5230\u7528\u6237\u7684\u672c\u5730\u8ba1\u7b97\u673a\uff0c\u5e76\u4e14\u6620\u50cf\u5185\u7684\u5de5\u5177\u548c\u5b9e\u7528\u5de5\u5177\u80fd\u5728\u6b64\u5b50\u7cfb\u7edf\u4e0a\u539f\u751f\u8fd0\u884c\u3002 WSL \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5fae\u8f6f\u5f00\u53d1\u7684 Linux \u517c\u5bb9\u5185\u6838\u63a5\u53e3\uff08\u4e0d\u5305\u542b Linux \u4ee3\u7801\uff09\uff0c\u6765\u81ea Linux \u7684\u7528\u6237\u6a21\u5f0f\u4e8c\u8fdb\u5236\u6587\u4ef6\u5728\u5176\u4e0a\u8fd0\u884c\u3002 \u6b64\u5b50\u7cfb\u7edf\u8d77\u6e90\u4e8e\u547d\u8fd0\u591a\u821b\u7684 Astoria \u9879\u76ee\uff0c\u5176\u76ee\u7684\u662f\u5141\u8bb8 Android \u5e94\u7528\u8fd0\u884c\u5728 Windows 10 Mobile \u4e0a\u3002\u6b64\u529f\u80fd\u7ec4\u4ef6\u4ece Windows 10 Insider Preview build 14316 \u5f00\u59cb\u53ef\u7528\u3002","title":"\u5f15\u8a00"},{"location":"intro/wsl/#_2","text":"\u9996\u5148\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u6700\u65b0\u7684 Windows 10 \u64cd\u4f5c\u7cfb\u7edf\uff0c\u8fd9\u70b9\u4e0d\u5fc5\u591a\u8bf4\u3002 \u5176\u6b21\uff0c\u4f60\u9700\u8981\u914d\u7f6e\u4e00\u4e0b\u5f00\u53d1\u4eba\u5458\u6a21\u5f0f\u73af\u5883\u3002 \u8bbe\u7f6e -> \u66f4\u65b0\u4e0e\u5b89\u5168 -> \u5f00\u53d1\u4eba\u5458\u6a21\u5f0f\u6846\u9009 -> \u662f \u6765\uff0c\u8ddf\u7740\u7bad\u5934\u8d70 \u63a7\u5236\u9762\u677f ->\u7a0b\u5e8f ->\u542f\u7528\u548c\u5173\u95ed Windows \u529f\u80fd ->\u6846\u9009 \u201c\u9002\u7528\u4e8e Linux \u7684 Windows \u5b50\u7cfb\u7edf\u201d-> \u786e\u5b9a ->\u91cd\u542f \u7ed9\u7cfb\u7edf\u76d8\u7559\u4e0b\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u6bd5\u7adf\u88c5\u597d\u7684 Linux \u6ca1\u6cd5\u8fc1\u79fb\u3002 \u8fd9\u6b21\u6f14\u793a\u6211\u4eec\u4f1a\u5b89\u88c5 Ubuntu\uff0c\u56e0\u4e3a NOI Linux \u6b63\u662f Ubuntu \u7684\u4fee\u6539\u7248\u3002 \u53ea\u8981\u5b66\u4f1a\u4e86\u65b9\u6cd5\uff0c\u4f60\u4e5f\u53ef\u7167\u846b\u82a6\u753b\u74e2\uff0c\u5b89\u88c5 Windows \u5e94\u7528\u5546\u5e97\u4e2d\u7684\u5176\u4ed6\u5b50\u7cfb\u7edf\u3002","title":"\u51c6\u5907"},{"location":"intro/wsl/#_3","text":"Warning Windows 10 \u5546\u5e97\u7684\u7b2c\u4e00\u4e2a Ubuntu \u968f\u7740 Ubuntu \u7684\u66f4\u65b0\u800c\u66f4\u65b0\uff0c\u56e0\u6b64\u5185\u5bb9\u53ef\u80fd\u4f1a\u6709\u6240\u6539\u53d8\u3002 \u53ef\u4f7f\u7528 sudo lsb_release -a \u67e5\u770b\u81ea\u5df1\u7684 Ubuntu \u7248\u672c\u3002 \u4e5f\u53ef\u5b89\u88c5\u5e26\u6709\u7248\u672c\u53f7\u7684\u65e7 Linux \u7248\u672c\uff08\u5982\u672c\u6b21\u6f14\u793a\u4f7f\u7528\u4e86 16.04 \uff09\u3002 \u5b89\u88c5\u5b8c\u540e\uff0c\u6253\u5f00 Ubuntu\uff0c\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u8ba9\u5176\u81ea\u5df1\u914d\u7f6e\uff0c\u4e0d\u4e45\u5c31\u4f1a\u63d0\u793a\u4f60\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \uff08\u8fd9\u91cc\u770b\u4f60\u559c\u597d\uff0c\u63a8\u8350\u8bbe\u7f6e\u77ed\u70b9\uff0c\u6bd5\u7adf \u672c\u5730\u73af\u5883\u4e0d\u6015\u653b\u51fb \uff09 Linux \u533a\u5206\u5927\u5c0f\u5199\uff01 \u8fd9\u6837\u4e4b\u540e\uff0c\u4e00\u4e2a\u7eaf\u51c0\u7684 Ubuntu \u7cfb\u7edf\u5b89\u88c5\u5b8c\u6210\u4e86\uff01","title":"\u5f00\u641e"},{"location":"intro/wsl/#_4","text":"\u4ee5\u4e0b\u547d\u4ee4\u5747\u53ef\u76f4\u63a5\u53f3\u952e\u590d\u5236\u7c98\u8d34\u8fdb\u7a97\u53e3\u54e6\uff01 \u6b63\u5982\u56fe\u7247\u6240\u793a\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u7eaf\u51c0\u5230\u8fde\u4e2a\u7f16\u8bd1\u5668\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u8fd9\u4e00\u8282\u6765\u770b\u770b\u57fa\u7840\u7684\u73af\u5883\u914d\u7f6e\u3002","title":"\u57fa\u7840\u914d\u7f6e"},{"location":"intro/wsl/#_5","text":"Ubuntu \u9ed8\u8ba4\u7684\u8f6f\u4ef6\u6e90\u5728\u56fd\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u6362\u4e3a\u56fd\u5185\u7684\u52a0\u5feb\u901f\u5ea6\uff0c\u5982 \u6e05\u534e TUNA \u7684\u8f6f\u4ef6\u6e90 \u3002 \u53ef\u4ee5\u8bbf\u95ee TUNA \u7684\u9875\u9762 \u6765\u83b7\u5f97\u56fd\u5185\u6e90\u7684\u4fe1\u606f\u3002 Warning \u8bf7\u5728\u9875\u9762\u4e2d\u5bfb\u627e\u4e0e\u81ea\u5df1\u7cfb\u7edf\u7248\u672c\u76f8\u914d\u7684\u6e90\uff08\u53ef\u4f7f\u7528 sudo lsb_release -a \u67e5\u770b\uff0c\u5177\u4f53\u8be6\u89c1 0x03 \uff09 \u9664\u975e\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\uff0c\u5426\u5219\u4e0d\u8981\u4f7f\u7528\u4e0e\u81ea\u5df1\u7684\u7cfb\u7edf\u7248\u672c\u4e0d\u5339\u914d\u7684\u6e90\uff01** \u4f7f\u7528\u7684\u547d\u4ee4 1 2 3 4 5 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak sudo vim /etc/apt/sources.list # \uff08\u6309 i \u4e4b\u540e\u5c06\u4e0a\u6587\u7684\u6e90\u53f3\u952e\u7c98\u8d34\u8fdb\u53bb\uff0c\u7f16\u8f91\u5b8c\u540e\u6309 Esc\uff0c\u518d\u8f93\u5165 :wq \u548c\u56de\u8f66\uff09 sudo apt update sudo apt upgrade -y","title":"\u66f4\u6362\u4e3a\u56fd\u5185\u8f6f\u4ef6\u6e90"},{"location":"intro/wsl/#_6","text":"1 2 3 4 5 6 7 8 9 sudo apt install language-pack-zh-han* -y sudo locale-gen zh_CN.GB18030 && sudo locale-gen zh_CN.GB2312 && sudo locale-gen zh_CN.UTF8 # \u4e2d\u6587\u5b57\u4f53\uff0c\u522b\u5fd8\u4e86\u540c\u610f EULA sudo apt install fontconfig -y sudo apt install ttf-mscorefonts-installer -y # \u4e0b\u9762\u7684\u518d\u6267\u884c\u4e00\u904d\u4ee5\u9632\u4e07\u4e00 sudo apt install -y --force-yes --no-install-recommends fonts-wqy-microhei sudo apt install -y --force-yes --no-install-recommends ttf-wqy-zenhei sudo dpkg-reconfigure locales \u4f7f\u7528 sudo dpkg-reconfigure locales \u8fdb\u5165\u83dc\u5355\uff0c\u6309\u7a7a\u683c\u9009\u62e9\u5e26 zh_CN \u7684\u9009\u9879\uff0c\u9009\u5b8c\u540e\u56de\u8f66\uff0c\u4e0b\u4e00\u4e2a\u83dc\u5355\u4e2d\u9009 zh_CN.UTF-8 \u6253\u56de\u8f66\u3002 \u4e4b\u540e\u5173\u4e0a Ubuntu \u91cd\u5f00\u4e00\u904d\u767b\u5f55\uff0c\u662f\u4e0d\u662f\u53d8\u4e2d\u6587\u4e86\uff1f \u518d\u4f9d\u6b21\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\uff0c\u628a man \u5e2e\u52a9\u9875\u66ff\u6362\u4e3a\u4e2d\u6587\uff1a via 1 2 3 4 sudo apt install manpages-zh sudo vi /etc/manpath.config :1, $s #/usr/share/man#/usr/share/man/zh_CN#g :wq \u53ef\u4ee5\u7528 man help \u6d4b\u8bd5\u4e0b\u3002","title":"\u5b89\u88c5\u4e2d\u6587\u73af\u5883"},{"location":"intro/wsl/#_7","text":"1 2 3 4 5 sudo apt install build-essential vim ddd gdb fpc emacs gedit anjuta lazarus -y wget http://download.noi.cn/T/noi/GUIDE-1.0.2-ubuntu.tar tar -xvf GUIDE-1.0.2-ubuntu.tar cd GUIDE-1.0.2-ubuntu chmod +x install.sh && ./install.sh \u8fd9\u662f\u57fa\u7840\u7684 + NOI \u5b98\u65b9\u8981\u6c42\u73af\u5883\uff0c\u5982\u6709\u9700\u8981\u53ef\u4ee5\u7528 apt install \u7a0b\u5e8f\u540d \u6765\u5b89\u88c5\u522b\u7684\u3002 \u82e5\u60f3\u5b89\u88c5\u5176\u4ed6\u7248\u672c\u53ef\u4ee5\u53c2\u8003\u4e0b \u8fd9\u4e2a \u6765\u4e2a\u7a0b\u5e8f\u73a9\u73a9\uff1a 1 2 3 4 $ vim cpuid.cpp $ g++ -Wall cpuid.cpp -o cpuid $ ./cpuid AMD Ryzen 5 1400 Quad-Core Processor Tips\uff1aLinux \u73af\u5883\u4e0b\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4e0d\u5e26\u6269\u5c55\u540d\uff0c\u5b9e\u73b0\u65b9\u5f0f\u770b\u4e0a\u65b9\u547d\u4ee4\u884c","title":"\u5b89\u88c5\u7f16\u8bd1\u73af\u5883"},{"location":"intro/wsl/#_8","text":"","title":"\u8fdb\u9636\u64cd\u4f5c"},{"location":"intro/wsl/#_9","text":"\u63a8\u8350\u56fe\u5f62\u73af\u5883\u7528 xfce4\uff0c\u4e0d\u81c3\u80bf\u3002 1 2 3 sudo apt install xfce4 tightvncserver -y # \u6216\u4f7f\u7528 sudo apt install xubuntu-desktop -y # xubuntu \u5b89\u88c5\u7684\u8f6f\u4ef6\u591a\uff0c\u57fa\u7840\u73af\u5883\u53ef\u7528\u7b2c\u4e00\u79cd \u56fe\u5f62\u73af\u5883\u662f\u4e2a\u5927\u5934\uff0c\u56e0\u6b64\u8981\u591a\u7b49\u4f1a\uff0c\u9759\u9759\u7b49\u5f85\u4e0b\u8f7d\u89e3\u5305\u3002 \u4e0b\u9762\u914d\u7f6e xrdp\uff1a 1 2 3 sudo apt install xrdp -y echo \"xfce4-session\" >~/.xsession sudo service xrdp restart \u4e3a\u4e86\u9632\u6b62\u548c\u4f60\u8ba1\u7b97\u673a\u672c\u6765\u5e26\u7684\u8fdc\u7a0b\u684c\u9762\u51b2\u7a81\uff0c\u6700\u597d\u6362\u4e00\u4e0b\u7aef\u53e3\u3002 \u4e0d\u6362\u7aef\u53e3\u7684\u7ed3\u679c \u8fd0\u884c\u547d\u4ee4 vim /etc/xrdp/xrdp.ini \uff0c\u628a port=3389 \u6539\u4e3a\u522b\u7684\uff08\u5982 port=3390 \uff09\uff0c\u7136\u540e\u4fdd\u5b58\u5373\u53ef\u3002 \u8fd0\u884c sudo service xrdp restart \uff0c\u7136\u540e\u53bb\u5f00\u59cb\u83dc\u5355\uff0c\u7528 localhost: \u4f60\u914d\u7f6e\u7684\u7aef\u53e3 \u6765\u8bbf\u95ee\u3002","title":"\u5b89\u88c5\u56fe\u5f62\u73af\u5883\uff0c\u5e76\u4f7f\u7528\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5"},{"location":"intro/wsl/#xming","text":"\u6709\u7f51\u53cb\u8bf4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528 Xming \u8fde\u63a5\uff0c\u90a3\u6211\u4eec\u5c31\u6765\u7814\u7a76\u4e00\u4e0b\u3002","title":"\u8865\u5145\uff1a\u4f7f\u7528 Xming \u8fde\u63a5"},{"location":"intro/wsl/#xterm","text":"\u6211\u4eec\u8fdb\u5165 Ubuntu \u73af\u5883\uff0c\u5b89\u88c5 xterm\uff1a 1 sudo apt-get install xterm -y","title":"\u5ba2\u6237\u7aef\uff1a\u5b89\u88c5 Xterm"},{"location":"intro/wsl/#xming-server","text":"\u53bb https://sourceforge.net/projects/xming/ \u4e0b\u8f7d\u6700\u65b0\u7684 Xming Server\uff0c\u7136\u540e\u4e00\u8def\u5b89\u88c5\uff1a \u5982\u679c\u4f60\u628a Launch Xming \u6846\u70b9\u6389\u4e86\uff0c\u8bb0\u5f97\u53bb\u5f00\u59cb\u83dc\u5355\u518d\u6253\u5f00\uff1a \u4e4b\u540e\u518d\u56de\u5230 Ubuntu\uff0c\u952e\u5165\u5982\u4e0b\u6307\u4ee4\uff1a 1 DISPLAY = :0 xterm Duang\uff01 \u4e0d\u8fc7\u8c8c\u4f3c\u53ea\u652f\u6301\u547d\u4ee4\u884c\u2026\u2026 \u8fd9\u65f6\u4e0a\u4e00\u79cd\u65b9\u6cd5\u7684\u4f18\u52bf\u5c31\u663e\u800c\u6613\u89c1\u4e86 \u5982\u679c\u4f60\u548c\u6211\u4e00\u6837\u4f7f\u7528\u4e86 xfce4\uff0c\u5728\u5f39\u51fa\u7684\u7a97\u53e3\u4e2d\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6fc0\u6d3b xfce4\uff1a 1 xfce4-session \u4e0d\u8fc7\u8fd9\u662f\u4ec0\u4e48\u6548\u679c...... \uff08\u5728 Xming \u4e2d\u4f7f\u7528 Ctrl + C \u5c31\u53ef\u4ee5\u9000\u51fa\u8fd9\u4e2a\u9b3c\u755c\u754c\u9762\uff09 \u8fbe\u6210\u6210\u5c31\uff1aWindows+Linux \u4e8c\u5408\u4e00 \u611f\u53d7\u4e00\u4e0b\u4e24\u4e2a\u7248\u672c\u878d\u5408\u7684\u611f\u89c9\uff1a","title":"\u670d\u52a1\u7aef\uff1a\u4e0b\u8f7d Xming Server"},{"location":"intro/wsl/#windows","text":"\u786c\u76d8\u5206\u533a\u4f5c\u4e3a\u6587\u4ef6\u5939\u5728 /mnt/ \u91cc\u653e\u7740\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4ea4\u4e92\uff0c\u6bd4\u5982\u8bf4\u76f4\u63a5\u7f16\u8bd1\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6216\u8005\u5f80 Ubuntu \u91cc\u4f20\u6587\u4ef6\u4ec0\u4e48\u7684...... \u5177\u4f53\u6f14\u793a\uff1a \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e9b Windows\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\uff09\u5efa\u4e0d\u4e86\u7684\u6587\u4ef6\uff0c\u4f8b\u5982\u5e26\u70b9\u6587\u4ef6\u5939 \u4e71\u7801\u662f\u56e0\u4e3a\u6211\u7528\u7684\u9884\u89c8\u4f53\u9a8c\u7cfb\u7edf\u2026\u2026\u4e0d\u8fc7\u7528\u6b63\u5f0f\u7248\u4e5f\u53ef\u4ee5\u4e86\uff01","title":"\u4e0e Windows \u5185\u539f\u786c\u76d8\u5206\u533a\u4ea4\u4e92"},{"location":"intro/wsl/#faq","text":"\u5982\u4f55\u5728\u5b50\u7cfb\u7edf\u4e0b\u8fdb\u884c xxx\uff1f \u8be5\u600e\u4e48\u7528\u600e\u4e48\u7528\uff0c\u53ef\u4ee5\u7528\u81ea\u5e26\u547d\u4ee4\u884c\uff0c\u5b9e\u5728\u4e0d\u884c\u53c2\u8003\u6559\u7a0b\u5524\u9192\u56fe\u5f62\u754c\u9762\u3002 \u6bd4\u5982\u8bf4 vim\uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u952e\u5165 man vim \uff0c\u4f1a\u7ed9\u51fa\u4e00\u4efd\u8be6\u5c3d\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u4ea6\u53ef\u4f7f\u7528 vim --help \u3002 \u5360\u7528\u91cf\u5927\uff1f Sorry\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u548c Windows 10 \u5171\u7528 Host\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u662f\u6bd4\u865a\u62df\u673a\u5360\u7528\u5c0f\u7684\u3002 \u800c\u4e14\u53ea\u8981\u522b\u88c5\u592a\u591a\u5e94\u7528\uff0c\u5e94\u8be5\u8fd8\u662f\u53ef\u4ee5\u5e26\u52a8\u7684\u3002 \u6c49\u8bed\u5316\u65f6\u63d0\u793a\u4e0d\u5b58\u5728\uff1f \u7384\u5b66\u95ee\u9898\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002\u4fee\u4e86\u4e2a\u758f\u5ffd\u5bfc\u81f4\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u91cd\u4e0a\u4e00\u4e0b\u8bd5\u8bd5\u3002","title":"FAQ"},{"location":"intro/wsl/#_10","text":"\u8fd9\u91cc\u5217\u4e3e\u4e86\u6587\u4e2d\u63d0\u5230\u7684\u94fe\u63a5\uff0c\u4ee5\u4fbf\u67e5\u9605\u3002 NOIP \u6807\u51c6\u8bc4\u6d4b\u7cfb\u7edf\u53ca\u76f8\u5173\u95ee\u9898, smart0326, 2014-05-19, \u767e\u5ea6\u6587\u5e93 WSL, \u767e\u5ea6\u767e\u79d1 Run Bash on Ubuntu on Windows, Mike Harsh, 2016-05-30, Windows Blog Windows Subsystem for Linux Documentation, MSDN NOI \u7cfb\u5217\u6d3b\u52a8\u6807\u51c6\u7ade\u8d5b\u73af\u5883, 2016-11-08, NOI \u5b98\u7f51 \u8d2d\u4e70 Ubuntu, Microsoft Store Ubuntu \u955c\u50cf\u4f7f\u7528\u5e2e\u52a9, \u6e05\u534e TUNA Ubuntu \u7684 man \u547d\u4ee4\u5e2e\u52a9\u5982\u4f55\u8bbe\u7f6e\u4e2d\u6587\u7248, Frank \u770b\u5e90\u5c71, 2017-06-09 Xming X Server for Windows, SourceForge Sudo, Wikipedia","title":"\u53c2\u8003\u8d44\u6599"},{"location":"intro/wsl/#_11","text":"Dev on Windows with WSL\uff08\u5728 Windows \u4e0a\u7528 WSL \u4f18\u96c5\u5f00\u53d1\uff09","title":"\u5ef6\u4f38\u5185\u5bb9"},{"location":"intro/wsl/#_12","text":"\u672c\u6587\u6700\u521d\u53d1\u5e03\u4e8e \u6d1b\u8c37\u65e5\u62a5 #6 \uff0c\u73b0\u7531\u539f\u4f5c\u8005\u642c\u8fd0\u81f3\u6b64\uff0c\u6709\u5220\u6539\u3002","title":"\u540e\u8bb0"},{"location":"math/","text":"\u6570\u5b66\u90e8\u5206\u7b80\u4ecb \u00b6 \u5728 OI/ACM \u7684\u5404\u79cd\u6bd4\u8d5b\u4e2d\uff0c\u5e38\u5e38\u4f1a\u6709\u6570\u5b66\u9898\u7684\u51fa\u73b0\u3002 \u8fd9\u4e9b\u6570\u5b66\u9898\u4ee5\u6570\u8bba\u3001\u6392\u5217\u7ec4\u5408\u3001\u6982\u7387\u671f\u671b\u3001\u591a\u9879\u5f0f\u4e3a\u4ee3\u8868\uff0c\u53ef\u4ee5\u51fa\u73b0\u5728\u51e0\u4e4e\u4efb\u4f55\u7c7b\u522b\u7684\u9898\u76ee\u4e2d \u4e3e\u51e0\u4e2a\u6817\u5b50 \uff1a \u591a\u9879\u5f0f\u53ef\u4ee5\u4f18\u5316\u5377\u79ef\u5f62\u5f0f\u7684\u80cc\u5305\uff0c\u53ef\u4ee5\u505a\u4e00\u4e9b\u5b57\u7b26\u4e32\u9898 \u5f88\u591a DP \u7c7b\u578b\u7684\u9898\u90fd\u53ef\u4ee5\u7ed3\u5408\u6392\u5217\u7ec4\u5408 / \u6982\u7387\u671f\u671b\u3002 \u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5728\u672c\u90e8\u5206\u627e\u5230\u7684\u77e5\u8bc6 \uff08\u90e8\u5206\u672a\u5b8c\u6210\uff0c\u5f85\u8865\u5145\uff09 \u00b6 \u8fdb\u5236\u76f8\u5173 \u4f4d\u8fd0\u7b97 \u2014\u2014 \u4e8c\u8fdb\u5236\u4e0b\u7684\u6309\u4f4d\u8fd0\u7b97 \u9ad8\u7cbe\u5ea6 \u2014\u2014 \u5f53\u8bed\u8a00\u53d8\u91cf\u7c7b\u578b\u4e0d\u8db3\u4ee5\u8868\u8fbe\u9700\u8981\u8868\u8fbe\u7684\u6570\u65f6\u7684\u5904\u7406\u65b9\u6cd5 \u6574\u9664\u6027\u8d28 \uff08\u6570\u8bba\uff09 \u540c\u4f59\u76f8\u5173 \uff08\u6570\u8bba\uff09 \u9ad8\u65af\u6d88\u5143 \uff08\u77e9\u9635 / \u6982\u7387\u671f\u671b\uff09 \u6570\u8bba\u53cd\u6f14 \u675c\u6559\u7b5b / \u6d32\u9601\u7b5b \u591a\u9879\u5f0f \uff08FFT, NTT, FWT, \u62c9\u683c\u6717\u65e5\u5dee\u503c\uff09 \u6392\u5217\u7ec4\u5408 (Lucas, Catalan) \u6982\u7387\u4e0e\u671f\u671b \u7f6e\u6362 \u7ebf\u6027\u89c4\u5212 \u7ebf\u6027\u57fa OI \u4e2d\u7684\u6570\u5b66\u4ee5\u9ad8\u4e2d\uff0c\u5927\u5b66\u7684\u6570\u5b66\u4e3a\u57fa\u7840\uff0c\u8003\u5bdf\u9009\u624b\u5bf9\u6570\u5b66\u77e5\u8bc6\u7684\u638c\u63e1\uff0c\u5229\u7528\u8ba1\u7b97\u673a\u7684\u8ba1\u7b97\u80fd\u529b\u6765\u89e3\u51b3\u95ee\u9898\u3002 NOIP \u4e2d\u6709\u53ef\u80fd\u4f1a\u8003\u5bdf\u7684\u77e5\u8bc6\u70b9 \u00b6 \u7136\u800c NOIP \u53ef\u80fd\u8003\u5bdf\u66f4\u591a\u7684\u77e5\u8bc6\u70b9\uff0c\u8fd9\u91cc\u53ea\u662f\u5229\u7528\u4e4b\u524d\u7684\u9898\u603b\u7ed3\u51fa\u6765\u7684\uff0c\u8003\u8fc7\u6216\u8005\u8003\u7684\u6982\u7387\u6bd4\u8f83\u5927\u7684\u77e5\u8bc6\u70b9\u3002 NOIP \u5bf9\u6570\u5b66\u7684\u8003\u5bdf\u8fd8\u5904\u5728\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u8303\u56f4\u3002 \u8fdb\u5236\u76f8\u5173 \u2014\u2014 \u901a\u5e38\u662f\u5229\u7528\u8fdb\u5236\u4f18\u5316\u4e00\u4e9b\u95ee\u9898 \u4f4d\u8fd0\u7b97 \u2014\u2014 \u72b6\u538b\u5e38\u7528 \u9ad8\u7cbe\u5ea6 \u2014\u2014 \u4e0d\u5305\u62ec\u9700\u8981\u5229\u7528\u591a\u9879\u5f0f\u7684\u9ad8\u7cbe\u5ea6 \u6574\u9664\u6027\u8d28 \u2014\u2014 \\gcd \\gcd \uff0c\u6b27\u62c9\u51fd\u6570\uff0c\u8d39\u9a6c\u5c0f\u5b9a\u7406 \u540c\u4f59\u76f8\u5173 \u2014\u2014 exgcd exgcd \uff0c\u9006\u5143\uff0c\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u6982\u7387\u671f\u671b \u2014\u2014 \u6982\u7387 DP\uff0c\u4ee5\u53ca\u6709\u53ef\u80fd\u7528\u5230\u9ad8\u65af\u6d88\u5143\u89e3\u51b3\u7684\u6982\u7387 DP \u6392\u5217\u7ec4\u5408 \u2014\u2014 \u6768\u8f89\u4e09\u89d2\uff0c\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u5362\u5361\u65af\u5b9a\u7406\uff0c\u5361\u7279\u5170\u6570","title":"\u6570\u5b66\u90e8\u5206\u7b80\u4ecb"},{"location":"math/#_1","text":"\u5728 OI/ACM \u7684\u5404\u79cd\u6bd4\u8d5b\u4e2d\uff0c\u5e38\u5e38\u4f1a\u6709\u6570\u5b66\u9898\u7684\u51fa\u73b0\u3002 \u8fd9\u4e9b\u6570\u5b66\u9898\u4ee5\u6570\u8bba\u3001\u6392\u5217\u7ec4\u5408\u3001\u6982\u7387\u671f\u671b\u3001\u591a\u9879\u5f0f\u4e3a\u4ee3\u8868\uff0c\u53ef\u4ee5\u51fa\u73b0\u5728\u51e0\u4e4e\u4efb\u4f55\u7c7b\u522b\u7684\u9898\u76ee\u4e2d \u4e3e\u51e0\u4e2a\u6817\u5b50 \uff1a \u591a\u9879\u5f0f\u53ef\u4ee5\u4f18\u5316\u5377\u79ef\u5f62\u5f0f\u7684\u80cc\u5305\uff0c\u53ef\u4ee5\u505a\u4e00\u4e9b\u5b57\u7b26\u4e32\u9898 \u5f88\u591a DP \u7c7b\u578b\u7684\u9898\u90fd\u53ef\u4ee5\u7ed3\u5408\u6392\u5217\u7ec4\u5408 / \u6982\u7387\u671f\u671b\u3002","title":"\u6570\u5b66\u90e8\u5206\u7b80\u4ecb"},{"location":"math/#_2","text":"\u8fdb\u5236\u76f8\u5173 \u4f4d\u8fd0\u7b97 \u2014\u2014 \u4e8c\u8fdb\u5236\u4e0b\u7684\u6309\u4f4d\u8fd0\u7b97 \u9ad8\u7cbe\u5ea6 \u2014\u2014 \u5f53\u8bed\u8a00\u53d8\u91cf\u7c7b\u578b\u4e0d\u8db3\u4ee5\u8868\u8fbe\u9700\u8981\u8868\u8fbe\u7684\u6570\u65f6\u7684\u5904\u7406\u65b9\u6cd5 \u6574\u9664\u6027\u8d28 \uff08\u6570\u8bba\uff09 \u540c\u4f59\u76f8\u5173 \uff08\u6570\u8bba\uff09 \u9ad8\u65af\u6d88\u5143 \uff08\u77e9\u9635 / \u6982\u7387\u671f\u671b\uff09 \u6570\u8bba\u53cd\u6f14 \u675c\u6559\u7b5b / \u6d32\u9601\u7b5b \u591a\u9879\u5f0f \uff08FFT, NTT, FWT, \u62c9\u683c\u6717\u65e5\u5dee\u503c\uff09 \u6392\u5217\u7ec4\u5408 (Lucas, Catalan) \u6982\u7387\u4e0e\u671f\u671b \u7f6e\u6362 \u7ebf\u6027\u89c4\u5212 \u7ebf\u6027\u57fa OI \u4e2d\u7684\u6570\u5b66\u4ee5\u9ad8\u4e2d\uff0c\u5927\u5b66\u7684\u6570\u5b66\u4e3a\u57fa\u7840\uff0c\u8003\u5bdf\u9009\u624b\u5bf9\u6570\u5b66\u77e5\u8bc6\u7684\u638c\u63e1\uff0c\u5229\u7528\u8ba1\u7b97\u673a\u7684\u8ba1\u7b97\u80fd\u529b\u6765\u89e3\u51b3\u95ee\u9898\u3002","title":"\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5728\u672c\u90e8\u5206\u627e\u5230\u7684\u77e5\u8bc6 \uff08\u90e8\u5206\u672a\u5b8c\u6210\uff0c\u5f85\u8865\u5145\uff09"},{"location":"math/#noip","text":"\u7136\u800c NOIP \u53ef\u80fd\u8003\u5bdf\u66f4\u591a\u7684\u77e5\u8bc6\u70b9\uff0c\u8fd9\u91cc\u53ea\u662f\u5229\u7528\u4e4b\u524d\u7684\u9898\u603b\u7ed3\u51fa\u6765\u7684\uff0c\u8003\u8fc7\u6216\u8005\u8003\u7684\u6982\u7387\u6bd4\u8f83\u5927\u7684\u77e5\u8bc6\u70b9\u3002 NOIP \u5bf9\u6570\u5b66\u7684\u8003\u5bdf\u8fd8\u5904\u5728\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u8303\u56f4\u3002 \u8fdb\u5236\u76f8\u5173 \u2014\u2014 \u901a\u5e38\u662f\u5229\u7528\u8fdb\u5236\u4f18\u5316\u4e00\u4e9b\u95ee\u9898 \u4f4d\u8fd0\u7b97 \u2014\u2014 \u72b6\u538b\u5e38\u7528 \u9ad8\u7cbe\u5ea6 \u2014\u2014 \u4e0d\u5305\u62ec\u9700\u8981\u5229\u7528\u591a\u9879\u5f0f\u7684\u9ad8\u7cbe\u5ea6 \u6574\u9664\u6027\u8d28 \u2014\u2014 \\gcd \\gcd \uff0c\u6b27\u62c9\u51fd\u6570\uff0c\u8d39\u9a6c\u5c0f\u5b9a\u7406 \u540c\u4f59\u76f8\u5173 \u2014\u2014 exgcd exgcd \uff0c\u9006\u5143\uff0c\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u6982\u7387\u671f\u671b \u2014\u2014 \u6982\u7387 DP\uff0c\u4ee5\u53ca\u6709\u53ef\u80fd\u7528\u5230\u9ad8\u65af\u6d88\u5143\u89e3\u51b3\u7684\u6982\u7387 DP \u6392\u5217\u7ec4\u5408 \u2014\u2014 \u6768\u8f89\u4e09\u89d2\uff0c\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u5362\u5361\u65af\u5b9a\u7406\uff0c\u5361\u7279\u5170\u6570","title":"NOIP \u4e2d\u6709\u53ef\u80fd\u4f1a\u8003\u5bdf\u7684\u77e5\u8bc6\u70b9"},{"location":"math/base/","text":"\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u9664\u4e86\u4e8c\u8fdb\u5236\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u8fd8\u6709\u516b\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u3002 \u4e8c\u8fdb\u5236 \u00b6 \u4e8c\u8fdb\u5236\u662f\u8ba1\u7b97\u673a\u5185\u90e8\u8fd0\u7b97\u4e2d\u91c7\u7528\u7684\u8fdb\u5236\uff0c\u5728\u8fd9\u6837\u7684\u8fdb\u5236\u7cfb\u7edf\u4e0b\uff0c\u53ea\u6709 0,1 0,1 \u4e24\u4e2a\u6570\u5b57\uff0c\u8ba1\u7b97\u673a\u5185\u90e8\u7684\u6240\u6709\u8fd0\u7b97\uff08\u5305\u62ec\u4f4d\u8fd0\u7b97\uff09\u90fd\u662f\u5728\u4e8c\u8fdb\u5236\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u3002 \u4f46\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u6570\u5b57\u4f1a\u8ba9\u6570\u5b57\u8fc7\u957f\uff0c\u56e0\u6b64\u4e3a\u4e86\u65b9\u4fbf\u8868\u793a\u7684\u9700\u8981\uff0c\u901a\u5e38\u4f1a\u628a\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u516b\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u8868\u793a\u3002 \u516b\u8fdb\u5236 \u00b6 \u5728\u516b\u8fdb\u5236\u4e0b\uff0c\u6709 0,1,2,3,4,5,6,7 0,1,2,3,4,5,6,7 \u516b\u4e2a\u6570\u5b57\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u516b\u8fdb\u5236\u6570\u4ee5 oxx \uff08\u5176\u4e2d o \u4e3a\u516b\u8fdb\u5236\u7684\u524d\u7f00\uff0c xx \u4ee3\u8868\u516b\u8fdb\u5236\u6570\uff09\u7684\u5f62\u5f0f\u6765\u8868\u793a\u3002 \u5341\u516d\u8fdb\u5236 \u00b6 \u5728\u5341\u516d\u8fdb\u5236\u4e0b\uff0c\u6709 0,1,2,3,4,5,6,7,8,9,A(10),B(11),C(12),D(13),E(14),F(15) 0,1,2,3,4,5,6,7,8,9,A(10),B(11),C(12),D(13),E(14),F(15) \u5341\u516d\u4e2a\u6570\u5b57\u3002 \u5341\u516d\u8fdb\u5236\u4e0e\u4e8c\u8fdb\u5236\u76f8\u6bd4\uff0c\u6700\u5927\u7684\u4f18\u70b9\u5c31\u662f\u8868\u793a\u7684\u6570\u5b57\u957f\u5ea6\u8f83\u77ed\uff0c\u4e00\u4f4d\u5341\u516d\u8fdb\u5236\u6570\u53ef\u4ee5\u8868\u793a 4 \u4f4d\u4e8c\u8fdb\u5236\u6570\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5341\u516d\u8fdb\u5236\u6570\u4ee5 0xdbf \uff08\u5176\u4e2d 0x \u4e3a\u5341\u516d\u8fdb\u5236\u6570\u7684\u524d\u7f00\uff09\u7684\u5f62\u5f0f\u6765\u8868\u793a\u3002 \u8fdb\u5236\u95f4\u7684\u76f8\u4e92\u8f6c\u5316 \u00b6 \u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 / \u516b\u8fdb\u5236 / \u5341\u516d\u8fdb\u5236 \u00b6 \u8fd9\u91cc\u4ee5\u4e8c\u8fdb\u5236\u4e3a\u4f8b\u6765\u6f14\u793a\uff0c\u5176\u4ed6\u8fdb\u5236\u7684\u539f\u7406\u4e0e\u5176\u7c7b\u4f3c\u3002 \u6574\u6570\u90e8\u5206\uff0c\u628a\u5341\u8fdb\u5236\u6570\u4e0d\u65ad\u6267\u884c\u9664 2 \u64cd\u4f5c\uff0c\u76f4\u81f3\u5546\u6570\u4e3a 0\u3002\u8bfb\u4f59\u6570\u4ece\u4e0b\u8bfb\u5230\u4e0a\uff0c\u5373\u662f\u4e8c\u8fdb\u5236\u7684\u6574\u6570\u90e8\u5206\u6570\u5b57\u3002 \u5c0f\u6570\u90e8\u5206\uff0c\u5219\u7528\u5176\u4e58 2\uff0c\u53d6\u5176\u6574\u6570\u90e8\u5206\u7684\u7ed3\u679c\uff0c\u518d\u7528\u8ba1\u7b97\u540e\u7684\u5c0f\u6570\u90e8\u5206\u4f9d\u6b64\u91cd\u590d\u8ba1\u7b97\uff0c\u7b97\u5230\u5c0f\u6570\u90e8\u5206\u5168\u4e3a 0 \u4e3a\u6b62\uff0c\u4e4b\u540e\u4ece\u4e0a\u5230\u4e0b\uff0c\u8bfb\u6240\u6709\u8ba1\u7b97\u540e\u6574\u6570\u90e8\u5206\u7684\u6570\u5b57\uff0c\u5373\u4e3a\u4e8c\u8fdb\u5236\u7684\u5c0f\u6570\u90e8\u5206\u6570\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 \u5c0633.25\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u6570 \u6574\u6570\u90e8\u5206\uff1a 33/2=16 ......1 16/2=8 ......0 8/2=4 ......0 4/2=2 ......0 2/2=1 ......0 1/2=0 ......1 \u5c0f\u6570\u90e8\u5206\uff1a 0.25*2=0.5 0 0.5*2=1 1 \u5373 33.25 = (100001.01)_2 33.25 = (100001.01)_2 \u4e8c\u8fdb\u5236 / \u516b\u8fdb\u5236 / \u5341\u516d\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236 \u00b6 \u8fd8\u662f\u4ee5\u4e8c\u8fdb\u5236\u4e3a\u4f8b\u3002 \u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6570\uff0c\u53ea\u9700\u5c06\u6bcf\u4e2a\u4f4d\u7684\u503c\uff0c\u4e58\u4ee5 2^i 2^i \u6b21\u5373\u53ef\uff0c\u5176\u4e2d i i \u4e3a\u5f53\u524d\u4f4d\u7684\u4f4d\u6570\uff0c\u4e2a\u4f4d\u7684\u4f4d\u6570\u4e3a 0\u3002 1 2 3 \u5c0611010.01(2)\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6570 11010.01(2)=1*2^4+1*2^3+0*2^2+1*2^1+0*2^0+0*2^(-1)+1*2(-2) =26.25 \u5373 (11010)_2 = (26.25)_{10} (11010)_2 = (26.25)_{10} \u4e8c\u8fdb\u5236 / \u516b\u8fdb\u5236 / \u5341\u516d\u8fdb\u5236\u95f4\u7684\u76f8\u4e92\u8f6c\u6362 \u00b6 \u4e00\u4e2a\u516b\u8fdb\u5236\u4f4d\u53ef\u4ee5\u7528 3 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\uff08\u56e0\u4e3a 2^3 =8 2^3 =8 \uff09, \u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u4f4d\u53ef\u4ee5\u7528 4 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\uff08 2^4 = 16 2^4 = 16 \uff09\uff0c\u53cd\u4e4b\u540c\u7406\u3002","title":"\u8fdb\u5236"},{"location":"math/base/#_1","text":"\u4e8c\u8fdb\u5236\u662f\u8ba1\u7b97\u673a\u5185\u90e8\u8fd0\u7b97\u4e2d\u91c7\u7528\u7684\u8fdb\u5236\uff0c\u5728\u8fd9\u6837\u7684\u8fdb\u5236\u7cfb\u7edf\u4e0b\uff0c\u53ea\u6709 0,1 0,1 \u4e24\u4e2a\u6570\u5b57\uff0c\u8ba1\u7b97\u673a\u5185\u90e8\u7684\u6240\u6709\u8fd0\u7b97\uff08\u5305\u62ec\u4f4d\u8fd0\u7b97\uff09\u90fd\u662f\u5728\u4e8c\u8fdb\u5236\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u3002 \u4f46\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u6570\u5b57\u4f1a\u8ba9\u6570\u5b57\u8fc7\u957f\uff0c\u56e0\u6b64\u4e3a\u4e86\u65b9\u4fbf\u8868\u793a\u7684\u9700\u8981\uff0c\u901a\u5e38\u4f1a\u628a\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u516b\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u8868\u793a\u3002","title":"\u4e8c\u8fdb\u5236"},{"location":"math/base/#_2","text":"\u5728\u516b\u8fdb\u5236\u4e0b\uff0c\u6709 0,1,2,3,4,5,6,7 0,1,2,3,4,5,6,7 \u516b\u4e2a\u6570\u5b57\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u516b\u8fdb\u5236\u6570\u4ee5 oxx \uff08\u5176\u4e2d o \u4e3a\u516b\u8fdb\u5236\u7684\u524d\u7f00\uff0c xx \u4ee3\u8868\u516b\u8fdb\u5236\u6570\uff09\u7684\u5f62\u5f0f\u6765\u8868\u793a\u3002","title":"\u516b\u8fdb\u5236"},{"location":"math/base/#_3","text":"\u5728\u5341\u516d\u8fdb\u5236\u4e0b\uff0c\u6709 0,1,2,3,4,5,6,7,8,9,A(10),B(11),C(12),D(13),E(14),F(15) 0,1,2,3,4,5,6,7,8,9,A(10),B(11),C(12),D(13),E(14),F(15) \u5341\u516d\u4e2a\u6570\u5b57\u3002 \u5341\u516d\u8fdb\u5236\u4e0e\u4e8c\u8fdb\u5236\u76f8\u6bd4\uff0c\u6700\u5927\u7684\u4f18\u70b9\u5c31\u662f\u8868\u793a\u7684\u6570\u5b57\u957f\u5ea6\u8f83\u77ed\uff0c\u4e00\u4f4d\u5341\u516d\u8fdb\u5236\u6570\u53ef\u4ee5\u8868\u793a 4 \u4f4d\u4e8c\u8fdb\u5236\u6570\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5341\u516d\u8fdb\u5236\u6570\u4ee5 0xdbf \uff08\u5176\u4e2d 0x \u4e3a\u5341\u516d\u8fdb\u5236\u6570\u7684\u524d\u7f00\uff09\u7684\u5f62\u5f0f\u6765\u8868\u793a\u3002","title":"\u5341\u516d\u8fdb\u5236"},{"location":"math/base/#_4","text":"","title":"\u8fdb\u5236\u95f4\u7684\u76f8\u4e92\u8f6c\u5316"},{"location":"math/base/#_5","text":"\u8fd9\u91cc\u4ee5\u4e8c\u8fdb\u5236\u4e3a\u4f8b\u6765\u6f14\u793a\uff0c\u5176\u4ed6\u8fdb\u5236\u7684\u539f\u7406\u4e0e\u5176\u7c7b\u4f3c\u3002 \u6574\u6570\u90e8\u5206\uff0c\u628a\u5341\u8fdb\u5236\u6570\u4e0d\u65ad\u6267\u884c\u9664 2 \u64cd\u4f5c\uff0c\u76f4\u81f3\u5546\u6570\u4e3a 0\u3002\u8bfb\u4f59\u6570\u4ece\u4e0b\u8bfb\u5230\u4e0a\uff0c\u5373\u662f\u4e8c\u8fdb\u5236\u7684\u6574\u6570\u90e8\u5206\u6570\u5b57\u3002 \u5c0f\u6570\u90e8\u5206\uff0c\u5219\u7528\u5176\u4e58 2\uff0c\u53d6\u5176\u6574\u6570\u90e8\u5206\u7684\u7ed3\u679c\uff0c\u518d\u7528\u8ba1\u7b97\u540e\u7684\u5c0f\u6570\u90e8\u5206\u4f9d\u6b64\u91cd\u590d\u8ba1\u7b97\uff0c\u7b97\u5230\u5c0f\u6570\u90e8\u5206\u5168\u4e3a 0 \u4e3a\u6b62\uff0c\u4e4b\u540e\u4ece\u4e0a\u5230\u4e0b\uff0c\u8bfb\u6240\u6709\u8ba1\u7b97\u540e\u6574\u6570\u90e8\u5206\u7684\u6570\u5b57\uff0c\u5373\u4e3a\u4e8c\u8fdb\u5236\u7684\u5c0f\u6570\u90e8\u5206\u6570\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 \u5c0633.25\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u6570 \u6574\u6570\u90e8\u5206\uff1a 33/2=16 ......1 16/2=8 ......0 8/2=4 ......0 4/2=2 ......0 2/2=1 ......0 1/2=0 ......1 \u5c0f\u6570\u90e8\u5206\uff1a 0.25*2=0.5 0 0.5*2=1 1 \u5373 33.25 = (100001.01)_2 33.25 = (100001.01)_2","title":"\u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 / \u516b\u8fdb\u5236 / \u5341\u516d\u8fdb\u5236"},{"location":"math/base/#_6","text":"\u8fd8\u662f\u4ee5\u4e8c\u8fdb\u5236\u4e3a\u4f8b\u3002 \u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6570\uff0c\u53ea\u9700\u5c06\u6bcf\u4e2a\u4f4d\u7684\u503c\uff0c\u4e58\u4ee5 2^i 2^i \u6b21\u5373\u53ef\uff0c\u5176\u4e2d i i \u4e3a\u5f53\u524d\u4f4d\u7684\u4f4d\u6570\uff0c\u4e2a\u4f4d\u7684\u4f4d\u6570\u4e3a 0\u3002 1 2 3 \u5c0611010.01(2)\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6570 11010.01(2)=1*2^4+1*2^3+0*2^2+1*2^1+0*2^0+0*2^(-1)+1*2(-2) =26.25 \u5373 (11010)_2 = (26.25)_{10} (11010)_2 = (26.25)_{10}","title":"\u4e8c\u8fdb\u5236 / \u516b\u8fdb\u5236 / \u5341\u516d\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236"},{"location":"math/base/#_7","text":"\u4e00\u4e2a\u516b\u8fdb\u5236\u4f4d\u53ef\u4ee5\u7528 3 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\uff08\u56e0\u4e3a 2^3 =8 2^3 =8 \uff09, \u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u4f4d\u53ef\u4ee5\u7528 4 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\uff08 2^4 = 16 2^4 = 16 \uff09\uff0c\u53cd\u4e4b\u540c\u7406\u3002","title":"\u4e8c\u8fdb\u5236 / \u516b\u8fdb\u5236 / \u5341\u516d\u8fdb\u5236\u95f4\u7684\u76f8\u4e92\u8f6c\u6362"},{"location":"math/basis/","text":"","title":"\u7ebf\u6027\u57fa"},{"location":"math/bezouts/","text":"\u4ec0\u4e48\u662f\u88f4\u8700\u5b9a\u7406\uff1f \u00b6 \u88f4\u8700\u5b9a\u7406\uff0c\u53c8\u79f0\u8d1d\u7956\u5b9a\u7406\u3002\u662f\u4ee3\u6570\u51e0\u4f55\u4e2d\u4e00\u4e2a\u5b9a\u7406\u3002 \u5176\u5185\u5bb9\u662f\uff1a \u8bbe a,b a,b \u662f\u4e0d\u5168\u4e3a\u96f6\u7684\u6574\u6570, \u5219\u5b58\u5728\u6574\u6570 x,y x,y , \u4f7f\u5f97 ax+by=\\gcd(a,b) ax+by=\\gcd(a,b) . \u8bc1\u660e \u00b6 \u82e5\u4efb\u4f55\u4e00\u4e2a\u7b49\u4e8e 0 0 , \u5219 \\gcd(a,b)=a \\gcd(a,b)=a . \u8fd9\u65f6\u5b9a\u7406\u663e\u7136\u6210\u7acb. \u82e5 a,b a,b \u4e0d\u7b49\u4e8e 0 0 . \u7531\u4e8e \\gcd(a,b)=\\gcd(a,-b) \\gcd(a,b)=\\gcd(a,-b) , \u4e0d\u59a8\u8bbe a,b a,b \u90fd\u5927\u4e8e 0 0 , a\\geq b,\\gcd(a,b)=d a\\geq b,\\gcd(a,b)=d . \u5bf9 ax+by=d ax+by=d , \u4e24\u8fb9\u540c\u65f6\u9664\u4ee5 d d , \u53ef\u5f97 a_1x+b_1y=1 a_1x+b_1y=1 , \u5176\u4e2d (a_1,b_1)=1 (a_1,b_1)=1 . \u8f6c\u8bc1 a_1x+b_1y=1 a_1x+b_1y=1 . \u7531\u5e26\u4f59\u9664\u6cd5: \\begin{aligned}a_1 &= q_1b+r_1 &(0\\leq r_1<b_1) \\\\ b_1 &= q_2r_1+r_2 &(0\\leq r_2<r_1) \\\\ r_1 &= q_3r_2+r_3 &(0\\leq r_3<r_2) \\\\ &\\cdots \\\\ r_{n-3} &= q_{n-1}r_{n-2}+r_{n-1} \\\\ r_{n-2} &= q_nr_{n-1}+r_n \\\\ r_{n-1} &= q_{n+1}r_n\\end{aligned} \\begin{aligned}a_1 &= q_1b+r_1 &(0\\leq r_1<b_1) \\\\ b_1 &= q_2r_1+r_2 &(0\\leq r_2<r_1) \\\\ r_1 &= q_3r_2+r_3 &(0\\leq r_3<r_2) \\\\ &\\cdots \\\\ r_{n-3} &= q_{n-1}r_{n-2}+r_{n-1} \\\\ r_{n-2} &= q_nr_{n-1}+r_n \\\\ r_{n-1} &= q_{n+1}r_n\\end{aligned} \u4e8e\u662f, \u6709 \\gcd(a_1,b_1)=\\gcd(b_1,r_1)=\\gcd(r_1,r_2)=\\cdots=(r_{n-1},r_n)=1 \\gcd(a_1,b_1)=\\gcd(b_1,r_1)=\\gcd(r_1,r_2)=\\cdots=(r_{n-1},r_n)=1 \u6545 r_{n-2}=x_nr_{n-1}+1 r_{n-2}=x_nr_{n-1}+1 \u5373 1=r_{n-2}-x_nr_{n-1} 1=r_{n-2}-x_nr_{n-1} \u7531\u5012\u6570\u7b2c\u4e09\u4e2a\u5f0f\u5b50 r_{n-1}=r_{n-3}-x_{n-1}r_{n-2} r_{n-1}=r_{n-3}-x_{n-1}r_{n-2} \u4ee3\u5165\u4e0a\u5f0f, \u5f97 1=(1+x_nx_{n-1})r_{n-2}-x_nr_{n-3} 1=(1+x_nx_{n-1})r_{n-2}-x_nr_{n-3} \u7136\u540e\u7528\u540c\u6837\u7684\u529e\u6cd5\u7528\u5b83\u4e0a\u9762\u7684\u7b49\u5f0f\u9010\u4e2a\u5730\u6d88\u53bb r_{n-2},\\cdots,r_1 r_{n-2},\\cdots,r_1 , \u53ef\u8bc1\u5f97 1=a_1x+b_1y 1=a_1x+b_1y . \u5e94\u7528 \u00b6 Codeforces Round #290 (Div. 2) D. Fox And Jumping \u7ed9\u51fa n n \u5f20\u5361\u7247\uff0c\u5206\u522b\u6709 l_i l_i \u548c c_i c_i \u3002\u5728\u4e00\u6761\u65e0\u9650\u957f\u7684\u7eb8\u5e26\u4e0a\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u82b1 c_i c_i \u7684\u94b1\u6765\u8d2d\u4e70\u5361\u7247 i i \uff0c\u4ece\u6b64\u4ee5\u540e\u53ef\u4ee5\u5411\u5de6\u6216\u5411\u53f3\u8df3 l_i l_i \u4e2a\u5355\u4f4d\u3002\u95ee\u4f60\u81f3\u5c11\u82b1\u591a\u5c11\u5143\u94b1\u624d\u80fd\u591f\u8df3\u5230\u7eb8\u5e26\u4e0a\u5168\u90e8\u4f4d\u7f6e\u3002\u82e5\u4e0d\u884c\uff0c\u8f93\u51fa -1 -1 \u3002 \u5206\u6790\u8be5\u95ee\u9898\uff0c\u5148\u8003\u8651\u4e24\u4e2a\u6570\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u60f3\u8981\u8df3\u5230\u6bcf\u4e00\u4e2a\u683c\u5b50\u4e0a\uff0c\u5fc5\u987b\u4f7f\u5f97\u8fd9\u4e9b\u6570\u901a\u8fc7\u6570\u6b21\u76f8\u52a0\u6216\u76f8\u52a0\u5f97\u51fa\u7684\u7edd\u5bf9\u503c\u4e3a 1 1 \uff0c\u8fdb\u800c\u60f3\u5230\u4e86\u88f4\u8700\u5b9a\u7406\u3002 \u53ef\u4ee5\u63a8\u51fa\uff1a\u5982\u679c a a \u4e0e b b \u4e92\u8d28\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e24\u4e2a\u6574\u6570 x x \u4e0e y y \uff0c\u4f7f\u5f97 ax+by=1 ax+by=1 . \u7531\u6b64\u5f97\u51fa\u4e86\u82e5\u9009\u62e9\u7684\u5361\u724c\u7684\u6570\u901a\u8fc7\u6570\u6b21\u76f8\u52a0\u6216\u76f8\u51cf\u5f97\u51fa\u7684\u7edd\u5bf9\u503c\u4e3a 1 1 \uff0c\u90a3\u4e48\u8fd9\u4e9b\u6570\u4e00\u5b9a\u4e92\u8d28\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u3002 \u4e0d\u8fc7\u53ef\u4ee5\u8f6c\u79fb\u601d\u60f3\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u4e92\u8d28\uff0c\u5373\u4e3a 0 0 \u53f7\u8282\u70b9\u5f00\u59cb\uff0c\u6bcf\u8d70\u4e00\u6b65\u6c42 \\gcd \\gcd (\u8282\u70b9\u53f7, \u4e0b\u4e00\u4e2a\u8282\u70b9)\uff0c\u540c\u65f6\u8bb0\u5f55\u4ee3\u4ef7\uff0c\u5c31\u6210\u4e3a\u4e86\u4ece 0 0 \u901a\u8fc7\u4e0d\u65ad \\gcd \\gcd \u6700\u540e\u53d8\u4e3a 1 1 \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u7531\u4e8e\uff1a\u4e92\u8d28\u5373\u4e3a\u6700\u5927\u516c\u56e0\u6570\u4e3a 1 1 \uff0c \\gcd(0,x)=x \\gcd(0,x)=x \u8fd9\u4e24\u4e2a\u5b9a\u7406\uff0c\u53ef\u4ee5\u8bc1\u660e\u8be5\u7b97\u6cd5\u7684\u6b63\u786e\u3002\u9009\u62e9\u4f18\u5148\u961f\u5217\u4f18\u5316 Dijkstra \u6c42\u89e3\u3002 \u4e0d\u8fc7\u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u5373\u4e3a\u9700\u8981\u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u4e70\u8fc7\u4e00\u4e2a\u5361\u7247\uff0c\u5f00\u6570\u7ec4\u6807\u8bb0\u7531\u4e8e\u6570\u636e\u8303\u56f4\u8fbe\u5230 10^9 10^9 \u4f1a\u8d85\u51fa\u5185\u5b58\u9650\u5236\uff0c\u53ef\u4ee5\u60f3\u5230\u4f7f\u7528 unordered_map \uff08\u6bd4\u666e\u901a\u7684 map \u66f4\u5feb\u5730\u8bbf\u95ee\u5404\u4e2a\u5143\u7d20\uff0c\u8fed\u4ee3\u6548\u7387\u8f83\u4f4e\uff0c\u8be6\u89c1 STL-map \uff09","title":"\u88f4\u8700\u5b9a\u7406"},{"location":"math/bezouts/#_1","text":"\u88f4\u8700\u5b9a\u7406\uff0c\u53c8\u79f0\u8d1d\u7956\u5b9a\u7406\u3002\u662f\u4ee3\u6570\u51e0\u4f55\u4e2d\u4e00\u4e2a\u5b9a\u7406\u3002 \u5176\u5185\u5bb9\u662f\uff1a \u8bbe a,b a,b \u662f\u4e0d\u5168\u4e3a\u96f6\u7684\u6574\u6570, \u5219\u5b58\u5728\u6574\u6570 x,y x,y , \u4f7f\u5f97 ax+by=\\gcd(a,b) ax+by=\\gcd(a,b) .","title":"\u4ec0\u4e48\u662f\u88f4\u8700\u5b9a\u7406\uff1f"},{"location":"math/bezouts/#_2","text":"\u82e5\u4efb\u4f55\u4e00\u4e2a\u7b49\u4e8e 0 0 , \u5219 \\gcd(a,b)=a \\gcd(a,b)=a . \u8fd9\u65f6\u5b9a\u7406\u663e\u7136\u6210\u7acb. \u82e5 a,b a,b \u4e0d\u7b49\u4e8e 0 0 . \u7531\u4e8e \\gcd(a,b)=\\gcd(a,-b) \\gcd(a,b)=\\gcd(a,-b) , \u4e0d\u59a8\u8bbe a,b a,b \u90fd\u5927\u4e8e 0 0 , a\\geq b,\\gcd(a,b)=d a\\geq b,\\gcd(a,b)=d . \u5bf9 ax+by=d ax+by=d , \u4e24\u8fb9\u540c\u65f6\u9664\u4ee5 d d , \u53ef\u5f97 a_1x+b_1y=1 a_1x+b_1y=1 , \u5176\u4e2d (a_1,b_1)=1 (a_1,b_1)=1 . \u8f6c\u8bc1 a_1x+b_1y=1 a_1x+b_1y=1 . \u7531\u5e26\u4f59\u9664\u6cd5: \\begin{aligned}a_1 &= q_1b+r_1 &(0\\leq r_1<b_1) \\\\ b_1 &= q_2r_1+r_2 &(0\\leq r_2<r_1) \\\\ r_1 &= q_3r_2+r_3 &(0\\leq r_3<r_2) \\\\ &\\cdots \\\\ r_{n-3} &= q_{n-1}r_{n-2}+r_{n-1} \\\\ r_{n-2} &= q_nr_{n-1}+r_n \\\\ r_{n-1} &= q_{n+1}r_n\\end{aligned} \\begin{aligned}a_1 &= q_1b+r_1 &(0\\leq r_1<b_1) \\\\ b_1 &= q_2r_1+r_2 &(0\\leq r_2<r_1) \\\\ r_1 &= q_3r_2+r_3 &(0\\leq r_3<r_2) \\\\ &\\cdots \\\\ r_{n-3} &= q_{n-1}r_{n-2}+r_{n-1} \\\\ r_{n-2} &= q_nr_{n-1}+r_n \\\\ r_{n-1} &= q_{n+1}r_n\\end{aligned} \u4e8e\u662f, \u6709 \\gcd(a_1,b_1)=\\gcd(b_1,r_1)=\\gcd(r_1,r_2)=\\cdots=(r_{n-1},r_n)=1 \\gcd(a_1,b_1)=\\gcd(b_1,r_1)=\\gcd(r_1,r_2)=\\cdots=(r_{n-1},r_n)=1 \u6545 r_{n-2}=x_nr_{n-1}+1 r_{n-2}=x_nr_{n-1}+1 \u5373 1=r_{n-2}-x_nr_{n-1} 1=r_{n-2}-x_nr_{n-1} \u7531\u5012\u6570\u7b2c\u4e09\u4e2a\u5f0f\u5b50 r_{n-1}=r_{n-3}-x_{n-1}r_{n-2} r_{n-1}=r_{n-3}-x_{n-1}r_{n-2} \u4ee3\u5165\u4e0a\u5f0f, \u5f97 1=(1+x_nx_{n-1})r_{n-2}-x_nr_{n-3} 1=(1+x_nx_{n-1})r_{n-2}-x_nr_{n-3} \u7136\u540e\u7528\u540c\u6837\u7684\u529e\u6cd5\u7528\u5b83\u4e0a\u9762\u7684\u7b49\u5f0f\u9010\u4e2a\u5730\u6d88\u53bb r_{n-2},\\cdots,r_1 r_{n-2},\\cdots,r_1 , \u53ef\u8bc1\u5f97 1=a_1x+b_1y 1=a_1x+b_1y .","title":"\u8bc1\u660e"},{"location":"math/bezouts/#_3","text":"Codeforces Round #290 (Div. 2) D. Fox And Jumping \u7ed9\u51fa n n \u5f20\u5361\u7247\uff0c\u5206\u522b\u6709 l_i l_i \u548c c_i c_i \u3002\u5728\u4e00\u6761\u65e0\u9650\u957f\u7684\u7eb8\u5e26\u4e0a\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u82b1 c_i c_i \u7684\u94b1\u6765\u8d2d\u4e70\u5361\u7247 i i \uff0c\u4ece\u6b64\u4ee5\u540e\u53ef\u4ee5\u5411\u5de6\u6216\u5411\u53f3\u8df3 l_i l_i \u4e2a\u5355\u4f4d\u3002\u95ee\u4f60\u81f3\u5c11\u82b1\u591a\u5c11\u5143\u94b1\u624d\u80fd\u591f\u8df3\u5230\u7eb8\u5e26\u4e0a\u5168\u90e8\u4f4d\u7f6e\u3002\u82e5\u4e0d\u884c\uff0c\u8f93\u51fa -1 -1 \u3002 \u5206\u6790\u8be5\u95ee\u9898\uff0c\u5148\u8003\u8651\u4e24\u4e2a\u6570\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u60f3\u8981\u8df3\u5230\u6bcf\u4e00\u4e2a\u683c\u5b50\u4e0a\uff0c\u5fc5\u987b\u4f7f\u5f97\u8fd9\u4e9b\u6570\u901a\u8fc7\u6570\u6b21\u76f8\u52a0\u6216\u76f8\u52a0\u5f97\u51fa\u7684\u7edd\u5bf9\u503c\u4e3a 1 1 \uff0c\u8fdb\u800c\u60f3\u5230\u4e86\u88f4\u8700\u5b9a\u7406\u3002 \u53ef\u4ee5\u63a8\u51fa\uff1a\u5982\u679c a a \u4e0e b b \u4e92\u8d28\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e24\u4e2a\u6574\u6570 x x \u4e0e y y \uff0c\u4f7f\u5f97 ax+by=1 ax+by=1 . \u7531\u6b64\u5f97\u51fa\u4e86\u82e5\u9009\u62e9\u7684\u5361\u724c\u7684\u6570\u901a\u8fc7\u6570\u6b21\u76f8\u52a0\u6216\u76f8\u51cf\u5f97\u51fa\u7684\u7edd\u5bf9\u503c\u4e3a 1 1 \uff0c\u90a3\u4e48\u8fd9\u4e9b\u6570\u4e00\u5b9a\u4e92\u8d28\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u3002 \u4e0d\u8fc7\u53ef\u4ee5\u8f6c\u79fb\u601d\u60f3\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u4e92\u8d28\uff0c\u5373\u4e3a 0 0 \u53f7\u8282\u70b9\u5f00\u59cb\uff0c\u6bcf\u8d70\u4e00\u6b65\u6c42 \\gcd \\gcd (\u8282\u70b9\u53f7, \u4e0b\u4e00\u4e2a\u8282\u70b9)\uff0c\u540c\u65f6\u8bb0\u5f55\u4ee3\u4ef7\uff0c\u5c31\u6210\u4e3a\u4e86\u4ece 0 0 \u901a\u8fc7\u4e0d\u65ad \\gcd \\gcd \u6700\u540e\u53d8\u4e3a 1 1 \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u7531\u4e8e\uff1a\u4e92\u8d28\u5373\u4e3a\u6700\u5927\u516c\u56e0\u6570\u4e3a 1 1 \uff0c \\gcd(0,x)=x \\gcd(0,x)=x \u8fd9\u4e24\u4e2a\u5b9a\u7406\uff0c\u53ef\u4ee5\u8bc1\u660e\u8be5\u7b97\u6cd5\u7684\u6b63\u786e\u3002\u9009\u62e9\u4f18\u5148\u961f\u5217\u4f18\u5316 Dijkstra \u6c42\u89e3\u3002 \u4e0d\u8fc7\u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u5373\u4e3a\u9700\u8981\u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u4e70\u8fc7\u4e00\u4e2a\u5361\u7247\uff0c\u5f00\u6570\u7ec4\u6807\u8bb0\u7531\u4e8e\u6570\u636e\u8303\u56f4\u8fbe\u5230 10^9 10^9 \u4f1a\u8d85\u51fa\u5185\u5b58\u9650\u5236\uff0c\u53ef\u4ee5\u60f3\u5230\u4f7f\u7528 unordered_map \uff08\u6bd4\u666e\u901a\u7684 map \u66f4\u5feb\u5730\u8bbf\u95ee\u5404\u4e2a\u5143\u7d20\uff0c\u8fed\u4ee3\u6548\u7387\u8f83\u4f4e\uff0c\u8be6\u89c1 STL-map \uff09","title":"\u5e94\u7528"},{"location":"math/bignum/","text":"\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u9ad8\u7cbe\u5ea6\u5462\uff1f\u5c31\u6bd4\u5982\u6570\u636e\u89c4\u6a21\u5f88\u5927\uff0cunsigned long long \u90fd\u5b58\u4e0d\u4e0b\uff0c\u5c31\u9700\u8981\u5f00\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u6765\u51c6\u786e\u5730\u8868\u793a\u4e00\u4e2a\u6570\u3002 \u9ad8\u7cbe\u5ea6\u95ee\u9898\u5305\u542b\u5f88\u591a\u5c0f\u7684\u7ec6\u8282\uff0c\u5b9e\u73b0\u4e0a\u4e5f\u6709\u5f88\u591a\u8bb2\u7a76\uff0c\u6682\u65f6\u5148\u4e0d\u5c55\u5f00\u3002 \u56db\u5219\u8fd0\u7b97 \u5feb\u901f\u5e42 \u5206\u6570 \u5bf9\u6570\uff08\uff1f\uff09 \u5f00\u6839 \u538b\u4f4d\u9ad8\u7cbe\u5ea6 \u653e\u4e00\u4e2a\u4e4b\u524d\u7684\u9ad8\u7cbe\u5ea6\u677f\u5b50\u5427\u3002 \u8fd8\u6709\u4e00\u4e2a\u5f88\u597d\u7528\u7684 \u9ad8\u7cbe\u5ea6\u5c01\u88c5\u7c7b 10kb \u60f3\u7528\u53ef\u4ee5\u81ea\u884c\u4e0b\u8f7d\udefine MAXN 9999 // MAXN \u662f\u4e00\u4f4d\u4e2d\u6700\u5927\u7684\u6570\u5b57 #define MAXSIZE 10024 // MAXSIZE \u662f\u4f4d\u6570 #define DLEN 4 // DLEN \u8bb0\u5f55\u538b\u51e0\u4f4d struct Big { int a [ MAXSIZE ], len ; bool flag ; //\u6807\u8bb0\u7b26\u53f7'-' Big () { len = 1 ; memset ( a , 0 , sizeof a ); flag = 0 ; } Big ( const int ); Big ( const char * ); Big ( const Big & ); Big & operator = ( const Big & ); //\u6ce8\u610f\u8fd9\u91ccoperator\u6709&\uff0c\u56e0\u4e3a\u8d4b\u503c\u6709\u4fee\u6539\u2026\u2026 //\u7531\u4e8eOI\u4e2d\u8981\u6c42\u6548\u7387 //\u6b64\u5904\u4e0d\u4f7f\u7528\u6cdb\u578b\u51fd\u6570 //\u6545\u4e0d\u91cd\u8f7d // istream& operator>>(istream&, BigNum&); //\u91cd\u8f7d\u8f93\u5165\u8fd0\u7b97\u7b26 // ostream& operator<<(ostream&, BigNum&); //\u91cd\u8f7d\u8f93\u51fa\u8fd0\u7b97\u7b26 Big operator + ( const Big & ) const ; Big operator - ( const Big & ) const ; Big operator * ( const Big & ) const ; Big operator / ( const int & ) const ; // TODO: Big / Big; Big operator ^ ( const int & ) const ; // TODO: Big ^ Big; // TODO: Big \u4f4d\u8fd0\u7b97; int operator % ( const int & ) const ; // TODO: Big ^ Big; bool operator < ( const Big & ) const ; bool operator < ( const int & t ) const ; inline void print (); }; // README::\u4e0d\u8981\u968f\u968f\u4fbf\u4fbf\u628a\u53c2\u6570\u90fd\u53d8\u6210\u5f15\u7528\uff0c\u90a3\u6837\u6ca1\u529e\u6cd5\u4f20\u503c Big :: Big ( const int b ) { int c , d = b ; len = 0 ; // memset(a,0,sizeof a); CLR ( a ); while ( d > MAXN ) { c = d - ( d / ( MAXN + 1 ) * ( MAXN + 1 )); d = d / ( MAXN + 1 ); a [ len ++ ] = c ; } a [ len ++ ] = d ; } Big :: Big ( const char * s ) { int t , k , index , l ; CLR ( a ); l = strlen ( s ); len = l / DLEN ; if ( l % DLEN ) ++ len ; index = 0 ; for ( int i = l - 1 ; i >= 0 ; i -= DLEN ) { t = 0 ; k = i - DLEN + 1 ; if ( k < 0 ) k = 0 ; g ( j , k , i ) t = t * 10 + s [ j ] - '0' ; a [ index ++ ] = t ; } } Big :: Big ( const Big & T ) : len ( T . len ) { CLR ( a ); f ( i , 0 , len ) a [ i ] = T . a [ i ]; // TODO:\u91cd\u8f7d\u6b64\u5904\uff1f } Big & Big :: operator = ( const Big & T ) { CLR ( a ); len = T . len ; f ( i , 0 , len ) a [ i ] = T . a [ i ]; return * this ; } Big Big :: operator + ( const Big & T ) const { Big t ( * this ); int big = len ; if ( T . len > len ) big = T . len ; f ( i , 0 , big ) { t . a [ i ] += T . a [ i ]; if ( t . a [ i ] > MAXN ) { ++ t . a [ i + 1 ]; t . a [ i ] -= MAXN + 1 ; } } if ( t . a [ big ]) t . len = big + 1 ; else t . len = big ; return t ; } Big Big :: operator - ( const Big & T ) const { int big ; bool ctf ; Big t1 , t2 ; if ( * this < T ) { t1 = T ; t2 = * this ; ctf = 1 ; } else { t1 = * this ; t2 = T ; ctf = 0 ; } big = t1 . len ; int j = 0 ; f ( i , 0 , big ) { if ( t1 . a [ i ] < t2 . a [ i ]) { j = i + 1 ; while ( t1 . a [ j ] == 0 ) ++ j ; -- t1 . a [ j -- ]; // WTF? while ( j > i ) t1 . a [ j -- ] += MAXN ; t1 . a [ i ] += MAXN + 1 - t2 . a [ i ]; } else t1 . a [ i ] -= t2 . a [ i ]; } t1 . len = big ; while ( t1 . len > 1 && t1 . a [ t1 . len - 1 ] == 0 ) { -- t1 . len ; -- big ; } if ( ctf ) t1 . a [ big - 1 ] = - t1 . a [ big - 1 ]; return t1 ; } Big Big :: operator * ( const Big & T ) const { Big res ; int up ; int te , tee ; f ( i , 0 , len ) { up = 0 ; f ( j , 0 , T . len ) { te = a [ i ] * T . a [ j ] + res . a [ i + j ] + up ; if ( te > MAXN ) { tee = te - te / ( MAXN + 1 ) * ( MAXN + 1 ); up = te / ( MAXN + 1 ); res . a [ i + j ] = tee ; } else { up = 0 ; res . a [ i + j ] = te ; } } if ( up ) res . a [ i + T . len ] = up ; } res . len = len + T . len ; while ( res . len > 1 && res . a [ res . len - 1 ] == 0 ) -- res . len ; return res ; } Big Big :: operator / ( const int & b ) const { Big res ; int down = 0 ; gd ( i , len - 1 , 0 ) { res . a [ i ] = ( a [ i ] + down * ( MAXN + 1 ) / b ); down = a [ i ] + down * ( MAXN + 1 ) - res . a [ i ] * b ; } res . len = len ; while ( res . len > 1 && res . a [ res . len - 1 ] == 0 ) -- res . len ; return res ; } int Big :: operator % ( const int & b ) const { int d = 0 ; gd ( i , len - 1 , 0 ) d = ( d * ( MAXN + 1 ) % b + a [ i ]) % b ; return d ; } Big Big :: operator ^ ( const int & n ) const { Big t ( n ), res ( 1 ); // TODO::\u5feb\u901f\u5e42\u8fd9\u6837\u5199\u597d\u4e11= =//DONE:) int y = n ; while ( y ) { if ( y & 1 ) res = res * t ; t = t * t ; y >>= 1 ; } return res ; } bool Big :: operator < ( const Big & T ) const { int ln ; if ( len < T . len ) return 233 ; if ( len == T . len ) { ln = len - 1 ; while ( ln >= 0 && a [ ln ] == T . a [ ln ]) -- ln ; if ( ln >= 0 && a [ ln ] < T . a [ ln ]) return 233 ; return 0 ; } return 0 ; } inline bool Big :: operator < ( const int & t ) const { Big tee ( t ); return * this < tee ; } inline void Big :: print () { printf ( \"%d\" , a [ len - 1 ]); gd ( i , len - 2 , 0 ) { printf ( \"%04d\" , a [ i ]); } } inline void print ( Big s ) { // s\u4e0d\u8981\u662f\u5f15\u7528\uff0c\u8981\u4e0d\u7136\u4f60\u600e\u4e48print(a * b); int len = s . len ; printf ( \"%d\" , s . a [ len - 1 ]); gd ( i , len - 2 , 0 ) { printf ( \"%04d\" , s . a [ i ]); } } char s [ 100024 ];","title":"\u9ad8\u7cbe\u5ea6"},{"location":"math/bit/","text":"\u4f4d\u8fd0\u7b97\u5c31\u662f\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\uff0c\u6bcf\u4f4d\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97\u5f97\u5230\u7ed3\u679c\u3002 \u5e38\u7528\u7684\u8fd0\u7b97\u7b26\u5171 6 \u79cd\uff0c\u5206\u522b\u4e3a\u4e0e\uff08 & \uff09\u3001\u6216\uff08 | \uff09\u3001\u5f02\u6216\uff08 ^ \uff09\u3001\u53d6\u53cd\uff08 ~ \uff09\u3001\u5de6\u79fb\uff08 << \uff09 \u548c\u53f3\u79fb\uff08 >> \uff09\u3002 \u4e0e\u3001\u6216\u3001\u5f02\u6216 \u00b6 \u4e0e\uff08 & \uff09\u6216\uff08 | \uff09\u548c\u5f02\u6216\uff08 ^ \uff09\u8fd9\u4e09\u8005\u90fd\u662f\u4e24\u8005\u95f4\u7684\u8fd0\u7b97\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u4e00\u8d77\u8bb2\u89e3\u3002 \u8868\u793a\u628a\u4e24\u4e2a\u6574\u6570\u5206\u522b\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u5404\u4f4d\u9010\u4e00\u6bd4\u8f83\u3002 \u8fd0\u7b97\u7b26 \u89e3\u91ca & \u53ea\u6709\u5728\u4e24\u4e2a\uff08\u5bf9\u5e94\u4f4d\u6570\u4e2d\uff09\u90fd\u4e3a 1 \u65f6\u624d\u4e3a 1 | \u53ea\u8981\u5728\u4e24\u4e2a\uff08\u5bf9\u5e94\u4f4d\u6570\u4e2d\uff09\u6709\u4e00\u4e2a 1 \u65f6\u5c31\u4e3a 1 ^ \u53ea\u6709\u4e24\u4e2a\uff08\u5bf9\u5e94\u4f4d\u6570\uff09\u4e0d\u540c\u65f6\u624d\u4e3a 1 ^ \u8fd0\u7b97\u7684\u9006\u8fd0\u7b97\u662f\u5b83\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e24\u6b21\u5f02\u6216\u540c\u4e00\u4e2a\u6570\u6700\u540e\u7ed3\u679c\u4e0d\u53d8\uff0c\u5373 (a ^ b) ^ b = a \u3002 \u4e3e\u4f8b\uff1a \\begin{aligned} &5&=&&(101)_2\\\\ &6&=&&(110)_2\\\\ &5\\tt\\,\\&\\,6\\rm&=&&(100)_2&=\\ 4\\\\ &5\\tt\\,|\\,\\rm6&=&&(111)_2&=\\ 7\\\\ &5\\tt\\,\\text{^}\\,\\rm6&=&&(011)_2&=\\ 3\\\\ \\end{aligned} \\begin{aligned} &5&=&&(101)_2\\\\ &6&=&&(110)_2\\\\ &5\\tt\\,\\&\\,6\\rm&=&&(100)_2&=\\ 4\\\\ &5\\tt\\,|\\,\\rm6&=&&(111)_2&=\\ 7\\\\ &5\\tt\\,\\text{^}\\,\\rm6&=&&(011)_2&=\\ 3\\\\ \\end{aligned} \u53d6\u53cd \u00b6 \u53d6\u53cd\u662f\u5bf9 1 \u4e2a\u6570 num num \u8fdb\u884c\u7684\u8ba1\u7b97\u3002 ~ \u628a num num \u7684\u8865\u7801\u4e2d\u7684 0 \u548c 1 \u5168\u90e8\u53d6\u53cd \uff080 \u53d8\u4e3a 1\uff0c1 \u53d8\u4e3a 0\uff09\u3002 \u8865\u7801\u2014\u2014\u6b63\u6570\u7684\u8865\u7801\u4e3a\u5176\uff08\u4e8c\u8fdb\u5236\uff09\u672c\u8eab\uff0c\u8d1f\u6570\u7684\u8865\u7801\u662f\u5176\uff08\u4e8c\u8fdb\u5236\uff09\u53d6\u53cd\u540e +1 +1 \u3002 \u4e3e\u4f8b\uff1a \\begin{aligned} 5=(0000\\ 0101)_2\\\\ 5\\ \\text{\u7684\u8865\u7801} =(1111\\ 1010)_2\\\\ \\tt\\ \\text{~}\\rm5=(1111\\ 1010)_2 \\end{aligned} \\begin{aligned} 5=(0000\\ 0101)_2\\\\ 5\\ \\text{\u7684\u8865\u7801} =(1111\\ 1010)_2\\\\ \\tt\\ \\text{~}\\rm5=(1111\\ 1010)_2 \\end{aligned} \u5de6\u79fb\u548c\u53f3\u79fb \u00b6 \u4e0e\u524d\u9762\u7684 4 \u79cd\u8fd0\u7b97\u76f8\u4f3c\uff0c\u8fd9\u4e24\u79cd\u8fd0\u7b97\u4ecd\u662f\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u8fdb\u884c\u64cd\u4f5c\u3002 \u5de6\u79fb\uff08 << \uff09 \u5c06\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u540e\u7684\u6570\u5b57\u6574\u4f53\u5411\u5de6\u79fb\u52a8\u3002 num << i // \u8868\u793a\u5c06 num num \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u5411\u5de6\u79fb\u52a8 i i \u4f4d\uff08\u6240\u5f97\u7684\u503c\uff09 \u53f3\u79fb\uff08 >> \uff09 \u5c06\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u540e\u7684\u6570\u5b57\u6574\u4f53\u5411\u53f3\u79fb\u52a8\u3002 num >> i // \u8868\u793a\u5c06 num num \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u5411\u5de6\u79fb\u52a8 i i \u4f4d\uff08\u6240\u5f97\u7684\u503c\uff09 \u4e3e\u4f8b\uff1a \\begin{aligned} &5&&=&&(00000101)_2\\\\ &5\\tt\\,<<\\,\\rm1&&=&&(00001010)_2\\!\\!\\!&=&&\\!\\!\\!20\\\\ &5\\tt>>\\rm1&&=&&(00000010)_2&=&&2 \\end{aligned} \\begin{aligned} &5&&=&&(00000101)_2\\\\ &5\\tt\\,<<\\,\\rm1&&=&&(00001010)_2\\!\\!\\!&=&&\\!\\!\\!20\\\\ &5\\tt>>\\rm1&&=&&(00000010)_2&=&&2 \\end{aligned} \u5728 C++ \u4e2d\uff0c\u53f3\u79fb\u64cd\u4f5c\u4e2d\u53f3\u4fa7\u591a\u4f59\u7684\u4f4d\u5c06\u4f1a\u88ab\u820d\u5f03\u3002\u800c\u5de6\u4fa7\u8f83\u4e3a\u590d\u6742\uff1a\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6570\uff0c\u4f1a\u5728\u5de6\u4fa7\u8865 0\uff1b\u800c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6570\uff0c\u5219\u4f1a\u7528\u6700\u9ad8\u4f4d\u7684\u6570\u8865\u9f50\uff08Replicate most significant bit on left\uff09\u3002 \u6ce8\u610f\uff1a \u5de6\u79fb\u548c\u53f3\u79fb\u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u5e76\u975e\u5bf9 num num \u672c\u8eab\u8fdb\u884c\u64cd\u4f5c\u3002 \u5de6\u79fb\u548c\u53f3\u79fb\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u56db\u5219\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982 x<<1+1 x<<1+1 \u4f1a\u88ab\u89e3\u91ca\u4e3a x<<(1+1) x<<(1+1) \uff0c\u6240\u4ee5\u5fc5\u8981\u7684\u65f6\u5019\uff0c\u8981\u4f7f\u7528\u62ec\u53f7\u3002 \u4f4d\u8fd0\u7b97\u7684\u5e94\u7528 \u00b6 \u5982\u679c num num \u662f\u6b63\u6570\uff0c num << i \u76f8\u5f53\u4e8e num num \u4e58\u4ee5 2 \u7684 i i \u6b21\u65b9\uff0c\u800c num >> i \u76f8\u5f53\u4e8e num num \u9664\u4ee5 2 \u7684 i i \u6b21\u65b9\u3002 (\u4f4d\u8fd0\u7b97\u6bd4 % \u548c / \u64cd\u4f5c\u5feb\u5f97\u591a) (\u636e 2018JSOI \u590f\u4ee4\u8425\uff0c\u6548\u7387\u53ef\u4ee5\u63d0\u9ad8 60%) Warning \u4e3a\u4ec0\u4e48\u8981\u5f3a\u8c03\u662f\u6b63\u6570\u5462\uff1f\u8003\u8651\u4e00\u4e0b -1 >> 3 num * 10 = (num<<1) + (num<<3) num & 1 \u76f8\u5f53\u4e8e\u53d6 num num \u4e8c\u8fdb\u5236\u7684\u6700\u672b\u4f4d\uff0c\u53ef\u7528\u4e8e\u5224\u65ad num num \u7684\u5947\u5076\u6027\uff0c\u4e8c\u8fdb\u5236\u7684\u6700\u672b\u4f4d\u4e3a 0 \u8868\u793a\u8be5\u6570\u4e3a\u5076\u6570\uff0c\u6700\u672b\u4f4d\u4e3a 1 \u8868\u793a\u8be5\u6570\u4e3a\u5947\u6570\u3002 1 2 3 4 5 6 // \u5229\u7528\u4f4d\u8fd0\u7b97\u7684\u5feb\u6377\u7684 swap \u4ee3\u7801 void swap ( int & a , int & b ) { a = a ^ b ; b = a ^ b ; a = a ^ b ; } \u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u96c6\u5408\uff080 \u8868\u793a\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c1 \u8868\u793a\u5728\u96c6\u5408\u4e2d\uff09\u3002\u6bd4\u5982\u96c6\u5408 {1, 3, 4, 8} \uff0c\u53ef\u4ee5\u8868\u793a\u6210 0b00000000000000000000000100011010 \uff0c\u5341\u8fdb\u5236\u5c31\u662f 2^8+2^4+2^3+2^1=282 2^8+2^4+2^3+2^1=282 \u3002 \u800c\u5bf9\u5e94\u7684\u4f4d\u8fd0\u7b97\u4e5f\u5c31\u53ef\u4ee5\u770b\u4f5c\u662f\u5bf9\u96c6\u5408\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 \u64cd\u4f5c \u96c6\u5408\u8868\u793a \u4f4d\u8fd0\u7b97\u8bed\u53e5 \u4ea4\u96c6 a \\cap b a \\cap b a & b \u5e76\u96c6 a \\cup b a \\cup b a | b \u8865\u96c6 \\bar{a} \\bar{a} ~a \u5dee\u96c6 a \\setminus b a \\setminus b ~a \u5bf9\u79f0\u5dee a\\triangle b a\\triangle b a ^ b \u4f4d\u8fd0\u7b97\u7684\u5e38\u7528\u65b9\u6cd5 \u00b6 \u4e58\u4ee5 2 \u8fd0\u7b97\u3002 1 2 3 int mulTwo ( int n ) { // \u8ba1\u7b97 n*2 return n << 1 ; } \u9664\u4ee5 2 \u8fd0\u7b97\u3002 1 2 3 int divTwo ( int n ) { // \u8d1f\u5947\u6570\u7684\u8fd0\u7b97\u4e0d\u53ef\u7528 return n >> 1 ; // \u9664\u4ee5 2 } \u4e58\u4ee5 2 \u7684 m m \u6b21\u65b9\u3002 1 2 3 int mulTwoPower ( int n , int m ) { // \u8ba1\u7b97 n*(2^m) return n << m ; } \u9664\u4ee5 2 \u7684 m m \u6b21\u65b9\u3002 1 2 3 int divTwoPower ( int n , int m ) { // \u8ba1\u7b97 n/(2^m) return n >> m ; } \u5224\u65ad\u4e00\u4e2a\u6570\u7684\u5947\u5076\u6027\u3002 1 boolean isOddNumber ( int n ) { return n & 1 ; } \u53d6\u7edd\u5bf9\u503c\uff08\u67d0\u4e9b\u673a\u5668\u4e0a\uff0c\u6548\u7387\u6bd4 n > 0 ? n : -n \u9ad8\uff09\u3002 1 2 3 4 5 6 7 int abs ( int n ) { return ( n ^ ( n >> 31 )) - ( n >> 31 ); /* n>>31 \u53d6\u5f97 n \u7684\u7b26\u53f7\uff0c\u82e5 n \u4e3a\u6b63\u6570\uff0cn>>31 \u7b49\u4e8e 0\uff0c\u82e5 n \u4e3a\u8d1f\u6570\uff0cn>>31 \u7b49\u4e8e - 1 \u82e5 n \u4e3a\u6b63\u6570 n^0=0, \u6570\u4e0d\u53d8\uff0c\u82e5 n \u4e3a\u8d1f\u6570\u6709 n^-1 \u9700\u8981\u8ba1\u7b97 n \u548c - 1 \u7684\u8865\u7801\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c n \u53d8\u53f7\u5e76\u4e14\u4e3a n \u7684\u7edd\u5bf9\u503c\u51cf 1\uff0c\u518d\u51cf\u53bb - 1 \u5c31\u662f\u7edd\u5bf9\u503c */ } \u53d6\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\uff08\u67d0\u4e9b\u673a\u5668\u4e0a\uff0c\u6548\u7387\u6bd4 a > b ? a : b \u9ad8\uff09\u3002 1 2 3 4 int max ( int a , int b ) { return b & (( a - b ) >> 31 ) | a & ( ~ ( a - b ) >> 31 ); /* \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a - 1 */ } \u53d6\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u503c\uff08\u67d0\u4e9b\u673a\u5668\u4e0a\uff0c\u6548\u7387\u6bd4 a > b ? b : a \u9ad8\uff09\u3002 1 2 3 4 int min ( int a , int b ) { return a & (( a - b ) >> 31 ) | b & ( ~ ( a - b ) >> 31 ); /* \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a - 1 */ } \u5224\u65ad\u7b26\u53f7\u662f\u5426\u76f8\u540c\u3002 1 2 3 4 boolean isSameSign ( int x , int y ) { // \u6709 0 \u7684\u60c5\u51b5\u4f8b\u5916 return ( x ^ y ) >= 0 ; // true \u8868\u793a x \u548c y \u6709\u76f8\u540c\u7684\u7b26\u53f7\uff0cfalse \u8868\u793a x,y \u6709\u76f8\u53cd\u7684\u7b26\u53f7\u3002 } \u8ba1\u7b97 2 \u7684 n n \u6b21\u65b9\u3002 1 2 3 int getFactorialofTwo ( int n ) { // n > 0 return 1 << n ; // 2 \u7684 n \u6b21\u65b9 } \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f 2 \u7684\u5e42\u3002 1 2 3 4 5 boolean isFactorialofTwo ( int n ) { return n > 0 ? ( n & ( n - 1 )) == 0 : false ; /* \u5982\u679c\u662f 2 \u7684\u5e42\uff0cn \u4e00\u5b9a\u662f 100... n-1 \u5c31\u662f 1111.... \u6240\u4ee5\u505a\u4e0e\u8fd0\u7b97\u7ed3\u679c\u4e3a 0 */ } \u5bf9 2 \u7684 n n \u6b21\u65b9\u53d6\u4f59\u3002 1 2 3 4 5 int quyu ( int m , int n ) { // n \u4e3a 2 \u7684\u6b21\u65b9 return m & ( n - 1 ); /* \u5982\u679c\u662f 2 \u7684\u5e42\uff0cn \u4e00\u5b9a\u662f 100... n-1 \u5c31\u662f 1111.... \u6240\u4ee5\u505a\u4e0e\u8fd0\u7b97\u7ed3\u679c\u4fdd\u7559 m \u5728 n \u8303\u56f4\u7684\u975e 0 \u7684\u4f4d */ } \u6c42\u4e24\u4e2a\u6574\u6570\u7684\u5e73\u5747\u503c\u3002 1 2 3 int getAverage ( int x , int y ) { return ( x + y ) >> 1 ; \uff5d \u904d\u5386\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 1 2 3 4 int b = 0 ; do { // process subset b } while ( b = ( b - x ) & x ); \u9898\u76ee\u63a8\u8350 \u00b6 CODEVS 2743 \u9ed1\u767d\u68cb\u6e38\u620f \u53c2\u8003 \u00b6 \u4f4d\u8fd0\u7b97\u6280\u5de7\uff1a https://graphics.stanford.edu/~seander/bithacks.html","title":"\u4f4d\u8fd0\u7b97"},{"location":"math/bit/#_1","text":"\u4e0e\uff08 & \uff09\u6216\uff08 | \uff09\u548c\u5f02\u6216\uff08 ^ \uff09\u8fd9\u4e09\u8005\u90fd\u662f\u4e24\u8005\u95f4\u7684\u8fd0\u7b97\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u4e00\u8d77\u8bb2\u89e3\u3002 \u8868\u793a\u628a\u4e24\u4e2a\u6574\u6570\u5206\u522b\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u5404\u4f4d\u9010\u4e00\u6bd4\u8f83\u3002 \u8fd0\u7b97\u7b26 \u89e3\u91ca & \u53ea\u6709\u5728\u4e24\u4e2a\uff08\u5bf9\u5e94\u4f4d\u6570\u4e2d\uff09\u90fd\u4e3a 1 \u65f6\u624d\u4e3a 1 | \u53ea\u8981\u5728\u4e24\u4e2a\uff08\u5bf9\u5e94\u4f4d\u6570\u4e2d\uff09\u6709\u4e00\u4e2a 1 \u65f6\u5c31\u4e3a 1 ^ \u53ea\u6709\u4e24\u4e2a\uff08\u5bf9\u5e94\u4f4d\u6570\uff09\u4e0d\u540c\u65f6\u624d\u4e3a 1 ^ \u8fd0\u7b97\u7684\u9006\u8fd0\u7b97\u662f\u5b83\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e24\u6b21\u5f02\u6216\u540c\u4e00\u4e2a\u6570\u6700\u540e\u7ed3\u679c\u4e0d\u53d8\uff0c\u5373 (a ^ b) ^ b = a \u3002 \u4e3e\u4f8b\uff1a \\begin{aligned} &5&=&&(101)_2\\\\ &6&=&&(110)_2\\\\ &5\\tt\\,\\&\\,6\\rm&=&&(100)_2&=\\ 4\\\\ &5\\tt\\,|\\,\\rm6&=&&(111)_2&=\\ 7\\\\ &5\\tt\\,\\text{^}\\,\\rm6&=&&(011)_2&=\\ 3\\\\ \\end{aligned} \\begin{aligned} &5&=&&(101)_2\\\\ &6&=&&(110)_2\\\\ &5\\tt\\,\\&\\,6\\rm&=&&(100)_2&=\\ 4\\\\ &5\\tt\\,|\\,\\rm6&=&&(111)_2&=\\ 7\\\\ &5\\tt\\,\\text{^}\\,\\rm6&=&&(011)_2&=\\ 3\\\\ \\end{aligned}","title":"\u4e0e\u3001\u6216\u3001\u5f02\u6216"},{"location":"math/bit/#_2","text":"\u53d6\u53cd\u662f\u5bf9 1 \u4e2a\u6570 num num \u8fdb\u884c\u7684\u8ba1\u7b97\u3002 ~ \u628a num num \u7684\u8865\u7801\u4e2d\u7684 0 \u548c 1 \u5168\u90e8\u53d6\u53cd \uff080 \u53d8\u4e3a 1\uff0c1 \u53d8\u4e3a 0\uff09\u3002 \u8865\u7801\u2014\u2014\u6b63\u6570\u7684\u8865\u7801\u4e3a\u5176\uff08\u4e8c\u8fdb\u5236\uff09\u672c\u8eab\uff0c\u8d1f\u6570\u7684\u8865\u7801\u662f\u5176\uff08\u4e8c\u8fdb\u5236\uff09\u53d6\u53cd\u540e +1 +1 \u3002 \u4e3e\u4f8b\uff1a \\begin{aligned} 5=(0000\\ 0101)_2\\\\ 5\\ \\text{\u7684\u8865\u7801} =(1111\\ 1010)_2\\\\ \\tt\\ \\text{~}\\rm5=(1111\\ 1010)_2 \\end{aligned} \\begin{aligned} 5=(0000\\ 0101)_2\\\\ 5\\ \\text{\u7684\u8865\u7801} =(1111\\ 1010)_2\\\\ \\tt\\ \\text{~}\\rm5=(1111\\ 1010)_2 \\end{aligned}","title":"\u53d6\u53cd"},{"location":"math/bit/#_3","text":"\u4e0e\u524d\u9762\u7684 4 \u79cd\u8fd0\u7b97\u76f8\u4f3c\uff0c\u8fd9\u4e24\u79cd\u8fd0\u7b97\u4ecd\u662f\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u8fdb\u884c\u64cd\u4f5c\u3002 \u5de6\u79fb\uff08 << \uff09 \u5c06\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u540e\u7684\u6570\u5b57\u6574\u4f53\u5411\u5de6\u79fb\u52a8\u3002 num << i // \u8868\u793a\u5c06 num num \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u5411\u5de6\u79fb\u52a8 i i \u4f4d\uff08\u6240\u5f97\u7684\u503c\uff09 \u53f3\u79fb\uff08 >> \uff09 \u5c06\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u540e\u7684\u6570\u5b57\u6574\u4f53\u5411\u53f3\u79fb\u52a8\u3002 num >> i // \u8868\u793a\u5c06 num num \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u540e\u5411\u5de6\u79fb\u52a8 i i \u4f4d\uff08\u6240\u5f97\u7684\u503c\uff09 \u4e3e\u4f8b\uff1a \\begin{aligned} &5&&=&&(00000101)_2\\\\ &5\\tt\\,<<\\,\\rm1&&=&&(00001010)_2\\!\\!\\!&=&&\\!\\!\\!20\\\\ &5\\tt>>\\rm1&&=&&(00000010)_2&=&&2 \\end{aligned} \\begin{aligned} &5&&=&&(00000101)_2\\\\ &5\\tt\\,<<\\,\\rm1&&=&&(00001010)_2\\!\\!\\!&=&&\\!\\!\\!20\\\\ &5\\tt>>\\rm1&&=&&(00000010)_2&=&&2 \\end{aligned} \u5728 C++ \u4e2d\uff0c\u53f3\u79fb\u64cd\u4f5c\u4e2d\u53f3\u4fa7\u591a\u4f59\u7684\u4f4d\u5c06\u4f1a\u88ab\u820d\u5f03\u3002\u800c\u5de6\u4fa7\u8f83\u4e3a\u590d\u6742\uff1a\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6570\uff0c\u4f1a\u5728\u5de6\u4fa7\u8865 0\uff1b\u800c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6570\uff0c\u5219\u4f1a\u7528\u6700\u9ad8\u4f4d\u7684\u6570\u8865\u9f50\uff08Replicate most significant bit on left\uff09\u3002 \u6ce8\u610f\uff1a \u5de6\u79fb\u548c\u53f3\u79fb\u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u5e76\u975e\u5bf9 num num \u672c\u8eab\u8fdb\u884c\u64cd\u4f5c\u3002 \u5de6\u79fb\u548c\u53f3\u79fb\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u56db\u5219\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982 x<<1+1 x<<1+1 \u4f1a\u88ab\u89e3\u91ca\u4e3a x<<(1+1) x<<(1+1) \uff0c\u6240\u4ee5\u5fc5\u8981\u7684\u65f6\u5019\uff0c\u8981\u4f7f\u7528\u62ec\u53f7\u3002","title":"\u5de6\u79fb\u548c\u53f3\u79fb"},{"location":"math/bit/#_4","text":"\u5982\u679c num num \u662f\u6b63\u6570\uff0c num << i \u76f8\u5f53\u4e8e num num \u4e58\u4ee5 2 \u7684 i i \u6b21\u65b9\uff0c\u800c num >> i \u76f8\u5f53\u4e8e num num \u9664\u4ee5 2 \u7684 i i \u6b21\u65b9\u3002 (\u4f4d\u8fd0\u7b97\u6bd4 % \u548c / \u64cd\u4f5c\u5feb\u5f97\u591a) (\u636e 2018JSOI \u590f\u4ee4\u8425\uff0c\u6548\u7387\u53ef\u4ee5\u63d0\u9ad8 60%) Warning \u4e3a\u4ec0\u4e48\u8981\u5f3a\u8c03\u662f\u6b63\u6570\u5462\uff1f\u8003\u8651\u4e00\u4e0b -1 >> 3 num * 10 = (num<<1) + (num<<3) num & 1 \u76f8\u5f53\u4e8e\u53d6 num num \u4e8c\u8fdb\u5236\u7684\u6700\u672b\u4f4d\uff0c\u53ef\u7528\u4e8e\u5224\u65ad num num \u7684\u5947\u5076\u6027\uff0c\u4e8c\u8fdb\u5236\u7684\u6700\u672b\u4f4d\u4e3a 0 \u8868\u793a\u8be5\u6570\u4e3a\u5076\u6570\uff0c\u6700\u672b\u4f4d\u4e3a 1 \u8868\u793a\u8be5\u6570\u4e3a\u5947\u6570\u3002 1 2 3 4 5 6 // \u5229\u7528\u4f4d\u8fd0\u7b97\u7684\u5feb\u6377\u7684 swap \u4ee3\u7801 void swap ( int & a , int & b ) { a = a ^ b ; b = a ^ b ; a = a ^ b ; } \u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u96c6\u5408\uff080 \u8868\u793a\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c1 \u8868\u793a\u5728\u96c6\u5408\u4e2d\uff09\u3002\u6bd4\u5982\u96c6\u5408 {1, 3, 4, 8} \uff0c\u53ef\u4ee5\u8868\u793a\u6210 0b00000000000000000000000100011010 \uff0c\u5341\u8fdb\u5236\u5c31\u662f 2^8+2^4+2^3+2^1=282 2^8+2^4+2^3+2^1=282 \u3002 \u800c\u5bf9\u5e94\u7684\u4f4d\u8fd0\u7b97\u4e5f\u5c31\u53ef\u4ee5\u770b\u4f5c\u662f\u5bf9\u96c6\u5408\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 \u64cd\u4f5c \u96c6\u5408\u8868\u793a \u4f4d\u8fd0\u7b97\u8bed\u53e5 \u4ea4\u96c6 a \\cap b a \\cap b a & b \u5e76\u96c6 a \\cup b a \\cup b a | b \u8865\u96c6 \\bar{a} \\bar{a} ~a \u5dee\u96c6 a \\setminus b a \\setminus b ~a \u5bf9\u79f0\u5dee a\\triangle b a\\triangle b a ^ b","title":"\u4f4d\u8fd0\u7b97\u7684\u5e94\u7528"},{"location":"math/bit/#_5","text":"\u4e58\u4ee5 2 \u8fd0\u7b97\u3002 1 2 3 int mulTwo ( int n ) { // \u8ba1\u7b97 n*2 return n << 1 ; } \u9664\u4ee5 2 \u8fd0\u7b97\u3002 1 2 3 int divTwo ( int n ) { // \u8d1f\u5947\u6570\u7684\u8fd0\u7b97\u4e0d\u53ef\u7528 return n >> 1 ; // \u9664\u4ee5 2 } \u4e58\u4ee5 2 \u7684 m m \u6b21\u65b9\u3002 1 2 3 int mulTwoPower ( int n , int m ) { // \u8ba1\u7b97 n*(2^m) return n << m ; } \u9664\u4ee5 2 \u7684 m m \u6b21\u65b9\u3002 1 2 3 int divTwoPower ( int n , int m ) { // \u8ba1\u7b97 n/(2^m) return n >> m ; } \u5224\u65ad\u4e00\u4e2a\u6570\u7684\u5947\u5076\u6027\u3002 1 boolean isOddNumber ( int n ) { return n & 1 ; } \u53d6\u7edd\u5bf9\u503c\uff08\u67d0\u4e9b\u673a\u5668\u4e0a\uff0c\u6548\u7387\u6bd4 n > 0 ? n : -n \u9ad8\uff09\u3002 1 2 3 4 5 6 7 int abs ( int n ) { return ( n ^ ( n >> 31 )) - ( n >> 31 ); /* n>>31 \u53d6\u5f97 n \u7684\u7b26\u53f7\uff0c\u82e5 n \u4e3a\u6b63\u6570\uff0cn>>31 \u7b49\u4e8e 0\uff0c\u82e5 n \u4e3a\u8d1f\u6570\uff0cn>>31 \u7b49\u4e8e - 1 \u82e5 n \u4e3a\u6b63\u6570 n^0=0, \u6570\u4e0d\u53d8\uff0c\u82e5 n \u4e3a\u8d1f\u6570\u6709 n^-1 \u9700\u8981\u8ba1\u7b97 n \u548c - 1 \u7684\u8865\u7801\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c n \u53d8\u53f7\u5e76\u4e14\u4e3a n \u7684\u7edd\u5bf9\u503c\u51cf 1\uff0c\u518d\u51cf\u53bb - 1 \u5c31\u662f\u7edd\u5bf9\u503c */ } \u53d6\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\uff08\u67d0\u4e9b\u673a\u5668\u4e0a\uff0c\u6548\u7387\u6bd4 a > b ? a : b \u9ad8\uff09\u3002 1 2 3 4 int max ( int a , int b ) { return b & (( a - b ) >> 31 ) | a & ( ~ ( a - b ) >> 31 ); /* \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a - 1 */ } \u53d6\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u503c\uff08\u67d0\u4e9b\u673a\u5668\u4e0a\uff0c\u6548\u7387\u6bd4 a > b ? b : a \u9ad8\uff09\u3002 1 2 3 4 int min ( int a , int b ) { return a & (( a - b ) >> 31 ) | b & ( ~ ( a - b ) >> 31 ); /* \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a - 1 */ } \u5224\u65ad\u7b26\u53f7\u662f\u5426\u76f8\u540c\u3002 1 2 3 4 boolean isSameSign ( int x , int y ) { // \u6709 0 \u7684\u60c5\u51b5\u4f8b\u5916 return ( x ^ y ) >= 0 ; // true \u8868\u793a x \u548c y \u6709\u76f8\u540c\u7684\u7b26\u53f7\uff0cfalse \u8868\u793a x,y \u6709\u76f8\u53cd\u7684\u7b26\u53f7\u3002 } \u8ba1\u7b97 2 \u7684 n n \u6b21\u65b9\u3002 1 2 3 int getFactorialofTwo ( int n ) { // n > 0 return 1 << n ; // 2 \u7684 n \u6b21\u65b9 } \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f 2 \u7684\u5e42\u3002 1 2 3 4 5 boolean isFactorialofTwo ( int n ) { return n > 0 ? ( n & ( n - 1 )) == 0 : false ; /* \u5982\u679c\u662f 2 \u7684\u5e42\uff0cn \u4e00\u5b9a\u662f 100... n-1 \u5c31\u662f 1111.... \u6240\u4ee5\u505a\u4e0e\u8fd0\u7b97\u7ed3\u679c\u4e3a 0 */ } \u5bf9 2 \u7684 n n \u6b21\u65b9\u53d6\u4f59\u3002 1 2 3 4 5 int quyu ( int m , int n ) { // n \u4e3a 2 \u7684\u6b21\u65b9 return m & ( n - 1 ); /* \u5982\u679c\u662f 2 \u7684\u5e42\uff0cn \u4e00\u5b9a\u662f 100... n-1 \u5c31\u662f 1111.... \u6240\u4ee5\u505a\u4e0e\u8fd0\u7b97\u7ed3\u679c\u4fdd\u7559 m \u5728 n \u8303\u56f4\u7684\u975e 0 \u7684\u4f4d */ } \u6c42\u4e24\u4e2a\u6574\u6570\u7684\u5e73\u5747\u503c\u3002 1 2 3 int getAverage ( int x , int y ) { return ( x + y ) >> 1 ; \uff5d \u904d\u5386\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 1 2 3 4 int b = 0 ; do { // process subset b } while ( b = ( b - x ) & x );","title":"\u4f4d\u8fd0\u7b97\u7684\u5e38\u7528\u65b9\u6cd5"},{"location":"math/bit/#_6","text":"CODEVS 2743 \u9ed1\u767d\u68cb\u6e38\u620f","title":"\u9898\u76ee\u63a8\u8350"},{"location":"math/bit/#_7","text":"\u4f4d\u8fd0\u7b97\u6280\u5de7\uff1a https://graphics.stanford.edu/~seander/bithacks.html","title":"\u53c2\u8003"},{"location":"math/bsgs/","text":"\u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5 \u00b6 \u57fa\u7840\u7bc7 \u00b6 \u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5\u82f1\u6587\u540d\uff1a baby-step gaint-step (BSGS) . \u8be5\u7b97\u6cd5\u53ef\u4ee5\u5728 O(\\sqrt{q}) O(\\sqrt{q}) \u7528\u4e8e\u6c42\u89e3 a^x \\equiv b \\bmod p a^x \\equiv b \\bmod p \u5176\u4e2d p p \u662f\u4e2a\u8d28\u6570\u7684\u65b9\u7a0b\u7684\u89e3 x x \u6ee1\u8db3 0 \\le x < p 0 \\le x < p . \u4ee4 x = A \\lceil \\sqrt p \\rceil - B x = A \\lceil \\sqrt p \\rceil - B \uff0c\u5176\u4e2d 0\\le A,B \\le \\lceil \\sqrt p \\rceil 0\\le A,B \\le \\lceil \\sqrt p \\rceil \uff0c \u5219\u6709 a^{A\\lceil \\sqrt p \\rceil -B} \\equiv b a^{A\\lceil \\sqrt p \\rceil -B} \\equiv b \uff0c\u7a0d\u52a0\u53d8\u6362\uff0c\u5219\u6709 a^{A\\lceil \\sqrt p \\rceil} \\equiv ba^B a^{A\\lceil \\sqrt p \\rceil} \\equiv ba^B . \u6211\u4eec\u5df2\u77e5\u7684\u662f a,b a,b \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u7b97\u51fa\u7b49\u5f0f\u53f3\u8fb9\u7684 ba^B ba^B \u7684\u6240\u6709\u53d6\u503c\uff0c\u679a\u4e3e B B \uff0c\u7528 hash/map \u5b58\u4e0b\u6765\uff0c\u7136\u540e\u9010\u4e00\u8ba1\u7b97 a^{A\\lceil \\sqrt p \\rceil} a^{A\\lceil \\sqrt p \\rceil} \uff0c\u679a\u4e3e A A \uff0c\u5bfb\u627e\u662f\u5426\u6709\u4e0e\u4e4b\u76f8\u7b49\u7684 ba^B ba^B \uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u7684 x x \uff0c x=A \\lceil \\sqrt p \\rceil - B x=A \\lceil \\sqrt p \\rceil - B . \u6ce8\u610f\u5230 A,B A,B \u5747\u5c0f\u4e8e \\lceil \\sqrt p \\rceil \\lceil \\sqrt p \\rceil \uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt q) O(\\sqrt q) \uff0c\u7528 map \u7684\u8bdd\u4f1a\u591a\u4e00\u4e2a \\log \\log . BZOJ-2480 \u662f\u4e00\u9053\u6a21\u677f\u9898\uff08\u53ef\u80fd\u662f\u6743\u9650\u9898\uff09\uff0c BZOJ-3122 \u662f\u4e00\u9053\u7565\u52a0\u53d8\u5316\u7684\u9898\uff0c\u4ee3\u7801\u53ef\u4ee5\u5728 Steaunk \u7684\u535a\u5ba2 \u4e2d\u770b\u5230. \u7565\u5fae\u8fdb\u9636\u7bc7 \u00b6 \u6c42\u89e3 x^a \\equiv b \\bmod p x^a \\equiv b \\bmod p \u5176\u4e2d p p \u662f\u4e2a\u8d28\u6570. \u8be5\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u8f6c\u5316\u4e3a\u6210 \u57fa\u7840\u7bc7 \u4e2d\u7684\u6a21\u578b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u5173\u4e8e \u539f\u6839 \u7684\u6982\u5ff5. \u539f\u6839\u7684\u5b9a\u4e49 \u4e3a\uff1a\u5bf9\u4e8e\u4efb\u610f\u6570 a a \uff0c\u6ee1\u8db3 (a,p)=1 (a,p)=1 \uff0c\u4e14 t t \u4e3a\u6700\u5c0f\u7684 \u6b63\u6574\u6570 \u6ee1\u8db3 a^t \\equiv 1 \\bmod p a^t \\equiv 1 \\bmod p \uff0c\u5219\u79f0 t t \u662f a a \u6a21 p p \u610f\u4e49\u4e0b\u7684\u6b21\u6570\uff0c\u82e5 t=\\varphi(p) t=\\varphi(p) \uff0c\u5219\u79f0 a a \u662f p p \u7684\u539f\u6839. \u9996\u5148\u6839\u636e \u539f\u6839\u5b58\u5728\u7684\u6761\u4ef6 \uff0c\u5bf9\u4e0e\u6240\u6709\u7684\u7d20\u6570 p>2 p>2 \u548c\u6b63\u6574\u6570 e e \uff0c\u5f53\u4e14\u4ec5\u5f53 n=1,2,4,p^e,2p^e n=1,2,4,p^e,2p^e \u65f6\u6709\u539f\u6839\uff0c \u90a3\u4e48\u7531\u4e8e\u5f0f\u5b50\u4e2d\u7684\u6a21\u6570 p p \uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a g g \u6ee1\u8db3 g g \u662f p p \u7684\u539f\u6839\uff0c\u5373\u5bf9\u4e8e\u4efb\u610f\u7684\u6570 x x \u5728\u6a21 p p \u610f\u4e49\u4e0b\u4e00\u5b9a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6570 i i \uff0c\u6ee1\u8db3 x = g^i x = g^i \uff0c\u4e14 0 \\le x,i < p 0 \\le x,i < p . \u6240\u4ee5\u6211\u4eec\u4ee4 x=g^c x=g^c \uff0c g g \u662f p p \u7684\u539f\u6839\uff08\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a g g \u548c c c \uff09\uff0c\u5219\u4e3a\u6c42 (g^c)^a \\equiv b \\bmod p (g^c)^a \\equiv b \\bmod p \u7684\u5173\u4e8e c c \u7684\u89e3\u96c6\uff0c\u7a0d\u52a0\u53d8\u6362\uff0c\u5219\u6709 (g^a)^c \\equiv b \\bmod p (g^a)^c \\equiv b \\bmod p \uff0c\u4e8e\u662f\u5c31\u8f6c\u6362\u6210\u4e86\u6211\u4eec\u719f\u77e5\u7684 BSGS \u7684\u57fa\u672c\u6a21\u578b\u4e86\uff0c\u5373\u53ef\u5728 O(\\sqrt p) O(\\sqrt p) \u89e3\u51b3. \u90a3\u4e48\u5173\u952e\u7684\u95ee\u9898\u5c31\u5728\u4e8e\u5982\u4f55\u627e\u5230\u8fd9\u4e2a g g \u4e86\uff1f \u5173\u4e8e\u5bf9\u4e8e\u5b58\u5728\u539f\u6839\u7684\u6570 p p \u6709\u8fd9\u6837\u7684 \u6027\u8d28 \uff1a\u82e5 t t \u662f a a \u6a21 p p \u7684\u6b21\u6570\uff08\u8fd9\u91cc\u8574\u542b\u4e86 (a,p)=1 (a,p)=1 \uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6570 d d \uff0c\u6ee1\u8db3 a^d \\equiv 1 \\bmod p a^d \\equiv 1 \\bmod p \uff0c\u5219 t \\mid d t \\mid d . PROOF \u8bb0 d = tq+r d = tq+r \uff0c 0 \\le r < t 0 \\le r < t . \\because a^d \\equiv a^{xq+r} \\equiv (a^t)^qa^r \\equiv a^r \\equiv 1 \\because a^d \\equiv a^{xq+r} \\equiv (a^t)^qa^r \\equiv a^r \\equiv 1 . \\because 0 \\le r < t \\because 0 \\le r < t \uff0c t t \u662f a a \u6a21 p p \u7684\u6b21\u6570\uff0c\u5373 t t \u662f\u6700\u5c0f\u7684 \u6b63\u6574\u6570 \u6ee1\u8db3 a^t \\equiv 1 a^t \\equiv 1 . \\therefore r = 0 \\therefore r = 0 . \u5373 d = tq d = tq \uff0c t \\mid d t \\mid d Q.E.D. \u7531\u6b64\u5f53 p p \u662f\u8d28\u6570\u7684\u65f6\u5019\u8fd8\u6709\u8fd9\u6837\u7684\u63a8\u8bba\uff1a\u5982\u679c\u4e0d\u5b58\u5728\u5c0f\u4e8e p p \u4e14\u6574\u9664 p-1 p-1 \u6b63\u6574\u6570 t t , \u6ee1\u8db3 a^t \\equiv 1 a^t \\equiv 1 \uff0c\u90a3\u4e48\u53c8\u6839\u636e \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff0c\u6709 a^{p-1} \\equiv 1 a^{p-1} \\equiv 1 \uff0c\u6240\u4ee5 p-1 p-1 \u662f a a \u6a21 p p \u7684\u6b21\u6570\uff0c\u5373 a a \u662f p p \u7684\u539f\u6839. \u4e8e\u662f\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u57fa\u4e8e \u539f\u6839\u5206\u5e03 \u7684\u7b97\u6cd5\u6765\u627e\u539f\u6839\uff0c\u9996\u5148\u628a p-1 p-1 \u7684\u56e0\u6570\u5168\u90e8\u6c42\u51fa\u6765\uff0c\u7136\u540e\u4ece 2 2 \u5230 p-1 p-1 \u679a\u4e3e\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u539f\u6839\uff0c\u5982\u679c\u5bf9\u4e8e\u6570 g g \uff0c \\exists g^t \\equiv 1 \\bmod p \\exists g^t \\equiv 1 \\bmod p \uff0c t t \u662f p-1 p-1 \u7684\u56e0\u6570\uff0c\u5219 g g \u4e00\u5b9a\u4e0d\u662f p p \u7684\u539f\u6839. \u770b\u4e0a\u53bb\u590d\u6742\u5ea6\u597d\u50cf\u5f88\u7206\u70b8\uff08\u53ef\u80fd\u786e\u5b9e\u662f\u7206\u70b8\u7684\uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u5c0f\u7684\u539f\u6839\u4e0d\u4f1a\u5f88\u5927\uff09. \u57fa\u4e8e\u4e00\u4e2a \u5047\u8bbe \uff0c\u539f\u8054\u7cfb\u6839\u662f \u5747\u5300\u5206\u5e03 \u7684\uff0c\u6211\u4eec \u4f2a\u8bc1\u660e \u4e00\u4e0b\u603b\u590d\u6742\u5ea6 \uff1a\u539f\u6839\u6570\u91cf\u5b9a\u7406\uff1a\u6570 p p \u8981\u4e48\u6ca1\u6709\u539f\u6839\uff0c\u8981\u4e48\u6709 \\varphi(\\varphi(p)) \\varphi(\\varphi(p)) \u4e2a\u539f\u6839. \u7531\u4e8e p p \u662f\u8d28\u6570\uff0c\u6240\u4ee5 p p \u6709 \\varphi(p-1) \\varphi(p-1) \u4e2a\u539f\u6839\uff0c\u6240\u4ee5\u5927\u6982\u6700\u5c0f\u7684\u539f\u6839\u4e3a \\frac{p}{\\varphi(p-1)}=O(\\log\\log n) \\frac{p}{\\varphi(p-1)}=O(\\log\\log n) \uff0c\u7531\u4e8e\u6c42\u6bcf\u4e00\u4e2a\u6570\u65f6\u8981\u679a\u4e3e\u4e00\u904d p-1 p-1 \u6240\u6709\u7684\u56e0\u6570 O(\\sqrt p) O(\\sqrt p) \u6765\u5224\u65ad\u5176\u662f\u5426\u4e3a\u539f\u6839\uff0c\u6700\u540e\u518d\u7b97\u4e0a BSGS \u7684\u590d\u6742\u5ea6 O(\\sqrt{p}) O(\\sqrt{p}) \uff0c\u5219\u590d\u6742\u5ea6\u7ea6\u4e3a O(\\sqrt{p}\\log \\log n) O(\\sqrt{p}\\log \\log n) . BZOJ-1319 \u662f\u4e00\u9053\u6a21\u677f\u9898\uff0c\u4ee3\u7801\u53ef\u4ee5\u5728 Steaunk \u7684\u535a\u5ba2 \u4e2d\u770b\u5230. \u6269\u5c55\u7bc7 \u00b6 \u4e0a\u6587\u63d0\u5230\u7684\u60c5\u51b5\u662f c c \u4e3a\u7d20\u6570\u7684\u60c5\u51b5\uff0c\u5982\u679c c c \u4e0d\u662f\u7d20\u6570\u5462\uff1f \u8fd9\u5c31\u9700\u8981\u7528\u5230\u6269\u5c55 BSGS \u7b97\u6cd5\uff0c\u4e0d\u8981\u6c42 c c \u4e3a\u7d20\u6570\uff01 \u6269\u5c55 BSGS \u7528\u5230\u4e86\u540c\u4f59\u7684\u4e00\u6761\u6027\u8d28\uff1a \u4ee4 d=gcd(a,c) ,a=m \\times d,b=n \\times d,p=k \\times d d=gcd(a,c) ,a=m \\times d,b=n \\times d,p=k \\times d \uff1b \u5219 m \\times d \\equiv b \\times d \\pmod {c \\times d} m \\times d \\equiv b \\times d \\pmod {c \\times d} \u7b49\u4ef7\u4e8e m \\equiv n \\pmod k m \\equiv n \\pmod k \u6240\u4ee5\u6211\u4eec\u8981\u5148\u6d88\u9664\u56e0\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 d = 1 , num = 0 , t = 0 ; for ( int t = gcd ( a , c ); t != 1 ; t = gcd ( a , c )) { if ( b % t ) { \\\\\u65e0\u89e3 } b /= t ; c /= t ; d *= a / t ; num ++ ; } \u6d88\u9664\u5b8c\u540e\uff0c\u5c31\u53d8\u6210\u4e86 d \\times m^{x-num} \\equiv n \\pmod k d \\times m^{x-num} \\equiv n \\pmod k \uff0c\u4ee4 x=i \\times m+j+num x=i \\times m+j+num \uff0c\u540e\u9762\u7684\u505a\u6cd5\u5c31\u548c\u666e\u901a BSGS \u4e00\u6837\u4e86\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a i,j \\le 0 i,j \\le 0 \uff0c\u6240\u4ee5 x \\le num x \\le num \uff0c\u4f46\u4e0d\u6392\u9664\u89e3\u5c0f\u4e8e\u7b49\u4e8e num num \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u6d88\u56e0\u5b50\u4e4b\u524d\u505a\u4e00\u4e0b \\Theta(\\log_2 p) \\Theta(\\log_2 p) \u679a\u4e3e\uff0c\u76f4\u63a5\u9a8c\u8bc1 a^i \\mod c = b a^i \\mod c = b \uff0c\u8fd9\u6837\u5c31\u80fd\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002","title":"BSGS"},{"location":"math/bsgs/#_1","text":"","title":"\u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5"},{"location":"math/bsgs/#_2","text":"\u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5\u82f1\u6587\u540d\uff1a baby-step gaint-step (BSGS) . \u8be5\u7b97\u6cd5\u53ef\u4ee5\u5728 O(\\sqrt{q}) O(\\sqrt{q}) \u7528\u4e8e\u6c42\u89e3 a^x \\equiv b \\bmod p a^x \\equiv b \\bmod p \u5176\u4e2d p p \u662f\u4e2a\u8d28\u6570\u7684\u65b9\u7a0b\u7684\u89e3 x x \u6ee1\u8db3 0 \\le x < p 0 \\le x < p . \u4ee4 x = A \\lceil \\sqrt p \\rceil - B x = A \\lceil \\sqrt p \\rceil - B \uff0c\u5176\u4e2d 0\\le A,B \\le \\lceil \\sqrt p \\rceil 0\\le A,B \\le \\lceil \\sqrt p \\rceil \uff0c \u5219\u6709 a^{A\\lceil \\sqrt p \\rceil -B} \\equiv b a^{A\\lceil \\sqrt p \\rceil -B} \\equiv b \uff0c\u7a0d\u52a0\u53d8\u6362\uff0c\u5219\u6709 a^{A\\lceil \\sqrt p \\rceil} \\equiv ba^B a^{A\\lceil \\sqrt p \\rceil} \\equiv ba^B . \u6211\u4eec\u5df2\u77e5\u7684\u662f a,b a,b \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u7b97\u51fa\u7b49\u5f0f\u53f3\u8fb9\u7684 ba^B ba^B \u7684\u6240\u6709\u53d6\u503c\uff0c\u679a\u4e3e B B \uff0c\u7528 hash/map \u5b58\u4e0b\u6765\uff0c\u7136\u540e\u9010\u4e00\u8ba1\u7b97 a^{A\\lceil \\sqrt p \\rceil} a^{A\\lceil \\sqrt p \\rceil} \uff0c\u679a\u4e3e A A \uff0c\u5bfb\u627e\u662f\u5426\u6709\u4e0e\u4e4b\u76f8\u7b49\u7684 ba^B ba^B \uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u7684 x x \uff0c x=A \\lceil \\sqrt p \\rceil - B x=A \\lceil \\sqrt p \\rceil - B . \u6ce8\u610f\u5230 A,B A,B \u5747\u5c0f\u4e8e \\lceil \\sqrt p \\rceil \\lceil \\sqrt p \\rceil \uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt q) O(\\sqrt q) \uff0c\u7528 map \u7684\u8bdd\u4f1a\u591a\u4e00\u4e2a \\log \\log . BZOJ-2480 \u662f\u4e00\u9053\u6a21\u677f\u9898\uff08\u53ef\u80fd\u662f\u6743\u9650\u9898\uff09\uff0c BZOJ-3122 \u662f\u4e00\u9053\u7565\u52a0\u53d8\u5316\u7684\u9898\uff0c\u4ee3\u7801\u53ef\u4ee5\u5728 Steaunk \u7684\u535a\u5ba2 \u4e2d\u770b\u5230.","title":"\u57fa\u7840\u7bc7"},{"location":"math/bsgs/#_3","text":"\u6c42\u89e3 x^a \\equiv b \\bmod p x^a \\equiv b \\bmod p \u5176\u4e2d p p \u662f\u4e2a\u8d28\u6570. \u8be5\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u8f6c\u5316\u4e3a\u6210 \u57fa\u7840\u7bc7 \u4e2d\u7684\u6a21\u578b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u5173\u4e8e \u539f\u6839 \u7684\u6982\u5ff5. \u539f\u6839\u7684\u5b9a\u4e49 \u4e3a\uff1a\u5bf9\u4e8e\u4efb\u610f\u6570 a a \uff0c\u6ee1\u8db3 (a,p)=1 (a,p)=1 \uff0c\u4e14 t t \u4e3a\u6700\u5c0f\u7684 \u6b63\u6574\u6570 \u6ee1\u8db3 a^t \\equiv 1 \\bmod p a^t \\equiv 1 \\bmod p \uff0c\u5219\u79f0 t t \u662f a a \u6a21 p p \u610f\u4e49\u4e0b\u7684\u6b21\u6570\uff0c\u82e5 t=\\varphi(p) t=\\varphi(p) \uff0c\u5219\u79f0 a a \u662f p p \u7684\u539f\u6839. \u9996\u5148\u6839\u636e \u539f\u6839\u5b58\u5728\u7684\u6761\u4ef6 \uff0c\u5bf9\u4e0e\u6240\u6709\u7684\u7d20\u6570 p>2 p>2 \u548c\u6b63\u6574\u6570 e e \uff0c\u5f53\u4e14\u4ec5\u5f53 n=1,2,4,p^e,2p^e n=1,2,4,p^e,2p^e \u65f6\u6709\u539f\u6839\uff0c \u90a3\u4e48\u7531\u4e8e\u5f0f\u5b50\u4e2d\u7684\u6a21\u6570 p p \uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a g g \u6ee1\u8db3 g g \u662f p p \u7684\u539f\u6839\uff0c\u5373\u5bf9\u4e8e\u4efb\u610f\u7684\u6570 x x \u5728\u6a21 p p \u610f\u4e49\u4e0b\u4e00\u5b9a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6570 i i \uff0c\u6ee1\u8db3 x = g^i x = g^i \uff0c\u4e14 0 \\le x,i < p 0 \\le x,i < p . \u6240\u4ee5\u6211\u4eec\u4ee4 x=g^c x=g^c \uff0c g g \u662f p p \u7684\u539f\u6839\uff08\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a g g \u548c c c \uff09\uff0c\u5219\u4e3a\u6c42 (g^c)^a \\equiv b \\bmod p (g^c)^a \\equiv b \\bmod p \u7684\u5173\u4e8e c c \u7684\u89e3\u96c6\uff0c\u7a0d\u52a0\u53d8\u6362\uff0c\u5219\u6709 (g^a)^c \\equiv b \\bmod p (g^a)^c \\equiv b \\bmod p \uff0c\u4e8e\u662f\u5c31\u8f6c\u6362\u6210\u4e86\u6211\u4eec\u719f\u77e5\u7684 BSGS \u7684\u57fa\u672c\u6a21\u578b\u4e86\uff0c\u5373\u53ef\u5728 O(\\sqrt p) O(\\sqrt p) \u89e3\u51b3. \u90a3\u4e48\u5173\u952e\u7684\u95ee\u9898\u5c31\u5728\u4e8e\u5982\u4f55\u627e\u5230\u8fd9\u4e2a g g \u4e86\uff1f \u5173\u4e8e\u5bf9\u4e8e\u5b58\u5728\u539f\u6839\u7684\u6570 p p \u6709\u8fd9\u6837\u7684 \u6027\u8d28 \uff1a\u82e5 t t \u662f a a \u6a21 p p \u7684\u6b21\u6570\uff08\u8fd9\u91cc\u8574\u542b\u4e86 (a,p)=1 (a,p)=1 \uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6570 d d \uff0c\u6ee1\u8db3 a^d \\equiv 1 \\bmod p a^d \\equiv 1 \\bmod p \uff0c\u5219 t \\mid d t \\mid d . PROOF \u8bb0 d = tq+r d = tq+r \uff0c 0 \\le r < t 0 \\le r < t . \\because a^d \\equiv a^{xq+r} \\equiv (a^t)^qa^r \\equiv a^r \\equiv 1 \\because a^d \\equiv a^{xq+r} \\equiv (a^t)^qa^r \\equiv a^r \\equiv 1 . \\because 0 \\le r < t \\because 0 \\le r < t \uff0c t t \u662f a a \u6a21 p p \u7684\u6b21\u6570\uff0c\u5373 t t \u662f\u6700\u5c0f\u7684 \u6b63\u6574\u6570 \u6ee1\u8db3 a^t \\equiv 1 a^t \\equiv 1 . \\therefore r = 0 \\therefore r = 0 . \u5373 d = tq d = tq \uff0c t \\mid d t \\mid d Q.E.D. \u7531\u6b64\u5f53 p p \u662f\u8d28\u6570\u7684\u65f6\u5019\u8fd8\u6709\u8fd9\u6837\u7684\u63a8\u8bba\uff1a\u5982\u679c\u4e0d\u5b58\u5728\u5c0f\u4e8e p p \u4e14\u6574\u9664 p-1 p-1 \u6b63\u6574\u6570 t t , \u6ee1\u8db3 a^t \\equiv 1 a^t \\equiv 1 \uff0c\u90a3\u4e48\u53c8\u6839\u636e \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff0c\u6709 a^{p-1} \\equiv 1 a^{p-1} \\equiv 1 \uff0c\u6240\u4ee5 p-1 p-1 \u662f a a \u6a21 p p \u7684\u6b21\u6570\uff0c\u5373 a a \u662f p p \u7684\u539f\u6839. \u4e8e\u662f\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u57fa\u4e8e \u539f\u6839\u5206\u5e03 \u7684\u7b97\u6cd5\u6765\u627e\u539f\u6839\uff0c\u9996\u5148\u628a p-1 p-1 \u7684\u56e0\u6570\u5168\u90e8\u6c42\u51fa\u6765\uff0c\u7136\u540e\u4ece 2 2 \u5230 p-1 p-1 \u679a\u4e3e\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u539f\u6839\uff0c\u5982\u679c\u5bf9\u4e8e\u6570 g g \uff0c \\exists g^t \\equiv 1 \\bmod p \\exists g^t \\equiv 1 \\bmod p \uff0c t t \u662f p-1 p-1 \u7684\u56e0\u6570\uff0c\u5219 g g \u4e00\u5b9a\u4e0d\u662f p p \u7684\u539f\u6839. \u770b\u4e0a\u53bb\u590d\u6742\u5ea6\u597d\u50cf\u5f88\u7206\u70b8\uff08\u53ef\u80fd\u786e\u5b9e\u662f\u7206\u70b8\u7684\uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u5c0f\u7684\u539f\u6839\u4e0d\u4f1a\u5f88\u5927\uff09. \u57fa\u4e8e\u4e00\u4e2a \u5047\u8bbe \uff0c\u539f\u8054\u7cfb\u6839\u662f \u5747\u5300\u5206\u5e03 \u7684\uff0c\u6211\u4eec \u4f2a\u8bc1\u660e \u4e00\u4e0b\u603b\u590d\u6742\u5ea6 \uff1a\u539f\u6839\u6570\u91cf\u5b9a\u7406\uff1a\u6570 p p \u8981\u4e48\u6ca1\u6709\u539f\u6839\uff0c\u8981\u4e48\u6709 \\varphi(\\varphi(p)) \\varphi(\\varphi(p)) \u4e2a\u539f\u6839. \u7531\u4e8e p p \u662f\u8d28\u6570\uff0c\u6240\u4ee5 p p \u6709 \\varphi(p-1) \\varphi(p-1) \u4e2a\u539f\u6839\uff0c\u6240\u4ee5\u5927\u6982\u6700\u5c0f\u7684\u539f\u6839\u4e3a \\frac{p}{\\varphi(p-1)}=O(\\log\\log n) \\frac{p}{\\varphi(p-1)}=O(\\log\\log n) \uff0c\u7531\u4e8e\u6c42\u6bcf\u4e00\u4e2a\u6570\u65f6\u8981\u679a\u4e3e\u4e00\u904d p-1 p-1 \u6240\u6709\u7684\u56e0\u6570 O(\\sqrt p) O(\\sqrt p) \u6765\u5224\u65ad\u5176\u662f\u5426\u4e3a\u539f\u6839\uff0c\u6700\u540e\u518d\u7b97\u4e0a BSGS \u7684\u590d\u6742\u5ea6 O(\\sqrt{p}) O(\\sqrt{p}) \uff0c\u5219\u590d\u6742\u5ea6\u7ea6\u4e3a O(\\sqrt{p}\\log \\log n) O(\\sqrt{p}\\log \\log n) . BZOJ-1319 \u662f\u4e00\u9053\u6a21\u677f\u9898\uff0c\u4ee3\u7801\u53ef\u4ee5\u5728 Steaunk \u7684\u535a\u5ba2 \u4e2d\u770b\u5230.","title":"\u7565\u5fae\u8fdb\u9636\u7bc7"},{"location":"math/bsgs/#_4","text":"\u4e0a\u6587\u63d0\u5230\u7684\u60c5\u51b5\u662f c c \u4e3a\u7d20\u6570\u7684\u60c5\u51b5\uff0c\u5982\u679c c c \u4e0d\u662f\u7d20\u6570\u5462\uff1f \u8fd9\u5c31\u9700\u8981\u7528\u5230\u6269\u5c55 BSGS \u7b97\u6cd5\uff0c\u4e0d\u8981\u6c42 c c \u4e3a\u7d20\u6570\uff01 \u6269\u5c55 BSGS \u7528\u5230\u4e86\u540c\u4f59\u7684\u4e00\u6761\u6027\u8d28\uff1a \u4ee4 d=gcd(a,c) ,a=m \\times d,b=n \\times d,p=k \\times d d=gcd(a,c) ,a=m \\times d,b=n \\times d,p=k \\times d \uff1b \u5219 m \\times d \\equiv b \\times d \\pmod {c \\times d} m \\times d \\equiv b \\times d \\pmod {c \\times d} \u7b49\u4ef7\u4e8e m \\equiv n \\pmod k m \\equiv n \\pmod k \u6240\u4ee5\u6211\u4eec\u8981\u5148\u6d88\u9664\u56e0\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 d = 1 , num = 0 , t = 0 ; for ( int t = gcd ( a , c ); t != 1 ; t = gcd ( a , c )) { if ( b % t ) { \\\\\u65e0\u89e3 } b /= t ; c /= t ; d *= a / t ; num ++ ; } \u6d88\u9664\u5b8c\u540e\uff0c\u5c31\u53d8\u6210\u4e86 d \\times m^{x-num} \\equiv n \\pmod k d \\times m^{x-num} \\equiv n \\pmod k \uff0c\u4ee4 x=i \\times m+j+num x=i \\times m+j+num \uff0c\u540e\u9762\u7684\u505a\u6cd5\u5c31\u548c\u666e\u901a BSGS \u4e00\u6837\u4e86\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a i,j \\le 0 i,j \\le 0 \uff0c\u6240\u4ee5 x \\le num x \\le num \uff0c\u4f46\u4e0d\u6392\u9664\u89e3\u5c0f\u4e8e\u7b49\u4e8e num num \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u6d88\u56e0\u5b50\u4e4b\u524d\u505a\u4e00\u4e0b \\Theta(\\log_2 p) \\Theta(\\log_2 p) \u679a\u4e3e\uff0c\u76f4\u63a5\u9a8c\u8bc1 a^i \\mod c = b a^i \\mod c = b \uff0c\u8fd9\u6837\u5c31\u80fd\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002","title":"\u6269\u5c55\u7bc7"},{"location":"math/cantor/","text":"\u5eb7\u6258\u5c55\u5f00\u53ef\u4ee5\u7528\u6765\u6c42\u4e00\u4e2a 1\\sim n 1\\sim n \u7684\u4efb\u610f\u6392\u5217\u7684\u6392\u540d\u3002 \u4ec0\u4e48\u662f\u6392\u5217\u7684\u6392\u540d\uff1f \u00b6 \u628a 1\\sim n 1\\sim n \u7684\u6240\u6709\u6392\u5217\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u8fd9\u4e2a\u6392\u5217\u7684\u4f4d\u6b21\u5c31\u662f\u5b83\u7684\u6392\u540d\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1f \u00b6 \u5eb7\u6258\u5c55\u5f00\u53ef\u4ee5\u5728 O(n^2) O(n^2) \u7684\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u4e00\u4e2a\u6392\u5217\u7684\u6392\u540d\uff0c\u5728\u7528\u5230\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u65f6\u53ef\u4ee5\u505a\u5230 O(n\\log n) O(n\\log n) \u3002 \u600e\u4e48\u5b9e\u73b0\uff1f \u00b6 \u56e0\u4e3a\u6392\u5217\u662f\u6309\u5b57\u5178\u5e8f\u6392\u540d\u7684\uff0c\u56e0\u6b64\u8d8a\u9760\u524d\u7684\u6570\u5b57\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4e24\u4e2a\u6392\u5217\u7684\u67d0\u4e00\u4f4d\u4e4b\u524d\u7684\u6570\u5b57\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e00\u4f4d\u5982\u679c\u4e0d\u76f8\u540c\uff0c\u5c31\u6309\u8fd9\u4e00\u4f4d\u6392\u5e8f\u3002 \u6bd4\u5982 4 4 \u7684\u6392\u5217\uff0c [2,3,1,4]<[2,3,4,1] [2,3,1,4]<[2,3,4,1] \uff0c\u56e0\u4e3a\u5728\u7b2c 3 3 \u4f4d\u51fa\u73b0\u4e0d\u540c\uff0c\u5219 [2,3,1,4] [2,3,1,4] \u7684\u6392\u540d\u5728 [2,3,4,1] [2,3,4,1] \u524d\u9762\u3002 \u4e3e\u4e2a\u6817\u5b50 \u00b6 \u6211\u4eec\u77e5\u9053\u957f\u4e3a 5 5 \u7684\u6392\u5217 [2,5,3,4,1] [2,5,3,4,1] \u5927\u4e8e\u4ee5 1 1 \u4e3a\u7b2c\u4e00\u4f4d\u7684\u4efb\u4f55\u6392\u5217\uff0c\u4ee5 1 1 \u4e3a\u7b2c\u4e00\u4f4d\u7684 5 5 \u7684\u6392\u5217\u6709 4! 4! \u79cd\u3002\u8fd9\u662f\u975e\u5e38\u597d\u7406\u89e3\u7684\u3002\u4f46\u662f\u6211\u4eec\u5bf9\u7b2c\u4e8c\u4f4d\u7684 5 5 \u800c\u8a00\uff0c\u5b83\u5927\u4e8e \u7b2c\u4e00\u4f4d\u4e0e\u8fd9\u4e2a\u6392\u5217\u76f8\u540c\u7684\uff0c\u800c\u8fd9\u4e00\u4f4d\u6bd4 5 5 \u5c0f\u7684 \u6240\u6709\u6392\u5217\u3002\u4e0d\u8fc7\u6211\u4eec\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u4f4d\u4e0d\u4ec5\u8981\u6bd4 5 5 \u5c0f\uff0c\u8fd8\u8981\u6ee1\u8db3\u6ca1\u6709\u5728\u5f53\u524d\u6392\u5217\u7684\u524d\u9762\u51fa\u73b0\u8fc7\uff0c\u4e0d\u7136\u7edf\u8ba1\u5c31\u91cd\u590d\u4e86\u3002\u56e0\u6b64\u8fd9\u4e00\u4f4d\u4e3a 1,3 1,3 \u6216 4 4 \uff0c\u7b2c\u4e00\u4f4d\u4e3a 2 2 \u7684\u6240\u6709\u6392\u5217\u90fd\u6bd4\u5b83\u8981\u5c0f\uff0c\u6570\u91cf\u4e3a 3\\times 3! 3\\times 3! \u3002 \u6309\u7167\u8fd9\u6837\u7edf\u8ba1\u4e0b\u53bb\uff0c\u7b54\u6848\u5c31\u662f 1+4!+3\\times 3!+2!+1=46 1+4!+3\\times 3!+2!+1=46 \u3002\u6ce8\u610f\u6211\u4eec\u7edf\u8ba1\u7684\u662f\u6392\u540d\uff0c\u56e0\u6b64\u6700\u524d\u9762\u8981 +1 +1 \u3002 \u6ce8\u610f\u5230\u6211\u4eec\u6bcf\u6b21\u8981\u7528\u5230 \u5f53\u524d\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u5b83\u7684\u6570\u8fd8\u6ca1\u6709\u51fa\u73b0 \uff0c\u8fd9\u91cc\u7528\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u6bd4\u5b83\u5c0f\u7684\u6570\u51fa\u73b0\u8fc7\u7684\u6b21\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 \u9006\u5eb7\u6258\u5c55\u5f00 \u00b6 \u56e0\u4e3a\u6392\u5217\u7684\u6392\u540d\u548c\u6392\u5217\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6240\u4ee5\u5eb7\u6258\u5c55\u5f00\u6ee1\u8db3\u53cc\u5c04\u5173\u7cfb\uff0c\u662f\u53ef\u9006\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u4e0a\u9762\u7684\u8fc7\u7a0b\u5012\u63a8\u56de\u6765\u3002 \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u6392\u5217\u7684\u6392\u540d\uff0c\u5c31\u53ef\u4ee5\u63a8\u51fa\u8fd9\u4e2a\u6392\u5217\u3002\u56e0\u4e3a 4! 4! \u662f\u4e25\u683c\u5927\u4e8e 3\\times 3!+2\\times 2!+1\\times 1! 3\\times 3!+2\\times 2!+1\\times 1! \u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u5bf9\u4e8e\u957f\u5ea6\u4e3a 5 5 \u7684\u6392\u5217\uff0c\u6392\u540d x x \u9664\u4ee5 4! 4! \u5411\u4e0b\u53d6\u6574\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u6570\u5c0f\u4e8e\u8fd9\u4e2a\u6392\u5217\u7684\u7b2c\u4e00\u4f4d\u3002 \u5f15\u7528\u4e0a\u9762\u5c55\u5f00\u7684\u4f8b\u5b50 \u00b6 \u9996\u5148\u8ba9 46-1=45 46-1=45 \uff0c 45 45 \u4ee3\u8868\u7740\u6709\u591a\u5c11\u4e2a\u6392\u5217\u6bd4\u8fd9\u4e2a\u6392\u5217\u5c0f\u3002 \\lfloor\\frac {45}{4!}\\rfloor=1 \\lfloor\\frac {45}{4!}\\rfloor=1 \uff0c\u6709\u4e00\u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u6240\u4ee5\u7b2c\u4e00\u4f4d\u662f 2 2 \u3002 \u6b64\u65f6\u8ba9\u6392\u540d\u51cf\u53bb 1\\times 4! 1\\times 4! \u5f97\u5230 21 21 \uff0c \\lfloor\\frac {21}{3!}\\rfloor=3 \\lfloor\\frac {21}{3!}\\rfloor=3 \uff0c\u6709 3 3 \u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u53bb\u6389\u5df2\u7ecf\u5b58\u5728\u7684 2 2 \uff0c\u8fd9\u4e00\u4f4d\u662f 5 5 \u3002 21-3\\times 3!=3 21-3\\times 3!=3 \uff0c \\lfloor\\frac {3}{2!}\\rfloor=1 \\lfloor\\frac {3}{2!}\\rfloor=1 \uff0c\u6709\u4e00\u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u90a3\u4e48\u8fd9\u4e00\u4f4d\u5c31\u662f 3 3 \u3002 \u8ba9 3-1\\times 2!=1 3-1\\times 2!=1 \uff0c\u6709\u4e00\u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u8fd9\u4e00\u4f4d\u662f\u5269\u4e0b\u6765\u7684\u7b2c\u4e8c\u4f4d\uff0c 4 4 \uff0c\u5269\u4e0b\u4e00\u4f4d\u5c31\u662f 1 1 \u3002\u5373 [2,5,3,4,1] [2,5,3,4,1] \u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u5f97\u5230\u4e86\u5f62\u5982 \u6709\u4e24\u4e2a\u6570\u5c0f\u4e8e\u5b83 \u8fd9\u4e00\u7ed3\u8bba\uff0c\u5c31\u77e5\u9053\u5b83\u662f\u5f53\u524d\u7b2c 3 3 \u4e2a\u6ca1\u6709\u88ab\u9009\u4e0a\u7684\u6570\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002","title":"\u5eb7\u6258\u5c55\u5f00"},{"location":"math/cantor/#_1","text":"\u628a 1\\sim n 1\\sim n \u7684\u6240\u6709\u6392\u5217\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u8fd9\u4e2a\u6392\u5217\u7684\u4f4d\u6b21\u5c31\u662f\u5b83\u7684\u6392\u540d\u3002","title":"\u4ec0\u4e48\u662f\u6392\u5217\u7684\u6392\u540d\uff1f"},{"location":"math/cantor/#_2","text":"\u5eb7\u6258\u5c55\u5f00\u53ef\u4ee5\u5728 O(n^2) O(n^2) \u7684\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u4e00\u4e2a\u6392\u5217\u7684\u6392\u540d\uff0c\u5728\u7528\u5230\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u65f6\u53ef\u4ee5\u505a\u5230 O(n\\log n) O(n\\log n) \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1f"},{"location":"math/cantor/#_3","text":"\u56e0\u4e3a\u6392\u5217\u662f\u6309\u5b57\u5178\u5e8f\u6392\u540d\u7684\uff0c\u56e0\u6b64\u8d8a\u9760\u524d\u7684\u6570\u5b57\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4e24\u4e2a\u6392\u5217\u7684\u67d0\u4e00\u4f4d\u4e4b\u524d\u7684\u6570\u5b57\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e00\u4f4d\u5982\u679c\u4e0d\u76f8\u540c\uff0c\u5c31\u6309\u8fd9\u4e00\u4f4d\u6392\u5e8f\u3002 \u6bd4\u5982 4 4 \u7684\u6392\u5217\uff0c [2,3,1,4]<[2,3,4,1] [2,3,1,4]<[2,3,4,1] \uff0c\u56e0\u4e3a\u5728\u7b2c 3 3 \u4f4d\u51fa\u73b0\u4e0d\u540c\uff0c\u5219 [2,3,1,4] [2,3,1,4] \u7684\u6392\u540d\u5728 [2,3,4,1] [2,3,4,1] \u524d\u9762\u3002","title":"\u600e\u4e48\u5b9e\u73b0\uff1f"},{"location":"math/cantor/#_4","text":"\u6211\u4eec\u77e5\u9053\u957f\u4e3a 5 5 \u7684\u6392\u5217 [2,5,3,4,1] [2,5,3,4,1] \u5927\u4e8e\u4ee5 1 1 \u4e3a\u7b2c\u4e00\u4f4d\u7684\u4efb\u4f55\u6392\u5217\uff0c\u4ee5 1 1 \u4e3a\u7b2c\u4e00\u4f4d\u7684 5 5 \u7684\u6392\u5217\u6709 4! 4! \u79cd\u3002\u8fd9\u662f\u975e\u5e38\u597d\u7406\u89e3\u7684\u3002\u4f46\u662f\u6211\u4eec\u5bf9\u7b2c\u4e8c\u4f4d\u7684 5 5 \u800c\u8a00\uff0c\u5b83\u5927\u4e8e \u7b2c\u4e00\u4f4d\u4e0e\u8fd9\u4e2a\u6392\u5217\u76f8\u540c\u7684\uff0c\u800c\u8fd9\u4e00\u4f4d\u6bd4 5 5 \u5c0f\u7684 \u6240\u6709\u6392\u5217\u3002\u4e0d\u8fc7\u6211\u4eec\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u4f4d\u4e0d\u4ec5\u8981\u6bd4 5 5 \u5c0f\uff0c\u8fd8\u8981\u6ee1\u8db3\u6ca1\u6709\u5728\u5f53\u524d\u6392\u5217\u7684\u524d\u9762\u51fa\u73b0\u8fc7\uff0c\u4e0d\u7136\u7edf\u8ba1\u5c31\u91cd\u590d\u4e86\u3002\u56e0\u6b64\u8fd9\u4e00\u4f4d\u4e3a 1,3 1,3 \u6216 4 4 \uff0c\u7b2c\u4e00\u4f4d\u4e3a 2 2 \u7684\u6240\u6709\u6392\u5217\u90fd\u6bd4\u5b83\u8981\u5c0f\uff0c\u6570\u91cf\u4e3a 3\\times 3! 3\\times 3! \u3002 \u6309\u7167\u8fd9\u6837\u7edf\u8ba1\u4e0b\u53bb\uff0c\u7b54\u6848\u5c31\u662f 1+4!+3\\times 3!+2!+1=46 1+4!+3\\times 3!+2!+1=46 \u3002\u6ce8\u610f\u6211\u4eec\u7edf\u8ba1\u7684\u662f\u6392\u540d\uff0c\u56e0\u6b64\u6700\u524d\u9762\u8981 +1 +1 \u3002 \u6ce8\u610f\u5230\u6211\u4eec\u6bcf\u6b21\u8981\u7528\u5230 \u5f53\u524d\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u5b83\u7684\u6570\u8fd8\u6ca1\u6709\u51fa\u73b0 \uff0c\u8fd9\u91cc\u7528\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u6bd4\u5b83\u5c0f\u7684\u6570\u51fa\u73b0\u8fc7\u7684\u6b21\u6570\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u4e3e\u4e2a\u6817\u5b50"},{"location":"math/cantor/#_5","text":"\u56e0\u4e3a\u6392\u5217\u7684\u6392\u540d\u548c\u6392\u5217\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6240\u4ee5\u5eb7\u6258\u5c55\u5f00\u6ee1\u8db3\u53cc\u5c04\u5173\u7cfb\uff0c\u662f\u53ef\u9006\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u4e0a\u9762\u7684\u8fc7\u7a0b\u5012\u63a8\u56de\u6765\u3002 \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u6392\u5217\u7684\u6392\u540d\uff0c\u5c31\u53ef\u4ee5\u63a8\u51fa\u8fd9\u4e2a\u6392\u5217\u3002\u56e0\u4e3a 4! 4! \u662f\u4e25\u683c\u5927\u4e8e 3\\times 3!+2\\times 2!+1\\times 1! 3\\times 3!+2\\times 2!+1\\times 1! \u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u5bf9\u4e8e\u957f\u5ea6\u4e3a 5 5 \u7684\u6392\u5217\uff0c\u6392\u540d x x \u9664\u4ee5 4! 4! \u5411\u4e0b\u53d6\u6574\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u6570\u5c0f\u4e8e\u8fd9\u4e2a\u6392\u5217\u7684\u7b2c\u4e00\u4f4d\u3002","title":"\u9006\u5eb7\u6258\u5c55\u5f00"},{"location":"math/cantor/#_6","text":"\u9996\u5148\u8ba9 46-1=45 46-1=45 \uff0c 45 45 \u4ee3\u8868\u7740\u6709\u591a\u5c11\u4e2a\u6392\u5217\u6bd4\u8fd9\u4e2a\u6392\u5217\u5c0f\u3002 \\lfloor\\frac {45}{4!}\\rfloor=1 \\lfloor\\frac {45}{4!}\\rfloor=1 \uff0c\u6709\u4e00\u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u6240\u4ee5\u7b2c\u4e00\u4f4d\u662f 2 2 \u3002 \u6b64\u65f6\u8ba9\u6392\u540d\u51cf\u53bb 1\\times 4! 1\\times 4! \u5f97\u5230 21 21 \uff0c \\lfloor\\frac {21}{3!}\\rfloor=3 \\lfloor\\frac {21}{3!}\\rfloor=3 \uff0c\u6709 3 3 \u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u53bb\u6389\u5df2\u7ecf\u5b58\u5728\u7684 2 2 \uff0c\u8fd9\u4e00\u4f4d\u662f 5 5 \u3002 21-3\\times 3!=3 21-3\\times 3!=3 \uff0c \\lfloor\\frac {3}{2!}\\rfloor=1 \\lfloor\\frac {3}{2!}\\rfloor=1 \uff0c\u6709\u4e00\u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u90a3\u4e48\u8fd9\u4e00\u4f4d\u5c31\u662f 3 3 \u3002 \u8ba9 3-1\\times 2!=1 3-1\\times 2!=1 \uff0c\u6709\u4e00\u4e2a\u6570\u5c0f\u4e8e\u5b83\uff0c\u8fd9\u4e00\u4f4d\u662f\u5269\u4e0b\u6765\u7684\u7b2c\u4e8c\u4f4d\uff0c 4 4 \uff0c\u5269\u4e0b\u4e00\u4f4d\u5c31\u662f 1 1 \u3002\u5373 [2,5,3,4,1] [2,5,3,4,1] \u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u5f97\u5230\u4e86\u5f62\u5982 \u6709\u4e24\u4e2a\u6570\u5c0f\u4e8e\u5b83 \u8fd9\u4e00\u7ed3\u8bba\uff0c\u5c31\u77e5\u9053\u5b83\u662f\u5f53\u524d\u7b2c 3 3 \u4e2a\u6ca1\u6709\u88ab\u9009\u4e0a\u7684\u6570\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002","title":"\u5f15\u7528\u4e0a\u9762\u5c55\u5f00\u7684\u4f8b\u5b50"},{"location":"math/catalan/","text":"Catalan \u6570\u5217 \u00b6 \u4ee5\u4e0b\u95ee\u9898\u5c5e\u4e8e Catalan \u6570\u5217: \u6709 2n 2n \u4e2a\u4eba\u6392\u6210\u4e00\u884c\u8fdb\u5165\u5267\u573a\u3002\u5165\u573a\u8d39 5 \u5143\u3002\u5176\u4e2d\u53ea\u6709 n n \u4e2a\u4eba\u6709\u4e00\u5f20 5 \u5143\u949e\u7968\uff0c\u53e6\u5916 n n \u4eba\u53ea\u6709 10 \u5143\u949e\u7968\uff0c\u5267\u9662\u65e0\u5176\u5b83\u949e\u7968\uff0c\u95ee\u6709\u591a\u5c11\u4e2d\u65b9\u6cd5\u4f7f\u5f97\u53ea\u8981\u6709 10 \u5143\u7684\u4eba\u4e70\u7968\uff0c\u552e\u7968\u5904\u5c31\u6709 5 \u5143\u7684\u949e\u7968\u627e\u96f6\uff1f \u4e00\u4f4d\u5927\u57ce\u5e02\u7684\u5f8b\u5e08\u5728\u5979\u4f4f\u6240\u4ee5\u5317 n n \u4e2a\u8857\u533a\u548c\u4ee5\u4e1c n n \u4e2a\u8857\u533a\u5904\u5de5\u4f5c\u3002\u6bcf\u5929\u5979\u8d70 2n 2n \u4e2a\u8857\u533a\u53bb\u4e0a\u73ed\u3002\u5982\u679c\u4ed6\u4ece\u4e0d\u7a7f\u8d8a\uff08\u4f46\u53ef\u4ee5\u78b0\u5230\uff09\u4ece\u5bb6\u5230\u529e\u516c\u5ba4\u7684\u5bf9\u89d2\u7ebf\uff0c\u90a3\u4e48\u6709\u591a\u5c11\u6761\u53ef\u80fd\u7684\u9053\u8def\uff1f \u5728\u5706\u4e0a\u9009\u62e9 2n 2n \u4e2a\u70b9, \u5c06\u8fd9\u4e9b\u70b9\u6210\u5bf9\u8fde\u63a5\u8d77\u6765\u4f7f\u5f97\u6240\u5f97\u5230\u7684 n n \u6761\u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u7684\u65b9\u6cd5\u6570\uff1f \u5bf9\u89d2\u7ebf\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\uff1f \u4e00\u4e2a\u6808 (\u65e0\u7a77\u5927) \u7684\u8fdb\u6808\u5e8f\u5217\u4e3a 1,2,3, \\cdots ,n 1,2,3, \\cdots ,n \u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\uff1f n n \u4e2a\u7ed3\u70b9\u53ef\u591f\u9020\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\uff1f n n \u4e2a\u4e0d\u540c\u7684\u6570\u4f9d\u6b21\u8fdb\u6808\uff0c\u6c42\u4e0d\u540c\u7684\u51fa\u6808\u7ed3\u679c\u7684\u79cd\u6570\uff1f n n \u4e2a +1 +1 \u548c n n \u4e2a -1 -1 \u6784\u6210 2n 2n \u9879 a_1,a_2, \\cdots ,a_{2n} a_1,a_2, \\cdots ,a_{2n} \uff0c\u5176\u90e8\u5206\u548c\u6ee1\u8db3 a_1+a_2+ \\cdots +a_k>=0(k=1,2,3, \\cdots ,2n) a_1+a_2+ \\cdots +a_k>=0(k=1,2,3, \\cdots ,2n) \u5bf9\u4e0e n n \u8be5\u6570\u5217\u4e3a\uff1f \u5176\u5bf9\u5e94\u7684\u5e8f\u5217\u4e3a: H_0 H_0 H_1 H_1 H_2 H_2 H_3 H_3 H_4 H_4 H_5 H_5 H_6 H_6 ... 1 1 2 5 14 42 132 ... (Catalan \u6570\u5217\uff09 \u8be5\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a: H_n=\\frac{C_{2n}^{n}}{n+1}(n=1,2,3,\\cdots) H_n=\\frac{C_{2n}^{n}}{n+1}(n=1,2,3,\\cdots)","title":"\u5361\u7279\u5170\u6570"},{"location":"math/catalan/#catalan","text":"\u4ee5\u4e0b\u95ee\u9898\u5c5e\u4e8e Catalan \u6570\u5217: \u6709 2n 2n \u4e2a\u4eba\u6392\u6210\u4e00\u884c\u8fdb\u5165\u5267\u573a\u3002\u5165\u573a\u8d39 5 \u5143\u3002\u5176\u4e2d\u53ea\u6709 n n \u4e2a\u4eba\u6709\u4e00\u5f20 5 \u5143\u949e\u7968\uff0c\u53e6\u5916 n n \u4eba\u53ea\u6709 10 \u5143\u949e\u7968\uff0c\u5267\u9662\u65e0\u5176\u5b83\u949e\u7968\uff0c\u95ee\u6709\u591a\u5c11\u4e2d\u65b9\u6cd5\u4f7f\u5f97\u53ea\u8981\u6709 10 \u5143\u7684\u4eba\u4e70\u7968\uff0c\u552e\u7968\u5904\u5c31\u6709 5 \u5143\u7684\u949e\u7968\u627e\u96f6\uff1f \u4e00\u4f4d\u5927\u57ce\u5e02\u7684\u5f8b\u5e08\u5728\u5979\u4f4f\u6240\u4ee5\u5317 n n \u4e2a\u8857\u533a\u548c\u4ee5\u4e1c n n \u4e2a\u8857\u533a\u5904\u5de5\u4f5c\u3002\u6bcf\u5929\u5979\u8d70 2n 2n \u4e2a\u8857\u533a\u53bb\u4e0a\u73ed\u3002\u5982\u679c\u4ed6\u4ece\u4e0d\u7a7f\u8d8a\uff08\u4f46\u53ef\u4ee5\u78b0\u5230\uff09\u4ece\u5bb6\u5230\u529e\u516c\u5ba4\u7684\u5bf9\u89d2\u7ebf\uff0c\u90a3\u4e48\u6709\u591a\u5c11\u6761\u53ef\u80fd\u7684\u9053\u8def\uff1f \u5728\u5706\u4e0a\u9009\u62e9 2n 2n \u4e2a\u70b9, \u5c06\u8fd9\u4e9b\u70b9\u6210\u5bf9\u8fde\u63a5\u8d77\u6765\u4f7f\u5f97\u6240\u5f97\u5230\u7684 n n \u6761\u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u7684\u65b9\u6cd5\u6570\uff1f \u5bf9\u89d2\u7ebf\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\uff1f \u4e00\u4e2a\u6808 (\u65e0\u7a77\u5927) \u7684\u8fdb\u6808\u5e8f\u5217\u4e3a 1,2,3, \\cdots ,n 1,2,3, \\cdots ,n \u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\uff1f n n \u4e2a\u7ed3\u70b9\u53ef\u591f\u9020\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\uff1f n n \u4e2a\u4e0d\u540c\u7684\u6570\u4f9d\u6b21\u8fdb\u6808\uff0c\u6c42\u4e0d\u540c\u7684\u51fa\u6808\u7ed3\u679c\u7684\u79cd\u6570\uff1f n n \u4e2a +1 +1 \u548c n n \u4e2a -1 -1 \u6784\u6210 2n 2n \u9879 a_1,a_2, \\cdots ,a_{2n} a_1,a_2, \\cdots ,a_{2n} \uff0c\u5176\u90e8\u5206\u548c\u6ee1\u8db3 a_1+a_2+ \\cdots +a_k>=0(k=1,2,3, \\cdots ,2n) a_1+a_2+ \\cdots +a_k>=0(k=1,2,3, \\cdots ,2n) \u5bf9\u4e0e n n \u8be5\u6570\u5217\u4e3a\uff1f \u5176\u5bf9\u5e94\u7684\u5e8f\u5217\u4e3a: H_0 H_0 H_1 H_1 H_2 H_2 H_3 H_3 H_4 H_4 H_5 H_5 H_6 H_6 ... 1 1 2 5 14 42 132 ... (Catalan \u6570\u5217\uff09 \u8be5\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a: H_n=\\frac{C_{2n}^{n}}{n+1}(n=1,2,3,\\cdots) H_n=\\frac{C_{2n}^{n}}{n+1}(n=1,2,3,\\cdots)","title":"Catalan \u6570\u5217"},{"location":"math/combination/","text":"\u6392\u5217\u7ec4\u5408\u7b80\u4ecb \u00b6 \u6392\u5217\u7ec4\u5408\u662f\u7ec4\u5408\u6570\u5b66\u4e2d\u7684\u4e00\u79cd\u3002\u6392\u5217\u5c31\u662f\u6307\u4ece\u7ed9\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\u4e2d\u53d6\u51fa\u6307\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff1b\u7ec4\u5408\u5219\u662f\u6307\u4ece\u7ed9\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\u4e2d\u4ec5\u4ec5\u53d6\u51fa\u6307\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\uff0c\u4e0d\u8003\u8651\u6392\u5e8f\u3002\u6392\u5217\u7ec4\u5408\u7684\u4e2d\u5fc3\u95ee\u9898\u662f\u7814\u7a76\u7ed9\u5b9a\u8981\u6c42\u7684\u6392\u5217\u548c\u7ec4\u5408\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\u603b\u6570\u3002 \u6392\u5217\u7ec4\u5408\u4e0e\u53e4\u5178\u6982\u7387\u8bba\u5173\u7cfb\u5bc6\u5207\u3002 \u5728\u9ad8\u4e2d\u521d\u7b49\u6570\u5b66\u4e2d\uff0c\u6392\u5217\u7ec4\u5408\u591a\u662f\u5229\u7528\u5217\u8868\u3001\u679a\u4e3e\u7b49\u65b9\u6cd5\u89e3\u9898\u3002 \u6392\u5217\u7ec4\u5408\u516c\u5f0f\u53ca\u5b9a\u4e49 \u00b6 \u6392\u5217\u7684\u5b9a\u4e49 \u00b6 \u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m m \uff08 m\u2264n,m m\u2264n,m \u4e0e n n \u5747\u4e3a\u81ea\u7136\u6570, \u4e0b\u540c\uff09\u4e2a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u6392\u6210\u4e00\u5217\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u6392\u5217\uff1b\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m ( m\u2264n m\u2264n ) \u4e2a\u5143\u7d20\u7684\u6240\u6709\u6392\u5217\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u6392\u5217\u6570\uff0c\u7528\u7b26\u53f7 A_n^m A_n^m \u8868\u793a\u3002 \u6392\u5217\u7684\u8ba1\u7b97\u516c\u5f0f \u00b6 A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!} A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!} n! n! \u4ee3\u8868 n n \u7684\u9636\u4e58\uff0c\u5373 6! = 1 \\times 2 \\times 3 \\times 4 \\times 5 \\times 6 6! = 1 \\times 2 \\times 3 \\times 4 \\times 5 \\times 6 . \u7ec4\u5408\u7684\u5b9a\u4e49 \u00b6 \u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m m ( m\u2264n m\u2264n ) \u4e2a\u5143\u7d20\u5e76\u6210\u4e00\u7ec4\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u7ec4\u5408\uff1b\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m ( m\u2264n m\u2264n ) \u4e2a\u5143\u7d20\u7684\u6240\u6709\u7ec4\u5408\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u7ec4\u5408\u6570\u3002\u7528\u7b26\u53f7 C_n^m C_n^m \u8868\u793a\u3002 \u7ec4\u5408\u7684\u8ba1\u7b97\u516c\u5f0f \u00b6 C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n - m)!} C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n - m)!} \u6392\u5217\u7ec4\u5408\u7684\u5206\u7c7b \u00b6 \u6392\u5217 \u00b6 \u5168\u6392\u5217 : n n \u4e2a\u4eba\u5168\u90e8\u6765\u6392\u961f\uff0c\u961f\u957f\u4e3a n n \u3002\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9009 n n \u4e2a\uff0c\u7b2c\u4e8c\u4f4d\u7f6e\u53ef\u4ee5\u9009 n-1 n-1 \u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5f97\uff1a A_n^n = n(n-1)(n-2) \\cdots 3 \u00d7 2 \u00d7 1 = n! A_n^n = n(n-1)(n-2) \\cdots 3 \u00d7 2 \u00d7 1 = n! \u90e8\u5206\u6392\u5217 : n n \u4e2a\u4eba\u9009 m m \u4e2a\u6765\u6392\u961f ( m \\le n m \\le n )\u3002\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9009 n n \u4e2a\uff0c\u7b2c\u4e8c\u4f4d\u7f6e\u53ef\u4ee5\u9009 n-1 n-1 \u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u7b2c m m \u4e2a\uff08\u6700\u540e\u4e00\u4e2a\uff09\u53ef\u4ee5\u9009 n-m+1 n-m+1 \u4e2a\uff0c\u5f97\uff1a A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!} A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!} \u7ec4\u5408 \u00b6 n n \u4e2a\u4eba m m ( m \\le n m \\le n ) \u4e2a\u51fa\u6765\uff0c\u4e0d\u6392\u961f\uff0c\u4e0d\u5728\u4e4e\u987a\u5e8f C_n^m C_n^m \u3002\u5982\u679c\u5728\u4e4e\u6392\u5217\u90a3\u4e48\u5c31\u662f A_n^m A_n^m \uff0c\u5982\u679c\u4e0d\u5728\u4e4e\u90a3\u4e48\u5c31\u8981\u9664\u6389\u91cd\u590d\uff0c\u90a3\u4e48\u91cd\u590d\u4e86\u591a\u5c11\uff1f\u540c\u6837\u9009\u51fa\u7684\u6765\u7684 m m \u4e2a\u4eba\uff0c\u4ed6\u4eec\u8fd8\u8981 \u201c\u5168\u6392\u201d \u5f97 A_n^m A_n^m \uff0c\u6240\u4ee5\u5f97\uff1a C_n^m \\times m! = A_n^m C_n^m \\times m! = A_n^m C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n-m)!} C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n-m)!} \u7ec4\u5408\u6570\u7684\u6027\u8d28 \u00b6 C_n^m = C_{n}^{n-m} C_n^m = C_{n}^{n-m} C_n^m = C_{n-1}^{m} + C_{n-1}^{m-1} C_n^m = C_{n-1}^{m} + C_{n-1}^{m-1} \u5982\u679c\u7f16\u7a0b\u5b9e\u73b0\uff0c\u4ee5\u4e0a\u4e24\u4e2a\u516c\u5f0f\u6709\u6ca1\u6709\u5e2e\u52a9\uff1f \u5706\u6392\u5217 \u00b6 n n \u4e2a\u4eba\u5168\u90e8\u6765\u56f4\u6210\u4e00\u5708\u4e3a Q_n^n Q_n^n \uff0c\u5176\u4e2d\u5df2\u7ecf\u6392\u597d\u7684\u4e00\u5708\uff0c\u4ece\u4e0d\u540c\u4f4d\u7f6e\u65ad\u5f00\uff0c\u53c8\u53d8\u6210\u4e0d\u540c\u7684\u961f\u5217\u3002 \u6240\u4ee5\uff1a Q_n^n \\times n = A_n^n \u2192 Q_n = \\frac{A_n^n}{n} = (n-1)! Q_n^n \\times n = A_n^n \u2192 Q_n = \\frac{A_n^n}{n} = (n-1)! \u7531\u6b64\u53ef\u77e5\uff1a\u90e8\u5206\u5706\u6392 Q_n^r = \\frac{A_n^r}{r} = \\frac{n!}{r \\times (n-r)!} Q_n^r = \\frac{A_n^r}{r} = \\frac{n!}{r \\times (n-r)!} \u91cd\u590d\u6392\u5217\uff08\u6709\u9650\uff09 \u00b6 k k \u79cd\u4e0d\u4e00\u6837\u7684\u7403\uff0c\u6bcf\u79cd\u7403\u7684\u4e2a\u6570\u5206\u522b\u662f a_1,a_2,\\cdots,a_k a_1,a_2,\\cdots,a_k \uff0c\u8bbe n=a_1+a_2+\u2026+a_k n=a_1+a_2+\u2026+a_k \uff0c\u8fd9 n n \u4e2a\u7403\u7684\u5168\u6392\u5217\u6570\uff0c\u4e3a \\frac{n!}{a_1! \\times a_2! \\times \\cdots \\times a_k!} \\frac{n!}{a_1! \\times a_2! \\times \\cdots \\times a_k!} \u91cd\u590d\u7ec4\u5408\uff08\u65e0\u9650\uff09 \u00b6 n n \u79cd\u4e0d\u4e00\u6837\u7684\u7403\uff0c\u6bcf\u79cd\u7403\u7684\u4e2a\u6570\u662f\u65e0\u9650\u7684, \u4ece\u4e2d\u9009 k k \u4e2a\u51fa\u6765\uff0c\u4e0d\u7528\u6392\u5217\uff0c\u662f\u7ec4\u5408\uff0c\u4e3a C_{n+k-1}^{k} C_{n+k-1}^{k} . \u8bc1\u660e\uff1a \u5047\u8bbe\u9009\u51fa\u6765\u7684\u6570\uff08\u6392\u597d\u5e8f\uff09\uff1a 1 \\le b_1 \\le b_2 \\le b_3 \\le \\cdots \\le b_k \\le n 1 \\le b_1 \\le b_2 \\le b_3 \\le \\cdots \\le b_k \\le n \u8fd9\u9898\u7684\u96be\u70b9\u5c31\u662f = = \u53f7\uff0c\u73b0\u5728\u53bb\u6389 = = \u53f7\uff0c\u6240\u4ee5\u6709\uff1a 1 \\le b_1 < b_2+1 < b_3+2 < b_4+3 < \\cdots < b_k+k-1 \\le n+k-1 1 \\le b_1 < b_2+1 < b_3+2 < b_4+3 < \\cdots < b_k+k-1 \\le n+k-1 \u4e2d\u95f4\u8fd8\u662f k k \u4e2a\u6570\uff01\u4e0d\u8fc7\u5df2\u7ecf\u4e0d\u662f b b \u7cfb\u5217\uff0c\u800c\u662f c c \u7cfb\u5217\uff0c \u5047\u8bbe c[i]=b[i]+i-1 c[i]=b[i]+i-1 \uff0c\u6240\u4ee5 1 \\le c_1 < c_2 < c_3 < c_4 < \\cdots < c_k \\le n+k-1 1 \\le c_1 < c_2 < c_3 < c_4 < \\cdots < c_k \\le n+k-1 \u6240\u4ee5\u95ee\u9898\u5c31\u5f00\u59cb\u8f6c\u6362\u4e3a\u65e0\u91cd\u590d\u7ec4\u5408\u95ee\u9898\uff0c\u5373\u5728 n+k-1 n+k-1 \u4e2a\u5143\u7d20\u4e2d\u9009\u4e2d k k \u4e2a\u7684\u7ec4\u5408\u6570 C_{n+k-1}^{k} C_{n+k-1}^{k} \u3002 \u4e0d\u76f8\u90bb\u7684\u6392\u5217 \u00b6 1 \\sim n 1 \\sim n \u8fd9 n n \u4e2a\u81ea\u7136\u6570\u4e2d\u9009 k k \u4e2a\uff0c\u8fd9 k k \u4e2a\u6570\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u4e0d\u76f8\u90bb\u6570\u7684\u7ec4\u5408\u6709 C_{n-k+1}^{k} C_{n-k+1}^{k} \u79cd\u3002 \u8bc1\u660e\u548c\u4e0a\u9762\u7684\u76f8\u540c\uff08\u5176\u5b9e\u5c31\u662f\u61d2\u5f97\u5199\uff09\uff0c\u8bf7\u81ea\u884c\u8bc1\u660e XD \u9519\u4f4d\u6392\u5217\uff08\u9519\u6392\uff09 \u00b6 \u5148\u770b\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a 5 5 \u672c\u4e66\uff0c\u7f16\u53f7\u5206\u522b\u662f 1,2,3,4,5 1,2,3,4,5 \uff0c\u73b0\u5728\u8981\u628a\u8fd9 5 \u672c\u4e66\u662f\u653e\u5728\u7f16\u53f7 1,2,3,4,5 1,2,3,4,5 \u7684\u4e66\u67b6\u4e0a\uff0c\u8981\u6c42\u4e66\u7684\u7f16\u53f7\u548c\u4e66\u67b6\u7684\u7f16\u53f7\u4e0d\u4e00\u6837\uff0c\u8bf7\u95ee\u6709\u591a\u5c11\u79cd\u4e0d\u4e00\u6837\u7684\u653e\u7f6e\u65b9\u6cd5\uff1f \u518d\u770b\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a \u80f8\u53e3\u8d34\u7740\u7f16\u53f7\u4e3a 1,2,\\cdots,n 1,2,\\cdots,n \u7684 n n \u4e2a\u7403\u5458\u5206\u522b\u4f4f\u5728\u7f16\u53f7\u4e3a 1,2,\\cdots,n 1,2,\\cdots,n \u7684 n n \u4e2a\u623f\u95f4\u91cc\u9762\u3002\u73b0\u89c4\u5b9a\u6bcf\u4e2a\u4eba\u4f4f\u4e00\u4e2a\u623f\u95f4\uff0c\u81ea\u5df1\u7684\u7f16\u53f7\u4e0d\u80fd\u548c\u623f\u95f4\u7684\u7f16\u53f7\u4e00\u6837\u3002 \u8fd9\u5c31\u662f\u9519\u6392\u95ee\u9898\u3002\u5f53 n=3 n=3 \u65f6\uff0c\u53ea\u80fd\u4e3a 312 \u6216 231 \u8fd9\u4e24\u79cd\u3002 \u90a3\u4e48\u9519\u6392\u95ee\u9898\u7684\u89e3\u9898\u601d\u8def\u662f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u4ee5\u7b2c\u4e8c\u4e2a\u95ee\u9898\u4e3a\u4f8b\uff1a \u9012\u63a8\u8fd8\u662f\u738b\u9053\uff01\uff01\uff01 \u521a\u5f00\u59cb\u6240\u6709\u7403\u5458\u90fd\u4f4f\u5728\u548c\u81ea\u5df1\u7f16\u53f7\u4e00\u6837\u7684\u623f\u95f4\u91cc\u9762\u3002\u7136\u540e\u9519\u6392\u5f00\u59cb\u4e86\uff0c\u7b2c n n \u4e2a\u7403\u5458\u4ece\u7b2c n n \u4e2a\u623f\u95f4\u51fa\u6765\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a n n \u60f3\u548c i(1 \\le i \\le n-1) i(1 \\le i \\le n-1) \u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7403\u5458\u6362\u623f\u95f4\uff0c\u5176\u4ed6 n-2 n-2 \u4e2a\u4eba\u6362\u623f\u95f4\u7684\u4e8b\u60c5\uff0c\u4ed6\u4eec\u5c31\u4e0d\u7ba1\u4e86\u3002\u5176\u4ed6 n-2 n-2 \u4e2a\u7403\u5458\u7684\u7684\u9519\u6392\u6570\u4e3a d[n-2] d[n-2] \uff0c n n \u53ef\u4ee5\u548c\u524d\u9762 1 \\sim n-1 1 \\sim n-1 \u5bf9\u6362\uff0c\u6240\u4ee5\u6709 n-1 n-1 \u4e2a d[n-2] d[n-2] \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a n n \u60f3\u548c i(1 \\le i \\le n-1) i(1 \\le i \\le n-1) \u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7403\u5458\u6362\u623f\u95f4\uff0c\u4f46\u662f n n \u53ea\u60f3 i i \u4f4f\u5728\u7b2c N N \u4e2a\u623f\u95f4\uff0c\u800c n n \u4e0d\u60f3\u4f4f\u7b2c I I \u4e2a\u623f\u95f4\u3002 \u53ef\u80fd\u4f60\u4f1a\u8fd9\u6837\u60f3\uff1a\u90a3\u4e48 n n \u53ef\u4ee5\u8ba9 j j \u4f4f\u5728\u7b2c I I \u53f7\u623f\u95f4\u91cc\u9762\uff0c\u7136\u540e n n \u4f4f\u5728\u623f\u95f4 J J \u3002\u62b1\u6b49\uff0c j(1 \\le j \\le n-1,j\\neq i) j(1 \\le j \\le n-1,j\\neq i) \u751f\u6c14 n n \u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u5c31\u53bb\u627e i i \u4e0d\u76f4\u63a5\u6765\u627e j j \u3002\u6ca1\u529e\u6cd5\uff0c n n \u628a\u81ea\u5df1\u80f8\u53e3\u7684\u7f16\u7801 N N \u6362\u6210\u4e86 I I \uff0c\u4ed6\u5047\u88c5\u81ea\u5df1\u662f i i \uff0c\u7136\u540e\u9519\u6392 1 \\sim n-1 1 \\sim n-1 \uff08\u4e5f\u5c31\u662f d[n-2] d[n-2] \uff09\u7684\u65f6\u5019\u53c2\u4e0e\u8fdb\u53bb\uff0c\u8fd9\u6837\u81ea\u5df1\u5c31\u4e0d\u4f1a\u5446\u5728\u7b2c I I \u53f7\u623f\u95f4\u4e86\u3002\u6240\u4ee5\u6709 n-1 n-1 \u4e2a d[n-1] d[n-1] \u3002 \u5982\u679c\u7406\u89e3\u4e86\u4ee5\u4e0a\u5185\u5bb9\uff0c\u90a3\u4e48\u9519\u6392\u7684\u516c\u5f0f\u5c31\u51fa\u6765\u4e86\uff1a d_n = (n-1)(d_{n-2} + d_{n-1}) (n\\geq 3) d_n = (n-1)(d_{n-2} + d_{n-1}) (n\\geq 3) \u540c\u65f6\u4e5f\u6709\uff1a d_n = n \\times d_{n-1} + (-1)^n d_n = n \\times d_{n-1} + (-1)^n \u9519\u4f4d\u6392\u5217\u6570\u5217\u4e3a 0,1,2,9,44,265,\\cdots 0,1,2,9,44,265,\\cdots \u52a0\u6cd5 & \u4e58\u6cd5\u539f\u7406 \u00b6 \u52a0\u6cd5\u539f\u7406 \u00b6 \u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u53ef\u4ee5\u6709 n n \u7c7b\u529e\u6cd5\uff0c a[i](1 \\le i \\le n) a[i](1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u7c7b\u65b9\u6cd5\u7684\u6570\u76ee\u3002 \u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S=a[1]+a[2]+\\cdots +a[n] S=a[1]+a[2]+\\cdots +a[n] \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 \u4e58\u6cd5\u539f\u7406 \u00b6 \u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u9700\u8981\u5206 n n \u4e2a\u6b65\u9aa4\uff0c a[i](1 \\le i \\le n) a[i](1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u4e2a\u6b65\u9aa4\u7684\u4e0d\u540c\u65b9\u6cd5\u6570\u76ee\u3002 \u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S = a[1] \\times a[2] \\times \\cdots \\times a[n] S = a[1] \\times a[2] \\times \\cdots \\times a[n] \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 \u4e24\u539f\u7406\u7684\u533a\u522b \u00b6 \u4e00\u4e2a\u4e0e\u5206\u7c7b\u6709\u5173\uff0c\u4e00\u4e2a\u4e0e\u5206\u6b65\u6709\u5173\uff1b\u52a0\u6cd5\u539f\u7406\u662f \u201c\u5206\u7c7b\u5b8c\u6210\u201d\uff0c\u4e58\u6cd5\u539f\u7406\u662f \u201c\u5206\u6b65\u5b8c\u6210\u201d\u3002 \u51e0\u4e2a\u5173\u4e8e\u7ec4\u5408\u7684\u516c\u5f0f \u00b6 C_n^0 + C_n^1 + C_n^2 + C_n^3 + \\cdots + C_n^m = 2^n C_n^0 + C_n^1 + C_n^2 + C_n^3 + \\cdots + C_n^m = 2^n C_n^r + C_n^{r+1} = C_{n+1}^{r+1} C_n^r + C_n^{r+1} = C_{n+1}^{r+1} \\sum_{i=0}^m C_n^i C_m^{m-i} = C_{m+n}^m(n \\geq m) \\sum_{i=0}^m C_n^i C_m^{m-i} = C_{m+n}^m(n \\geq m)","title":"\u6392\u5217\u7ec4\u5408"},{"location":"math/combination/#_1","text":"\u6392\u5217\u7ec4\u5408\u662f\u7ec4\u5408\u6570\u5b66\u4e2d\u7684\u4e00\u79cd\u3002\u6392\u5217\u5c31\u662f\u6307\u4ece\u7ed9\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\u4e2d\u53d6\u51fa\u6307\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff1b\u7ec4\u5408\u5219\u662f\u6307\u4ece\u7ed9\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\u4e2d\u4ec5\u4ec5\u53d6\u51fa\u6307\u5b9a\u4e2a\u6570\u7684\u5143\u7d20\uff0c\u4e0d\u8003\u8651\u6392\u5e8f\u3002\u6392\u5217\u7ec4\u5408\u7684\u4e2d\u5fc3\u95ee\u9898\u662f\u7814\u7a76\u7ed9\u5b9a\u8981\u6c42\u7684\u6392\u5217\u548c\u7ec4\u5408\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\u603b\u6570\u3002 \u6392\u5217\u7ec4\u5408\u4e0e\u53e4\u5178\u6982\u7387\u8bba\u5173\u7cfb\u5bc6\u5207\u3002 \u5728\u9ad8\u4e2d\u521d\u7b49\u6570\u5b66\u4e2d\uff0c\u6392\u5217\u7ec4\u5408\u591a\u662f\u5229\u7528\u5217\u8868\u3001\u679a\u4e3e\u7b49\u65b9\u6cd5\u89e3\u9898\u3002","title":"\u6392\u5217\u7ec4\u5408\u7b80\u4ecb"},{"location":"math/combination/#_2","text":"","title":"\u6392\u5217\u7ec4\u5408\u516c\u5f0f\u53ca\u5b9a\u4e49"},{"location":"math/combination/#_3","text":"\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m m \uff08 m\u2264n,m m\u2264n,m \u4e0e n n \u5747\u4e3a\u81ea\u7136\u6570, \u4e0b\u540c\uff09\u4e2a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u6392\u6210\u4e00\u5217\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u6392\u5217\uff1b\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m ( m\u2264n m\u2264n ) \u4e2a\u5143\u7d20\u7684\u6240\u6709\u6392\u5217\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u6392\u5217\u6570\uff0c\u7528\u7b26\u53f7 A_n^m A_n^m \u8868\u793a\u3002","title":"\u6392\u5217\u7684\u5b9a\u4e49"},{"location":"math/combination/#_4","text":"A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!} A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!} n! n! \u4ee3\u8868 n n \u7684\u9636\u4e58\uff0c\u5373 6! = 1 \\times 2 \\times 3 \\times 4 \\times 5 \\times 6 6! = 1 \\times 2 \\times 3 \\times 4 \\times 5 \\times 6 .","title":"\u6392\u5217\u7684\u8ba1\u7b97\u516c\u5f0f"},{"location":"math/combination/#_5","text":"\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m m ( m\u2264n m\u2264n ) \u4e2a\u5143\u7d20\u5e76\u6210\u4e00\u7ec4\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u7ec4\u5408\uff1b\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m ( m\u2264n m\u2264n ) \u4e2a\u5143\u7d20\u7684\u6240\u6709\u7ec4\u5408\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u7ec4\u5408\u6570\u3002\u7528\u7b26\u53f7 C_n^m C_n^m \u8868\u793a\u3002","title":"\u7ec4\u5408\u7684\u5b9a\u4e49"},{"location":"math/combination/#_6","text":"C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n - m)!} C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n - m)!}","title":"\u7ec4\u5408\u7684\u8ba1\u7b97\u516c\u5f0f"},{"location":"math/combination/#_7","text":"","title":"\u6392\u5217\u7ec4\u5408\u7684\u5206\u7c7b"},{"location":"math/combination/#_8","text":"\u5168\u6392\u5217 : n n \u4e2a\u4eba\u5168\u90e8\u6765\u6392\u961f\uff0c\u961f\u957f\u4e3a n n \u3002\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9009 n n \u4e2a\uff0c\u7b2c\u4e8c\u4f4d\u7f6e\u53ef\u4ee5\u9009 n-1 n-1 \u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5f97\uff1a A_n^n = n(n-1)(n-2) \\cdots 3 \u00d7 2 \u00d7 1 = n! A_n^n = n(n-1)(n-2) \\cdots 3 \u00d7 2 \u00d7 1 = n! \u90e8\u5206\u6392\u5217 : n n \u4e2a\u4eba\u9009 m m \u4e2a\u6765\u6392\u961f ( m \\le n m \\le n )\u3002\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9009 n n \u4e2a\uff0c\u7b2c\u4e8c\u4f4d\u7f6e\u53ef\u4ee5\u9009 n-1 n-1 \u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u7b2c m m \u4e2a\uff08\u6700\u540e\u4e00\u4e2a\uff09\u53ef\u4ee5\u9009 n-m+1 n-m+1 \u4e2a\uff0c\u5f97\uff1a A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!} A_n^m = n(n-1)(n-2) \\cdots (n-m+1) = \\frac{n!}{(n - m)!}","title":"\u6392\u5217"},{"location":"math/combination/#_9","text":"n n \u4e2a\u4eba m m ( m \\le n m \\le n ) \u4e2a\u51fa\u6765\uff0c\u4e0d\u6392\u961f\uff0c\u4e0d\u5728\u4e4e\u987a\u5e8f C_n^m C_n^m \u3002\u5982\u679c\u5728\u4e4e\u6392\u5217\u90a3\u4e48\u5c31\u662f A_n^m A_n^m \uff0c\u5982\u679c\u4e0d\u5728\u4e4e\u90a3\u4e48\u5c31\u8981\u9664\u6389\u91cd\u590d\uff0c\u90a3\u4e48\u91cd\u590d\u4e86\u591a\u5c11\uff1f\u540c\u6837\u9009\u51fa\u7684\u6765\u7684 m m \u4e2a\u4eba\uff0c\u4ed6\u4eec\u8fd8\u8981 \u201c\u5168\u6392\u201d \u5f97 A_n^m A_n^m \uff0c\u6240\u4ee5\u5f97\uff1a C_n^m \\times m! = A_n^m C_n^m \\times m! = A_n^m C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n-m)!} C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n-m)!}","title":"\u7ec4\u5408"},{"location":"math/combination/#_10","text":"C_n^m = C_{n}^{n-m} C_n^m = C_{n}^{n-m} C_n^m = C_{n-1}^{m} + C_{n-1}^{m-1} C_n^m = C_{n-1}^{m} + C_{n-1}^{m-1} \u5982\u679c\u7f16\u7a0b\u5b9e\u73b0\uff0c\u4ee5\u4e0a\u4e24\u4e2a\u516c\u5f0f\u6709\u6ca1\u6709\u5e2e\u52a9\uff1f","title":"\u7ec4\u5408\u6570\u7684\u6027\u8d28"},{"location":"math/combination/#_11","text":"n n \u4e2a\u4eba\u5168\u90e8\u6765\u56f4\u6210\u4e00\u5708\u4e3a Q_n^n Q_n^n \uff0c\u5176\u4e2d\u5df2\u7ecf\u6392\u597d\u7684\u4e00\u5708\uff0c\u4ece\u4e0d\u540c\u4f4d\u7f6e\u65ad\u5f00\uff0c\u53c8\u53d8\u6210\u4e0d\u540c\u7684\u961f\u5217\u3002 \u6240\u4ee5\uff1a Q_n^n \\times n = A_n^n \u2192 Q_n = \\frac{A_n^n}{n} = (n-1)! Q_n^n \\times n = A_n^n \u2192 Q_n = \\frac{A_n^n}{n} = (n-1)! \u7531\u6b64\u53ef\u77e5\uff1a\u90e8\u5206\u5706\u6392 Q_n^r = \\frac{A_n^r}{r} = \\frac{n!}{r \\times (n-r)!} Q_n^r = \\frac{A_n^r}{r} = \\frac{n!}{r \\times (n-r)!}","title":"\u5706\u6392\u5217"},{"location":"math/combination/#_12","text":"k k \u79cd\u4e0d\u4e00\u6837\u7684\u7403\uff0c\u6bcf\u79cd\u7403\u7684\u4e2a\u6570\u5206\u522b\u662f a_1,a_2,\\cdots,a_k a_1,a_2,\\cdots,a_k \uff0c\u8bbe n=a_1+a_2+\u2026+a_k n=a_1+a_2+\u2026+a_k \uff0c\u8fd9 n n \u4e2a\u7403\u7684\u5168\u6392\u5217\u6570\uff0c\u4e3a \\frac{n!}{a_1! \\times a_2! \\times \\cdots \\times a_k!} \\frac{n!}{a_1! \\times a_2! \\times \\cdots \\times a_k!}","title":"\u91cd\u590d\u6392\u5217\uff08\u6709\u9650\uff09"},{"location":"math/combination/#_13","text":"n n \u79cd\u4e0d\u4e00\u6837\u7684\u7403\uff0c\u6bcf\u79cd\u7403\u7684\u4e2a\u6570\u662f\u65e0\u9650\u7684, \u4ece\u4e2d\u9009 k k \u4e2a\u51fa\u6765\uff0c\u4e0d\u7528\u6392\u5217\uff0c\u662f\u7ec4\u5408\uff0c\u4e3a C_{n+k-1}^{k} C_{n+k-1}^{k} . \u8bc1\u660e\uff1a \u5047\u8bbe\u9009\u51fa\u6765\u7684\u6570\uff08\u6392\u597d\u5e8f\uff09\uff1a 1 \\le b_1 \\le b_2 \\le b_3 \\le \\cdots \\le b_k \\le n 1 \\le b_1 \\le b_2 \\le b_3 \\le \\cdots \\le b_k \\le n \u8fd9\u9898\u7684\u96be\u70b9\u5c31\u662f = = \u53f7\uff0c\u73b0\u5728\u53bb\u6389 = = \u53f7\uff0c\u6240\u4ee5\u6709\uff1a 1 \\le b_1 < b_2+1 < b_3+2 < b_4+3 < \\cdots < b_k+k-1 \\le n+k-1 1 \\le b_1 < b_2+1 < b_3+2 < b_4+3 < \\cdots < b_k+k-1 \\le n+k-1 \u4e2d\u95f4\u8fd8\u662f k k \u4e2a\u6570\uff01\u4e0d\u8fc7\u5df2\u7ecf\u4e0d\u662f b b \u7cfb\u5217\uff0c\u800c\u662f c c \u7cfb\u5217\uff0c \u5047\u8bbe c[i]=b[i]+i-1 c[i]=b[i]+i-1 \uff0c\u6240\u4ee5 1 \\le c_1 < c_2 < c_3 < c_4 < \\cdots < c_k \\le n+k-1 1 \\le c_1 < c_2 < c_3 < c_4 < \\cdots < c_k \\le n+k-1 \u6240\u4ee5\u95ee\u9898\u5c31\u5f00\u59cb\u8f6c\u6362\u4e3a\u65e0\u91cd\u590d\u7ec4\u5408\u95ee\u9898\uff0c\u5373\u5728 n+k-1 n+k-1 \u4e2a\u5143\u7d20\u4e2d\u9009\u4e2d k k \u4e2a\u7684\u7ec4\u5408\u6570 C_{n+k-1}^{k} C_{n+k-1}^{k} \u3002","title":"\u91cd\u590d\u7ec4\u5408\uff08\u65e0\u9650\uff09"},{"location":"math/combination/#_14","text":"1 \\sim n 1 \\sim n \u8fd9 n n \u4e2a\u81ea\u7136\u6570\u4e2d\u9009 k k \u4e2a\uff0c\u8fd9 k k \u4e2a\u6570\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u4e0d\u76f8\u90bb\u6570\u7684\u7ec4\u5408\u6709 C_{n-k+1}^{k} C_{n-k+1}^{k} \u79cd\u3002 \u8bc1\u660e\u548c\u4e0a\u9762\u7684\u76f8\u540c\uff08\u5176\u5b9e\u5c31\u662f\u61d2\u5f97\u5199\uff09\uff0c\u8bf7\u81ea\u884c\u8bc1\u660e XD","title":"\u4e0d\u76f8\u90bb\u7684\u6392\u5217"},{"location":"math/combination/#_15","text":"\u5148\u770b\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a 5 5 \u672c\u4e66\uff0c\u7f16\u53f7\u5206\u522b\u662f 1,2,3,4,5 1,2,3,4,5 \uff0c\u73b0\u5728\u8981\u628a\u8fd9 5 \u672c\u4e66\u662f\u653e\u5728\u7f16\u53f7 1,2,3,4,5 1,2,3,4,5 \u7684\u4e66\u67b6\u4e0a\uff0c\u8981\u6c42\u4e66\u7684\u7f16\u53f7\u548c\u4e66\u67b6\u7684\u7f16\u53f7\u4e0d\u4e00\u6837\uff0c\u8bf7\u95ee\u6709\u591a\u5c11\u79cd\u4e0d\u4e00\u6837\u7684\u653e\u7f6e\u65b9\u6cd5\uff1f \u518d\u770b\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a \u80f8\u53e3\u8d34\u7740\u7f16\u53f7\u4e3a 1,2,\\cdots,n 1,2,\\cdots,n \u7684 n n \u4e2a\u7403\u5458\u5206\u522b\u4f4f\u5728\u7f16\u53f7\u4e3a 1,2,\\cdots,n 1,2,\\cdots,n \u7684 n n \u4e2a\u623f\u95f4\u91cc\u9762\u3002\u73b0\u89c4\u5b9a\u6bcf\u4e2a\u4eba\u4f4f\u4e00\u4e2a\u623f\u95f4\uff0c\u81ea\u5df1\u7684\u7f16\u53f7\u4e0d\u80fd\u548c\u623f\u95f4\u7684\u7f16\u53f7\u4e00\u6837\u3002 \u8fd9\u5c31\u662f\u9519\u6392\u95ee\u9898\u3002\u5f53 n=3 n=3 \u65f6\uff0c\u53ea\u80fd\u4e3a 312 \u6216 231 \u8fd9\u4e24\u79cd\u3002 \u90a3\u4e48\u9519\u6392\u95ee\u9898\u7684\u89e3\u9898\u601d\u8def\u662f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u4ee5\u7b2c\u4e8c\u4e2a\u95ee\u9898\u4e3a\u4f8b\uff1a \u9012\u63a8\u8fd8\u662f\u738b\u9053\uff01\uff01\uff01 \u521a\u5f00\u59cb\u6240\u6709\u7403\u5458\u90fd\u4f4f\u5728\u548c\u81ea\u5df1\u7f16\u53f7\u4e00\u6837\u7684\u623f\u95f4\u91cc\u9762\u3002\u7136\u540e\u9519\u6392\u5f00\u59cb\u4e86\uff0c\u7b2c n n \u4e2a\u7403\u5458\u4ece\u7b2c n n \u4e2a\u623f\u95f4\u51fa\u6765\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a n n \u60f3\u548c i(1 \\le i \\le n-1) i(1 \\le i \\le n-1) \u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7403\u5458\u6362\u623f\u95f4\uff0c\u5176\u4ed6 n-2 n-2 \u4e2a\u4eba\u6362\u623f\u95f4\u7684\u4e8b\u60c5\uff0c\u4ed6\u4eec\u5c31\u4e0d\u7ba1\u4e86\u3002\u5176\u4ed6 n-2 n-2 \u4e2a\u7403\u5458\u7684\u7684\u9519\u6392\u6570\u4e3a d[n-2] d[n-2] \uff0c n n \u53ef\u4ee5\u548c\u524d\u9762 1 \\sim n-1 1 \\sim n-1 \u5bf9\u6362\uff0c\u6240\u4ee5\u6709 n-1 n-1 \u4e2a d[n-2] d[n-2] \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a n n \u60f3\u548c i(1 \\le i \\le n-1) i(1 \\le i \\le n-1) \u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7403\u5458\u6362\u623f\u95f4\uff0c\u4f46\u662f n n \u53ea\u60f3 i i \u4f4f\u5728\u7b2c N N \u4e2a\u623f\u95f4\uff0c\u800c n n \u4e0d\u60f3\u4f4f\u7b2c I I \u4e2a\u623f\u95f4\u3002 \u53ef\u80fd\u4f60\u4f1a\u8fd9\u6837\u60f3\uff1a\u90a3\u4e48 n n \u53ef\u4ee5\u8ba9 j j \u4f4f\u5728\u7b2c I I \u53f7\u623f\u95f4\u91cc\u9762\uff0c\u7136\u540e n n \u4f4f\u5728\u623f\u95f4 J J \u3002\u62b1\u6b49\uff0c j(1 \\le j \\le n-1,j\\neq i) j(1 \\le j \\le n-1,j\\neq i) \u751f\u6c14 n n \u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u5c31\u53bb\u627e i i \u4e0d\u76f4\u63a5\u6765\u627e j j \u3002\u6ca1\u529e\u6cd5\uff0c n n \u628a\u81ea\u5df1\u80f8\u53e3\u7684\u7f16\u7801 N N \u6362\u6210\u4e86 I I \uff0c\u4ed6\u5047\u88c5\u81ea\u5df1\u662f i i \uff0c\u7136\u540e\u9519\u6392 1 \\sim n-1 1 \\sim n-1 \uff08\u4e5f\u5c31\u662f d[n-2] d[n-2] \uff09\u7684\u65f6\u5019\u53c2\u4e0e\u8fdb\u53bb\uff0c\u8fd9\u6837\u81ea\u5df1\u5c31\u4e0d\u4f1a\u5446\u5728\u7b2c I I \u53f7\u623f\u95f4\u4e86\u3002\u6240\u4ee5\u6709 n-1 n-1 \u4e2a d[n-1] d[n-1] \u3002 \u5982\u679c\u7406\u89e3\u4e86\u4ee5\u4e0a\u5185\u5bb9\uff0c\u90a3\u4e48\u9519\u6392\u7684\u516c\u5f0f\u5c31\u51fa\u6765\u4e86\uff1a d_n = (n-1)(d_{n-2} + d_{n-1}) (n\\geq 3) d_n = (n-1)(d_{n-2} + d_{n-1}) (n\\geq 3) \u540c\u65f6\u4e5f\u6709\uff1a d_n = n \\times d_{n-1} + (-1)^n d_n = n \\times d_{n-1} + (-1)^n \u9519\u4f4d\u6392\u5217\u6570\u5217\u4e3a 0,1,2,9,44,265,\\cdots 0,1,2,9,44,265,\\cdots","title":"\u9519\u4f4d\u6392\u5217\uff08\u9519\u6392\uff09"},{"location":"math/combination/#_16","text":"","title":"\u52a0\u6cd5 &amp; \u4e58\u6cd5\u539f\u7406"},{"location":"math/combination/#_17","text":"\u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u53ef\u4ee5\u6709 n n \u7c7b\u529e\u6cd5\uff0c a[i](1 \\le i \\le n) a[i](1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u7c7b\u65b9\u6cd5\u7684\u6570\u76ee\u3002 \u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S=a[1]+a[2]+\\cdots +a[n] S=a[1]+a[2]+\\cdots +a[n] \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002","title":"\u52a0\u6cd5\u539f\u7406"},{"location":"math/combination/#_18","text":"\u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u9700\u8981\u5206 n n \u4e2a\u6b65\u9aa4\uff0c a[i](1 \\le i \\le n) a[i](1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u4e2a\u6b65\u9aa4\u7684\u4e0d\u540c\u65b9\u6cd5\u6570\u76ee\u3002 \u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S = a[1] \\times a[2] \\times \\cdots \\times a[n] S = a[1] \\times a[2] \\times \\cdots \\times a[n] \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002","title":"\u4e58\u6cd5\u539f\u7406"},{"location":"math/combination/#_19","text":"\u4e00\u4e2a\u4e0e\u5206\u7c7b\u6709\u5173\uff0c\u4e00\u4e2a\u4e0e\u5206\u6b65\u6709\u5173\uff1b\u52a0\u6cd5\u539f\u7406\u662f \u201c\u5206\u7c7b\u5b8c\u6210\u201d\uff0c\u4e58\u6cd5\u539f\u7406\u662f \u201c\u5206\u6b65\u5b8c\u6210\u201d\u3002","title":"\u4e24\u539f\u7406\u7684\u533a\u522b"},{"location":"math/combination/#_20","text":"C_n^0 + C_n^1 + C_n^2 + C_n^3 + \\cdots + C_n^m = 2^n C_n^0 + C_n^1 + C_n^2 + C_n^3 + \\cdots + C_n^m = 2^n C_n^r + C_n^{r+1} = C_{n+1}^{r+1} C_n^r + C_n^{r+1} = C_{n+1}^{r+1} \\sum_{i=0}^m C_n^i C_m^{m-i} = C_{m+n}^m(n \\geq m) \\sum_{i=0}^m C_n^i C_m^{m-i} = C_{m+n}^m(n \\geq m)","title":"\u51e0\u4e2a\u5173\u4e8e\u7ec4\u5408\u7684\u516c\u5f0f"},{"location":"math/complex/","text":"\u5982\u679c\u60a8\u5df2\u7ecf\u5b66\u4e60\u8fc7\u590d\u6570\u76f8\u5173\u77e5\u8bc6\uff0c\u8bf7\u8df3\u8fc7\u672c\u9875\u9762\u3002 \u5b66\u4e60\u590d\u6570\u77e5\u8bc6\u9700\u8981\u4e00\u90e8\u5206\u5411\u91cf\u57fa\u7840\uff0c\u5982\u679c\u5e76\u672a\u5b66\u4e60\u8fc7\u5411\u91cf\u77e5\u8bc6\u8bf7\u79fb\u6b65 \u6570\u5b66 - \u6742\u9879 \u3002 \u590d\u6570\u7684\u5f15\u5165\uff0c\u5b9a\u4e49\u548c\u5206\u7c7b \u00b6 \u590d\u6570\u7684\u5f15\u5165 \u00b6 \u6ce8\uff1a\u4e0b\u9762\u7684\u5f15\u5165\u65b9\u6cd5\u6765\u81ea\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 2-2\u3002 \u6211\u4eec\u5728\u5b9e\u6570\u57df\u4e2d\uff0c\u8bf4 x^2+1=0 x^2+1=0 \u8fd9\u4e2a\u4e8c\u6b21\u65b9\u7a0b\u65e0\u89e3\u3002\u8fd9\u4e2a\u65b9\u7a0b\u65e0\u89e3\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u4e0d\u80fd\u5f3a\u884c\u8ba9\u5b83\u6709\u89e3\uff1f\u5982\u679c\u8ba9\u5b83\u6709\u89e3\u7684\u8bdd\uff0c\u786e\u5b9e\u6211\u4eec\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u4e2a\u89e3\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff1f \u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u5b9a\u4e49\u4e00\u4e2a\u65b0\u6570 \\text{i} \\text{i} \uff0c \\text{i}^2+1=0 \\text{i}^2+1=0 \uff0c\u90a3\u4e48 x^2+1=0 x^2+1=0 \u5c31\u6709\u4e00\u4e2a\u89e3 x=\\text{i} x=\\text{i} \u4e86\u3002 \u6211\u4eec\u5e0c\u671b\u5f15\u5165\u7684\u8fd9\u4e2a\u65b0\u6570\u4e0e\u5b9e\u6570\u57df\u4e2d\u7684\u6570\u4e00\u6837\uff0c\u80fd\u4e0e\u5b9e\u6570\u8fdb\u884c\u52a0\u6cd5\u548c\u4e58\u6cd5\u8fd0\u7b97\uff0c\u8fd8\u4fdd\u7559\u5404\u79cd\u8fd0\u7b97\u5f8b\u3002 \u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230 a+b\\text{i} a+b\\text{i} \u8fd9\u79cd\u5f62\u5f0f\uff0c\u5f53\u7136\u5176\u4e2d a,b a,b \u90fd\u662f\u5b9e\u6570\u3002\u628a \\text{i} \\text{i} \u770b\u505a\u7c7b\u4f3c\u53d8\u91cf\u7684\u4e1c\u897f\uff0c\u9a8c\u8bc1\u5176\u8fd0\u7b97\u6027\u8d28\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5168\u90e8\u6709\u7740 a+b\\text{i} a+b\\text{i} \u7684\u7c7b\u4f3c\u5f62\u5f0f\u3002 \u90a3\u4e48\u8fd9\u6837\u7684\u6027\u8d28\u5c31\u4e0e\u5b9e\u6570\u57df\u7c7b\u4f3c\u4e86\uff0c\u6211\u4eec\u628a\u6240\u6709\u6709\u7740 a+b\\text{i} a+b\\text{i} \u5f62\u5f0f\u7684\u6570\u653e\u5165\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c31\u51fa\u73b0\u4e86\u590d\u6570\u96c6 \\mathbb{C}=\\{a+b\\text{i} \\mid a,b\\in \\mathbb{R}\\} \\mathbb{C}=\\{a+b\\text{i} \\mid a,b\\in \\mathbb{R}\\} \u3002 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6570\u548c\u5b9e\u6570\u96c6\u4e2d\u7684\u6570\u7c7b\u4f3c\uff0c\u90fd\u6709\u5728\u96c6\u5408\u4e2d\u4efb\u9009\u4e24\u4e2a\u6570\u8fdb\u884c\u56db\u5219\u8fd0\u7b97\uff0c\u5f97\u5230\u7684\u6570\u90fd\u662f\u539f\u96c6\u5408\u4e2d\u7684\u6570\u7684\u6027\u8d28\u3002\u6211\u4eec\u8bf4\u590d\u6570\u96c6\u5bf9\u4e8e\u56db\u5219\u8fd0\u7b97\u662f \u5c01\u95ed\u7684 \u3002 \u590d\u6570\u7684\u5b9a\u4e49\u548c\u5206\u7c7b \u00b6 \u54c7\u54e6\u6211\u4eec\u5b9a\u4e49\u7684\u6570\u7684\u6027\u8d28\u8fd9\u4e48\u597d\uff01 \u6211\u4eec\u5b9a\u4e49\u5f62\u5982 a+b\\text{i} a+b\\text{i} \uff0c\u5176\u4e2d a,b\\in \\mathbb{R} a,b\\in \\mathbb{R} \u7684\u6570\u53eb\u505a \u590d\u6570 \uff0c\u5176\u4e2d \\text{i} \\text{i} \u88ab\u79f0\u4e3a \u865a\u6570\u5355\u4f4d \uff0c\u5168\u4f53\u590d\u6570\u7684\u96c6\u5408\u53eb\u505a \u590d\u6570\u96c6 \u3002 \u590d\u6570\u901a\u5e38\u7528 z z \u8868\u793a\uff0c\u5373 z=a+b\\text{i} z=a+b\\text{i} \u3002\u8fd9\u79cd\u5f62\u5f0f\u88ab\u79f0\u4e3a \u590d\u6570\u7684\u4ee3\u6570\u5f62\u5f0f \u3002\u5176\u4e2d a a \u79f0\u4e3a\u590d\u6570 z z \u7684 \u5b9e\u90e8 \uff0c b b \u79f0\u4e3a\u590d\u6570 z z \u7684 \u865a\u90e8 \u3002\u5982\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u90fd\u6709 a,b\\in \\mathbb{R} a,b\\in \\mathbb{R} \u3002 \u5bf9\u4e8e\u4e00\u4e2a\u590d\u6570 z z \uff0c\u5f53\u4e14\u4ec5\u5f53 b=0 b=0 \u65f6\uff0c\u5b83\u662f\u5b9e\u6570\uff0c\u5f53 b\\not = 0 b\\not = 0 \u65f6\uff0c\u5b83\u662f\u865a\u6570\uff0c\u5f53 a=0 a=0 \u4e14 b\\not = 0 b\\not = 0 \u65f6\uff0c\u5b83\u662f\u7eaf\u865a\u6570\u3002 \u7eaf\u865a\u6570\uff0c\u865a\u6570\uff0c\u5b9e\u6570\uff0c\u590d\u6570\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56fe\u7247\u6765\u81ea\uff1a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 2-2 \u7b2c 103 \u9875 \u590d\u6570\u7684\u6027\u8d28\u4e0e\u8fd0\u7b97 \u00b6 \u590d\u6570\u7684\u51e0\u4f55\u610f\u4e49 \u00b6 \u6211\u4eec\u77e5\u9053\u4e86 a+b\\text{i} a+b\\text{i} \u8fd9\u6837\u7c7b\u4f3c\u7684\u5f62\u5f0f\u7684\u6570\u88ab\u79f0\u4e3a\u590d\u6570\uff0c\u5e76\u4e14\u7ed9\u51fa\u4e86\u5b9a\u4e49\u548c\u5206\u7c7b\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u6316\u6398\u4e00\u4e0b\u66f4\u6df1\u5c42\u7684\u6027\u8d28\u3002 \u6211\u4eec\u628a\u6240\u6709\u5b9e\u6570\u90fd\u653e\u5728\u4e86\u6570\u8f74\u4e0a\uff0c\u5e76\u4e14\u53d1\u73b0\u6570\u8f74\u4e0a\u7684\u70b9\u4e0e\u5b9e\u6570\u4e00\u4e00\u5bf9\u5e94\u3002\u6211\u4eec\u8003\u8651\u5bf9\u590d\u6570\u4e5f\u8fd9\u6837\u5904\u7406\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49 \u590d\u6570\u76f8\u7b49 \uff1a\u4e24\u4e2a\u590d\u6570 z_1=a+b\\text{i},z_2=c+d\\text{i} z_1=a+b\\text{i},z_2=c+d\\text{i} \u662f\u76f8\u7b49\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 a=c a=c \u4e14 b=d b=d \u3002 \u8fd9\u4e48\u5b9a\u4e49\u662f\u5341\u5206\u81ea\u7136\u7684\uff0c\u5728\u6b64\u4e0d\u505a\u8fc7\u591a\u89e3\u91ca\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u552f\u4e00\u7684\u6709\u5e8f\u5b9e\u6570\u5bf9 (a,b) (a,b) \u8868\u793a\u4e00\u4e2a\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u3002\u8fd9\u6837\uff0c\u8054\u60f3\u5230\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \u590d\u6570\u96c6\u4e0e\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u70b9\u96c6\u4e00\u4e00\u5bf9\u5e94 \u3002\u597d\u4e86\uff0c\u6211\u4eec\u627e\u5230\u4e86\u590d\u6570\u7684\u4e00\u79cd\u51e0\u4f55\u610f\u4e49\u3002 \u90a3\u4e48\u8fd9\u4e2a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5c31\u4e0d\u518d\u4e00\u822c\uff0c\u56e0\u4e3a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u70b9\u5177\u6709\u4e86\u7279\u6b8a\u610f\u4e49\u2014\u2014\u8868\u793a\u4e00\u4e2a\u590d\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u8fd9\u6837\u7684\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u79f0\u4e3a \u590d\u5e73\u9762 \uff0c x x \u8f74\u79f0\u4e3a \u5b9e\u8f74 \uff0c y y \u8f74\u79f0\u4e3a \u865a\u8f74 \u3002\u6211\u4eec\u8fdb\u4e00\u6b65\u5730\u8bf4\uff1a \u590d\u6570\u96c6\u4e0e\u590d\u5e73\u9762\u5185\u6240\u6709\u7684\u70b9\u6240\u6784\u6210\u7684\u96c6\u5408\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 \u3002 \u6211\u4eec\u8003\u8651\u5230\u5b66\u8fc7\u7684\u5e73\u9762\u5411\u91cf\u7684\u77e5\u8bc6\uff0c\u53d1\u73b0\u5411\u91cf\u7684\u5750\u6807\u8868\u793a\u4e5f\u662f\u4e00\u4e2a\u6709\u5e8f\u5b9e\u6570\u5bf9 (a,b) (a,b) \uff0c\u663e\u7136\uff0c\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u5bf9\u5e94\u590d\u5e73\u9762\u5185\u7684\u70b9 Z(a,b) Z(a,b) \uff0c\u90a3\u4e48\u5b83\u8fd8\u5bf9\u5e94\u5e73\u9762\u5411\u91cf \\overrightarrow{OZ}=(a,b) \\overrightarrow{OZ}=(a,b) \uff0c\u4e8e\u662f\u6211\u4eec\u53c8\u627e\u5230\u4e86\u590d\u6570\u7684\u53e6\u4e00\u79cd\u51e0\u4f55\u610f\u4e49\uff1a \u590d\u6570\u96c6\u4e0e\u590d\u5e73\u9762\u5185\u7684\u5411\u91cf\u6240\u6784\u6210\u7684\u96c6\u5408\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff08\u5b9e\u6570 0 0 \u4e0e\u96f6\u5411\u91cf\u5bf9\u5e94\uff09 \u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u7531\u5411\u91cf\u7684\u77e5\u8bc6\u8fc1\u79fb\u5230\u590d\u6570\u4e0a\u6765\uff0c\u5b9a\u4e49 \u590d\u6570\u7684\u6a21 \u5c31\u662f\u590d\u6570\u6240\u5bf9\u5e94\u7684\u5411\u91cf\u7684\u6a21\u3002\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u7684\u6a21 |z|=\\sqrt{a^2+b^2} |z|=\\sqrt{a^2+b^2} \u3002 \u4e8e\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5e38\u628a\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u79f0\u4e3a\u70b9 Z Z \u6216\u5411\u91cf \\overrightarrow {OZ} \\overrightarrow {OZ} \uff0c\u5e76\u89c4\u5b9a\u76f8\u7b49\u7684\u5411\u91cf\u8868\u793a\u540c\u4e00\u4e2a\u590d\u6570\u3002 \u5e76\u4e14\u7531\u5411\u91cf\u7684\u77e5\u8bc6\u6211\u4eec\u53d1\u73b0\uff0c\u865a\u6570\u4e0d\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\uff08\u4f46\u662f\u5b9e\u6570\u662f\u53ef\u4ee5\u7684\uff09\u3002 \u590d\u6570\u7684\u8fd0\u7b97 \u00b6 \u590d\u6570\u7684\u52a0\u6cd5\u4e0e\u51cf\u6cd5 \u00b6 \u6211\u4eec\u89c4\u5b9a\uff0c\u590d\u6570\u7684\u52a0\u6cd5\u89c4\u5219\u5982\u4e0b\uff1a \u8bbe z_1=a+b\\text{i},z_2=c+d\\text{i} z_1=a+b\\text{i},z_2=c+d\\text{i} \uff0c\u90a3\u4e48 z_1+z_2=(a+c)+(b+d)\\text{i} z_1+z_2=(a+c)+(b+d)\\text{i} \u5f88\u660e\u663e\uff0c\u4e24\u4e2a\u590d\u6570\u7684\u548c\u4ecd\u4e3a\u590d\u6570\u3002 \u8003\u8651\u5230\u5411\u91cf\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u6211\u4eec\u53d1\u73b0\u590d\u6570\u7684\u52a0\u6cd5\u8fd0\u7b97\u7b26\u5408\u5411\u91cf\u7684\u52a0\u6cd5\u8fd0\u7b97\u6cd5\u5219\uff0c\u8fd9\u540c\u6837\u8bc1\u660e\u4e86\u590d\u6570\u7684\u51e0\u4f55\u610f\u4e49\u7684\u6b63\u786e\u6027\u3002 \u540c\u6837\u53ef\u4ee5\u9a8c\u8bc1\uff0c \u590d\u6570\u7684\u52a0\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b \u3002\u5373\uff1a z_1+z_2=z_2+z_1\\\\ (z_1+z_2)+z_3=z_1+(z_2+z_3) z_1+z_2=z_2+z_1\\\\ (z_1+z_2)+z_3=z_1+(z_2+z_3) \u51cf\u6cd5\u4f5c\u4e3a\u52a0\u6cd5\u7684\u9006\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u6cd5\u6cd5\u5219\u4e0e\u590d\u6570\u76f8\u7b49\u7684\u5b9a\u4e49\u6765\u63a8\u5bfc\u51fa\u51cf\u6cd5\u6cd5\u5219\uff1a z_1-z_2=(a-c)+(b-d)\\text{i} z_1-z_2=(a-c)+(b-d)\\text{i} \u8fd9\u540c\u6837\u7b26\u5408\u5411\u91cf\u7684\u51cf\u6cd5\u8fd0\u7b97\u3002 \u590d\u6570\u7684\u4e58\u6cd5\u4e0e\u9664\u6cd5 \u00b6 \u6211\u4eec\u89c4\u5b9a\uff0c\u590d\u6570\u7684\u52a0\u6cd5\u89c4\u5219\u5982\u4e0b\uff1a \u8bbe z_1=a+b\\text{i},z_2=c+d\\text{i} z_1=a+b\\text{i},z_2=c+d\\text{i} \uff0c\u90a3\u4e48 \\begin{aligned} z_1z_2&=(a+b\\text{i})(c+d\\text{i})\\\\ &=ac+bc\\text{i}+ad\\text{i}+bd\\text{i}^2\\\\ &=(ac-bd)+(bc+ad)\\text{i} \\end{aligned} \\begin{aligned} z_1z_2&=(a+b\\text{i})(c+d\\text{i})\\\\ &=ac+bc\\text{i}+ad\\text{i}+bd\\text{i}^2\\\\ &=(ac-bd)+(bc+ad)\\text{i} \\end{aligned} \u53ef\u4ee5\u770b\u51fa\uff0c\u4e24\u4e2a\u590d\u6570\u76f8\u4e58\u7c7b\u4f3c\u4e8e\u4e24\u4e2a\u591a\u9879\u5f0f\u76f8\u4e58\uff0c\u53ea\u9700\u8981\u628a \\text{i}^2 \\text{i}^2 \u6362\u6210 -1 -1 \uff0c\u5e76\u5c06\u5b9e\u90e8\u4e0e\u865a\u90e8\u5206\u522b\u5408\u5e76\u5373\u53ef\u3002 \u590d\u6570\u786e\u5b9e\u4e0e\u591a\u9879\u5f0f\u6709\u5173\uff0c\u56e0\u4e3a\u590d\u6570\u57df\u662f\u5b9e\u7cfb\u6570\u591a\u9879\u5f0f\u73af\u6a21\u6389 x^2+1 x^2+1 \u751f\u6210\u7684\u7406\u60f3\u3002\uff08\u8fd9\u53e5\u8bdd\u4e0d\u660e\u767d\u5176\u5b9e\u4e5f\u6ca1\u6709\u5173\u7cfb\uff09 \u590d\u6570\u7684\u4e58\u6cd5\u4e0e\u5411\u91cf\u7684\u5411\u91cf\u79ef\u5f62\u5f0f\u7c7b\u4f3c\uff0c\u662f\u7531\u4e8e\u590d\u6570\u96c6\u662f\u6570\u73af\u3002 \u4e8e\u662f\u5bb9\u6613\u77e5\u9053\uff0c \u590d\u6570\u4e58\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u7ed3\u5408\u5f8b\u548c\u5bf9\u52a0\u6cd5\u7684\u5206\u914d\u5f8b \uff0c\u5373\uff1a z_1z_2=z_2z_1\\\\ (z_1z_2)z_3=z_1(z_2z_3)\\\\ z_1(z_2+z_3)=z_1z_2+z_1z_3 z_1z_2=z_2z_1\\\\ (z_1z_2)z_3=z_1(z_2z_3)\\\\ z_1(z_2+z_3)=z_1z_2+z_1z_3 \u7531\u4e8e\u6ee1\u8db3\u8fd0\u7b97\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5b9e\u6570\u57df\u4e2d\u7684 \u4e58\u6cd5\u516c\u5f0f\u5728\u590d\u6570\u57df\u4e2d\u540c\u6837\u9002\u7528 \u3002 \u9664\u6cd5\u8fd0\u7b97\u662f\u4e58\u6cd5\u8fd0\u7b97\u7684\u9006\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u4e00\u4e0b\uff1a \\begin{aligned} \\frac{a+b\\text{i}}{c+d\\text{i}}&=\\frac{(a+b\\text{i})(c-d\\text{i})}{(c+d\\text{i})(c-d\\text{i})}\\\\ &=\\frac{ac+bd}{c^2+d^2}+\\frac{bc-ad}{c^2+d^2}\\text{i} &(c+d\\text{i}\\not =0) \\end{aligned} \\begin{aligned} \\frac{a+b\\text{i}}{c+d\\text{i}}&=\\frac{(a+b\\text{i})(c-d\\text{i})}{(c+d\\text{i})(c-d\\text{i})}\\\\ &=\\frac{ac+bd}{c^2+d^2}+\\frac{bc-ad}{c^2+d^2}\\text{i} &(c+d\\text{i}\\not =0) \\end{aligned} \u4e3a\u4e86\u5206\u6bcd\u5b9e\u6570\u5316\uff0c\u6211\u4eec\u4e58\u4e86\u4e00\u4e2a c-d\\text{i} c-d\\text{i} \uff0c\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u6709\u610f\u4e49\u3002 \u6211\u4eec\u5b9a\u4e49\uff0c\u5f53\u4e24\u4e2a\u865a\u6570\u5b9e\u90e8\u76f8\u7b49\uff0c\u865a\u90e8\u4e92\u4e3a\u76f8\u53cd\u6570\u65f6\uff0c\u8fd9\u4e24\u4e2a\u590d\u6570\u4e92\u4e3a \u5171\u8f6d\u590d\u6570 \u3002\u901a\u5e38\u8bb0 z=a+b\\text{i} z=a+b\\text{i} \u7684\u5171\u8f6d\u590d\u6570\u4e3a \\bar z=a-b\\text{i} \\bar z=a-b\\text{i} \u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e24\u4e2a\u590d\u6570\u4e92\u4e3a\u5171\u8f6d\u590d\u6570\uff0c\u90a3\u4e48\u5b83\u4eec \u5173\u4e8e\u5b9e\u8f74\u5bf9\u79f0 \u3002 \u7531\u4e8e\u5411\u91cf\u6ca1\u6709\u9664\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u8ba8\u8bba\u4e0e\u5411\u91cf\u7684\u5173\u7cfb\u3002","title":"\u590d\u6570"},{"location":"math/complex/#_1","text":"","title":"\u590d\u6570\u7684\u5f15\u5165\uff0c\u5b9a\u4e49\u548c\u5206\u7c7b"},{"location":"math/complex/#_2","text":"\u6ce8\uff1a\u4e0b\u9762\u7684\u5f15\u5165\u65b9\u6cd5\u6765\u81ea\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 2-2\u3002 \u6211\u4eec\u5728\u5b9e\u6570\u57df\u4e2d\uff0c\u8bf4 x^2+1=0 x^2+1=0 \u8fd9\u4e2a\u4e8c\u6b21\u65b9\u7a0b\u65e0\u89e3\u3002\u8fd9\u4e2a\u65b9\u7a0b\u65e0\u89e3\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u4e0d\u80fd\u5f3a\u884c\u8ba9\u5b83\u6709\u89e3\uff1f\u5982\u679c\u8ba9\u5b83\u6709\u89e3\u7684\u8bdd\uff0c\u786e\u5b9e\u6211\u4eec\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u4e2a\u89e3\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff1f \u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u5b9a\u4e49\u4e00\u4e2a\u65b0\u6570 \\text{i} \\text{i} \uff0c \\text{i}^2+1=0 \\text{i}^2+1=0 \uff0c\u90a3\u4e48 x^2+1=0 x^2+1=0 \u5c31\u6709\u4e00\u4e2a\u89e3 x=\\text{i} x=\\text{i} \u4e86\u3002 \u6211\u4eec\u5e0c\u671b\u5f15\u5165\u7684\u8fd9\u4e2a\u65b0\u6570\u4e0e\u5b9e\u6570\u57df\u4e2d\u7684\u6570\u4e00\u6837\uff0c\u80fd\u4e0e\u5b9e\u6570\u8fdb\u884c\u52a0\u6cd5\u548c\u4e58\u6cd5\u8fd0\u7b97\uff0c\u8fd8\u4fdd\u7559\u5404\u79cd\u8fd0\u7b97\u5f8b\u3002 \u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230 a+b\\text{i} a+b\\text{i} \u8fd9\u79cd\u5f62\u5f0f\uff0c\u5f53\u7136\u5176\u4e2d a,b a,b \u90fd\u662f\u5b9e\u6570\u3002\u628a \\text{i} \\text{i} \u770b\u505a\u7c7b\u4f3c\u53d8\u91cf\u7684\u4e1c\u897f\uff0c\u9a8c\u8bc1\u5176\u8fd0\u7b97\u6027\u8d28\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5168\u90e8\u6709\u7740 a+b\\text{i} a+b\\text{i} \u7684\u7c7b\u4f3c\u5f62\u5f0f\u3002 \u90a3\u4e48\u8fd9\u6837\u7684\u6027\u8d28\u5c31\u4e0e\u5b9e\u6570\u57df\u7c7b\u4f3c\u4e86\uff0c\u6211\u4eec\u628a\u6240\u6709\u6709\u7740 a+b\\text{i} a+b\\text{i} \u5f62\u5f0f\u7684\u6570\u653e\u5165\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c31\u51fa\u73b0\u4e86\u590d\u6570\u96c6 \\mathbb{C}=\\{a+b\\text{i} \\mid a,b\\in \\mathbb{R}\\} \\mathbb{C}=\\{a+b\\text{i} \\mid a,b\\in \\mathbb{R}\\} \u3002 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6570\u548c\u5b9e\u6570\u96c6\u4e2d\u7684\u6570\u7c7b\u4f3c\uff0c\u90fd\u6709\u5728\u96c6\u5408\u4e2d\u4efb\u9009\u4e24\u4e2a\u6570\u8fdb\u884c\u56db\u5219\u8fd0\u7b97\uff0c\u5f97\u5230\u7684\u6570\u90fd\u662f\u539f\u96c6\u5408\u4e2d\u7684\u6570\u7684\u6027\u8d28\u3002\u6211\u4eec\u8bf4\u590d\u6570\u96c6\u5bf9\u4e8e\u56db\u5219\u8fd0\u7b97\u662f \u5c01\u95ed\u7684 \u3002","title":"\u590d\u6570\u7684\u5f15\u5165"},{"location":"math/complex/#_3","text":"\u54c7\u54e6\u6211\u4eec\u5b9a\u4e49\u7684\u6570\u7684\u6027\u8d28\u8fd9\u4e48\u597d\uff01 \u6211\u4eec\u5b9a\u4e49\u5f62\u5982 a+b\\text{i} a+b\\text{i} \uff0c\u5176\u4e2d a,b\\in \\mathbb{R} a,b\\in \\mathbb{R} \u7684\u6570\u53eb\u505a \u590d\u6570 \uff0c\u5176\u4e2d \\text{i} \\text{i} \u88ab\u79f0\u4e3a \u865a\u6570\u5355\u4f4d \uff0c\u5168\u4f53\u590d\u6570\u7684\u96c6\u5408\u53eb\u505a \u590d\u6570\u96c6 \u3002 \u590d\u6570\u901a\u5e38\u7528 z z \u8868\u793a\uff0c\u5373 z=a+b\\text{i} z=a+b\\text{i} \u3002\u8fd9\u79cd\u5f62\u5f0f\u88ab\u79f0\u4e3a \u590d\u6570\u7684\u4ee3\u6570\u5f62\u5f0f \u3002\u5176\u4e2d a a \u79f0\u4e3a\u590d\u6570 z z \u7684 \u5b9e\u90e8 \uff0c b b \u79f0\u4e3a\u590d\u6570 z z \u7684 \u865a\u90e8 \u3002\u5982\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u90fd\u6709 a,b\\in \\mathbb{R} a,b\\in \\mathbb{R} \u3002 \u5bf9\u4e8e\u4e00\u4e2a\u590d\u6570 z z \uff0c\u5f53\u4e14\u4ec5\u5f53 b=0 b=0 \u65f6\uff0c\u5b83\u662f\u5b9e\u6570\uff0c\u5f53 b\\not = 0 b\\not = 0 \u65f6\uff0c\u5b83\u662f\u865a\u6570\uff0c\u5f53 a=0 a=0 \u4e14 b\\not = 0 b\\not = 0 \u65f6\uff0c\u5b83\u662f\u7eaf\u865a\u6570\u3002 \u7eaf\u865a\u6570\uff0c\u865a\u6570\uff0c\u5b9e\u6570\uff0c\u590d\u6570\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56fe\u7247\u6765\u81ea\uff1a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 2-2 \u7b2c 103 \u9875","title":"\u590d\u6570\u7684\u5b9a\u4e49\u548c\u5206\u7c7b"},{"location":"math/complex/#_4","text":"","title":"\u590d\u6570\u7684\u6027\u8d28\u4e0e\u8fd0\u7b97"},{"location":"math/complex/#_5","text":"\u6211\u4eec\u77e5\u9053\u4e86 a+b\\text{i} a+b\\text{i} \u8fd9\u6837\u7c7b\u4f3c\u7684\u5f62\u5f0f\u7684\u6570\u88ab\u79f0\u4e3a\u590d\u6570\uff0c\u5e76\u4e14\u7ed9\u51fa\u4e86\u5b9a\u4e49\u548c\u5206\u7c7b\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u6316\u6398\u4e00\u4e0b\u66f4\u6df1\u5c42\u7684\u6027\u8d28\u3002 \u6211\u4eec\u628a\u6240\u6709\u5b9e\u6570\u90fd\u653e\u5728\u4e86\u6570\u8f74\u4e0a\uff0c\u5e76\u4e14\u53d1\u73b0\u6570\u8f74\u4e0a\u7684\u70b9\u4e0e\u5b9e\u6570\u4e00\u4e00\u5bf9\u5e94\u3002\u6211\u4eec\u8003\u8651\u5bf9\u590d\u6570\u4e5f\u8fd9\u6837\u5904\u7406\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49 \u590d\u6570\u76f8\u7b49 \uff1a\u4e24\u4e2a\u590d\u6570 z_1=a+b\\text{i},z_2=c+d\\text{i} z_1=a+b\\text{i},z_2=c+d\\text{i} \u662f\u76f8\u7b49\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 a=c a=c \u4e14 b=d b=d \u3002 \u8fd9\u4e48\u5b9a\u4e49\u662f\u5341\u5206\u81ea\u7136\u7684\uff0c\u5728\u6b64\u4e0d\u505a\u8fc7\u591a\u89e3\u91ca\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u552f\u4e00\u7684\u6709\u5e8f\u5b9e\u6570\u5bf9 (a,b) (a,b) \u8868\u793a\u4e00\u4e2a\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u3002\u8fd9\u6837\uff0c\u8054\u60f3\u5230\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \u590d\u6570\u96c6\u4e0e\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u70b9\u96c6\u4e00\u4e00\u5bf9\u5e94 \u3002\u597d\u4e86\uff0c\u6211\u4eec\u627e\u5230\u4e86\u590d\u6570\u7684\u4e00\u79cd\u51e0\u4f55\u610f\u4e49\u3002 \u90a3\u4e48\u8fd9\u4e2a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5c31\u4e0d\u518d\u4e00\u822c\uff0c\u56e0\u4e3a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u70b9\u5177\u6709\u4e86\u7279\u6b8a\u610f\u4e49\u2014\u2014\u8868\u793a\u4e00\u4e2a\u590d\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u8fd9\u6837\u7684\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u79f0\u4e3a \u590d\u5e73\u9762 \uff0c x x \u8f74\u79f0\u4e3a \u5b9e\u8f74 \uff0c y y \u8f74\u79f0\u4e3a \u865a\u8f74 \u3002\u6211\u4eec\u8fdb\u4e00\u6b65\u5730\u8bf4\uff1a \u590d\u6570\u96c6\u4e0e\u590d\u5e73\u9762\u5185\u6240\u6709\u7684\u70b9\u6240\u6784\u6210\u7684\u96c6\u5408\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 \u3002 \u6211\u4eec\u8003\u8651\u5230\u5b66\u8fc7\u7684\u5e73\u9762\u5411\u91cf\u7684\u77e5\u8bc6\uff0c\u53d1\u73b0\u5411\u91cf\u7684\u5750\u6807\u8868\u793a\u4e5f\u662f\u4e00\u4e2a\u6709\u5e8f\u5b9e\u6570\u5bf9 (a,b) (a,b) \uff0c\u663e\u7136\uff0c\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u5bf9\u5e94\u590d\u5e73\u9762\u5185\u7684\u70b9 Z(a,b) Z(a,b) \uff0c\u90a3\u4e48\u5b83\u8fd8\u5bf9\u5e94\u5e73\u9762\u5411\u91cf \\overrightarrow{OZ}=(a,b) \\overrightarrow{OZ}=(a,b) \uff0c\u4e8e\u662f\u6211\u4eec\u53c8\u627e\u5230\u4e86\u590d\u6570\u7684\u53e6\u4e00\u79cd\u51e0\u4f55\u610f\u4e49\uff1a \u590d\u6570\u96c6\u4e0e\u590d\u5e73\u9762\u5185\u7684\u5411\u91cf\u6240\u6784\u6210\u7684\u96c6\u5408\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff08\u5b9e\u6570 0 0 \u4e0e\u96f6\u5411\u91cf\u5bf9\u5e94\uff09 \u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u7531\u5411\u91cf\u7684\u77e5\u8bc6\u8fc1\u79fb\u5230\u590d\u6570\u4e0a\u6765\uff0c\u5b9a\u4e49 \u590d\u6570\u7684\u6a21 \u5c31\u662f\u590d\u6570\u6240\u5bf9\u5e94\u7684\u5411\u91cf\u7684\u6a21\u3002\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u7684\u6a21 |z|=\\sqrt{a^2+b^2} |z|=\\sqrt{a^2+b^2} \u3002 \u4e8e\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5e38\u628a\u590d\u6570 z=a+b\\text{i} z=a+b\\text{i} \u79f0\u4e3a\u70b9 Z Z \u6216\u5411\u91cf \\overrightarrow {OZ} \\overrightarrow {OZ} \uff0c\u5e76\u89c4\u5b9a\u76f8\u7b49\u7684\u5411\u91cf\u8868\u793a\u540c\u4e00\u4e2a\u590d\u6570\u3002 \u5e76\u4e14\u7531\u5411\u91cf\u7684\u77e5\u8bc6\u6211\u4eec\u53d1\u73b0\uff0c\u865a\u6570\u4e0d\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\uff08\u4f46\u662f\u5b9e\u6570\u662f\u53ef\u4ee5\u7684\uff09\u3002","title":"\u590d\u6570\u7684\u51e0\u4f55\u610f\u4e49"},{"location":"math/complex/#_6","text":"","title":"\u590d\u6570\u7684\u8fd0\u7b97"},{"location":"math/complex/#_7","text":"\u6211\u4eec\u89c4\u5b9a\uff0c\u590d\u6570\u7684\u52a0\u6cd5\u89c4\u5219\u5982\u4e0b\uff1a \u8bbe z_1=a+b\\text{i},z_2=c+d\\text{i} z_1=a+b\\text{i},z_2=c+d\\text{i} \uff0c\u90a3\u4e48 z_1+z_2=(a+c)+(b+d)\\text{i} z_1+z_2=(a+c)+(b+d)\\text{i} \u5f88\u660e\u663e\uff0c\u4e24\u4e2a\u590d\u6570\u7684\u548c\u4ecd\u4e3a\u590d\u6570\u3002 \u8003\u8651\u5230\u5411\u91cf\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u6211\u4eec\u53d1\u73b0\u590d\u6570\u7684\u52a0\u6cd5\u8fd0\u7b97\u7b26\u5408\u5411\u91cf\u7684\u52a0\u6cd5\u8fd0\u7b97\u6cd5\u5219\uff0c\u8fd9\u540c\u6837\u8bc1\u660e\u4e86\u590d\u6570\u7684\u51e0\u4f55\u610f\u4e49\u7684\u6b63\u786e\u6027\u3002 \u540c\u6837\u53ef\u4ee5\u9a8c\u8bc1\uff0c \u590d\u6570\u7684\u52a0\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b \u3002\u5373\uff1a z_1+z_2=z_2+z_1\\\\ (z_1+z_2)+z_3=z_1+(z_2+z_3) z_1+z_2=z_2+z_1\\\\ (z_1+z_2)+z_3=z_1+(z_2+z_3) \u51cf\u6cd5\u4f5c\u4e3a\u52a0\u6cd5\u7684\u9006\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u6cd5\u6cd5\u5219\u4e0e\u590d\u6570\u76f8\u7b49\u7684\u5b9a\u4e49\u6765\u63a8\u5bfc\u51fa\u51cf\u6cd5\u6cd5\u5219\uff1a z_1-z_2=(a-c)+(b-d)\\text{i} z_1-z_2=(a-c)+(b-d)\\text{i} \u8fd9\u540c\u6837\u7b26\u5408\u5411\u91cf\u7684\u51cf\u6cd5\u8fd0\u7b97\u3002","title":"\u590d\u6570\u7684\u52a0\u6cd5\u4e0e\u51cf\u6cd5"},{"location":"math/complex/#_8","text":"\u6211\u4eec\u89c4\u5b9a\uff0c\u590d\u6570\u7684\u52a0\u6cd5\u89c4\u5219\u5982\u4e0b\uff1a \u8bbe z_1=a+b\\text{i},z_2=c+d\\text{i} z_1=a+b\\text{i},z_2=c+d\\text{i} \uff0c\u90a3\u4e48 \\begin{aligned} z_1z_2&=(a+b\\text{i})(c+d\\text{i})\\\\ &=ac+bc\\text{i}+ad\\text{i}+bd\\text{i}^2\\\\ &=(ac-bd)+(bc+ad)\\text{i} \\end{aligned} \\begin{aligned} z_1z_2&=(a+b\\text{i})(c+d\\text{i})\\\\ &=ac+bc\\text{i}+ad\\text{i}+bd\\text{i}^2\\\\ &=(ac-bd)+(bc+ad)\\text{i} \\end{aligned} \u53ef\u4ee5\u770b\u51fa\uff0c\u4e24\u4e2a\u590d\u6570\u76f8\u4e58\u7c7b\u4f3c\u4e8e\u4e24\u4e2a\u591a\u9879\u5f0f\u76f8\u4e58\uff0c\u53ea\u9700\u8981\u628a \\text{i}^2 \\text{i}^2 \u6362\u6210 -1 -1 \uff0c\u5e76\u5c06\u5b9e\u90e8\u4e0e\u865a\u90e8\u5206\u522b\u5408\u5e76\u5373\u53ef\u3002 \u590d\u6570\u786e\u5b9e\u4e0e\u591a\u9879\u5f0f\u6709\u5173\uff0c\u56e0\u4e3a\u590d\u6570\u57df\u662f\u5b9e\u7cfb\u6570\u591a\u9879\u5f0f\u73af\u6a21\u6389 x^2+1 x^2+1 \u751f\u6210\u7684\u7406\u60f3\u3002\uff08\u8fd9\u53e5\u8bdd\u4e0d\u660e\u767d\u5176\u5b9e\u4e5f\u6ca1\u6709\u5173\u7cfb\uff09 \u590d\u6570\u7684\u4e58\u6cd5\u4e0e\u5411\u91cf\u7684\u5411\u91cf\u79ef\u5f62\u5f0f\u7c7b\u4f3c\uff0c\u662f\u7531\u4e8e\u590d\u6570\u96c6\u662f\u6570\u73af\u3002 \u4e8e\u662f\u5bb9\u6613\u77e5\u9053\uff0c \u590d\u6570\u4e58\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u7ed3\u5408\u5f8b\u548c\u5bf9\u52a0\u6cd5\u7684\u5206\u914d\u5f8b \uff0c\u5373\uff1a z_1z_2=z_2z_1\\\\ (z_1z_2)z_3=z_1(z_2z_3)\\\\ z_1(z_2+z_3)=z_1z_2+z_1z_3 z_1z_2=z_2z_1\\\\ (z_1z_2)z_3=z_1(z_2z_3)\\\\ z_1(z_2+z_3)=z_1z_2+z_1z_3 \u7531\u4e8e\u6ee1\u8db3\u8fd0\u7b97\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5b9e\u6570\u57df\u4e2d\u7684 \u4e58\u6cd5\u516c\u5f0f\u5728\u590d\u6570\u57df\u4e2d\u540c\u6837\u9002\u7528 \u3002 \u9664\u6cd5\u8fd0\u7b97\u662f\u4e58\u6cd5\u8fd0\u7b97\u7684\u9006\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u4e00\u4e0b\uff1a \\begin{aligned} \\frac{a+b\\text{i}}{c+d\\text{i}}&=\\frac{(a+b\\text{i})(c-d\\text{i})}{(c+d\\text{i})(c-d\\text{i})}\\\\ &=\\frac{ac+bd}{c^2+d^2}+\\frac{bc-ad}{c^2+d^2}\\text{i} &(c+d\\text{i}\\not =0) \\end{aligned} \\begin{aligned} \\frac{a+b\\text{i}}{c+d\\text{i}}&=\\frac{(a+b\\text{i})(c-d\\text{i})}{(c+d\\text{i})(c-d\\text{i})}\\\\ &=\\frac{ac+bd}{c^2+d^2}+\\frac{bc-ad}{c^2+d^2}\\text{i} &(c+d\\text{i}\\not =0) \\end{aligned} \u4e3a\u4e86\u5206\u6bcd\u5b9e\u6570\u5316\uff0c\u6211\u4eec\u4e58\u4e86\u4e00\u4e2a c-d\\text{i} c-d\\text{i} \uff0c\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u6709\u610f\u4e49\u3002 \u6211\u4eec\u5b9a\u4e49\uff0c\u5f53\u4e24\u4e2a\u865a\u6570\u5b9e\u90e8\u76f8\u7b49\uff0c\u865a\u90e8\u4e92\u4e3a\u76f8\u53cd\u6570\u65f6\uff0c\u8fd9\u4e24\u4e2a\u590d\u6570\u4e92\u4e3a \u5171\u8f6d\u590d\u6570 \u3002\u901a\u5e38\u8bb0 z=a+b\\text{i} z=a+b\\text{i} \u7684\u5171\u8f6d\u590d\u6570\u4e3a \\bar z=a-b\\text{i} \\bar z=a-b\\text{i} \u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e24\u4e2a\u590d\u6570\u4e92\u4e3a\u5171\u8f6d\u590d\u6570\uff0c\u90a3\u4e48\u5b83\u4eec \u5173\u4e8e\u5b9e\u8f74\u5bf9\u79f0 \u3002 \u7531\u4e8e\u5411\u91cf\u6ca1\u6709\u9664\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u8ba8\u8bba\u4e0e\u5411\u91cf\u7684\u5173\u7cfb\u3002","title":"\u590d\u6570\u7684\u4e58\u6cd5\u4e0e\u9664\u6cd5"},{"location":"math/crt/","text":"\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898 \u00b6 \u6709\u7269\u4e0d\u77e5\u5176\u6570\uff0c\u4e09\u4e09\u6570\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6570\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6570\u4e4b\u5269\u4e8c\u3002\u95ee\u7269\u51e0\u4f55\uff1f \u5373\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6574\u6570\uff1a\u9664\u4ee5 3 3 \u4f59 2 2 \uff0c\u9664\u4ee5 5 5 \u4f59 3 3 \uff0c\u9664\u4ee5 7 7 \u4f59 2 2 \u3002 \u8be5\u95ee\u9898\u6700\u65e9\u89c1\u4e8e\u300a\u5b59\u5b50\u7b97\u7ecf\u300b\u4e2d\uff0c\u5e76\u6709\u8be5\u95ee\u9898\u7684\u5177\u4f53\u89e3\u6cd5\u3002\u5b8b\u671d\u6570\u5b66\u5bb6\u79e6\u4e5d\u97f6\u4e8e 1247 \u5e74\u300a\u6570\u4e66\u4e5d\u7ae0\u300b\u5377\u4e00\u3001\u4e8c\u300a\u5927\u884d\u7c7b\u300b\u5bf9\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898\u505a\u51fa\u4e86\u5b8c\u6574\u7cfb\u7edf\u7684\u89e3\u7b54\u3002\u4e0a\u9762\u5177\u4f53\u95ee\u9898\u7684\u89e3\u7b54\u53e3\u8bc0\u7531\u660e\u671d\u6570\u5b66\u5bb6\u7a0b\u5927\u4f4d\u5728\u300a\u7b97\u6cd5\u7edf\u5b97\u300b\u4e2d\u7ed9\u51fa\uff1a \u4e09\u4eba\u540c\u884c\u4e03\u5341\u5e0c\uff0c\u4e94\u6811\u6885\u82b1\u5eff\u4e00\u652f\uff0c\u4e03\u5b50\u56e2\u5706\u6b63\u534a\u6708\uff0c\u9664\u767e\u96f6\u4e94\u4fbf\u5f97\u77e5\u3002 2\\times 70+3\\times 21+2\\times 15=233=2\\times 105+23 2\\times 70+3\\times 21+2\\times 15=233=2\\times 105+23 \uff0c\u6545\u7b54\u6848\u4e3a 23 23 \u3002 \u7b97\u6cd5\u7b80\u4ecb\u53ca\u8fc7\u7a0b \u00b6 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 (Chinese Remainder Theorem, CRT) \u53ef\u6c42\u89e3\u5982\u4e0b\u5f62\u5f0f\u7684\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\uff08\u5176\u4e2d n_1, n_2, \\cdots, n_k n_1, n_2, \\cdots, n_k \u4e24\u4e24\u4e92\u8d28\uff09\uff1a \\left \\{ \\begin{array}{ccc} x &\\equiv& a_1 \\pmod {n_1} \\\\ x &\\equiv& a_2 \\pmod {n_2} \\\\ &\\vdots& \\\\ x &\\equiv& a_n \\pmod {n_k} \\\\ \\end{array} \\right. \\left \\{ \\begin{array}{ccc} x &\\equiv& a_1 \\pmod {n_1} \\\\ x &\\equiv& a_2 \\pmod {n_2} \\\\ &\\vdots& \\\\ x &\\equiv& a_n \\pmod {n_k} \\\\ \\end{array} \\right. \u4e0a\u9762\u7684\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898\u5c31\u662f\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u7b97\u6cd5\u6d41\u7a0b \u00b6 \u8ba1\u7b97\u6240\u6709\u6a21\u6570\u7684\u79ef n n \uff1b \u5bf9\u4e8e\u7b2c i i \u4e2a\u65b9\u7a0b\uff1a \u8ba1\u7b97 m_i=\\frac{n}{n_i} m_i=\\frac{n}{n_i} \uff1b \u8ba1\u7b97 m_i m_i \u5728\u6a21 n_i n_i \u610f\u4e49\u4e0b\u7684 \u9006\u5143 m_i^{-1} m_i^{-1} \uff1b \u8ba1\u7b97 c_i=m_im_i^{-1} c_i=m_im_i^{-1} \uff08 \u4e0d\u8981\u5bf9 n_i n_i \u53d6\u6a21 \uff09\u3002 \u65b9\u7a0b\u7ec4\u7684\u552f\u4e00\u89e3\u4e3a\uff1a a=\\sum_{i=1}^k a_ic_i \\pmod n a=\\sum_{i=1}^k a_ic_i \\pmod n \u3002 \u4f2a\u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 1 \u2192 n 0 \u2192 ans for i = 1 to k n * n[i] \u2192 n for i = 1 to k n / n[i] \u2192 m inv(m, n[i]) \u2192 b // b * m mod n[i] = 1 (ans + m * b) mod n \u2192 ans return ans \u7b97\u6cd5\u7684\u8bc1\u660e \u00b6 \u6211\u4eec\u9700\u8981\u8bc1\u660e\u4e0a\u9762\u7b97\u6cd5\u8ba1\u7b97\u6240\u5f97\u7684 a a \u5bf9\u4e8e\u4efb\u610f i=1,2,\\cdots,k i=1,2,\\cdots,k \u6ee1\u8db3 a\\equiv a_i \\pmod {n_i} a\\equiv a_i \\pmod {n_i} \u3002 \u5f53 i\\neq j i\\neq j \u65f6\uff0c\u6709 m_j\\equiv 0 \\pmod {n_i} m_j\\equiv 0 \\pmod {n_i} \uff0c\u6545 c_j\\equiv m_j\\equiv 0 \\pmod {n_i} c_j\\equiv m_j\\equiv 0 \\pmod {n_i} \u3002\u53c8\u6709 c_i\\equiv m_i(m_i^{-1}\\bmod {n_i})\\equiv 1 \\pmod {n_i} c_i\\equiv m_i(m_i^{-1}\\bmod {n_i})\\equiv 1 \\pmod {n_i} \uff0c\u6240\u4ee5\u6211\u4eec\u6709\uff1a \\begin{aligned} a&\\equiv \\sum_{j=1}^k a_jc_j &\\pmod {n_i} \\\\ &\\equiv a_ic_i &\\pmod {n_i} \\\\ &\\equiv a_im_i(m^{-1}_i \\bmod n_i) &\\pmod {n_i} \\\\ &\\equiv a_i &\\pmod {n_i} \\end{aligned} \\begin{aligned} a&\\equiv \\sum_{j=1}^k a_jc_j &\\pmod {n_i} \\\\ &\\equiv a_ic_i &\\pmod {n_i} \\\\ &\\equiv a_im_i(m^{-1}_i \\bmod n_i) &\\pmod {n_i} \\\\ &\\equiv a_i &\\pmod {n_i} \\end{aligned} \u5373\u5bf9\u4e8e\u4efb\u610f i=1,2,\\cdots,k i=1,2,\\cdots,k \uff0c\u4e0a\u9762\u7b97\u6cd5\u5f97\u5230\u7684 a a \u603b\u662f\u6ee1\u8db3 a\\equiv a_i \\pmod{n_i} a\\equiv a_i \\pmod{n_i} \uff0c\u5373\u8bc1\u660e\u4e86\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002 \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u5bf9\u8f93\u5165\u7684 a_i a_i \u4f5c\u7279\u6b8a\u9650\u5236\uff0c\u6240\u4ee5\u4efb\u4f55\u4e00\u7ec4\u8f93\u5165 \\{a_i\\} \\{a_i\\} \u90fd\u5bf9\u5e94\u4e00\u4e2a\u89e3 a a \u3002 \u53e6\u5916\uff0c\u82e5 x\\neq y x\\neq y \uff0c\u5219\u603b\u5b58\u5728 i i \u4f7f\u5f97 x x \u548c y y \u5728\u6a21 n_i n_i \u4e0b\u4e0d\u540c\u4f59\u3002 \u6545\u7cfb\u6570\u5217\u8868 \\{a_i\\} \\{a_i\\} \u4e0e\u89e3 a a \u4e4b\u95f4\u662f\u4e00\u4e00\u6620\u5c04\u5173\u7cfb\uff0c\u65b9\u7a0b\u7ec4\u603b\u662f\u6709\u552f\u4e00\u89e3\u3002 \u4f8b \u00b6 \u4e0b\u9762\u6f14\u793a CRT \u5982\u4f55\u89e3\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898\u3002 n=3\\times 5\\times 7=105 n=3\\times 5\\times 7=105 \uff1b \u4e09\u4eba\u540c\u884c \u4e03\u5341 \u5e0c\uff1a n_1=3, m_1=n/n_1=35, m_1^{-1}\\equiv 2\\pmod 3 n_1=3, m_1=n/n_1=35, m_1^{-1}\\equiv 2\\pmod 3 \uff0c\u6545 c_1=35\\times 2=70 c_1=35\\times 2=70 \uff1b \u4e94\u6811\u6885\u82b1 \u5eff\u4e00 \u652f\uff1a n_2=5, m_2=n/n_2=21, m_2^{-1}\\equiv 1\\pmod 5 n_2=5, m_2=n/n_2=21, m_2^{-1}\\equiv 1\\pmod 5 \uff0c\u6545 c_2=21\\times 1=21 c_2=21\\times 1=21 \uff1b \u4e03\u5b50\u56e2\u5706\u6b63 \u534a\u6708 \uff1a n_3=7, m_3=n/n_3=15, m_3^{-1}\\equiv 1\\pmod 7 n_3=7, m_3=n/n_3=15, m_3^{-1}\\equiv 1\\pmod 7 \uff0c\u6545 c_3=15\\times 1=15 c_3=15\\times 1=15 \uff1b \u6240\u4ee5\u65b9\u7a0b\u7ec4\u7684\u552f\u4e00\u89e3\u4e3a a\\equiv 2\\times 70+3\\times 21+2\\times 15\\equiv 233\\equiv 23 \\pmod {105} a\\equiv 2\\times 70+3\\times 21+2\\times 15\\equiv 233\\equiv 23 \\pmod {105} \u3002\uff08\u9664 \u767e\u96f6\u4e94 \u4fbf\u5f97\u77e5\uff09 \u5e94\u7528 \u00b6 \u67d0\u4e9b\u8ba1\u6570\u95ee\u9898\u6216\u6570\u8bba\u95ee\u9898\u51fa\u4e8e\u52a0\u957f\u4ee3\u7801\u3001\u589e\u52a0\u96be\u5ea6\u3001\u6216\u8005\u662f\u4e00\u4e9b\u5176\u4ed6\u4e0d\u53ef\u544a\u4eba\u7684\u539f\u56e0\uff0c\u7ed9\u51fa\u7684\u6a21\u6570\uff1a \u4e0d\u662f\u8d28\u6570 \uff01 \u4f46\u662f\u5bf9\u5176\u8d28\u56e0\u6570\u5206\u89e3\u4f1a\u53d1\u73b0\u5b83\u6ca1\u6709\u5e73\u65b9\u56e0\u5b50\uff0c\u4e5f\u5c31\u662f\u8be5\u6a21\u6570\u662f\u7531\u4e00\u4e9b\u4e0d\u91cd\u590d\u7684\u8d28\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5bf9\u8fd9\u4e9b\u6a21\u6570\u8fdb\u884c\u8ba1\u7b97\uff0c\u6700\u540e\u7528 CRT \u5408\u5e76\u7b54\u6848\u3002 \u63a8\u8350\u7ec3\u4e60\uff1aBZOJ 1951 \u6bd4\u8f83\u4e24 CRT \u4e0b\u6574\u6570 \u00b6 \u8003\u8651 CRT, \u4e0d\u59a8\u5047\u8bbe n_1\\leq n_2 \\leq ... \\leq n_k n_1\\leq n_2 \\leq ... \\leq n_k \\left\\{ \\begin{array} { r l } { x } & { \\equiv a _ { 1 } \\left( \\bmod n _ { 1 } \\right) } \\\\ { x } & { \\equiv a _ { 2 } \\left( \\bmod n _ { 2 } \\right) } \\\\ { } & { \\vdots } \\\\ { x } & { \\equiv a _ { n } \\left( \\bmod n _ { k } \\right) } \\end{array} \\right. \\left\\{ \\begin{array} { r l } { x } & { \\equiv a _ { 1 } \\left( \\bmod n _ { 1 } \\right) } \\\\ { x } & { \\equiv a _ { 2 } \\left( \\bmod n _ { 2 } \\right) } \\\\ { } & { \\vdots } \\\\ { x } & { \\equiv a _ { n } \\left( \\bmod n _ { k } \\right) } \\end{array} \\right. \u4e0e PMR(Primorial Mixed Radix) \u8868\u793a x=b_1+b_2n_1+b_3n_1n_2...+b_kn_1n_2...n_{k-1} ,b_i\\in [0,n_i) x=b_1+b_2n_1+b_3n_1n_2...+b_kn_1n_2...n_{k-1} ,b_i\\in [0,n_i) \u5c06\u6570\u5b57\u8f6c\u5316\u5230 PMR \u4e0b, \u9010\u4f4d\u6bd4\u8f83\u5373\u53ef \u8f6c\u5316\u65b9\u6cd5\u8003\u8651\u4f9d\u6b21\u5bf9 PMR \u53d6\u6a21 \\begin{aligned} b_1&=a_1 \\mod n_1\\\\ b_2&=(a_2-b_1)c_{1,2} \\mod n_2\\\\ b_3&=((a_3-b_1')c_{1,3}-x_2')c_{2,3} \\mod n_3\\\\ &...\\\\ b_k&=(...((a_k-b_1)c_{1,k}-b_2)c_{2,k})-...)c_{k-1,k} \\mod n_k \\end{aligned} \\begin{aligned} b_1&=a_1 \\mod n_1\\\\ b_2&=(a_2-b_1)c_{1,2} \\mod n_2\\\\ b_3&=((a_3-b_1')c_{1,3}-x_2')c_{2,3} \\mod n_3\\\\ &...\\\\ b_k&=(...((a_k-b_1)c_{1,k}-b_2)c_{2,k})-...)c_{k-1,k} \\mod n_k \\end{aligned} \u5176\u4e2d c_{i,j} c_{i,j} \u8868\u793a n_i n_i \u5bf9 n_j n_j \u7684\u9006\u5143, c_{i,j}n_i=1 \\mod n_j c_{i,j}n_i=1 \\mod n_j \u6269\u5c55\uff1a\u6a21\u6570\u4e0d\u4e92\u8d28\u7684\u60c5\u51b5 \u00b6 \u4e24\u4e2a\u65b9\u7a0b \u00b6 \u8bbe\u4e24\u4e2a\u65b9\u7a0b\u5206\u522b\u662f x\\equiv a_1 \\pmod {m_1} x\\equiv a_1 \\pmod {m_1} \u3001 x\\equiv a_2 \\pmod {m_2} x\\equiv a_2 \\pmod {m_2} \uff1b \u5c06\u5b83\u4eec\u8f6c\u5316\u4e3a\u4e0d\u5b9a\u65b9\u7a0b\uff1a x=m_1p+a_1=m_2q+a_2 x=m_1p+a_1=m_2q+a_2 \uff0c\u5176\u4e2d p, q p, q \u662f\u6574\u6570\uff0c\u5219\u6709 m_1p-m_2q=a_2-a_1 m_1p-m_2q=a_2-a_1 \u3002 \u7531\u88f4\u8700\u5b9a\u7406\uff0c\u5f53 a_2-a_1 a_2-a_1 \u4e0d\u80fd\u88ab \\gcd(m_1,m_2) \\gcd(m_1,m_2) \u6574\u9664\u65f6\uff0c\u65e0\u89e3\uff1b \u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u89e3\u51fa\u6765\u4e00\u7ec4\u53ef\u884c\u89e3 (p, q) (p, q) \uff1b \u5219\u539f\u6765\u7684\u4e24\u65b9\u7a0b\u7ec4\u6210\u7684\u6a21\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e3a x\\equiv b\\pmod M x\\equiv b\\pmod M \uff0c\u5176\u4e2d b=m_1p+a_1 b=m_1p+a_1 \uff0c M=\\text{lcm}(m_1, m_2) M=\\text{lcm}(m_1, m_2) \u3002 \u591a\u4e2a\u65b9\u7a0b \u00b6 \u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u4e24\u4e24\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u2026\u2026 \u63a8\u8350\u7ec3\u4e60\uff1aPOJ 2891 \u3010\u6a21\u677f\u3011\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 [NOI2018] \u5c60\u9f99\u52c7\u58eb [TJOI2009] \u731c\u6570\u5b57 [SDOI2010] \u53e4\u4ee3\u732a\u6587","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"math/crt/#_1","text":"\u6709\u7269\u4e0d\u77e5\u5176\u6570\uff0c\u4e09\u4e09\u6570\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6570\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6570\u4e4b\u5269\u4e8c\u3002\u95ee\u7269\u51e0\u4f55\uff1f \u5373\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6574\u6570\uff1a\u9664\u4ee5 3 3 \u4f59 2 2 \uff0c\u9664\u4ee5 5 5 \u4f59 3 3 \uff0c\u9664\u4ee5 7 7 \u4f59 2 2 \u3002 \u8be5\u95ee\u9898\u6700\u65e9\u89c1\u4e8e\u300a\u5b59\u5b50\u7b97\u7ecf\u300b\u4e2d\uff0c\u5e76\u6709\u8be5\u95ee\u9898\u7684\u5177\u4f53\u89e3\u6cd5\u3002\u5b8b\u671d\u6570\u5b66\u5bb6\u79e6\u4e5d\u97f6\u4e8e 1247 \u5e74\u300a\u6570\u4e66\u4e5d\u7ae0\u300b\u5377\u4e00\u3001\u4e8c\u300a\u5927\u884d\u7c7b\u300b\u5bf9\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898\u505a\u51fa\u4e86\u5b8c\u6574\u7cfb\u7edf\u7684\u89e3\u7b54\u3002\u4e0a\u9762\u5177\u4f53\u95ee\u9898\u7684\u89e3\u7b54\u53e3\u8bc0\u7531\u660e\u671d\u6570\u5b66\u5bb6\u7a0b\u5927\u4f4d\u5728\u300a\u7b97\u6cd5\u7edf\u5b97\u300b\u4e2d\u7ed9\u51fa\uff1a \u4e09\u4eba\u540c\u884c\u4e03\u5341\u5e0c\uff0c\u4e94\u6811\u6885\u82b1\u5eff\u4e00\u652f\uff0c\u4e03\u5b50\u56e2\u5706\u6b63\u534a\u6708\uff0c\u9664\u767e\u96f6\u4e94\u4fbf\u5f97\u77e5\u3002 2\\times 70+3\\times 21+2\\times 15=233=2\\times 105+23 2\\times 70+3\\times 21+2\\times 15=233=2\\times 105+23 \uff0c\u6545\u7b54\u6848\u4e3a 23 23 \u3002","title":"\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898"},{"location":"math/crt/#_2","text":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 (Chinese Remainder Theorem, CRT) \u53ef\u6c42\u89e3\u5982\u4e0b\u5f62\u5f0f\u7684\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\uff08\u5176\u4e2d n_1, n_2, \\cdots, n_k n_1, n_2, \\cdots, n_k \u4e24\u4e24\u4e92\u8d28\uff09\uff1a \\left \\{ \\begin{array}{ccc} x &\\equiv& a_1 \\pmod {n_1} \\\\ x &\\equiv& a_2 \\pmod {n_2} \\\\ &\\vdots& \\\\ x &\\equiv& a_n \\pmod {n_k} \\\\ \\end{array} \\right. \\left \\{ \\begin{array}{ccc} x &\\equiv& a_1 \\pmod {n_1} \\\\ x &\\equiv& a_2 \\pmod {n_2} \\\\ &\\vdots& \\\\ x &\\equiv& a_n \\pmod {n_k} \\\\ \\end{array} \\right. \u4e0a\u9762\u7684\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898\u5c31\u662f\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002","title":"\u7b97\u6cd5\u7b80\u4ecb\u53ca\u8fc7\u7a0b"},{"location":"math/crt/#_3","text":"\u8ba1\u7b97\u6240\u6709\u6a21\u6570\u7684\u79ef n n \uff1b \u5bf9\u4e8e\u7b2c i i \u4e2a\u65b9\u7a0b\uff1a \u8ba1\u7b97 m_i=\\frac{n}{n_i} m_i=\\frac{n}{n_i} \uff1b \u8ba1\u7b97 m_i m_i \u5728\u6a21 n_i n_i \u610f\u4e49\u4e0b\u7684 \u9006\u5143 m_i^{-1} m_i^{-1} \uff1b \u8ba1\u7b97 c_i=m_im_i^{-1} c_i=m_im_i^{-1} \uff08 \u4e0d\u8981\u5bf9 n_i n_i \u53d6\u6a21 \uff09\u3002 \u65b9\u7a0b\u7ec4\u7684\u552f\u4e00\u89e3\u4e3a\uff1a a=\\sum_{i=1}^k a_ic_i \\pmod n a=\\sum_{i=1}^k a_ic_i \\pmod n \u3002","title":"\u7b97\u6cd5\u6d41\u7a0b"},{"location":"math/crt/#_4","text":"1 2 3 4 5 6 7 8 9 1 \u2192 n 0 \u2192 ans for i = 1 to k n * n[i] \u2192 n for i = 1 to k n / n[i] \u2192 m inv(m, n[i]) \u2192 b // b * m mod n[i] = 1 (ans + m * b) mod n \u2192 ans return ans","title":"\u4f2a\u4ee3\u7801"},{"location":"math/crt/#_5","text":"\u6211\u4eec\u9700\u8981\u8bc1\u660e\u4e0a\u9762\u7b97\u6cd5\u8ba1\u7b97\u6240\u5f97\u7684 a a \u5bf9\u4e8e\u4efb\u610f i=1,2,\\cdots,k i=1,2,\\cdots,k \u6ee1\u8db3 a\\equiv a_i \\pmod {n_i} a\\equiv a_i \\pmod {n_i} \u3002 \u5f53 i\\neq j i\\neq j \u65f6\uff0c\u6709 m_j\\equiv 0 \\pmod {n_i} m_j\\equiv 0 \\pmod {n_i} \uff0c\u6545 c_j\\equiv m_j\\equiv 0 \\pmod {n_i} c_j\\equiv m_j\\equiv 0 \\pmod {n_i} \u3002\u53c8\u6709 c_i\\equiv m_i(m_i^{-1}\\bmod {n_i})\\equiv 1 \\pmod {n_i} c_i\\equiv m_i(m_i^{-1}\\bmod {n_i})\\equiv 1 \\pmod {n_i} \uff0c\u6240\u4ee5\u6211\u4eec\u6709\uff1a \\begin{aligned} a&\\equiv \\sum_{j=1}^k a_jc_j &\\pmod {n_i} \\\\ &\\equiv a_ic_i &\\pmod {n_i} \\\\ &\\equiv a_im_i(m^{-1}_i \\bmod n_i) &\\pmod {n_i} \\\\ &\\equiv a_i &\\pmod {n_i} \\end{aligned} \\begin{aligned} a&\\equiv \\sum_{j=1}^k a_jc_j &\\pmod {n_i} \\\\ &\\equiv a_ic_i &\\pmod {n_i} \\\\ &\\equiv a_im_i(m^{-1}_i \\bmod n_i) &\\pmod {n_i} \\\\ &\\equiv a_i &\\pmod {n_i} \\end{aligned} \u5373\u5bf9\u4e8e\u4efb\u610f i=1,2,\\cdots,k i=1,2,\\cdots,k \uff0c\u4e0a\u9762\u7b97\u6cd5\u5f97\u5230\u7684 a a \u603b\u662f\u6ee1\u8db3 a\\equiv a_i \\pmod{n_i} a\\equiv a_i \\pmod{n_i} \uff0c\u5373\u8bc1\u660e\u4e86\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002 \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u5bf9\u8f93\u5165\u7684 a_i a_i \u4f5c\u7279\u6b8a\u9650\u5236\uff0c\u6240\u4ee5\u4efb\u4f55\u4e00\u7ec4\u8f93\u5165 \\{a_i\\} \\{a_i\\} \u90fd\u5bf9\u5e94\u4e00\u4e2a\u89e3 a a \u3002 \u53e6\u5916\uff0c\u82e5 x\\neq y x\\neq y \uff0c\u5219\u603b\u5b58\u5728 i i \u4f7f\u5f97 x x \u548c y y \u5728\u6a21 n_i n_i \u4e0b\u4e0d\u540c\u4f59\u3002 \u6545\u7cfb\u6570\u5217\u8868 \\{a_i\\} \\{a_i\\} \u4e0e\u89e3 a a \u4e4b\u95f4\u662f\u4e00\u4e00\u6620\u5c04\u5173\u7cfb\uff0c\u65b9\u7a0b\u7ec4\u603b\u662f\u6709\u552f\u4e00\u89e3\u3002","title":"\u7b97\u6cd5\u7684\u8bc1\u660e"},{"location":"math/crt/#_6","text":"\u4e0b\u9762\u6f14\u793a CRT \u5982\u4f55\u89e3\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898\u3002 n=3\\times 5\\times 7=105 n=3\\times 5\\times 7=105 \uff1b \u4e09\u4eba\u540c\u884c \u4e03\u5341 \u5e0c\uff1a n_1=3, m_1=n/n_1=35, m_1^{-1}\\equiv 2\\pmod 3 n_1=3, m_1=n/n_1=35, m_1^{-1}\\equiv 2\\pmod 3 \uff0c\u6545 c_1=35\\times 2=70 c_1=35\\times 2=70 \uff1b \u4e94\u6811\u6885\u82b1 \u5eff\u4e00 \u652f\uff1a n_2=5, m_2=n/n_2=21, m_2^{-1}\\equiv 1\\pmod 5 n_2=5, m_2=n/n_2=21, m_2^{-1}\\equiv 1\\pmod 5 \uff0c\u6545 c_2=21\\times 1=21 c_2=21\\times 1=21 \uff1b \u4e03\u5b50\u56e2\u5706\u6b63 \u534a\u6708 \uff1a n_3=7, m_3=n/n_3=15, m_3^{-1}\\equiv 1\\pmod 7 n_3=7, m_3=n/n_3=15, m_3^{-1}\\equiv 1\\pmod 7 \uff0c\u6545 c_3=15\\times 1=15 c_3=15\\times 1=15 \uff1b \u6240\u4ee5\u65b9\u7a0b\u7ec4\u7684\u552f\u4e00\u89e3\u4e3a a\\equiv 2\\times 70+3\\times 21+2\\times 15\\equiv 233\\equiv 23 \\pmod {105} a\\equiv 2\\times 70+3\\times 21+2\\times 15\\equiv 233\\equiv 23 \\pmod {105} \u3002\uff08\u9664 \u767e\u96f6\u4e94 \u4fbf\u5f97\u77e5\uff09","title":"\u4f8b"},{"location":"math/crt/#_7","text":"\u67d0\u4e9b\u8ba1\u6570\u95ee\u9898\u6216\u6570\u8bba\u95ee\u9898\u51fa\u4e8e\u52a0\u957f\u4ee3\u7801\u3001\u589e\u52a0\u96be\u5ea6\u3001\u6216\u8005\u662f\u4e00\u4e9b\u5176\u4ed6\u4e0d\u53ef\u544a\u4eba\u7684\u539f\u56e0\uff0c\u7ed9\u51fa\u7684\u6a21\u6570\uff1a \u4e0d\u662f\u8d28\u6570 \uff01 \u4f46\u662f\u5bf9\u5176\u8d28\u56e0\u6570\u5206\u89e3\u4f1a\u53d1\u73b0\u5b83\u6ca1\u6709\u5e73\u65b9\u56e0\u5b50\uff0c\u4e5f\u5c31\u662f\u8be5\u6a21\u6570\u662f\u7531\u4e00\u4e9b\u4e0d\u91cd\u590d\u7684\u8d28\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5bf9\u8fd9\u4e9b\u6a21\u6570\u8fdb\u884c\u8ba1\u7b97\uff0c\u6700\u540e\u7528 CRT \u5408\u5e76\u7b54\u6848\u3002 \u63a8\u8350\u7ec3\u4e60\uff1aBZOJ 1951","title":"\u5e94\u7528"},{"location":"math/crt/#crt","text":"\u8003\u8651 CRT, \u4e0d\u59a8\u5047\u8bbe n_1\\leq n_2 \\leq ... \\leq n_k n_1\\leq n_2 \\leq ... \\leq n_k \\left\\{ \\begin{array} { r l } { x } & { \\equiv a _ { 1 } \\left( \\bmod n _ { 1 } \\right) } \\\\ { x } & { \\equiv a _ { 2 } \\left( \\bmod n _ { 2 } \\right) } \\\\ { } & { \\vdots } \\\\ { x } & { \\equiv a _ { n } \\left( \\bmod n _ { k } \\right) } \\end{array} \\right. \\left\\{ \\begin{array} { r l } { x } & { \\equiv a _ { 1 } \\left( \\bmod n _ { 1 } \\right) } \\\\ { x } & { \\equiv a _ { 2 } \\left( \\bmod n _ { 2 } \\right) } \\\\ { } & { \\vdots } \\\\ { x } & { \\equiv a _ { n } \\left( \\bmod n _ { k } \\right) } \\end{array} \\right. \u4e0e PMR(Primorial Mixed Radix) \u8868\u793a x=b_1+b_2n_1+b_3n_1n_2...+b_kn_1n_2...n_{k-1} ,b_i\\in [0,n_i) x=b_1+b_2n_1+b_3n_1n_2...+b_kn_1n_2...n_{k-1} ,b_i\\in [0,n_i) \u5c06\u6570\u5b57\u8f6c\u5316\u5230 PMR \u4e0b, \u9010\u4f4d\u6bd4\u8f83\u5373\u53ef \u8f6c\u5316\u65b9\u6cd5\u8003\u8651\u4f9d\u6b21\u5bf9 PMR \u53d6\u6a21 \\begin{aligned} b_1&=a_1 \\mod n_1\\\\ b_2&=(a_2-b_1)c_{1,2} \\mod n_2\\\\ b_3&=((a_3-b_1')c_{1,3}-x_2')c_{2,3} \\mod n_3\\\\ &...\\\\ b_k&=(...((a_k-b_1)c_{1,k}-b_2)c_{2,k})-...)c_{k-1,k} \\mod n_k \\end{aligned} \\begin{aligned} b_1&=a_1 \\mod n_1\\\\ b_2&=(a_2-b_1)c_{1,2} \\mod n_2\\\\ b_3&=((a_3-b_1')c_{1,3}-x_2')c_{2,3} \\mod n_3\\\\ &...\\\\ b_k&=(...((a_k-b_1)c_{1,k}-b_2)c_{2,k})-...)c_{k-1,k} \\mod n_k \\end{aligned} \u5176\u4e2d c_{i,j} c_{i,j} \u8868\u793a n_i n_i \u5bf9 n_j n_j \u7684\u9006\u5143, c_{i,j}n_i=1 \\mod n_j c_{i,j}n_i=1 \\mod n_j","title":"\u6bd4\u8f83\u4e24 CRT \u4e0b\u6574\u6570"},{"location":"math/crt/#_8","text":"","title":"\u6269\u5c55\uff1a\u6a21\u6570\u4e0d\u4e92\u8d28\u7684\u60c5\u51b5"},{"location":"math/crt/#_9","text":"\u8bbe\u4e24\u4e2a\u65b9\u7a0b\u5206\u522b\u662f x\\equiv a_1 \\pmod {m_1} x\\equiv a_1 \\pmod {m_1} \u3001 x\\equiv a_2 \\pmod {m_2} x\\equiv a_2 \\pmod {m_2} \uff1b \u5c06\u5b83\u4eec\u8f6c\u5316\u4e3a\u4e0d\u5b9a\u65b9\u7a0b\uff1a x=m_1p+a_1=m_2q+a_2 x=m_1p+a_1=m_2q+a_2 \uff0c\u5176\u4e2d p, q p, q \u662f\u6574\u6570\uff0c\u5219\u6709 m_1p-m_2q=a_2-a_1 m_1p-m_2q=a_2-a_1 \u3002 \u7531\u88f4\u8700\u5b9a\u7406\uff0c\u5f53 a_2-a_1 a_2-a_1 \u4e0d\u80fd\u88ab \\gcd(m_1,m_2) \\gcd(m_1,m_2) \u6574\u9664\u65f6\uff0c\u65e0\u89e3\uff1b \u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u89e3\u51fa\u6765\u4e00\u7ec4\u53ef\u884c\u89e3 (p, q) (p, q) \uff1b \u5219\u539f\u6765\u7684\u4e24\u65b9\u7a0b\u7ec4\u6210\u7684\u6a21\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e3a x\\equiv b\\pmod M x\\equiv b\\pmod M \uff0c\u5176\u4e2d b=m_1p+a_1 b=m_1p+a_1 \uff0c M=\\text{lcm}(m_1, m_2) M=\\text{lcm}(m_1, m_2) \u3002","title":"\u4e24\u4e2a\u65b9\u7a0b"},{"location":"math/crt/#_10","text":"\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u4e24\u4e24\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u2026\u2026 \u63a8\u8350\u7ec3\u4e60\uff1aPOJ 2891 \u3010\u6a21\u677f\u3011\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 [NOI2018] \u5c60\u9f99\u52c7\u58eb [TJOI2009] \u731c\u6570\u5b57 [SDOI2010] \u53e4\u4ee3\u732a\u6587","title":"\u591a\u4e2a\u65b9\u7a0b"},{"location":"math/dictionary/","text":"\u5728\u5b66\u4e60\u4e4b\u524d\u8bf7\u5148\u5b66\u4e60 \u5206\u5757 \u3002 \u6253\u8868\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u5c31\u662f\u5728\u6bd4\u8d5b\u65f6\u628a\u7b54\u6848\u90fd\u8f93\u51fa\u51fa\u6765\uff0c\u7136\u540e\u5f00\u4e2a\u6570\u7ec4\uff0c\u628a\u7b54\u6848\u76f4\u63a5\u5b58\u5165\u6570\u7ec4\u91cc\u3002\u4e8e\u662f\u4f60\u7684\u4ee3\u7801\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(1) O(1) \u7684\u4e86\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u8fd9\u4e2a\u6280\u5de7\u53ea\u9002\u7528\u4e8e\u7c7b\u4f3c\u8f93\u51fa\u67d0\u51fd\u6570\u503c\u7c7b\u7684\u95ee\u9898\u3002\u6bd4\u5982\u89c4\u5b9a f(x) f(x) \u4e3a\u6574\u6570 x x \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 1 \u7684\u4e2a\u6570\u3002\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 n n \uff0c\u8f93\u51fa \\sum_{i=1}^nf^2(i) \\sum_{i=1}^nf^2(i) \u3002\u8fd9\u6837\u7684\u8bdd n n \u4e0d\u5927\u65f6\uff0c\u91c7\u7528\u6253\u8868\u7684\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230 O(1) O(1) \u7684\u590d\u6742\u5ea6\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u5341\u5206\u7684\u7b80\u5355\uff0c\u91c7\u7528\u4e00\u822c\u505a\u6cd5\u4e5f\u53ef\u4ee5\u505a\u5230 O(n\\log n) O(n\\log n) \u7684\u590d\u6742\u5ea6\uff0c\u4f46\u662f n=10^9 n=10^9 \uff1f \u8fd8\u6709\u4e00\u4e9b\u65f6\u5019\uff0c\u6253\u51fa\u6765\u7684\u8868\u5341\u5206\u5927\uff0c\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a n n \uff0c\u90fd\u8f93\u51fa f(n) f(n) \u7684\u8bdd\uff0c\u90a3\u4e48 MLE \u4e4b\u5916\uff0c\u8fd8\u6709\u53ef\u80fd\u4ee3\u7801\u8d85\u8fc7\u6700\u5927\u4ee3\u7801\u957f\u5ea6\u9650\u5236\uff0c\u5bfc\u81f4\u7f16\u8bd1\u524d\u4e0d\u901a\u8fc7\uff08\u4ee3\u7801\u53ef\u80fd\u76f4\u63a5\u88ab pass\uff09\u3002 \u6211\u4eec\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u7b54\u6848\u8868\uff0c\u501f\u7528\u5206\u5757\u601d\u60f3\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u5408\u7406\u7684\u6b65\u957f m m \uff08\u8fd9\u4e2a\u6b65\u957f\u4e00\u822c\u89c6\u4ee3\u7801\u957f\u5ea6\u800c\u5b9a\uff09\uff0c\u5bf9\u4e8e\u7b2c i i \u5757\uff0c\u8f93\u51fa\uff1a \\Large \\sum_{k=\\frac{n}{m}(i-1)+1}^{\\frac{ni}{m}} f^2(k) \\Large \\sum_{k=\\frac{n}{m}(i-1)+1}^{\\frac{ni}{m}} f^2(k) \u7684\u503c\u3002 \u7136\u540e\u8f93\u51fa\u7b54\u6848\u65f6\u501f\u7528\u5206\u5757\u601d\u60f3\u5904\u7406\u5373\u53ef\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u95ee\u9898\u5bf9\u4e8e\u5904\u7406\u5355\u4e2a\u51fd\u6570\u503c f(x) f(x) \u5f88\u5feb\uff0c\u4f46\u662f\u9700\u8981\u5927\u91cf\u51fd\u6570\u503c\u6c42\u548c\uff08\u6c42\u79ef\u6216\u67d0\u4e9b\u53ef\u4ee5\u5feb\u901f\u5408\u5e76\u7684\u64cd\u4f5c\uff09\uff0c\u679a\u4e3e\u4f1a\u8d85\u51fa\u65f6\u95f4\u9650\u5236\uff0c\u5728\u627e\u4e0d\u5230\u6807\u51c6\u505a\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u5206\u6bb5\u6253\u8868\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u6ce8\u610f\u4e8b\u9879 \u00b6 \u5f53\u4e0a\u9898\u4e2d\u6307\u6570\u4e0d\u662f\u5b9a\u503c\uff0c\u4f46\u662f\u8303\u56f4\u8f83\u5c0f\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u6253\u8868\uff1b \u4e0a\u9898\u662f\u672c\u4eba\u4e3a\u4e86\u4ecb\u7ecd\u5206\u6bb5\u6253\u8868\u53e3\u80e1\u51fa\u6765\u7684\uff0c\u5982\u5df2\u6709\u6b64\u9898\u7eaf\u5c5e\u5de7\u5408\u3002 \u4f8b\u9898 \u00b6 \u300cBZOJ 3798\u300d\u7279\u6b8a\u7684\u8d28\u6570 \uff1a\u6743\u9650\u9898\u2026\u2026 \u4e0d\u8fc7\u53ef\u4ee5\u5728\u5404\u5927 BZ \u79bb\u7ebf\u9898\u5e93\u4e2d\u770b\u5230\u3002 \u9898\u610f\u7b80\u8ff0 \uff1a\u6c42 [l,r] [l,r] \u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u8d28\u6570\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u5e73\u65b9\u548c\u3002\u2014\u2014 via PoPoQQQ \u300cLuogu P1822\u300d\u9b54\u6cd5\u6307\u7eb9 \uff1a\u5176\u5b9e\u662f\u4e00\u9053\u66b4\u641c\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u7ec3\u7ec3\u5206\u6bb5\u6253\u8868\u3002 \u660e\u660e\u662f\u6211\u5148\u5199\u7684\u5206\u6bb5\u6253\u8868\u4e3a\u4ec0\u4e48\u4f60\u4eec\u8fd9\u4e48\u719f\u7ec3 QAQ\uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0b \u6211\u7684\u9898\u89e3 \u7684\u53d1\u5e03\u65f6\u95f4\u548c Luogu \u4e2d\u7684\u3002","title":"\u5206\u6bb5\u6253\u8868"},{"location":"math/dictionary/#_1","text":"\u5f53\u4e0a\u9898\u4e2d\u6307\u6570\u4e0d\u662f\u5b9a\u503c\uff0c\u4f46\u662f\u8303\u56f4\u8f83\u5c0f\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u6253\u8868\uff1b \u4e0a\u9898\u662f\u672c\u4eba\u4e3a\u4e86\u4ecb\u7ecd\u5206\u6bb5\u6253\u8868\u53e3\u80e1\u51fa\u6765\u7684\uff0c\u5982\u5df2\u6709\u6b64\u9898\u7eaf\u5c5e\u5de7\u5408\u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"math/dictionary/#_2","text":"\u300cBZOJ 3798\u300d\u7279\u6b8a\u7684\u8d28\u6570 \uff1a\u6743\u9650\u9898\u2026\u2026 \u4e0d\u8fc7\u53ef\u4ee5\u5728\u5404\u5927 BZ \u79bb\u7ebf\u9898\u5e93\u4e2d\u770b\u5230\u3002 \u9898\u610f\u7b80\u8ff0 \uff1a\u6c42 [l,r] [l,r] \u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u8d28\u6570\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u5e73\u65b9\u548c\u3002\u2014\u2014 via PoPoQQQ \u300cLuogu P1822\u300d\u9b54\u6cd5\u6307\u7eb9 \uff1a\u5176\u5b9e\u662f\u4e00\u9053\u66b4\u641c\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u7ec3\u7ec3\u5206\u6bb5\u6253\u8868\u3002 \u660e\u660e\u662f\u6211\u5148\u5199\u7684\u5206\u6bb5\u6253\u8868\u4e3a\u4ec0\u4e48\u4f60\u4eec\u8fd9\u4e48\u719f\u7ec3 QAQ\uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0b \u6211\u7684\u9898\u89e3 \u7684\u53d1\u5e03\u65f6\u95f4\u548c Luogu \u4e2d\u7684\u3002","title":"\u4f8b\u9898"},{"location":"math/drawer-principle/","text":"\u5c31\u6bd4\u5982\u8bf4\uff0c\u4f60\u6709 n+1 n+1 \u4e2a\u82f9\u679c\uff0c\u60f3\u8981\u653e\u5230 n n \u4e2a\u62bd\u5c49\u91cc\uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u6709\u81f3\u5c11\u4e00\u4e2a\u62bd\u5c49\u91cc\u6709\u4e24\u4e2a\uff08\u6216\u4ee5\u4e0a\uff09\u7684\u82f9\u679c\u3002 \u8fd9\u4e2a\u5b9a\u7406\u770b\u8d77\u6765\u6bd4\u8f83\u663e\u7136\uff0c\u8bc1\u660e\u65b9\u6cd5\u8003\u8651\u53cd\u8bc1\u6cd5\uff1a\u5047\u5982\u6240\u6709\u62bd\u5c49\u90fd\u81f3\u591a\u653e\u4e86\u4e00\u4e2a\u82f9\u679c\uff0c\u90a3\u4e48 n n \u4e2a\u62bd\u5c49\u81f3\u591a\u53ea\u80fd\u653e n n \u4e2a\u82f9\u679c\uff0c\u77db\u76fe\u3002","title":"\u62bd\u5c49\u539f\u7406"},{"location":"math/du-sieves/","text":"\u5728\u6570\u8bba\u9898\u76ee\u4e2d\uff0c\u5e38\u5e38\u9700\u8981\u6839\u636e\u4e00\u4e9b \u79ef\u6027\u51fd\u6570 \u7684\u6027\u8d28\uff0c\u6c42\u51fa\u4e00\u4e9b\u5f0f\u5b50\u7684\u503c\u3002 \u79ef\u6027\u51fd\u6570 \uff1a \u5bf9\u4e8e\u6240\u6709\u4e92\u8d28\u7684 a a \u548c b b \uff0c\u603b\u6709 f(ab)=f(a)f(b) f(ab)=f(a)f(b) \uff0c\u5219\u79f0 f(x) f(x) \u4e3a\u79ef\u6027\u51fd\u6570\u3002 \u5e38\u89c1\u7684\u79ef\u6027\u51fd\u6570\u6709\uff1a d(x)=\\sum_{i|n} 1 d(x)=\\sum_{i|n} 1 \\sigma(x)=\\sum_{i|n} i \\sigma(x)=\\sum_{i|n} i \\varphi(x)=\\sum_{i=1}^x 1[gcd(x,i)=1] \\varphi(x)=\\sum_{i=1}^x 1[gcd(x,i)=1] \\mu(x)=\\begin{cases}1&\\text{n=1}\\\\(-1)^k& \\ \\prod_{i=1}^k q_i=1\\\\0 &\\ \\max\\{q_i\\}>1\\end{cases} \\mu(x)=\\begin{cases}1&\\text{n=1}\\\\(-1)^k& \\ \\prod_{i=1}^k q_i=1\\\\0 &\\ \\max\\{q_i\\}>1\\end{cases} \u79ef\u6027\u51fd\u6570\u6709\u5982\u4e0b\u6027\u8d28\uff1a \u82e5 f(x) f(x) \uff0c g(x) g(x) \u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u5219 h(x)=f(x^p) h(x)=f(x^p) h(x)=f^p(x) h(x)=f^p(x) h(x)=f(x)g(x) h(x)=f(x)g(x) h(x)=\\sum_{d|x} f(d)g(\\frac x d) h(x)=\\sum_{d|x} f(d)g(\\frac x d) \u4e2d\u7684 h(x) h(x) \u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\u3002 \u5728\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7684\u9898\u76ee\u4e2d\uff0c\u5f80\u5f80\u8981\u6c42\u51fa\u4e00\u4e9b\u6570\u8bba\u51fd\u6570\u7684\u524d\u7f00\u548c\uff0c\u5229\u7528 \u675c\u6559\u7b5b \u53ef\u4ee5\u5feb\u901f\u6c42\u51fa\u8fd9\u4e9b\u524d\u7f00\u548c\u3002 \u4f8b\u9898 P4213 \u3010\u6a21\u677f\u3011\u675c\u6559\u7b5b\uff08 Sum \uff09 \u9898\u76ee\u5927\u610f\uff1a \u6c42 S_1(n)= \\sum_{i=1}^n \\mu(i) S_1(n)= \\sum_{i=1}^n \\mu(i) \u548c S_2(n)= \\sum_{i=1}^n \\varphi(i) S_2(n)= \\sum_{i=1}^n \\varphi(i) \u7684\u503c\uff0c n\\le 2^{31} -1 n\\le 2^{31} -1 \u3002 \u7531 \u72c4\u5229\u514b\u96f7\u5377\u79ef \uff0c\u6211\u4eec\u77e5\u9053\uff1a \\because \\epsilon =\\mu * 1 \\because \\epsilon =\\mu * 1 \uff08 \\epsilon(n)=~[n=1] \\epsilon(n)=~[n=1] \uff09 \\therefore \\epsilon (n)=\\sum_{d|n} \\mu(d) \\therefore \\epsilon (n)=\\sum_{d|n} \\mu(d) S_1(n)=\\sum_{i=1}^n \\epsilon (i)-\\sum_{i=2}^n S_1(\\lfloor \\frac n i \\rfloor) S_1(n)=\\sum_{i=1}^n \\epsilon (i)-\\sum_{i=2}^n S_1(\\lfloor \\frac n i \\rfloor) = 1-\\sum_{i=2}^n S_1(\\lfloor \\frac n i \\rfloor) = 1-\\sum_{i=2}^n S_1(\\lfloor \\frac n i \\rfloor) \u89c2\u5bdf\u5230 \\lfloor \\frac n i \\rfloor \\lfloor \\frac n i \\rfloor \u6700\u591a\u53ea\u6709 O(\\sqrt n) O(\\sqrt n) \u79cd\u53d6\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5e94\u7528 \u6574\u9664\u5206\u5757 \uff08\u6216\u79f0\u6570\u8bba\u5206\u5757\uff09\u6765\u8ba1\u7b97\u6bcf\u4e00\u9879\u7684\u503c\u4e86\u3002 \u76f4\u63a5\u8ba1\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^{\\frac 3 4}) O(n^{\\frac 3 4}) \u3002\u8003\u8651\u5148\u7ebf\u6027\u7b5b\u9884\u5904\u7406\u51fa\u524d n^{\\frac 2 3} n^{\\frac 2 3} \u9879\uff0c\u5269\u4f59\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\int_{0}^{n^{\\frac 1 3}} \\sqrt{\\frac{n}{x}} ~ dx)=O(n^{\\frac 2 3}) O(\\int_{0}^{n^{\\frac 1 3}} \\sqrt{\\frac{n}{x}} ~ dx)=O(n^{\\frac 2 3}) \u5bf9\u4e8e\u8f83\u5927\u7684\u503c\uff0c\u9700\u8981\u7528 map \u5b58\u4e0b\u5176\u5bf9\u5e94\u7684\u503c\uff0c\u65b9\u4fbf\u4ee5\u540e\u4f7f\u7528\u65f6\u76f4\u63a5\u4f7f\u7528\u4e4b\u524d\u8ba1\u7b97\u7684\u7ed3\u679c\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u675c\u6559\u7b5b\u6c42\u51fa \\varphi (x) \\varphi (x) \u7684\u524d\u7f00\u548c\uff0c\u4f46\u662f\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5e94\u7528\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\uff1a \\sum_{i=1}^n \\sum_{j=1}^n 1[gcd(i,j)=1]=\\sum_{i=1}^n \\sum_{j=1}^n \\sum_{d|i,d|j} \\mu(d) \\sum_{i=1}^n \\sum_{j=1}^n 1[gcd(i,j)=1]=\\sum_{i=1}^n \\sum_{j=1}^n \\sum_{d|i,d|j} \\mu(d) =\\sum_{d=1}^n \\mu(d) {\\lfloor \\frac n d \\rfloor}^2 =\\sum_{d=1}^n \\mu(d) {\\lfloor \\frac n d \\rfloor}^2 \u7531\u4e8e\u9898\u76ee\u6240\u6c42\u7684\u662f \\sum_{i=1}^n \\sum_{j=1}^i 1[gcd(i,j)=1] \\sum_{i=1}^n \\sum_{j=1}^i 1[gcd(i,j)=1] \uff0c\u6240\u4ee5\u6211\u4eec\u6392\u9664\u6389 i=1,j=1 i=1,j=1 \u7684\u60c5\u51b5\uff0c\u5e76\u5c06\u7ed3\u679c\u9664\u4ee5 2 2 \u5373\u53ef\u3002 \u89c2\u5bdf\u5230\uff0c\u53ea\u9700\u6c42\u51fa\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u524d\u7f00\u548c\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u8ba1\u7b97\u51fa\u6b27\u62c9\u51fd\u6570\u7684\u524d\u7f00\u548c\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(n^{\\frac 2 3}) O(n^{\\frac 2 3}) \u3002 \u7ed9\u51fa\u4e00\u79cd\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <algorithm> #include <cstdio> #include <cstring> #include <map> using namespace std ; const int maxn = 2000010 ; typedef long long ll ; ll T , n , pri [ maxn ], cur , mu [ maxn ], sum_mu [ maxn ]; bool vis [ maxn ]; map < ll , ll > mp_mu ; ll S_mu ( ll x ) { if ( x < maxn ) return sum_mu [ x ]; if ( mp_mu [ x ]) return mp_mu [ x ]; ll ret = 1ll ; for ( ll i = 2 , j ; i <= x ; i = j + 1 ) { j = x / ( x / i ); ret -= S_mu ( x / i ) * ( j - i + 1 ); } return mp_mu [ x ] = ret ; } ll S_phi ( ll x ) { ll ret = 0ll ; for ( ll i = 1 , j ; i <= x ; i = j + 1 ) { j = x / ( x / i ); ret += ( S_mu ( j ) - S_mu ( i - 1 )) * ( x / i ) * ( x / i ); } return (( ret - 1 ) >> 1 ) + 1 ; } int main () { scanf ( \"%lld\" , & T ); mu [ 1 ] = 1 ; for ( int i = 2 ; i < maxn ; i ++ ) { if ( ! vis [ i ]) { pri [ ++ cur ] = i ; mu [ i ] = - 1 ; } for ( int j = 1 ; j <= cur && i * pri [ j ] < maxn ; j ++ ) { vis [ i * pri [ j ]] = true ; if ( i % pri [ j ]) mu [ i * pri [ j ]] = - mu [ i ]; else { mu [ i * pri [ j ]] = 0 ; break ; } } } for ( int i = 1 ; i < maxn ; i ++ ) sum_mu [ i ] = sum_mu [ i - 1 ] + mu [ i ]; while ( T -- ) { scanf ( \"%lld\" , & n ); printf ( \"%lld %lld \\n \" , S_phi ( n ), S_mu ( n )); } return 0 ; }","title":"\u675c\u6559\u7b5b"},{"location":"math/euler/","text":"\u6b27\u62c9\u51fd\u6570\u662f\u4ec0\u4e48\uff1f \\varphi(n) \\varphi(n) \u8868\u793a\u7684\u662f\u5c0f\u4e8e\u7b49\u4e8e n n \u548c n n \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002 \u6bd4\u5982\u8bf4 \\varphi(1) = 1 \\varphi(1) = 1 \u3002 \u5f53 n \u662f\u8d28\u6570\u7684\u65f6\u5019\uff0c\u663e\u7136\u6709 \\varphi(n) = n - 1 \\varphi(n) = n - 1 \u3002 \u5229\u7528\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u6574\u6570\u552f\u4e00\u5730\u5206\u89e3\u4e3a\u8d28\u6570\u5e42\u6b21\u7684\u4e58\u79ef\uff0c \u8bbe n = p_1^{k_1}p_2^{k_2} \\cdots p_s^{k_s} n = p_1^{k_1}p_2^{k_2} \\cdots p_s^{k_s} \uff0c\u5176\u4e2d p_i p_i \u662f\u8d28\u6570\uff0c\u90a3\u4e48\u5b9a\u4e49 \\varphi(n) = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\varphi(n) = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \u6b27\u62c9\u51fd\u6570\u7684\u4e00\u4e9b\u795e\u5947\u6027\u8d28 \u00b6 \u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\u3002 \u79ef\u6027\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5982\u679c\u6709 \\gcd(a, b) = 1 \\gcd(a, b) = 1 \uff0c\u90a3\u4e48 \\varphi(a \\times b) = \\varphi(a) \\times \\varphi(b) \\varphi(a \\times b) = \\varphi(a) \\times \\varphi(b) \u3002 \u7279\u522b\u5730\uff0c\u5f53 n n \u662f\u5947\u6570\u65f6 \\varphi(2n) = 2 \\times \\varphi(n) \\varphi(2n) = 2 \\times \\varphi(n) \u3002 n = \\sum_{d | n}{\\varphi(d)} n = \\sum_{d | n}{\\varphi(d)} \u5229\u7528 \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u76f8\u5173\u77e5\u8bc6\u53ef\u4ee5\u5f97\u51fa\u3002 \u4e5f\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\u5982\u679c \\gcd(k, n) = d \\gcd(k, n) = d \uff0c\u90a3\u4e48 \\gcd(\\frac{k}{d},\\frac{n}{d}) = 1 \\gcd(\\frac{k}{d},\\frac{n}{d}) = 1 \u3002\uff08 k < n k < n \uff09 \u5982\u679c\u6211\u4eec\u8bbe f(x) f(x) \u8868\u793a \\gcd(k, n) = x \\gcd(k, n) = x \u7684\u6570\u7684\u4e2a\u6570\uff0c\u90a3\u4e48 n = \\sum_{i = 1}^n{f(x)} n = \\sum_{i = 1}^n{f(x)} \u3002 \u6839\u636e\u4e0a\u9762\u7684\u8bc1\u660e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c f(x) = \\varphi(\\frac{n}{x}) f(x) = \\varphi(\\frac{n}{x}) \uff0c\u4ece\u800c n = \\sum_{d | n}\\varphi(\\frac{n}{d}) n = \\sum_{d | n}\\varphi(\\frac{n}{d}) \u3002\u6ce8\u610f\u5230\u7ea6\u6570 d d \u548c \\frac{n}{d} \\frac{n}{d} \u5177\u6709\u5bf9\u79f0\u6027\uff0c\u6240\u4ee5\u4e0a\u5f0f\u5316\u4e3a n = \\sum_{d | n}\\varphi(d) n = \\sum_{d | n}\\varphi(d) \u3002 \u82e5 n = p^k n = p^k \uff0c\u5176\u4e2d p p \u662f\u8d28\u6570\uff0c\u90a3\u4e48 \\varphi(n) = p^k - p^{k - 1} \\varphi(n) = p^k - p^{k - 1} \u3002 \uff08\u6839\u636e\u5b9a\u4e49\u53ef\u77e5\uff09 \u5982\u4f55\u6c42\u6b27\u62c9\u51fd\u6570\u503c \u00b6 \u5982\u679c\u53ea\u8981\u6c42\u4e00\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570\u503c\uff0c\u90a3\u4e48\u76f4\u63a5\u6839\u636e\u5b9a\u4e49\u8d28\u56e0\u6570\u5206\u89e3\u7684\u540c\u65f6\u6c42\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 int euler_phi ( int n ) { int m = int ( sqrt ( n + 0.5 )); int ans = n ; for ( int i = 2 ; i <= m ; i ++ ) if ( n % i == 0 ) { ans = ans / i * ( i - 1 ); while ( n % i == 0 ) n /= i ; } if ( n > 1 ) ans = ans / n * ( n - 1 ); return ans ; } \u5982\u679c\u662f\u591a\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570\u503c\uff0c\u53ef\u4ee5\u5229\u7528\u540e\u9762\u4f1a\u63d0\u5230\u7684\u7ebf\u6027\u7b5b\u6cd5\u6765\u6c42\u5f97\u3002 \u8be6\u89c1\uff1a \u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"math/euler/#_1","text":"\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\u3002 \u79ef\u6027\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5982\u679c\u6709 \\gcd(a, b) = 1 \\gcd(a, b) = 1 \uff0c\u90a3\u4e48 \\varphi(a \\times b) = \\varphi(a) \\times \\varphi(b) \\varphi(a \\times b) = \\varphi(a) \\times \\varphi(b) \u3002 \u7279\u522b\u5730\uff0c\u5f53 n n \u662f\u5947\u6570\u65f6 \\varphi(2n) = 2 \\times \\varphi(n) \\varphi(2n) = 2 \\times \\varphi(n) \u3002 n = \\sum_{d | n}{\\varphi(d)} n = \\sum_{d | n}{\\varphi(d)} \u5229\u7528 \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u76f8\u5173\u77e5\u8bc6\u53ef\u4ee5\u5f97\u51fa\u3002 \u4e5f\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\u5982\u679c \\gcd(k, n) = d \\gcd(k, n) = d \uff0c\u90a3\u4e48 \\gcd(\\frac{k}{d},\\frac{n}{d}) = 1 \\gcd(\\frac{k}{d},\\frac{n}{d}) = 1 \u3002\uff08 k < n k < n \uff09 \u5982\u679c\u6211\u4eec\u8bbe f(x) f(x) \u8868\u793a \\gcd(k, n) = x \\gcd(k, n) = x \u7684\u6570\u7684\u4e2a\u6570\uff0c\u90a3\u4e48 n = \\sum_{i = 1}^n{f(x)} n = \\sum_{i = 1}^n{f(x)} \u3002 \u6839\u636e\u4e0a\u9762\u7684\u8bc1\u660e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c f(x) = \\varphi(\\frac{n}{x}) f(x) = \\varphi(\\frac{n}{x}) \uff0c\u4ece\u800c n = \\sum_{d | n}\\varphi(\\frac{n}{d}) n = \\sum_{d | n}\\varphi(\\frac{n}{d}) \u3002\u6ce8\u610f\u5230\u7ea6\u6570 d d \u548c \\frac{n}{d} \\frac{n}{d} \u5177\u6709\u5bf9\u79f0\u6027\uff0c\u6240\u4ee5\u4e0a\u5f0f\u5316\u4e3a n = \\sum_{d | n}\\varphi(d) n = \\sum_{d | n}\\varphi(d) \u3002 \u82e5 n = p^k n = p^k \uff0c\u5176\u4e2d p p \u662f\u8d28\u6570\uff0c\u90a3\u4e48 \\varphi(n) = p^k - p^{k - 1} \\varphi(n) = p^k - p^{k - 1} \u3002 \uff08\u6839\u636e\u5b9a\u4e49\u53ef\u77e5\uff09","title":"\u6b27\u62c9\u51fd\u6570\u7684\u4e00\u4e9b\u795e\u5947\u6027\u8d28"},{"location":"math/euler/#_2","text":"\u5982\u679c\u53ea\u8981\u6c42\u4e00\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570\u503c\uff0c\u90a3\u4e48\u76f4\u63a5\u6839\u636e\u5b9a\u4e49\u8d28\u56e0\u6570\u5206\u89e3\u7684\u540c\u65f6\u6c42\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 int euler_phi ( int n ) { int m = int ( sqrt ( n + 0.5 )); int ans = n ; for ( int i = 2 ; i <= m ; i ++ ) if ( n % i == 0 ) { ans = ans / i * ( i - 1 ); while ( n % i == 0 ) n /= i ; } if ( n > 1 ) ans = ans / n * ( n - 1 ); return ans ; } \u5982\u679c\u662f\u591a\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570\u503c\uff0c\u53ef\u4ee5\u5229\u7528\u540e\u9762\u4f1a\u63d0\u5230\u7684\u7ebf\u6027\u7b5b\u6cd5\u6765\u6c42\u5f97\u3002 \u8be6\u89c1\uff1a \u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570","title":"\u5982\u4f55\u6c42\u6b27\u62c9\u51fd\u6570\u503c"},{"location":"math/expectation/","text":"\u4e8b\u4ef6 \u00b6 \u5355\u4f4d\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u7a7a\u95f4\u3001\u968f\u673a\u4e8b\u4ef6 \u00b6 \u5728\u4e00\u6b21\u968f\u673a\u8bd5\u9a8c\u4e2d\u53ef\u80fd\u53d1\u751f\u7684\u4e0d\u80fd\u518d\u7ec6\u5206\u7684\u7ed3\u679c\u88ab\u79f0\u4e3a\u5355\u4f4d\u4e8b\u4ef6\uff0c\u7528 E E \u8868\u793a\u3002\u5728\u968f\u673a\u8bd5\u9a8c\u4e2d\u53ef\u80fd\u53d1\u751f\u7684\u6240\u6709\u5355\u4f4d\u4e8b\u4ef6\u7684\u96c6\u5408\u79f0\u4e3a\u4e8b\u4ef6\u7a7a\u95f4\uff0c\u7528 S S \u6765\u8868\u793a\u3002\u4f8b\u5982\u5728\u4e00\u6b21\u63b7\u9ab0\u5b50\u7684\u968f\u673a\u8bd5\u9a8c\u4e2d\uff0c\u5982\u679c\u7528\u83b7\u5f97\u7684\u70b9\u6570\u6765\u8868\u793a\u5355\u4f4d\u4e8b\u4ef6\uff0c\u90a3\u4e48\u4e00\u5171\u53ef\u80fd\u51fa\u73b0 6 6 \u4e2a\u5355\u4f4d\u4e8b\u4ef6\uff0c\u5219\u4e8b\u4ef6\u7a7a\u95f4\u53ef\u4ee5\u8868\u793a\u4e3a S=\\{1,2,3,4,5,6\\} S=\\{1,2,3,4,5,6\\} \u3002 \u968f\u673a\u4e8b\u4ef6\u662f\u4e8b\u4ef6\u7a7a\u95f4 S S \u7684\u5b50\u96c6\uff0c\u5b83\u7531\u4e8b\u4ef6\u7a7a\u95f4 S S \u4e2d\u7684\u5355\u4f4d\u5143\u7d20\u6784\u6210\uff0c\u7528\u5927\u5199\u5b57\u6bcd A, B, C,\\ldots A, B, C,\\ldots \u8868\u793a\u3002\u4f8b\u5982\u5728\u63b7\u4e24\u4e2a\u9ab0\u5b50\u7684\u968f\u673a\u8bd5\u9a8c\u4e2d\uff0c\u8bbe\u968f\u673a\u4e8b\u4ef6 A A \u4e3a \u201c\u83b7\u5f97\u7684\u70b9\u6570\u548c\u5927\u4e8e 10 10 \u201d \uff0c\u5219 A A \u53ef\u4ee5\u7531\u4e0b\u9762 3 3 \u4e2a\u5355\u4f4d\u4e8b\u4ef6\u7ec4\u6210\uff1a A = \\{ (5,6),(6,5),(6,6)\\} A = \\{ (5,6),(6,5),(6,6)\\} \u3002 \u4e8b\u4ef6\u7684\u8ba1\u7b97 \u00b6 \u56e0\u4e3a\u4e8b\u4ef6\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4ee5\u96c6\u5408\u7684\u542b\u4e49\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u96c6\u5408\u8ba1\u7b97\u65b9\u6cd5\u76f4\u63a5\u5e94\u7528\u4e8e\u4e8b\u4ef6\u7684\u8ba1\u7b97\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u628a\u4e8b\u4ef6\u5f53\u4f5c\u96c6\u5408\u6765\u5bf9\u5f85\u3002 \u548c\u4e8b\u4ef6 \uff1a\u76f8\u5f53\u4e8e \u5e76\u96c6 \u3002\u53ea\u9700\u5176\u4e2d\u4e4b\u4e00\u53d1\u751f\uff0c\u5c31\u53d1\u751f\u4e86\u3002 \u79ef\u4e8b\u4ef6 \uff1a\u76f8\u5f53\u4e8e \u4ea4\u96c6 \u3002\u5fc5\u987b\u8981\u5168\u90fd\u53d1\u751f\uff0c\u624d\u8ba1\u7b97\u6982\u7387\u3002 \u6982\u7387 \u00b6 \u5b9a\u4e49 \u00b6 \u5982\u679c\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\uff0c\u8fdb\u884c\u4e86 n \u6b21\u8bd5\u9a8c\uff0c\u4e8b\u4ef6 A \u53d1\u751f\u4e86 N_A N_A \u6b21\uff0c\u90a3\u4e48 \\frac{N_A}{n} \\frac{N_A}{n} \u79f0\u4e3a\u4e8b\u4ef6 A \u53d1\u751f\u7684\u6982\u7387\u3002 \u516c\u7406 \u00b6 \u975e\u8d1f\u6027 \uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4e8b\u4ef6 A A \uff0c\u6709\u6982\u7387 P(A)\\in [0,1] P(A)\\in [0,1] \u3002 \u89c4\u8303\u6027 \uff1a\u4e8b\u4ef6\u7a7a\u95f4\u7684\u6982\u7387\u503c\u4e3a 1 1 \uff0c P(S)=1 P(S)=1 . \u5bb9\u65a5\u6027 \uff1a\u82e5 P(A+B) = P(A)+P(B) P(A+B) = P(A)+P(B) \uff0c\u5219 A A \u548c B B \u4e92\u4e3a\u72ec\u7acb\u4e8b\u4ef6\u3002 \u8ba1\u7b97 \u00b6 \u5168\u6982\u7387\u516c\u5f0f \uff1a\u82e5\u4e8b\u4ef6 A_1,A_2,\\ldots,A_n A_1,A_2,\\ldots,A_n \u6784\u6210\u4e00\u4e2a\u5b8c\u5907\u7684\u4e8b\u4ef6\u4e14\u90fd\u6709\u6b63\u6982\u7387\uff0c\u5373 \\forall i,j, A_i\\cap A_j=\\varnothing \\forall i,j, A_i\\cap A_j=\\varnothing \u4e14 \\displaystyle \\sum_{i=1}^n A_i=1 \\displaystyle \\sum_{i=1}^n A_i=1 \uff0c\u6709 \\displaystyle P(B)=\\sum_{i=1}^n P(A_i)P(B|A_i) \\displaystyle P(B)=\\sum_{i=1}^n P(A_i)P(B|A_i) \u3002 \u8d1d\u53f6\u65af\u5b9a\u7406 \uff1a \\displaystyle P(B_i|A)=\\frac{P(B_i)P(A|B_i)}{\\displaystyle \\sum_{j=1}^n P(B_j)P(A|B_j)} \\displaystyle P(B_i|A)=\\frac{P(B_i)P(A|B_i)}{\\displaystyle \\sum_{j=1}^n P(B_j)P(A|B_j)} \u516c\u5f0f\u4e2d\uff0c\u4e8b\u4ef6 B_i B_i \u7684\u6982\u7387\u4e3a P(B_i) P(B_i) \uff0c\u4e8b\u4ef6 B_i B_i \u5df2\u53d1\u751f\u6761\u4ef6\u4e0b\u4e8b\u4ef6 A A \u7684\u6982\u7387\u4e3a P(A|B_i) P(A|B_i) \uff0c\u4e8b\u4ef6 A A \u53d1\u751f\u6761\u4ef6\u4e0b\u4e8b\u4ef6 B_i B_i \u7684\u6982\u7387\u4e3a P(B_i|A) P(B_i|A) \u3002 \u671f\u671b \u00b6 \u5b9a\u4e49 \u00b6 \u5728\u4e00\u5b9a\u533a\u95f4\u5185\u53d8\u91cf\u53d6\u503c\u4e3a\u6709\u9650\u4e2a\uff0c\u6216\u6570\u503c\u53ef\u4ee5\u4e00\u4e00\u5217\u4e3e\u51fa\u6765\u7684\u53d8\u91cf\u79f0\u4e3a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u3002\u4e00\u4e2a\u79bb\u6563\u6027\u968f\u673a\u53d8\u91cf\u7684\u6570\u5b66\u671f\u671b\u662f\u8bd5\u9a8c\u4e2d\u6bcf\u6b21\u53ef\u80fd\u7684\u7ed3\u679c\u4e58\u4ee5\u5176\u7ed3\u679c\u6982\u7387\u7684\u603b\u548c\u3002 \u6027\u8d28 \u00b6 \u5168\u671f\u671b\u516c\u5f0f \uff1a E(Y)=E[E(Y|X)] E(Y)=E[E(Y|X)] \u3002\u53ef\u7531\u5168\u6982\u7387\u516c\u5f0f\u8bc1\u660e\u3002 \u7ebf\u6027\u6027\u8d28 : \u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6 x,y x,y \uff08 \u4e0d\u8981\u6c42\u76f8\u4e92\u72ec\u7acb \uff09 \uff0c\u6709 E(X+Y)=E(X)+E(Y) E(X+Y)=E(X)+E(Y) \u3002 \u4f8b\u9898 \u00b6 NOIP2017 \u521d\u8d5b T14, T15 NOIP2016 \u6362\u6559\u5ba4 \uff08\u6982\u7387\u671f\u671b DP\uff09","title":"\u6982\u7387 & \u671f\u671b"},{"location":"math/expectation/#_1","text":"","title":"\u4e8b\u4ef6"},{"location":"math/expectation/#_2","text":"\u5728\u4e00\u6b21\u968f\u673a\u8bd5\u9a8c\u4e2d\u53ef\u80fd\u53d1\u751f\u7684\u4e0d\u80fd\u518d\u7ec6\u5206\u7684\u7ed3\u679c\u88ab\u79f0\u4e3a\u5355\u4f4d\u4e8b\u4ef6\uff0c\u7528 E E \u8868\u793a\u3002\u5728\u968f\u673a\u8bd5\u9a8c\u4e2d\u53ef\u80fd\u53d1\u751f\u7684\u6240\u6709\u5355\u4f4d\u4e8b\u4ef6\u7684\u96c6\u5408\u79f0\u4e3a\u4e8b\u4ef6\u7a7a\u95f4\uff0c\u7528 S S \u6765\u8868\u793a\u3002\u4f8b\u5982\u5728\u4e00\u6b21\u63b7\u9ab0\u5b50\u7684\u968f\u673a\u8bd5\u9a8c\u4e2d\uff0c\u5982\u679c\u7528\u83b7\u5f97\u7684\u70b9\u6570\u6765\u8868\u793a\u5355\u4f4d\u4e8b\u4ef6\uff0c\u90a3\u4e48\u4e00\u5171\u53ef\u80fd\u51fa\u73b0 6 6 \u4e2a\u5355\u4f4d\u4e8b\u4ef6\uff0c\u5219\u4e8b\u4ef6\u7a7a\u95f4\u53ef\u4ee5\u8868\u793a\u4e3a S=\\{1,2,3,4,5,6\\} S=\\{1,2,3,4,5,6\\} \u3002 \u968f\u673a\u4e8b\u4ef6\u662f\u4e8b\u4ef6\u7a7a\u95f4 S S \u7684\u5b50\u96c6\uff0c\u5b83\u7531\u4e8b\u4ef6\u7a7a\u95f4 S S \u4e2d\u7684\u5355\u4f4d\u5143\u7d20\u6784\u6210\uff0c\u7528\u5927\u5199\u5b57\u6bcd A, B, C,\\ldots A, B, C,\\ldots \u8868\u793a\u3002\u4f8b\u5982\u5728\u63b7\u4e24\u4e2a\u9ab0\u5b50\u7684\u968f\u673a\u8bd5\u9a8c\u4e2d\uff0c\u8bbe\u968f\u673a\u4e8b\u4ef6 A A \u4e3a \u201c\u83b7\u5f97\u7684\u70b9\u6570\u548c\u5927\u4e8e 10 10 \u201d \uff0c\u5219 A A \u53ef\u4ee5\u7531\u4e0b\u9762 3 3 \u4e2a\u5355\u4f4d\u4e8b\u4ef6\u7ec4\u6210\uff1a A = \\{ (5,6),(6,5),(6,6)\\} A = \\{ (5,6),(6,5),(6,6)\\} \u3002","title":"\u5355\u4f4d\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u7a7a\u95f4\u3001\u968f\u673a\u4e8b\u4ef6"},{"location":"math/expectation/#_3","text":"\u56e0\u4e3a\u4e8b\u4ef6\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4ee5\u96c6\u5408\u7684\u542b\u4e49\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u96c6\u5408\u8ba1\u7b97\u65b9\u6cd5\u76f4\u63a5\u5e94\u7528\u4e8e\u4e8b\u4ef6\u7684\u8ba1\u7b97\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u628a\u4e8b\u4ef6\u5f53\u4f5c\u96c6\u5408\u6765\u5bf9\u5f85\u3002 \u548c\u4e8b\u4ef6 \uff1a\u76f8\u5f53\u4e8e \u5e76\u96c6 \u3002\u53ea\u9700\u5176\u4e2d\u4e4b\u4e00\u53d1\u751f\uff0c\u5c31\u53d1\u751f\u4e86\u3002 \u79ef\u4e8b\u4ef6 \uff1a\u76f8\u5f53\u4e8e \u4ea4\u96c6 \u3002\u5fc5\u987b\u8981\u5168\u90fd\u53d1\u751f\uff0c\u624d\u8ba1\u7b97\u6982\u7387\u3002","title":"\u4e8b\u4ef6\u7684\u8ba1\u7b97"},{"location":"math/expectation/#_4","text":"","title":"\u6982\u7387"},{"location":"math/expectation/#_5","text":"\u5982\u679c\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\uff0c\u8fdb\u884c\u4e86 n \u6b21\u8bd5\u9a8c\uff0c\u4e8b\u4ef6 A \u53d1\u751f\u4e86 N_A N_A \u6b21\uff0c\u90a3\u4e48 \\frac{N_A}{n} \\frac{N_A}{n} \u79f0\u4e3a\u4e8b\u4ef6 A \u53d1\u751f\u7684\u6982\u7387\u3002","title":"\u5b9a\u4e49"},{"location":"math/expectation/#_6","text":"\u975e\u8d1f\u6027 \uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4e8b\u4ef6 A A \uff0c\u6709\u6982\u7387 P(A)\\in [0,1] P(A)\\in [0,1] \u3002 \u89c4\u8303\u6027 \uff1a\u4e8b\u4ef6\u7a7a\u95f4\u7684\u6982\u7387\u503c\u4e3a 1 1 \uff0c P(S)=1 P(S)=1 . \u5bb9\u65a5\u6027 \uff1a\u82e5 P(A+B) = P(A)+P(B) P(A+B) = P(A)+P(B) \uff0c\u5219 A A \u548c B B \u4e92\u4e3a\u72ec\u7acb\u4e8b\u4ef6\u3002","title":"\u516c\u7406"},{"location":"math/expectation/#_7","text":"\u5168\u6982\u7387\u516c\u5f0f \uff1a\u82e5\u4e8b\u4ef6 A_1,A_2,\\ldots,A_n A_1,A_2,\\ldots,A_n \u6784\u6210\u4e00\u4e2a\u5b8c\u5907\u7684\u4e8b\u4ef6\u4e14\u90fd\u6709\u6b63\u6982\u7387\uff0c\u5373 \\forall i,j, A_i\\cap A_j=\\varnothing \\forall i,j, A_i\\cap A_j=\\varnothing \u4e14 \\displaystyle \\sum_{i=1}^n A_i=1 \\displaystyle \\sum_{i=1}^n A_i=1 \uff0c\u6709 \\displaystyle P(B)=\\sum_{i=1}^n P(A_i)P(B|A_i) \\displaystyle P(B)=\\sum_{i=1}^n P(A_i)P(B|A_i) \u3002 \u8d1d\u53f6\u65af\u5b9a\u7406 \uff1a \\displaystyle P(B_i|A)=\\frac{P(B_i)P(A|B_i)}{\\displaystyle \\sum_{j=1}^n P(B_j)P(A|B_j)} \\displaystyle P(B_i|A)=\\frac{P(B_i)P(A|B_i)}{\\displaystyle \\sum_{j=1}^n P(B_j)P(A|B_j)} \u516c\u5f0f\u4e2d\uff0c\u4e8b\u4ef6 B_i B_i \u7684\u6982\u7387\u4e3a P(B_i) P(B_i) \uff0c\u4e8b\u4ef6 B_i B_i \u5df2\u53d1\u751f\u6761\u4ef6\u4e0b\u4e8b\u4ef6 A A \u7684\u6982\u7387\u4e3a P(A|B_i) P(A|B_i) \uff0c\u4e8b\u4ef6 A A \u53d1\u751f\u6761\u4ef6\u4e0b\u4e8b\u4ef6 B_i B_i \u7684\u6982\u7387\u4e3a P(B_i|A) P(B_i|A) \u3002","title":"\u8ba1\u7b97"},{"location":"math/expectation/#_8","text":"","title":"\u671f\u671b"},{"location":"math/expectation/#_9","text":"\u5728\u4e00\u5b9a\u533a\u95f4\u5185\u53d8\u91cf\u53d6\u503c\u4e3a\u6709\u9650\u4e2a\uff0c\u6216\u6570\u503c\u53ef\u4ee5\u4e00\u4e00\u5217\u4e3e\u51fa\u6765\u7684\u53d8\u91cf\u79f0\u4e3a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u3002\u4e00\u4e2a\u79bb\u6563\u6027\u968f\u673a\u53d8\u91cf\u7684\u6570\u5b66\u671f\u671b\u662f\u8bd5\u9a8c\u4e2d\u6bcf\u6b21\u53ef\u80fd\u7684\u7ed3\u679c\u4e58\u4ee5\u5176\u7ed3\u679c\u6982\u7387\u7684\u603b\u548c\u3002","title":"\u5b9a\u4e49"},{"location":"math/expectation/#_10","text":"\u5168\u671f\u671b\u516c\u5f0f \uff1a E(Y)=E[E(Y|X)] E(Y)=E[E(Y|X)] \u3002\u53ef\u7531\u5168\u6982\u7387\u516c\u5f0f\u8bc1\u660e\u3002 \u7ebf\u6027\u6027\u8d28 : \u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6 x,y x,y \uff08 \u4e0d\u8981\u6c42\u76f8\u4e92\u72ec\u7acb \uff09 \uff0c\u6709 E(X+Y)=E(X)+E(Y) E(X+Y)=E(X)+E(Y) \u3002","title":"\u6027\u8d28"},{"location":"math/expectation/#_11","text":"NOIP2017 \u521d\u8d5b T14, T15 NOIP2016 \u6362\u6559\u5ba4 \uff08\u6982\u7387\u671f\u671b DP\uff09","title":"\u4f8b\u9898"},{"location":"math/fermat/","text":"\u8d39\u9a6c\u5c0f\u5b9a\u7406 \u00b6 \u82e5 p p \u4e3a\u7d20\u6570\uff0c \\gcd(a, p) = 1 \\gcd(a, p) = 1 \uff0c\u5219 a^{p - 1} \\equiv 1 \\pmod{p} a^{p - 1} \\equiv 1 \\pmod{p} \u3002 \u53e6\u4e00\u4e2a\u5f62\u5f0f\uff1a\u5bf9\u4e8e\u4efb\u610f\u6574\u6570 a a \uff0c\u6709 a^p \\equiv a \\pmod{p} a^p \\equiv a \\pmod{p} \u3002 \u6b27\u62c9\u5b9a\u7406 \u00b6 \u82e5 \\gcd(a, m) = 1 \\gcd(a, m) = 1 \uff0c\u5219 a^{\\phi(m)} \\equiv 1 \\pmod{m} a^{\\phi(m)} \\equiv 1 \\pmod{m} \u3002 \u8bc1\u660e \u00b6 \u8bbe r_1, r_2, \\cdots, r_{\\phi(m)} r_1, r_2, \\cdots, r_{\\phi(m)} \u4e3a\u6a21 m m \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\uff0c\u5219 ar_1, ar_2, \\cdots, ar_{\\phi(m)} ar_1, ar_2, \\cdots, ar_{\\phi(m)} \u4e5f\u4e3a\u6a21 m m \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u3002\u6240\u4ee5 r_1r_2 \\cdots r_{\\phi(m)} \\equiv ar_1 \\cdot ar_2 \\cdots ar_{\\phi(m)} \\equiv a^{\\phi(m)}r_1r_2 \\cdots r_{\\phi(m)} \\pmod{m} r_1r_2 \\cdots r_{\\phi(m)} \\equiv ar_1 \\cdot ar_2 \\cdots ar_{\\phi(m)} \\equiv a^{\\phi(m)}r_1r_2 \\cdots r_{\\phi(m)} \\pmod{m} \uff0c\u53ef\u7ea6\u53bb r_1r_2 \\cdots r_{\\phi(m)} r_1r_2 \\cdots r_{\\phi(m)} \uff0c\u5373\u5f97 a^{\\phi(m)} \\equiv 1 \\pmod{m} a^{\\phi(m)} \\equiv 1 \\pmod{m} \u3002 \u5f53 m m \u4e3a\u7d20\u6570\u65f6\uff0c\u7531\u4e8e \\phi(m) = m - 1 \\phi(m) = m - 1 \uff0c\u4ee3\u5165\u6b27\u62c9\u5b9a\u7406\u53ef\u7acb\u5373\u5f97\u5230\u8d39\u9a6c\u5c0f\u5b9a\u7406\u3002 \u6269\u5c55\u6b27\u62c9\u5b9a\u7406 \u00b6 a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},\\,&\\gcd(a,\\,p)=1\\\\ a^b,&\\gcd(a,\\,p)\\ne1,\\,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,\\,p)\\ne1,\\,b\\ge\\varphi(p) \\end{cases} \\pmod p a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},\\,&\\gcd(a,\\,p)=1\\\\ a^b,&\\gcd(a,\\,p)\\ne1,\\,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,\\,p)\\ne1,\\,b\\ge\\varphi(p) \\end{cases} \\pmod p \u8bc1\u660e \u00b6 \u8bc1\u660e\u8f6c\u8f7d\u81ea synapse7 \u5728 a a \u7684 0 0 \u6b21\uff0c 1 1 \u6b21\uff0c...\uff0c b b \u6b21\u5e42\u6a21 m m \u7684\u5e8f\u5217\u4e2d\uff0c\u524d r r \u4e2a\u6570\uff08 a^0 a^0 \u5230 a^{r-1} a^{r-1} ) \u4e92\u4e0d\u76f8\u540c\uff0c\u4ece\u7b2c r r \u4e2a\u6570\u5f00\u59cb\uff0c\u6bcf s s \u4e2a\u6570\u5c31\u5faa\u73af\u4e00\u6b21\u3002 \u8bc1\u660e\uff1a\u7531\u9e3d\u5de2\u5b9a\u7406\u6613\u8bc1\u3002 \u6211\u4eec\u628a r r \u79f0\u4e3a a a \u5e42\u6b21\u6a21 m m \u7684\u5faa\u73af\u8d77\u59cb\u70b9\uff0c s s \u79f0\u4e3a\u5faa\u73af\u957f\u5ea6\u3002\uff08\u6ce8\u610f\uff1a r r \u53ef\u4ee5\u4e3a 0 0 \uff09 \u7528\u516c\u5f0f\u8868\u8ff0\u4e3a\uff1a a^r\\equiv a^{r+s}\\pmod{m} a^r\\equiv a^{r+s}\\pmod{m} a a \u4e3a\u7d20\u6570\u7684\u60c5\u51b5 \u4ee4 m=p^rm' m=p^rm' \uff0c\u5219 \\gcd(p,m')=1 \\gcd(p,m')=1 \uff0c\u6240\u4ee5 p^{\\phi(m')}\\equiv 1\\pmod{m'} p^{\\phi(m')}\\equiv 1\\pmod{m'} \u53c8\u7531\u4e8e \\gcd(p^r,m')=1 \\gcd(p^r,m')=1 \uff0c\u6240\u4ee5 \\phi(m') \\mid \\varphi(m) \\phi(m') \\mid \\varphi(m) \uff0c\u6240\u4ee5 p^{\\varphi(m)}\\equiv 1 \\pmod {m'} p^{\\varphi(m)}\\equiv 1 \\pmod {m'} \uff0c\u5373 p^\\phi(m)=km'+1 p^\\phi(m)=km'+1 \uff0c\u4e24\u8fb9\u540c\u65f6\u4e58\u4ee5 p^r p^r \uff0c\u5f97 p^{r+\\phi(m)}=km+p^r p^{r+\\phi(m)}=km+p^r \uff08\u56e0\u4e3a m=p^rm' m=p^rm' \uff09 \u6240\u4ee5 p^r\\equiv p^{r+s}\\pmod m p^r\\equiv p^{r+s}\\pmod m \uff0c\u8fd9\u91cc s=\\phi(m) s=\\phi(m) \u63a8\u8bba\uff1a p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\pmod m p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\pmod m \u53c8\u7531\u4e8e m=p^rm' m=p^rm' \uff0c\u6240\u4ee5 \\phi(m) \\ge \\phi(p^r)=p^{r-1}(p-1) \\ge r \\phi(m) \\ge \\phi(p^r)=p^{r-1}(p-1) \\ge r \u6240\u4ee5 p^r\\equiv p^{r+\\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)}\\pmod m p^r\\equiv p^{r+\\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)}\\pmod m \u6240\u4ee5 p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)+(b-r) \\mod \\phi(m)}\\equiv p^{\\phi(m)+b \\mod \\phi(m)}\\pmod m p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)+(b-r) \\mod \\phi(m)}\\equiv p^{\\phi(m)+b \\mod \\phi(m)}\\pmod m \u5373 p^b\\equiv p^{b \\mod \\phi(m)+\\phi(m)}\\pmod m p^b\\equiv p^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a a \u4e3a\u7d20\u6570\u7684\u5e42\u7684\u60c5\u51b5 \u662f\u5426\u4f9d\u7136\u6709 a^{r'}\\equiv a^{r'+s'}\\pmod m a^{r'}\\equiv a^{r'+s'}\\pmod m \uff1f(\u5176\u4e2d s'=\\phi(m),a=p^k s'=\\phi(m),a=p^k ) \u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u7531 2 \u77e5 p^s\\equiv 1 \\pmod m' p^s\\equiv 1 \\pmod m' \uff0c\u6240\u4ee5 p^{s \\times \\frac{k}{\\gcd(s,k)}} \\equiv 1\\pmod {m'} p^{s \\times \\frac{k}{\\gcd(s,k)}} \\equiv 1\\pmod {m'} \uff0c\u6240\u4ee5\u5f53 s'=\\frac{s}{\\gcd(s,k)} s'=\\frac{s}{\\gcd(s,k)} \u65f6\u624d\u80fd\u6709 p^{s'k}\\equiv 1\\pmod {m'} p^{s'k}\\equiv 1\\pmod {m'} \uff0c\u6b64\u65f6 s' \\mid s \\mid \\phi(m) s' \\mid s \\mid \\phi(m) \uff0c\u4e14 r'= \\lceil \\frac{r}{k}\\rceil \\le r \\le \\phi(m) r'= \\lceil \\frac{r}{k}\\rceil \\le r \\le \\phi(m) \uff0c\u7531 r',s' r',s' \u4e0e \\phi(m) \\phi(m) \u7684\u5173\u7cfb\uff0c\u4f9d\u7136\u53ef\u4ee5\u5f97\u5230 a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a a \u4e3a\u5408\u6570\u7684\u60c5\u51b5 \u53ea\u8bc1 a a \u62c6\u6210\u4e24\u4e2a\u7d20\u6570\u7684\u5e42\u7684\u60c5\u51b5\uff0c\u5927\u4e8e\u4e24\u4e2a\u7684\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u8bc1\u3002 \u8bbe a=a_1a_2,a_i=p_i^{k_i} a=a_1a_2,a_i=p_i^{k_i} \uff0c a_i a_i \u7684\u5faa\u73af\u957f\u5ea6\u4e3a s_i s_i \uff1b \u5219 s \\mid lcm(s_1,s_2) s \\mid lcm(s_1,s_2) \uff0c\u7531\u4e8e s_1 \\mid \\phi(m),s_2 \\mid \\phi(m) s_1 \\mid \\phi(m),s_2 \\mid \\phi(m) \uff0c\u90a3\u4e48 lcm(s_1,s_2) \\mid \\phi(m) lcm(s_1,s_2) \\mid \\phi(m) \uff0c\u6240\u4ee5 s \\mid \\phi(m) s \\mid \\phi(m) \uff0c r=\\max(\\lceil \\frac{r_i}{k_i} \\rceil) \\le \\max(r_i) \\le \\phi(m) r=\\max(\\lceil \\frac{r_i}{k_i} \\rceil) \\le \\max(r_i) \\le \\phi(m) \uff1b \u7531 r,s r,s \u4e0e \\phi(m) \\phi(m) \u7684\u5173\u7cfb\uff0c\u4f9d\u7136\u53ef\u4ee5\u5f97\u5230 a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m \uff1b \u8bc1\u6bd5\u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"math/fermat/#_1","text":"\u82e5 p p \u4e3a\u7d20\u6570\uff0c \\gcd(a, p) = 1 \\gcd(a, p) = 1 \uff0c\u5219 a^{p - 1} \\equiv 1 \\pmod{p} a^{p - 1} \\equiv 1 \\pmod{p} \u3002 \u53e6\u4e00\u4e2a\u5f62\u5f0f\uff1a\u5bf9\u4e8e\u4efb\u610f\u6574\u6570 a a \uff0c\u6709 a^p \\equiv a \\pmod{p} a^p \\equiv a \\pmod{p} \u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"math/fermat/#_2","text":"\u82e5 \\gcd(a, m) = 1 \\gcd(a, m) = 1 \uff0c\u5219 a^{\\phi(m)} \\equiv 1 \\pmod{m} a^{\\phi(m)} \\equiv 1 \\pmod{m} \u3002","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"math/fermat/#_3","text":"\u8bbe r_1, r_2, \\cdots, r_{\\phi(m)} r_1, r_2, \\cdots, r_{\\phi(m)} \u4e3a\u6a21 m m \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\uff0c\u5219 ar_1, ar_2, \\cdots, ar_{\\phi(m)} ar_1, ar_2, \\cdots, ar_{\\phi(m)} \u4e5f\u4e3a\u6a21 m m \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u3002\u6240\u4ee5 r_1r_2 \\cdots r_{\\phi(m)} \\equiv ar_1 \\cdot ar_2 \\cdots ar_{\\phi(m)} \\equiv a^{\\phi(m)}r_1r_2 \\cdots r_{\\phi(m)} \\pmod{m} r_1r_2 \\cdots r_{\\phi(m)} \\equiv ar_1 \\cdot ar_2 \\cdots ar_{\\phi(m)} \\equiv a^{\\phi(m)}r_1r_2 \\cdots r_{\\phi(m)} \\pmod{m} \uff0c\u53ef\u7ea6\u53bb r_1r_2 \\cdots r_{\\phi(m)} r_1r_2 \\cdots r_{\\phi(m)} \uff0c\u5373\u5f97 a^{\\phi(m)} \\equiv 1 \\pmod{m} a^{\\phi(m)} \\equiv 1 \\pmod{m} \u3002 \u5f53 m m \u4e3a\u7d20\u6570\u65f6\uff0c\u7531\u4e8e \\phi(m) = m - 1 \\phi(m) = m - 1 \uff0c\u4ee3\u5165\u6b27\u62c9\u5b9a\u7406\u53ef\u7acb\u5373\u5f97\u5230\u8d39\u9a6c\u5c0f\u5b9a\u7406\u3002","title":"\u8bc1\u660e"},{"location":"math/fermat/#_4","text":"a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},\\,&\\gcd(a,\\,p)=1\\\\ a^b,&\\gcd(a,\\,p)\\ne1,\\,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,\\,p)\\ne1,\\,b\\ge\\varphi(p) \\end{cases} \\pmod p a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},\\,&\\gcd(a,\\,p)=1\\\\ a^b,&\\gcd(a,\\,p)\\ne1,\\,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,\\,p)\\ne1,\\,b\\ge\\varphi(p) \\end{cases} \\pmod p","title":"\u6269\u5c55\u6b27\u62c9\u5b9a\u7406"},{"location":"math/fermat/#_5","text":"\u8bc1\u660e\u8f6c\u8f7d\u81ea synapse7 \u5728 a a \u7684 0 0 \u6b21\uff0c 1 1 \u6b21\uff0c...\uff0c b b \u6b21\u5e42\u6a21 m m \u7684\u5e8f\u5217\u4e2d\uff0c\u524d r r \u4e2a\u6570\uff08 a^0 a^0 \u5230 a^{r-1} a^{r-1} ) \u4e92\u4e0d\u76f8\u540c\uff0c\u4ece\u7b2c r r \u4e2a\u6570\u5f00\u59cb\uff0c\u6bcf s s \u4e2a\u6570\u5c31\u5faa\u73af\u4e00\u6b21\u3002 \u8bc1\u660e\uff1a\u7531\u9e3d\u5de2\u5b9a\u7406\u6613\u8bc1\u3002 \u6211\u4eec\u628a r r \u79f0\u4e3a a a \u5e42\u6b21\u6a21 m m \u7684\u5faa\u73af\u8d77\u59cb\u70b9\uff0c s s \u79f0\u4e3a\u5faa\u73af\u957f\u5ea6\u3002\uff08\u6ce8\u610f\uff1a r r \u53ef\u4ee5\u4e3a 0 0 \uff09 \u7528\u516c\u5f0f\u8868\u8ff0\u4e3a\uff1a a^r\\equiv a^{r+s}\\pmod{m} a^r\\equiv a^{r+s}\\pmod{m} a a \u4e3a\u7d20\u6570\u7684\u60c5\u51b5 \u4ee4 m=p^rm' m=p^rm' \uff0c\u5219 \\gcd(p,m')=1 \\gcd(p,m')=1 \uff0c\u6240\u4ee5 p^{\\phi(m')}\\equiv 1\\pmod{m'} p^{\\phi(m')}\\equiv 1\\pmod{m'} \u53c8\u7531\u4e8e \\gcd(p^r,m')=1 \\gcd(p^r,m')=1 \uff0c\u6240\u4ee5 \\phi(m') \\mid \\varphi(m) \\phi(m') \\mid \\varphi(m) \uff0c\u6240\u4ee5 p^{\\varphi(m)}\\equiv 1 \\pmod {m'} p^{\\varphi(m)}\\equiv 1 \\pmod {m'} \uff0c\u5373 p^\\phi(m)=km'+1 p^\\phi(m)=km'+1 \uff0c\u4e24\u8fb9\u540c\u65f6\u4e58\u4ee5 p^r p^r \uff0c\u5f97 p^{r+\\phi(m)}=km+p^r p^{r+\\phi(m)}=km+p^r \uff08\u56e0\u4e3a m=p^rm' m=p^rm' \uff09 \u6240\u4ee5 p^r\\equiv p^{r+s}\\pmod m p^r\\equiv p^{r+s}\\pmod m \uff0c\u8fd9\u91cc s=\\phi(m) s=\\phi(m) \u63a8\u8bba\uff1a p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\pmod m p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\pmod m \u53c8\u7531\u4e8e m=p^rm' m=p^rm' \uff0c\u6240\u4ee5 \\phi(m) \\ge \\phi(p^r)=p^{r-1}(p-1) \\ge r \\phi(m) \\ge \\phi(p^r)=p^{r-1}(p-1) \\ge r \u6240\u4ee5 p^r\\equiv p^{r+\\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)}\\pmod m p^r\\equiv p^{r+\\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)}\\pmod m \u6240\u4ee5 p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)+(b-r) \\mod \\phi(m)}\\equiv p^{\\phi(m)+b \\mod \\phi(m)}\\pmod m p^b\\equiv p^{r+(b-r) \\mod \\phi(m)}\\equiv p^{r \\mod \\phi(m)+\\phi(m)+(b-r) \\mod \\phi(m)}\\equiv p^{\\phi(m)+b \\mod \\phi(m)}\\pmod m \u5373 p^b\\equiv p^{b \\mod \\phi(m)+\\phi(m)}\\pmod m p^b\\equiv p^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a a \u4e3a\u7d20\u6570\u7684\u5e42\u7684\u60c5\u51b5 \u662f\u5426\u4f9d\u7136\u6709 a^{r'}\\equiv a^{r'+s'}\\pmod m a^{r'}\\equiv a^{r'+s'}\\pmod m \uff1f(\u5176\u4e2d s'=\\phi(m),a=p^k s'=\\phi(m),a=p^k ) \u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u7531 2 \u77e5 p^s\\equiv 1 \\pmod m' p^s\\equiv 1 \\pmod m' \uff0c\u6240\u4ee5 p^{s \\times \\frac{k}{\\gcd(s,k)}} \\equiv 1\\pmod {m'} p^{s \\times \\frac{k}{\\gcd(s,k)}} \\equiv 1\\pmod {m'} \uff0c\u6240\u4ee5\u5f53 s'=\\frac{s}{\\gcd(s,k)} s'=\\frac{s}{\\gcd(s,k)} \u65f6\u624d\u80fd\u6709 p^{s'k}\\equiv 1\\pmod {m'} p^{s'k}\\equiv 1\\pmod {m'} \uff0c\u6b64\u65f6 s' \\mid s \\mid \\phi(m) s' \\mid s \\mid \\phi(m) \uff0c\u4e14 r'= \\lceil \\frac{r}{k}\\rceil \\le r \\le \\phi(m) r'= \\lceil \\frac{r}{k}\\rceil \\le r \\le \\phi(m) \uff0c\u7531 r',s' r',s' \u4e0e \\phi(m) \\phi(m) \u7684\u5173\u7cfb\uff0c\u4f9d\u7136\u53ef\u4ee5\u5f97\u5230 a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a a \u4e3a\u5408\u6570\u7684\u60c5\u51b5 \u53ea\u8bc1 a a \u62c6\u6210\u4e24\u4e2a\u7d20\u6570\u7684\u5e42\u7684\u60c5\u51b5\uff0c\u5927\u4e8e\u4e24\u4e2a\u7684\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u8bc1\u3002 \u8bbe a=a_1a_2,a_i=p_i^{k_i} a=a_1a_2,a_i=p_i^{k_i} \uff0c a_i a_i \u7684\u5faa\u73af\u957f\u5ea6\u4e3a s_i s_i \uff1b \u5219 s \\mid lcm(s_1,s_2) s \\mid lcm(s_1,s_2) \uff0c\u7531\u4e8e s_1 \\mid \\phi(m),s_2 \\mid \\phi(m) s_1 \\mid \\phi(m),s_2 \\mid \\phi(m) \uff0c\u90a3\u4e48 lcm(s_1,s_2) \\mid \\phi(m) lcm(s_1,s_2) \\mid \\phi(m) \uff0c\u6240\u4ee5 s \\mid \\phi(m) s \\mid \\phi(m) \uff0c r=\\max(\\lceil \\frac{r_i}{k_i} \\rceil) \\le \\max(r_i) \\le \\phi(m) r=\\max(\\lceil \\frac{r_i}{k_i} \\rceil) \\le \\max(r_i) \\le \\phi(m) \uff1b \u7531 r,s r,s \u4e0e \\phi(m) \\phi(m) \u7684\u5173\u7cfb\uff0c\u4f9d\u7136\u53ef\u4ee5\u5f97\u5230 a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m a^b\\equiv a^{b \\mod \\phi(m)+\\phi(m)}\\pmod m \uff1b \u8bc1\u6bd5\u3002","title":"\u8bc1\u660e"},{"location":"math/fft/","text":"\uff08\u672c\u6587\u8f6c\u8f7d\u81ea \u6843\u9171\u7684\u7b97\u6cd5\u7b14\u8bb0 \uff0c\u539f\u6587\u6233 \u94fe\u63a5 \uff0c\u5df2\u83b7\u5f97\u4f5c\u8005\u6388\u6743\uff09 \u4e00\u76f4\u60f3\u5b66 FFT\uff0c\u4e4b\u524d\u725b\u5ba2\u7684\u591a\u5c0f\u6709\u4e00\u9053\u7ec4\u5408\u6570\u5b66\u5c31\u7528 FFT \u5199\u7684\uff0c\u800c\u4e14\u5f53\u65f6\u8fd8\u50bb\u4e4e\u4e4e\u7684\u7528\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u4f46\u662f\u81ea\u5df1\u597d\u4e45\u6ca1\u9759\u4e0b\u5fc3\u5b66\u4ec0\u4e48\u4e86\uff0c\u800c\u4e14\u81ea\u5df1\u7684\u6570\u5b66\u529f\u5e95\u53c8\u4e0d\u597d\uff0c\u5bfc\u81f4\u4e00\u76f4\u5b66\u4e0d\u4f1a\u3002\u770b\u4e86\u5f88\u591a\u4eba\u7684\u535a\u5ba2\u4e5f\u6ca1\u770b\u660e\u767d\uff0c\u5c24\u5176\u662f\u539f\u6839\u3002\u5728\u6211\u770b\u4e86\u51e0\u5341\u7bc7\u535a\u5ba2\u4e4b\u540e\u7ec8\u4e8e\u770b\u61c2\u4e86\u3002\u3002\u3002\u6240\u4ee5\u60f3\u5199\u4e00\u7bc7\u80fd\u591f\u8ba9\u5927\u591a\u6570\u4eba\u90fd\u770b\u5f97\u61c2\u7684\u6559\u7a0b\u3002\u82b1\u8d39\u65f6\u95f4 3 \u5929\u7ec8\u4e8e\u5199\u5b8c\u5566 ~ ~ \u53e6\u5916\uff0c\u672c\u6587 FFT \u90e8\u5206\u7684\u4ee3\u7801\u5b9e\u73b0\u5168\u90e8\u53c2\u8003 kuangbin \u7684\u6a21\u677f\uff082018.7 \u66f4\u65b0\uff09\u8d44\u6e90\u5730\u5740\u5982\u4e0b https://download.csdn.net/download/qq_37136305/10562410 NTT \u90e8\u5206\u4ee3\u7801\u53c2\u8003 CSDN \u4e0a\u7684\u6a21\u677f\u4ee3\u7801\u9644\u7f51\u5740\uff0c\u611f\u8c22\u535a\u4e3b\uff01 \u4f60\u641c\u7d22\u8fd9\u4e2a\u5173\u952e\u8bcd\u5c31\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e00\u662f\u4e2a\u6570\u5b66\u7684\u4e1c\u897f\u4e86\u3002\u53ea\u60f3\u5b66\u4f1a\u7528\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u8fd9\u8fdc\u8fdc\u4e0d\u591f\u3002\u6240\u4ee5\u5728\u770b\u8fd9\u4e2a\u535a\u5ba2\u4e4b\u524d\u5e94\u8be5\u5148\u5b66\u4e00\u4e0b \u590d\u6570 \u7684\u57fa\u672c\u77e5\u8bc6\u3002 \u597d\u4e86\u4e0b\u9762\u8fdb\u5165\u6b63\u6587\u3002 DFT IDFT FFT \u5b98\u65b9\u5b9a\u4e49\uff1f \u00b6 \u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08Discrete Fourier Transform\uff0c\u7f29\u5199\u4e3a DFT\uff09\uff0c\u662f\u5085\u91cc\u53f6\u53d8\u6362\u5728\u65f6\u57df\u548c\u9891\u57df\u4e0a\u90fd\u5448\u79bb\u6563\u7684\u5f62\u5f0f\uff0c\u5c06\u4fe1\u53f7\u7684\u65f6\u57df\u91c7\u6837\u53d8\u6362\u4e3a\u5176 DTFT \u7684\u9891\u57df\u91c7\u6837\u3002 FFT \u662f\u4e00\u79cd DFT \u7684\u9ad8\u6548\u7b97\u6cd5\uff0c\u79f0\u4e3a\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\uff08fast Fourier transform\uff09\u3002 \u2014\u2014\u767e\u5ea6\u767e\u79d1 \u5728\u767e\u5ea6\u767e\u79d1\u4e0a\u80fd\u627e\u5230 DFT \u548c FFT \u8fd9\u4e24\u4e2a\u5b9a\u4e49\u3002\u6b63\u5982\u5b9a\u4e49\uff0cFFT \u548c DFT \u5b9e\u9645\u4e0a\u6309\u7167\u7ed3\u679c\u6765\u770b\u7684\u8bdd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f FFT \u6bd4\u8f83\u5feb\u7684\u8ba1\u7b97 DFT \u548c\uff29DFT\uff08\u79bb\u6563\u53cd\u5085\u91cc\u53f6\u53d8\u6362\uff09\u3002 \u5feb\u901f\u6570\u8bba\u53d8\u6362 (NTT) \u662f\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\u5728\u6570\u8bba\u57fa\u7840\u4e0a\u7684\u5b9e\u73b0\u3002 \u662f\u4e0d\u662f\u6709\u70b9\u8ff7 QAQ\uff1f\u65e2\u7136\u662f\u5b98\u65b9\u5b9a\u4e49\u90a3\u80af\u5b9a\u4e0d\u80fd\u8ba9\u4f60\u770b\u61c2\u624d\u5bf9\u561b\uff5e\u4e0b\u9762\u6211\u4eec\u4e00\u4e00\u89e3\u91ca\uff5e \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 FFT\uff1f \u00b6 \u6211\u4eec\u5728\u8fd9\u91cc\u5f15\u5165\u4e00\u4e2a\u4f8b\u5b50\uff1a\u6c42\u591a\u9879\u5f0f\u4e58\u79ef\u7684\u6734\u7d20\u7b97\u6cd5\u3002 \u5927\u5bb6\u5e73\u65f6\u6c42 f(x)=a_1x^2+b_1x+c_1 f(x)=a_1x^2+b_1x+c_1 \u4e0e g(x) = a_2x^2+b_2x+c_2 g(x) = a_2x^2+b_2x+c_2 \u7684\u4e58\u79ef\u65f6\u5019\uff0c\u662f\u600e\u4e48\u8fdb\u884c\u7684\u5462\uff1f \u6211\u4eec\u4ee4 K(x) = f(x) \\times g(x) = a_1x^2 \\times a_2x^2+a_1x^2 \\times b_2x+a_1x^2 \\times c_2+b_1x \\times b_2x^2+b_1x \\times b_2x+b_1x \\times c_2+c_1 \\times a_2x^2+c_1 \\times b_2x+c_1 \\times c_2 K(x) = f(x) \\times g(x) = a_1x^2 \\times a_2x^2+a_1x^2 \\times b_2x+a_1x^2 \\times c_2+b_1x \\times b_2x^2+b_1x \\times b_2x+b_1x \\times c_2+c_1 \\times a_2x^2+c_1 \\times b_2x+c_1 \\times c_2 \u90a3\u4e48\u5f88\u663e\u7136\u6211\u4eec\u8fdb\u884c\u4e86 9 \u6b21\u8fd0\u7b97\uff0c\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \uff08\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u4e0d\u518d\u5c55\u5f00\uff09 \u4f46\u662f\u5982\u679c\u6570\u5b57\u8db3\u591f\u5927\u5462\uff1f\u6bd4\u5982 100000\uff1f\u90a3\u6734\u7d20\u7b97\u6cd5\u53ef\u592a\u6162\u5566 (\uff1b\u2032\u2312`), \u4ec0\u4e48\u662f FFT \u00b6 FFT\uff0c\u5373\u4e3a\u5feb\u901f\u5085\u6c0f\u53d8\u6362\uff0c\u662f\u79bb\u6563\u5085\u6c0f\u53d8\u6362\u7684\u5feb\u901f\u7b97\u6cd5\uff0c\u5b83\u662f\u6839\u636e\u79bb\u6563\u5085\u6c0f\u53d8\u6362\u7684\u5947\u3001\u5076\u3001\u865a\u3001\u5b9e\u7b49\u7279\u6027\uff0c\u5bf9\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\u7684\u7b97\u6cd5\u8fdb\u884c\u6539\u8fdb\u83b7\u5f97\u7684\u3002\u5b83\u5bf9\u5085\u6c0f\u53d8\u6362\u7684\u7406\u8bba\u5e76\u6ca1\u6709\u65b0\u7684\u53d1\u73b0\uff0c\u4f46\u662f\u5bf9\u4e8e\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u6216\u8005\u8bf4\u6570\u5b57\u7cfb\u7edf\u4e2d\u5e94\u7528\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\uff0c\u53ef\u4ee5\u8bf4\u662f\u8fdb\u4e86\u4e00\u5927\u6b65\u3002\u2014\u2014360 \u767e\u79d1 \u5982\u679c\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u7528\u6734\u7d20\u7b97\u6cd5\u592a\u6162\u5566\uff01\u6240\u4ee5\u6211\u4eec\u8981\u7528 FFT \u8fdb\u884c\u4f18\u5316\uff0c\u590d\u6742\u5ea6\u4f1a\u964d\u4e3a O(nlogn) O(nlogn) \u591a\u9879\u5f0f\u7684\u7cfb\u6570\u8868\u793a\u6cd5\u4e0e\u70b9\u503c\u8868\u793a\u6cd5 \u00b6 \u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u600e\u6837\u6765\u8868\u793a\u5462\uff1f \u7cfb\u6570\u8868\u793a\u6cd5\u5c31\u662f\u7528\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u5404\u4e2a\u9879\u7cfb\u6570\u6765\u8868\u8fbe\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u6bd4\u5982\uff1a f(x) = a_1x^2+b_1x+c_1 \\Leftrightarrow f(x) = \\{a_1, b_1, c_1\\} f(x) = a_1x^2+b_1x+c_1 \\Leftrightarrow f(x) = \\{a_1, b_1, c_1\\} \u70b9\u503c\u8868\u793a\u6cd5\u662f\u628a\u8fd9\u4e2a\u591a\u9879\u5f0f\u770b\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u4ece\u4e0a\u9762\u9009\u53d6 n+1 n+1 \u4e2a\u70b9\uff0c\u4ece\u800c\u5229\u7528\u8fd9 n+1 n+1 \u4e2a\u70b9\u6765\u552f\u4e00\u7684\u8868\u793a\u8fd9\u4e2a\u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u7528 n+1 n+1 \u4e2a\u70b9\u5c31\u80fd\u552f\u4e00\u7684\u8868\u793a\u8fd9\u4e2a\u51fd\u6570\u4e86\u5462\uff1f\u60f3\u4e00\u4e0b\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u4e24\u70b9\u786e\u5b9a\u4e00\u6761\u76f4\u7ebf\u3002\u518d\u6765\u4e00\u4e2a\u70b9\uff0c\u80fd\u786e\u5b9a\u8fd9\u4e2a\u76f4\u7ebf\u4e2d\u7684\u53e6\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4 n+1 n+1 \u4e2a\u70b9\u80fd\u786e\u5b9a n n \u4e2a\u53c2\u6570\uff08\u4e0d\u8003\u8651\u500d\u6570\u70b9\u4e4b\u7c7b\u7684\u6ca1\u7528\u70b9\uff09\u3002\u5982\u4e0b\uff1a f_1(x) = y_1 = a_0 + a_1x_1+a_2x_1^2+a_3x_1^3+ \\cdots + a_nx_1^n f_1(x) = y_1 = a_0 + a_1x_1+a_2x_1^2+a_3x_1^3+ \\cdots + a_nx_1^n f_2(x) = y_2 = a_0 + a_1x_2+a_2x_2^2+a_3x_2^3+ \\cdots + a_nx_2^n f_2(x) = y_2 = a_0 + a_1x_2+a_2x_2^2+a_3x_2^3+ \\cdots + a_nx_2^n f_3(x) = y_3 = a_0 + a_1x_3+a_2x_3^2+a_3x_3^3+ \\cdots + a_nx_3^n f_3(x) = y_3 = a_0 + a_1x_3+a_2x_3^2+a_3x_3^3+ \\cdots + a_nx_3^n f_4(x) = y_4 = a_0 + a_1x_4+a_2x_4^2+a_3x_4^3+ \\cdots + a_nx_4^n f_4(x) = y_4 = a_0 + a_1x_4+a_2x_4^2+a_3x_4^3+ \\cdots + a_nx_4^n f_5(x) = y_5 = a_0 + a_1x_5+a_2x_5^2+a_3x_5^3+ \\cdots + a_nx_5^n f_5(x) = y_5 = a_0 + a_1x_5+a_2x_5^2+a_3x_5^3+ \\cdots + a_nx_5^n \\cdots \\cdots f_n(x) = y_n = a_0 + a_1x_m+a_2x_m^2+a_3x_m^3+ \\cdots + a_nx_m^n f_n(x) = y_n = a_0 + a_1x_m+a_2x_m^2+a_3x_m^3+ \\cdots + a_nx_m^n \u4e00\u4e2a\u975e\u5e38\u901a\u4fd7\u6613\u61c2\u7684\u89e3\u91ca\uff1a \u591a\u9879\u5f0f\u7531\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\u7684\u8fc7\u7a0b\uff0c\u5c31\u6210\u4e3a DFT\uff1b \u76f8\u5bf9\u5730\uff0c\u628a\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u70b9\u503c\u8868\u793a\u6cd5\u8f6c\u5316\u4e3a\u7cfb\u6570\u8868\u793a\u6cd5\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f IDFT\u3002 \u800c FFT \u5c31\u662f\u901a\u8fc7\u53d6\u67d0\u4e9b\u7279\u6b8a\u7684 x x \u7684\u70b9\u503c\u6765\u52a0\u901f DFT \u548c FFT \u7684\u8fc7\u7a0b\u3002 \u590d\u6570\u7684\u5f15\u5165 \u00b6 \u590d\u6570\u5206\u4e3a\u5b9e\u6570\u548c\u865a\u6570\u3002\u5b9e\u6570\u5c31\u662f\u6211\u4eec\u65e5\u5e38\u6700\u5e38\u7528\u7684\u6709\u7406\u6570\u548c\u65e0\u7406\u6570\u3002\u5927\u5bb6\u8bb0\u5f97\u6211\u4eec\u5728\u5f00\u59cb\u5b66\u5e73\u65b9\u7684\u65f6\u5019\uff0c\u8001\u5e08\u4f1a\u8bf4\u6240\u6709\u6570\u7684\u5e73\u65b9\u5927\u4e8e\u7b49\u4e8e 0 0 \u5bf9\u4e0d\u5bf9\uff0c\u90a3\u4e48\u865a\u6570\u5c31\u5f15\u5165\u4e86\u3002\u865a\u6570\u4e00\u822c\u7528 i i \u8868\u793a\uff0c\u5bf9\u4e8e\u865a\u6570 i i \uff0c\u6709 i=\\sqrt{-1} i=\\sqrt{-1} \u3002\u53e6\u5916\uff0c i i \u5bf9\u4e8e\u865a\u6570\u7684\u610f\u4e49\uff0c\u4e0e 1 1 \u5bf9\u4e8e\u5b9e\u6570\u7684\u610f\u4e49\u662f\u4e00\u6837\u7684\u3002\u5982\u679c\u6211\u8bf4\u5f97\u4e0d\u591f\u660e\u786e\uff0c\u4f60\u53ef\u4ee5\u770b\u4e0b\u9762\u6211\u5f15\u7528\u7684\u767e\u79d1\u8bf4\u660e\u3002 \u5728\u6570\u5b66\u4e2d\uff0c\u865a\u6570\u5c31\u662f\u5f62\u5982 a+b \\times i a+b \\times i \u7684\u6570\uff0c\u5176\u4e2d a,b a,b \u662f\u5b9e\u6570\uff0c\u4e14 b \\neq 0 b \\neq 0 , i^2 = - 1 i^2 = - 1 \u3002\u865a\u6570\u8fd9\u4e2a\u540d\u8bcd\u662f 17 \u4e16\u7eaa\u8457\u540d\u6570\u5b66\u5bb6\u7b1b\u5361\u5c14\u521b\u7acb\uff0c\u56e0\u4e3a\u5f53\u65f6\u7684\u89c2\u5ff5\u8ba4\u4e3a\u8fd9\u662f\u771f\u5b9e\u4e0d\u5b58\u5728\u7684\u6570\u5b57\u3002\u540e\u6765\u53d1\u73b0\u865a\u6570 a+b \\times i a+b \\times i \u7684\u5b9e\u90e8 a a \u53ef\u5bf9\u5e94\u5e73\u9762\u4e0a\u7684\u6a2a\u8f74\uff0c\u865a\u90e8 b b \u4e0e\u5bf9\u5e94\u5e73\u9762\u4e0a\u7684\u7eb5\u8f74\uff0c\u8fd9\u6837\u865a\u6570 a+b \\times i a+b \\times i \u53ef\u4e0e\u5e73\u9762\u5185\u7684\u70b9 (a,b) (a,b) \u5bf9\u5e94\u3002 \u53ef\u4ee5\u5c06\u865a\u6570 bi bi \u6dfb\u52a0\u5230\u5b9e\u6570 a a \u4ee5\u5f62\u6210\u5f62\u5f0f a + bi a + bi \u7684\u590d\u6570\uff0c\u5176\u4e2d\u5b9e\u6570 a a \u548c b b \u5206\u522b\u88ab\u79f0\u4e3a\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u3002\u4e00\u4e9b\u4f5c\u8005\u4f7f\u7528\u672f\u8bed\u7eaf\u865a\u6570\u6765\u8868\u793a\u6240\u8c13\u7684\u865a\u6570\uff0c\u865a\u6570\u8868\u793a\u5177\u6709\u975e\u96f6\u865a\u90e8\u7684\u4efb\u4f55\u590d\u6570\u3002 \u2014\u2014\u767e\u5ea6\u767e\u79d1 \u6211\u4eec\u7528\u4e00\u5e45\u56fe\u6765\u8868\u793a\u590d\u6570\u4e0e\u590d\u5e73\u9762\u7684\u5173\u7cfb\uff08\u56fe\u6e90\u767e\u5ea6\u767e\u79d1\uff09 \u5176\u4e2d\u6a2a\u5750\u6807\u662f\u5b9e\u6570\u8f74\uff0c\u7eb5\u5750\u6807\u662f\u865a\u6570\u8f74\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e2a\u865a\u6570\u770b\u4e3a\u4e00\u4e2a\u5411\u91cf\u4e86\uff0c\u5bf9\u5e94\u7684\uff0c\u865a\u6570\u53ef\u4ee5\u7528\u666e\u901a\u5750\u6807\u548c\u6781\u5750\u6807 (r,\\theta) (r,\\theta) (\u5176\u4e2d r r \u4e3a\u865a\u6570\u957f\u5ea6\uff0c \\theta \\theta \u4e3a\u865a\u6570\u548c\u5b9e\u6570\u8f74\u6b63\u534a\u8f74\u5939\u89d2) \u6765\u8868\u793a\u3002 \u63a5\u4e0b\u6765\u601d\u8003\u4e24\u4e2a\u590d\u6570\u76f8\u4e58\u662f\u4ec0\u4e48\u610f\u4e49\uff1a (a+bi) \\times (c+di) = (ac-bd) + (ad+bc)i (a+bi) \\times (c+di) = (ac-bd) + (ad+bc)i \u957f\u5ea6\u76f8\u4e58\uff0c\u89d2\u5ea6\u76f8\u52a0\uff1a (r_1, \\theta_1) \\times (r_2, \\theta_2) = (r_1 \\times r_2, \\theta_1+\\theta_2) (r_1, \\theta_1) \\times (r_2, \\theta_2) = (r_1 \\times r_2, \\theta_1+\\theta_2) \u8fd9\u4e48\u4e00\u770b\u7684\u8bdd\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u5982\u679c\u4e24\u4e2a\u957f\u5ea6\u4e3a 1 1 \u7684\u4e0d\u540c\u65b9\u5411\u5411\u91cf\u76f8\u4e58\uff0c\u7ed3\u679c\u5411\u91cf\u662f\u4e0d\u662f\u4e00\u4e2a\u957f\u5ea6\u4f9d\u7136\u4e3a 1 1 \u7684\u65b0\u5411\u91cf\u5462\uff1f \u5355\u4f4d\u590d\u6839\u7684\u5f15\u5165 \u00b6 \u6211\u4eec\u56de\u5230\u4e4b\u524d\u7684\u95ee\u9898\uff1a\u591a\u9879\u5f0f\uff08\u70b9\u503c\u8868\u793a\u6cd5\uff09\u7684\u4e58\u79ef\u3002 \u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a \u521a\u521a\u8bf4\u5230\u4e86 DFT \u662f\u628a\u591a\u9879\u5f0f\u4ece\u7cfb\u6570\u8868\u793a\u8f6c\u5230\u4e86\u70b9\u503c\u8868\u793a\uff08\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff09\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u70b9\u503c\u76f8\u4e58\u4e4b\u540e\uff08\u9009\u53d6\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u4e14\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff09\uff0c\u5982\u679c\u80fd\u591f\u5feb\u901f\u8fd8\u539f\u6210\u7cfb\u6570\u8868\u793a\uff0c\u662f\u4e0d\u662f\u5c31\u5b8c\u7f8e\u89e3\u51b3\u6211\u4eec\u7684\u95ee\u9898\u4e86\u5462\uff1f\u4e0a\u8ff0\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5047\u8bbe\u6211\u4eec DFT \u8fc7\u7a0b\u5bf9\u4e8e\u4e24\u4e2a\u591a\u9879\u5f0f\u9009\u53d6\u7684 x x \u5e8f\u5217\u76f8\u540c\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230 f(x)={(x_0, f(x_0), (x_1, f(x_1)), (x_2, f(x_2), \\cdots, (x_n, f(x_n)))} f(x)={(x_0, f(x_0), (x_1, f(x_1)), (x_2, f(x_2), \\cdots, (x_n, f(x_n)))} g(x)={(x_0, g(x_0), (x_1, g(x_1)), (x_2, g(x_2), \\cdots, (x_n, g(x_n)))} g(x)={(x_0, g(x_0), (x_1, g(x_1)), (x_2, g(x_2), \\cdots, (x_n, g(x_n)))} \u5982\u679c\u6211\u4eec\u8bbe F(x) = f(x) \\times g(x0 F(x) = f(x) \\times g(x0 \u90a3\u4e48\u5f88\u5bb9\u6613\u5f97\u5230 F(x) F(x) \u7684\u70b9\u503c\u8868\u8fbe\u5f0f\uff1a F(x) = {(x_0, f(x_0) \\times g(x_0), (x_1, f(x_1) \\times g(x_1)), (x_2, f(x_2) \\times g(x_2), \\cdots, (x_n, f(x_n) \\times g(x_n)))} F(x) = {(x_0, f(x_0) \\times g(x_0), (x_1, f(x_1) \\times g(x_1)), (x_2, f(x_2) \\times g(x_2), \\cdots, (x_n, f(x_n) \\times g(x_n)))} \u4f46\u662f\u6211\u4eec\u8981\u7684\u662f\u7cfb\u6570\u8868\u8fbe\u5f0f\uff0c\u63a5\u4e0b\u6765\u95ee\u9898\u53d8\u6210\u4e86\u4ece\u70b9\u503c\u56de\u5230\u7cfb\u6570\u3002\u5982\u679c\u6211\u4eec\u5e26\u5165\u5230\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u65b9\u7a0b\u7ec4\u4e2d\u53bb\uff0c\u4f1a\u628a\u590d\u6742\u5ea6\u53d8\u5f97\u975e\u5e38\u9ad8\u3002\u5149\u662f\u8ba1\u7b97 x^i(0 \\leq i \\leq n) x^i(0 \\leq i \\leq n) \u5c31\u662f n n \u9879, \u8fd9\u5c31\u5df2\u7ecf O(n^2) O(n^2) \u4e86\uff0c\u66f4\u522b\u8bf4\u8fd8\u8981\u628a n+1 n+1 \u4e2a\u65b9\u7a0b\u8fdb\u884c\u6d88\u5143\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002 \u8fd9\u91cc\u4f1a\u4e0d\u4f1a\u89c9\u5f97\u6211\u4eec\u4e0d\u53bb\u8ba1\u7b97 x^i x^i \u6bd4\u8f83\u597d\u5462\uff1f 1 1 \u548c -1 -1 \u7684\u5e42\u90fd\u5f88\u597d\u7b97\uff0c\u4f46\u662f\u4e5f\u4ec5\u4ec5\u6709\u4e24\u4e2a\u4e0d\u591f\u554a\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981 n+1 n+1 \u4e2a o(\u2565\ufe4f\u2565)o \u90a3\u600e\u4e48\u529e\u5462\uff01\u60f3\u5230\u6211\u4eec\u521a\u521a\u5b66\u7684\u957f\u5ea6\u4e3a 1 1 \u7684\u865a\u6570\u4e86\u5417\uff1f\u4e0d\u7ba1\u600e\u4e48\u4e58\u957f\u5ea6\u90fd\u662f 1 1 \uff01\u5bf9\u5c31\u662f\u5b83\uff01\u6211\u4eec\u9700\u8981\u7684\u662f \\omega^k=1 \\omega^k=1 \u4e2d\u7684 \\omega \\omega \uff0c\u5f88\u5bb9\u6613\u60f3\u5230 -i -i \u548c 1 1 \u662f\u7b26\u5408\u7684\u3002\u90a3\u5176\u4ed6\u7684\u5462\uff1f \u73b0\u5728\u6211\u4eec\u770b\u4e0a\u56fe\u7684\u5706\u5708\u3002\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u5355\u4f4d\u5706\uff08\u5706\u5fc3\u4e3a\u539f\u70b9\uff0c\u534a\u5f84\u4e3a 1 1 \uff09\uff0c\u6240\u6709\u5728\u5706\u4e0a\u7684\u590d\u6570\u7684\u957f\u5ea6\u5747\u4e3a 1 1 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u7ba1\u505a\u591a\u5c11\u6b21\u65b9 r r \u6c38\u8fdc\u4e3a 1 1 \uff0c\u7ed3\u679c\u4e5f\u4ec5\u4ec5\u89d2\u5ea6\u7684\u53d8\u5316\u800c\u5df2\u3002\u4f46\u662f\uff01\uff01\uff01\u8fdb\u8fc7\u65cb\u8f6c\u603b\u4f1a\u8ba9\u89d2\u5ea6 \\bmod 360 = 0 \\bmod 360 = 0 \u6210\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u7ed3\u679c\u4e3a 1 1 \u3002 \u6211\u4eec\u628a\u7b26\u5408\u4ee5\u4e0a\u6761\u4ef6\u7684\u590d\u6570\u6210\u4e3a\u590d\u6839\uff0c\u7528 \\omega \\omega \u8868\u793a\u3002\u5982\u679c \\omega^k=1 \\omega^k=1 \u90a3\u4e48\u6211\u4eec\u628a \\omega \\omega \u79f0\u4e3a 1 1 \u7684 k k \u6b21\u590d\u6839\uff0c\u8bb0\u4f5c \\omega_k^n \\omega_k^n (\u56e0\u4e3a\u7b26\u5408\u8fd9\u4e2a k k \u6b21\u4e4b\u540e\u7b49\u4e8e 1 1 \u7684\u590d\u6570\u6709\u5f88\u591a\uff0c\u6bd4\u5982 i i \u7684 4k 4k \u6b21\u5e42\u6c38\u8fdc\u4e3a 1 1 \uff0c\u6240\u4ee5\uff0c\u8fd9\u4e2a n n \u662f\u4e00\u4e2a\u7f16\u53f7\uff0c\u8868\u793a\u8fd9\u662f\u89d2\u5ea6\u4ece\u5c0f\u5230\u5927\u7684\u7b2c\u51e0\u4e2a\uff08\u4ece x x \u7684\u6b63\u534a\u8f74\u5f00\u59cb\u9006\u65f6\u9488\uff09) \u662f\u4e0d\u662f\u6709\u70b9\u96fe\u554a (\uffe3\u25bd\uffe3)\uff0f\u6ca1\u4e8b\u6ca1\u4e8b\u63a5\u4e0b\u6765\u6211\u4eec\u4e3e\u4e2a\u6817\u5b50\uff1a \u90a3\u4e48\u5f88\u5bb9\u6613\u53d1\u73b0\u5f53 K = 4 K = 4 \u7684\u65f6\u5019\uff0c\u76f8\u5f53\u4e8e\u628a\u5355\u4f4d\u5706\u7b49\u5206 K= 4 K= 4 \u4efd\u3002\u7136\u540e\u6bcf\u4e00\u4efd\u6309\u7167\u6781\u89d2\u7f16\u53f7\u3002\u90a3\u4e48\u662f\u4e0d\u662f\uff08\u5728 K = 4 K = 4 \u7684\u65f6\u5019\uff09\u6211\u4eec\u53ea\u8981\u77e5\u9053 \\omega_4^1 \\omega_4^1 \uff08\u56e0\u4e3a\u4ed6\u7684\u89d2\u5ea6\u662f\u76f8\u5f53\u4e8e\u5355\u4f4d\u89d2\u5ea6\uff09, \u5c31\u80fd\u77e5\u9053 \\omega_4^0, \\omega_4^1, \\omega_4^2, \\omega_4^3 \\omega_4^0, \\omega_4^1, \\omega_4^2, \\omega_4^3 \u4e86\u5462\uff1f\u5f53\u7136\u662f\u8fd9\u6837\u7684\u3002\u3002\u3002 \\omega_4^0 \\omega_4^0 \u6052\u7b49\u4e8e 1 1 \uff0c \\omega_4^2 \\omega_4^2 \u7684\u89d2\u5ea6\u662f \\omega_4^0 \\omega_4^0 \u7684\u4e24\u500d\uff0c\u6240\u4ee5 \\omega_4^2 = (\\omega_4^1)^2 = i^2=-1 \\omega_4^2 = (\\omega_4^1)^2 = i^2=-1 , \u4f9d\u6b21\u4ee5\u6b64\u7c7b\u63a8\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u8981\u77e5\u9053 \\omega_k^1 \\omega_k^1 \uff0c\u5c31\u80fd\u6c42\u51fa \\omega_k^n \\omega_k^n \u3002\u6240\u4ee5\u6211\u4eec\u628a \\omega_k^1 \\omega_k^1 \u79f0\u4e3a\u5355\u4f4d\u590d\u6839\uff0c\u7b80\u5199\u4e3a \\omega_k \\omega_k FFT \u7684\u6d41\u7a0b \u00b6 qwq \u7ec8\u4e8e\u5199\u5230\u6838\u5fc3\u90e8\u5206\u4e86\uff0c\u4e5f\u5c31\u662f\uff0cFFT \u5230\u5e95\u600e\u4e48\u6765\u5199\u5462\uff1f FFT \u6d41\u7a0b\u7b2c\u4e00\u6b65\u4e4b DFT\uff08\u5171\u4e24\u6b65\uff09 \u00b6 FFT \u4e4b\u6240\u4ee5\u5feb\uff0c\u662f\u56e0\u4e3a\u4ed6\u91c7\u7528\u4e86\u5206\u6cbb\u7684\u601d\u60f3\u3002 \u5c31 DFT\uff08\u5c06\u7cfb\u6570\u8868\u8fbe\u8f6c\u6362\u6210\u70b9\u503c\u8868\u8fbe\uff09\u6765\u8bf4\uff0c\u5b83\u5206\u6cbb\u7684\u6765\u6c42\u5f53\u5f53\u524d\u7684 x=\\omega_n^k x=\\omega_n^k \u7684\u65f6\u5019\u6574\u4e2a\u5f0f\u5b50\u7684\u503c\u3002\u4ed6\u7684\u5206\u6cbb\u601d\u60f3\u4f53\u73b0\u5728\u5c06\u591a\u9879\u5f0f\u5206\u4e3a\u5947\u6b21\u9879\u548c\u5076\u6b21\u9879\u5904\u7406\u3002 \u5bf9\u4e8e\u4e00\u5171 8 8 \u9879\u7684\u591a\u9879\u5f0f f(x0) = y_1 = a_0 + a_1x + a_2x^2+a_3x^3+a_4x^4+a_5x^5+a_6x^6+a_7x^7 f(x0) = y_1 = a_0 + a_1x + a_2x^2+a_3x^3+a_4x^4+a_5x^5+a_6x^6+a_7x^7 \u6309\u7167\u6b21\u6570\u7684\u5947\u5076\u6765\u5206\u6210\u4e24\u7ec4, \u7136\u540e\u53f3\u8fb9\u63d0\u51fa\u6765\u4e00\u4e2a x x f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + (a_1x+a_3x^3+a_5x^5+a_7x^7) f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + (a_1x+a_3x^3+a_5x^5+a_7x^7) f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + x(a_1+a_3x^2+a_5x^4+a_7x^6) f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + x(a_1+a_3x^2+a_5x^4+a_7x^6) \u5206\u522b\u7528\u5947\u5076\u6b21\u6b21\u9879\u6570\u5efa\u7acb\u65b0\u7684\u65b9\u7a0b G(x) = a_0+a_2x+a_4x^2+a_6x^3 G(x) = a_0+a_2x+a_4x^2+a_6x^3 H(x)=a_1+a_3x+a_5x^2+a_7x^3 H(x)=a_1+a_3x+a_5x^2+a_7x^3 \u90a3\u4e48\u539f\u6765\u7684 f(x) f(x) \u7531\u65b0\u51fd\u6570\u6765\u8868\u793a (\u662f\u4e0d\u662f\u6211\u4eec\u4e8c\u5206\u4e86\u4e00\u4e2a\u591a\u9879\u5f0f\u5462~) F(x)=G(x^2) + x \\times H(x^2) F(x)=G(x^2) + x \\times H(x^2) \u7ed9\u51fd\u6570\u5e26\u4e2a\u5e3d\u5b50\u8868\u793a\u6b64\u65f6\u5728\u8fdb\u884c\u7684\u662f DFT \u8fc7\u7a0b\uff0c\u628a x \u4ee3\u8fdb\u53bb\uff0c\u5373\u6709 DFT(f(\\omega_n^k))=DFT(G((\\omega_n^k)^2)) + \\omega_n^k \\times DFT(H((\\omega_n^k)^2)) DFT(f(\\omega_n^k))=DFT(G((\\omega_n^k)^2)) + \\omega_n^k \\times DFT(H((\\omega_n^k)^2)) \uff01\uff01\uff01\u524d\u65b9\u9ad8\u80fd\uff1a \u8fd9\u4e2a\u51fd\u6570\u80fd\u5904\u7406\u7684\u591a\u9879\u5f0f\u957f\u5ea6\u53ea\u80fd\u662f 2^m(m \\in N^ \\times ) 2^m(m \\in N^ \\times ) , \u5426\u5219\u5728\u5206\u6cbb\u7684\u65f6\u5019\u5de6\u53f3\u4e0d\u4e00\u6837\u957f\uff0c\u53f3\u8fb9\u53d6\u4e0d\u5230\u7cfb\u6570\u4e86\uff0c\u7a0b\u5e8f\u6ca1\u6cd5\u8fdb\u884c\u3002\u6240\u4ee5\u8981\u5728\u7b2c\u4e00\u6b21 DFT \u4e4b\u524d\u5c31\u628a\u5e8f\u5217\u5411\u4e0a\u8865\u6210\u957f\u5ea6\u4e3a 2^m(m \\in N^ \\times ) 2^m(m \\in N^ \\times ) \uff08\u9ad8\u6b21\u7cfb\u6570\u8865 0 0 \uff09\u3001\u6700\u9ad8\u9879\u6b21\u6570\u4e3a n-1 n-1 \u7684\u591a\u9879\u5f0f\u3002\u4e00\u5b9a\u8981\u9884\u5904\u7406\u54e6 qaq \u7136\u540e\u6211\u5728\u4ee3\u5165\u503c\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8981\u4ee3\u5165 n n \u4e2a\u4e0d\u540c\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ee3\u5165 \\omega_n^0,\\omega_n^1,\\omega_n^2,\\cdots, \\omega_n^{n-1} (n=2^m(m \\in N^ \\times )) \\omega_n^0,\\omega_n^1,\\omega_n^2,\\cdots, \\omega_n^{n-1} (n=2^m(m \\in N^ \\times )) \u4e00\u5171 2^m 2^m \u4e2a\u4e0d\u540c\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* * \u505a FFT *len \u5fc5\u987b\u662f 2^k \u5f62\u5f0f *on == 1 \u65f6\u662f DFT\uff0con == -1 \u65f6\u662f IDFT */ void fft ( Complex y [], int len , int on ) { change ( y , len ); for ( int h = 2 ; h <= len ; h <<= 1 ) { Complex wn ( cos ( 2 * PI / h ), sin ( on * 2 * PI / h )); for ( int j = 0 ; j < len ; j += h ) { Complex w ( 1 , 0 ); for ( int k = j ; k < j + h / 2 ; k ++ ) { Complex u = y [ k ]; Complex t = w * y [ k + h / 2 ]; y [ k ] = u + t ; y [ k + h / 2 ] = u - t ; w = w * wn ; } } } } \u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u9700\u8981\u4ece \u201c\u5206\u6cbb\u201d \u7684\u89d2\u5ea6\u7ee7\u7eed\u4f18\u5316\u3002\u6211\u4eec\u6bcf\u4e00\u6b21\u90fd\u4f1a\u628a\u6574\u4e2a\u591a\u9879\u5f0f\u7684\u5947\u6570\u6b21\u9879\u548c\u5076\u6570\u6b21\u9879\u7cfb\u6570\u5206\u5f00\uff0c\u4e00\u53ea\u5206\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u7cfb\u6570\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5148 \u201c\u6a21\u4eff\u9012\u5f52\u201d \u628a\u8fd9\u4e9b\u7cfb\u6570\u5728\u539f\u6570\u7ec4\u4e2d \u201c\u62c6\u5206\u201d\uff0c\u7136\u540e\u518d \u201c\u500d\u589e\u201d \u5730\u53bb\u5408\u5e76\u8fd9\u4e9b\u7b97\u51fa\u6765\u7684\u503c\u3002\u7136\u800c\u6211\u4eec\u53c8\u8981\u5982\u4f55\u53bb\u62c6\u5206\u8fd9\u4e9b\u6570\u5462\uff1f \u8bbe\u521d\u59cb\u5e8f\u5217\u4e3a \\{x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7\\} \\{x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7\\} \u4e00\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0, x_2, x_4, x_6\\},\\{x_1, x_3,x_5, x_7 \\} \\{x_0, x_2, x_4, x_6\\},\\{x_1, x_3,x_5, x_7 \\} \u4e24\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0,x_4\\} \\{x_2, x_6\\},\\{x_1, x_3\\},\\{x_5, x_7 \\} \\{x_0,x_4\\} \\{x_2, x_6\\},\\{x_1, x_3\\},\\{x_5, x_7 \\} \u4e09\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0\\}\\{x_4\\}\\{x_2\\}\\{x_6\\}\\{x_1\\}\\{x_3\\}\\{x_5\\}\\{x_7 \\} \\{x_0\\}\\{x_4\\}\\{x_2\\}\\{x_6\\}\\{x_1\\}\\{x_3\\}\\{x_5\\}\\{x_7 \\} \u6709\u5565\u89c4\u5f8b\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u539f\u6765\u7684\u90a3\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u6570\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u7136\u540e\u628a\u4e8c\u8fdb\u5236\u7ffb\u8f6c\u5bf9\u79f0\u4e00\u4e0b\uff0c\u5c31\u662f\u6700\u7ec8\u90a3\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u6807\u3002\u6bd4\u5982 x_1 x_1 \u662f 001\uff0c\u7ffb\u8f6c\u662f 100\uff0c\u4e5f\u5c31\u662f 4\uff0c\u800c\u4e14\u6700\u540e\u90a3\u4e2a\u4f4d\u7f6e\u786e\u5b9e\u662f 4\uff0c\u662f\u4e0d\u662f\u5f88\u795e\u5947\u554a~~~ \u8fd9\u91cc\u9644\u4e0a\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* * \u8fdb\u884c FFT \u548c IFFT \u524d\u7684\u53cd\u7f6e\u53d8\u6362 * \u4f4d\u7f6e i \u548c i \u7684\u4e8c\u8fdb\u5236\u53cd\u8f6c\u540e\u7684\u4f4d\u7f6e\u4e92\u6362 *len \u5fc5\u987b\u4e3a 2 \u7684\u5e42 */ void change ( Complex y [], int len ) { int i , j , k ; for ( int i = 1 , j = len / 2 ; i < len - 1 ; i ++ ) { if ( i < j ) swap ( y [ i ], y [ j ]); // \u4ea4\u6362\u4e92\u4e3a\u5c0f\u6807\u53cd\u8f6c\u7684\u5143\u7d20\uff0ci<j \u4fdd\u8bc1\u4ea4\u6362\u4e00\u6b21 // i \u505a\u6b63\u5e38\u7684 + 1\uff0cj \u505a\u53cd\u8f6c\u7c7b\u578b\u7684 + 1\uff0c\u59cb\u7ec8\u4fdd\u6301 i \u548c j \u662f\u53cd\u8f6c\u7684 k = len / 2 ; while ( j >= k ) { j = j - k ; k = k / 2 ; } if ( j < k ) j += k ; } } FFT \u6d41\u7a0b\u7b2c\u4e8c\u6b65\u4e4b IDFT\uff08\u5171\u4e24\u6b65\uff09 \u00b6 \u8fd9\u4e00\u6b65 IDFT\uff08\u5085\u91cc\u53f6\u53cd\u53d8\u6362\uff09\u7684\u4f5c\u7528\u6211\u8bf4\u7684\u5df2\u7ecf\u5f88\u6e05\u695a\u5566\uff0c\u5c31\u662f\u628a\u4e0a\u4e00\u6b65\u83b7\u5f97\u7684\u76ee\u6807\u591a\u9879\u5f0f\u7684\u70b9\u503c\u5f62\u5f0f\u8f6c\u6362\u6210\u7cfb\u6570\u5f62\u5f0f\u3002\u4f46\u662f\u4f3c\u4e4e\u5e76\u4e0d\u7b80\u5355\u5462\uff08\u96fe\uff09\u3002\u3002\u3002\u4f46\u662f\uff0c\u6211\u4eec\u628a\u5355\u4f4d\u590d\u6839\u4ee3\u5165\u591a\u9879\u5f0f\u4e4b\u540e\uff0c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff08\u77e9\u9635\u8868\u793a\u65b9\u7a0b\u7ec4\uff09 \\begin{bmatrix}y[0] \\\\ y[1] \\\\ y[2] \\\\ y[3] \\\\ \\dots \\\\ y[n-1] \\end{bmatrix} \\begin{matrix}= \\\\ = \\\\ = \\\\ = \\\\ \\\\ = \\end{matrix} \\begin{bmatrix}1 & 1 & 1 & 1 & \\dots & 1 \\\\ 1 & \\omega_n^1 & \\omega_n^2 & \\omega_n^3 & \\dots & \\omega_n^{n-1} \\\\ 1 & \\omega_n^2 & \\omega_n^4 & \\omega_n^6 & \\dots & \\omega_n^{2(n-1)} \\\\ 1 & \\omega_n^3 & \\omega_n^6 & \\omega_n^9 & \\dots & \\omega_n^{3(n-1)} \\\\ \\dots & \\dots & \\dots & \\dots & \\dots & \\dots \\\\ 1 & \\omega_n^{n-1} & \\omega_n^{2(n-1)} & \\omega_n^{3(n-1)} & \\dots & \\omega_n^{(n-1)^2} \\end{bmatrix} \\begin{bmatrix} a[0] \\\\ a[1] \\\\ a[2] \\\\ a[3] \\\\ \\dots \\\\ a[n-1] \\end{bmatrix} \\begin{bmatrix}y[0] \\\\ y[1] \\\\ y[2] \\\\ y[3] \\\\ \\dots \\\\ y[n-1] \\end{bmatrix} \\begin{matrix}= \\\\ = \\\\ = \\\\ = \\\\ \\\\ = \\end{matrix} \\begin{bmatrix}1 & 1 & 1 & 1 & \\dots & 1 \\\\ 1 & \\omega_n^1 & \\omega_n^2 & \\omega_n^3 & \\dots & \\omega_n^{n-1} \\\\ 1 & \\omega_n^2 & \\omega_n^4 & \\omega_n^6 & \\dots & \\omega_n^{2(n-1)} \\\\ 1 & \\omega_n^3 & \\omega_n^6 & \\omega_n^9 & \\dots & \\omega_n^{3(n-1)} \\\\ \\dots & \\dots & \\dots & \\dots & \\dots & \\dots \\\\ 1 & \\omega_n^{n-1} & \\omega_n^{2(n-1)} & \\omega_n^{3(n-1)} & \\dots & \\omega_n^{(n-1)^2} \\end{bmatrix} \\begin{bmatrix} a[0] \\\\ a[1] \\\\ a[2] \\\\ a[3] \\\\ \\dots \\\\ a[n-1] \\end{bmatrix} \u800c\u4e14\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u6700\u5de6\u8fb9\u7684\u7ed3\u679c\u4e86\uff0c\u4e2d\u95f4\u7684 x x \u503c\u5728\u76ee\u6807\u591a\u9879\u5f0f\u7684\u70b9\u503c\u8868\u793a\u4e2d\u4e5f\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6240\u4ee5\uff0c\u6839\u636e\u77e9\u9635\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u6211\u4eec\u53ea\u8981\u5728\u5f0f\u5b50\u4e24\u8fb9\u5de6\u4e58\u4e2d\u95f4\u90a3\u4e2a\u5927\u77e9\u9635\u7684\u9006\u77e9\u9635\u5c31\u884c\u4e86\u3002\u7531\u4e8e\u8fd9\u4e2a\u77e9\u9635\u7684\u5143\u7d20\u975e\u5e38\u7279\u6b8a\uff0c\u4ed6\u7684\u9006\u77e9\u9635\u4e5f\u6709\u7279\u6b8a\u7684\u6027\u8d28\uff0c\u5c31\u662f\u6bcf\u4e00\u9879\u53d6\u5012\u6570\uff0c\u518d\u9664\u4ee5 n n \uff0c\u5c31\u80fd\u5f97\u5230\u4ed6\u7684\u9006\u77e9\u9635\uff08\u8fd9\u8fb9\u6839\u636e\u7684\u662f\u5355\u4f4d\u539f\u6839\u7684\u4e24\u4e2a\u7279\u6b8a\u6027\u8d28\u63a8\u51fa\u6765\u7684\uff0c\u5177\u4f53\u6bd4\u8f83\u9ebb\u70e6\u3002\u5982\u679c\u60f3\u77e5\u9053\u7684\u8bdd\u79c1\u6211\u5427\u3002\uff09 \u5982\u4f55\u6539\u53d8\u6211\u4eec\u7684\u64cd\u4f5c\u624d\u80fd\u4f7f\u8ba1\u7b97\u7684\u7ed3\u679c\u6587\u539f\u6765\u7684\u5012\u6570\u5462\uff1f\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u91cd\u65b0\u5199\u4e00\u904d\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u66f4\u7b80\u5355\u7684\u5b9e\u73b0\u3002\u8fd9\u5c31\u8981\u770b\u6211\u4eec\u6c42 \u201c\u5355\u4f4d\u590d\u6839\u7684\u8fc7\u7a0b\u4e86\u201d\uff1a\u6839\u636e \u201c\u6b27\u62c9\u51fd\u6570\u201d e^{i\\pi}=-1 e^{i\\pi}=-1 \uff0c\u6211\u4e48\u53ef\u4ee5\u5f97\u5230 e^{2\\pi i}=1 e^{2\\pi i}=1 \u3002\u5982\u679c\u6211\u8981\u627e\u5230\u4e00\u4e2a\u6570\uff0c\u5b83\u7684 k k \u6b21\u65b9 = 1 = 1 \uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570 \\omega[k]=e^{2\\pi \\frac{i}{k}} \\omega[k]=e^{2\\pi \\frac{i}{k}} \uff08\u56e0\u4e3a (e^{2\\pi \\frac{i}{k}})^k=e^{2\\pi i}=1 (e^{2\\pi \\frac{i}{k}})^k=e^{2\\pi i}=1 \uff09\u3002\u800c\u5982\u679c\u6211\u8981\u4f7f\u8fd9\u4e2a\u6570\u503c\u53d8\u6210 \\frac{1}{\\omega[k]} \\frac{1}{\\omega[k]} \u4e5f\u5c31\u662f (\\omega[k])^-1 (\\omega[k])^-1 \uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7740\u628a \u03c0 \u03c0 \u53d6\u6210 - 3.14159\u2026\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u8ba1\u7b97\u7ed3\u679c\u5c31\u4f1a\u53d8\u6210\u539f\u6765\u7684\u5012\u6570\uff0c\u800c\u5176\u5b83\u7684\u64cd\u4f5c\u8fc7\u7a0b\u4e0e DFT \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff08\u8fd9\u771f\u662f\u6781\u597d\u7684\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5411\u91cc\u9762\u63ba\u4e00\u4e2a\u53c2\u6570 1 1 \u6216\u8005\u662f -1 -1 \uff0c\u7136\u540e\u628a\u5b83\u4e58\u5230 \u03c0 \u03c0 \u7684\u8eab\u4e0a\u3002\u4f20\u5165 1 1 \u5c31\u662f DFT\uff0c\u4f20\u5165 -1 -1 \u5c31\u662f IDFT\uff0c\u5341\u5206\u7684\u667a\u80fd\u3002 \u6240\u4ee5\u6211\u4eec fft \u51fd\u6570\u53ef\u4ee5\u96c6 DFT \u548c IDFT \u4e8e\u4e00\u8eab\u3002\u89c1\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* * \u505a FFT *len \u5fc5\u987b\u662f 2^k \u5f62\u5f0f *on == 1 \u65f6\u662f DFT\uff0con == -1 \u65f6\u662f IDFT */ void fft ( Complex y [], int len , int on ) { change ( y , len ); for ( int h = 2 ; h <= len ; h <<= 1 ) { // \u6a21\u62df\u5408\u5e76\u8fc7\u7a0b Complex wn ( cos ( 2 * PI / h ), sin ( on * 2 * PI / h )); // \u8ba1\u7b97\u5f53\u524d\u5355\u4f4d\u590d\u6839 for ( int j = 0 ; j < len ; j += h ) { Complex w ( 1 , 0 ); // \u8ba1\u7b97\u5f53\u524d\u5355\u4f4d\u590d\u6839 for ( int k = j ; k < j + h / 2 ; k ++ ) { Complex u = y [ k ]; Complex t = w * y [ k + h / 2 ]; y [ k ] = u + t ; // \u8fd9\u5c31\u662f\u5427\u4e24\u90e8\u5206\u5206\u6cbb\u7684\u7ed3\u679c\u52a0\u8d77\u6765 y [ k + h / 2 ] = u - t ; // \u540e\u534a\u4e2a \u201cstep\u201d \u4e2d\u7684\u03c9\u4e00\u5b9a\u548c \u201c\u524d\u534a\u4e2a\u201d \u4e2d\u7684\u6210\u76f8\u53cd\u6570 //\u201c\u7ea2\u5708\u201d\u4e0a\u7684\u70b9\u8f6c\u4e00\u6574\u5708\u201c\u8f6c\u56de\u6765\u201d\uff0c\u8f6c\u534a\u5708\u6b63\u597d\u8f6c\u6210\u76f8\u53cd\u6570 // \u4e00\u4e2a\u6570\u76f8\u53cd\u6570\u7684\u5e73\u65b9\u4e0e\u8fd9\u4e2a\u6570\u81ea\u8eab\u7684\u5e73\u65b9\u76f8\u7b49 w = w * wn ; } } } if ( on == - 1 ) { for ( int i = 0 ; i < len ; i ++ ) { y [ i ]. x /= len ; } } } \u597d\u4e86\u73b0\u5728\u9644\u4e0a\u5168\u90e8\u4ee3\u7801\uff08 HDU 1402 \uff09\uff0c\u5e8f\u8a00\u8bf4\u8fc7\u4ee3\u7801\u6765\u81ea kuangbin \u7684\u6a21\u677f ~ ~~ \u6765\u5927\u5bb6\u548c\u6211\u4e00\u8d77 Orz \u4e00\u53d1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const double PI = acos ( - 1.0 ); struct Complex { double x , y ; Complex ( double _x = 0.0 , double _y = 0.0 ) { x = _x ; y = _y ; } Complex operator - ( const Complex & b ) const { return Complex ( x - b . x , y - b . y ); } Complex operator + ( const Complex & b ) const { return Complex ( x + b . x , y + b . y ); } Complex operator * ( const Complex & b ) const { return Complex ( x * b . x - y * b . y , x * b . y + y * b . x ); } }; /* * \u8fdb\u884c FFT \u548c IFFT \u524d\u7684\u53cd\u7f6e\u53d8\u6362 * \u4f4d\u7f6e i \u548c i \u7684\u4e8c\u8fdb\u5236\u53cd\u8f6c\u540e\u7684\u4f4d\u7f6e\u4e92\u6362 *len \u5fc5\u987b\u4e3a 2 \u7684\u5e42 */ void change ( Complex y [], int len ) { int i , j , k ; for ( int i = 1 , j = len / 2 ; i < len - 1 ; i ++ ) { if ( i < j ) swap ( y [ i ], y [ j ]); // \u4ea4\u6362\u4e92\u4e3a\u5c0f\u6807\u53cd\u8f6c\u7684\u5143\u7d20\uff0ci<j \u4fdd\u8bc1\u4ea4\u6362\u4e00\u6b21 // i \u505a\u6b63\u5e38\u7684 + 1\uff0cj \u505a\u53cd\u8f6c\u7c7b\u578b\u7684 + 1\uff0c\u59cb\u7ec8\u4fdd\u6301 i \u548c j \u662f\u53cd\u8f6c\u7684 k = len / 2 ; while ( j >= k ) { j = j - k ; k = k / 2 ; } if ( j < k ) j += k ; } } /* * \u505a FFT *len \u5fc5\u987b\u662f 2^k \u5f62\u5f0f *on == 1 \u65f6\u662f DFT\uff0con == -1 \u65f6\u662f IDFT */ void fft ( Complex y [], int len , int on ) { change ( y , len ); for ( int h = 2 ; h <= len ; h <<= 1 ) { Complex wn ( cos ( 2 * PI / h ), sin ( on * 2 * PI / h )); for ( int j = 0 ; j < len ; j += h ) { Complex w ( 1 , 0 ); for ( int k = j ; k < j + h / 2 ; k ++ ) { Complex u = y [ k ]; Complex t = w * y [ k + h / 2 ]; y [ k ] = u + t ; y [ k + h / 2 ] = u - t ; w = w * wn ; } } } if ( on == - 1 ) { for ( int i = 0 ; i < len ; i ++ ) { y [ i ]. x /= len ; } } } const int MAXN = 200020 ; Complex x1 [ MAXN ], x2 [ MAXN ]; char str1 [ MAXN / 2 ], str2 [ MAXN / 2 ]; int sum [ MAXN ]; int main () { while ( scanf ( \"%s%s\" , str1 , str2 ) == 2 ) { int len1 = strlen ( str1 ); int len2 = strlen ( str2 ); int len = 1 ; while ( len < len1 * 2 || len < len2 * 2 ) len <<= 1 ; for ( int i = 0 ; i < len1 ; i ++ ) x1 [ i ] = Complex ( str1 [ len1 - 1 - i ] - '0' , 0 ); for ( int i = len1 ; i < len ; i ++ ) x1 [ i ] = Complex ( 0 , 0 ); for ( int i = 0 ; i < len2 ; i ++ ) x2 [ i ] = Complex ( str2 [ len2 - 1 - i ] - '0' , 0 ); for ( int i = len2 ; i < len ; i ++ ) x2 [ i ] = Complex ( 0 , 0 ); fft ( x1 , len , 1 ); fft ( x2 , len , 1 ); for ( int i = 0 ; i < len ; i ++ ) x1 [ i ] = x1 [ i ] * x2 [ i ]; fft ( x1 , len , - 1 ); for ( int i = 0 ; i < len ; i ++ ) sum [ i ] = int ( x1 [ i ]. x + 0.5 ); for ( int i = 0 ; i < len ; i ++ ) { sum [ i + 1 ] += sum [ i ] / 10 ; sum [ i ] %= 10 ; } len = len1 + len2 - 1 ; while ( sum [ len ] == 0 && len > 0 ) len -- ; for ( int i = len ; i >= 0 ; i -- ) printf ( \"%c\" , sum [ i ] + '0' ); printf ( \" \\n \" ); } return 0 ; } \u81f3\u6b64\uff0cFFT \u7b97\u662f\u544a\u4e00\u6bb5\u843d\u4e86\u3002 \u4f46\u662f\uff0c\u7b97\u7ade\u9009\u624b\u53ef\u80fd\u50cf\u6211\u4e00\u6837\u6709\u4e0b\u9762\u7684\u7591\u95ee\uff1a \u5047\u5982\u6211\u8981\u8ba1\u7b97\u7684\u591a\u9879\u5f0f\u7cfb\u6570\u662f\u522b\u7684\u5177\u6709\u7279\u6b8a\u610f\u4e49\u7684\u6574\u6570\uff0c\u90a3\u4e48\u6211\u901a\u7bc7\u90fd\u5728\u7528\u6d6e\u70b9\u6570\u8fd0\u7b97\uff0c\u9996\u5148\u4ece\u65f6\u95f4\u4e0a\u5c31\u4f1a\u6bd4\u6574\u6570\u8fd0\u7b97\u6162\uff0c\u53e6\u5916\u6211\u6700\u591a\u53ea\u80fd\u7528 long double \u4e0d\u80fd\u7528 long long \u7c7b\u578b\uff0c\u6211\u80fd\u4e0d\u80fd\u5e94\u7528\u6570\u8bba\u7684\u53d8\u5316\u4ece\u800c\u907f\u5f00\u6d6e\u70b9\u8fd0\u7b97\uff0c\u8fbe\u5230 \u201c\u66f4\u9ad8\u66f4\u5feb\u66f4\u5f3a (*\uff65\u03c9<) \u201d \u5462\uff1f \u7b97\u7ade\u9009\u624b\u770b\u8fc7\u6765~ NTT\uff08\u6570\u8bba\u4f18\u5316\u7684\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff09 \u00b6 \u6233\uff5e NTT","title":"\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"math/fft/#dft-idft-fft","text":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08Discrete Fourier Transform\uff0c\u7f29\u5199\u4e3a DFT\uff09\uff0c\u662f\u5085\u91cc\u53f6\u53d8\u6362\u5728\u65f6\u57df\u548c\u9891\u57df\u4e0a\u90fd\u5448\u79bb\u6563\u7684\u5f62\u5f0f\uff0c\u5c06\u4fe1\u53f7\u7684\u65f6\u57df\u91c7\u6837\u53d8\u6362\u4e3a\u5176 DTFT \u7684\u9891\u57df\u91c7\u6837\u3002 FFT \u662f\u4e00\u79cd DFT \u7684\u9ad8\u6548\u7b97\u6cd5\uff0c\u79f0\u4e3a\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\uff08fast Fourier transform\uff09\u3002 \u2014\u2014\u767e\u5ea6\u767e\u79d1 \u5728\u767e\u5ea6\u767e\u79d1\u4e0a\u80fd\u627e\u5230 DFT \u548c FFT \u8fd9\u4e24\u4e2a\u5b9a\u4e49\u3002\u6b63\u5982\u5b9a\u4e49\uff0cFFT \u548c DFT \u5b9e\u9645\u4e0a\u6309\u7167\u7ed3\u679c\u6765\u770b\u7684\u8bdd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f FFT \u6bd4\u8f83\u5feb\u7684\u8ba1\u7b97 DFT \u548c\uff29DFT\uff08\u79bb\u6563\u53cd\u5085\u91cc\u53f6\u53d8\u6362\uff09\u3002 \u5feb\u901f\u6570\u8bba\u53d8\u6362 (NTT) \u662f\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\u5728\u6570\u8bba\u57fa\u7840\u4e0a\u7684\u5b9e\u73b0\u3002 \u662f\u4e0d\u662f\u6709\u70b9\u8ff7 QAQ\uff1f\u65e2\u7136\u662f\u5b98\u65b9\u5b9a\u4e49\u90a3\u80af\u5b9a\u4e0d\u80fd\u8ba9\u4f60\u770b\u61c2\u624d\u5bf9\u561b\uff5e\u4e0b\u9762\u6211\u4eec\u4e00\u4e00\u89e3\u91ca\uff5e","title":"DFT IDFT FFT \u5b98\u65b9\u5b9a\u4e49\uff1f"},{"location":"math/fft/#fft","text":"\u6211\u4eec\u5728\u8fd9\u91cc\u5f15\u5165\u4e00\u4e2a\u4f8b\u5b50\uff1a\u6c42\u591a\u9879\u5f0f\u4e58\u79ef\u7684\u6734\u7d20\u7b97\u6cd5\u3002 \u5927\u5bb6\u5e73\u65f6\u6c42 f(x)=a_1x^2+b_1x+c_1 f(x)=a_1x^2+b_1x+c_1 \u4e0e g(x) = a_2x^2+b_2x+c_2 g(x) = a_2x^2+b_2x+c_2 \u7684\u4e58\u79ef\u65f6\u5019\uff0c\u662f\u600e\u4e48\u8fdb\u884c\u7684\u5462\uff1f \u6211\u4eec\u4ee4 K(x) = f(x) \\times g(x) = a_1x^2 \\times a_2x^2+a_1x^2 \\times b_2x+a_1x^2 \\times c_2+b_1x \\times b_2x^2+b_1x \\times b_2x+b_1x \\times c_2+c_1 \\times a_2x^2+c_1 \\times b_2x+c_1 \\times c_2 K(x) = f(x) \\times g(x) = a_1x^2 \\times a_2x^2+a_1x^2 \\times b_2x+a_1x^2 \\times c_2+b_1x \\times b_2x^2+b_1x \\times b_2x+b_1x \\times c_2+c_1 \\times a_2x^2+c_1 \\times b_2x+c_1 \\times c_2 \u90a3\u4e48\u5f88\u663e\u7136\u6211\u4eec\u8fdb\u884c\u4e86 9 \u6b21\u8fd0\u7b97\uff0c\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \uff08\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u4e0d\u518d\u5c55\u5f00\uff09 \u4f46\u662f\u5982\u679c\u6570\u5b57\u8db3\u591f\u5927\u5462\uff1f\u6bd4\u5982 100000\uff1f\u90a3\u6734\u7d20\u7b97\u6cd5\u53ef\u592a\u6162\u5566 (\uff1b\u2032\u2312`),","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 FFT\uff1f"},{"location":"math/fft/#fft_1","text":"FFT\uff0c\u5373\u4e3a\u5feb\u901f\u5085\u6c0f\u53d8\u6362\uff0c\u662f\u79bb\u6563\u5085\u6c0f\u53d8\u6362\u7684\u5feb\u901f\u7b97\u6cd5\uff0c\u5b83\u662f\u6839\u636e\u79bb\u6563\u5085\u6c0f\u53d8\u6362\u7684\u5947\u3001\u5076\u3001\u865a\u3001\u5b9e\u7b49\u7279\u6027\uff0c\u5bf9\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\u7684\u7b97\u6cd5\u8fdb\u884c\u6539\u8fdb\u83b7\u5f97\u7684\u3002\u5b83\u5bf9\u5085\u6c0f\u53d8\u6362\u7684\u7406\u8bba\u5e76\u6ca1\u6709\u65b0\u7684\u53d1\u73b0\uff0c\u4f46\u662f\u5bf9\u4e8e\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u6216\u8005\u8bf4\u6570\u5b57\u7cfb\u7edf\u4e2d\u5e94\u7528\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\uff0c\u53ef\u4ee5\u8bf4\u662f\u8fdb\u4e86\u4e00\u5927\u6b65\u3002\u2014\u2014360 \u767e\u79d1 \u5982\u679c\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u7528\u6734\u7d20\u7b97\u6cd5\u592a\u6162\u5566\uff01\u6240\u4ee5\u6211\u4eec\u8981\u7528 FFT \u8fdb\u884c\u4f18\u5316\uff0c\u590d\u6742\u5ea6\u4f1a\u964d\u4e3a O(nlogn) O(nlogn)","title":"\u4ec0\u4e48\u662f FFT"},{"location":"math/fft/#_1","text":"\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u600e\u6837\u6765\u8868\u793a\u5462\uff1f \u7cfb\u6570\u8868\u793a\u6cd5\u5c31\u662f\u7528\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u5404\u4e2a\u9879\u7cfb\u6570\u6765\u8868\u8fbe\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u6bd4\u5982\uff1a f(x) = a_1x^2+b_1x+c_1 \\Leftrightarrow f(x) = \\{a_1, b_1, c_1\\} f(x) = a_1x^2+b_1x+c_1 \\Leftrightarrow f(x) = \\{a_1, b_1, c_1\\} \u70b9\u503c\u8868\u793a\u6cd5\u662f\u628a\u8fd9\u4e2a\u591a\u9879\u5f0f\u770b\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u4ece\u4e0a\u9762\u9009\u53d6 n+1 n+1 \u4e2a\u70b9\uff0c\u4ece\u800c\u5229\u7528\u8fd9 n+1 n+1 \u4e2a\u70b9\u6765\u552f\u4e00\u7684\u8868\u793a\u8fd9\u4e2a\u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u7528 n+1 n+1 \u4e2a\u70b9\u5c31\u80fd\u552f\u4e00\u7684\u8868\u793a\u8fd9\u4e2a\u51fd\u6570\u4e86\u5462\uff1f\u60f3\u4e00\u4e0b\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u4e24\u70b9\u786e\u5b9a\u4e00\u6761\u76f4\u7ebf\u3002\u518d\u6765\u4e00\u4e2a\u70b9\uff0c\u80fd\u786e\u5b9a\u8fd9\u4e2a\u76f4\u7ebf\u4e2d\u7684\u53e6\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4 n+1 n+1 \u4e2a\u70b9\u80fd\u786e\u5b9a n n \u4e2a\u53c2\u6570\uff08\u4e0d\u8003\u8651\u500d\u6570\u70b9\u4e4b\u7c7b\u7684\u6ca1\u7528\u70b9\uff09\u3002\u5982\u4e0b\uff1a f_1(x) = y_1 = a_0 + a_1x_1+a_2x_1^2+a_3x_1^3+ \\cdots + a_nx_1^n f_1(x) = y_1 = a_0 + a_1x_1+a_2x_1^2+a_3x_1^3+ \\cdots + a_nx_1^n f_2(x) = y_2 = a_0 + a_1x_2+a_2x_2^2+a_3x_2^3+ \\cdots + a_nx_2^n f_2(x) = y_2 = a_0 + a_1x_2+a_2x_2^2+a_3x_2^3+ \\cdots + a_nx_2^n f_3(x) = y_3 = a_0 + a_1x_3+a_2x_3^2+a_3x_3^3+ \\cdots + a_nx_3^n f_3(x) = y_3 = a_0 + a_1x_3+a_2x_3^2+a_3x_3^3+ \\cdots + a_nx_3^n f_4(x) = y_4 = a_0 + a_1x_4+a_2x_4^2+a_3x_4^3+ \\cdots + a_nx_4^n f_4(x) = y_4 = a_0 + a_1x_4+a_2x_4^2+a_3x_4^3+ \\cdots + a_nx_4^n f_5(x) = y_5 = a_0 + a_1x_5+a_2x_5^2+a_3x_5^3+ \\cdots + a_nx_5^n f_5(x) = y_5 = a_0 + a_1x_5+a_2x_5^2+a_3x_5^3+ \\cdots + a_nx_5^n \\cdots \\cdots f_n(x) = y_n = a_0 + a_1x_m+a_2x_m^2+a_3x_m^3+ \\cdots + a_nx_m^n f_n(x) = y_n = a_0 + a_1x_m+a_2x_m^2+a_3x_m^3+ \\cdots + a_nx_m^n \u4e00\u4e2a\u975e\u5e38\u901a\u4fd7\u6613\u61c2\u7684\u89e3\u91ca\uff1a \u591a\u9879\u5f0f\u7531\u7cfb\u6570\u8868\u793a\u6cd5\u8f6c\u4e3a\u70b9\u503c\u8868\u793a\u6cd5\u7684\u8fc7\u7a0b\uff0c\u5c31\u6210\u4e3a DFT\uff1b \u76f8\u5bf9\u5730\uff0c\u628a\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u70b9\u503c\u8868\u793a\u6cd5\u8f6c\u5316\u4e3a\u7cfb\u6570\u8868\u793a\u6cd5\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f IDFT\u3002 \u800c FFT \u5c31\u662f\u901a\u8fc7\u53d6\u67d0\u4e9b\u7279\u6b8a\u7684 x x \u7684\u70b9\u503c\u6765\u52a0\u901f DFT \u548c FFT \u7684\u8fc7\u7a0b\u3002","title":"\u591a\u9879\u5f0f\u7684\u7cfb\u6570\u8868\u793a\u6cd5\u4e0e\u70b9\u503c\u8868\u793a\u6cd5"},{"location":"math/fft/#_2","text":"\u590d\u6570\u5206\u4e3a\u5b9e\u6570\u548c\u865a\u6570\u3002\u5b9e\u6570\u5c31\u662f\u6211\u4eec\u65e5\u5e38\u6700\u5e38\u7528\u7684\u6709\u7406\u6570\u548c\u65e0\u7406\u6570\u3002\u5927\u5bb6\u8bb0\u5f97\u6211\u4eec\u5728\u5f00\u59cb\u5b66\u5e73\u65b9\u7684\u65f6\u5019\uff0c\u8001\u5e08\u4f1a\u8bf4\u6240\u6709\u6570\u7684\u5e73\u65b9\u5927\u4e8e\u7b49\u4e8e 0 0 \u5bf9\u4e0d\u5bf9\uff0c\u90a3\u4e48\u865a\u6570\u5c31\u5f15\u5165\u4e86\u3002\u865a\u6570\u4e00\u822c\u7528 i i \u8868\u793a\uff0c\u5bf9\u4e8e\u865a\u6570 i i \uff0c\u6709 i=\\sqrt{-1} i=\\sqrt{-1} \u3002\u53e6\u5916\uff0c i i \u5bf9\u4e8e\u865a\u6570\u7684\u610f\u4e49\uff0c\u4e0e 1 1 \u5bf9\u4e8e\u5b9e\u6570\u7684\u610f\u4e49\u662f\u4e00\u6837\u7684\u3002\u5982\u679c\u6211\u8bf4\u5f97\u4e0d\u591f\u660e\u786e\uff0c\u4f60\u53ef\u4ee5\u770b\u4e0b\u9762\u6211\u5f15\u7528\u7684\u767e\u79d1\u8bf4\u660e\u3002 \u5728\u6570\u5b66\u4e2d\uff0c\u865a\u6570\u5c31\u662f\u5f62\u5982 a+b \\times i a+b \\times i \u7684\u6570\uff0c\u5176\u4e2d a,b a,b \u662f\u5b9e\u6570\uff0c\u4e14 b \\neq 0 b \\neq 0 , i^2 = - 1 i^2 = - 1 \u3002\u865a\u6570\u8fd9\u4e2a\u540d\u8bcd\u662f 17 \u4e16\u7eaa\u8457\u540d\u6570\u5b66\u5bb6\u7b1b\u5361\u5c14\u521b\u7acb\uff0c\u56e0\u4e3a\u5f53\u65f6\u7684\u89c2\u5ff5\u8ba4\u4e3a\u8fd9\u662f\u771f\u5b9e\u4e0d\u5b58\u5728\u7684\u6570\u5b57\u3002\u540e\u6765\u53d1\u73b0\u865a\u6570 a+b \\times i a+b \\times i \u7684\u5b9e\u90e8 a a \u53ef\u5bf9\u5e94\u5e73\u9762\u4e0a\u7684\u6a2a\u8f74\uff0c\u865a\u90e8 b b \u4e0e\u5bf9\u5e94\u5e73\u9762\u4e0a\u7684\u7eb5\u8f74\uff0c\u8fd9\u6837\u865a\u6570 a+b \\times i a+b \\times i \u53ef\u4e0e\u5e73\u9762\u5185\u7684\u70b9 (a,b) (a,b) \u5bf9\u5e94\u3002 \u53ef\u4ee5\u5c06\u865a\u6570 bi bi \u6dfb\u52a0\u5230\u5b9e\u6570 a a \u4ee5\u5f62\u6210\u5f62\u5f0f a + bi a + bi \u7684\u590d\u6570\uff0c\u5176\u4e2d\u5b9e\u6570 a a \u548c b b \u5206\u522b\u88ab\u79f0\u4e3a\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u3002\u4e00\u4e9b\u4f5c\u8005\u4f7f\u7528\u672f\u8bed\u7eaf\u865a\u6570\u6765\u8868\u793a\u6240\u8c13\u7684\u865a\u6570\uff0c\u865a\u6570\u8868\u793a\u5177\u6709\u975e\u96f6\u865a\u90e8\u7684\u4efb\u4f55\u590d\u6570\u3002 \u2014\u2014\u767e\u5ea6\u767e\u79d1 \u6211\u4eec\u7528\u4e00\u5e45\u56fe\u6765\u8868\u793a\u590d\u6570\u4e0e\u590d\u5e73\u9762\u7684\u5173\u7cfb\uff08\u56fe\u6e90\u767e\u5ea6\u767e\u79d1\uff09 \u5176\u4e2d\u6a2a\u5750\u6807\u662f\u5b9e\u6570\u8f74\uff0c\u7eb5\u5750\u6807\u662f\u865a\u6570\u8f74\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e2a\u865a\u6570\u770b\u4e3a\u4e00\u4e2a\u5411\u91cf\u4e86\uff0c\u5bf9\u5e94\u7684\uff0c\u865a\u6570\u53ef\u4ee5\u7528\u666e\u901a\u5750\u6807\u548c\u6781\u5750\u6807 (r,\\theta) (r,\\theta) (\u5176\u4e2d r r \u4e3a\u865a\u6570\u957f\u5ea6\uff0c \\theta \\theta \u4e3a\u865a\u6570\u548c\u5b9e\u6570\u8f74\u6b63\u534a\u8f74\u5939\u89d2) \u6765\u8868\u793a\u3002 \u63a5\u4e0b\u6765\u601d\u8003\u4e24\u4e2a\u590d\u6570\u76f8\u4e58\u662f\u4ec0\u4e48\u610f\u4e49\uff1a (a+bi) \\times (c+di) = (ac-bd) + (ad+bc)i (a+bi) \\times (c+di) = (ac-bd) + (ad+bc)i \u957f\u5ea6\u76f8\u4e58\uff0c\u89d2\u5ea6\u76f8\u52a0\uff1a (r_1, \\theta_1) \\times (r_2, \\theta_2) = (r_1 \\times r_2, \\theta_1+\\theta_2) (r_1, \\theta_1) \\times (r_2, \\theta_2) = (r_1 \\times r_2, \\theta_1+\\theta_2) \u8fd9\u4e48\u4e00\u770b\u7684\u8bdd\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u5982\u679c\u4e24\u4e2a\u957f\u5ea6\u4e3a 1 1 \u7684\u4e0d\u540c\u65b9\u5411\u5411\u91cf\u76f8\u4e58\uff0c\u7ed3\u679c\u5411\u91cf\u662f\u4e0d\u662f\u4e00\u4e2a\u957f\u5ea6\u4f9d\u7136\u4e3a 1 1 \u7684\u65b0\u5411\u91cf\u5462\uff1f","title":"\u590d\u6570\u7684\u5f15\u5165"},{"location":"math/fft/#_3","text":"\u6211\u4eec\u56de\u5230\u4e4b\u524d\u7684\u95ee\u9898\uff1a\u591a\u9879\u5f0f\uff08\u70b9\u503c\u8868\u793a\u6cd5\uff09\u7684\u4e58\u79ef\u3002 \u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a \u521a\u521a\u8bf4\u5230\u4e86 DFT \u662f\u628a\u591a\u9879\u5f0f\u4ece\u7cfb\u6570\u8868\u793a\u8f6c\u5230\u4e86\u70b9\u503c\u8868\u793a\uff08\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff09\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u70b9\u503c\u76f8\u4e58\u4e4b\u540e\uff08\u9009\u53d6\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u4e14\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff09\uff0c\u5982\u679c\u80fd\u591f\u5feb\u901f\u8fd8\u539f\u6210\u7cfb\u6570\u8868\u793a\uff0c\u662f\u4e0d\u662f\u5c31\u5b8c\u7f8e\u89e3\u51b3\u6211\u4eec\u7684\u95ee\u9898\u4e86\u5462\uff1f\u4e0a\u8ff0\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5047\u8bbe\u6211\u4eec DFT \u8fc7\u7a0b\u5bf9\u4e8e\u4e24\u4e2a\u591a\u9879\u5f0f\u9009\u53d6\u7684 x x \u5e8f\u5217\u76f8\u540c\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230 f(x)={(x_0, f(x_0), (x_1, f(x_1)), (x_2, f(x_2), \\cdots, (x_n, f(x_n)))} f(x)={(x_0, f(x_0), (x_1, f(x_1)), (x_2, f(x_2), \\cdots, (x_n, f(x_n)))} g(x)={(x_0, g(x_0), (x_1, g(x_1)), (x_2, g(x_2), \\cdots, (x_n, g(x_n)))} g(x)={(x_0, g(x_0), (x_1, g(x_1)), (x_2, g(x_2), \\cdots, (x_n, g(x_n)))} \u5982\u679c\u6211\u4eec\u8bbe F(x) = f(x) \\times g(x0 F(x) = f(x) \\times g(x0 \u90a3\u4e48\u5f88\u5bb9\u6613\u5f97\u5230 F(x) F(x) \u7684\u70b9\u503c\u8868\u8fbe\u5f0f\uff1a F(x) = {(x_0, f(x_0) \\times g(x_0), (x_1, f(x_1) \\times g(x_1)), (x_2, f(x_2) \\times g(x_2), \\cdots, (x_n, f(x_n) \\times g(x_n)))} F(x) = {(x_0, f(x_0) \\times g(x_0), (x_1, f(x_1) \\times g(x_1)), (x_2, f(x_2) \\times g(x_2), \\cdots, (x_n, f(x_n) \\times g(x_n)))} \u4f46\u662f\u6211\u4eec\u8981\u7684\u662f\u7cfb\u6570\u8868\u8fbe\u5f0f\uff0c\u63a5\u4e0b\u6765\u95ee\u9898\u53d8\u6210\u4e86\u4ece\u70b9\u503c\u56de\u5230\u7cfb\u6570\u3002\u5982\u679c\u6211\u4eec\u5e26\u5165\u5230\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u65b9\u7a0b\u7ec4\u4e2d\u53bb\uff0c\u4f1a\u628a\u590d\u6742\u5ea6\u53d8\u5f97\u975e\u5e38\u9ad8\u3002\u5149\u662f\u8ba1\u7b97 x^i(0 \\leq i \\leq n) x^i(0 \\leq i \\leq n) \u5c31\u662f n n \u9879, \u8fd9\u5c31\u5df2\u7ecf O(n^2) O(n^2) \u4e86\uff0c\u66f4\u522b\u8bf4\u8fd8\u8981\u628a n+1 n+1 \u4e2a\u65b9\u7a0b\u8fdb\u884c\u6d88\u5143\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002 \u8fd9\u91cc\u4f1a\u4e0d\u4f1a\u89c9\u5f97\u6211\u4eec\u4e0d\u53bb\u8ba1\u7b97 x^i x^i \u6bd4\u8f83\u597d\u5462\uff1f 1 1 \u548c -1 -1 \u7684\u5e42\u90fd\u5f88\u597d\u7b97\uff0c\u4f46\u662f\u4e5f\u4ec5\u4ec5\u6709\u4e24\u4e2a\u4e0d\u591f\u554a\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981 n+1 n+1 \u4e2a o(\u2565\ufe4f\u2565)o \u90a3\u600e\u4e48\u529e\u5462\uff01\u60f3\u5230\u6211\u4eec\u521a\u521a\u5b66\u7684\u957f\u5ea6\u4e3a 1 1 \u7684\u865a\u6570\u4e86\u5417\uff1f\u4e0d\u7ba1\u600e\u4e48\u4e58\u957f\u5ea6\u90fd\u662f 1 1 \uff01\u5bf9\u5c31\u662f\u5b83\uff01\u6211\u4eec\u9700\u8981\u7684\u662f \\omega^k=1 \\omega^k=1 \u4e2d\u7684 \\omega \\omega \uff0c\u5f88\u5bb9\u6613\u60f3\u5230 -i -i \u548c 1 1 \u662f\u7b26\u5408\u7684\u3002\u90a3\u5176\u4ed6\u7684\u5462\uff1f \u73b0\u5728\u6211\u4eec\u770b\u4e0a\u56fe\u7684\u5706\u5708\u3002\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u5355\u4f4d\u5706\uff08\u5706\u5fc3\u4e3a\u539f\u70b9\uff0c\u534a\u5f84\u4e3a 1 1 \uff09\uff0c\u6240\u6709\u5728\u5706\u4e0a\u7684\u590d\u6570\u7684\u957f\u5ea6\u5747\u4e3a 1 1 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u7ba1\u505a\u591a\u5c11\u6b21\u65b9 r r \u6c38\u8fdc\u4e3a 1 1 \uff0c\u7ed3\u679c\u4e5f\u4ec5\u4ec5\u89d2\u5ea6\u7684\u53d8\u5316\u800c\u5df2\u3002\u4f46\u662f\uff01\uff01\uff01\u8fdb\u8fc7\u65cb\u8f6c\u603b\u4f1a\u8ba9\u89d2\u5ea6 \\bmod 360 = 0 \\bmod 360 = 0 \u6210\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u7ed3\u679c\u4e3a 1 1 \u3002 \u6211\u4eec\u628a\u7b26\u5408\u4ee5\u4e0a\u6761\u4ef6\u7684\u590d\u6570\u6210\u4e3a\u590d\u6839\uff0c\u7528 \\omega \\omega \u8868\u793a\u3002\u5982\u679c \\omega^k=1 \\omega^k=1 \u90a3\u4e48\u6211\u4eec\u628a \\omega \\omega \u79f0\u4e3a 1 1 \u7684 k k \u6b21\u590d\u6839\uff0c\u8bb0\u4f5c \\omega_k^n \\omega_k^n (\u56e0\u4e3a\u7b26\u5408\u8fd9\u4e2a k k \u6b21\u4e4b\u540e\u7b49\u4e8e 1 1 \u7684\u590d\u6570\u6709\u5f88\u591a\uff0c\u6bd4\u5982 i i \u7684 4k 4k \u6b21\u5e42\u6c38\u8fdc\u4e3a 1 1 \uff0c\u6240\u4ee5\uff0c\u8fd9\u4e2a n n \u662f\u4e00\u4e2a\u7f16\u53f7\uff0c\u8868\u793a\u8fd9\u662f\u89d2\u5ea6\u4ece\u5c0f\u5230\u5927\u7684\u7b2c\u51e0\u4e2a\uff08\u4ece x x \u7684\u6b63\u534a\u8f74\u5f00\u59cb\u9006\u65f6\u9488\uff09) \u662f\u4e0d\u662f\u6709\u70b9\u96fe\u554a (\uffe3\u25bd\uffe3)\uff0f\u6ca1\u4e8b\u6ca1\u4e8b\u63a5\u4e0b\u6765\u6211\u4eec\u4e3e\u4e2a\u6817\u5b50\uff1a \u90a3\u4e48\u5f88\u5bb9\u6613\u53d1\u73b0\u5f53 K = 4 K = 4 \u7684\u65f6\u5019\uff0c\u76f8\u5f53\u4e8e\u628a\u5355\u4f4d\u5706\u7b49\u5206 K= 4 K= 4 \u4efd\u3002\u7136\u540e\u6bcf\u4e00\u4efd\u6309\u7167\u6781\u89d2\u7f16\u53f7\u3002\u90a3\u4e48\u662f\u4e0d\u662f\uff08\u5728 K = 4 K = 4 \u7684\u65f6\u5019\uff09\u6211\u4eec\u53ea\u8981\u77e5\u9053 \\omega_4^1 \\omega_4^1 \uff08\u56e0\u4e3a\u4ed6\u7684\u89d2\u5ea6\u662f\u76f8\u5f53\u4e8e\u5355\u4f4d\u89d2\u5ea6\uff09, \u5c31\u80fd\u77e5\u9053 \\omega_4^0, \\omega_4^1, \\omega_4^2, \\omega_4^3 \\omega_4^0, \\omega_4^1, \\omega_4^2, \\omega_4^3 \u4e86\u5462\uff1f\u5f53\u7136\u662f\u8fd9\u6837\u7684\u3002\u3002\u3002 \\omega_4^0 \\omega_4^0 \u6052\u7b49\u4e8e 1 1 \uff0c \\omega_4^2 \\omega_4^2 \u7684\u89d2\u5ea6\u662f \\omega_4^0 \\omega_4^0 \u7684\u4e24\u500d\uff0c\u6240\u4ee5 \\omega_4^2 = (\\omega_4^1)^2 = i^2=-1 \\omega_4^2 = (\\omega_4^1)^2 = i^2=-1 , \u4f9d\u6b21\u4ee5\u6b64\u7c7b\u63a8\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u8981\u77e5\u9053 \\omega_k^1 \\omega_k^1 \uff0c\u5c31\u80fd\u6c42\u51fa \\omega_k^n \\omega_k^n \u3002\u6240\u4ee5\u6211\u4eec\u628a \\omega_k^1 \\omega_k^1 \u79f0\u4e3a\u5355\u4f4d\u590d\u6839\uff0c\u7b80\u5199\u4e3a \\omega_k \\omega_k","title":"\u5355\u4f4d\u590d\u6839\u7684\u5f15\u5165"},{"location":"math/fft/#fft_2","text":"qwq \u7ec8\u4e8e\u5199\u5230\u6838\u5fc3\u90e8\u5206\u4e86\uff0c\u4e5f\u5c31\u662f\uff0cFFT \u5230\u5e95\u600e\u4e48\u6765\u5199\u5462\uff1f","title":"FFT \u7684\u6d41\u7a0b"},{"location":"math/fft/#fft-dft","text":"FFT \u4e4b\u6240\u4ee5\u5feb\uff0c\u662f\u56e0\u4e3a\u4ed6\u91c7\u7528\u4e86\u5206\u6cbb\u7684\u601d\u60f3\u3002 \u5c31 DFT\uff08\u5c06\u7cfb\u6570\u8868\u8fbe\u8f6c\u6362\u6210\u70b9\u503c\u8868\u8fbe\uff09\u6765\u8bf4\uff0c\u5b83\u5206\u6cbb\u7684\u6765\u6c42\u5f53\u5f53\u524d\u7684 x=\\omega_n^k x=\\omega_n^k \u7684\u65f6\u5019\u6574\u4e2a\u5f0f\u5b50\u7684\u503c\u3002\u4ed6\u7684\u5206\u6cbb\u601d\u60f3\u4f53\u73b0\u5728\u5c06\u591a\u9879\u5f0f\u5206\u4e3a\u5947\u6b21\u9879\u548c\u5076\u6b21\u9879\u5904\u7406\u3002 \u5bf9\u4e8e\u4e00\u5171 8 8 \u9879\u7684\u591a\u9879\u5f0f f(x0) = y_1 = a_0 + a_1x + a_2x^2+a_3x^3+a_4x^4+a_5x^5+a_6x^6+a_7x^7 f(x0) = y_1 = a_0 + a_1x + a_2x^2+a_3x^3+a_4x^4+a_5x^5+a_6x^6+a_7x^7 \u6309\u7167\u6b21\u6570\u7684\u5947\u5076\u6765\u5206\u6210\u4e24\u7ec4, \u7136\u540e\u53f3\u8fb9\u63d0\u51fa\u6765\u4e00\u4e2a x x f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + (a_1x+a_3x^3+a_5x^5+a_7x^7) f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + (a_1x+a_3x^3+a_5x^5+a_7x^7) f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + x(a_1+a_3x^2+a_5x^4+a_7x^6) f(x) = (a_0+a_2x^2+a_4x^4+a_6x^6) + x(a_1+a_3x^2+a_5x^4+a_7x^6) \u5206\u522b\u7528\u5947\u5076\u6b21\u6b21\u9879\u6570\u5efa\u7acb\u65b0\u7684\u65b9\u7a0b G(x) = a_0+a_2x+a_4x^2+a_6x^3 G(x) = a_0+a_2x+a_4x^2+a_6x^3 H(x)=a_1+a_3x+a_5x^2+a_7x^3 H(x)=a_1+a_3x+a_5x^2+a_7x^3 \u90a3\u4e48\u539f\u6765\u7684 f(x) f(x) \u7531\u65b0\u51fd\u6570\u6765\u8868\u793a (\u662f\u4e0d\u662f\u6211\u4eec\u4e8c\u5206\u4e86\u4e00\u4e2a\u591a\u9879\u5f0f\u5462~) F(x)=G(x^2) + x \\times H(x^2) F(x)=G(x^2) + x \\times H(x^2) \u7ed9\u51fd\u6570\u5e26\u4e2a\u5e3d\u5b50\u8868\u793a\u6b64\u65f6\u5728\u8fdb\u884c\u7684\u662f DFT \u8fc7\u7a0b\uff0c\u628a x \u4ee3\u8fdb\u53bb\uff0c\u5373\u6709 DFT(f(\\omega_n^k))=DFT(G((\\omega_n^k)^2)) + \\omega_n^k \\times DFT(H((\\omega_n^k)^2)) DFT(f(\\omega_n^k))=DFT(G((\\omega_n^k)^2)) + \\omega_n^k \\times DFT(H((\\omega_n^k)^2)) \uff01\uff01\uff01\u524d\u65b9\u9ad8\u80fd\uff1a \u8fd9\u4e2a\u51fd\u6570\u80fd\u5904\u7406\u7684\u591a\u9879\u5f0f\u957f\u5ea6\u53ea\u80fd\u662f 2^m(m \\in N^ \\times ) 2^m(m \\in N^ \\times ) , \u5426\u5219\u5728\u5206\u6cbb\u7684\u65f6\u5019\u5de6\u53f3\u4e0d\u4e00\u6837\u957f\uff0c\u53f3\u8fb9\u53d6\u4e0d\u5230\u7cfb\u6570\u4e86\uff0c\u7a0b\u5e8f\u6ca1\u6cd5\u8fdb\u884c\u3002\u6240\u4ee5\u8981\u5728\u7b2c\u4e00\u6b21 DFT \u4e4b\u524d\u5c31\u628a\u5e8f\u5217\u5411\u4e0a\u8865\u6210\u957f\u5ea6\u4e3a 2^m(m \\in N^ \\times ) 2^m(m \\in N^ \\times ) \uff08\u9ad8\u6b21\u7cfb\u6570\u8865 0 0 \uff09\u3001\u6700\u9ad8\u9879\u6b21\u6570\u4e3a n-1 n-1 \u7684\u591a\u9879\u5f0f\u3002\u4e00\u5b9a\u8981\u9884\u5904\u7406\u54e6 qaq \u7136\u540e\u6211\u5728\u4ee3\u5165\u503c\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8981\u4ee3\u5165 n n \u4e2a\u4e0d\u540c\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ee3\u5165 \\omega_n^0,\\omega_n^1,\\omega_n^2,\\cdots, \\omega_n^{n-1} (n=2^m(m \\in N^ \\times )) \\omega_n^0,\\omega_n^1,\\omega_n^2,\\cdots, \\omega_n^{n-1} (n=2^m(m \\in N^ \\times )) \u4e00\u5171 2^m 2^m \u4e2a\u4e0d\u540c\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* * \u505a FFT *len \u5fc5\u987b\u662f 2^k \u5f62\u5f0f *on == 1 \u65f6\u662f DFT\uff0con == -1 \u65f6\u662f IDFT */ void fft ( Complex y [], int len , int on ) { change ( y , len ); for ( int h = 2 ; h <= len ; h <<= 1 ) { Complex wn ( cos ( 2 * PI / h ), sin ( on * 2 * PI / h )); for ( int j = 0 ; j < len ; j += h ) { Complex w ( 1 , 0 ); for ( int k = j ; k < j + h / 2 ; k ++ ) { Complex u = y [ k ]; Complex t = w * y [ k + h / 2 ]; y [ k ] = u + t ; y [ k + h / 2 ] = u - t ; w = w * wn ; } } } } \u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u9700\u8981\u4ece \u201c\u5206\u6cbb\u201d \u7684\u89d2\u5ea6\u7ee7\u7eed\u4f18\u5316\u3002\u6211\u4eec\u6bcf\u4e00\u6b21\u90fd\u4f1a\u628a\u6574\u4e2a\u591a\u9879\u5f0f\u7684\u5947\u6570\u6b21\u9879\u548c\u5076\u6570\u6b21\u9879\u7cfb\u6570\u5206\u5f00\uff0c\u4e00\u53ea\u5206\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u7cfb\u6570\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5148 \u201c\u6a21\u4eff\u9012\u5f52\u201d \u628a\u8fd9\u4e9b\u7cfb\u6570\u5728\u539f\u6570\u7ec4\u4e2d \u201c\u62c6\u5206\u201d\uff0c\u7136\u540e\u518d \u201c\u500d\u589e\u201d \u5730\u53bb\u5408\u5e76\u8fd9\u4e9b\u7b97\u51fa\u6765\u7684\u503c\u3002\u7136\u800c\u6211\u4eec\u53c8\u8981\u5982\u4f55\u53bb\u62c6\u5206\u8fd9\u4e9b\u6570\u5462\uff1f \u8bbe\u521d\u59cb\u5e8f\u5217\u4e3a \\{x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7\\} \\{x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7\\} \u4e00\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0, x_2, x_4, x_6\\},\\{x_1, x_3,x_5, x_7 \\} \\{x_0, x_2, x_4, x_6\\},\\{x_1, x_3,x_5, x_7 \\} \u4e24\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0,x_4\\} \\{x_2, x_6\\},\\{x_1, x_3\\},\\{x_5, x_7 \\} \\{x_0,x_4\\} \\{x_2, x_6\\},\\{x_1, x_3\\},\\{x_5, x_7 \\} \u4e09\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0\\}\\{x_4\\}\\{x_2\\}\\{x_6\\}\\{x_1\\}\\{x_3\\}\\{x_5\\}\\{x_7 \\} \\{x_0\\}\\{x_4\\}\\{x_2\\}\\{x_6\\}\\{x_1\\}\\{x_3\\}\\{x_5\\}\\{x_7 \\} \u6709\u5565\u89c4\u5f8b\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u539f\u6765\u7684\u90a3\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u6570\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u7136\u540e\u628a\u4e8c\u8fdb\u5236\u7ffb\u8f6c\u5bf9\u79f0\u4e00\u4e0b\uff0c\u5c31\u662f\u6700\u7ec8\u90a3\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u6807\u3002\u6bd4\u5982 x_1 x_1 \u662f 001\uff0c\u7ffb\u8f6c\u662f 100\uff0c\u4e5f\u5c31\u662f 4\uff0c\u800c\u4e14\u6700\u540e\u90a3\u4e2a\u4f4d\u7f6e\u786e\u5b9e\u662f 4\uff0c\u662f\u4e0d\u662f\u5f88\u795e\u5947\u554a~~~ \u8fd9\u91cc\u9644\u4e0a\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* * \u8fdb\u884c FFT \u548c IFFT \u524d\u7684\u53cd\u7f6e\u53d8\u6362 * \u4f4d\u7f6e i \u548c i \u7684\u4e8c\u8fdb\u5236\u53cd\u8f6c\u540e\u7684\u4f4d\u7f6e\u4e92\u6362 *len \u5fc5\u987b\u4e3a 2 \u7684\u5e42 */ void change ( Complex y [], int len ) { int i , j , k ; for ( int i = 1 , j = len / 2 ; i < len - 1 ; i ++ ) { if ( i < j ) swap ( y [ i ], y [ j ]); // \u4ea4\u6362\u4e92\u4e3a\u5c0f\u6807\u53cd\u8f6c\u7684\u5143\u7d20\uff0ci<j \u4fdd\u8bc1\u4ea4\u6362\u4e00\u6b21 // i \u505a\u6b63\u5e38\u7684 + 1\uff0cj \u505a\u53cd\u8f6c\u7c7b\u578b\u7684 + 1\uff0c\u59cb\u7ec8\u4fdd\u6301 i \u548c j \u662f\u53cd\u8f6c\u7684 k = len / 2 ; while ( j >= k ) { j = j - k ; k = k / 2 ; } if ( j < k ) j += k ; } }","title":"FFT \u6d41\u7a0b\u7b2c\u4e00\u6b65\u4e4b DFT\uff08\u5171\u4e24\u6b65\uff09"},{"location":"math/fft/#fft-idft","text":"\u8fd9\u4e00\u6b65 IDFT\uff08\u5085\u91cc\u53f6\u53cd\u53d8\u6362\uff09\u7684\u4f5c\u7528\u6211\u8bf4\u7684\u5df2\u7ecf\u5f88\u6e05\u695a\u5566\uff0c\u5c31\u662f\u628a\u4e0a\u4e00\u6b65\u83b7\u5f97\u7684\u76ee\u6807\u591a\u9879\u5f0f\u7684\u70b9\u503c\u5f62\u5f0f\u8f6c\u6362\u6210\u7cfb\u6570\u5f62\u5f0f\u3002\u4f46\u662f\u4f3c\u4e4e\u5e76\u4e0d\u7b80\u5355\u5462\uff08\u96fe\uff09\u3002\u3002\u3002\u4f46\u662f\uff0c\u6211\u4eec\u628a\u5355\u4f4d\u590d\u6839\u4ee3\u5165\u591a\u9879\u5f0f\u4e4b\u540e\uff0c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff08\u77e9\u9635\u8868\u793a\u65b9\u7a0b\u7ec4\uff09 \\begin{bmatrix}y[0] \\\\ y[1] \\\\ y[2] \\\\ y[3] \\\\ \\dots \\\\ y[n-1] \\end{bmatrix} \\begin{matrix}= \\\\ = \\\\ = \\\\ = \\\\ \\\\ = \\end{matrix} \\begin{bmatrix}1 & 1 & 1 & 1 & \\dots & 1 \\\\ 1 & \\omega_n^1 & \\omega_n^2 & \\omega_n^3 & \\dots & \\omega_n^{n-1} \\\\ 1 & \\omega_n^2 & \\omega_n^4 & \\omega_n^6 & \\dots & \\omega_n^{2(n-1)} \\\\ 1 & \\omega_n^3 & \\omega_n^6 & \\omega_n^9 & \\dots & \\omega_n^{3(n-1)} \\\\ \\dots & \\dots & \\dots & \\dots & \\dots & \\dots \\\\ 1 & \\omega_n^{n-1} & \\omega_n^{2(n-1)} & \\omega_n^{3(n-1)} & \\dots & \\omega_n^{(n-1)^2} \\end{bmatrix} \\begin{bmatrix} a[0] \\\\ a[1] \\\\ a[2] \\\\ a[3] \\\\ \\dots \\\\ a[n-1] \\end{bmatrix} \\begin{bmatrix}y[0] \\\\ y[1] \\\\ y[2] \\\\ y[3] \\\\ \\dots \\\\ y[n-1] \\end{bmatrix} \\begin{matrix}= \\\\ = \\\\ = \\\\ = \\\\ \\\\ = \\end{matrix} \\begin{bmatrix}1 & 1 & 1 & 1 & \\dots & 1 \\\\ 1 & \\omega_n^1 & \\omega_n^2 & \\omega_n^3 & \\dots & \\omega_n^{n-1} \\\\ 1 & \\omega_n^2 & \\omega_n^4 & \\omega_n^6 & \\dots & \\omega_n^{2(n-1)} \\\\ 1 & \\omega_n^3 & \\omega_n^6 & \\omega_n^9 & \\dots & \\omega_n^{3(n-1)} \\\\ \\dots & \\dots & \\dots & \\dots & \\dots & \\dots \\\\ 1 & \\omega_n^{n-1} & \\omega_n^{2(n-1)} & \\omega_n^{3(n-1)} & \\dots & \\omega_n^{(n-1)^2} \\end{bmatrix} \\begin{bmatrix} a[0] \\\\ a[1] \\\\ a[2] \\\\ a[3] \\\\ \\dots \\\\ a[n-1] \\end{bmatrix} \u800c\u4e14\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u6700\u5de6\u8fb9\u7684\u7ed3\u679c\u4e86\uff0c\u4e2d\u95f4\u7684 x x \u503c\u5728\u76ee\u6807\u591a\u9879\u5f0f\u7684\u70b9\u503c\u8868\u793a\u4e2d\u4e5f\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6240\u4ee5\uff0c\u6839\u636e\u77e9\u9635\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u6211\u4eec\u53ea\u8981\u5728\u5f0f\u5b50\u4e24\u8fb9\u5de6\u4e58\u4e2d\u95f4\u90a3\u4e2a\u5927\u77e9\u9635\u7684\u9006\u77e9\u9635\u5c31\u884c\u4e86\u3002\u7531\u4e8e\u8fd9\u4e2a\u77e9\u9635\u7684\u5143\u7d20\u975e\u5e38\u7279\u6b8a\uff0c\u4ed6\u7684\u9006\u77e9\u9635\u4e5f\u6709\u7279\u6b8a\u7684\u6027\u8d28\uff0c\u5c31\u662f\u6bcf\u4e00\u9879\u53d6\u5012\u6570\uff0c\u518d\u9664\u4ee5 n n \uff0c\u5c31\u80fd\u5f97\u5230\u4ed6\u7684\u9006\u77e9\u9635\uff08\u8fd9\u8fb9\u6839\u636e\u7684\u662f\u5355\u4f4d\u539f\u6839\u7684\u4e24\u4e2a\u7279\u6b8a\u6027\u8d28\u63a8\u51fa\u6765\u7684\uff0c\u5177\u4f53\u6bd4\u8f83\u9ebb\u70e6\u3002\u5982\u679c\u60f3\u77e5\u9053\u7684\u8bdd\u79c1\u6211\u5427\u3002\uff09 \u5982\u4f55\u6539\u53d8\u6211\u4eec\u7684\u64cd\u4f5c\u624d\u80fd\u4f7f\u8ba1\u7b97\u7684\u7ed3\u679c\u6587\u539f\u6765\u7684\u5012\u6570\u5462\uff1f\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u91cd\u65b0\u5199\u4e00\u904d\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u66f4\u7b80\u5355\u7684\u5b9e\u73b0\u3002\u8fd9\u5c31\u8981\u770b\u6211\u4eec\u6c42 \u201c\u5355\u4f4d\u590d\u6839\u7684\u8fc7\u7a0b\u4e86\u201d\uff1a\u6839\u636e \u201c\u6b27\u62c9\u51fd\u6570\u201d e^{i\\pi}=-1 e^{i\\pi}=-1 \uff0c\u6211\u4e48\u53ef\u4ee5\u5f97\u5230 e^{2\\pi i}=1 e^{2\\pi i}=1 \u3002\u5982\u679c\u6211\u8981\u627e\u5230\u4e00\u4e2a\u6570\uff0c\u5b83\u7684 k k \u6b21\u65b9 = 1 = 1 \uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570 \\omega[k]=e^{2\\pi \\frac{i}{k}} \\omega[k]=e^{2\\pi \\frac{i}{k}} \uff08\u56e0\u4e3a (e^{2\\pi \\frac{i}{k}})^k=e^{2\\pi i}=1 (e^{2\\pi \\frac{i}{k}})^k=e^{2\\pi i}=1 \uff09\u3002\u800c\u5982\u679c\u6211\u8981\u4f7f\u8fd9\u4e2a\u6570\u503c\u53d8\u6210 \\frac{1}{\\omega[k]} \\frac{1}{\\omega[k]} \u4e5f\u5c31\u662f (\\omega[k])^-1 (\\omega[k])^-1 \uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7740\u628a \u03c0 \u03c0 \u53d6\u6210 - 3.14159\u2026\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u8ba1\u7b97\u7ed3\u679c\u5c31\u4f1a\u53d8\u6210\u539f\u6765\u7684\u5012\u6570\uff0c\u800c\u5176\u5b83\u7684\u64cd\u4f5c\u8fc7\u7a0b\u4e0e DFT \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff08\u8fd9\u771f\u662f\u6781\u597d\u7684\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5411\u91cc\u9762\u63ba\u4e00\u4e2a\u53c2\u6570 1 1 \u6216\u8005\u662f -1 -1 \uff0c\u7136\u540e\u628a\u5b83\u4e58\u5230 \u03c0 \u03c0 \u7684\u8eab\u4e0a\u3002\u4f20\u5165 1 1 \u5c31\u662f DFT\uff0c\u4f20\u5165 -1 -1 \u5c31\u662f IDFT\uff0c\u5341\u5206\u7684\u667a\u80fd\u3002 \u6240\u4ee5\u6211\u4eec fft \u51fd\u6570\u53ef\u4ee5\u96c6 DFT \u548c IDFT \u4e8e\u4e00\u8eab\u3002\u89c1\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* * \u505a FFT *len \u5fc5\u987b\u662f 2^k \u5f62\u5f0f *on == 1 \u65f6\u662f DFT\uff0con == -1 \u65f6\u662f IDFT */ void fft ( Complex y [], int len , int on ) { change ( y , len ); for ( int h = 2 ; h <= len ; h <<= 1 ) { // \u6a21\u62df\u5408\u5e76\u8fc7\u7a0b Complex wn ( cos ( 2 * PI / h ), sin ( on * 2 * PI / h )); // \u8ba1\u7b97\u5f53\u524d\u5355\u4f4d\u590d\u6839 for ( int j = 0 ; j < len ; j += h ) { Complex w ( 1 , 0 ); // \u8ba1\u7b97\u5f53\u524d\u5355\u4f4d\u590d\u6839 for ( int k = j ; k < j + h / 2 ; k ++ ) { Complex u = y [ k ]; Complex t = w * y [ k + h / 2 ]; y [ k ] = u + t ; // \u8fd9\u5c31\u662f\u5427\u4e24\u90e8\u5206\u5206\u6cbb\u7684\u7ed3\u679c\u52a0\u8d77\u6765 y [ k + h / 2 ] = u - t ; // \u540e\u534a\u4e2a \u201cstep\u201d \u4e2d\u7684\u03c9\u4e00\u5b9a\u548c \u201c\u524d\u534a\u4e2a\u201d \u4e2d\u7684\u6210\u76f8\u53cd\u6570 //\u201c\u7ea2\u5708\u201d\u4e0a\u7684\u70b9\u8f6c\u4e00\u6574\u5708\u201c\u8f6c\u56de\u6765\u201d\uff0c\u8f6c\u534a\u5708\u6b63\u597d\u8f6c\u6210\u76f8\u53cd\u6570 // \u4e00\u4e2a\u6570\u76f8\u53cd\u6570\u7684\u5e73\u65b9\u4e0e\u8fd9\u4e2a\u6570\u81ea\u8eab\u7684\u5e73\u65b9\u76f8\u7b49 w = w * wn ; } } } if ( on == - 1 ) { for ( int i = 0 ; i < len ; i ++ ) { y [ i ]. x /= len ; } } } \u597d\u4e86\u73b0\u5728\u9644\u4e0a\u5168\u90e8\u4ee3\u7801\uff08 HDU 1402 \uff09\uff0c\u5e8f\u8a00\u8bf4\u8fc7\u4ee3\u7801\u6765\u81ea kuangbin \u7684\u6a21\u677f ~ ~~ \u6765\u5927\u5bb6\u548c\u6211\u4e00\u8d77 Orz \u4e00\u53d1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const double PI = acos ( - 1.0 ); struct Complex { double x , y ; Complex ( double _x = 0.0 , double _y = 0.0 ) { x = _x ; y = _y ; } Complex operator - ( const Complex & b ) const { return Complex ( x - b . x , y - b . y ); } Complex operator + ( const Complex & b ) const { return Complex ( x + b . x , y + b . y ); } Complex operator * ( const Complex & b ) const { return Complex ( x * b . x - y * b . y , x * b . y + y * b . x ); } }; /* * \u8fdb\u884c FFT \u548c IFFT \u524d\u7684\u53cd\u7f6e\u53d8\u6362 * \u4f4d\u7f6e i \u548c i \u7684\u4e8c\u8fdb\u5236\u53cd\u8f6c\u540e\u7684\u4f4d\u7f6e\u4e92\u6362 *len \u5fc5\u987b\u4e3a 2 \u7684\u5e42 */ void change ( Complex y [], int len ) { int i , j , k ; for ( int i = 1 , j = len / 2 ; i < len - 1 ; i ++ ) { if ( i < j ) swap ( y [ i ], y [ j ]); // \u4ea4\u6362\u4e92\u4e3a\u5c0f\u6807\u53cd\u8f6c\u7684\u5143\u7d20\uff0ci<j \u4fdd\u8bc1\u4ea4\u6362\u4e00\u6b21 // i \u505a\u6b63\u5e38\u7684 + 1\uff0cj \u505a\u53cd\u8f6c\u7c7b\u578b\u7684 + 1\uff0c\u59cb\u7ec8\u4fdd\u6301 i \u548c j \u662f\u53cd\u8f6c\u7684 k = len / 2 ; while ( j >= k ) { j = j - k ; k = k / 2 ; } if ( j < k ) j += k ; } } /* * \u505a FFT *len \u5fc5\u987b\u662f 2^k \u5f62\u5f0f *on == 1 \u65f6\u662f DFT\uff0con == -1 \u65f6\u662f IDFT */ void fft ( Complex y [], int len , int on ) { change ( y , len ); for ( int h = 2 ; h <= len ; h <<= 1 ) { Complex wn ( cos ( 2 * PI / h ), sin ( on * 2 * PI / h )); for ( int j = 0 ; j < len ; j += h ) { Complex w ( 1 , 0 ); for ( int k = j ; k < j + h / 2 ; k ++ ) { Complex u = y [ k ]; Complex t = w * y [ k + h / 2 ]; y [ k ] = u + t ; y [ k + h / 2 ] = u - t ; w = w * wn ; } } } if ( on == - 1 ) { for ( int i = 0 ; i < len ; i ++ ) { y [ i ]. x /= len ; } } } const int MAXN = 200020 ; Complex x1 [ MAXN ], x2 [ MAXN ]; char str1 [ MAXN / 2 ], str2 [ MAXN / 2 ]; int sum [ MAXN ]; int main () { while ( scanf ( \"%s%s\" , str1 , str2 ) == 2 ) { int len1 = strlen ( str1 ); int len2 = strlen ( str2 ); int len = 1 ; while ( len < len1 * 2 || len < len2 * 2 ) len <<= 1 ; for ( int i = 0 ; i < len1 ; i ++ ) x1 [ i ] = Complex ( str1 [ len1 - 1 - i ] - '0' , 0 ); for ( int i = len1 ; i < len ; i ++ ) x1 [ i ] = Complex ( 0 , 0 ); for ( int i = 0 ; i < len2 ; i ++ ) x2 [ i ] = Complex ( str2 [ len2 - 1 - i ] - '0' , 0 ); for ( int i = len2 ; i < len ; i ++ ) x2 [ i ] = Complex ( 0 , 0 ); fft ( x1 , len , 1 ); fft ( x2 , len , 1 ); for ( int i = 0 ; i < len ; i ++ ) x1 [ i ] = x1 [ i ] * x2 [ i ]; fft ( x1 , len , - 1 ); for ( int i = 0 ; i < len ; i ++ ) sum [ i ] = int ( x1 [ i ]. x + 0.5 ); for ( int i = 0 ; i < len ; i ++ ) { sum [ i + 1 ] += sum [ i ] / 10 ; sum [ i ] %= 10 ; } len = len1 + len2 - 1 ; while ( sum [ len ] == 0 && len > 0 ) len -- ; for ( int i = len ; i >= 0 ; i -- ) printf ( \"%c\" , sum [ i ] + '0' ); printf ( \" \\n \" ); } return 0 ; } \u81f3\u6b64\uff0cFFT \u7b97\u662f\u544a\u4e00\u6bb5\u843d\u4e86\u3002 \u4f46\u662f\uff0c\u7b97\u7ade\u9009\u624b\u53ef\u80fd\u50cf\u6211\u4e00\u6837\u6709\u4e0b\u9762\u7684\u7591\u95ee\uff1a \u5047\u5982\u6211\u8981\u8ba1\u7b97\u7684\u591a\u9879\u5f0f\u7cfb\u6570\u662f\u522b\u7684\u5177\u6709\u7279\u6b8a\u610f\u4e49\u7684\u6574\u6570\uff0c\u90a3\u4e48\u6211\u901a\u7bc7\u90fd\u5728\u7528\u6d6e\u70b9\u6570\u8fd0\u7b97\uff0c\u9996\u5148\u4ece\u65f6\u95f4\u4e0a\u5c31\u4f1a\u6bd4\u6574\u6570\u8fd0\u7b97\u6162\uff0c\u53e6\u5916\u6211\u6700\u591a\u53ea\u80fd\u7528 long double \u4e0d\u80fd\u7528 long long \u7c7b\u578b\uff0c\u6211\u80fd\u4e0d\u80fd\u5e94\u7528\u6570\u8bba\u7684\u53d8\u5316\u4ece\u800c\u907f\u5f00\u6d6e\u70b9\u8fd0\u7b97\uff0c\u8fbe\u5230 \u201c\u66f4\u9ad8\u66f4\u5feb\u66f4\u5f3a (*\uff65\u03c9<) \u201d \u5462\uff1f","title":"FFT \u6d41\u7a0b\u7b2c\u4e8c\u6b65\u4e4b IDFT\uff08\u5171\u4e24\u6b65\uff09"},{"location":"math/fft/#ntt","text":"\u6233\uff5e NTT","title":"\u7b97\u7ade\u9009\u624b\u770b\u8fc7\u6765~ NTT\uff08\u6570\u8bba\u4f18\u5316\u7684\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff09"},{"location":"math/fwt/","text":"\uff08\u672c\u6587\u8f6c\u8f7d\u81ea \u6843\u9171\u7684\u7b97\u6cd5\u7b14\u8bb0 \uff0c\u539f\u6587\u6233 \u94fe\u63a5 \uff0c\u5df2\u83b7\u5f97\u4f5c\u8005\u6388\u6743\uff09 \u7b80\u4ecb \u00b6 \u6c83\u5c14\u4ec0\u8f6c\u6362\uff08Walsh Transform\uff09\u662f\u5728\u9891\u8c31\u5206\u6790\u4e0a\u4f5c\u4e3a\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\u7684\u66ff\u4ee3\u65b9\u6848\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u2014\u2014 \u7ef4\u57fa\u767e\u79d1 \u5176\u5b9e\u8fd9\u4e2a\u53d8\u6362\u5728\u4fe1\u53f7\u5904\u7406\u4e2d\u5e94\u7528\u5f88\u5e7f\u6cdb\uff0cfft \u662f double \u7c7b\u578b\u7684\uff0c\u4f46\u662f walsh \u628a\u4fe1\u53f7\u5728\u4e0d\u540c\u9707\u8361\u9891\u7387\u65b9\u6ce2\u4e0b\u62c6\u89e3\uff0c\u56e0\u6b64\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u7edd\u5bf9\u503c\u5927\u5c0f\u76f8\u540c\u7684\u6574\u6570\uff0c\u8fd9\u4f7f\u5f97\u4e0d\u9700\u8981\u4f5c\u6d6e\u70b9\u6570\u7684\u4e58\u6cd5\u8fd0\u7b97\uff0c\u63d0\u9ad8\u4e86\u8fd0\u7b97\u901f\u5ea6\u3002 \u6240\u4ee5\uff0cFWT \u548c FFT \u7684\u6838\u5fc3\u601d\u60f3\u5e94\u8be5\u662f\u76f8\u540c\u7684\u3002\u90fd\u662f\u5bf9\u6570\u7ec4\u7684\u53d8\u6362\u3002\u6211\u4eec\u8bbe\u6570\u7ec4 A A \u7ecf\u8fc7\u5feb\u901f\u6c83\u5c14\u4ec0\u53d8\u6362\u4e4b\u540e\u8bb0\u4f5c FWT[A] FWT[A] . \u90a3\u4e48 FWT \u6838\u5fc3\u601d\u60f3\u5c31\u662f\uff1a \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u65b0\u5e8f\u5217 C C \uff0c\u7531\u5e8f\u5217 A A \u548c\u5e8f\u5217 B B \u7ecf\u8fc7\u67d0\u8fd0\u7b97\u89c4\u5219\u5f97\u5230\uff0c\u5373 C = A \\cdot B C = A \\cdot B \u6211\u4eec\u5148\u6b63\u5411\u5f97\u5230 FWT[A], FWT[B] FWT[A], FWT[B] \u7136\u540e\u6839\u636e FWT[C]=FWT[A] \\cdot FWT[B] FWT[C]=FWT[A] \\cdot FWT[B] \u5728 O(n) O(n) \u6c42\u51fa FWT[C] FWT[C] \u7136\u540e\u9006\u5411\u60f3\u8fd0\u7b97\u5f97\u5230\u539f\u5e8f\u5217 C C \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlogn) O(nlogn) \u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0cFWT \u662f\u7528\u4e8e\u89e3\u51b3\u5bf9\u4e0b\u6807\u8fdb\u884c\u4f4d\u8fd0\u7b97\u5377\u79ef\u95ee\u9898\u7684\u65b9\u6cd5\u3002 \u516c\u5f0f\uff1a C[i] = \\sum_{i=j \\bigoplus k}A[j] * B[k] C[i] = \\sum_{i=j \\bigoplus k}A[j] * B[k] \uff08\u5176\u4e2d \\bigoplus \\bigoplus \u662f\u4e8c\u5143\u4f4d\u8fd0\u7b97\u4e2d\u7684\u67d0\u4e00\u79cd\uff0c * * \u662f\u666e\u901a\u4e58\u6cd5\uff09 FWT \u7684\u8fd0\u7b97 \u00b6 FWT \u4e4b\u4e0e\uff08 \\And \\And \uff09\u8fd0\u7b97\u548c\u6216\uff08 | | \uff09\u8fd0\u7b97 \u00b6 \u4e0e\u8fd0\u7b97\u548c\u6216\u8fd0\u7b97\u7684\u672c\u8d28\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u6216\u8fd0\u7b97\uff0c\u4e0e\u8fd0\u7b97\u4e5f\u662f\u53ef\u4ee5\u81ea\u5df1\u6839\u636e\u516c\u5f0f yy \u51fa\u6765\u7684\u3002 \u6216\u8fd0\u7b97 A_i A_i \u00b6 \u5982\u679c\u6709 k=i|j k=i|j \uff0c\u90a3\u4e48 i i \u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a 1 1 \u7684\u4f4d\u7f6e\u548c j j \u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a 1 1 \u7684\u4f4d\u7f6e\u80af\u5b9a\u662f k k \u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a 1 1 \u7684\u4f4d\u7f6e\u7684\u5b50\u96c6\u3002 \u73b0\u5728\u8981\u5f97\u5230 FWT[C] = FWT[A] * FWT[B] FWT[C] = FWT[A] * FWT[B] \uff0c\u6211\u4eec\u5c31\u8981\u6784\u9020\u8fd9\u4e2a fwt \u7684\u89c4\u5219\u3002 \u6211\u4eec\u6309\u7167\u5b9a\u4e49\uff0c\u663e\u7136\u53ef\u4ee5\u6784\u9020 FWT[A] = A' = \\sum_{i=i|j}A[j] FWT[A] = A' = \\sum_{i=i|j}A[j] \uff0c\u6765\u8868\u793a j j \u6ee1\u8db3\u4e8c\u8fdb\u5236\u4e2d 1 1 \u4e3a i i \u7684\u5b50\u96c6\u3002 \u90a3\u4e48\u663e\u7136\u4f1a\u6709 C[i] = \\sum_{i=j|k}A[j]*B[k] \\Rightarrow FWT[C] = FWT[A] * FWT[B] C[i] = \\sum_{i=j|k}A[j]*B[k] \\Rightarrow FWT[C] = FWT[A] * FWT[B] \u90a3\u4e48\u6211\u4eec\u63a5\u4e0b\u6765\u770b FWT[A] FWT[A] \u600e\u4e48\u6c42\u3002 \u9996\u5148\u80af\u5b9a\u4e0d\u80fd\u679a\u4e3e\u4e86\uff0c\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002\u65e2\u7136\u4e0d\u80fd\u6574\u4f53\u679a\u4e3e\uff0c\u6211\u4eec\u5c31\u8003\u8651\u5206\u6cbb\u3002 \u6211\u4eec\u628a\u6574\u4e2a\u533a\u95f4\u4e8c\u5206\uff0c\u5176\u5b9e\u4e8c\u5206\u533a\u95f4\u4e4b\u540e\uff0c\u4e0b\u6807\u5199\u6210\u4e8c\u8fdb\u5236\u5f62\u5f0f\u662f\u6709\u89c4\u5f8b\u53ef\u5faa\u7684\u3002 \u6211\u4eec\u4ee4 A_0 A_0 \u8868\u793a A A \u7684\u524d\u4e00\u534a\uff0c A_1 A_1 \u8868\u793a\u533a\u95f4\u7684\u540e\u4e00\u534a\uff0c\u90a3\u4e48 A_0 A_0 \u5c31\u662f A \u4e0b\u6807\u6700\u5927\u503c\u7684\u6700\u9ad8\u4f4d\u4e3a 0 0 \uff0c\u4ed6\u7684\u5b50\u96c6\u5c31\u662f\u4ed6\u672c\u8eab\u7684\u5b50\u96c6\uff08\u56e0\u4e3a\u6700\u9ad8\u4f4d\u4e3a 0 0 \u4e86\uff09\uff0c\u4f46\u662f A_1 A_1 \u7684\u6700\u9ad8\u4f4d\u662f 1 1 \uff0c\u4ed6\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u96c6\u4e0d\u4ec5\u4ec5\u662f\u4ed6\u672c\u8eab\uff0c\u8fd8\u5305\u6700\u9ad8\u4f4d\u4e3a 0 0 \u7684\u5b50\u96c6\uff0c\u5373 FWT[A] = merge(FWT[A_0], FWT[A_0] + FWT[A_1]) FWT[A] = merge(FWT[A_0], FWT[A_0] + FWT[A_1]) \u5176\u4e2d merge \u8868\u793a\u50cf\u5b57\u7b26\u4e32\u62fc\u63a5\u4e00\u6837\u628a\u5b83\u4eec\u62fc\u8d77\u6765\uff0c + + \u5c31\u662f\u666e\u901a\u52a0\u6cd5\uff0c\u8868\u793a\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u76f8\u52a0\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u901a\u8fc7\u4e8c\u5206\u80fd\u5728 O(logn) O(logn) \u5b8c\u6210\u62fc\u63a5\uff0c\u6bcf\u6b21\u62fc\u63a5\u7684\u65f6\u5019\u8981\u5b8c\u6210\u4e00\u6b21\u8fd0\u7b97\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728 O(nlogn) O(nlogn) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f97\u5230\u4e86 FWT[A] FWT[A] \u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u53cd\u6f14\u4e86\uff0c\u5176\u5b9e\u53cd\u6f14\u662f\u5f88\u7b80\u5355\u7684\uff0c\u65e2\u7136\u77e5\u9053\u4e86 A_0 A_0 \u7684\u672c\u8eab\u7684\u5b50\u96c6\u662f\u4ed6\u81ea\u5df1 ( A_0 = FAT[A_0] A_0 = FAT[A_0] )\uff0c A_1 A_1 \u7684\u5b50\u96c6\u662f FAT[A_0] + FAT[A_1]\uff08A_1'= A_0' + A_1' FAT[A_0] + FAT[A_1]\uff08A_1'= A_0' + A_1' \uff09, \u90a3\u5c31\u5f88\u7b80\u5355\u7684\u5f97\u51fa\u53cd\u6f14\u7684\u9012\u63a8\u5f0f\u4e86\uff1a UFWT[A'] = merge(UFWT[A_0'], UFWT[A_1'] - UFWT[A_0']) UFWT[A'] = merge(UFWT[A_0'], UFWT[A_1'] - UFWT[A_0']) \u4e0e\u8fd0\u7b97 \u00b6 \u4e0e\u8fd0\u7b97\u7c7b\u6bd4\u6216\u8fd0\u7b97\u53ef\u4ee5\u5f97\u5230\u7c7b\u4f3c\u7ed3\u8bba FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_1]) FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_1]) UFWT[A'] = merge(UFWT[A_0'] - UFWT[A_1'], UFWT[A_1']) UFWT[A'] = merge(UFWT[A_0'] - UFWT[A_1'], UFWT[A_1']) \u5f02\u6216\u8fd0\u7b97 \u00b6 \u6700\u5e38\u8003\u7684\u5f02\u6216\u8fd0\u7b97\u3002 \u5f02\u6216\u7684\u5377\u79ef\u662f\u57fa\u4e8e\u5982\u4e0b\u539f\u7406\uff1a \u82e5\u6211\u4eec\u4ee4 i\\And j i\\And j \u4e2d 1 1 \u6570\u91cf\u7684\u5947\u5076\u6027\u4e3a i i \u4e0e j j \u7684\u5947\u5076\u6027\uff0c\u90a3\u4e48 i i \u4e0e k k \u7684\u5947\u5076\u6027\u5f02\u6216 j j \u548c k k \u7684\u5947\u5076\u6027\u7b49\u4e8e i \\operatorname{xor} j i \\operatorname{xor} j \u548c k k \u7684\u5947\u5076\u6027\u3002 \u5bf9\u4e8e FWT[A] FWT[A] \u7684\u8fd0\u7b97\u5176\u5b9e\u4e5f\u5f88\u597d\u5f97\u5230\u3002 \u516c\u5f0f\u5982\u4e0b\uff1a A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] ( C_1 C_1 \u8868\u793a i \\And j i \\And j \u5947\u5076\u6027\u4e3a 0 0 \uff0c C_2 C_2 \u8868\u793a i \\And j i \\And j \u7684\u5947\u5076\u6027\u4e3a 1 1 ) \u7ed3\u8bba\uff1a FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_0] - FWT[A_1]) FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_0] - FWT[A_1]) UFWT[A'] - merge(\\frac{FWT[A_0'] + FWT[A_1']}{2}, \\frac{FWT[A_0'] - FWT[A_1']}{2}) UFWT[A'] - merge(\\frac{FWT[A_0'] + FWT[A_1']}{2}, \\frac{FWT[A_0'] - FWT[A_1']}{2}) \u540c\u6216\u8fd0\u7b97 \u00b6 \u7c7b\u6bd4\u5f02\u6216\u8fd0\u7b97\u7ed9\u51fa\u516c\u5f0f\uff1a A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] ( C_1 C_1 \u8868\u793a i|j i|j \u5947\u5076\u6027\u4e3a 0 0 \uff0c C_2 C_2 \u8868\u793a i|j i|j \u7684\u5947\u5076\u6027\u4e3a 1 1 ) FWT[A] = merge(FWT[A_1] - FWT[A_0], FWT[A_1] + FWT[A_0]) FWT[A] = merge(FWT[A_1] - FWT[A_0], FWT[A_1] + FWT[A_0]) UFWT[A'] = merge(\\frac{FWT[A_1'] - FWT[A_0']}{2}, \\frac{FWT[A_1'] + FWT[A_0']}{2}) UFWT[A'] = merge(\\frac{FWT[A_1'] - FWT[A_0']}{2}, \\frac{FWT[A_1'] + FWT[A_0']}{2})","title":"\u5feb\u901f\u6c83\u5c14\u4ec0\u53d8\u6362"},{"location":"math/fwt/#_1","text":"\u6c83\u5c14\u4ec0\u8f6c\u6362\uff08Walsh Transform\uff09\u662f\u5728\u9891\u8c31\u5206\u6790\u4e0a\u4f5c\u4e3a\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\u7684\u66ff\u4ee3\u65b9\u6848\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u2014\u2014 \u7ef4\u57fa\u767e\u79d1 \u5176\u5b9e\u8fd9\u4e2a\u53d8\u6362\u5728\u4fe1\u53f7\u5904\u7406\u4e2d\u5e94\u7528\u5f88\u5e7f\u6cdb\uff0cfft \u662f double \u7c7b\u578b\u7684\uff0c\u4f46\u662f walsh \u628a\u4fe1\u53f7\u5728\u4e0d\u540c\u9707\u8361\u9891\u7387\u65b9\u6ce2\u4e0b\u62c6\u89e3\uff0c\u56e0\u6b64\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u7edd\u5bf9\u503c\u5927\u5c0f\u76f8\u540c\u7684\u6574\u6570\uff0c\u8fd9\u4f7f\u5f97\u4e0d\u9700\u8981\u4f5c\u6d6e\u70b9\u6570\u7684\u4e58\u6cd5\u8fd0\u7b97\uff0c\u63d0\u9ad8\u4e86\u8fd0\u7b97\u901f\u5ea6\u3002 \u6240\u4ee5\uff0cFWT \u548c FFT \u7684\u6838\u5fc3\u601d\u60f3\u5e94\u8be5\u662f\u76f8\u540c\u7684\u3002\u90fd\u662f\u5bf9\u6570\u7ec4\u7684\u53d8\u6362\u3002\u6211\u4eec\u8bbe\u6570\u7ec4 A A \u7ecf\u8fc7\u5feb\u901f\u6c83\u5c14\u4ec0\u53d8\u6362\u4e4b\u540e\u8bb0\u4f5c FWT[A] FWT[A] . \u90a3\u4e48 FWT \u6838\u5fc3\u601d\u60f3\u5c31\u662f\uff1a \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u65b0\u5e8f\u5217 C C \uff0c\u7531\u5e8f\u5217 A A \u548c\u5e8f\u5217 B B \u7ecf\u8fc7\u67d0\u8fd0\u7b97\u89c4\u5219\u5f97\u5230\uff0c\u5373 C = A \\cdot B C = A \\cdot B \u6211\u4eec\u5148\u6b63\u5411\u5f97\u5230 FWT[A], FWT[B] FWT[A], FWT[B] \u7136\u540e\u6839\u636e FWT[C]=FWT[A] \\cdot FWT[B] FWT[C]=FWT[A] \\cdot FWT[B] \u5728 O(n) O(n) \u6c42\u51fa FWT[C] FWT[C] \u7136\u540e\u9006\u5411\u60f3\u8fd0\u7b97\u5f97\u5230\u539f\u5e8f\u5217 C C \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlogn) O(nlogn) \u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0cFWT \u662f\u7528\u4e8e\u89e3\u51b3\u5bf9\u4e0b\u6807\u8fdb\u884c\u4f4d\u8fd0\u7b97\u5377\u79ef\u95ee\u9898\u7684\u65b9\u6cd5\u3002 \u516c\u5f0f\uff1a C[i] = \\sum_{i=j \\bigoplus k}A[j] * B[k] C[i] = \\sum_{i=j \\bigoplus k}A[j] * B[k] \uff08\u5176\u4e2d \\bigoplus \\bigoplus \u662f\u4e8c\u5143\u4f4d\u8fd0\u7b97\u4e2d\u7684\u67d0\u4e00\u79cd\uff0c * * \u662f\u666e\u901a\u4e58\u6cd5\uff09","title":"\u7b80\u4ecb"},{"location":"math/fwt/#fwt","text":"","title":"FWT \u7684\u8fd0\u7b97"},{"location":"math/fwt/#fwt-andand","text":"\u4e0e\u8fd0\u7b97\u548c\u6216\u8fd0\u7b97\u7684\u672c\u8d28\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u6216\u8fd0\u7b97\uff0c\u4e0e\u8fd0\u7b97\u4e5f\u662f\u53ef\u4ee5\u81ea\u5df1\u6839\u636e\u516c\u5f0f yy \u51fa\u6765\u7684\u3002","title":"FWT \u4e4b\u4e0e\uff08\\And\\And\uff09\u8fd0\u7b97\u548c\u6216\uff08||\uff09\u8fd0\u7b97"},{"location":"math/fwt/#a_ia_i","text":"\u5982\u679c\u6709 k=i|j k=i|j \uff0c\u90a3\u4e48 i i \u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a 1 1 \u7684\u4f4d\u7f6e\u548c j j \u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a 1 1 \u7684\u4f4d\u7f6e\u80af\u5b9a\u662f k k \u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a 1 1 \u7684\u4f4d\u7f6e\u7684\u5b50\u96c6\u3002 \u73b0\u5728\u8981\u5f97\u5230 FWT[C] = FWT[A] * FWT[B] FWT[C] = FWT[A] * FWT[B] \uff0c\u6211\u4eec\u5c31\u8981\u6784\u9020\u8fd9\u4e2a fwt \u7684\u89c4\u5219\u3002 \u6211\u4eec\u6309\u7167\u5b9a\u4e49\uff0c\u663e\u7136\u53ef\u4ee5\u6784\u9020 FWT[A] = A' = \\sum_{i=i|j}A[j] FWT[A] = A' = \\sum_{i=i|j}A[j] \uff0c\u6765\u8868\u793a j j \u6ee1\u8db3\u4e8c\u8fdb\u5236\u4e2d 1 1 \u4e3a i i \u7684\u5b50\u96c6\u3002 \u90a3\u4e48\u663e\u7136\u4f1a\u6709 C[i] = \\sum_{i=j|k}A[j]*B[k] \\Rightarrow FWT[C] = FWT[A] * FWT[B] C[i] = \\sum_{i=j|k}A[j]*B[k] \\Rightarrow FWT[C] = FWT[A] * FWT[B] \u90a3\u4e48\u6211\u4eec\u63a5\u4e0b\u6765\u770b FWT[A] FWT[A] \u600e\u4e48\u6c42\u3002 \u9996\u5148\u80af\u5b9a\u4e0d\u80fd\u679a\u4e3e\u4e86\uff0c\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002\u65e2\u7136\u4e0d\u80fd\u6574\u4f53\u679a\u4e3e\uff0c\u6211\u4eec\u5c31\u8003\u8651\u5206\u6cbb\u3002 \u6211\u4eec\u628a\u6574\u4e2a\u533a\u95f4\u4e8c\u5206\uff0c\u5176\u5b9e\u4e8c\u5206\u533a\u95f4\u4e4b\u540e\uff0c\u4e0b\u6807\u5199\u6210\u4e8c\u8fdb\u5236\u5f62\u5f0f\u662f\u6709\u89c4\u5f8b\u53ef\u5faa\u7684\u3002 \u6211\u4eec\u4ee4 A_0 A_0 \u8868\u793a A A \u7684\u524d\u4e00\u534a\uff0c A_1 A_1 \u8868\u793a\u533a\u95f4\u7684\u540e\u4e00\u534a\uff0c\u90a3\u4e48 A_0 A_0 \u5c31\u662f A \u4e0b\u6807\u6700\u5927\u503c\u7684\u6700\u9ad8\u4f4d\u4e3a 0 0 \uff0c\u4ed6\u7684\u5b50\u96c6\u5c31\u662f\u4ed6\u672c\u8eab\u7684\u5b50\u96c6\uff08\u56e0\u4e3a\u6700\u9ad8\u4f4d\u4e3a 0 0 \u4e86\uff09\uff0c\u4f46\u662f A_1 A_1 \u7684\u6700\u9ad8\u4f4d\u662f 1 1 \uff0c\u4ed6\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u96c6\u4e0d\u4ec5\u4ec5\u662f\u4ed6\u672c\u8eab\uff0c\u8fd8\u5305\u6700\u9ad8\u4f4d\u4e3a 0 0 \u7684\u5b50\u96c6\uff0c\u5373 FWT[A] = merge(FWT[A_0], FWT[A_0] + FWT[A_1]) FWT[A] = merge(FWT[A_0], FWT[A_0] + FWT[A_1]) \u5176\u4e2d merge \u8868\u793a\u50cf\u5b57\u7b26\u4e32\u62fc\u63a5\u4e00\u6837\u628a\u5b83\u4eec\u62fc\u8d77\u6765\uff0c + + \u5c31\u662f\u666e\u901a\u52a0\u6cd5\uff0c\u8868\u793a\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u76f8\u52a0\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u901a\u8fc7\u4e8c\u5206\u80fd\u5728 O(logn) O(logn) \u5b8c\u6210\u62fc\u63a5\uff0c\u6bcf\u6b21\u62fc\u63a5\u7684\u65f6\u5019\u8981\u5b8c\u6210\u4e00\u6b21\u8fd0\u7b97\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728 O(nlogn) O(nlogn) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f97\u5230\u4e86 FWT[A] FWT[A] \u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u53cd\u6f14\u4e86\uff0c\u5176\u5b9e\u53cd\u6f14\u662f\u5f88\u7b80\u5355\u7684\uff0c\u65e2\u7136\u77e5\u9053\u4e86 A_0 A_0 \u7684\u672c\u8eab\u7684\u5b50\u96c6\u662f\u4ed6\u81ea\u5df1 ( A_0 = FAT[A_0] A_0 = FAT[A_0] )\uff0c A_1 A_1 \u7684\u5b50\u96c6\u662f FAT[A_0] + FAT[A_1]\uff08A_1'= A_0' + A_1' FAT[A_0] + FAT[A_1]\uff08A_1'= A_0' + A_1' \uff09, \u90a3\u5c31\u5f88\u7b80\u5355\u7684\u5f97\u51fa\u53cd\u6f14\u7684\u9012\u63a8\u5f0f\u4e86\uff1a UFWT[A'] = merge(UFWT[A_0'], UFWT[A_1'] - UFWT[A_0']) UFWT[A'] = merge(UFWT[A_0'], UFWT[A_1'] - UFWT[A_0'])","title":"\u6216\u8fd0\u7b97 A_iA_i"},{"location":"math/fwt/#_2","text":"\u4e0e\u8fd0\u7b97\u7c7b\u6bd4\u6216\u8fd0\u7b97\u53ef\u4ee5\u5f97\u5230\u7c7b\u4f3c\u7ed3\u8bba FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_1]) FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_1]) UFWT[A'] = merge(UFWT[A_0'] - UFWT[A_1'], UFWT[A_1']) UFWT[A'] = merge(UFWT[A_0'] - UFWT[A_1'], UFWT[A_1'])","title":"\u4e0e\u8fd0\u7b97"},{"location":"math/fwt/#_3","text":"\u6700\u5e38\u8003\u7684\u5f02\u6216\u8fd0\u7b97\u3002 \u5f02\u6216\u7684\u5377\u79ef\u662f\u57fa\u4e8e\u5982\u4e0b\u539f\u7406\uff1a \u82e5\u6211\u4eec\u4ee4 i\\And j i\\And j \u4e2d 1 1 \u6570\u91cf\u7684\u5947\u5076\u6027\u4e3a i i \u4e0e j j \u7684\u5947\u5076\u6027\uff0c\u90a3\u4e48 i i \u4e0e k k \u7684\u5947\u5076\u6027\u5f02\u6216 j j \u548c k k \u7684\u5947\u5076\u6027\u7b49\u4e8e i \\operatorname{xor} j i \\operatorname{xor} j \u548c k k \u7684\u5947\u5076\u6027\u3002 \u5bf9\u4e8e FWT[A] FWT[A] \u7684\u8fd0\u7b97\u5176\u5b9e\u4e5f\u5f88\u597d\u5f97\u5230\u3002 \u516c\u5f0f\u5982\u4e0b\uff1a A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] ( C_1 C_1 \u8868\u793a i \\And j i \\And j \u5947\u5076\u6027\u4e3a 0 0 \uff0c C_2 C_2 \u8868\u793a i \\And j i \\And j \u7684\u5947\u5076\u6027\u4e3a 1 1 ) \u7ed3\u8bba\uff1a FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_0] - FWT[A_1]) FWT[A] = merge(FWT[A_0] + FWT[A_1], FWT[A_0] - FWT[A_1]) UFWT[A'] - merge(\\frac{FWT[A_0'] + FWT[A_1']}{2}, \\frac{FWT[A_0'] - FWT[A_1']}{2}) UFWT[A'] - merge(\\frac{FWT[A_0'] + FWT[A_1']}{2}, \\frac{FWT[A_0'] - FWT[A_1']}{2})","title":"\u5f02\u6216\u8fd0\u7b97"},{"location":"math/fwt/#_4","text":"\u7c7b\u6bd4\u5f02\u6216\u8fd0\u7b97\u7ed9\u51fa\u516c\u5f0f\uff1a A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] A[i] = \\sum_{C_1}A[j] - \\sum_{C_2}A[j] ( C_1 C_1 \u8868\u793a i|j i|j \u5947\u5076\u6027\u4e3a 0 0 \uff0c C_2 C_2 \u8868\u793a i|j i|j \u7684\u5947\u5076\u6027\u4e3a 1 1 ) FWT[A] = merge(FWT[A_1] - FWT[A_0], FWT[A_1] + FWT[A_0]) FWT[A] = merge(FWT[A_1] - FWT[A_0], FWT[A_1] + FWT[A_0]) UFWT[A'] = merge(\\frac{FWT[A_1'] - FWT[A_0']}{2}, \\frac{FWT[A_1'] + FWT[A_0']}{2}) UFWT[A'] = merge(\\frac{FWT[A_1'] - FWT[A_0']}{2}, \\frac{FWT[A_1'] + FWT[A_0']}{2})","title":"\u540c\u6216\u8fd0\u7b97"},{"location":"math/game-theory/","text":"\u535a\u5f08\u8bba \uff0c\u662f\u7ecf\u6d4e\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u4e3b\u8981\u7814\u7a76\u5177\u6709\u7ade\u4e89\u6216\u5bf9\u6297\u6027\u8d28\u7684\u5bf9\u8c61\uff0c\u5728\u4e00\u5b9a\u89c4\u5219\u4e0b\u4ea7\u751f\u7684\u5404\u79cd\u884c\u4e3a\u3002\u535a\u5f08\u8bba\u8003\u8651\u6e38\u620f\u4e2d\u7684\u4e2a\u4f53\u7684\u9884\u6d4b\u884c\u4e3a\u548c\u5b9e\u9645\u884c\u4e3a\uff0c\u5e76\u7814\u7a76\u5b83\u4eec\u7684\u4f18\u5316\u7b56\u7565\u3002 \u901a\u4fd7\u5730\u8bb2\uff0c\u535a\u5f08\u8bba\u4e3b\u8981\u7814\u7a76\u7684\u662f\uff1a\u5728\u4e00\u4e2a\u6e38\u620f\u4e2d\uff0c\u8fdb\u884c\u6e38\u620f\u7684\u591a\u4f4d\u73a9\u5bb6\u7684\u7b56\u7565\u3002 \u516c\u5e73\u7ec4\u5408\u6e38\u620f \u00b6 \u516c\u5e73\u7ec4\u5408\u6e38\u620f\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \u6e38\u620f\u6709\u4e24\u4e2a\u4eba\u53c2\u4e0e\uff0c\u4e8c\u8005\u8f6e\u6d41\u505a\u51fa\u51b3\u7b56\u3002\u4e14\u8fd9\u4e24\u4e2a\u4eba\u7684\u51b3\u7b56\u90fd\u5bf9\u81ea\u5df1\u6700\u6709\u5229\u3002 \u6e38\u620f\u4e2d\u7684\u540c\u4e00\u4e2a\u72b6\u6001\u4e0d\u53ef\u80fd\u591a\u6b21\u62b5\u8fbe\u3002\u4e14\u6e38\u620f\u4e0d\u4f1a\u6709\u5e73\u5c40\u51fa\u73b0\u3002 \u4efb\u610f\u4e00\u4e2a\u6e38\u620f\u8005\u5728\u67d0\u4e00\u786e\u5b9a\u72b6\u6001\u53ef\u4ee5\u4f5c\u51fa\u7684\u51b3\u7b56\u96c6\u5408\u53ea\u4e0e\u5f53\u524d\u7684\u72b6\u6001\u6709\u5173\uff0c\u800c\u4e0e\u6e38\u620f\u8005\u65e0\u5173\u3002 \u5927\u90e8\u5206\u7684\u68cb\u7c7b\u6e38\u620f\u90fd\u662f\u516c\u5e73\u7ec4\u5408\u6e38\u620f\uff0c\u5982\u56fd\u9645\u8c61\u68cb\u3001\u4e2d\u56fd\u8c61\u68cb\u3001\u56f4\u68cb\u3001\u4e94\u5b50\u68cb\u7b49\u3002 Nim \u6e38\u620f \u00b6 n n \u5806\u7269\u54c1\uff0c\u6bcf\u5806\u6709 a_i a_i \u4e2a\uff0c\u4e24\u4e2a\u73a9\u5bb6\u8f6e\u6d41\u53d6\u8d70\u4efb\u610f\u4e00\u5806\u7684\u4efb\u610f\u4e2a\u7269\u54c1\uff0c\u4f46\u4e0d\u80fd\u4e0d\u53d6\u3002 \u53d6\u8d70\u6700\u540e\u4e00\u4e2a\u7269\u54c1\u7684\u4eba\u83b7\u80dc\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u73b0\u5728\u6709 n=3 n=3 \u5806\u7269\u54c1\uff0c\u800c\u6bcf\u5806\u5206\u522b\u6709 2, 5, 4 2, 5, 4 \u4e2a\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d6\u8d70\u7b2c 1 1 \u5806\u4e2d\u7684 2 2 \u4e2a\u7269\u54c1\uff0c\u5c40\u9762\u5c31\u53d8\u6210\u4e86 0, 5, 4 0, 5, 4 \uff1b\u6216\u8005\u4e5f\u53ef\u4ee5\u53d6\u8d70\u7b2c 2 2 \u5806\u7684 4 4 \u4e2a\u7269\u54c1\uff0c\u5c40\u9762\u5c31\u53d8\u6210\u4e86 2, 1, 4 2, 1, 4 \u3002 \u5982\u679c\u73b0\u5728\u7684\u5c40\u9762\u4e3a 0, 0, 5 0, 0, 5 \uff0c\u7532\u53d6\u8d70\u4e86\u7b2c 3 3 \u5806\u7684 5 5 \u4e2a\u7269\u54c1\uff0c\u4e5f\u5c31\u662f\u53d6\u8d70\u4e86\u6700\u540e\u4e00\u4e2a\u7269\u54c1\uff0c\u6b64\u65f6\u7532\u83b7\u80dc\u3002 \u535a\u5f08\u56fe\u548c\u72b6\u6001 \u00b6 \u5982\u679c\u5c06\u6bcf\u4e2a\u72b6\u6001\u89c6\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u518d\u4ece\u6bcf\u4e2a\u72b6\u6001\u5411\u5b83\u7684\u540e\u7ee7\u72b6\u6001\u8fde\u8fb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u535a\u5f08\u72b6\u6001\u56fe\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8282\u70b9 (i, j, k) (i, j, k) \u8868\u793a\u5c40\u9762\u4e3a i, j, k i, j, k \u65f6\u7684\u72b6\u6001\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u4e0b\u9762\u7684\u535a\u5f08\u56fe\uff08\u7531\u4e8e\u7bc7\u5e45\u6709\u9650\uff0c\u6545\u4ec5\u663e\u793a\u90e8\u5206\u72b6\u6001\u8282\u70b9\u548c\u90e8\u5206\u8fb9\uff09\uff1a \u5b9a\u4e49 \u5fc5\u80dc\u72b6\u6001 \u4e3a \u5148\u624b\u5fc5\u80dc\u7684\u72b6\u6001 \uff0c \u5fc5\u8d25\u72b6\u6001 \u4e3a \u5148\u624b\u5fc5\u8d25\u7684\u72b6\u6001 \u3002 \u901a\u8fc7\u63a8\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e0b\u9762\u4e09\u6761\u5b9a\u7406\uff1a \u5b9a\u7406 1\uff1a\u6ca1\u6709\u540e\u7ee7\u72b6\u6001\u7684\u72b6\u6001\u662f\u5fc5\u8d25\u72b6\u6001\u3002 \u5b9a\u7406 2\uff1a\u4e00\u4e2a\u72b6\u6001\u662f\u5fc5\u80dc\u72b6\u6001\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8d25\u72b6\u6001\u4e3a\u5b83\u7684\u540e\u7ee7\u72b6\u6001\u3002 \u5b9a\u7406 3\uff1a\u4e00\u4e2a\u72b6\u6001\u662f\u5fc5\u8d25\u72b6\u6001\u5f53\u4e14\u4ec5\u5f53\u5b83\u7684\u6240\u6709\u540e\u7ee7\u72b6\u6001\u5747\u4e3a\u5fc5\u80dc\u72b6\u6001\u3002 \u5bf9\u4e8e\u5b9a\u7406 1\uff0c\u5982\u679c\u6e38\u620f\u8fdb\u884c\u4e0d\u4e0b\u53bb\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u73a9\u5bb6\u5c31\u8f93\u6389\u4e86\u6e38\u620f\u3002 \u5bf9\u4e8e\u5b9a\u7406 2\uff0c\u5982\u679c\u8be5\u72b6\u6001\u81f3\u5c11\u6709\u4e00\u4e2a\u540e\u7ee7\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u5230\u8be5\u5fc5\u8d25\u72b6\u6001\uff1b\u6b64\u65f6\u5bf9\u624b\u7684\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\u2014\u2014\u5bf9\u624b\u5fc5\u5b9a\u662f\u5931\u8d25\u7684\uff0c\u800c\u76f8\u53cd\u5730\uff0c\u81ea\u5df1\u5c31\u83b7\u5f97\u4e86\u80dc\u5229\u3002 \u5bf9\u4e8e\u5b9a\u7406 3\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u4e00\u4e2a\u540e\u7ee7\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\uff0c\u73a9\u5bb6\u53ea\u80fd\u64cd\u4f5c\u5230\u5fc5\u80dc\u72b6\u6001\uff1b\u6b64\u65f6\u5bf9\u624b\u7684\u72b6\u6001\u4e3a\u5fc5\u80dc\u72b6\u6001\u2014\u2014\u5bf9\u624b\u5fc5\u5b9a\u662f\u80dc\u5229\u7684\uff0c\u81ea\u5df1\u5c31\u8f93\u6389\u4e86\u6e38\u620f\u3002 \u5982\u679c\u535a\u5f08\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5219\u901a\u8fc7\u8fd9\u4e09\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7ed8\u51fa\u535a\u5f08\u56fe\u7684\u60c5\u51b5\u4e0b\u7528 O(N+M) O(N+M) \u7684\u65f6\u95f4\uff08\u5176\u4e2d N N \u4e3a\u72b6\u6001\u79cd\u6570\uff0c M M \u4e3a\u8fb9\u6570\uff09\u5f97\u51fa\u6bcf\u4e2a\u72b6\u6001\u662f\u5fc5\u80dc\u72b6\u6001\u8fd8\u662f\u5fc5\u8d25\u72b6\u6001\u3002 Nim \u548c \u00b6 \u8ba9\u6211\u4eec\u518d\u6b21\u56de\u987e Nim \u6e38\u620f\u3002 \u901a\u8fc7\u7ed8\u753b\u535a\u5f08\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(\\prod_{i=1}^n a_i) O(\\prod_{i=1}^n a_i) \u7684\u65f6\u95f4\u91cc\u6c42\u51fa\u8be5\u5c40\u9762\u662f\u5426\u5148\u624b\u5fc5\u8d62\u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u5728\u592a\u9ad8\u3002\u6709\u6ca1\u6709\u4ec0\u4e48\u5de7\u5999\u800c\u5feb\u901f\u7684\u65b9\u6cd5\u5462\uff1f \u5b9a\u4e49 Nim \u548c =a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n =a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \u3002 \u5f53\u4e14\u4ec5\u5f53 Nim \u548c\u4e3a 0 0 \u65f6\uff0c\u8be5\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\uff1b\u5426\u5219\u8be5\u72b6\u6001\u4e3a\u5fc5\u80dc\u72b6\u6001\u3002 \u8bc1\u660e \u00b6 \u4e3a\u4ec0\u4e48\u5f02\u6216\u503c\u4f1a\u548c\u72b6\u6001\u7684\u80dc\u8d1f\u6709\u5173\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u8fd9\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e\u8fc7\u7a0b\u3002 \u4e3a\u4e86\u8bc1\u660e\u8be5\u5b9a\u7406\uff0c\u53ea\u9700\u8981\u8bc1\u660e\u4e0b\u9762\u4e09\u4e2a\u5b9a\u7406\uff1a \u5b9a\u7406 1\uff1a\u6ca1\u6709\u540e\u7ee7\u72b6\u6001\u7684\u72b6\u6001\u662f\u5fc5\u8d25\u72b6\u6001\u3002 \u5b9a\u7406 2\uff1a\u5bf9\u4e8e a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \\neq 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \\neq 0 \u7684\u5c40\u9762\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u79cd\u79fb\u52a8\u4f7f\u5f97 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u3002 \u5b9a\u7406 3\uff1a\u5bf9\u4e8e a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u7684\u5c40\u9762\uff0c\u4e00\u5b9a\u4e0d\u5b58\u5728\u67d0\u79cd\u79fb\u52a8\u4f7f\u5f97 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u3002 \u5bf9\u4e8e\u5b9a\u7406 1\uff0c\u6ca1\u6709\u540e\u7ee7\u72b6\u6001\u7684\u72b6\u6001\u53ea\u6709\u4e00\u4e2a\uff0c\u5373\u5168 0 0 \u5c40\u9762\u3002\u6b64\u65f6 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u3002 \u5bf9\u4e8e\u5b9a\u7406 2\uff0c\u4e0d\u653e\u5047\u8bbe a_1 \\oplus a_2 \\oplus \\ldots a_n = k \\neq 0 a_1 \\oplus a_2 \\oplus \\ldots a_n = k \\neq 0 \u3002\u5982\u679c\u6211\u4eec\u8981\u5c06 a_i a_i \u6539\u4e3a a_i' a_i' \uff0c\u5219 a_i'=a_i \\oplus k a_i'=a_i \\oplus k \u3002 \u6839\u636e\u5f02\u6216\u5b9a\u4e49\uff0c\u4e00\u5b9a\u6709\u5947\u6570\u4e2a a_i a_i \u5728 k k \u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u9ad8\u4f4d\u4e3a 1 1 \u3002\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684 a_i a_i \u4e00\u5b9a\u4e5f\u6ee1\u8db3 a_i > a_i \\oplus k a_i > a_i \\oplus k \uff0c\u56e0\u800c\u8fd9\u4e5f\u662f\u4e2a\u5408\u6cd5\u7684\u79fb\u52a8\u3002 \u5bf9\u4e8e\u5b9a\u7406 3\uff0c\u5982\u679c\u6211\u4eec\u8981\u5c06 a_i a_i \u6539\u4e3a a_i' a_i' \uff0c\u5219\u6839\u636e\u5f02\u6216\u8fd0\u7b97\u5f8b\u53ef\u4ee5\u5f97\u51fa a_i=a_i' a_i=a_i' \uff0c\u56e0\u800c\u8fd9\u4e0d\u662f\u4e2a\u5408\u6cd5\u7684\u79fb\u52a8\u3002 \u6709\u5411\u56fe\u6e38\u620f\u4e0e SG \u51fd\u6570 \u00b6 \u6709\u5411\u56fe\u6e38\u620f\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u535a\u5f08\u6e38\u620f\u2014\u2014\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u7684\u516c\u5e73\u7ec4\u5408\u6e38\u620f\u90fd\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u6e38\u620f\u3002 \u5728\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e0a\u9762\u6709\u4e00\u4e2a\u68cb\u5b50\uff0c\u4e24\u4e2a\u73a9\u5bb6\u8f6e\u6d41\u6cbf\u7740\u6709\u5411\u8fb9\u63a8\u52a8\u68cb\u5b50\uff0c\u4e0d\u80fd\u8d70\u7684\u73a9\u5bb6\u5224\u8d1f\u3002 \u5b9a\u4e49 mex mex \u51fd\u6570\u7684\u503c\u4e3a\u4e0d\u5c5e\u4e8e\u96c6\u5408 S S \u4e2d\u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\uff0c\u5373\uff1a mex(S)=min\\{x\\} \\quad (x \\notin S, x \\in N) mex(S)=min\\{x\\} \\quad (x \\notin S, x \\in N) \u4f8b\u5982 mex(\\{0, 2, 4\\})=1 mex(\\{0, 2, 4\\})=1 \uff0c mex(\\{1, 2\\})=0 mex(\\{1, 2\\})=0 \u3002 \u5bf9\u4e8e\u72b6\u6001 x x \u548c\u5b83\u7684\u6240\u6709 k k \u4e2a\u540e\u7ee7\u72b6\u6001 y_1, y_2, \\ldots, y_k y_1, y_2, \\ldots, y_k \uff0c\u5b9a\u4e49 SG SG \u51fd\u6570\uff1a SG(x)=mex\\{SG(y_1), SG(y_2), \\ldots, G(y_k)\\} SG(x)=mex\\{SG(y_1), SG(y_2), \\ldots, G(y_k)\\} \u800c\u5bf9\u4e8e\u7531 n n \u4e2a\u6709\u5411\u56fe\u6e38\u620f\u7ec4\u6210\u7684\u7ec4\u5408\u6e38\u620f\uff0c\u8bbe\u5b83\u4eec\u7684\u8d77\u70b9\u5206\u522b\u4e3a s_1, s_2, \\ldots, s_n s_1, s_2, \\ldots, s_n \uff0c\u5219\u6709\u5b9a\u7406\uff1a \u5f53\u4e14\u4ec5\u5f53 SG(s_1) \\oplus SG(s_2) \\oplus \\ldots \\oplus SG(s_n) \\neq 0 SG(s_1) \\oplus SG(s_2) \\oplus \\ldots \\oplus SG(s_n) \\neq 0 \u65f6\uff0c\u8fd9\u4e2a\u6e38\u620f\u662f\u5148\u624b\u5fc5\u80dc\u7684\u3002 \u8fd9\u4e00\u5b9a\u7406\u88ab\u79f0\u4f5c SG \u5b9a\u7406\u3002 \u5c06 Nim \u6e38\u620f\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u6e38\u620f \u00b6 \u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6709 x x \u4e2a\u7269\u54c1\u7684\u5806\u89c6\u4e3a\u8282\u70b9 x x \uff0c\u5219\u5f53\u4e14\u4ec5\u5f53 y<x y<x \u65f6\uff0c\u8282\u70b9 x x \u53ef\u4ee5\u5230\u8fbe y y \u3002 \u90a3\u4e48\uff0c\u7531 n n \u4e2a\u5806\u7ec4\u6210\u7684 Nim \u6e38\u620f\uff0c\u5c31\u53ef\u4ee5\u89c6\u4e3a n n \u4e2a\u6709\u5411\u56fe\u6e38\u620f\u4e86\u3002 \u6839\u636e\u4e0a\u9762\u7684\u63a8\u8bba\uff0c\u53ef\u4ee5\u5f97\u51fa SG(x)=x SG(x)=x \u3002\u518d\u6839\u636e SG \u5b9a\u7406\uff0c\u5c31\u53ef\u4ee5\u5f97\u51fa Nim \u548c\u7684\u7ed3\u8bba\u4e86\u3002 \u53c2\u8003\u6587\u732e \u00b6 (\u8f6c\u8f7d)Nim \u6e38\u620f\u535a\u5f08 (\u6536\u96c6\u5b8c\u5168\u7248) - exponent - \u535a\u5ba2\u56ed [\u7ec4\u5408\u6e38\u620f\u4e0e\u535a\u5f08\u8bba]\u3010\u5b66\u4e60\u7b14\u8bb0\u3011 - Candy? - \u535a\u5ba2\u56ed","title":"\u535a\u5f08\u8bba"},{"location":"math/game-theory/#_1","text":"\u516c\u5e73\u7ec4\u5408\u6e38\u620f\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \u6e38\u620f\u6709\u4e24\u4e2a\u4eba\u53c2\u4e0e\uff0c\u4e8c\u8005\u8f6e\u6d41\u505a\u51fa\u51b3\u7b56\u3002\u4e14\u8fd9\u4e24\u4e2a\u4eba\u7684\u51b3\u7b56\u90fd\u5bf9\u81ea\u5df1\u6700\u6709\u5229\u3002 \u6e38\u620f\u4e2d\u7684\u540c\u4e00\u4e2a\u72b6\u6001\u4e0d\u53ef\u80fd\u591a\u6b21\u62b5\u8fbe\u3002\u4e14\u6e38\u620f\u4e0d\u4f1a\u6709\u5e73\u5c40\u51fa\u73b0\u3002 \u4efb\u610f\u4e00\u4e2a\u6e38\u620f\u8005\u5728\u67d0\u4e00\u786e\u5b9a\u72b6\u6001\u53ef\u4ee5\u4f5c\u51fa\u7684\u51b3\u7b56\u96c6\u5408\u53ea\u4e0e\u5f53\u524d\u7684\u72b6\u6001\u6709\u5173\uff0c\u800c\u4e0e\u6e38\u620f\u8005\u65e0\u5173\u3002 \u5927\u90e8\u5206\u7684\u68cb\u7c7b\u6e38\u620f\u90fd\u662f\u516c\u5e73\u7ec4\u5408\u6e38\u620f\uff0c\u5982\u56fd\u9645\u8c61\u68cb\u3001\u4e2d\u56fd\u8c61\u68cb\u3001\u56f4\u68cb\u3001\u4e94\u5b50\u68cb\u7b49\u3002","title":"\u516c\u5e73\u7ec4\u5408\u6e38\u620f"},{"location":"math/game-theory/#nim","text":"n n \u5806\u7269\u54c1\uff0c\u6bcf\u5806\u6709 a_i a_i \u4e2a\uff0c\u4e24\u4e2a\u73a9\u5bb6\u8f6e\u6d41\u53d6\u8d70\u4efb\u610f\u4e00\u5806\u7684\u4efb\u610f\u4e2a\u7269\u54c1\uff0c\u4f46\u4e0d\u80fd\u4e0d\u53d6\u3002 \u53d6\u8d70\u6700\u540e\u4e00\u4e2a\u7269\u54c1\u7684\u4eba\u83b7\u80dc\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u73b0\u5728\u6709 n=3 n=3 \u5806\u7269\u54c1\uff0c\u800c\u6bcf\u5806\u5206\u522b\u6709 2, 5, 4 2, 5, 4 \u4e2a\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d6\u8d70\u7b2c 1 1 \u5806\u4e2d\u7684 2 2 \u4e2a\u7269\u54c1\uff0c\u5c40\u9762\u5c31\u53d8\u6210\u4e86 0, 5, 4 0, 5, 4 \uff1b\u6216\u8005\u4e5f\u53ef\u4ee5\u53d6\u8d70\u7b2c 2 2 \u5806\u7684 4 4 \u4e2a\u7269\u54c1\uff0c\u5c40\u9762\u5c31\u53d8\u6210\u4e86 2, 1, 4 2, 1, 4 \u3002 \u5982\u679c\u73b0\u5728\u7684\u5c40\u9762\u4e3a 0, 0, 5 0, 0, 5 \uff0c\u7532\u53d6\u8d70\u4e86\u7b2c 3 3 \u5806\u7684 5 5 \u4e2a\u7269\u54c1\uff0c\u4e5f\u5c31\u662f\u53d6\u8d70\u4e86\u6700\u540e\u4e00\u4e2a\u7269\u54c1\uff0c\u6b64\u65f6\u7532\u83b7\u80dc\u3002","title":"Nim \u6e38\u620f"},{"location":"math/game-theory/#_2","text":"\u5982\u679c\u5c06\u6bcf\u4e2a\u72b6\u6001\u89c6\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u518d\u4ece\u6bcf\u4e2a\u72b6\u6001\u5411\u5b83\u7684\u540e\u7ee7\u72b6\u6001\u8fde\u8fb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u535a\u5f08\u72b6\u6001\u56fe\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8282\u70b9 (i, j, k) (i, j, k) \u8868\u793a\u5c40\u9762\u4e3a i, j, k i, j, k \u65f6\u7684\u72b6\u6001\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u4e0b\u9762\u7684\u535a\u5f08\u56fe\uff08\u7531\u4e8e\u7bc7\u5e45\u6709\u9650\uff0c\u6545\u4ec5\u663e\u793a\u90e8\u5206\u72b6\u6001\u8282\u70b9\u548c\u90e8\u5206\u8fb9\uff09\uff1a \u5b9a\u4e49 \u5fc5\u80dc\u72b6\u6001 \u4e3a \u5148\u624b\u5fc5\u80dc\u7684\u72b6\u6001 \uff0c \u5fc5\u8d25\u72b6\u6001 \u4e3a \u5148\u624b\u5fc5\u8d25\u7684\u72b6\u6001 \u3002 \u901a\u8fc7\u63a8\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e0b\u9762\u4e09\u6761\u5b9a\u7406\uff1a \u5b9a\u7406 1\uff1a\u6ca1\u6709\u540e\u7ee7\u72b6\u6001\u7684\u72b6\u6001\u662f\u5fc5\u8d25\u72b6\u6001\u3002 \u5b9a\u7406 2\uff1a\u4e00\u4e2a\u72b6\u6001\u662f\u5fc5\u80dc\u72b6\u6001\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8d25\u72b6\u6001\u4e3a\u5b83\u7684\u540e\u7ee7\u72b6\u6001\u3002 \u5b9a\u7406 3\uff1a\u4e00\u4e2a\u72b6\u6001\u662f\u5fc5\u8d25\u72b6\u6001\u5f53\u4e14\u4ec5\u5f53\u5b83\u7684\u6240\u6709\u540e\u7ee7\u72b6\u6001\u5747\u4e3a\u5fc5\u80dc\u72b6\u6001\u3002 \u5bf9\u4e8e\u5b9a\u7406 1\uff0c\u5982\u679c\u6e38\u620f\u8fdb\u884c\u4e0d\u4e0b\u53bb\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u73a9\u5bb6\u5c31\u8f93\u6389\u4e86\u6e38\u620f\u3002 \u5bf9\u4e8e\u5b9a\u7406 2\uff0c\u5982\u679c\u8be5\u72b6\u6001\u81f3\u5c11\u6709\u4e00\u4e2a\u540e\u7ee7\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u5230\u8be5\u5fc5\u8d25\u72b6\u6001\uff1b\u6b64\u65f6\u5bf9\u624b\u7684\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\u2014\u2014\u5bf9\u624b\u5fc5\u5b9a\u662f\u5931\u8d25\u7684\uff0c\u800c\u76f8\u53cd\u5730\uff0c\u81ea\u5df1\u5c31\u83b7\u5f97\u4e86\u80dc\u5229\u3002 \u5bf9\u4e8e\u5b9a\u7406 3\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u4e00\u4e2a\u540e\u7ee7\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\uff0c\u73a9\u5bb6\u53ea\u80fd\u64cd\u4f5c\u5230\u5fc5\u80dc\u72b6\u6001\uff1b\u6b64\u65f6\u5bf9\u624b\u7684\u72b6\u6001\u4e3a\u5fc5\u80dc\u72b6\u6001\u2014\u2014\u5bf9\u624b\u5fc5\u5b9a\u662f\u80dc\u5229\u7684\uff0c\u81ea\u5df1\u5c31\u8f93\u6389\u4e86\u6e38\u620f\u3002 \u5982\u679c\u535a\u5f08\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5219\u901a\u8fc7\u8fd9\u4e09\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7ed8\u51fa\u535a\u5f08\u56fe\u7684\u60c5\u51b5\u4e0b\u7528 O(N+M) O(N+M) \u7684\u65f6\u95f4\uff08\u5176\u4e2d N N \u4e3a\u72b6\u6001\u79cd\u6570\uff0c M M \u4e3a\u8fb9\u6570\uff09\u5f97\u51fa\u6bcf\u4e2a\u72b6\u6001\u662f\u5fc5\u80dc\u72b6\u6001\u8fd8\u662f\u5fc5\u8d25\u72b6\u6001\u3002","title":"\u535a\u5f08\u56fe\u548c\u72b6\u6001"},{"location":"math/game-theory/#nim_1","text":"\u8ba9\u6211\u4eec\u518d\u6b21\u56de\u987e Nim \u6e38\u620f\u3002 \u901a\u8fc7\u7ed8\u753b\u535a\u5f08\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(\\prod_{i=1}^n a_i) O(\\prod_{i=1}^n a_i) \u7684\u65f6\u95f4\u91cc\u6c42\u51fa\u8be5\u5c40\u9762\u662f\u5426\u5148\u624b\u5fc5\u8d62\u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u5728\u592a\u9ad8\u3002\u6709\u6ca1\u6709\u4ec0\u4e48\u5de7\u5999\u800c\u5feb\u901f\u7684\u65b9\u6cd5\u5462\uff1f \u5b9a\u4e49 Nim \u548c =a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n =a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \u3002 \u5f53\u4e14\u4ec5\u5f53 Nim \u548c\u4e3a 0 0 \u65f6\uff0c\u8be5\u72b6\u6001\u4e3a\u5fc5\u8d25\u72b6\u6001\uff1b\u5426\u5219\u8be5\u72b6\u6001\u4e3a\u5fc5\u80dc\u72b6\u6001\u3002","title":"Nim \u548c"},{"location":"math/game-theory/#_3","text":"\u4e3a\u4ec0\u4e48\u5f02\u6216\u503c\u4f1a\u548c\u72b6\u6001\u7684\u80dc\u8d1f\u6709\u5173\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u8fd9\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e\u8fc7\u7a0b\u3002 \u4e3a\u4e86\u8bc1\u660e\u8be5\u5b9a\u7406\uff0c\u53ea\u9700\u8981\u8bc1\u660e\u4e0b\u9762\u4e09\u4e2a\u5b9a\u7406\uff1a \u5b9a\u7406 1\uff1a\u6ca1\u6709\u540e\u7ee7\u72b6\u6001\u7684\u72b6\u6001\u662f\u5fc5\u8d25\u72b6\u6001\u3002 \u5b9a\u7406 2\uff1a\u5bf9\u4e8e a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \\neq 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \\neq 0 \u7684\u5c40\u9762\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u79cd\u79fb\u52a8\u4f7f\u5f97 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u3002 \u5b9a\u7406 3\uff1a\u5bf9\u4e8e a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u7684\u5c40\u9762\uff0c\u4e00\u5b9a\u4e0d\u5b58\u5728\u67d0\u79cd\u79fb\u52a8\u4f7f\u5f97 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u3002 \u5bf9\u4e8e\u5b9a\u7406 1\uff0c\u6ca1\u6709\u540e\u7ee7\u72b6\u6001\u7684\u72b6\u6001\u53ea\u6709\u4e00\u4e2a\uff0c\u5373\u5168 0 0 \u5c40\u9762\u3002\u6b64\u65f6 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 \u3002 \u5bf9\u4e8e\u5b9a\u7406 2\uff0c\u4e0d\u653e\u5047\u8bbe a_1 \\oplus a_2 \\oplus \\ldots a_n = k \\neq 0 a_1 \\oplus a_2 \\oplus \\ldots a_n = k \\neq 0 \u3002\u5982\u679c\u6211\u4eec\u8981\u5c06 a_i a_i \u6539\u4e3a a_i' a_i' \uff0c\u5219 a_i'=a_i \\oplus k a_i'=a_i \\oplus k \u3002 \u6839\u636e\u5f02\u6216\u5b9a\u4e49\uff0c\u4e00\u5b9a\u6709\u5947\u6570\u4e2a a_i a_i \u5728 k k \u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u9ad8\u4f4d\u4e3a 1 1 \u3002\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684 a_i a_i \u4e00\u5b9a\u4e5f\u6ee1\u8db3 a_i > a_i \\oplus k a_i > a_i \\oplus k \uff0c\u56e0\u800c\u8fd9\u4e5f\u662f\u4e2a\u5408\u6cd5\u7684\u79fb\u52a8\u3002 \u5bf9\u4e8e\u5b9a\u7406 3\uff0c\u5982\u679c\u6211\u4eec\u8981\u5c06 a_i a_i \u6539\u4e3a a_i' a_i' \uff0c\u5219\u6839\u636e\u5f02\u6216\u8fd0\u7b97\u5f8b\u53ef\u4ee5\u5f97\u51fa a_i=a_i' a_i=a_i' \uff0c\u56e0\u800c\u8fd9\u4e0d\u662f\u4e2a\u5408\u6cd5\u7684\u79fb\u52a8\u3002","title":"\u8bc1\u660e"},{"location":"math/game-theory/#sg","text":"\u6709\u5411\u56fe\u6e38\u620f\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u535a\u5f08\u6e38\u620f\u2014\u2014\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u7684\u516c\u5e73\u7ec4\u5408\u6e38\u620f\u90fd\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u6e38\u620f\u3002 \u5728\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e0a\u9762\u6709\u4e00\u4e2a\u68cb\u5b50\uff0c\u4e24\u4e2a\u73a9\u5bb6\u8f6e\u6d41\u6cbf\u7740\u6709\u5411\u8fb9\u63a8\u52a8\u68cb\u5b50\uff0c\u4e0d\u80fd\u8d70\u7684\u73a9\u5bb6\u5224\u8d1f\u3002 \u5b9a\u4e49 mex mex \u51fd\u6570\u7684\u503c\u4e3a\u4e0d\u5c5e\u4e8e\u96c6\u5408 S S \u4e2d\u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\uff0c\u5373\uff1a mex(S)=min\\{x\\} \\quad (x \\notin S, x \\in N) mex(S)=min\\{x\\} \\quad (x \\notin S, x \\in N) \u4f8b\u5982 mex(\\{0, 2, 4\\})=1 mex(\\{0, 2, 4\\})=1 \uff0c mex(\\{1, 2\\})=0 mex(\\{1, 2\\})=0 \u3002 \u5bf9\u4e8e\u72b6\u6001 x x \u548c\u5b83\u7684\u6240\u6709 k k \u4e2a\u540e\u7ee7\u72b6\u6001 y_1, y_2, \\ldots, y_k y_1, y_2, \\ldots, y_k \uff0c\u5b9a\u4e49 SG SG \u51fd\u6570\uff1a SG(x)=mex\\{SG(y_1), SG(y_2), \\ldots, G(y_k)\\} SG(x)=mex\\{SG(y_1), SG(y_2), \\ldots, G(y_k)\\} \u800c\u5bf9\u4e8e\u7531 n n \u4e2a\u6709\u5411\u56fe\u6e38\u620f\u7ec4\u6210\u7684\u7ec4\u5408\u6e38\u620f\uff0c\u8bbe\u5b83\u4eec\u7684\u8d77\u70b9\u5206\u522b\u4e3a s_1, s_2, \\ldots, s_n s_1, s_2, \\ldots, s_n \uff0c\u5219\u6709\u5b9a\u7406\uff1a \u5f53\u4e14\u4ec5\u5f53 SG(s_1) \\oplus SG(s_2) \\oplus \\ldots \\oplus SG(s_n) \\neq 0 SG(s_1) \\oplus SG(s_2) \\oplus \\ldots \\oplus SG(s_n) \\neq 0 \u65f6\uff0c\u8fd9\u4e2a\u6e38\u620f\u662f\u5148\u624b\u5fc5\u80dc\u7684\u3002 \u8fd9\u4e00\u5b9a\u7406\u88ab\u79f0\u4f5c SG \u5b9a\u7406\u3002","title":"\u6709\u5411\u56fe\u6e38\u620f\u4e0e SG \u51fd\u6570"},{"location":"math/game-theory/#nim_2","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6709 x x \u4e2a\u7269\u54c1\u7684\u5806\u89c6\u4e3a\u8282\u70b9 x x \uff0c\u5219\u5f53\u4e14\u4ec5\u5f53 y<x y<x \u65f6\uff0c\u8282\u70b9 x x \u53ef\u4ee5\u5230\u8fbe y y \u3002 \u90a3\u4e48\uff0c\u7531 n n \u4e2a\u5806\u7ec4\u6210\u7684 Nim \u6e38\u620f\uff0c\u5c31\u53ef\u4ee5\u89c6\u4e3a n n \u4e2a\u6709\u5411\u56fe\u6e38\u620f\u4e86\u3002 \u6839\u636e\u4e0a\u9762\u7684\u63a8\u8bba\uff0c\u53ef\u4ee5\u5f97\u51fa SG(x)=x SG(x)=x \u3002\u518d\u6839\u636e SG \u5b9a\u7406\uff0c\u5c31\u53ef\u4ee5\u5f97\u51fa Nim \u548c\u7684\u7ed3\u8bba\u4e86\u3002","title":"\u5c06 Nim \u6e38\u620f\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u6e38\u620f"},{"location":"math/game-theory/#_4","text":"(\u8f6c\u8f7d)Nim \u6e38\u620f\u535a\u5f08 (\u6536\u96c6\u5b8c\u5168\u7248) - exponent - \u535a\u5ba2\u56ed [\u7ec4\u5408\u6e38\u620f\u4e0e\u535a\u5f08\u8bba]\u3010\u5b66\u4e60\u7b14\u8bb0\u3011 - Candy? - \u535a\u5ba2\u56ed","title":"\u53c2\u8003\u6587\u732e"},{"location":"math/gauss/","text":"\u9ad8\u65af\u6d88\u5143 \u00b6 \u9ad8\u65af\u6d88\u5143\u6cd5\u662f\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u7ecf\u5178\u7b97\u6cd5\uff0c\u5b83\u5728\u5f53\u4ee3\u6570\u5b66\u4e2d\u6709\u7740\u91cd\u8981\u7684\u5730\u4f4d\u548c\u4ef7\u503c\uff0c\u662f\u7ebf\u6027\u4ee3\u6570\u8bfe\u7a0b\u6559\u5b66\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002 \u9ad8\u65af\u6d88\u5143\u6cd5\u9664\u4e86\u7528\u4e8e\u7ebf\u6027\u65b9\u7a0b\u7ec4\u6c42\u89e3\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u884c\u5217\u5f0f\u8ba1\u7b97\u3001\u6c42\u77e9\u9635\u7684\u9006\uff0c\u4ee5\u53ca\u5176\u4ed6\u8ba1\u7b97\u673a\u548c\u5de5\u7a0b\u65b9\u9762\u3002 \u590f\u5efa\u660e\u7b49\u4eba\u4e4b\u524d\u63d0\u51fa\u4e86\u5e94\u7528\u56fe\u5f62\u5904\u7406\u5668 (CPU) \u52a0\u901f\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u6240\u63d0\u51fa\u7684\u7b97\u6cd5\u4e0e\u57fa\u4e8e CPU \u7684\u7b97\u6cd5\u76f8\u6bd4\u8f83\u53d6\u5f97\u66f4\u5feb\u7684\u8fd0\u7b97\u901f\u5ea6\u3002\u4e8c\u662f\u63d0\u51fa\u5404\u79cd\u53d8\u5f02\u9ad8\u65af\u6d88\u5143\u6cd5\u4ee5\u6ee1\u8db3\u7279\u5b9a\u5de5\u4f5c\u7684\u9700\u8981\u3002 \u6d88\u5143\u6cd5\u53ca\u9ad8\u65af\u6d88\u5143\u6cd5\u601d\u60f3 \u00b6 \u6d88\u5143\u6cd5\u8bf4\u660e \u00b6 \u6d88\u5143\u6cd5\u662f\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u7684\u672a\u77e5\u6570\u7528\u542b\u6709\u53e6\u4e00\u672a\u77e5\u6570\u7684\u4ee3\u6570\u5f0f\u8868\u793a\uff0c\u5e76\u5c06\u5176\u5e26\u5165\u5230\u53e6\u4e00\u65b9\u7a0b\u4e2d\uff0c\u8fd9\u5c31\u6d88\u53bb\u4e86\u4e00\u672a\u77e5\u6570\uff0c\u5f97\u5230\u4e00\u89e3\uff1b\u6216\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u500d\u4e58\u67d0\u4e2a\u5e38\u6570\u52a0\u5230\u53e6\u5916\u4e00\u65b9\u7a0b\u4e2d\u53bb\uff0c\u4e5f\u53ef\u8fbe\u5230\u6d88\u53bb\u4e00\u672a\u77e5\u6570\u7684\u6bcd\u7684\u3002\u6d88\u5143\u6cd5\u4e3b\u8981\u7528\u4e8e\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002 \u4f8b\u4e00\uff1a\u5229\u7528\u6d88\u5143\u6cd5\u6c42\u89e3\u4e8c\u5143\u4e00\u6b21\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\left\\{\\begin{aligned} 4x+y&=100 \\notag \\\\ x-y&=100 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} 4x+y&=100 \\notag \\\\ x-y&=100 \\notag \\end{aligned}\\right. \u89e3\uff1a\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u4e24\u65b9\u7a0b\u76f8\u52a0\uff0c\u6d88\u5143 y y \u53ef\u5f97\uff1a 5x = 200 5x = 200 \u89e3\u5f97\uff1a x = 40 x = 40 \u5c06 x = 40 x = 40 \u4ee3\u5165\u65b9\u7a0b\u7ec4\u4e2d\u7b2c\u4e8c\u4e2a\u65b9\u7a0b\u53ef\u5f97\uff1a y = -60 y = -60 \u6d88\u5143\u6cd5\u7406\u8bba\u7684\u6838\u5fc3 \u00b6 \u6d88\u5143\u6cd5\u7406\u8bba\u7684\u6838\u5fc3\u4e3b\u8981\u5982\u4e0b\uff1a \u4e24\u65b9\u7a0b\u4e92\u6362\uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u4e58\u4ee5\u975e\u96f6\u6570 k k \uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u4e58\u4ee5\u6570 k k \u52a0\u4e0a\u53e6\u4e00\u65b9\u7a0b\uff0c\u89e3\u4e0d\u53d8\u3002 \u9ad8\u65af\u6d88\u5143\u6cd5\u601d\u60f3\u6982\u5ff5 \u00b6 \u5fb7\u56fd\u6570\u5b66\u5bb6\u9ad8\u65af\u5bf9\u6d88\u5143\u6cd5\u8fdb\u884c\u4e86\u601d\u8003\u5206\u6790\uff0c\u5f97\u51fa\u4e86\u5982\u4e0b\u7ed3\u8bba\uff1a \u5728\u6d88\u5143\u6cd5\u4e2d\uff0c\u53c2\u4e0e\u8ba1\u7b97\u548c\u53d1\u751f\u6539\u53d8\u7684\u662f\u65b9\u7a0b\u4e2d\u5404\u53d8\u91cf\u7684\u7cfb\u6570\uff1b \u5404\u53d8\u91cf\u5e76\u672a\u53c2\u4e0e\u8ba1\u7b97\uff0c\u4e14\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff1b \u53ef\u4ee5\u5229\u7528\u7cfb\u6570\u7684\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u4ece\u800c\u7701\u7565\u53d8\u91cf\uff1b \u5728\u8ba1\u7b97\u4e2d\u5c06\u53d8\u91cf\u7b80\u5316\u7701\u7565\uff0c\u65b9\u7a0b\u7684\u89e3\u4e0d\u53d8\u3002 \u9ad8\u65af\u5728\u8fd9\u4e9b\u7ed3\u8bba\u7684\u57fa\u7840\u4e0a\uff0c\u63d0\u51fa\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u9996\u5148\u5c06\u65b9\u7a0b\u7684\u589e\u5e7f\u77e9\u9635\u5229\u7528\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u7136\u540e\u4ee5\u7ebf\u6027\u65e0\u5173\u4e3a\u51c6\u5219\u5bf9\u81ea\u7531\u672a\u77e5\u91cf\u8d4b\u503c\uff0c\u6700\u540e\u5217\u51fa\u8868\u8fbe\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002 \u9ad8\u65af\u6d88\u5143\u4e94\u6b65\u9aa4\u6cd5 \u00b6 \u9ad8\u65af\u6d88\u5143\u6cd5\u5728\u5c06\u589e\u5e7f\u77e9\u9635\u5316\u4e3a\u6700\u7b80\u5f62\u540e\u5bf9\u4e8e\u81ea\u7531\u672a\u77e5\u91cf\u7684\u8d4b\u503c\uff0c\u9700\u8981\u638c\u63e1\u7ebf\u6027\u76f8\u5173\u77e5\u8bc6\uff0c\u4e14\u8d4b\u503c\u5b58\u5728\u4eba\u5de5\u7ecf\u9a8c\u7684\u56e0\u7d20\uff0c\u4f7f\u5f97\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u6709\u4e00\u5b9a\u7684\u56f0\u96be\uff0c\u5c06\u9ad8\u65af\u6d88\u5143\u6cd5\u5212\u5206\u4e3a\u4e94\u6b65\u9aa4\uff0c\u4ece\u800c\u63d0\u51fa\u4e94\u6b65\u9aa4\u6cd5\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u884c\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62\uff1b \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1b \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1b \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1b \u5217\u8868\u793a\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002 \u5229\u7528\u5b9e\u4f8b\u8fdb\u4e00\u6b65\u8bf4\u660e\u8be5\u7b97\u6cd5\u7684\u8fd0\u4f5c\u60c5\u51b5\u3002 \u4f8b\u4e8c\uff1a\u5229\u7528\u9ad8\u65af\u6d88\u5143\u6cd5\u4e94\u6b65\u9aa4\u6cd5\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\left\\{\\begin{aligned} 2x_1+5x_3+6x_4&=9 \\notag \\\\ x_3+x_4&=-4 \\notag \\\\ 2x_3+2x_4&=-8 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} 2x_1+5x_3+6x_4&=9 \\notag \\\\ x_3+x_4&=-4 \\notag \\\\ 2x_3+2x_4&=-8 \\notag \\end{aligned}\\right. \u589e\u5e7f\u77e9\u9635\u884c\uff08\u521d\u7b49\uff09\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62 \u00b6 \u6240\u8c13\u589e\u5e7f\u77e9\u9635\uff0c\u5373\u4e3a\u65b9\u7a0b\u7ec4\u7cfb\u6570\u77e9\u9635 A A \u4e0e\u5e38\u6570\u5217 b b \u7684\u5e76\u751f\u6210\u7684\u65b0\u77e9\u9635\uff0c\u5373 (A | b) (A | b) \uff0c\u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u5373\u662f\u5229\u7528\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u601d\u60f3\u7406\u5ff5\uff0c\u7701\u7565\u4e86\u53d8\u91cf\u800c\u7528\u53d8\u91cf\u7684\u7cfb\u6570\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u589e\u5e7f\u77e9\u9635\u4e2d\u7528\u7ad6\u7ebf\u9694\u5f00\u4e86\u7cfb\u6570\u77e9\u9635\u548c\u5e38\u6570\u5217\uff0c\u4ee3\u8868\u4e86\u7b49\u4e8e\u7b26\u53f7\u3002 \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 2 & 2 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ -8 \\end{matrix} \\right) \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 2 & 2 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ -8 \\end{matrix} \\right) \\xrightarrow{r_3-2r_2} \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{r_3-2r_2} \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \u5316\u4e3a\u884c\u9636\u68af\u5f62 \\xrightarrow{\\frac{r_1}{2}} \\left(\\begin{matrix} 1 & 0 & 2.5 & 3 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 4.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{\\frac{r_1}{2}} \\left(\\begin{matrix} 1 & 0 & 2.5 & 3 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 4.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{r_1-r_2 \\times 2.5} \\left(\\begin{matrix} 1 & 0 & 0 & 0.5 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 14.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{r_1-r_2 \\times 2.5} \\left(\\begin{matrix} 1 & 0 & 0 & 0.5 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 14.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \u5316\u4e3a\u6700\u7b80\u5f62 \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4 \u00b6 \\left\\{\\begin{aligned} x_1+0.5x_4 &= 14.5 \\notag\\\\ x_3+x_4 &= -4 \\notag \\\\ \\end{aligned}\\right. \\left\\{\\begin{aligned} x_1+0.5x_4 &= 14.5 \\notag\\\\ x_3+x_4 &= -4 \\notag \\\\ \\end{aligned}\\right. \u89e3\u91ca \u6240\u8c13\u7684\u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u5373\u662f\u5728\u884c\u6700\u7b80\u5f62\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u4e4b\u91cd\u65b0\u4e66\u5199\u4e3a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u5f62\u5f0f\uff0c\u5373\u5c06\u884c\u6700\u7b80\u5f62\u4e2d\u5404\u4f4d\u7f6e\u7684\u7cfb\u6570\u91cd\u65b0\u8d4b\u4e88\u53d8\u91cf\uff0c\u4e2d\u95f4\u7684\u7ad6\u7ebf\u8fd8\u539f\u4e3a\u7b49\u53f7\u3002 \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf \u00b6 \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5\\notag \\\\ x_3 &= -x_4-4\\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5\\notag \\\\ x_3 &= -x_4-4\\notag \\end{aligned}\\right. \u89e3\u91ca \u5373\u662f\u5bf9\u4e8e\u6240\u8fd8\u539f\u7684\u7ebf\u6027\u65b9\u7a0b\u7ec4\u800c\u8a00\uff0c\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u6bcf\u4e2a\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u5176\u4ed6\u91cf\u8868\u8fbe\u51fa\u6765\u3002\u5982\u65b9\u7a0b\u7ec4\u4e24\u65b9\u7a0b\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf x_1 x_1 \u548c x_3 x_3 \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf \u00b6 \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5 \\notag \\\\ x_2 &= x_2 \\notag \\\\ x_3 &= -x_4-4 \\notag \\\\ x_4 &= x_4 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5 \\notag \\\\ x_2 &= x_2 \\notag \\\\ x_3 &= -x_4-4 \\notag \\\\ x_4 &= x_4 \\notag \\end{aligned}\\right. \u89e3\u91ca \u7b2c 3 \u6b65\u4e2d\uff0c\u6c42\u89e3\u51fa\u53d8\u91cf x_1 x_1 \u548c x_3 x_3 \uff0c\u4ece\u800c\u8bf4\u660e\u4e86\u65b9\u7a0b\u5269\u4f59\u7684\u53d8\u91cf x_2 x_2 \u548c x_4 x_4 \u4e0d\u53d7\u65b9\u7a0b\u7ec4\u7684\u7ea6\u675f\uff0c\u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u9700\u8981\u5728\u7b2c 3 \u6b65\u9aa4\u89e3\u5f97\u57fa\u7840\u4e0a\u8fdb\u884c\u89e3\u5f97\u8865\u5145\uff0c\u8865\u5145\u7684\u65b9\u6cd5\u4e3a x_2 = x_2,x_4 = x_4 x_2 = x_2,x_4 = x_4 \uff0c\u8fd9\u79cd\u89e3\u5f97\u8865\u5145\u65b9\u5f0f\u7b26\u5408\u81ea\u7531\u672a\u77e5\u91cf\u5b9a\u4e49\uff0c\u5e76\u6613\u4e8e\u7406\u89e3\uff0c\u56e0\u4e3a\u662f\u81ea\u7531\u672a\u77e5\u91cf\u800c\u4e0d\u53d7\u7ea6\u675f\uff0c\u6240\u4ee5\u53ea\u80fd\u81ea\u5df1\u7b49\u4e8e\u81ea\u5df1\u3002 \u5217\u8868\u793a\u65b9\u7a0b\u7ec4\u7684\u901a\u89e3 \u00b6 \\begin{aligned} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\end{pmatrix} &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} x_2+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} x_4 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\\\ &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} C_1+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} C_2 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\end{aligned} \\begin{aligned} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\end{pmatrix} &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} x_2+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} x_4 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\\\ &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} C_1+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} C_2 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\end{aligned} \u5176\u4e2d C_1 C_1 \u548c C_2 C_2 \u4e3a\u4efb\u610f\u5e38\u6570\u3002 \u89e3\u91ca \u5373\u5728\u7b2c 4 \u6b65\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u89e3\u8868\u8fbe\u4e3a\u5217\u5411\u91cf\u7ec4\u5408\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u540c\u65f6\u7531\u4e8e x_2 x_2 \u548c x_4 x_4 \u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u5728\u89e3\u5f97\u53f3\u8fb9\uff0c\u4ee4\u4e8c\u8005\u5206\u522b\u4e3a\u4efb\u610f\u5e38\u6570 C_1 C_1 \u548c C_2 C_2 \uff0c\u5373\u5b9e\u73b0\u4e86\u5bf9\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002 \u884c\u5217\u5f0f \u00b6 N \\times N N \\times N \u65b9\u9635\u884c\u5217\u5f0f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6240\u6709\u5217\u5411\u91cf\u6240\u5939\u7684\u51e0\u4f55\u4f53\u7684\u6709\u5411\u4f53\u79ef \u4f8b\u5982\uff1a \\begin{vmatrix} 1 & 0 \\\\ 0 & 1 \\end{vmatrix} = 1 \\begin{vmatrix} 1 & 0 \\\\ 0 & 1 \\end{vmatrix} = 1 \\begin{vmatrix} 1 & 2 \\\\ 2 & 1 \\end{vmatrix} = -3 \\begin{vmatrix} 1 & 2 \\\\ 2 & 1 \\end{vmatrix} = -3 \u884c\u5217\u5f0f\u6709\u516c\u5f0f D = \\left| A \\right| = \\sum(-1)^va_{1,l_1}a_{2,l_2}\\dots a_{n,l_n} D = \\left| A \\right| = \\sum(-1)^va_{1,l_1}a_{2,l_2}\\dots a_{n,l_n} \u5176\u4e2d v v \u4e3a l_1 l_1 , l_2 l_2 , \\cdots \\cdots , l_n l_n \u4e2d\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002 \u901a\u8fc7\u4f53\u79ef\u6982\u5ff5\u7406\u89e3\u884c\u5217\u5f0f\u4e0d\u53d8\u6027\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u529e\u6cd5\uff1a \u77e9\u9635\u8f6c\u7f6e\uff0c\u884c\u5217\u5f0f\u4e0d\u53d8\uff1b \u77e9\u9635\u884c\u4ea4\u6362\uff0c\u884c\u5217\u5f0f\u53d6\u53cd\uff1b \u77e9\u9635\u884c\u53e0\u52a0\uff0c\u884c\u5217\u5f0f\u4e0d\u53d8\uff1b \u77e9\u9635\u884c\u4f38\u957f\uff0c\u884c\u5217\u5f0f\u7b49\u6bd4\u4f8b\u53d8\u5927\u3002 \u7531\u6b64\uff0c\u53d1\u73b0\u9ad8\u65af\u6d88\u5143\u4e0d\u6539\u53d8\u77e9\u9635\u884c\u5217\u5f0f\uff0c\u4e14\u6700\u7ec8\u884c\u5217\u5f0f\u7b49\u4e8e\u5012\u4e09\u89d2\u77e9\u9635\u7684\u5bf9\u89d2\u7ebf\u4e58\u79ef\u3002 \u751f\u6210\u6811\u8ba1\u6570 \u00b6 \u4e00\u4e2a\u65e0\u5411\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570\u4e3a\u90bb\u63a5\u77e9\u9635\u5ea6\u6570\u77e9\u9635\u53bb\u4e00\u884c\u4e00\u5217\u7684\u884c\u5217\u5f0f\u3002 \u8be6\u89c1\uff1a \u77e9\u9635\u6811\u5b9a\u7406 \u4f8b\u5982\uff0c\u4e00\u4e2a\u6b63\u65b9\u5f62\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570 \\begin{pmatrix} 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\end{pmatrix}-\\begin{pmatrix} 2 & 0 & 0 & 0 \\\\ 0 & 2 & 0 & 0 \\\\ 0 & 0 & 2 & 0 \\\\ 0 & 0 & 0 & 2 \\end{pmatrix}=\\begin{pmatrix} -2 & 1 & 0 & 1 \\\\ 1 & -2 & 1 & 0 \\\\ 0 & 1 & -2 & 1 \\\\ 1 & 0 & 1 & -2 \\end{pmatrix} \\begin{pmatrix} 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\end{pmatrix}-\\begin{pmatrix} 2 & 0 & 0 & 0 \\\\ 0 & 2 & 0 & 0 \\\\ 0 & 0 & 2 & 0 \\\\ 0 & 0 & 0 & 2 \\end{pmatrix}=\\begin{pmatrix} -2 & 1 & 0 & 1 \\\\ 1 & -2 & 1 & 0 \\\\ 0 & 1 & -2 & 1 \\\\ 1 & 0 & 1 & -2 \\end{pmatrix} \\begin{vmatrix} -2 & 1 & 0 \\\\ 1 & -2 & 1 \\\\ 0 & 1 & -2 \\end{vmatrix} = 4 \\begin{vmatrix} -2 & 1 & 0 \\\\ 1 & -2 & 1 \\\\ 0 & 1 & -2 \\end{vmatrix} = 4 \u9644\u4e00\u4e2a\u5197\u957f\u7684\u590d\u6742\u7684\u4ee4\u4eba\u96be\u8fc7\u7684\u9ad8\u65af\u6d88\u5143\u4e0e Matrix Tree \u8ba1\u6570\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <algorithm> #include <cassert> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define MOD 100000007 #define eps 1e-7 struct matrix { static const int maxn = 20 ; int n , m ; double mat [ maxn ][ maxn ]; matrix () { memset ( mat , 0 , sizeof ( mat )); } void print () { cout << \"MATRIX \" << n << \" \" << m << endl ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { cout << mat [ i ][ j ] << \" \\t \" ; } cout << endl ; } } void random ( int n ) { this -> n = n ; this -> m = n ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) mat [ i ][ j ] = rand () % 100 ; } void initSquare () { this -> n = 4 ; this -> m = 4 ; memset ( mat , 0 , sizeof ( mat )); mat [ 0 ][ 1 ] = mat [ 0 ][ 3 ] = 1 ; mat [ 1 ][ 0 ] = mat [ 1 ][ 2 ] = 1 ; mat [ 2 ][ 1 ] = mat [ 2 ][ 3 ] = 1 ; mat [ 3 ][ 0 ] = mat [ 3 ][ 2 ] = 1 ; mat [ 0 ][ 0 ] = mat [ 1 ][ 1 ] = mat [ 2 ][ 2 ] = mat [ 3 ][ 3 ] = - 2 ; this -> n -- ; //\u53bb\u4e00\u884c this -> m -- ; //\u53bb\u4e00\u5217 } double gauss () { double ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int sid = - 1 ; for ( int j = i ; j < n ; j ++ ) if ( abs ( mat [ j ][ i ]) > eps ) { sid = j ; break ; } if ( sid == - 1 ) continue ; if ( sid != i ) { for ( int j = 0 ; j < n ; j ++ ) { swap ( mat [ sid ][ j ], mat [ i ][ j ]); ans = - ans ; } } for ( int j = i + 1 ; j < n ; j ++ ) { double ratio = mat [ j ][ i ] / mat [ i ][ i ]; for ( int k = 0 ; k < n ; k ++ ) { mat [ j ][ k ] -= mat [ i ][ k ] * ratio ; } } } for ( int i = 0 ; i < n ; i ++ ) ans *= mat [ i ][ i ]; return abs ( ans ); } }; int main () { srand ( 1 ); matrix T ; // T.random(2); T . initSquare (); T . print (); double ans = T . gauss (); T . print (); cout << ans << endl ; }","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"math/gauss/#_1","text":"\u9ad8\u65af\u6d88\u5143\u6cd5\u662f\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u7ecf\u5178\u7b97\u6cd5\uff0c\u5b83\u5728\u5f53\u4ee3\u6570\u5b66\u4e2d\u6709\u7740\u91cd\u8981\u7684\u5730\u4f4d\u548c\u4ef7\u503c\uff0c\u662f\u7ebf\u6027\u4ee3\u6570\u8bfe\u7a0b\u6559\u5b66\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002 \u9ad8\u65af\u6d88\u5143\u6cd5\u9664\u4e86\u7528\u4e8e\u7ebf\u6027\u65b9\u7a0b\u7ec4\u6c42\u89e3\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u884c\u5217\u5f0f\u8ba1\u7b97\u3001\u6c42\u77e9\u9635\u7684\u9006\uff0c\u4ee5\u53ca\u5176\u4ed6\u8ba1\u7b97\u673a\u548c\u5de5\u7a0b\u65b9\u9762\u3002 \u590f\u5efa\u660e\u7b49\u4eba\u4e4b\u524d\u63d0\u51fa\u4e86\u5e94\u7528\u56fe\u5f62\u5904\u7406\u5668 (CPU) \u52a0\u901f\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u6240\u63d0\u51fa\u7684\u7b97\u6cd5\u4e0e\u57fa\u4e8e CPU \u7684\u7b97\u6cd5\u76f8\u6bd4\u8f83\u53d6\u5f97\u66f4\u5feb\u7684\u8fd0\u7b97\u901f\u5ea6\u3002\u4e8c\u662f\u63d0\u51fa\u5404\u79cd\u53d8\u5f02\u9ad8\u65af\u6d88\u5143\u6cd5\u4ee5\u6ee1\u8db3\u7279\u5b9a\u5de5\u4f5c\u7684\u9700\u8981\u3002","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"math/gauss/#_2","text":"","title":"\u6d88\u5143\u6cd5\u53ca\u9ad8\u65af\u6d88\u5143\u6cd5\u601d\u60f3"},{"location":"math/gauss/#_3","text":"\u6d88\u5143\u6cd5\u662f\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u7684\u672a\u77e5\u6570\u7528\u542b\u6709\u53e6\u4e00\u672a\u77e5\u6570\u7684\u4ee3\u6570\u5f0f\u8868\u793a\uff0c\u5e76\u5c06\u5176\u5e26\u5165\u5230\u53e6\u4e00\u65b9\u7a0b\u4e2d\uff0c\u8fd9\u5c31\u6d88\u53bb\u4e86\u4e00\u672a\u77e5\u6570\uff0c\u5f97\u5230\u4e00\u89e3\uff1b\u6216\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u500d\u4e58\u67d0\u4e2a\u5e38\u6570\u52a0\u5230\u53e6\u5916\u4e00\u65b9\u7a0b\u4e2d\u53bb\uff0c\u4e5f\u53ef\u8fbe\u5230\u6d88\u53bb\u4e00\u672a\u77e5\u6570\u7684\u6bcd\u7684\u3002\u6d88\u5143\u6cd5\u4e3b\u8981\u7528\u4e8e\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002 \u4f8b\u4e00\uff1a\u5229\u7528\u6d88\u5143\u6cd5\u6c42\u89e3\u4e8c\u5143\u4e00\u6b21\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\left\\{\\begin{aligned} 4x+y&=100 \\notag \\\\ x-y&=100 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} 4x+y&=100 \\notag \\\\ x-y&=100 \\notag \\end{aligned}\\right. \u89e3\uff1a\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u4e24\u65b9\u7a0b\u76f8\u52a0\uff0c\u6d88\u5143 y y \u53ef\u5f97\uff1a 5x = 200 5x = 200 \u89e3\u5f97\uff1a x = 40 x = 40 \u5c06 x = 40 x = 40 \u4ee3\u5165\u65b9\u7a0b\u7ec4\u4e2d\u7b2c\u4e8c\u4e2a\u65b9\u7a0b\u53ef\u5f97\uff1a y = -60 y = -60","title":"\u6d88\u5143\u6cd5\u8bf4\u660e"},{"location":"math/gauss/#_4","text":"\u6d88\u5143\u6cd5\u7406\u8bba\u7684\u6838\u5fc3\u4e3b\u8981\u5982\u4e0b\uff1a \u4e24\u65b9\u7a0b\u4e92\u6362\uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u4e58\u4ee5\u975e\u96f6\u6570 k k \uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u4e58\u4ee5\u6570 k k \u52a0\u4e0a\u53e6\u4e00\u65b9\u7a0b\uff0c\u89e3\u4e0d\u53d8\u3002","title":"\u6d88\u5143\u6cd5\u7406\u8bba\u7684\u6838\u5fc3"},{"location":"math/gauss/#_5","text":"\u5fb7\u56fd\u6570\u5b66\u5bb6\u9ad8\u65af\u5bf9\u6d88\u5143\u6cd5\u8fdb\u884c\u4e86\u601d\u8003\u5206\u6790\uff0c\u5f97\u51fa\u4e86\u5982\u4e0b\u7ed3\u8bba\uff1a \u5728\u6d88\u5143\u6cd5\u4e2d\uff0c\u53c2\u4e0e\u8ba1\u7b97\u548c\u53d1\u751f\u6539\u53d8\u7684\u662f\u65b9\u7a0b\u4e2d\u5404\u53d8\u91cf\u7684\u7cfb\u6570\uff1b \u5404\u53d8\u91cf\u5e76\u672a\u53c2\u4e0e\u8ba1\u7b97\uff0c\u4e14\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff1b \u53ef\u4ee5\u5229\u7528\u7cfb\u6570\u7684\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u4ece\u800c\u7701\u7565\u53d8\u91cf\uff1b \u5728\u8ba1\u7b97\u4e2d\u5c06\u53d8\u91cf\u7b80\u5316\u7701\u7565\uff0c\u65b9\u7a0b\u7684\u89e3\u4e0d\u53d8\u3002 \u9ad8\u65af\u5728\u8fd9\u4e9b\u7ed3\u8bba\u7684\u57fa\u7840\u4e0a\uff0c\u63d0\u51fa\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u9996\u5148\u5c06\u65b9\u7a0b\u7684\u589e\u5e7f\u77e9\u9635\u5229\u7528\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u7136\u540e\u4ee5\u7ebf\u6027\u65e0\u5173\u4e3a\u51c6\u5219\u5bf9\u81ea\u7531\u672a\u77e5\u91cf\u8d4b\u503c\uff0c\u6700\u540e\u5217\u51fa\u8868\u8fbe\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002","title":"\u9ad8\u65af\u6d88\u5143\u6cd5\u601d\u60f3\u6982\u5ff5"},{"location":"math/gauss/#_6","text":"\u9ad8\u65af\u6d88\u5143\u6cd5\u5728\u5c06\u589e\u5e7f\u77e9\u9635\u5316\u4e3a\u6700\u7b80\u5f62\u540e\u5bf9\u4e8e\u81ea\u7531\u672a\u77e5\u91cf\u7684\u8d4b\u503c\uff0c\u9700\u8981\u638c\u63e1\u7ebf\u6027\u76f8\u5173\u77e5\u8bc6\uff0c\u4e14\u8d4b\u503c\u5b58\u5728\u4eba\u5de5\u7ecf\u9a8c\u7684\u56e0\u7d20\uff0c\u4f7f\u5f97\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u6709\u4e00\u5b9a\u7684\u56f0\u96be\uff0c\u5c06\u9ad8\u65af\u6d88\u5143\u6cd5\u5212\u5206\u4e3a\u4e94\u6b65\u9aa4\uff0c\u4ece\u800c\u63d0\u51fa\u4e94\u6b65\u9aa4\u6cd5\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u884c\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62\uff1b \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1b \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1b \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1b \u5217\u8868\u793a\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002 \u5229\u7528\u5b9e\u4f8b\u8fdb\u4e00\u6b65\u8bf4\u660e\u8be5\u7b97\u6cd5\u7684\u8fd0\u4f5c\u60c5\u51b5\u3002 \u4f8b\u4e8c\uff1a\u5229\u7528\u9ad8\u65af\u6d88\u5143\u6cd5\u4e94\u6b65\u9aa4\u6cd5\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\left\\{\\begin{aligned} 2x_1+5x_3+6x_4&=9 \\notag \\\\ x_3+x_4&=-4 \\notag \\\\ 2x_3+2x_4&=-8 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} 2x_1+5x_3+6x_4&=9 \\notag \\\\ x_3+x_4&=-4 \\notag \\\\ 2x_3+2x_4&=-8 \\notag \\end{aligned}\\right.","title":"\u9ad8\u65af\u6d88\u5143\u4e94\u6b65\u9aa4\u6cd5"},{"location":"math/gauss/#_7","text":"\u6240\u8c13\u589e\u5e7f\u77e9\u9635\uff0c\u5373\u4e3a\u65b9\u7a0b\u7ec4\u7cfb\u6570\u77e9\u9635 A A \u4e0e\u5e38\u6570\u5217 b b \u7684\u5e76\u751f\u6210\u7684\u65b0\u77e9\u9635\uff0c\u5373 (A | b) (A | b) \uff0c\u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u5373\u662f\u5229\u7528\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u601d\u60f3\u7406\u5ff5\uff0c\u7701\u7565\u4e86\u53d8\u91cf\u800c\u7528\u53d8\u91cf\u7684\u7cfb\u6570\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u589e\u5e7f\u77e9\u9635\u4e2d\u7528\u7ad6\u7ebf\u9694\u5f00\u4e86\u7cfb\u6570\u77e9\u9635\u548c\u5e38\u6570\u5217\uff0c\u4ee3\u8868\u4e86\u7b49\u4e8e\u7b26\u53f7\u3002 \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 2 & 2 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ -8 \\end{matrix} \\right) \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 2 & 2 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ -8 \\end{matrix} \\right) \\xrightarrow{r_3-2r_2} \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{r_3-2r_2} \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \u5316\u4e3a\u884c\u9636\u68af\u5f62 \\xrightarrow{\\frac{r_1}{2}} \\left(\\begin{matrix} 1 & 0 & 2.5 & 3 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 4.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{\\frac{r_1}{2}} \\left(\\begin{matrix} 1 & 0 & 2.5 & 3 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 4.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{r_1-r_2 \\times 2.5} \\left(\\begin{matrix} 1 & 0 & 0 & 0.5 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 14.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\xrightarrow{r_1-r_2 \\times 2.5} \\left(\\begin{matrix} 1 & 0 & 0 & 0.5 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 14.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \u5316\u4e3a\u6700\u7b80\u5f62","title":"\u589e\u5e7f\u77e9\u9635\u884c\uff08\u521d\u7b49\uff09\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62"},{"location":"math/gauss/#_8","text":"\\left\\{\\begin{aligned} x_1+0.5x_4 &= 14.5 \\notag\\\\ x_3+x_4 &= -4 \\notag \\\\ \\end{aligned}\\right. \\left\\{\\begin{aligned} x_1+0.5x_4 &= 14.5 \\notag\\\\ x_3+x_4 &= -4 \\notag \\\\ \\end{aligned}\\right. \u89e3\u91ca \u6240\u8c13\u7684\u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u5373\u662f\u5728\u884c\u6700\u7b80\u5f62\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u4e4b\u91cd\u65b0\u4e66\u5199\u4e3a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u5f62\u5f0f\uff0c\u5373\u5c06\u884c\u6700\u7b80\u5f62\u4e2d\u5404\u4f4d\u7f6e\u7684\u7cfb\u6570\u91cd\u65b0\u8d4b\u4e88\u53d8\u91cf\uff0c\u4e2d\u95f4\u7684\u7ad6\u7ebf\u8fd8\u539f\u4e3a\u7b49\u53f7\u3002","title":"\u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4"},{"location":"math/gauss/#_9","text":"\\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5\\notag \\\\ x_3 &= -x_4-4\\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5\\notag \\\\ x_3 &= -x_4-4\\notag \\end{aligned}\\right. \u89e3\u91ca \u5373\u662f\u5bf9\u4e8e\u6240\u8fd8\u539f\u7684\u7ebf\u6027\u65b9\u7a0b\u7ec4\u800c\u8a00\uff0c\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u6bcf\u4e2a\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u5176\u4ed6\u91cf\u8868\u8fbe\u51fa\u6765\u3002\u5982\u65b9\u7a0b\u7ec4\u4e24\u65b9\u7a0b\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf x_1 x_1 \u548c x_3 x_3","title":"\u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf"},{"location":"math/gauss/#_10","text":"\\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5 \\notag \\\\ x_2 &= x_2 \\notag \\\\ x_3 &= -x_4-4 \\notag \\\\ x_4 &= x_4 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x_1 &= -0.5x_4+14.5 \\notag \\\\ x_2 &= x_2 \\notag \\\\ x_3 &= -x_4-4 \\notag \\\\ x_4 &= x_4 \\notag \\end{aligned}\\right. \u89e3\u91ca \u7b2c 3 \u6b65\u4e2d\uff0c\u6c42\u89e3\u51fa\u53d8\u91cf x_1 x_1 \u548c x_3 x_3 \uff0c\u4ece\u800c\u8bf4\u660e\u4e86\u65b9\u7a0b\u5269\u4f59\u7684\u53d8\u91cf x_2 x_2 \u548c x_4 x_4 \u4e0d\u53d7\u65b9\u7a0b\u7ec4\u7684\u7ea6\u675f\uff0c\u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u9700\u8981\u5728\u7b2c 3 \u6b65\u9aa4\u89e3\u5f97\u57fa\u7840\u4e0a\u8fdb\u884c\u89e3\u5f97\u8865\u5145\uff0c\u8865\u5145\u7684\u65b9\u6cd5\u4e3a x_2 = x_2,x_4 = x_4 x_2 = x_2,x_4 = x_4 \uff0c\u8fd9\u79cd\u89e3\u5f97\u8865\u5145\u65b9\u5f0f\u7b26\u5408\u81ea\u7531\u672a\u77e5\u91cf\u5b9a\u4e49\uff0c\u5e76\u6613\u4e8e\u7406\u89e3\uff0c\u56e0\u4e3a\u662f\u81ea\u7531\u672a\u77e5\u91cf\u800c\u4e0d\u53d7\u7ea6\u675f\uff0c\u6240\u4ee5\u53ea\u80fd\u81ea\u5df1\u7b49\u4e8e\u81ea\u5df1\u3002","title":"\u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf"},{"location":"math/gauss/#_11","text":"\\begin{aligned} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\end{pmatrix} &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} x_2+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} x_4 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\\\ &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} C_1+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} C_2 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\end{aligned} \\begin{aligned} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\end{pmatrix} &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} x_2+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} x_4 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\\\ &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} C_1+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} C_2 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\notag \\end{aligned} \u5176\u4e2d C_1 C_1 \u548c C_2 C_2 \u4e3a\u4efb\u610f\u5e38\u6570\u3002 \u89e3\u91ca \u5373\u5728\u7b2c 4 \u6b65\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u89e3\u8868\u8fbe\u4e3a\u5217\u5411\u91cf\u7ec4\u5408\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u540c\u65f6\u7531\u4e8e x_2 x_2 \u548c x_4 x_4 \u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u5728\u89e3\u5f97\u53f3\u8fb9\uff0c\u4ee4\u4e8c\u8005\u5206\u522b\u4e3a\u4efb\u610f\u5e38\u6570 C_1 C_1 \u548c C_2 C_2 \uff0c\u5373\u5b9e\u73b0\u4e86\u5bf9\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002","title":"\u5217\u8868\u793a\u65b9\u7a0b\u7ec4\u7684\u901a\u89e3"},{"location":"math/gauss/#_12","text":"N \\times N N \\times N \u65b9\u9635\u884c\u5217\u5f0f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6240\u6709\u5217\u5411\u91cf\u6240\u5939\u7684\u51e0\u4f55\u4f53\u7684\u6709\u5411\u4f53\u79ef \u4f8b\u5982\uff1a \\begin{vmatrix} 1 & 0 \\\\ 0 & 1 \\end{vmatrix} = 1 \\begin{vmatrix} 1 & 0 \\\\ 0 & 1 \\end{vmatrix} = 1 \\begin{vmatrix} 1 & 2 \\\\ 2 & 1 \\end{vmatrix} = -3 \\begin{vmatrix} 1 & 2 \\\\ 2 & 1 \\end{vmatrix} = -3 \u884c\u5217\u5f0f\u6709\u516c\u5f0f D = \\left| A \\right| = \\sum(-1)^va_{1,l_1}a_{2,l_2}\\dots a_{n,l_n} D = \\left| A \\right| = \\sum(-1)^va_{1,l_1}a_{2,l_2}\\dots a_{n,l_n} \u5176\u4e2d v v \u4e3a l_1 l_1 , l_2 l_2 , \\cdots \\cdots , l_n l_n \u4e2d\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002 \u901a\u8fc7\u4f53\u79ef\u6982\u5ff5\u7406\u89e3\u884c\u5217\u5f0f\u4e0d\u53d8\u6027\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u529e\u6cd5\uff1a \u77e9\u9635\u8f6c\u7f6e\uff0c\u884c\u5217\u5f0f\u4e0d\u53d8\uff1b \u77e9\u9635\u884c\u4ea4\u6362\uff0c\u884c\u5217\u5f0f\u53d6\u53cd\uff1b \u77e9\u9635\u884c\u53e0\u52a0\uff0c\u884c\u5217\u5f0f\u4e0d\u53d8\uff1b \u77e9\u9635\u884c\u4f38\u957f\uff0c\u884c\u5217\u5f0f\u7b49\u6bd4\u4f8b\u53d8\u5927\u3002 \u7531\u6b64\uff0c\u53d1\u73b0\u9ad8\u65af\u6d88\u5143\u4e0d\u6539\u53d8\u77e9\u9635\u884c\u5217\u5f0f\uff0c\u4e14\u6700\u7ec8\u884c\u5217\u5f0f\u7b49\u4e8e\u5012\u4e09\u89d2\u77e9\u9635\u7684\u5bf9\u89d2\u7ebf\u4e58\u79ef\u3002","title":"\u884c\u5217\u5f0f"},{"location":"math/gauss/#_13","text":"\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570\u4e3a\u90bb\u63a5\u77e9\u9635\u5ea6\u6570\u77e9\u9635\u53bb\u4e00\u884c\u4e00\u5217\u7684\u884c\u5217\u5f0f\u3002 \u8be6\u89c1\uff1a \u77e9\u9635\u6811\u5b9a\u7406 \u4f8b\u5982\uff0c\u4e00\u4e2a\u6b63\u65b9\u5f62\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570 \\begin{pmatrix} 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\end{pmatrix}-\\begin{pmatrix} 2 & 0 & 0 & 0 \\\\ 0 & 2 & 0 & 0 \\\\ 0 & 0 & 2 & 0 \\\\ 0 & 0 & 0 & 2 \\end{pmatrix}=\\begin{pmatrix} -2 & 1 & 0 & 1 \\\\ 1 & -2 & 1 & 0 \\\\ 0 & 1 & -2 & 1 \\\\ 1 & 0 & 1 & -2 \\end{pmatrix} \\begin{pmatrix} 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\end{pmatrix}-\\begin{pmatrix} 2 & 0 & 0 & 0 \\\\ 0 & 2 & 0 & 0 \\\\ 0 & 0 & 2 & 0 \\\\ 0 & 0 & 0 & 2 \\end{pmatrix}=\\begin{pmatrix} -2 & 1 & 0 & 1 \\\\ 1 & -2 & 1 & 0 \\\\ 0 & 1 & -2 & 1 \\\\ 1 & 0 & 1 & -2 \\end{pmatrix} \\begin{vmatrix} -2 & 1 & 0 \\\\ 1 & -2 & 1 \\\\ 0 & 1 & -2 \\end{vmatrix} = 4 \\begin{vmatrix} -2 & 1 & 0 \\\\ 1 & -2 & 1 \\\\ 0 & 1 & -2 \\end{vmatrix} = 4 \u9644\u4e00\u4e2a\u5197\u957f\u7684\u590d\u6742\u7684\u4ee4\u4eba\u96be\u8fc7\u7684\u9ad8\u65af\u6d88\u5143\u4e0e Matrix Tree \u8ba1\u6570\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <algorithm> #include <cassert> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define MOD 100000007 #define eps 1e-7 struct matrix { static const int maxn = 20 ; int n , m ; double mat [ maxn ][ maxn ]; matrix () { memset ( mat , 0 , sizeof ( mat )); } void print () { cout << \"MATRIX \" << n << \" \" << m << endl ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { cout << mat [ i ][ j ] << \" \\t \" ; } cout << endl ; } } void random ( int n ) { this -> n = n ; this -> m = n ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) mat [ i ][ j ] = rand () % 100 ; } void initSquare () { this -> n = 4 ; this -> m = 4 ; memset ( mat , 0 , sizeof ( mat )); mat [ 0 ][ 1 ] = mat [ 0 ][ 3 ] = 1 ; mat [ 1 ][ 0 ] = mat [ 1 ][ 2 ] = 1 ; mat [ 2 ][ 1 ] = mat [ 2 ][ 3 ] = 1 ; mat [ 3 ][ 0 ] = mat [ 3 ][ 2 ] = 1 ; mat [ 0 ][ 0 ] = mat [ 1 ][ 1 ] = mat [ 2 ][ 2 ] = mat [ 3 ][ 3 ] = - 2 ; this -> n -- ; //\u53bb\u4e00\u884c this -> m -- ; //\u53bb\u4e00\u5217 } double gauss () { double ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int sid = - 1 ; for ( int j = i ; j < n ; j ++ ) if ( abs ( mat [ j ][ i ]) > eps ) { sid = j ; break ; } if ( sid == - 1 ) continue ; if ( sid != i ) { for ( int j = 0 ; j < n ; j ++ ) { swap ( mat [ sid ][ j ], mat [ i ][ j ]); ans = - ans ; } } for ( int j = i + 1 ; j < n ; j ++ ) { double ratio = mat [ j ][ i ] / mat [ i ][ i ]; for ( int k = 0 ; k < n ; k ++ ) { mat [ j ][ k ] -= mat [ i ][ k ] * ratio ; } } } for ( int i = 0 ; i < n ; i ++ ) ans *= mat [ i ][ i ]; return abs ( ans ); } }; int main () { srand ( 1 ); matrix T ; // T.random(2); T . initSquare (); T . print (); double ans = T . gauss (); T . print (); cout << ans << endl ; }","title":"\u751f\u6210\u6811\u8ba1\u6570"},{"location":"math/gcd/","text":"\u6700\u5927\u516c\u7ea6\u6570 \u00b6 \u6700\u5927\u516c\u7ea6\u6570\u5373\u4e3a Greatest Common Divisor\uff0c\u5e38\u7f29\u5199\u4e3a gcd \u5728 \u7d20\u6570 \u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u7ea6\u6570\u7684\u6982\u5ff5\u3002 \u4e00\u7ec4\u6570\u7684\u516c\u7ea6\u6570\uff0c\u662f\u6307\u540c\u65f6\u662f\u8fd9\u7ec4\u6570\u4e2d\u6bcf\u4e00\u4e2a\u6570\u7684\u7ea6\u6570\u7684\u6570\u3002\u800c\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5219\u662f\u6307\u6240\u6709\u516c\u7ea6\u6570\u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\u3002 \u90a3\u4e48\u5982\u4f55\u6c42\u6700\u5927\u516c\u7ea6\u6570\u5462\uff1f\u6211\u4eec\u5148\u8003\u8651\u4e24\u4e2a\u6570\u7684\u60c5\u51b5\u3002 \u4e24\u4e2a\u6570\u7684 \u00b6 \u5982\u679c\u6211\u4eec\u5df2\u77e5\u4e24\u4e2a\u6570 a a \u548c b b \uff0c\u5982\u4f55\u6c42\u51fa\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u5462\uff1f \u4e0d\u59a8\u8bbe a > b a > b \u6211\u4eec\u53d1\u73b0\u5982\u679c b b \u662f a a \u7684\u7ea6\u6570\uff0c\u90a3\u4e48 b b \u5c31\u662f\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 \u4e0b\u9762\u8ba8\u8bba\u4e0d\u80fd\u6574\u9664\u7684\u60c5\u51b5\uff0c\u5373 a = b \\times q + r a = b \\times q + r \uff0c\u5176\u4e2d r < b r < b \u3002 \u6211\u4eec\u901a\u8fc7\u8bc1\u660e\u53ef\u4ee5\u5f97\u5230 \\gcd(a,b)=\\gcd(b,a \\bmod b) \\gcd(a,b)=\\gcd(b,a \\bmod b) \uff0c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u8bbe a=bk+c a=bk+c \uff0c\u663e\u7136\u6709 c=a \\bmod b c=a \\bmod b \u3002\u8bbe d|a\\ \\ \\ d|b d|a\\ \\ \\ d|b \uff0c\u5219 c=a-bk c=a-bk \\frac{c}{d}=\\frac{a}{d}-\\frac{b}{d}k \\frac{c}{d}=\\frac{a}{d}-\\frac{b}{d}k \u7531\u53f3\u8fb9\u7684\u5f0f\u5b50\u53ef\u77e5 \\frac{c}{d} \\frac{c}{d} \u4e3a\u6574\u6570\uff0c\u5373 d|c d|c \u6240\u4ee5\u5bf9\u4e8e a,b a,b \u7684\u516c\u7ea6\u6570\uff0c\u5b83\u4e5f\u4f1a\u662f a \\bmod b a \\bmod b \u7684\u516c\u7ea6\u6570\u3002 \u53cd\u8fc7\u6765\u4e5f\u9700\u8981\u8bc1\u660e \u8bbe d|b\\ \\ \\ d|(a \\bmod b) d|b\\ \\ \\ d|(a \\bmod b) \uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u50cf\u4e4b\u524d\u4e00\u6837\u5f97\u5230\u4ee5\u4e0b\u5f0f\u5b50 \\frac{a\\bmod b}{d}=\\frac{a}{d}-\\frac{b}{d}k \\frac{a\\bmod b}{d}=\\frac{a}{d}-\\frac{b}{d}k \\frac{a\\bmod b}{d}+\\frac{b}{d}k=\\frac{a}{d} \\frac{a\\bmod b}{d}+\\frac{b}{d}k=\\frac{a}{d} \u56e0\u4e3a\u5de6\u8fb9\u5f0f\u5b50\u663e\u7136\u4e3a\u6574\u6570\uff0c\u6240\u4ee5 \\frac{a}{d} \\frac{a}{d} \u4e5f\u4e3a\u6574\u6570\uff0c\u5373 d|a d|a \uff0c\u6240\u4ee5 b,a\\bmod b b,a\\bmod b \u7684\u516c\u7ea6\u6570\u4e5f\u662f a,b a,b \u7684\u516c\u7ea6\u6570\u3002 \u65e2\u7136\u4e24\u5f0f\u516c\u7ea6\u6570\u90fd\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u6700\u5927\u516c\u7ea6\u6570\u4e5f\u4f1a\u76f8\u540c \u6240\u4ee5\u5f97\u5230\u5f0f\u5b50 \\gcd(a,b)=\\gcd(b,a\\bmod b) \\gcd(a,b)=\\gcd(b,a\\bmod b) \u65e2\u7136\u5f97\u5230\u4e86 \\gcd(a, b) = \\gcd(b, r) \\gcd(a, b) = \\gcd(b, r) \uff0c\u8fd9\u91cc\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\u662f\u4e0d\u4f1a\u589e\u5927\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u5c31\u5f97\u5230\u4e86\u5173\u4e8e\u4e24\u4e2a\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\u7684\u4e00\u4e2a\u9012\u5f52\u6c42\u6cd5\u3002 1 2 3 4 int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ); } \u9012\u5f52\u81f3 b==0 (\u5373\u4e0a\u4e00\u6b65\u7684 a%b==0 ) \u7684\u60c5\u51b5\u518d\u8fd4\u56de\u503c\u5373\u53ef\u3002 \u5982\u679c\u4e24\u4e2a\u6570 a a \u548c b b \u6ee1\u8db3 \\gcd(a, b) = 1 \\gcd(a, b) = 1 \uff0c\u6211\u4eec\u79f0 a a \u548c b b \u4e92\u8d28\u3002 \u591a\u4e2a\u6570\u7684 \u00b6 \u90a3\u600e\u4e48\u6c42\u591a\u4e2a\u4e66\u7684\u6700\u5927\u516c\u7ea6\u6570\u5462\uff1f\u663e\u7136\u7b54\u6848\u4e00\u5b9a\u662f\u6bcf\u4e2a\u6570\u7684\u7ea6\u6570\uff0c\u90a3\u4e48\u4e5f\u4e00\u5b9a\u662f\u6bcf\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u7ea6\u6570\u3002\u6211\u4eec\u91c7\u7528\u5f52\u7eb3\u6cd5\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e24\u4e2a\u6570\u6c42\u51fa\u7b54\u6848\u540e\u518d\u653e\u56de\u53bb\uff0c\u4e0d\u4f1a\u5bf9\u6240\u9700\u8981\u7684\u7b54\u6848\u9020\u6210\u5f71\u54cd\u3002 \u6700\u5c0f\u516c\u500d\u6570 \u00b6 \u4e24\u4e2a\u6570\u7684 \u00b6 \u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u8fd9\u6837\u4e00\u4e2a\u5b9a\u7406 \u2014\u2014 \u7b97\u672f\u57fa\u672c\u5b9a\u7406\uff1a \u6bcf\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210\u82e5\u5e72\u6574\u6570\u7684\u4e58\u79ef\uff0c\u8fd9\u79cd\u5206\u89e3\u65b9\u5f0f\u5728\u5ffd\u7565\u6392\u5217\u6b21\u5e8f\u7684\u6761\u4ef6\u4e0b\u662f\u552f\u4e00\u7684\u3002 \u7528\u6570\u5b66\u516c\u5f0f\u6765\u8868\u793a\u5c31\u662f x = p_1^{k_1}p_2^{k_2} \\cdots p_s^{k_s} x = p_1^{k_1}p_2^{k_2} \\cdots p_s^{k_s} \u8bbe a = p_{a_1}^{k_{a_1}}p_{a_2}^{k_{a_2}} \\cdots p_{a_s}^{k_{a_s}} a = p_{a_1}^{k_{a_1}}p_{a_2}^{k_{a_2}} \\cdots p_{a_s}^{k_{a_s}} , b = p_{b_1}^{k_{b_1}}p_{b_2}^{k_{b_2}} \\cdots p_{b_s}^{k_{b_s}} b = p_{b_1}^{k_{b_1}}p_{b_2}^{k_{b_2}} \\cdots p_{b_s}^{k_{b_s}} \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e a a \u548c b b \u7684\u60c5\u51b5\uff0c\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8e p_1^{k_{\\min(a_1, b_1)}}p_2^{k_{\\min(a_2, b_2)}} \\cdots p_s^{k_{\\min(a_s, b_s)}} p_1^{k_{\\min(a_1, b_1)}}p_2^{k_{\\min(a_2, b_2)}} \\cdots p_s^{k_{\\min(a_s, b_s)}} \u6700\u5c0f\u516c\u500d\u6570\u7b49\u4e8e p_1^{k_{\\max(a_1, b_1)}}p_2^{k_{\\max(a_2, b_2)}} \\cdots p_s^{k_{\\max(a_s, b_s)}} p_1^{k_{\\max(a_1, b_1)}}p_2^{k_{\\max(a_2, b_2)}} \\cdots p_s^{k_{\\max(a_s, b_s)}} \u7531\u4e8e a + b = \\max(a, b) + \\min(a, b) a + b = \\max(a, b) + \\min(a, b) \u6240\u4ee5\u5f97\u5230\u7ed3\u8bba\u662f \\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b \\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b \u8981\u6c42\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\uff0c\u5148\u6c42\u51fa\u6700\u5927\u516c\u7ea6\u6570\u5373\u53ef\u3002 \u591a\u4e2a\u6570\u7684 \u00b6 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u6c42\u51fa\u4e24\u4e2a\u6570\u7684 gcd gcd \u65f6\uff0c\u6c42\u6700\u5c0f\u516c\u500d\u6570\u662f O(1) O(1) \u7684\u590d\u6742\u5ea6\u3002\u90a3\u4e48\u5bf9\u4e8e\u591a\u4e2a\u6570\uff0c\u6211\u4eec\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u6c42\u4e00\u4e2a\u5171\u540c\u7684\u6700\u5927\u516c\u7ea6\u6570\u518d\u53bb\u5904\u7406\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u5f53\u6211\u4eec\u7b97\u51fa\u4e24\u4e2a\u6570\u7684 gcd gcd \uff0c\u6216\u8bb8\u5728\u6c42\u591a\u4e2a\u6570\u7684 gcd gcd \u65f6\u5019\uff0c\u6211\u4eec\u5c06\u5b83\u653e\u5165\u5e8f\u5217\u5bf9\u540e\u9762\u7684\u6570\u7ee7\u7eed\u6c42\u89e3\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u8f6c\u6362\u4e00\u4e0b\uff0c\u76f4\u63a5\u5c06\u6700\u5c0f\u516c\u500d\u6570\u653e\u5165\u5e8f\u5217\u5373\u53ef EXGCD - \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406 \u00b6 \u76ee\u7684\uff1a\u6c42 ax+by=\\gcd(a,b) ax+by=\\gcd(a,b) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3 \u8bc1\u660e \u00b6 \u8bbe ax_1+by_1=\\gcd(a,b) ax_1+by_1=\\gcd(a,b) bx_2+(a\\bmod b)y_2=\\gcd(b,a\\bmod b) bx_2+(a\\bmod b)y_2=\\gcd(b,a\\bmod b) \u7531\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\u53ef\u77e5\uff1a \\gcd(a,b)=\\gcd(b,a\\bmod b) \\gcd(a,b)=\\gcd(b,a\\bmod b) \u6240\u4ee5 ax_1+by_1=bx_2+(a\\bmod b)y_2 ax_1+by_1=bx_2+(a\\bmod b)y_2 \u53c8\u56e0\u4e3a a\\bmod b=a-(\\lfloor\\frac{a}{b}\\rfloor\\times b) a\\bmod b=a-(\\lfloor\\frac{a}{b}\\rfloor\\times b) \u6240\u4ee5 ax_1+by_1=bx_2+(a-(\\lfloor\\frac{a}{b}\\rfloor\\times b))y_2 ax_1+by_1=bx_2+(a-(\\lfloor\\frac{a}{b}\\rfloor\\times b))y_2 ax_1+by_1=ay_2+bx_2-\\lfloor\\frac{a}{b}\\rfloor\\times by_2=ay_2+b(x_2-\\lfloor\\frac{a}{b}\\rfloor y_2) ax_1+by_1=ay_2+bx_2-\\lfloor\\frac{a}{b}\\rfloor\\times by_2=ay_2+b(x_2-\\lfloor\\frac{a}{b}\\rfloor y_2) \u56e0\u4e3a a=a,b=b a=a,b=b \uff0c\u6240\u4ee5 x_1=y_2,y_1=x_2-\\lfloor\\frac{a}{b}\\rfloor y_2 x_1=y_2,y_1=x_2-\\lfloor\\frac{a}{b}\\rfloor y_2 \u5c06 x_2,y_2 x_2,y_2 \u4e0d\u65ad\u4ee3\u5165\u9012\u5f52\u6c42\u89e3\u76f4\u81f3 GCD\uff08\u6700\u5927\u516c\u7ea6\u6570\uff0c\u4e0b\u540c\uff09 \u4e3a 0 \u9012\u5f52 x=1,y=0 \u56de\u53bb\u6c42\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 int Exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 ; y = 0 ; return a ; } int d = Exgcd ( b , a % b , x , y ); int t = x ; x = y ; y = t - ( a / b ) * y ; return d ; } \u51fd\u6570\u8fd4\u56de\u7684\u503c\u4e3a GCD\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u8ba1\u7b97 x,y x,y \u5373\u53ef","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"math/gcd/#_1","text":"\u6700\u5927\u516c\u7ea6\u6570\u5373\u4e3a Greatest Common Divisor\uff0c\u5e38\u7f29\u5199\u4e3a gcd \u5728 \u7d20\u6570 \u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u7ea6\u6570\u7684\u6982\u5ff5\u3002 \u4e00\u7ec4\u6570\u7684\u516c\u7ea6\u6570\uff0c\u662f\u6307\u540c\u65f6\u662f\u8fd9\u7ec4\u6570\u4e2d\u6bcf\u4e00\u4e2a\u6570\u7684\u7ea6\u6570\u7684\u6570\u3002\u800c\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5219\u662f\u6307\u6240\u6709\u516c\u7ea6\u6570\u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\u3002 \u90a3\u4e48\u5982\u4f55\u6c42\u6700\u5927\u516c\u7ea6\u6570\u5462\uff1f\u6211\u4eec\u5148\u8003\u8651\u4e24\u4e2a\u6570\u7684\u60c5\u51b5\u3002","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"math/gcd/#_2","text":"\u5982\u679c\u6211\u4eec\u5df2\u77e5\u4e24\u4e2a\u6570 a a \u548c b b \uff0c\u5982\u4f55\u6c42\u51fa\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u5462\uff1f \u4e0d\u59a8\u8bbe a > b a > b \u6211\u4eec\u53d1\u73b0\u5982\u679c b b \u662f a a \u7684\u7ea6\u6570\uff0c\u90a3\u4e48 b b \u5c31\u662f\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 \u4e0b\u9762\u8ba8\u8bba\u4e0d\u80fd\u6574\u9664\u7684\u60c5\u51b5\uff0c\u5373 a = b \\times q + r a = b \\times q + r \uff0c\u5176\u4e2d r < b r < b \u3002 \u6211\u4eec\u901a\u8fc7\u8bc1\u660e\u53ef\u4ee5\u5f97\u5230 \\gcd(a,b)=\\gcd(b,a \\bmod b) \\gcd(a,b)=\\gcd(b,a \\bmod b) \uff0c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u8bbe a=bk+c a=bk+c \uff0c\u663e\u7136\u6709 c=a \\bmod b c=a \\bmod b \u3002\u8bbe d|a\\ \\ \\ d|b d|a\\ \\ \\ d|b \uff0c\u5219 c=a-bk c=a-bk \\frac{c}{d}=\\frac{a}{d}-\\frac{b}{d}k \\frac{c}{d}=\\frac{a}{d}-\\frac{b}{d}k \u7531\u53f3\u8fb9\u7684\u5f0f\u5b50\u53ef\u77e5 \\frac{c}{d} \\frac{c}{d} \u4e3a\u6574\u6570\uff0c\u5373 d|c d|c \u6240\u4ee5\u5bf9\u4e8e a,b a,b \u7684\u516c\u7ea6\u6570\uff0c\u5b83\u4e5f\u4f1a\u662f a \\bmod b a \\bmod b \u7684\u516c\u7ea6\u6570\u3002 \u53cd\u8fc7\u6765\u4e5f\u9700\u8981\u8bc1\u660e \u8bbe d|b\\ \\ \\ d|(a \\bmod b) d|b\\ \\ \\ d|(a \\bmod b) \uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u50cf\u4e4b\u524d\u4e00\u6837\u5f97\u5230\u4ee5\u4e0b\u5f0f\u5b50 \\frac{a\\bmod b}{d}=\\frac{a}{d}-\\frac{b}{d}k \\frac{a\\bmod b}{d}=\\frac{a}{d}-\\frac{b}{d}k \\frac{a\\bmod b}{d}+\\frac{b}{d}k=\\frac{a}{d} \\frac{a\\bmod b}{d}+\\frac{b}{d}k=\\frac{a}{d} \u56e0\u4e3a\u5de6\u8fb9\u5f0f\u5b50\u663e\u7136\u4e3a\u6574\u6570\uff0c\u6240\u4ee5 \\frac{a}{d} \\frac{a}{d} \u4e5f\u4e3a\u6574\u6570\uff0c\u5373 d|a d|a \uff0c\u6240\u4ee5 b,a\\bmod b b,a\\bmod b \u7684\u516c\u7ea6\u6570\u4e5f\u662f a,b a,b \u7684\u516c\u7ea6\u6570\u3002 \u65e2\u7136\u4e24\u5f0f\u516c\u7ea6\u6570\u90fd\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u6700\u5927\u516c\u7ea6\u6570\u4e5f\u4f1a\u76f8\u540c \u6240\u4ee5\u5f97\u5230\u5f0f\u5b50 \\gcd(a,b)=\\gcd(b,a\\bmod b) \\gcd(a,b)=\\gcd(b,a\\bmod b) \u65e2\u7136\u5f97\u5230\u4e86 \\gcd(a, b) = \\gcd(b, r) \\gcd(a, b) = \\gcd(b, r) \uff0c\u8fd9\u91cc\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\u662f\u4e0d\u4f1a\u589e\u5927\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u5c31\u5f97\u5230\u4e86\u5173\u4e8e\u4e24\u4e2a\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\u7684\u4e00\u4e2a\u9012\u5f52\u6c42\u6cd5\u3002 1 2 3 4 int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ); } \u9012\u5f52\u81f3 b==0 (\u5373\u4e0a\u4e00\u6b65\u7684 a%b==0 ) \u7684\u60c5\u51b5\u518d\u8fd4\u56de\u503c\u5373\u53ef\u3002 \u5982\u679c\u4e24\u4e2a\u6570 a a \u548c b b \u6ee1\u8db3 \\gcd(a, b) = 1 \\gcd(a, b) = 1 \uff0c\u6211\u4eec\u79f0 a a \u548c b b \u4e92\u8d28\u3002","title":"\u4e24\u4e2a\u6570\u7684"},{"location":"math/gcd/#_3","text":"\u90a3\u600e\u4e48\u6c42\u591a\u4e2a\u4e66\u7684\u6700\u5927\u516c\u7ea6\u6570\u5462\uff1f\u663e\u7136\u7b54\u6848\u4e00\u5b9a\u662f\u6bcf\u4e2a\u6570\u7684\u7ea6\u6570\uff0c\u90a3\u4e48\u4e5f\u4e00\u5b9a\u662f\u6bcf\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u7ea6\u6570\u3002\u6211\u4eec\u91c7\u7528\u5f52\u7eb3\u6cd5\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e24\u4e2a\u6570\u6c42\u51fa\u7b54\u6848\u540e\u518d\u653e\u56de\u53bb\uff0c\u4e0d\u4f1a\u5bf9\u6240\u9700\u8981\u7684\u7b54\u6848\u9020\u6210\u5f71\u54cd\u3002","title":"\u591a\u4e2a\u6570\u7684"},{"location":"math/gcd/#_4","text":"","title":"\u6700\u5c0f\u516c\u500d\u6570"},{"location":"math/gcd/#_5","text":"\u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u8fd9\u6837\u4e00\u4e2a\u5b9a\u7406 \u2014\u2014 \u7b97\u672f\u57fa\u672c\u5b9a\u7406\uff1a \u6bcf\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210\u82e5\u5e72\u6574\u6570\u7684\u4e58\u79ef\uff0c\u8fd9\u79cd\u5206\u89e3\u65b9\u5f0f\u5728\u5ffd\u7565\u6392\u5217\u6b21\u5e8f\u7684\u6761\u4ef6\u4e0b\u662f\u552f\u4e00\u7684\u3002 \u7528\u6570\u5b66\u516c\u5f0f\u6765\u8868\u793a\u5c31\u662f x = p_1^{k_1}p_2^{k_2} \\cdots p_s^{k_s} x = p_1^{k_1}p_2^{k_2} \\cdots p_s^{k_s} \u8bbe a = p_{a_1}^{k_{a_1}}p_{a_2}^{k_{a_2}} \\cdots p_{a_s}^{k_{a_s}} a = p_{a_1}^{k_{a_1}}p_{a_2}^{k_{a_2}} \\cdots p_{a_s}^{k_{a_s}} , b = p_{b_1}^{k_{b_1}}p_{b_2}^{k_{b_2}} \\cdots p_{b_s}^{k_{b_s}} b = p_{b_1}^{k_{b_1}}p_{b_2}^{k_{b_2}} \\cdots p_{b_s}^{k_{b_s}} \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e a a \u548c b b \u7684\u60c5\u51b5\uff0c\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8e p_1^{k_{\\min(a_1, b_1)}}p_2^{k_{\\min(a_2, b_2)}} \\cdots p_s^{k_{\\min(a_s, b_s)}} p_1^{k_{\\min(a_1, b_1)}}p_2^{k_{\\min(a_2, b_2)}} \\cdots p_s^{k_{\\min(a_s, b_s)}} \u6700\u5c0f\u516c\u500d\u6570\u7b49\u4e8e p_1^{k_{\\max(a_1, b_1)}}p_2^{k_{\\max(a_2, b_2)}} \\cdots p_s^{k_{\\max(a_s, b_s)}} p_1^{k_{\\max(a_1, b_1)}}p_2^{k_{\\max(a_2, b_2)}} \\cdots p_s^{k_{\\max(a_s, b_s)}} \u7531\u4e8e a + b = \\max(a, b) + \\min(a, b) a + b = \\max(a, b) + \\min(a, b) \u6240\u4ee5\u5f97\u5230\u7ed3\u8bba\u662f \\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b \\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b \u8981\u6c42\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\uff0c\u5148\u6c42\u51fa\u6700\u5927\u516c\u7ea6\u6570\u5373\u53ef\u3002","title":"\u4e24\u4e2a\u6570\u7684"},{"location":"math/gcd/#_6","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u6c42\u51fa\u4e24\u4e2a\u6570\u7684 gcd gcd \u65f6\uff0c\u6c42\u6700\u5c0f\u516c\u500d\u6570\u662f O(1) O(1) \u7684\u590d\u6742\u5ea6\u3002\u90a3\u4e48\u5bf9\u4e8e\u591a\u4e2a\u6570\uff0c\u6211\u4eec\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u6c42\u4e00\u4e2a\u5171\u540c\u7684\u6700\u5927\u516c\u7ea6\u6570\u518d\u53bb\u5904\u7406\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u5f53\u6211\u4eec\u7b97\u51fa\u4e24\u4e2a\u6570\u7684 gcd gcd \uff0c\u6216\u8bb8\u5728\u6c42\u591a\u4e2a\u6570\u7684 gcd gcd \u65f6\u5019\uff0c\u6211\u4eec\u5c06\u5b83\u653e\u5165\u5e8f\u5217\u5bf9\u540e\u9762\u7684\u6570\u7ee7\u7eed\u6c42\u89e3\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u8f6c\u6362\u4e00\u4e0b\uff0c\u76f4\u63a5\u5c06\u6700\u5c0f\u516c\u500d\u6570\u653e\u5165\u5e8f\u5217\u5373\u53ef","title":"\u591a\u4e2a\u6570\u7684"},{"location":"math/gcd/#exgcd-","text":"\u76ee\u7684\uff1a\u6c42 ax+by=\\gcd(a,b) ax+by=\\gcd(a,b) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3","title":"EXGCD - \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406"},{"location":"math/gcd/#_7","text":"\u8bbe ax_1+by_1=\\gcd(a,b) ax_1+by_1=\\gcd(a,b) bx_2+(a\\bmod b)y_2=\\gcd(b,a\\bmod b) bx_2+(a\\bmod b)y_2=\\gcd(b,a\\bmod b) \u7531\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\u53ef\u77e5\uff1a \\gcd(a,b)=\\gcd(b,a\\bmod b) \\gcd(a,b)=\\gcd(b,a\\bmod b) \u6240\u4ee5 ax_1+by_1=bx_2+(a\\bmod b)y_2 ax_1+by_1=bx_2+(a\\bmod b)y_2 \u53c8\u56e0\u4e3a a\\bmod b=a-(\\lfloor\\frac{a}{b}\\rfloor\\times b) a\\bmod b=a-(\\lfloor\\frac{a}{b}\\rfloor\\times b) \u6240\u4ee5 ax_1+by_1=bx_2+(a-(\\lfloor\\frac{a}{b}\\rfloor\\times b))y_2 ax_1+by_1=bx_2+(a-(\\lfloor\\frac{a}{b}\\rfloor\\times b))y_2 ax_1+by_1=ay_2+bx_2-\\lfloor\\frac{a}{b}\\rfloor\\times by_2=ay_2+b(x_2-\\lfloor\\frac{a}{b}\\rfloor y_2) ax_1+by_1=ay_2+bx_2-\\lfloor\\frac{a}{b}\\rfloor\\times by_2=ay_2+b(x_2-\\lfloor\\frac{a}{b}\\rfloor y_2) \u56e0\u4e3a a=a,b=b a=a,b=b \uff0c\u6240\u4ee5 x_1=y_2,y_1=x_2-\\lfloor\\frac{a}{b}\\rfloor y_2 x_1=y_2,y_1=x_2-\\lfloor\\frac{a}{b}\\rfloor y_2 \u5c06 x_2,y_2 x_2,y_2 \u4e0d\u65ad\u4ee3\u5165\u9012\u5f52\u6c42\u89e3\u76f4\u81f3 GCD\uff08\u6700\u5927\u516c\u7ea6\u6570\uff0c\u4e0b\u540c\uff09 \u4e3a 0 \u9012\u5f52 x=1,y=0 \u56de\u53bb\u6c42\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 int Exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 ; y = 0 ; return a ; } int d = Exgcd ( b , a % b , x , y ); int t = x ; x = y ; y = t - ( a / b ) * y ; return d ; } \u51fd\u6570\u8fd4\u56de\u7684\u503c\u4e3a GCD\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u8ba1\u7b97 x,y x,y \u5373\u53ef","title":"\u8bc1\u660e"},{"location":"math/inclusion-exclusion-principle/","text":"\u5047\u8bbe\u73ed\u91cc\u6709 10 10 \u4e2a\u5b66\u751f\u559c\u6b22\u6570\u5b66\uff0c 15 15 \u4e2a\u5b66\u751f\u559c\u6b22\u8bed\u6587\uff0c 21 21 \u4e2a\u5b66\u751f\u559c\u6b22\u7f16\u7a0b\uff0c\u73ed\u91cc\u81f3\u5c11\u559c\u6b22\u4e00\u95e8\u5b66\u79d1\u7684\u6709\u591a\u5c11\u4e2a\u5b66\u751f\u5462\uff1f\u662f 10+15+21=46 10+15+21=46 \u4e2a\u5417\uff1f\u4e0d\u662f\u7684\uff0c\u56e0\u4e3a\u6709\u4e9b\u5b66\u751f\u53ef\u80fd\u540c\u65f6\u559c\u6b22\u6570\u5b66\u548c\u8bed\u6587\uff0c\u6216\u8005\u8bed\u6587\u548c\u7f16\u7a0b\uff0c\u751a\u81f3\u8fd8\u6709\u53ef\u80fd\u4e09\u8005\u90fd\u559c\u6b22\u3002\u4e3a\u4e86\u53d9\u8ff0\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u559c\u6b22\u8bed\u6587\u3001\u6570\u5b66\u3001\u7f16\u7a0b\u7684\u5b66\u751f\u96c6\u5408\u5206\u522b\u7528 A,B,C A,B,C \u8868\u793a\uff0c\u5219\u5b66\u751f\u603b\u6570\u7b49\u4e8e |A\\cup B\\cup C| |A\\cup B\\cup C| \u3002\u521a\u624d\u5df2\u7ecf\u8bb2\u8fc7\uff0c\u5982\u679c\u628a\u8fd9\u4e09\u4e2a\u96c6\u5408\u7684\u5143\u7d20\u4e2a\u6570 |A|,|B|,|C| |A|,|B|,|C| \u76f4\u63a5\u52a0\u8d77\u6765\uff0c\u4f1a\u6709\u4e00\u4e9b\u5143\u7d20\u91cd\u590d\u7edf\u8ba1\u4e86\uff0c\u56e0\u6b64\u9700\u8981\u6263\u6389 |A\\cap B|,|B\\cap C|,|C\\cap A| |A\\cap B|,|B\\cap C|,|C\\cap A| \uff0c\u4f46\u8fd9\u6837\u4e00\u6765\uff0c\u53c8\u6709\u4e00\u5c0f\u90e8\u5206\u591a\u6263\u4e86\uff0c\u9700\u8981\u52a0\u56de\u6765\uff0c\u5373 |A\\cap B\\cap C| |A\\cap B\\cap C| \u3002\u5373 |A\\cup B\\cup C|=|A|+|B|+|C|-|A\\cap B|-|B\\cap C|-|C\\cap A|+|A\\cap B\\cap C| |A\\cup B\\cup C|=|A|+|B|+|C|-|A\\cap B|-|B\\cap C|-|C\\cap A|+|A\\cap B\\cap C| \u4e00\u822c\u5730\uff0c\u5bf9\u4e8e\u4efb\u610f\u591a\u4e2a\u96c6\u5408\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5217\u51fa\u8fd9\u6837\u4e00\u4e2a\u7b49\u5f0f\uff0c\u7b49\u5f0f\u5de6\u8fb9\u662f\u6240\u6709\u96c6\u5408\u7684\u5e76\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u53f3\u8fb9\u662f\u8fd9\u4e9b\u96c6\u5408\u7684\u5404\u79cd\u642d\u914d\u3002\u6bcf\u4e2a\u642d\u914d\u90fd\u662f\u82e5\u5e72\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\uff0c\u4e14\u6bcf\u4e00\u9879\u524d\u9762\u7684\u6b63\u8d1f\u53f7\u53d6\u51b3\u4e8e\u96c6\u5408\u7684\u4e2a\u6570\u2014\u2014\u2014\u2014\u5947\u6570\u4e2a\u96c6\u5408\u4e3a\u6b63\uff0c\u5076\u6570\u4e2a\u96c6\u5408\u4e3a\u8d1f\u3002\u5373 \u8bbe S S \u4e3a\u6709\u9650\u96c6\uff0c A_i\\in S~(i=1,2,...,n~,~n\\ge 2) A_i\\in S~(i=1,2,...,n~,~n\\ge 2) \uff0c\u5219\u6709 | \\bigcup_{i=1}^n A_i | =\\sum_{k=1}^n (-1)^{(k-1)} \\times \\sum_{1\\le i_1<i_2<...<i_k\\le n} |A_{i_1}\\cap A_{i_2} \\cap ...\\cap A_{i_k}| | \\bigcup_{i=1}^n A_i | =\\sum_{k=1}^n (-1)^{(k-1)} \\times \\sum_{1\\le i_1<i_2<...<i_k\\le n} |A_{i_1}\\cap A_{i_2} \\cap ...\\cap A_{i_k}| \u5bb9\u65a5\u539f\u7406\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u5e94\u7528 \u00b6 \u4f8b\u9898 BZOJ 1042 [HAOI2008] \u786c\u5e01\u8d2d\u7269 \u9898\u76ee\u5927\u610f\uff1a\u4e00\u5171\u6709 4 4 \u79cd\u786c\u5e01\uff0c\u9762\u503c\u5206\u522b\u4e3a c_1,c_2,c_3,c_4 c_1,c_2,c_3,c_4 \u3002\u67d0\u4eba\u53bb\u4e70\u4e1c\u897f\uff0c\u53bb\u4e86 tot tot \u6b21\u3002\u6bcf\u6b21\u7ed9\u51fa d1,d2,d3,d4 d1,d2,d3,d4 \uff0c d_i d_i \u8868\u793a\u6709 i i \u4e2a\u9762\u503c\u4e3a c_i c_i \u7684\u786c\u5e01\uff0c\u6c42\u8d2d\u4e70\u4ef7\u503c\u4e3a s s \u7684\u7269\u54c1\u7684\u4ed8\u6b3e\u65b9\u6848\u6570\u3002 \u5148\u7528\u591a\u91cd\u80cc\u5305\u9884\u5904\u7406\u51fa f(i) f(i) \uff0c\u8868\u793a\u4e0d\u9650\u5236\u949e\u7968\u6570\u91cf\u8d2d\u4e70\u4ef7\u683c\u4e3a i i \u7684\u7269\u54c1\u7684\u65b9\u6848\u6570\u3002\u7531\u4e8e\u5bb9\u65a5\u539f\u7406\uff0c\u6211\u4eec\u6700\u540e\u7684\u7b54\u6848\u4e3a f(s)-f(s-d_1)-f(s-d_2)-f(s-d_3)-f(s-d_4) f(s)-f(s-d_1)-f(s-d_2)-f(s-d_3)-f(s-d_4) +f(s-d_1-d_2)+f(s-d_1-d_3)+f(s-d_1-d_4)+f(s-d_2-d_3)+f(s-d_2-d_4)+f(s-d_3-d_4) +f(s-d_1-d_2)+f(s-d_1-d_3)+f(s-d_1-d_4)+f(s-d_2-d_3)+f(s-d_2-d_4)+f(s-d_3-d_4) -f(s-d_1-d_2-d_3)-f(s-d_1-d_2-d_4)-f(s-d_1-d_3-d_4)-f(s-d_2-d_3-d_4)+f(s-d_1-d_2-d_3-d_4) -f(s-d_1-d_2-d_3)-f(s-d_1-d_2-d_4)-f(s-d_1-d_3-d_4)-f(s-d_2-d_3-d_4)+f(s-d_1-d_2-d_3-d_4) \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 O(1) O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\u3002 \u7ec3\u4e60 \u00b6 BZOJ 4665 \u5c0f w \u7684\u559c\u7cd6 BZOJ 4361 isn","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"math/inclusion-exclusion-principle/#_1","text":"\u4f8b\u9898 BZOJ 1042 [HAOI2008] \u786c\u5e01\u8d2d\u7269 \u9898\u76ee\u5927\u610f\uff1a\u4e00\u5171\u6709 4 4 \u79cd\u786c\u5e01\uff0c\u9762\u503c\u5206\u522b\u4e3a c_1,c_2,c_3,c_4 c_1,c_2,c_3,c_4 \u3002\u67d0\u4eba\u53bb\u4e70\u4e1c\u897f\uff0c\u53bb\u4e86 tot tot \u6b21\u3002\u6bcf\u6b21\u7ed9\u51fa d1,d2,d3,d4 d1,d2,d3,d4 \uff0c d_i d_i \u8868\u793a\u6709 i i \u4e2a\u9762\u503c\u4e3a c_i c_i \u7684\u786c\u5e01\uff0c\u6c42\u8d2d\u4e70\u4ef7\u503c\u4e3a s s \u7684\u7269\u54c1\u7684\u4ed8\u6b3e\u65b9\u6848\u6570\u3002 \u5148\u7528\u591a\u91cd\u80cc\u5305\u9884\u5904\u7406\u51fa f(i) f(i) \uff0c\u8868\u793a\u4e0d\u9650\u5236\u949e\u7968\u6570\u91cf\u8d2d\u4e70\u4ef7\u683c\u4e3a i i \u7684\u7269\u54c1\u7684\u65b9\u6848\u6570\u3002\u7531\u4e8e\u5bb9\u65a5\u539f\u7406\uff0c\u6211\u4eec\u6700\u540e\u7684\u7b54\u6848\u4e3a f(s)-f(s-d_1)-f(s-d_2)-f(s-d_3)-f(s-d_4) f(s)-f(s-d_1)-f(s-d_2)-f(s-d_3)-f(s-d_4) +f(s-d_1-d_2)+f(s-d_1-d_3)+f(s-d_1-d_4)+f(s-d_2-d_3)+f(s-d_2-d_4)+f(s-d_3-d_4) +f(s-d_1-d_2)+f(s-d_1-d_3)+f(s-d_1-d_4)+f(s-d_2-d_3)+f(s-d_2-d_4)+f(s-d_3-d_4) -f(s-d_1-d_2-d_3)-f(s-d_1-d_2-d_4)-f(s-d_1-d_3-d_4)-f(s-d_2-d_3-d_4)+f(s-d_1-d_2-d_3-d_4) -f(s-d_1-d_2-d_3)-f(s-d_1-d_2-d_4)-f(s-d_1-d_3-d_4)-f(s-d_2-d_3-d_4)+f(s-d_1-d_2-d_3-d_4) \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 O(1) O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\u3002","title":"\u5bb9\u65a5\u539f\u7406\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u5e94\u7528"},{"location":"math/inclusion-exclusion-principle/#_2","text":"BZOJ 4665 \u5c0f w \u7684\u559c\u7cd6 BZOJ 4361 isn","title":"\u7ec3\u4e60"},{"location":"math/integral/","text":"","title":"\u6570\u503c\u79ef\u5206"},{"location":"math/inverse/","text":"\u9006\u5143\u7b80\u4ecb \u00b6 \u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b ax \\equiv 1 \\pmod b ax \\equiv 1 \\pmod b \uff0c\u5219 x x \u79f0\u4e3a a \\mod b a \\mod b \u7684\u9006\u5143\uff0c\u8bb0\u4f5c a^{-1} a^{-1} \u3002 \u5982\u4f55\u6c42\u9006\u5143 \u00b6 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5 \u00b6 1 2 3 4 5 6 7 8 9 10 11 void ex_gcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return ; } ex_gcd ( b , a % b , x , y ); int t = x ; x = y ; y = t - a / b * y ; return ; } \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\u548c\u6c42\u89e3 \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u662f\u4e00\u4e2a\u539f\u7406\uff0c\u5728\u8fd9\u91cc\u4e0d\u5c55\u5f00\u89e3\u91ca\u3002 \u5feb\u901f\u5e42\u6cd5 \u00b6 \u8fd9\u4e2a\u8981\u8fd0\u7528 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a \u82e5 p p \u4e3a\u8d28\u6570\uff0c a a \u4e3a\u6b63\u6574\u6570\uff0c\u4e14 a a \u3001 p p \u4e92\u8d28\uff0c\u5219 a^{p-1} \\equiv 1 \\pmod p a^{p-1} \\equiv 1 \\pmod p \u3002 \u56e0\u4e3a ax \\equiv 1 \\pmod b ax \\equiv 1 \\pmod b \uff1b \u6240\u4ee5 ax \\equiv a^{b-1} \\pmod b ax \\equiv a^{b-1} \\pmod b \uff08\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff09\uff1b \u6240\u4ee5 x \\equiv a^{b-2} \\pmod b x \\equiv a^{b-2} \\pmod b \uff1b \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u6765\u6c42\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 #define ll long long inline ll poW ( ll a , ll b ) { long long ans = 1 ; a %= p ; while ( b ) { if ( b & 1 ) ans = (( ans * a ) % p + p ) % p ; a = ( a * a ) % p ; b >>= 1 ; } return ans % p ; } \u7ebf\u6027\u6c42\u9006\u5143 \u00b6 \u4f46\u662f\u5982\u679c\u8981\u6c42\u7684\u5f88\u591a\uff0c\u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u5c31\u663e\u5f97\u6162\u4e86\uff0c\u5f88\u6709\u53ef\u80fd\u8d85\u65f6\uff0c\u6240\u4ee5\u4e0b\u9762\u6765\u8bb2\u4e00\u4e0b\u5982\u4f55\u7ebf\u6027\u6c42\u9006\u5143\u3002 \u9996\u5148\uff0c\u5f88\u663e\u7136\u7684 1^{-1} \\equiv 1 \\pmod p 1^{-1} \\equiv 1 \\pmod p \uff1b \u7136\u540e\uff0c\u8bbe p=ki+j,j<i,1<i<p p=ki+j,j<i,1<i<p \uff0c\u518d\u653e\u5230 \\mod p \\mod p \u610f\u4e49\u4e0b\u5c31\u4f1a\u5f97\u5230\uff1a ki+j \\equiv 0 \\pmod p ki+j \\equiv 0 \\pmod p \uff1b \u4e24\u8fb9\u540c\u65f6\u4e58 i^{-1},j^{-1} i^{-1},j^{-1} \uff1a kj^{-1}+i^{-1} \\equiv 0 \\pmod p kj^{-1}+i^{-1} \\equiv 0 \\pmod p \uff1b i^{-1} \\equiv -kj^{-1}+ \\pmod p i^{-1} \\equiv -kj^{-1}+ \\pmod p \uff1b i^{-1} \\equiv -(\\frac{p}{i}) (p \\mod i)^{-1} i^{-1} \\equiv -(\\frac{p}{i}) (p \\mod i)^{-1} \uff1b \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u51fa\u9006\u5143\u4e86\uff0c\u4ee3\u7801\u53ea\u6709\u4e00\u884c\uff1a 1 a [ i ] = - ( p / i ) * a [ p % i ]; \u4f46\u662f\uff0c\u6709\u4e9b\u60c5\u51b5\u4e0b\u8981\u907f\u514d\u51fa\u73b0\u8d1f\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6539\u6539\u4ee3\u7801\uff0c\u8ba9\u5b83\u53ea\u6c42\u6b63\u6574\u6570\uff1a 1 a [ i ] = ( p - p / i ) * a [ p % i ] % p ; \u8fd9\u5c31\u662f\u7ebf\u6027\u6c42\u9006\u5143 \u9006\u5143\u7ec3\u4e60\u9898 \u00b6 \u3010\u6a21\u677f\u3011\u4e58\u6cd5\u9006\u5143 \u540c\u4f59\u65b9\u7a0b [AHOI2005] \u6d17\u724c [SDOI2016] \u6392\u5217\u8ba1\u6570","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"math/inverse/#_1","text":"\u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b ax \\equiv 1 \\pmod b ax \\equiv 1 \\pmod b \uff0c\u5219 x x \u79f0\u4e3a a \\mod b a \\mod b \u7684\u9006\u5143\uff0c\u8bb0\u4f5c a^{-1} a^{-1} \u3002","title":"\u9006\u5143\u7b80\u4ecb"},{"location":"math/inverse/#_2","text":"","title":"\u5982\u4f55\u6c42\u9006\u5143"},{"location":"math/inverse/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 void ex_gcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return ; } ex_gcd ( b , a % b , x , y ); int t = x ; x = y ; y = t - a / b * y ; return ; } \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\u548c\u6c42\u89e3 \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u662f\u4e00\u4e2a\u539f\u7406\uff0c\u5728\u8fd9\u91cc\u4e0d\u5c55\u5f00\u89e3\u91ca\u3002","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5"},{"location":"math/inverse/#_4","text":"\u8fd9\u4e2a\u8981\u8fd0\u7528 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a \u82e5 p p \u4e3a\u8d28\u6570\uff0c a a \u4e3a\u6b63\u6574\u6570\uff0c\u4e14 a a \u3001 p p \u4e92\u8d28\uff0c\u5219 a^{p-1} \\equiv 1 \\pmod p a^{p-1} \\equiv 1 \\pmod p \u3002 \u56e0\u4e3a ax \\equiv 1 \\pmod b ax \\equiv 1 \\pmod b \uff1b \u6240\u4ee5 ax \\equiv a^{b-1} \\pmod b ax \\equiv a^{b-1} \\pmod b \uff08\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff09\uff1b \u6240\u4ee5 x \\equiv a^{b-2} \\pmod b x \\equiv a^{b-2} \\pmod b \uff1b \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u6765\u6c42\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 #define ll long long inline ll poW ( ll a , ll b ) { long long ans = 1 ; a %= p ; while ( b ) { if ( b & 1 ) ans = (( ans * a ) % p + p ) % p ; a = ( a * a ) % p ; b >>= 1 ; } return ans % p ; }","title":"\u5feb\u901f\u5e42\u6cd5"},{"location":"math/inverse/#_5","text":"\u4f46\u662f\u5982\u679c\u8981\u6c42\u7684\u5f88\u591a\uff0c\u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u5c31\u663e\u5f97\u6162\u4e86\uff0c\u5f88\u6709\u53ef\u80fd\u8d85\u65f6\uff0c\u6240\u4ee5\u4e0b\u9762\u6765\u8bb2\u4e00\u4e0b\u5982\u4f55\u7ebf\u6027\u6c42\u9006\u5143\u3002 \u9996\u5148\uff0c\u5f88\u663e\u7136\u7684 1^{-1} \\equiv 1 \\pmod p 1^{-1} \\equiv 1 \\pmod p \uff1b \u7136\u540e\uff0c\u8bbe p=ki+j,j<i,1<i<p p=ki+j,j<i,1<i<p \uff0c\u518d\u653e\u5230 \\mod p \\mod p \u610f\u4e49\u4e0b\u5c31\u4f1a\u5f97\u5230\uff1a ki+j \\equiv 0 \\pmod p ki+j \\equiv 0 \\pmod p \uff1b \u4e24\u8fb9\u540c\u65f6\u4e58 i^{-1},j^{-1} i^{-1},j^{-1} \uff1a kj^{-1}+i^{-1} \\equiv 0 \\pmod p kj^{-1}+i^{-1} \\equiv 0 \\pmod p \uff1b i^{-1} \\equiv -kj^{-1}+ \\pmod p i^{-1} \\equiv -kj^{-1}+ \\pmod p \uff1b i^{-1} \\equiv -(\\frac{p}{i}) (p \\mod i)^{-1} i^{-1} \\equiv -(\\frac{p}{i}) (p \\mod i)^{-1} \uff1b \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u51fa\u9006\u5143\u4e86\uff0c\u4ee3\u7801\u53ea\u6709\u4e00\u884c\uff1a 1 a [ i ] = - ( p / i ) * a [ p % i ]; \u4f46\u662f\uff0c\u6709\u4e9b\u60c5\u51b5\u4e0b\u8981\u907f\u514d\u51fa\u73b0\u8d1f\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6539\u6539\u4ee3\u7801\uff0c\u8ba9\u5b83\u53ea\u6c42\u6b63\u6574\u6570\uff1a 1 a [ i ] = ( p - p / i ) * a [ p % i ] % p ; \u8fd9\u5c31\u662f\u7ebf\u6027\u6c42\u9006\u5143","title":"\u7ebf\u6027\u6c42\u9006\u5143"},{"location":"math/inverse/#_6","text":"\u3010\u6a21\u677f\u3011\u4e58\u6cd5\u9006\u5143 \u540c\u4f59\u65b9\u7a0b [AHOI2005] \u6d17\u724c [SDOI2016] \u6392\u5217\u8ba1\u6570","title":"\u9006\u5143\u7ec3\u4e60\u9898"},{"location":"math/lagrange-poly/","text":"\u4f8b\u9898 \u6d1b\u8c37 P4781 \u3010\u6a21\u677f\u3011\u62c9\u683c\u6717\u65e5\u63d2\u503c \u9898\u76ee\u5927\u610f \u00b6 \u7ed9\u51fa n n \u4e2a\u70b9 P_i(x_i,y_i) P_i(x_i,y_i) \uff0c\u5c06\u8fc7\u8fd9 n n \u4e2a\u70b9\u7684\u6700\u591a n-1 n-1 \u6b21\u7684\u591a\u9879\u5f0f\u8bb0\u4e3a f(x) f(x) \uff0c\u6c42 f(k) f(k) \u7684\u503c\u3002 \u65b9\u6cd5 1\uff1a\u5dee\u5206\u6cd5 \u00b6 \u5dee\u5206\u6cd5\u9002\u7528\u4e8e x_i=i x_i=i \u7684\u60c5\u51b5\u3002 \u5982\uff0c\u7528\u5dee\u5206\u6cd5\u6c42 f(x)=\\sum_{i=1}^{x} i^2 f(x)=\\sum_{i=1}^{x} i^2 \u7684\u591a\u9879\u5f0f\u5f62\u5f0f\u3002 1 2 3 4 1 5 14 30 55 91 4 9 16 25 36 5 7 9 11 2 2 2 \u7b2c\u4e00\u884c\u4e3a f(x) f(x) \u7684\u8fde\u7eed\u7684\u524d\u51e0\u9879\uff1b\u82e5\u4e0a\u9762\u4e00\u884c\u6709 n n \u4e2a\u503c\uff0c\u4e0b\u9762\u4e00\u884c\u6709 n-1 n-1 \u4e2a\u503c\uff0c\u6bcf\u4e2a\u503c\u4e3a\u4e0a\u9762\u5bf9\u5e94\u7684\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u3002\u89c2\u5bdf\u5230\uff0c\u5982\u679c\u8fd9\u6837\u64cd\u4f5c\u7684\u6b21\u6570\u8db3\u591f\u591a\uff08\u524d\u63d0\u662f f(x) f(x) \u4e3a\u591a\u9879\u5f0f\uff09\uff0c\u6bcf\u6b21\u603b\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b9a\u503c\uff0c\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u5b9a\u503c\u6c42\u51fa f(x) f(x) \u7684\u6bcf\u4e00\u9879\u7684\u7cfb\u6570\uff0c\u7136\u540e\u5373\u53ef\u5c06 k k \u4ee3\u5165\u591a\u9879\u5f0f\u4e2d\u6c42\u89e3\u3002\u5982\u4e0a\u4f8b\u4e2d\u53ef\u6c42\u51fa f(x)=\\frac 1 3 n^3+\\frac 1 2 n^2+\\frac 1 6 n f(x)=\\frac 1 3 n^3+\\frac 1 2 n^2+\\frac 1 6 n \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \uff0c\u5bf9\u7ed9\u51fa\u7684\u70b9\u7684\u9650\u5236\u6027\u8f83\u5f3a\u3002 \u65b9\u6cd5 2\uff1a\u9ad8\u65af\u6d88\u5143 \u00b6 \u4f7f\u7528 \u5f85\u5b9a\u7cfb\u6570\u6cd5 \u3002\u8bbe f(x)=\\sum_{i=0}^{n-1} a_ix^i f(x)=\\sum_{i=0}^{n-1} a_ix^i \u5c06\u6bcf\u4e2a x_i x_i \u4ee3\u5165 f(x) f(x) \uff0c\u6709 f(x_i)=y_i f(x_i)=y_i \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7531 n n \u6761 n n \u5143 1 1 \u6b21\u65b9\u7a0b\u6240\u7ec4\u6210\u7684\u65b9\u7a0b\u7ec4\uff0c\u7136\u540e\u4f7f\u7528 \u9ad8\u65af\u6d88\u5143 \u6c42\u51fa\u6bcf\u4e00\u9879 a_i a_i \uff0c\u7136\u540e\u5c06 k k \u4ee3\u5165\u6c42\u503c\u3002 \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u9ad8\u65af\u6d88\u5143\uff0c\u8bf7\u770b luogu P3389 \u9ad8\u65af\u6d88\u5143\u6cd5 \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3) O(n^3) \uff0c\u5bf9\u7ed9\u51fa\u70b9\u7684\u5750\u6807\u65e0\u8981\u6c42\u3002 \u65b9\u6cd5 3\uff1a \u62c9\u683c\u6717\u65e5\u5dee\u503c\u6cd5 \u00b6 \u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u505a\u4e00\u4e2a\u5bf9\u4e8e x x \u8f74\u7684\u5782\u7ebf\uff0c\u8bbe\u5782\u8db3\u4e3a H_i(x_i,0) H_i(x_i,0) \u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9ed1\u7ebf\u7b49\u4e8e\u84dd\u7ebf\u52a0\u7eff\u7ebf\u52a0\u7ea2\u7ebf\u3002\u6bcf\u6b21\u6211\u4eec\u9009\u62e9 1 1 \u4e2a P_i P_i \uff0c\u5e76\u9009\u62e9\u5176\u4ed6\u7684 H_j[j\\neq i] H_j[j\\neq i] \uff0c\u505a\u4e00\u6761\u8fc7\u8fd9\u4e9b\u70b9\u7684\u4e00\u6761\u81f3\u591a n-1 n-1 \u6b21\u7684\u7ebf\u3002\u7531\u4e8e\u6709 n-2 n-2 \u4e2a\u70b9\u90fd\u5728 x x \u8f74\u4e0a\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u6761\u7ebf\u7684\u89e3\u6790\u5f0f\u4e00\u5b9a\u662f\u5f62\u5982 g_i(x)=y_i\\times (\\prod_{i=1}^{n} (x-x_i)[i\\neq x]) g_i(x)=y_i\\times (\\prod_{i=1}^{n} (x-x_i)[i\\neq x]) \u7684\u5f62\u5f0f\u3002 \u6700\u540e\u5c06\u6240\u6709\u7684 g(x) g(x) \u76f8\u52a0\uff0c\u5373 f(x)=sum_{i=1}^{n}g_i(x) f(x)=sum_{i=1}^{n}g_i(x) \u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 P_i P_i \uff0c\u90fd\u53ea\u6709\u4e00\u6761\u51fd\u6570\u7ecf\u8fc7 P_i P_i \uff0c\u5176\u4f59\u90fd\u7ecf\u8fc7 H_i H_i \uff0c\u8fd9\u4e00\u9879\u7684\u7cfb\u6570\u662f 0 0 \uff0c\u6240\u4ee5\u6700\u540e\u7684\u548c\u51fd\u6570\u603b\u662f\u8fc7\u6240\u6709 n n \u4e2a\u70b9\u7684\u3002 \u516c\u5f0f\u6574\u7406\u5f97\uff1a f(x)=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{x-x_j}{x_i-x_j}) f(x)=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{x-x_j}{x_i-x_j}) \u5982\u679c\u8981\u5c06\u6bcf\u4e00\u9879\u90fd\u7b97\u51fa\u6765\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u662f O(n^2) O(n^2) \u7684\uff0c\u4f46\u662f\u672c\u9898\u4e2d\u53ea\u7528\u6c42\u51fa f(k) f(k) \u7684\u503c\uff0c\u6240\u4ee5\u53ea\u9700\u5c06 k k \u4ee3\u5165\u8fdb\u5f0f\u5b50\u91cc\u5f97\uff1a Ans=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{k-x_j}{x_i-x_j}) Ans=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{k-x_j}{x_i-x_j}) \u672c\u9898\u4e2d\uff0c\u8fd8\u9700\u8981\u6c42\u89e3\u9006\u5143\u3002\u5982\u679c\u5148\u5206\u522b\u8ba1\u7b97\u51fa\u5206\u5b50\u548c\u5206\u6bcd\uff0c\u5728\u8ba1\u7b97\u5206\u6bcd\u7684\u9006\u5143\uff0c\u4e58\u4e0a\u5206\u5b50\uff0c\u7d2f\u52a0\u8fdb\u6700\u540e\u7684\u7b54\u6848\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u74f6\u9888\u5c31\u4e0d\u4f1a\u5728\u6c42\u9006\u5143\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 2010 ; typedef long long ll ; ll mod = 998244353 ; ll n , k , x [ maxn ], y [ maxn ], ans , s1 , s2 ; ll powmod ( ll a , ll x ) { ll ret = 1ll , nww = a ; while ( x ) { if ( x & 1 ) ret = ret * nww % mod ; nww = nww * nww % mod ; x >>= 1 ; } return ret ; } ll inv ( ll x ) { return powmod ( x , mod - 2 ); } int main () { scanf ( \"%lld%lld\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld%lld\" , x + i , y + i ); for ( int i = 1 ; i <= n ; i ++ ) { s1 = y [ i ] % mod ; s2 = 1ll ; for ( int j = 1 ; j <= n ; j ++ ) if ( i != j ) s1 = s1 * ( k - x [ j ]) % mod , s2 = s2 * (( x [ i ] - x [ j ] % mod ) % mod ) % mod ; ans += s1 * inv ( s2 ) % mod ; ans = ( ans + mod ) % mod ; } printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u62c9\u683c\u6717\u65e5\u63d2\u503c"},{"location":"math/lagrange-poly/#_1","text":"\u7ed9\u51fa n n \u4e2a\u70b9 P_i(x_i,y_i) P_i(x_i,y_i) \uff0c\u5c06\u8fc7\u8fd9 n n \u4e2a\u70b9\u7684\u6700\u591a n-1 n-1 \u6b21\u7684\u591a\u9879\u5f0f\u8bb0\u4e3a f(x) f(x) \uff0c\u6c42 f(k) f(k) \u7684\u503c\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"math/lagrange-poly/#1","text":"\u5dee\u5206\u6cd5\u9002\u7528\u4e8e x_i=i x_i=i \u7684\u60c5\u51b5\u3002 \u5982\uff0c\u7528\u5dee\u5206\u6cd5\u6c42 f(x)=\\sum_{i=1}^{x} i^2 f(x)=\\sum_{i=1}^{x} i^2 \u7684\u591a\u9879\u5f0f\u5f62\u5f0f\u3002 1 2 3 4 1 5 14 30 55 91 4 9 16 25 36 5 7 9 11 2 2 2 \u7b2c\u4e00\u884c\u4e3a f(x) f(x) \u7684\u8fde\u7eed\u7684\u524d\u51e0\u9879\uff1b\u82e5\u4e0a\u9762\u4e00\u884c\u6709 n n \u4e2a\u503c\uff0c\u4e0b\u9762\u4e00\u884c\u6709 n-1 n-1 \u4e2a\u503c\uff0c\u6bcf\u4e2a\u503c\u4e3a\u4e0a\u9762\u5bf9\u5e94\u7684\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u3002\u89c2\u5bdf\u5230\uff0c\u5982\u679c\u8fd9\u6837\u64cd\u4f5c\u7684\u6b21\u6570\u8db3\u591f\u591a\uff08\u524d\u63d0\u662f f(x) f(x) \u4e3a\u591a\u9879\u5f0f\uff09\uff0c\u6bcf\u6b21\u603b\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b9a\u503c\uff0c\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u5b9a\u503c\u6c42\u51fa f(x) f(x) \u7684\u6bcf\u4e00\u9879\u7684\u7cfb\u6570\uff0c\u7136\u540e\u5373\u53ef\u5c06 k k \u4ee3\u5165\u591a\u9879\u5f0f\u4e2d\u6c42\u89e3\u3002\u5982\u4e0a\u4f8b\u4e2d\u53ef\u6c42\u51fa f(x)=\\frac 1 3 n^3+\\frac 1 2 n^2+\\frac 1 6 n f(x)=\\frac 1 3 n^3+\\frac 1 2 n^2+\\frac 1 6 n \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \uff0c\u5bf9\u7ed9\u51fa\u7684\u70b9\u7684\u9650\u5236\u6027\u8f83\u5f3a\u3002","title":"\u65b9\u6cd5 1\uff1a\u5dee\u5206\u6cd5"},{"location":"math/lagrange-poly/#2","text":"\u4f7f\u7528 \u5f85\u5b9a\u7cfb\u6570\u6cd5 \u3002\u8bbe f(x)=\\sum_{i=0}^{n-1} a_ix^i f(x)=\\sum_{i=0}^{n-1} a_ix^i \u5c06\u6bcf\u4e2a x_i x_i \u4ee3\u5165 f(x) f(x) \uff0c\u6709 f(x_i)=y_i f(x_i)=y_i \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7531 n n \u6761 n n \u5143 1 1 \u6b21\u65b9\u7a0b\u6240\u7ec4\u6210\u7684\u65b9\u7a0b\u7ec4\uff0c\u7136\u540e\u4f7f\u7528 \u9ad8\u65af\u6d88\u5143 \u6c42\u51fa\u6bcf\u4e00\u9879 a_i a_i \uff0c\u7136\u540e\u5c06 k k \u4ee3\u5165\u6c42\u503c\u3002 \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u9ad8\u65af\u6d88\u5143\uff0c\u8bf7\u770b luogu P3389 \u9ad8\u65af\u6d88\u5143\u6cd5 \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3) O(n^3) \uff0c\u5bf9\u7ed9\u51fa\u70b9\u7684\u5750\u6807\u65e0\u8981\u6c42\u3002","title":"\u65b9\u6cd5 2\uff1a\u9ad8\u65af\u6d88\u5143"},{"location":"math/lagrange-poly/#3","text":"\u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u505a\u4e00\u4e2a\u5bf9\u4e8e x x \u8f74\u7684\u5782\u7ebf\uff0c\u8bbe\u5782\u8db3\u4e3a H_i(x_i,0) H_i(x_i,0) \u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9ed1\u7ebf\u7b49\u4e8e\u84dd\u7ebf\u52a0\u7eff\u7ebf\u52a0\u7ea2\u7ebf\u3002\u6bcf\u6b21\u6211\u4eec\u9009\u62e9 1 1 \u4e2a P_i P_i \uff0c\u5e76\u9009\u62e9\u5176\u4ed6\u7684 H_j[j\\neq i] H_j[j\\neq i] \uff0c\u505a\u4e00\u6761\u8fc7\u8fd9\u4e9b\u70b9\u7684\u4e00\u6761\u81f3\u591a n-1 n-1 \u6b21\u7684\u7ebf\u3002\u7531\u4e8e\u6709 n-2 n-2 \u4e2a\u70b9\u90fd\u5728 x x \u8f74\u4e0a\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u6761\u7ebf\u7684\u89e3\u6790\u5f0f\u4e00\u5b9a\u662f\u5f62\u5982 g_i(x)=y_i\\times (\\prod_{i=1}^{n} (x-x_i)[i\\neq x]) g_i(x)=y_i\\times (\\prod_{i=1}^{n} (x-x_i)[i\\neq x]) \u7684\u5f62\u5f0f\u3002 \u6700\u540e\u5c06\u6240\u6709\u7684 g(x) g(x) \u76f8\u52a0\uff0c\u5373 f(x)=sum_{i=1}^{n}g_i(x) f(x)=sum_{i=1}^{n}g_i(x) \u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 P_i P_i \uff0c\u90fd\u53ea\u6709\u4e00\u6761\u51fd\u6570\u7ecf\u8fc7 P_i P_i \uff0c\u5176\u4f59\u90fd\u7ecf\u8fc7 H_i H_i \uff0c\u8fd9\u4e00\u9879\u7684\u7cfb\u6570\u662f 0 0 \uff0c\u6240\u4ee5\u6700\u540e\u7684\u548c\u51fd\u6570\u603b\u662f\u8fc7\u6240\u6709 n n \u4e2a\u70b9\u7684\u3002 \u516c\u5f0f\u6574\u7406\u5f97\uff1a f(x)=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{x-x_j}{x_i-x_j}) f(x)=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{x-x_j}{x_i-x_j}) \u5982\u679c\u8981\u5c06\u6bcf\u4e00\u9879\u90fd\u7b97\u51fa\u6765\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u662f O(n^2) O(n^2) \u7684\uff0c\u4f46\u662f\u672c\u9898\u4e2d\u53ea\u7528\u6c42\u51fa f(k) f(k) \u7684\u503c\uff0c\u6240\u4ee5\u53ea\u9700\u5c06 k k \u4ee3\u5165\u8fdb\u5f0f\u5b50\u91cc\u5f97\uff1a Ans=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{k-x_j}{x_i-x_j}) Ans=\\sum_{i=1}^{n} y_i\\times(\\prod_{j\\neq i }\\frac{k-x_j}{x_i-x_j}) \u672c\u9898\u4e2d\uff0c\u8fd8\u9700\u8981\u6c42\u89e3\u9006\u5143\u3002\u5982\u679c\u5148\u5206\u522b\u8ba1\u7b97\u51fa\u5206\u5b50\u548c\u5206\u6bcd\uff0c\u5728\u8ba1\u7b97\u5206\u6bcd\u7684\u9006\u5143\uff0c\u4e58\u4e0a\u5206\u5b50\uff0c\u7d2f\u52a0\u8fdb\u6700\u540e\u7684\u7b54\u6848\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u74f6\u9888\u5c31\u4e0d\u4f1a\u5728\u6c42\u9006\u5143\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002","title":"\u65b9\u6cd5 3\uff1a \u62c9\u683c\u6717\u65e5\u5dee\u503c\u6cd5"},{"location":"math/lagrange-poly/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 2010 ; typedef long long ll ; ll mod = 998244353 ; ll n , k , x [ maxn ], y [ maxn ], ans , s1 , s2 ; ll powmod ( ll a , ll x ) { ll ret = 1ll , nww = a ; while ( x ) { if ( x & 1 ) ret = ret * nww % mod ; nww = nww * nww % mod ; x >>= 1 ; } return ret ; } ll inv ( ll x ) { return powmod ( x , mod - 2 ); } int main () { scanf ( \"%lld%lld\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld%lld\" , x + i , y + i ); for ( int i = 1 ; i <= n ; i ++ ) { s1 = y [ i ] % mod ; s2 = 1ll ; for ( int j = 1 ; j <= n ; j ++ ) if ( i != j ) s1 = s1 * ( k - x [ j ]) % mod , s2 = s2 * (( x [ i ] - x [ j ] % mod ) % mod ) % mod ; ans += s1 * inv ( s2 ) % mod ; ans = ( ans + mod ) % mod ; } printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"math/linear-equation/","text":"\u4ecb\u7ecd \u00b6 \u5f62\u5982 ax \\equiv b \\pmod c ax \\equiv b \\pmod c \u7684\u65b9\u7a0b\u88ab\u79f0\u4e3a \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u3002 [NOIp 2012] \u540c\u4f59\u65b9\u7a0b \u6c42\u89e3\u65b9\u6cd5 \u00b6 \u6839\u636e\u4ee5\u4e0b\u4e24\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u540c\u4f59\u65b9\u7a0b ax \\equiv b \\pmod c ax \\equiv b \\pmod c \u7684\u89e3\u3002 \u5b9a\u7406 1\uff1a \u65b9\u7a0b ax+by=c ax+by=c \u4e0e\u65b9\u7a0b ax \\equiv c \\pmod b ax \\equiv c \\pmod b \u662f\u7b49\u4ef7\u7684\uff0c\u6709\u6574\u6570\u89e3\u7684\u5145\u8981\u6761\u4ef6\u4e3a \\gcd(a,b) \\mid c \\gcd(a,b) \\mid c \u3002 \u6839\u636e\u5b9a\u7406 1\uff0c\u65b9\u7a0b ax+by=c ax+by=c \uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa\u4e00\u7ec4 x_0,y_0 x_0,y_0 \uff0c\u4e5f\u5c31\u662f ax_0+by_0=\\gcd(a,b) ax_0+by_0=\\gcd(a,b) \uff0c\u7136\u540e\u4e24\u8fb9\u540c\u65f6\u9664\u4ee5 \\gcd(a,b) \\gcd(a,b) \uff0c\u518d\u4e58 c c \u3002\u7136\u540e\u5c31\u5f97\u5230\u4e86\u65b9\u7a0b acx_0/\\gcd(a,b)+bcy_0/\\gcd(a,b)=c acx_0/\\gcd(a,b)+bcy_0/\\gcd(a,b)=c \uff0c\u7136\u540e\u6211\u4eec\u5c31\u627e\u5230\u4e86\u65b9\u7a0b\u7684\u4e00\u4e2a\u89e3\u3002 \u5b9a\u7406 2\uff1a \u82e5 \\gcd(a,b)=1 \\gcd(a,b)=1 \uff0c\u4e14 x_0,y_0 x_0,y_0 \u4e3a\u65b9\u7a0b ax+by=c ax+by=c \u7684\u4e00\u7ec4\u89e3\uff0c\u5219\u8be5\u65b9\u7a0b\u7684\u4efb\u610f\u89e3\u53ef\u8868\u793a\u4e3a\uff1a x=x_0+bt,y=y_0+at x=x_0+bt,y=y_0+at , \u4e14\u5bf9\u4efb\u610f\u6574\u6570 t t \u90fd\u6210\u7acb\u3002 \u6839\u636e\u5b9a\u7406 2\uff0c\u53ef\u4ee5\u6c42\u51fa\u65b9\u7a0b\u7684\u6240\u6709\u89e3\u3002\u4f46\u5728\u5b9e\u9645\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u88ab\u8981\u6c42\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u6574\u6570\u89e3\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u7279\u89e3 x,t=b/\\gcd(a,b),x=(x \\mod t+t)\\mod t x,t=b/\\gcd(a,b),x=(x \\mod t+t)\\mod t \u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int ex_gcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int d = ex_gcd ( b , a % b , x , y ); int temp = x ; x = y ; y = temp - a / b * y ; return d ; } bool liEu ( int a , int b , int c , int & x , int & y ) { int d = ex_gcd ( a , b , x , y ); if ( c % d != 0 ) return 0 ; int k = c / d ; x *= k ; y *= k ; return 1 ; }","title":"\u7ebf\u6027\u65b9\u7a0b"},{"location":"math/linear-equation/#_1","text":"\u5f62\u5982 ax \\equiv b \\pmod c ax \\equiv b \\pmod c \u7684\u65b9\u7a0b\u88ab\u79f0\u4e3a \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u3002 [NOIp 2012] \u540c\u4f59\u65b9\u7a0b","title":"\u4ecb\u7ecd"},{"location":"math/linear-equation/#_2","text":"\u6839\u636e\u4ee5\u4e0b\u4e24\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u540c\u4f59\u65b9\u7a0b ax \\equiv b \\pmod c ax \\equiv b \\pmod c \u7684\u89e3\u3002 \u5b9a\u7406 1\uff1a \u65b9\u7a0b ax+by=c ax+by=c \u4e0e\u65b9\u7a0b ax \\equiv c \\pmod b ax \\equiv c \\pmod b \u662f\u7b49\u4ef7\u7684\uff0c\u6709\u6574\u6570\u89e3\u7684\u5145\u8981\u6761\u4ef6\u4e3a \\gcd(a,b) \\mid c \\gcd(a,b) \\mid c \u3002 \u6839\u636e\u5b9a\u7406 1\uff0c\u65b9\u7a0b ax+by=c ax+by=c \uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa\u4e00\u7ec4 x_0,y_0 x_0,y_0 \uff0c\u4e5f\u5c31\u662f ax_0+by_0=\\gcd(a,b) ax_0+by_0=\\gcd(a,b) \uff0c\u7136\u540e\u4e24\u8fb9\u540c\u65f6\u9664\u4ee5 \\gcd(a,b) \\gcd(a,b) \uff0c\u518d\u4e58 c c \u3002\u7136\u540e\u5c31\u5f97\u5230\u4e86\u65b9\u7a0b acx_0/\\gcd(a,b)+bcy_0/\\gcd(a,b)=c acx_0/\\gcd(a,b)+bcy_0/\\gcd(a,b)=c \uff0c\u7136\u540e\u6211\u4eec\u5c31\u627e\u5230\u4e86\u65b9\u7a0b\u7684\u4e00\u4e2a\u89e3\u3002 \u5b9a\u7406 2\uff1a \u82e5 \\gcd(a,b)=1 \\gcd(a,b)=1 \uff0c\u4e14 x_0,y_0 x_0,y_0 \u4e3a\u65b9\u7a0b ax+by=c ax+by=c \u7684\u4e00\u7ec4\u89e3\uff0c\u5219\u8be5\u65b9\u7a0b\u7684\u4efb\u610f\u89e3\u53ef\u8868\u793a\u4e3a\uff1a x=x_0+bt,y=y_0+at x=x_0+bt,y=y_0+at , \u4e14\u5bf9\u4efb\u610f\u6574\u6570 t t \u90fd\u6210\u7acb\u3002 \u6839\u636e\u5b9a\u7406 2\uff0c\u53ef\u4ee5\u6c42\u51fa\u65b9\u7a0b\u7684\u6240\u6709\u89e3\u3002\u4f46\u5728\u5b9e\u9645\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u88ab\u8981\u6c42\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u6574\u6570\u89e3\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u7279\u89e3 x,t=b/\\gcd(a,b),x=(x \\mod t+t)\\mod t x,t=b/\\gcd(a,b),x=(x \\mod t+t)\\mod t \u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int ex_gcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int d = ex_gcd ( b , a % b , x , y ); int temp = x ; x = y ; y = temp - a / b * y ; return d ; } bool liEu ( int a , int b , int c , int & x , int & y ) { int d = ex_gcd ( a , b , x , y ); if ( c % d != 0 ) return 0 ; int k = c / d ; x *= k ; y *= k ; return 1 ; }","title":"\u6c42\u89e3\u65b9\u6cd5"},{"location":"math/linear-programming/","text":"","title":"\u7ebf\u6027\u89c4\u5212"},{"location":"math/matrix/","text":"\u5b9a\u4e49 \u00b6 \u5bf9\u4e8e\u77e9\u9635 A A \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u662f\u6307 A[i][i] A[i][i] \u7684\u5143\u7d20\u3002 \u4e00\u822c\u7528 I I \u6765\u8868\u793a\u5355\u4f4d\u77e9\u9635\uff0c\u5c31\u662f\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u4e3a 1\uff0c\u5176\u4f59\u4f4d\u7f6e\u4e3a 0\u3002 \u6027\u8d28 \u00b6 \u77e9\u9635\u7684\u9006 \u00b6 A A \u7684\u9006\u77e9\u9635 P P \u662f\u4f7f\u5f97 A \\times P = I A \\times P = I \u7684\u77e9\u9635\u3002 \u9006\u77e9\u9635\u53ef\u4ee5\u7528 \u9ad8\u65af\u6d88\u5143 \u7684\u65b9\u5f0f\u6765\u6c42\u3002 \u8fd0\u7b97 \u00b6 \u77e9\u9635\u7684\u52a0\u51cf\u6cd5\u662f\u9010\u4e2a\u5143\u7d20\u8fdb\u884c\u7684\u3002 \u77e9\u9635\u4e58\u6cd5 \u00b6 \u77e9\u9635\u76f8\u4e58\u53ea\u6709\u5728\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u5217\u6570\u548c\u7b2c\u4e8c\u4e2a\u77e9\u9635\u7684\u884c\u6570\u76f8\u540c\u65f6\u624d\u6709\u610f\u4e49\u3002 \u8bbe A A \u4e3a P \\times M P \\times M \u7684\u77e9\u9635\uff0c B B \u4e3a M \\times Q M \\times Q \u7684\u77e9\u9635\uff0c\u8bbe\u77e9\u9635 C C \u4e3a\u77e9\u9635 A A \u4e0e B B \u7684\u4e58\u79ef\uff0c \u5176\u4e2d\u77e9\u9635 C C \u4e2d\u7684\u7b2c i i \u884c\u7b2c j j \u5217\u5143\u7d20\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a C_{i,j} = \\sum_{k=1}^MA_{i,k}B_{k,j} C_{i,j} = \\sum_{k=1}^MA_{i,k}B_{k,j} \u5982\u679c\u6ca1\u770b\u61c2\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u6ca1\u5173\u7cfb\u3002\u901a\u4fd7\u7684\u8bb2\uff0c\u5728\u77e9\u9635\u4e58\u6cd5\u4e2d\uff0c\u7ed3\u679c C C \u77e9\u9635\u7684\u7b2c i i \u884c\u7b2c j j \u5217\u7684\u6570\uff0c\u5c31\u662f\u7531\u77e9\u9635 A A \u7b2c i i \u884c M M \u4e2a\u6570\u4e0e\u77e9\u9635 B B \u7b2c j j \u5217 M M \u4e2a\u6570\u5206\u522b\u76f8\u4e58\u518d\u76f8\u52a0\u5f97\u5230\u7684\u3002 \u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6ee1\u8db3\u4e00\u822c\u7684\u4ea4\u6362\u5f8b\u3002 \u5229\u7528\u7ed3\u5408\u5f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u53ef\u4ee5\u5229\u7528 \u5feb\u901f\u5e42 \u7684\u601d\u60f3\u6765\u4f18\u5316\u3002 \u5728\u6bd4\u8d5b\u4e2d\uff0c\u7531\u4e8e\u7ebf\u6027\u9012\u63a8\u5f0f\u53ef\u4ee5\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\uff0c\u4e5f\u901a\u5e38\u7528\u77e9\u9635\u5feb\u901f\u5e42\u6765\u6c42\u7ebf\u6027\u9012\u63a8\u6570\u5217\u7684\u67d0\u4e00\u9879\u3002 \u53c2\u8003\u4ee3\u7801 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6765\u6a21\u62df\u77e9\u9635\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 struct mat { LL a [ sz ][ sz ]; inline mat () { memset ( a , 0 , sizeof a ); } inline mat operator + ( const mat & T ) const { mat res ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) res . a [ i ][ j ] = ( a [ i ][ j ] - T . a [ i ][ j ] + MOD ) % MOD ; return res ; } inline mat operator - ( const mat & T ) const { mat res ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) res . a [ i ][ j ] = ( a [ i ][ j ] + T . a [ i ][ j ]) % MOD ; return res ; } inline mat operator * ( const mat & T ) const { mat res ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) for ( int k = 0 ; k < sz ; ++ k ) { res . a [ i ][ j ] += mul ( a [ i ][ k ], T . a [ k ][ j ]); res . a [ i ][ j ] %= MOD ; } return res ; } inline mat operator ^ ( LL x ) const { mat res , bas ; for ( int i = 0 ; i < sz ; ++ i ) res . a [ i ][ i ] = 1 ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) bas . a [ i ][ j ] = a [ i ][ j ]; while ( x ) { if ( x & 1 ) res = res * bas ; bas = bas * bas ; x >>= 1 ; } return res ; } }; \u5e94\u7528 \u00b6 \u77e9\u9635\u52a0\u901f\u9012\u63a8 \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08Fibonacci Sequence\uff09\u5927\u5bb6\u5e94\u8be5\u90fd\u975e\u5e38\u7684\u719f\u6089\u4e86\u3002\u5728\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5f53\u4e2d\uff0c F_1 = F_2 = 1 F_1 = F_2 = 1 \uff0c F_i = F_{i - 1} + F_{i - 2}(i \\geq 3) F_i = F_{i - 1} + F_{i - 2}(i \\geq 3) \u3002 \u5982\u679c\u6709\u4e00\u9053\u9898\u76ee\u8ba9\u4f60\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c n n \u9879\u7684\u503c\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u83ab\u8fc7\u4e8e\u76f4\u63a5\u9012\u63a8\u4e86\u3002\u4f46\u662f\u5982\u679c n n \u7684\u8303\u56f4\u8fbe\u5230\u4e86 10^{18} 10^{18} \u7ea7\u522b\uff0c\u9012\u63a8\u5c31\u4e0d\u884c\u4e86\uff0c\u7a33 TLE\u3002\u8003\u8651\u77e9\u9635\u52a0\u901f\u9012\u63a8\u3002 \u8bbe Fib(n) Fib(n) \u8868\u793a\u4e00\u4e2a 1 \\times 2 1 \\times 2 \u7684\u77e9\u9635 \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \u3002\u6211\u4eec\u5e0c\u671b\u6839\u636e Fib(n-1)=\\left[ \\begin{array}{ccc}F_{n-1} & F_{n-2} \\end{array}\\right] Fib(n-1)=\\left[ \\begin{array}{ccc}F_{n-1} & F_{n-2} \\end{array}\\right] \u63a8\u51fa Fib(n) Fib(n) \u3002 \u8bd5\u63a8\u5bfc\u4e00\u4e2a\u77e9\u9635 \\text{base} \\text{base} \uff0c\u4f7f Fib(n-1) \\times \\text{base} = Fib(n) Fib(n-1) \\times \\text{base} = Fib(n) \uff0c\u5373 \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\text{base} = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\text{base} = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \u3002 \u600e\u4e48\u63a8\u5462\uff1f\u56e0\u4e3a F_n=F_{n-1}+F_{n-2} F_n=F_{n-1}+F_{n-2} \uff0c\u6240\u4ee5 \\text{base} \\text{base} \u77e9\u9635\u7b2c\u4e00\u5217\u5e94\u8be5\u662f \\left[\\begin{array}{ccc} 1 \\\\ 1 \\end{array}\\right] \\left[\\begin{array}{ccc} 1 \\\\ 1 \\end{array}\\right] \uff0c\u8fd9\u6837\u5728\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u8fd0\u7b97\u7684\u65f6\u5019\u624d\u80fd\u4ee4 F_{n-1} F_{n-1} \u4e0e F_{n-2} F_{n-2} \u76f8\u52a0\uff0c\u4ece\u800c\u5f97\u51fa F_n F_n \u3002\u540c\u7406\uff0c\u4e3a\u4e86\u5f97\u51fa F_{n-1} F_{n-1} \uff0c\u77e9\u9635 \\text{base} \\text{base} \u7684\u7b2c\u4e8c\u5217\u5e94\u8be5\u4e3a \\left[\\begin{array}{ccc} 1 \\\\ 0 \\end{array}\\right] \\left[\\begin{array}{ccc} 1 \\\\ 0 \\end{array}\\right] \u3002 \u7efc\u4e0a\u6240\u8ff0\uff1a \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \u539f\u5f0f\u5316\u4e3a \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \u8f6c\u5316\u4e3a\u4ee3\u7801\uff0c\u5e94\u8be5\u600e\u4e48\u6c42\u5462\uff1f \u5b9a\u4e49\u521d\u59cb\u77e9\u9635 \\text{ans} = \\left[\\begin{array}{ccc}F_2 & F_1\\end{array}\\right] = \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right], \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \\text{ans} = \\left[\\begin{array}{ccc}F_2 & F_1\\end{array}\\right] = \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right], \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \u3002\u90a3\u4e48\uff0c F_n F_n \u5c31\u7b49\u4e8e \\text{ans} \\times \\text{base}^{n-2} \\text{ans} \\times \\text{base}^{n-2} \u8fd9\u4e2a\u77e9\u9635\u7684\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u5143\u7d20\uff0c\u4e5f\u5c31\u662f \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \u7684\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u5143\u7d20\u3002 \u6ce8\u610f\uff0c\u77e9\u9635\u4e58\u6cd5\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u80fd\u5199\u6210 \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \\times \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \\times \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \u7684\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u5143\u7d20\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e n \\leq 2 n \\leq 2 \u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u8f93\u51fa 1 1 \u5373\u53ef\uff0c\u4e0d\u9700\u8981\u6267\u884c\u77e9\u9635\u5feb\u901f\u5e42\u3002 \u4e3a\u4ec0\u4e48\u8981\u4e58\u4e0a \\text{base} \\text{base} \u77e9\u9635\u7684 n-2 n-2 \u6b21\u65b9\u800c\u4e0d\u662f n n \u6b21\u65b9\u5462\uff1f\u56e0\u4e3a F_1, F_2 F_1, F_2 \u662f\u4e0d\u9700\u8981\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u5c31\u80fd\u6c42\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u53ea\u8fdb\u884c\u4e00\u6b21\u4e58\u6cd5\uff0c\u5c31\u5df2\u7ecf\u6c42\u51fa F_3 F_3 \u4e86\u3002\u5982\u679c\u8fd8\u4e0d\u662f\u5f88\u7406\u89e3\u4e3a\u4ec0\u4e48\u5e42\u662f n-2 n-2 \uff0c\u5efa\u8bae\u624b\u7b97\u4e00\u4e0b\u3002 \u4e0b\u9762\u662f\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c n n \u9879\u5bf9 10^9+7 10^9+7 \u53d6\u6a21\u7684\u793a\u4f8b\u4ee3\u7801\uff08\u6838\u5fc3\u90e8\u5206\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 const int mod = 1000000007 ; struct Matrix { int a [ 3 ][ 3 ]; Matrix () { memset ( a , 0 , sizeof a ); } Matrix operator * ( const Matrix & b ) const { Matrix res ; for ( int i = 1 ; i <= 2 ; ++ i ) for ( int j = 1 ; j <= 2 ; ++ j ) for ( int k = 1 ; k <= 2 ; ++ k ) res . a [ i ][ j ] = ( res . a [ i ][ j ] + a [ i ][ k ] * b . a [ k ][ j ]) % mod ; return res ; } } ans , base ; void init () { base . a [ 1 ][ 1 ] = base . a [ 1 ][ 2 ] = base . a [ 2 ][ 1 ] = 1 ; ans . a [ 1 ][ 1 ] = ans . a [ 1 ][ 2 ] = 1 ; } void qpow ( int b ) { while ( b ) { if ( b & 1 ) ans = ans * base ; base = base * base ; b >>= 1 ; } } int main () { int n = read (); if ( n <= 2 ) return puts ( \"1\" ), 0 ; init (); qpow ( n - 2 ); println ( ans . a [ 1 ][ 1 ] % mod ); } \u4e60\u9898 \u00b6 \u6d1b\u8c37 P1962 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \uff0c\u5373\u4e0a\u9762\u7684\u4f8b\u9898\uff0c\u540c\u9898 POJ3070 \u6d1b\u8c37 P1349 \u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217 \uff0c \\text{base} \\text{base} \u77e9\u9635\u9700\u8981\u53d8\u5316\u4e00\u4e0b \u6d1b\u8c37 P1939 \u3010\u6a21\u677f\u3011\u77e9\u9635\u52a0\u901f\uff08\u6570\u5217\uff09 \uff0c \\text{base} \\text{base} \u77e9\u9635\u53d8\u6210\u4e86 3 \\times 3 3 \\times 3 \u7684\u77e9\u9635\uff0c\u63a8\u5bfc\u8fc7\u7a0b\u4e0e\u4e0a\u9762\u5dee\u4e0d\u591a\u3002","title":"\u77e9\u9635"},{"location":"math/matrix/#_1","text":"\u5bf9\u4e8e\u77e9\u9635 A A \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u662f\u6307 A[i][i] A[i][i] \u7684\u5143\u7d20\u3002 \u4e00\u822c\u7528 I I \u6765\u8868\u793a\u5355\u4f4d\u77e9\u9635\uff0c\u5c31\u662f\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u4e3a 1\uff0c\u5176\u4f59\u4f4d\u7f6e\u4e3a 0\u3002","title":"\u5b9a\u4e49"},{"location":"math/matrix/#_2","text":"","title":"\u6027\u8d28"},{"location":"math/matrix/#_3","text":"A A \u7684\u9006\u77e9\u9635 P P \u662f\u4f7f\u5f97 A \\times P = I A \\times P = I \u7684\u77e9\u9635\u3002 \u9006\u77e9\u9635\u53ef\u4ee5\u7528 \u9ad8\u65af\u6d88\u5143 \u7684\u65b9\u5f0f\u6765\u6c42\u3002","title":"\u77e9\u9635\u7684\u9006"},{"location":"math/matrix/#_4","text":"\u77e9\u9635\u7684\u52a0\u51cf\u6cd5\u662f\u9010\u4e2a\u5143\u7d20\u8fdb\u884c\u7684\u3002","title":"\u8fd0\u7b97"},{"location":"math/matrix/#_5","text":"\u77e9\u9635\u76f8\u4e58\u53ea\u6709\u5728\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u5217\u6570\u548c\u7b2c\u4e8c\u4e2a\u77e9\u9635\u7684\u884c\u6570\u76f8\u540c\u65f6\u624d\u6709\u610f\u4e49\u3002 \u8bbe A A \u4e3a P \\times M P \\times M \u7684\u77e9\u9635\uff0c B B \u4e3a M \\times Q M \\times Q \u7684\u77e9\u9635\uff0c\u8bbe\u77e9\u9635 C C \u4e3a\u77e9\u9635 A A \u4e0e B B \u7684\u4e58\u79ef\uff0c \u5176\u4e2d\u77e9\u9635 C C \u4e2d\u7684\u7b2c i i \u884c\u7b2c j j \u5217\u5143\u7d20\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a C_{i,j} = \\sum_{k=1}^MA_{i,k}B_{k,j} C_{i,j} = \\sum_{k=1}^MA_{i,k}B_{k,j} \u5982\u679c\u6ca1\u770b\u61c2\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u6ca1\u5173\u7cfb\u3002\u901a\u4fd7\u7684\u8bb2\uff0c\u5728\u77e9\u9635\u4e58\u6cd5\u4e2d\uff0c\u7ed3\u679c C C \u77e9\u9635\u7684\u7b2c i i \u884c\u7b2c j j \u5217\u7684\u6570\uff0c\u5c31\u662f\u7531\u77e9\u9635 A A \u7b2c i i \u884c M M \u4e2a\u6570\u4e0e\u77e9\u9635 B B \u7b2c j j \u5217 M M \u4e2a\u6570\u5206\u522b\u76f8\u4e58\u518d\u76f8\u52a0\u5f97\u5230\u7684\u3002 \u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6ee1\u8db3\u4e00\u822c\u7684\u4ea4\u6362\u5f8b\u3002 \u5229\u7528\u7ed3\u5408\u5f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u53ef\u4ee5\u5229\u7528 \u5feb\u901f\u5e42 \u7684\u601d\u60f3\u6765\u4f18\u5316\u3002 \u5728\u6bd4\u8d5b\u4e2d\uff0c\u7531\u4e8e\u7ebf\u6027\u9012\u63a8\u5f0f\u53ef\u4ee5\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\uff0c\u4e5f\u901a\u5e38\u7528\u77e9\u9635\u5feb\u901f\u5e42\u6765\u6c42\u7ebf\u6027\u9012\u63a8\u6570\u5217\u7684\u67d0\u4e00\u9879\u3002","title":"\u77e9\u9635\u4e58\u6cd5"},{"location":"math/matrix/#_6","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6765\u6a21\u62df\u77e9\u9635\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 struct mat { LL a [ sz ][ sz ]; inline mat () { memset ( a , 0 , sizeof a ); } inline mat operator + ( const mat & T ) const { mat res ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) res . a [ i ][ j ] = ( a [ i ][ j ] - T . a [ i ][ j ] + MOD ) % MOD ; return res ; } inline mat operator - ( const mat & T ) const { mat res ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) res . a [ i ][ j ] = ( a [ i ][ j ] + T . a [ i ][ j ]) % MOD ; return res ; } inline mat operator * ( const mat & T ) const { mat res ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) for ( int k = 0 ; k < sz ; ++ k ) { res . a [ i ][ j ] += mul ( a [ i ][ k ], T . a [ k ][ j ]); res . a [ i ][ j ] %= MOD ; } return res ; } inline mat operator ^ ( LL x ) const { mat res , bas ; for ( int i = 0 ; i < sz ; ++ i ) res . a [ i ][ i ] = 1 ; for ( int i = 0 ; i < sz ; ++ i ) for ( int j = 0 ; j < sz ; ++ j ) bas . a [ i ][ j ] = a [ i ][ j ]; while ( x ) { if ( x & 1 ) res = res * bas ; bas = bas * bas ; x >>= 1 ; } return res ; } };","title":"\u53c2\u8003\u4ee3\u7801"},{"location":"math/matrix/#_7","text":"","title":"\u5e94\u7528"},{"location":"math/matrix/#_8","text":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08Fibonacci Sequence\uff09\u5927\u5bb6\u5e94\u8be5\u90fd\u975e\u5e38\u7684\u719f\u6089\u4e86\u3002\u5728\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5f53\u4e2d\uff0c F_1 = F_2 = 1 F_1 = F_2 = 1 \uff0c F_i = F_{i - 1} + F_{i - 2}(i \\geq 3) F_i = F_{i - 1} + F_{i - 2}(i \\geq 3) \u3002 \u5982\u679c\u6709\u4e00\u9053\u9898\u76ee\u8ba9\u4f60\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c n n \u9879\u7684\u503c\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u83ab\u8fc7\u4e8e\u76f4\u63a5\u9012\u63a8\u4e86\u3002\u4f46\u662f\u5982\u679c n n \u7684\u8303\u56f4\u8fbe\u5230\u4e86 10^{18} 10^{18} \u7ea7\u522b\uff0c\u9012\u63a8\u5c31\u4e0d\u884c\u4e86\uff0c\u7a33 TLE\u3002\u8003\u8651\u77e9\u9635\u52a0\u901f\u9012\u63a8\u3002 \u8bbe Fib(n) Fib(n) \u8868\u793a\u4e00\u4e2a 1 \\times 2 1 \\times 2 \u7684\u77e9\u9635 \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \u3002\u6211\u4eec\u5e0c\u671b\u6839\u636e Fib(n-1)=\\left[ \\begin{array}{ccc}F_{n-1} & F_{n-2} \\end{array}\\right] Fib(n-1)=\\left[ \\begin{array}{ccc}F_{n-1} & F_{n-2} \\end{array}\\right] \u63a8\u51fa Fib(n) Fib(n) \u3002 \u8bd5\u63a8\u5bfc\u4e00\u4e2a\u77e9\u9635 \\text{base} \\text{base} \uff0c\u4f7f Fib(n-1) \\times \\text{base} = Fib(n) Fib(n-1) \\times \\text{base} = Fib(n) \uff0c\u5373 \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\text{base} = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\text{base} = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \u3002 \u600e\u4e48\u63a8\u5462\uff1f\u56e0\u4e3a F_n=F_{n-1}+F_{n-2} F_n=F_{n-1}+F_{n-2} \uff0c\u6240\u4ee5 \\text{base} \\text{base} \u77e9\u9635\u7b2c\u4e00\u5217\u5e94\u8be5\u662f \\left[\\begin{array}{ccc} 1 \\\\ 1 \\end{array}\\right] \\left[\\begin{array}{ccc} 1 \\\\ 1 \\end{array}\\right] \uff0c\u8fd9\u6837\u5728\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u8fd0\u7b97\u7684\u65f6\u5019\u624d\u80fd\u4ee4 F_{n-1} F_{n-1} \u4e0e F_{n-2} F_{n-2} \u76f8\u52a0\uff0c\u4ece\u800c\u5f97\u51fa F_n F_n \u3002\u540c\u7406\uff0c\u4e3a\u4e86\u5f97\u51fa F_{n-1} F_{n-1} \uff0c\u77e9\u9635 \\text{base} \\text{base} \u7684\u7b2c\u4e8c\u5217\u5e94\u8be5\u4e3a \\left[\\begin{array}{ccc} 1 \\\\ 0 \\end{array}\\right] \\left[\\begin{array}{ccc} 1 \\\\ 0 \\end{array}\\right] \u3002 \u7efc\u4e0a\u6240\u8ff0\uff1a \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \u539f\u5f0f\u5316\u4e3a \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \\left[\\begin{array}{ccc}F_{n-1} & F_{n-2}\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] = \\left[ \\begin{array}{ccc}F_n & F_{n-1} \\end{array}\\right] \u8f6c\u5316\u4e3a\u4ee3\u7801\uff0c\u5e94\u8be5\u600e\u4e48\u6c42\u5462\uff1f \u5b9a\u4e49\u521d\u59cb\u77e9\u9635 \\text{ans} = \\left[\\begin{array}{ccc}F_2 & F_1\\end{array}\\right] = \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right], \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \\text{ans} = \\left[\\begin{array}{ccc}F_2 & F_1\\end{array}\\right] = \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right], \\text{base} = \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right] \u3002\u90a3\u4e48\uff0c F_n F_n \u5c31\u7b49\u4e8e \\text{ans} \\times \\text{base}^{n-2} \\text{ans} \\times \\text{base}^{n-2} \u8fd9\u4e2a\u77e9\u9635\u7684\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u5143\u7d20\uff0c\u4e5f\u5c31\u662f \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \\times \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \u7684\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u5143\u7d20\u3002 \u6ce8\u610f\uff0c\u77e9\u9635\u4e58\u6cd5\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u80fd\u5199\u6210 \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \\times \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \\left[\\begin{array}{ccc} 1 & 1 \\\\ 1 & 0 \\end{array}\\right]^{n-2} \\times \\left[\\begin{array}{ccc}1 & 1\\end{array}\\right] \u7684\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u5143\u7d20\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e n \\leq 2 n \\leq 2 \u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u8f93\u51fa 1 1 \u5373\u53ef\uff0c\u4e0d\u9700\u8981\u6267\u884c\u77e9\u9635\u5feb\u901f\u5e42\u3002 \u4e3a\u4ec0\u4e48\u8981\u4e58\u4e0a \\text{base} \\text{base} \u77e9\u9635\u7684 n-2 n-2 \u6b21\u65b9\u800c\u4e0d\u662f n n \u6b21\u65b9\u5462\uff1f\u56e0\u4e3a F_1, F_2 F_1, F_2 \u662f\u4e0d\u9700\u8981\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u5c31\u80fd\u6c42\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u53ea\u8fdb\u884c\u4e00\u6b21\u4e58\u6cd5\uff0c\u5c31\u5df2\u7ecf\u6c42\u51fa F_3 F_3 \u4e86\u3002\u5982\u679c\u8fd8\u4e0d\u662f\u5f88\u7406\u89e3\u4e3a\u4ec0\u4e48\u5e42\u662f n-2 n-2 \uff0c\u5efa\u8bae\u624b\u7b97\u4e00\u4e0b\u3002 \u4e0b\u9762\u662f\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c n n \u9879\u5bf9 10^9+7 10^9+7 \u53d6\u6a21\u7684\u793a\u4f8b\u4ee3\u7801\uff08\u6838\u5fc3\u90e8\u5206\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 const int mod = 1000000007 ; struct Matrix { int a [ 3 ][ 3 ]; Matrix () { memset ( a , 0 , sizeof a ); } Matrix operator * ( const Matrix & b ) const { Matrix res ; for ( int i = 1 ; i <= 2 ; ++ i ) for ( int j = 1 ; j <= 2 ; ++ j ) for ( int k = 1 ; k <= 2 ; ++ k ) res . a [ i ][ j ] = ( res . a [ i ][ j ] + a [ i ][ k ] * b . a [ k ][ j ]) % mod ; return res ; } } ans , base ; void init () { base . a [ 1 ][ 1 ] = base . a [ 1 ][ 2 ] = base . a [ 2 ][ 1 ] = 1 ; ans . a [ 1 ][ 1 ] = ans . a [ 1 ][ 2 ] = 1 ; } void qpow ( int b ) { while ( b ) { if ( b & 1 ) ans = ans * base ; base = base * base ; b >>= 1 ; } } int main () { int n = read (); if ( n <= 2 ) return puts ( \"1\" ), 0 ; init (); qpow ( n - 2 ); println ( ans . a [ 1 ][ 1 ] % mod ); }","title":"\u77e9\u9635\u52a0\u901f\u9012\u63a8"},{"location":"math/matrix/#_9","text":"\u6d1b\u8c37 P1962 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \uff0c\u5373\u4e0a\u9762\u7684\u4f8b\u9898\uff0c\u540c\u9898 POJ3070 \u6d1b\u8c37 P1349 \u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217 \uff0c \\text{base} \\text{base} \u77e9\u9635\u9700\u8981\u53d8\u5316\u4e00\u4e0b \u6d1b\u8c37 P1939 \u3010\u6a21\u677f\u3011\u77e9\u9635\u52a0\u901f\uff08\u6570\u5217\uff09 \uff0c \\text{base} \\text{base} \u77e9\u9635\u53d8\u6210\u4e86 3 \\times 3 3 \\times 3 \u7684\u77e9\u9635\uff0c\u63a8\u5bfc\u8fc7\u7a0b\u4e0e\u4e0a\u9762\u5dee\u4e0d\u591a\u3002","title":"\u4e60\u9898"},{"location":"math/misc/","text":"\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5728 OI \u4e2d\u53ef\u80fd\u7528\u5230\u7684\u91cd\u8981\u9ad8\u4e2d\u6570\u5b66\u77e5\u8bc6\u3002 \u5982\u679c\u662f\u9ad8\u4e2d OIer\uff0c\u5f3a\u70c8\u5efa\u8bae\u56de\u73ed\u7ea7\u542c\u8bfe\u3002 \u4e0b\u9762\u6309\u7167\u4ece\u5fc5\u4fee\u5230\u9009\u4fee\u7684\u987a\u5e8f\u4ecb\u7ecd\u3002\u6240\u6709\u5185\u5bb9\u5747\u57fa\u4e8e\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u6559\u79d1\u4e66\u3002 \u5411\u91cf \u00b6 \uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u6559\u79d1\u4e66\u5fc5\u4fee\u56db\u5185\u5bb9\uff09 \u5e73\u9762\u7684\u5411\u91cf\u4ea4\u9519\u751f\u957f \u7ec7\u6210 \u5fe7\u4f24\u7684\u7f51 \u2014\u2014\u300a\u819c\u4f60\u6284\u300b \u5b9a\u4e49\u53ca\u76f8\u5173\u6982\u5ff5 \u00b6 \u5411\u91cf \uff1a\u65e2\u6709\u5927\u5c0f\u53c8\u6709\u65b9\u5411\u7684\u91cf\u79f0\u4e3a\u5411\u91cf\u3002 \u6709\u5411\u7ebf\u6bb5 \uff1a\u5e26\u6709\u65b9\u5411\u7684\u7ebf\u6bb5\u79f0\u4e3a\u6709\u5411\u7ebf\u6bb5\u3002\u6709\u5411\u7ebf\u6bb5\u6709\u4e09\u8981\u7d20\uff1a \u8d77\u70b9\uff0c\u65b9\u5411\uff0c\u957f\u5ea6 \uff0c\u77e5\u9053\u4e86\u4e09\u8981\u7d20\uff0c\u7ec8\u70b9\u5c31\u552f\u4e00\u786e\u5b9a\u3002\u6211\u4eec\u7528\u6709\u5411\u7ebf\u6bb5\u8868\u793a\u5411\u91cf\u3002 \u5411\u91cf\u7684\u6a21 \uff1a\u6709\u5411\u7ebf\u6bb5 \\vec{AB} \\vec{AB} \u7684\u957f\u5ea6\u79f0\u4e3a\u5411\u91cf\u7684\u6a21\uff0c\u5373\u4e3a\u8fd9\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\u3002\u8bb0\u4e3a\uff1a |\\vec{AB}| |\\vec{AB}| \u3002 \u96f6\u5411\u91cf \uff1a\u6a21\u4e3a 0 0 \u7684\u5411\u91cf\u3002\u96f6\u5411\u91cf\u7684\u65b9\u5411\u4efb\u610f\u3002\u8bb0\u4e3a\uff1a \\vec{0} \\vec{0} \u6216 \\mathbf{0} \\mathbf{0} \u3002 \u5355\u4f4d\u5411\u91cf \uff1a\u6a21\u4e3a 1 1 \u7684\u5411\u91cf\u79f0\u4e3a\u8be5\u65b9\u5411\u4e0a\u7684\u5355\u4f4d\u5411\u91cf\u3002 \u5e73\u884c\u5411\u91cf \uff1a\u65b9\u5411\u76f8\u540c\u6216\u76f8\u53cd\u7684\u4e24\u4e2a \u975e\u96f6 \u5411\u91cf\u3002\u8bb0\u4f5c\uff1a \\vec a\\parallel \\vec b \\vec a\\parallel \\vec b \u3002 \u76f8\u7b49\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u540c\u7684\u5411\u91cf\u3002 \u76f8\u53cd\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u53cd\u7684\u5411\u91cf\u3002 \u5411\u91cf\u7684\u5939\u89d2 \uff1a\u5df2\u77e5\u4e24\u4e2a\u975e\u96f6\u5411\u91cf \\vec a,\\vec b \\vec a,\\vec b \uff0c\u4f5c \\vec{OA}=\\vec a,\\vec{OB}=\\vec b \\vec{OA}=\\vec a,\\vec{OB}=\\vec b \uff0c\u90a3\u4e48 \\theta=\\angle \\text{AOB} \\theta=\\angle \\text{AOB} \u5c31\u662f\u5411\u91cf \\vec a \\vec a \u4e0e\u5411\u91cf \\vec b \\vec b \u7684\u5939\u89d2\u3002\u8bb0\u4f5c\uff1a \\langle \\vec a,\\vec b\\rangle \\langle \\vec a,\\vec b\\rangle \u3002\u663e\u7136\u5f53 \\theta =0 \\theta =0 \u65f6\u4e24\u5411\u91cf\u540c\u5411\uff0c \\theta=\\pi \\theta=\\pi \u65f6\u4e24\u5411\u91cf\u53cd\u5411\uff0c \\theta=\\frac{\\pi}{2} \\theta=\\frac{\\pi}{2} \u65f6\u6211\u4eec\u8bf4\u4e24\u5411\u91cf\u5782\u76f4\uff0c\u8bb0\u4f5c \\vec a\\perp \\vec b \\vec a\\perp \\vec b \u3002\u5e76\u4e14\uff0c\u6211\u4eec\u89c4\u5b9a \\theta \\in [0,\\pi] \\theta \\in [0,\\pi] \u3002 \uff08\u547c\u2026\u2026 \u6211\u4eec\u4e00\u53e3\u6c14\u628a\u6570\u5b66\u4e66\u4e0a 2.1.3 \u4e4b\u524d\u7684\u5b9a\u4e49\u90fd\u7ed9\u51fa\u4e86\u3002\uff09 \u6211\u4eec\u8003\u8651\u5e73\u884c\u5411\u91cf\uff0c\u53ef\u4ee5\u4efb\u4f5c\u4e00\u6761\u76f4\u7ebf\u4e0e\u8fd9\u4e9b\u5411\u91cf\u5e73\u884c\uff0c\u90a3\u4e48\u4efb\u4e00\u7ec4\u5e73\u884c\u5411\u91cf\u90fd\u53ef\u4ee5\u5e73\u79fb\u5230\u540c\u4e00\u76f4\u7ebf\u4e0a\uff0c\u6240\u4ee5\u5e73\u884c\u5411\u91cf\u53c8\u53eb \u5171\u7ebf\u5411\u91cf \u3002 \u7531\u4e8e\u6570\u5b66\u4e0a\u7814\u7a76\u7684\u5411\u91cf\u4e3a \u81ea\u7531\u5411\u91cf \uff0c\u5373\u53ea\u8981\u4e0d\u6539\u53d8\u5b83\u7684\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u53ef\u4ee5\u4efb\u610f\u5e73\u884c\u79fb\u52a8\u7684\u5411\u91cf\u3002 \u6ce8\u610f\u5230\u5e73\u9762\u5411\u91cf\u5177\u6709\u65b9\u5411\u6027\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u6bd4\u8f83\u4e24\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\u3002\u4f46\u662f\u4e24\u4e2a\u5411\u91cf\u53ef\u4ee5\u76f8\u7b49\u3002 \u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97 \u00b6 \u5411\u91cf\u7684\u52a0\u6cd5\u4e0e\u51cf\u6cd5 \u00b6 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u79cd\u91cf\uff0c\u5c31\u5e0c\u671b\u8ba9\u5b83\u5177\u6709\u8fd0\u7b97\u3002\u5411\u91cf\u7684\u8fd0\u7b97\u53ef\u4ee5\u7c7b\u6bd4\u6570\u7684\u8fd0\u7b97\uff0c\u4f46\u662f\u6211\u4eec\u4ece\u7269\u7406\u5b66\u7684\u89d2\u5ea6\u51fa\u53d1\u7814\u7a76\u5411\u91cf\u7684\u8fd0\u7b97\u3002 \u6211\u4eec\u8003\u8651\u7269\u7406\u5b66\u4e2d\u7684\u4f4d\u79fb\u6982\u5ff5\uff0c\u5047\u5982\u4e00\u4e2a\u4eba\u4ece A A \u7ecf B B \u8d70\u5230 C C \uff0c\u6211\u4eec\u8bf4\u4ed6\u7ecf\u8fc7\u7684\u4f4d\u79fb\u4e3a \\vec{AB}+\\vec{BC} \\vec{AB}+\\vec{BC} \uff0c\u8fd9\u5176\u5b9e\u7b49\u4ef7\u4e8e\u8fd9\u4e2a\u4eba\u76f4\u63a5\u4ece A A \u8d70\u5230 C C \uff0c\u5373 \\vec{AB}+\\vec{BC}=\\vec{AC} \\vec{AB}+\\vec{BC}=\\vec{AC} \u3002 \u6ce8\u610f\u5230\u529b\u7684\u5408\u6210\u6cd5\u5219\u2014\u2014\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u770b\u505a\u4e00\u4e9b\u5411\u91cf\u76f8\u52a0\u3002 \u6240\u4ee5\u6211\u4eec\u6574\u7406\u4e00\u4e0b\u5411\u91cf\u7684\u52a0\u6cd5\u6cd5\u5219\uff1a \u5411\u91cf\u52a0\u6cd5\u7684\u4e09\u89d2\u5f62\u6cd5\u5219 \uff1a\u82e5\u8981\u6c42\u548c\u7684\u5411\u91cf\u9996\u5c3e\u987a\u6b21\u76f8\u8fde\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5411\u91cf\u7684\u548c\u4e3a\u7b2c\u4e00\u4e2a\u5411\u91cf\u7684\u8d77\u70b9\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5411\u91cf\u7684\u7ec8\u70b9\uff1b \u5411\u91cf\u52a0\u6cd5\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219 \uff1a\u82e5\u8981\u6c42\u548c\u7684\u4e24\u4e2a\u5411\u91cf \u5171\u8d77\u70b9 \uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u548c\u5411\u91cf\u4e3a\u4ee5\u8fd9\u4e24\u4e2a\u5411\u91cf\u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u5bf9\u89d2\u7ebf\uff0c\u8d77\u70b9\u4e3a\u4e24\u4e2a\u5411\u91cf\u5171\u6709\u7684\u8d77\u70b9\uff0c\u65b9\u5411\u6cbf\u5e73\u884c\u56db\u8fb9\u5f62\u5bf9\u89d2\u7ebf\u65b9\u5411\u3002 \u8fd9\u6837\uff0c\u5411\u91cf\u7684\u52a0\u6cd5\u5c31\u5177\u6709\u4e86\u51e0\u4f55\u610f\u4e49\u3002 \u5e76\u4e14\u53ef\u4ee5\u9a8c\u8bc1\uff0c\u5411\u91cf\u7684\u52a0\u6cd5\u6ee1\u8db3 \u4ea4\u6362\u5f8b\u4e0e\u7ed3\u5408\u5f8b \u3002 \u56e0\u4e3a\u5b9e\u6570\u7684\u51cf\u6cd5\u53ef\u4ee5\u5199\u6210\u52a0\u4e0a\u76f8\u53cd\u6570\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u8003\u8651\u5728\u5411\u91cf\u505a\u51cf\u6cd5\u65f6\u4e5f\u8fd9\u4e48\u5199\u3002\u5373\uff1a \\vec a-\\vec b=\\vec a+(-\\vec b) \\vec a-\\vec b=\\vec a+(-\\vec b) \u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u8003\u8651\u5171\u8d77\u70b9\u7684\u5411\u91cf\uff0c\u6309\u7167\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\u505a\u51fa\u5b83\u4eec\u7684\u5dee\uff0c\u7ecf\u8fc7\u5e73\u79fb\u540e\u53ef\u4ee5\u53d1\u73b0 \u5171\u8d77\u70b9\u5411\u91cf\u7684\u5dee\u5411\u91cf\u662f\u7531\u51cf\u5411\u91cf\u6307\u5411\u88ab\u51cf\u5411\u91cf\u7684\u6709\u5411\u7ebf\u6bb5 \u3002 \u8fd9\u4e5f\u662f\u5411\u91cf\u51cf\u6cd5\u7684\u51e0\u4f55\u610f\u4e49\u3002 \u6211\u4eec\u6709\u65f6\u5019\u6709\u4e24\u70b9 A,B A,B \uff0c\u60f3\u77e5\u9053 \\vec{AB} \\vec{AB} \uff0c\u53ef\u4ee5\u5229\u7528\u51cf\u6cd5\u8fd0\u7b97 \\vec{AB}=\\vec{OB}-\\vec{OA} \\vec{AB}=\\vec{OB}-\\vec{OA} \u83b7\u5f97\u3002 \u5411\u91cf\u7684\u6570\u4e58 \u00b6 \u8003\u8651 \\vec b=\\vec a+\\vec a+\\vec a \\vec b=\\vec a+\\vec a+\\vec a \uff0c \\vec b \\vec b \u7b49\u4e8e 3 \u4e2a \\vec a \\vec a \u76f8\u52a0\uff0c\u6211\u4eec\u8bb0\u4e3a \\vec b=3\\vec a \\vec b=3\\vec a \u3002 \u540c\u6837\u7684\uff0c \\vec c=-\\vec a-\\vec a-\\vec a \\vec c=-\\vec a-\\vec a-\\vec a \uff0c\u90a3\u4e48 \\vec c=3(-\\vec a)=-3\\vec a \\vec c=3(-\\vec a)=-3\\vec a \u3002 \u4e8e\u662f\uff0c\u4e00\u822c\u5730\uff0c\u6211\u4eec\u89c4\u5b9a\u5b9e\u6570 \\lambda \\lambda \u4e0e\u5411\u91cf \\vec a \\vec a \u7684\u79ef\u4e3a\u4e00\u4e2a\u5411\u91cf\uff0c\u8fd9\u79cd\u8fd0\u7b97\u5c31\u662f\u5411\u91cf\u7684 \u6570\u4e58\u8fd0\u7b97 \uff0c\u8bb0\u4f5c \\lambda \\vec a \\lambda \\vec a \uff0c\u5b83\u7684\u957f\u5ea6\u4e0e\u65b9\u5411\u89c4\u5b9a\u5982\u4e0b\uff1a |\\lambda \\vec a|=|\\lambda||\\vec a| |\\lambda \\vec a|=|\\lambda||\\vec a| \uff1b \u5f53 \\lambda >0 \\lambda >0 \u65f6\uff0c \\lambda\\vec a \\lambda\\vec a \u4e0e \\vec a \\vec a \u540c\u5411\uff0c\u5f53 \\lambda =0 \\lambda =0 \u65f6\uff0c \\lambda \\vec a=\\vec 0 \\lambda \\vec a=\\vec 0 \uff0c\u5f53 \\lambda<0 \\lambda<0 \u65f6\uff0c \\lambda \\vec a \\lambda \\vec a \u4e0e \\vec a \\vec a \u65b9\u5411\u76f8\u53cd\u3002 \u6211\u4eec\u6839\u636e\u6570\u4e58\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u6709\u5982\u4e0b\u8fd0\u7b97\u5f8b\uff1a \\lambda(\\mu \\vec a)=(\\lambda \\mu)\\vec a\\\\ (\\lambda+\\mu)\\vec a=\\lambda \\vec a+\\mu \\vec a\\\\ \\lambda(\\vec a+\\vec b)=\\lambda \\vec a+\\lambda \\vec b \\lambda(\\mu \\vec a)=(\\lambda \\mu)\\vec a\\\\ (\\lambda+\\mu)\\vec a=\\lambda \\vec a+\\mu \\vec a\\\\ \\lambda(\\vec a+\\vec b)=\\lambda \\vec a+\\lambda \\vec b \u7279\u522b\u5730\uff0c\u6211\u4eec\u6709\uff1a (-\\lambda)\\vec a=-(\\lambda \\vec a)=-\\lambda(\\vec a)\\\\ \\lambda(\\vec a-\\vec b)=\\lambda \\vec a-\\lambda \\vec b (-\\lambda)\\vec a=-(\\lambda \\vec a)=-\\lambda(\\vec a)\\\\ \\lambda(\\vec a-\\vec b)=\\lambda \\vec a-\\lambda \\vec b \u7531\u6570\u4e58\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c\u5bf9\u4e8e \u975e\u96f6 \u5411\u91cf \\vec a \\vec a \uff0c\u5982\u679c\u5b58\u5728\u5b9e\u6570 \\lambda \\lambda \uff0c\u4f7f\u5f97 \\vec b=\\lambda \\vec a \\vec b=\\lambda \\vec a \uff0c\u90a3\u4e48 \\vec a \\parallel \\vec b \\vec a \\parallel \\vec b \u3002 \u53cd\u8fc7\u6765\uff0c\u5982\u679c \\vec a\\parallel \\vec b \\vec a\\parallel \\vec b \uff0c \\vec a \\not = \\vec 0 \\vec a \\not = \\vec 0 \uff0c\u4e14 |\\vec b|=\\mu |\\vec a| |\\vec b|=\\mu |\\vec a| \uff0c\u90a3\u4e48\u5f53 \\vec a \\vec a \u4e0e \\vec b \\vec b \u540c\u5411\u65f6\uff0c \\vec b=\\mu \\vec a \\vec b=\\mu \\vec a \uff0c\u53cd\u5411\u65f6 \\vec b=-\\mu \\vec a \\vec b=-\\mu \\vec a \u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u975e\u96f6 \u5411\u91cf \\vec a \\vec a \u4e0e \\vec b \\vec b \u5171\u7ebf\uff0c\u5f53\u4e14\u4ec5\u5f53\u6709\u552f\u4e00\u5b9e\u6570 \\lambda \\lambda \uff0c\u4f7f\u5f97 \\vec b=\\lambda \\vec a \\vec b=\\lambda \\vec a \u3002 \u6700\u540e\uff0c\u5411\u91cf\u7684\u52a0\uff0c\u51cf\uff0c\u6570\u4e58\u7edf\u79f0\u4e3a\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\u3002 \u5e73\u9762\u5411\u91cf\u7684\u57fa\u672c\u5b9a\u7406\u53ca\u5750\u6807\u8868\u793a \u00b6 \u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406 \u00b6 \u5e73\u9762\u5411\u91cf\u90a3\u4e48\u591a\uff0c\u6211\u4eec\u60f3\u7528\u5c3d\u53ef\u80fd\u5c11\u7684\u91cf\u8868\u793a\u51fa\u6240\u6709\u5e73\u9762\u5411\u91cf\uff0c\u600e\u4e48\u529e\u5462\uff1f \u6211\u4eec\u5148\u7528\u4e00\u4e2a\u5411\u91cf\u8868\u793a\u51fa\u6240\u6709\u5411\u91cf\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6839\u636e 1.2.2 \u4e2d\u7684\u5b9a\u7406\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u80fd\u8868\u793a\u51fa\u67d0\u6761\u76f4\u7ebf\u4e0a\u7684\u5411\u91cf\u3002 \u6211\u4eec\u518d\u52a0\u5165\u4e00\u4e2a\u5411\u91cf\uff0c\u7528\u4e24\u4e2a \u4e0d\u5171\u7ebf \u5411\u91cf\u8868\u793a\uff08\u4e24\u4e2a\u5171\u7ebf\u5411\u91cf\u5728\u6b64\u53ef\u4ee5\u770b\u6210\u540c\u4e00\u4e2a\u5411\u91cf\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628a\u4efb\u610f\u4e00\u4e2a\u5e73\u9762\u5411\u91cf\u5206\u89e3\u5230\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u4e0a\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e24\u4e2a\u5411\u91cf \\vec{e_1},\\vec{e_2} \\vec{e_1},\\vec{e_2} \u4e0d\u5171\u7ebf\uff0c\u90a3\u4e48\u5b58\u5728\u552f\u4e00\u5b9e\u6570\u5bf9 (x,y) (x,y) \uff0c\u4f7f\u5f97\u4e0e \\vec{e_1},\\vec{e_2} \\vec{e_1},\\vec{e_2} \u5171\u9762\u7684\u4efb\u610f\u5411\u91cf \\vec p \\vec p \u6ee1\u8db3 \\vec p=x\\vec{e_1}+y\\vec{e_2} \\vec p=x\\vec{e_1}+y\\vec{e_2} \uff0c\u8fd9\u5c31\u662f \u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406 \u3002\u5728\u540c\u4e00\u5e73\u9762\u5185\u7684\u4e24\u4e2a\u4e0d\u5171\u7ebf\u7684\u5411\u91cf\u79f0\u4e3a \u57fa\u5e95 \u3002 \u5982\u679c\u57fa\u5e95\u76f8\u4e92\u5782\u76f4\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5206\u89e3\u7684\u65f6\u5019\u5c31\u662f\u5bf9\u5411\u91cf \u6b63\u4ea4\u5206\u89e3 \u3002 \u5e73\u9762\u5411\u91cf\u7684\u5750\u6807\u8868\u793a \u00b6 \u6211\u4eec\u60f3\u628a\u5e73\u9762\u4e0a\u7684\u56fe\u5f62\u90fd\u653e\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7814\u7a76\uff08\u8fd9\u6837\u5f62\u7684\u95ee\u9898\u5c31\u6709\u4e86\u6570\u4f5c\u4e3a\u4f9d\u636e\uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u53d6\u4e0e x x \u8f74\u4e0e y y \u8f74\u65b9\u5411\u76f8\u540c\u7684\u5355\u4f4d\u5411\u91cf i,j i,j \u4f5c\u4e3a\u4e00\u7ec4\u57fa\u5e95\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c \\vec p=x\\vec i+y\\vec j \\vec p=x\\vec i+y\\vec j \uff0c\u5176\u4e2d \\vec p \\vec p \u4e3a\u5e73\u9762\u5185\u4efb\u610f\u5411\u91cf\u3002 \u7531\u4e8e\u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u7684\u5b9e\u6570\u5bf9 (x,y) (x,y) \u662f\u552f\u4e00\u7684\u3002\u8fd9\u6837\uff0c\u5e73\u9762\u5185\u7684\u4efb\u610f\u5411\u91cf\u90fd\u53ef\u4ee5\u7528\u6709\u5e8f\u5b9e\u6570\u5bf9\u552f\u4e00\u786e\u5b9a\uff0c\u6211\u4eec\u628a (x,y) (x,y) \u53eb\u505a\u5411\u91cf\u7684 \u5750\u6807 \u3002\u8bb0\u4f5c\uff1a \\vec p=(x,y) \\vec p=(x,y) \u3002 \u8fd9\u6837\u6ca1\u95ee\u9898\uff1f\u662f\u7684\uff0c\u56e0\u4e3a\u6709\u5e8f\u5b9e\u6570\u5bf9 (x,y) (x,y) \u4e0e\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u70b9\u552f\u4e00\u786e\u5b9a\uff0c\u90a3\u4e48\u6211\u4eec\u4f5c \\vec{OP}=\\vec p \\vec{OP}=\\vec p \uff0c\u90a3\u4e48\u7ec8\u70b9 P(x,y) P(x,y) \u4e5f\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002\u7531\u4e8e\u6211\u4eec\u7814\u7a76\u7684\u90fd\u662f\u81ea\u7531\u5411\u91cf\uff0c\u53ef\u4ee5\u81ea\u7531\u5e73\u79fb\u8d77\u70b9\uff0c\u8fd9\u6837\uff0c\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u91cc\uff0c\u6bcf\u4e00\u4e2a\u5411\u91cf\u90fd\u53ef\u4ee5\u7528\u6709\u5e8f\u5b9e\u6570\u5bf9\u552f\u4e00\u8868\u793a\u3002 \u5e73\u9762\u5411\u91cf\u7684\u5750\u6807\u8fd0\u7b97 \u00b6 \u7531\u5e73\u9762\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u5176\u5750\u6807\u8fd0\u7b97\uff0c\u4e3b\u8981\u65b9\u6cd5\u662f\u5c06\u5750\u6807\u5168\u90e8\u5316\u4e3a\u7528\u57fa\u5e95\u8868\u793a\uff0c\u7136\u540e\u5229\u7528\u8fd0\u7b97\u5f8b\u8fdb\u884c\u5408\u5e76\uff0c\u4e4b\u540e\u8868\u793a\u51fa\u8fd0\u7b97\u7ed3\u679c\u7684\u5750\u6807\u5f62\u5f0f\u3002 \u63a8\u5bfc\u8fc7\u7a0b\u7701\u7565\uff0c\u4e0b\u9762\u7ed9\u51fa\u7ed3\u8bba\uff1a \u82e5\u4e24\u5411\u91cf \\vec a=(m,n),\\vec b=(p,q) \\vec a=(m,n),\\vec b=(p,q) \uff0c\u5219\uff1a \\vec a+\\vec b=(m+n,p+q)\\\\ \\vec a-\\vec b=(m-n,p-q)\\\\ k\\vec a=(km,kn) \\vec a+\\vec b=(m+n,p+q)\\\\ \\vec a-\\vec b=(m-n,p-q)\\\\ k\\vec a=(km,kn) \u6709\u4e86\u5750\u6807\u8fd0\u7b97\uff0c\u6211\u4eec\u5df2\u77e5\u4e24\u70b9 A(a,b),B(c,d) A(a,b),B(c,d) \uff0c\u60f3\u77e5\u9053 \\vec{AB} \\vec{AB} \u5c31\u4e0d\u96be\u4e86\uff0c\u53ea\u9700\u8981 \\vec{OB}-\\vec{OA} \\vec{OB}-\\vec{OA} \u5373\u53ef\uff0c\u4e5f\u5c31\u662f \\vec{AB}=(c-a,d-b) \\vec{AB}=(c-a,d-b) \u3002 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u70b9 P P \u6cbf\u4e00\u5b9a\u65b9\u5411\u5e73\u79fb\u67d0\u5355\u4f4d\u957f\u5ea6\uff0c\u8fd9\u6837\u6211\u4eec\u628a\u8981\u5e73\u79fb\u7684\u65b9\u5411\u548c\u8ddd\u79bb\u7ec4\u5408\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u5229\u7528\u5411\u91cf\u52a0\u6cd5\u7684\u4e09\u89d2\u5f62\u6cd5\u5219\uff0c\u5c06 \\vec{OP} \\vec{OP} \u52a0\u4e0a\u8fd9\u4e2a\u5411\u91cf\uff0c\u5f97\u5230\u7684\u5411\u91cf\u7ec8\u70b9\u5373\u4e3a\u5e73\u79fb\u540e\u7684\u70b9\u3002 \u5229\u7528\u5411\u91cf\u7684\u5750\u6807\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u8bb8\u591a\u5e73\u79fb\u64cd\u4f5c\u4e86\uff01 \u8fd8\u53ef\u4ee5\u5224\u65ad\u5411\u91cf\u5171\u7ebf\uff0c\u5728\u6b64\u7ed9\u51fa\u4f9d\u636e\uff1a \u82e5 A,B,C A,B,C \u4e09\u70b9\u5171\u7ebf\uff0c\u5219 \\vec{OB}=\\lambda \\vec{OA}+(1-\\lambda)\\vec{OC} \\vec{OB}=\\lambda \\vec{OA}+(1-\\lambda)\\vec{OC} \u3002 \u8bc1\u660e\u5f88\u7b80\u5355\uff0c \u7559\u4f5c\u8bfe\u540e\u4f5c\u4e1a\u3002 \u5411\u91cf\u7684\u6570\u91cf\u79ef \u00b6 \u5df2\u77e5\u4e24\u4e2a\u5411\u91cf \\vec a,\\vec b \\vec a,\\vec b \uff0c\u5b83\u4eec\u7684\u5939\u89d2\u4e3a \\theta \\theta \uff0c\u90a3\u4e48\uff1a \\vec a \\cdot \\vec b=|\\vec a||\\vec b|\\cos \\theta \\vec a \\cdot \\vec b=|\\vec a||\\vec b|\\cos \\theta \u5c31\u662f\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u6570\u91cf\u79ef\uff0c\u4e5f\u53eb\u70b9\u79ef\uff0c\u5185\u79ef\u3002\u5176\u4e2d\u79f0 |\\vec a|\\cos \\theta |\\vec a|\\cos \\theta \u4e3a \\vec a \\vec a \u5728 \\vec b \\vec b \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u79cd\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5b9e\u6570\uff0c\u4e3a\u6807\u91cf\uff0c\u5e76\u4e0d\u5c5e\u4e8e\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\u3002 \u6570\u91cf\u79ef\u6709\u4e00\u4e9b\u6027\u8d28\uff0c\u5728\u6b64\u7559\u7ed9\u8bfb\u8005\u8fdb\u4e00\u6b65\u63a2\u7a76\u3002\u5728\u6b64\u63d0\u4e00\u70b9\uff1a \\vec a \\perp \\vec b \\vec a \\perp \\vec b \u7b49\u4ef7\u4e8e \\vec a\\cdot \\vec b=0 \\vec a\\cdot \\vec b=0 \u6570\u91cf\u79ef\u5177\u6709\u51e0\u4f55\u610f\u4e49\uff1a\u6570\u91cf\u79ef \\vec a \\cdot \\vec b \\vec a \\cdot \\vec b \u7b49\u4e8e \\vec a \\vec a \u7684\u6a21\u4e0e \\vec b \\vec b \u5728 \\vec a \\vec a \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u7684\u4e58\u79ef\u3002 \u6309\u7167\u5750\u6807\u8fd0\u7b97\u7684\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6570\u91cf\u79ef\u7684\u5750\u6807\u8fd0\u7b97\uff1a \u82e5 \\vec a=(m,n),\\vec b=(p,q) \\vec a=(m,n),\\vec b=(p,q) \uff0c\u90a3\u4e48 \\vec a\\cdot \\vec b=mp+nq \\vec a\\cdot \\vec b=mp+nq \u3002 \u8fd8\u53ef\u4ee5\u77e5\u9053\uff0c\u5411\u91cf\u7684\u6a21 |\\vec a|=\\sqrt {m^2+n^2} |\\vec a|=\\sqrt {m^2+n^2} \u3002 \u5f53\u7136\u8fd8\u53ef\u4ee5\u77e5\u9053\u5411\u91cf\u5939\u89d2\u4f59\u5f26\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u5f0f\u5b50\u592a\u957f\u4e0d\u5728\u8fd9\u5199\u4e86\u3002 \uff08\u5176\u5b9e\u5c31\u662f\u628a \\cos \\theta \\cos \\theta \u653e\u5230\u4e00\u8fb9\uff0c\u628a\u5176\u4f59\u91cf\u6574\u7406\u4e00\u4e0b\u3002\uff09 \u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5411\u91cf\u89e3\u51b3\u5f88\u591a\u51e0\u4f55\u95ee\u9898\u4e86\u3002 \u6269\u5c55 \u00b6 \u5411\u91cf\u4e0e\u77e9\u9635 \u00b6 \uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 4-2 \u5185\u5bb9\uff09 \u6211\u4eec\u53d1\u73b0\uff0c\u77e9\u9635\u8fd0\u7b97\u7684\u76f8\u5173\u6cd5\u5219\u4e0e\u5411\u91cf\u8fd0\u7b97\u76f8\u4f3c\uff0c\u4e8e\u662f\u8003\u8651\u5c06\u5411\u91cf\u5199\u6210\u77e9\u9635\u5f62\u5f0f\uff0c\u8fd9\u6837\u5c31\u5c06\u5411\u91cf\u95ee\u9898\u5316\u4e3a\u77e9\u9635\u95ee\u9898\u4e86\u3002 \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003\u7ebf\u6027\u4ee3\u6570\u3002 \u5411\u91cf\u79ef \u00b6 \u6211\u4eec\u5b9a\u4e49\u5411\u91cf \\vec a,\\vec b \\vec a,\\vec b \u7684\u5411\u91cf\u79ef\u4e3a\u4e00\u4e2a\u5411\u91cf\uff0c\u8bb0\u4e3a \\vec a\\times \\vec b \\vec a\\times \\vec b \uff0c\u5176\u6a21\u4e0e\u65b9\u5411\u5b9a\u4e49\u5982\u4e0b\uff1a |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\langle \\vec a,\\vec b\\rangle |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\langle \\vec a,\\vec b\\rangle \uff1b \\vec a\\times \\vec b \\vec a\\times \\vec b \u4e0e \\vec a,\\vec b \\vec a,\\vec b \u90fd\u5782\u76f4\uff0c\u4e14 \\vec a,\\vec b,\\vec a\\times \\vec b \\vec a,\\vec b,\\vec a\\times \\vec b \u7b26\u5408\u53f3\u624b\u6cd5\u5219\u3002 \u5411\u91cf\u79ef\u4e5f\u53eb\u5916\u79ef\u3002 \u7531\u4e8e\u5411\u91cf\u79ef\u6d89\u53ca\u5230\u7a7a\u95f4\u51e0\u4f55\u4e0e\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\uff0c\u6240\u4ee5\u5e76\u672a\u5728\u9ad8\u4e2d\u8bfe\u672c\u4e2d\u51fa\u73b0\u3002\u7136\u800c\u6ce8\u610f\u5230\u5411\u91cf\u79ef\u7684\u6a21\uff0c\u8054\u60f3\u5230\u4e09\u89d2\u5f62\u9762\u79ef\u8ba1\u7b97\u516c\u5f0f S=\\frac{1}{2}ab\\sin C S=\\frac{1}{2}ab\\sin C \uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5411\u91cf\u79ef\u7684\u51e0\u4f55\u610f\u4e49\u662f\uff1a |\\vec a\\times \\vec b| |\\vec a\\times \\vec b| \u662f\u4ee5 \\vec a,\\vec b \\vec a,\\vec b \u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u9762\u79ef \u3002 \u77e5\u9053\u8fd9\u4e2a\uff0c\u591a\u8fb9\u5f62\u9762\u79ef\u5c31\u5f88\u597d\u7b97\u4e86\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u4e0d\u5b8c\u5168\u7684\u5750\u6807\u8868\u793a\uff1a\u8bb0 \\vec a=(m,n),\\vec b=(p,q) \\vec a=(m,n),\\vec b=(p,q) \uff0c\u90a3\u4e48\u4e24\u4e2a\u5411\u91cf\u7684\u5411\u91cf\u79ef\u7684\u7ad6\u5750\u6807\u4e3a mq-np mq-np \uff0c\u6211\u4eec\u6839\u636e\u53f3\u624b\u6cd5\u5219\u548c\u7ad6\u5750\u6807\u7b26\u53f7\u53ef\u4ee5\u63a8\u65ad\u51fa \\vec b \\vec b \u76f8\u5bf9\u4e8e \\vec a \\vec a \u7684\u65b9\u5411\uff0c\u82e5\u5728\u9006\u65f6\u9488\u65b9\u5411\u7ad6\u5750\u6807\u4e3a\u6b63\u503c\uff0c\u53cd\u4e4b\u4e3a\u8d1f\u503c\uff0c\u7b80\u8bb0\u4e3a \u987a\u8d1f\u9006\u6b63 \u3002 \u6781\u5750\u6807\u4e0e\u6781\u5750\u6807\u7cfb \u00b6 \u4efb\u610f\u89d2\u4e0e\u5f27\u5ea6\u5236 \u00b6 \uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u5fc5\u4fee\u56db\u5185\u5bb9\uff09 \u6211\u4eec\u5728\u521d\u4e2d\u5b66\u4e60\u8fc7\u89d2\u5ea6\u503c\uff0c\u4f46\u662f\u89d2\u5ea6\u4e0d\u662f\u4e00\u4e2a\u6570\uff0c\u8fd9\u7ed9\u6211\u4eec\u6df1\u5165\u7814\u7a76\u5e26\u6765\u4e86\u4e00\u5b9a\u7684\u56f0\u96be\uff0c\u8fd8\u6709\u5176\u4ed6\u7684\u95ee\u9898\u65e0\u6cd5\u89e3\u91ca\u6e05\uff0c\u6240\u4ee5\u6211\u4eec\u6362\u7528\u5f27\u5ea6\u5236\u63cf\u8ff0\u89d2\u3002 \u9996\u5148\u6211\u4eec\u7528\u65cb\u8f6c\u7684\u601d\u8def\u5b9a\u4e49\u89d2\uff0c\u89d2\u53ef\u4ee5\u770b\u6210\u5e73\u9762\u5185\u4e00\u6761\u5c04\u7ebf\u7ed5\u5176\u7aef\u70b9\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u65cb\u8f6c\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u5f62\u6210\u7684\u56fe\u5f62\u3002\u5f00\u59cb\u7684\u4f4d\u7f6e\u79f0\u4e3a\u59cb\u8fb9\uff0c\u7ed3\u675f\u7684\u4f4d\u7f6e\u79f0\u4e3a\u7ec8\u8fb9\u3002 \u6211\u4eec\u89c4\u5b9a\uff0c\u6309 \u9006\u65f6\u9488 \u65b9\u5411\u65cb\u8f6c\u5f62\u6210\u7684\u89d2\u53eb\u505a \u6b63\u89d2 \uff0c\u6309 \u987a\u65f6\u9488 \u65b9\u5411\u65cb\u8f6c\u6240\u5f62\u6210\u7684\u89d2\u53eb\u505a \u8d1f\u89d2 \uff0c\u5982\u679c\u8fd9\u6761\u5c04\u7ebf\u6ca1\u6709\u505a\u4efb\u4f55\u65cb\u8f6c\uff0c\u79f0\u4e3a \u96f6\u89d2 \u3002\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u89d2\u7684\u6982\u5ff5\u63a8\u5411\u4e86 \u4efb\u610f\u89d2 \u3002 \u7136\u540e\u6211\u4eec\u4ecb\u7ecd \u5f27\u5ea6\u5236 \uff0c\u628a\u957f\u5ea6\u7b49\u4e8e\u534a\u5f84\u957f\u7684\u5f27\u6240\u5bf9\u7684\u5706\u5fc3\u89d2\u79f0\u4e3a 1 1 \u5f27\u5ea6\u7684\u89d2\uff0c\u7528\u7b26\u53f7 \\text{rad} \\text{rad} \u8868\u793a\uff0c\u8bfb\u4f5c\uff1a\u5f27\u5ea6\u3002 \u4e00\u822c\u5730\uff0c\u6b63\u89d2\u7684\u5f27\u5ea6\u6570\u4e3a\u6b63\uff0c\u8d1f\u89d2\u7684\u5f27\u5ea6\u6570\u4e3a\u8d1f\uff0c\u96f6\u89d2\u7684\u5f27\u5ea6\u6570\u4e3a 0 0 \uff0c\u5982\u679c\u534a\u5f84\u4e3a r r \u7684\u5706\u7684\u5706\u5fc3\u89d2 \\alpha \\alpha \u6240\u5bf9\u5f27\u957f\u4e3a l l \uff0c\u5219 |\\alpha|=\\frac{l}{r} |\\alpha|=\\frac{l}{r} \u3002\u5229\u7528\u8fd9\u4e2a\u516c\u5f0f\u8fd8\u53ef\u4ee5\u5199\u51fa\u5f27\u957f\u548c\u6247\u5f62\u9762\u79ef\u516c\u5f0f\uff0c\u5728\u6b64\u7565\u8fc7\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53d1\u73b0 360^\\circ 360^\\circ \u7684\u89d2\u5f27\u5ea6\u6570\u4e3a 2\\pi 2\\pi \uff0c\u8fd9\u6837\u6709\u4e86\u5bf9\u5e94\u5173\u7cfb\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u89d2\u5ea6\u503c\u548c\u5f27\u5ea6\u5236\u7684\u8f6c\u5316\u4e86\u3002 \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u89d2\uff0c\u5c06\u5176\u7ec8\u8fb9\u518d\u65cb\u8f6c\u4e00\u5468\uff0c\u751a\u81f3\u591a\u5468\uff0c\u59cb\u8fb9\u4f4d\u7f6e\u4e0d\u52a8\uff0c\u90a3\u4e48\u7ec8\u8fb9\u4f4d\u7f6e\u6c38\u8fdc\u662f\u76f8\u540c\u7684\uff0c\u6211\u4eec\u79f0\u8fd9\u4e9b\u89d2\u4e3a \u7ec8\u8fb9\u4f4d\u7f6e\u76f8\u540c\u7684\u89d2 \u3002 \u4e0e\u89d2 \\alpha \\alpha \u7ec8\u8fb9\u4f4d\u7f6e\u76f8\u540c\u7684\u89d2\u7684\u96c6\u5408\u5f88\u5bb9\u6613\u5f97\u51fa\uff0c\u4e3a \\{\\theta\\mid \\theta=\\alpha+2k\\pi,k\\in \\mathbb{Z}\\} \\{\\theta\\mid \\theta=\\alpha+2k\\pi,k\\in \\mathbb{Z}\\} \u3002 \u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u7ed9\u8fd9\u4e2a\u89d2\u4e0d\u505c\u52a0\u4e00\u5708\uff0c\u7ec8\u8fb9\u4f4d\u7f6e\u4e0d\u53d8\u3002 \u6781\u5750\u6807\u4e0e\u6781\u5750\u6807\u7cfb \u00b6 \uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 4-4 \u5185\u5bb9\uff09 \u67d0\u540c\u5b66\uff1a\u5b66\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u90fd\u5b66\u70e6\u4e86\uff0c\u6709\u6ca1\u6709\u5176\u4ed6\u5750\u6807\u7cfb\uff1f \u6211\u4eec\u8003\u8651\u5b9e\u9645\u60c5\u51b5\uff0c\u6bd4\u5982\u822a\u6d77\uff0c\u6211\u4eec\u8bf4\u300c B B \u5728 A A \u7684\u5317\u504f\u4e1c 30^\\circ 30^\\circ \u65b9\u5411\u4e0a\uff0c\u8ddd\u79bb\u4e3a 100 100 \u7c73\u300d\uff0c\u800c\u4e0d\u662f\u300c\u4ee5 A A \u4e3a\u539f\u70b9\u5efa\u7acb\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c B(50,50\\sqrt 3) B(50,50\\sqrt 3) \u300d\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5728\u5e73\u9762\u4e0a\u9009\u4e00\u5b9a\u70b9 O O \uff0c\u79f0\u4e3a \u6781\u70b9 \uff0c\u81ea\u6781\u70b9\u5f15\u51fa\u4e00\u6761\u5c04\u7ebf Ox Ox \uff0c\u79f0\u4e3a \u6781\u8f74 \uff0c\u518d\u9009\u62e9\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\uff08\u5728\u6570\u5b66\u95ee\u9898\u4e2d\u901a\u5e38\u4e3a 1 1 \uff09\uff0c\u4e00\u4e2a\u89d2\u5ea6\u5355\u4f4d\uff08\u901a\u5e38\u4e3a\u5f27\u5ea6\uff09\u53ca\u5176\u6b63\u65b9\u5411\uff08\u901a\u5e38\u4e3a\u9006\u65f6\u9488\u65b9\u5411\uff09\uff0c\u8fd9\u6837\u5c31\u5efa\u7acb\u4e86 \u6781\u5750\u6807\u7cfb \u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u6211\u4eec\u600e\u4e48\u63cf\u8ff0\u4f4d\u7f6e\u5462\uff1f \u8bbe A A \u4e3a\u5e73\u9762\u4e0a\u4e00\u70b9\uff0c\u6781\u70b9 O O \u4e0e A A \u4e4b\u95f4\u7684\u8ddd\u79bb |OA| |OA| \u5373\u4e3a \u6781\u5f84 \uff0c\u8bb0\u4e3a \\rho \\rho \uff1b\u4ee5\u6781\u8f74\u4e3a\u59cb\u8fb9\uff0c OA OA \u4e3a\u7ec8\u8fb9\u7684\u89d2 \\angle xOA \\angle xOA \u4e3a \u6781\u89d2 \uff0c\u8bb0\u4e3a \\theta \\theta \uff0c\u90a3\u4e48\u6709\u5e8f\u6570\u5bf9 (\\rho,\\theta) (\\rho,\\theta) \u5373\u4e3a A A \u7684 \u6781\u5750\u6807 \u3002 \u7531\u7ec8\u8fb9\u76f8\u540c\u7684\u89d2\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c (\\rho,\\theta) (\\rho,\\theta) \u4e0e (\\rho,\\theta+2k\\pi)\\ (k\\in \\mathbb{Z}) (\\rho,\\theta+2k\\pi)\\ (k\\in \\mathbb{Z}) \u5176\u5b9e\u8868\u793a\u7684\u662f\u4e00\u6837\u7684\u70b9\uff0c\u7279\u522b\u5730\uff0c\u6781\u70b9\u7684\u6781\u5750\u6807\u4e3a (0,\\theta)\\ (\\theta\\in \\mathbb{R}) (0,\\theta)\\ (\\theta\\in \\mathbb{R}) \uff0c\u4e8e\u662f\u5e73\u9762\u5185\u7684\u70b9\u7684\u6781\u5750\u6807\u8868\u793a\u6709\u65e0\u6570\u591a\u79cd\u3002 \u5982\u679c\u89c4\u5b9a \\rho>0,0\\le \\theta<2\\pi\u200b \\rho>0,0\\le \\theta<2\\pi\u200b \uff0c\u90a3\u4e48\u9664\u6781\u70b9\u5916\uff0c\u5176\u4ed6\u5e73\u9762\u5185\u7684\u70b9\u53ef\u4ee5\u7528\u552f\u4e00\u6709\u5e8f\u6570\u5bf9 (\\rho,\\theta)\u200b (\\rho,\\theta)\u200b \u8868\u793a\uff0c\u800c\u6781\u5750\u6807 (\\rho,\\theta)\u200b (\\rho,\\theta)\u200b \u8868\u793a\u7684\u70b9\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002 \u5f53\u7136\uff0c\u6709\u65f6\u5019\u7814\u7a76\u6781\u5750\u6807\u7cfb\u4e0b\u7684\u56fe\u5f62\u6709\u4e9b\u4e0d\u65b9\u4fbf\uff0c\u6211\u4eec\u60f3\u8981\u8f6c\u5230\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7814\u7a76\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e92\u5316\u516c\u5f0f\u3002 \u70b9 A(\\rho,\\theta) A(\\rho,\\theta) \u7684\u76f4\u89d2\u5750\u6807 (x,y) (x,y) \u53ef\u4ee5\u5982\u4e0b\u8868\u793a\uff1a \\begin{cases} x=\\rho \\cos \\theta\\\\ y=\\rho \\sin \\theta \\end{cases} \\begin{cases} x=\\rho \\cos \\theta\\\\ y=\\rho \\sin \\theta \\end{cases} \u8fdb\u800c\u53ef\u77e5\uff1a \\rho ^2=x^2+y^2\\\\ \\tan \\theta=\\frac{y}{x}\\ \\ \\ \\ (x\\not =0) \\rho ^2=x^2+y^2\\\\ \\tan \\theta=\\frac{y}{x}\\ \\ \\ \\ (x\\not =0) \u4e8e\u662f\uff0c\u6781\u89d2 \\theta=\\arctan \\frac{y}{x} \\theta=\\arctan \\frac{y}{x} \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u51fa\u6781\u89d2\u4e86\u3002 \u5728\u7f16\u7a0b\u4e2d\uff0c\u82e5\u8981\u6c42\u53cd\u6b63\u5207\u51fd\u6570\uff0c\u5c3d\u91cf\u4f7f\u7528 atan2(y, x) \uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u9014\u6bd4 atan(x) \u5e7f\u6cdb\u3002","title":"\u6742\u9879"},{"location":"math/misc/#_1","text":"\uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u6559\u79d1\u4e66\u5fc5\u4fee\u56db\u5185\u5bb9\uff09 \u5e73\u9762\u7684\u5411\u91cf\u4ea4\u9519\u751f\u957f \u7ec7\u6210 \u5fe7\u4f24\u7684\u7f51 \u2014\u2014\u300a\u819c\u4f60\u6284\u300b","title":"\u5411\u91cf"},{"location":"math/misc/#_2","text":"\u5411\u91cf \uff1a\u65e2\u6709\u5927\u5c0f\u53c8\u6709\u65b9\u5411\u7684\u91cf\u79f0\u4e3a\u5411\u91cf\u3002 \u6709\u5411\u7ebf\u6bb5 \uff1a\u5e26\u6709\u65b9\u5411\u7684\u7ebf\u6bb5\u79f0\u4e3a\u6709\u5411\u7ebf\u6bb5\u3002\u6709\u5411\u7ebf\u6bb5\u6709\u4e09\u8981\u7d20\uff1a \u8d77\u70b9\uff0c\u65b9\u5411\uff0c\u957f\u5ea6 \uff0c\u77e5\u9053\u4e86\u4e09\u8981\u7d20\uff0c\u7ec8\u70b9\u5c31\u552f\u4e00\u786e\u5b9a\u3002\u6211\u4eec\u7528\u6709\u5411\u7ebf\u6bb5\u8868\u793a\u5411\u91cf\u3002 \u5411\u91cf\u7684\u6a21 \uff1a\u6709\u5411\u7ebf\u6bb5 \\vec{AB} \\vec{AB} \u7684\u957f\u5ea6\u79f0\u4e3a\u5411\u91cf\u7684\u6a21\uff0c\u5373\u4e3a\u8fd9\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\u3002\u8bb0\u4e3a\uff1a |\\vec{AB}| |\\vec{AB}| \u3002 \u96f6\u5411\u91cf \uff1a\u6a21\u4e3a 0 0 \u7684\u5411\u91cf\u3002\u96f6\u5411\u91cf\u7684\u65b9\u5411\u4efb\u610f\u3002\u8bb0\u4e3a\uff1a \\vec{0} \\vec{0} \u6216 \\mathbf{0} \\mathbf{0} \u3002 \u5355\u4f4d\u5411\u91cf \uff1a\u6a21\u4e3a 1 1 \u7684\u5411\u91cf\u79f0\u4e3a\u8be5\u65b9\u5411\u4e0a\u7684\u5355\u4f4d\u5411\u91cf\u3002 \u5e73\u884c\u5411\u91cf \uff1a\u65b9\u5411\u76f8\u540c\u6216\u76f8\u53cd\u7684\u4e24\u4e2a \u975e\u96f6 \u5411\u91cf\u3002\u8bb0\u4f5c\uff1a \\vec a\\parallel \\vec b \\vec a\\parallel \\vec b \u3002 \u76f8\u7b49\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u540c\u7684\u5411\u91cf\u3002 \u76f8\u53cd\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u53cd\u7684\u5411\u91cf\u3002 \u5411\u91cf\u7684\u5939\u89d2 \uff1a\u5df2\u77e5\u4e24\u4e2a\u975e\u96f6\u5411\u91cf \\vec a,\\vec b \\vec a,\\vec b \uff0c\u4f5c \\vec{OA}=\\vec a,\\vec{OB}=\\vec b \\vec{OA}=\\vec a,\\vec{OB}=\\vec b \uff0c\u90a3\u4e48 \\theta=\\angle \\text{AOB} \\theta=\\angle \\text{AOB} \u5c31\u662f\u5411\u91cf \\vec a \\vec a \u4e0e\u5411\u91cf \\vec b \\vec b \u7684\u5939\u89d2\u3002\u8bb0\u4f5c\uff1a \\langle \\vec a,\\vec b\\rangle \\langle \\vec a,\\vec b\\rangle \u3002\u663e\u7136\u5f53 \\theta =0 \\theta =0 \u65f6\u4e24\u5411\u91cf\u540c\u5411\uff0c \\theta=\\pi \\theta=\\pi \u65f6\u4e24\u5411\u91cf\u53cd\u5411\uff0c \\theta=\\frac{\\pi}{2} \\theta=\\frac{\\pi}{2} \u65f6\u6211\u4eec\u8bf4\u4e24\u5411\u91cf\u5782\u76f4\uff0c\u8bb0\u4f5c \\vec a\\perp \\vec b \\vec a\\perp \\vec b \u3002\u5e76\u4e14\uff0c\u6211\u4eec\u89c4\u5b9a \\theta \\in [0,\\pi] \\theta \\in [0,\\pi] \u3002 \uff08\u547c\u2026\u2026 \u6211\u4eec\u4e00\u53e3\u6c14\u628a\u6570\u5b66\u4e66\u4e0a 2.1.3 \u4e4b\u524d\u7684\u5b9a\u4e49\u90fd\u7ed9\u51fa\u4e86\u3002\uff09 \u6211\u4eec\u8003\u8651\u5e73\u884c\u5411\u91cf\uff0c\u53ef\u4ee5\u4efb\u4f5c\u4e00\u6761\u76f4\u7ebf\u4e0e\u8fd9\u4e9b\u5411\u91cf\u5e73\u884c\uff0c\u90a3\u4e48\u4efb\u4e00\u7ec4\u5e73\u884c\u5411\u91cf\u90fd\u53ef\u4ee5\u5e73\u79fb\u5230\u540c\u4e00\u76f4\u7ebf\u4e0a\uff0c\u6240\u4ee5\u5e73\u884c\u5411\u91cf\u53c8\u53eb \u5171\u7ebf\u5411\u91cf \u3002 \u7531\u4e8e\u6570\u5b66\u4e0a\u7814\u7a76\u7684\u5411\u91cf\u4e3a \u81ea\u7531\u5411\u91cf \uff0c\u5373\u53ea\u8981\u4e0d\u6539\u53d8\u5b83\u7684\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u53ef\u4ee5\u4efb\u610f\u5e73\u884c\u79fb\u52a8\u7684\u5411\u91cf\u3002 \u6ce8\u610f\u5230\u5e73\u9762\u5411\u91cf\u5177\u6709\u65b9\u5411\u6027\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u6bd4\u8f83\u4e24\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\u3002\u4f46\u662f\u4e24\u4e2a\u5411\u91cf\u53ef\u4ee5\u76f8\u7b49\u3002","title":"\u5b9a\u4e49\u53ca\u76f8\u5173\u6982\u5ff5"},{"location":"math/misc/#_3","text":"","title":"\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97"},{"location":"math/misc/#_4","text":"\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u79cd\u91cf\uff0c\u5c31\u5e0c\u671b\u8ba9\u5b83\u5177\u6709\u8fd0\u7b97\u3002\u5411\u91cf\u7684\u8fd0\u7b97\u53ef\u4ee5\u7c7b\u6bd4\u6570\u7684\u8fd0\u7b97\uff0c\u4f46\u662f\u6211\u4eec\u4ece\u7269\u7406\u5b66\u7684\u89d2\u5ea6\u51fa\u53d1\u7814\u7a76\u5411\u91cf\u7684\u8fd0\u7b97\u3002 \u6211\u4eec\u8003\u8651\u7269\u7406\u5b66\u4e2d\u7684\u4f4d\u79fb\u6982\u5ff5\uff0c\u5047\u5982\u4e00\u4e2a\u4eba\u4ece A A \u7ecf B B \u8d70\u5230 C C \uff0c\u6211\u4eec\u8bf4\u4ed6\u7ecf\u8fc7\u7684\u4f4d\u79fb\u4e3a \\vec{AB}+\\vec{BC} \\vec{AB}+\\vec{BC} \uff0c\u8fd9\u5176\u5b9e\u7b49\u4ef7\u4e8e\u8fd9\u4e2a\u4eba\u76f4\u63a5\u4ece A A \u8d70\u5230 C C \uff0c\u5373 \\vec{AB}+\\vec{BC}=\\vec{AC} \\vec{AB}+\\vec{BC}=\\vec{AC} \u3002 \u6ce8\u610f\u5230\u529b\u7684\u5408\u6210\u6cd5\u5219\u2014\u2014\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u770b\u505a\u4e00\u4e9b\u5411\u91cf\u76f8\u52a0\u3002 \u6240\u4ee5\u6211\u4eec\u6574\u7406\u4e00\u4e0b\u5411\u91cf\u7684\u52a0\u6cd5\u6cd5\u5219\uff1a \u5411\u91cf\u52a0\u6cd5\u7684\u4e09\u89d2\u5f62\u6cd5\u5219 \uff1a\u82e5\u8981\u6c42\u548c\u7684\u5411\u91cf\u9996\u5c3e\u987a\u6b21\u76f8\u8fde\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5411\u91cf\u7684\u548c\u4e3a\u7b2c\u4e00\u4e2a\u5411\u91cf\u7684\u8d77\u70b9\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5411\u91cf\u7684\u7ec8\u70b9\uff1b \u5411\u91cf\u52a0\u6cd5\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219 \uff1a\u82e5\u8981\u6c42\u548c\u7684\u4e24\u4e2a\u5411\u91cf \u5171\u8d77\u70b9 \uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u548c\u5411\u91cf\u4e3a\u4ee5\u8fd9\u4e24\u4e2a\u5411\u91cf\u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u5bf9\u89d2\u7ebf\uff0c\u8d77\u70b9\u4e3a\u4e24\u4e2a\u5411\u91cf\u5171\u6709\u7684\u8d77\u70b9\uff0c\u65b9\u5411\u6cbf\u5e73\u884c\u56db\u8fb9\u5f62\u5bf9\u89d2\u7ebf\u65b9\u5411\u3002 \u8fd9\u6837\uff0c\u5411\u91cf\u7684\u52a0\u6cd5\u5c31\u5177\u6709\u4e86\u51e0\u4f55\u610f\u4e49\u3002 \u5e76\u4e14\u53ef\u4ee5\u9a8c\u8bc1\uff0c\u5411\u91cf\u7684\u52a0\u6cd5\u6ee1\u8db3 \u4ea4\u6362\u5f8b\u4e0e\u7ed3\u5408\u5f8b \u3002 \u56e0\u4e3a\u5b9e\u6570\u7684\u51cf\u6cd5\u53ef\u4ee5\u5199\u6210\u52a0\u4e0a\u76f8\u53cd\u6570\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u8003\u8651\u5728\u5411\u91cf\u505a\u51cf\u6cd5\u65f6\u4e5f\u8fd9\u4e48\u5199\u3002\u5373\uff1a \\vec a-\\vec b=\\vec a+(-\\vec b) \\vec a-\\vec b=\\vec a+(-\\vec b) \u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u8003\u8651\u5171\u8d77\u70b9\u7684\u5411\u91cf\uff0c\u6309\u7167\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\u505a\u51fa\u5b83\u4eec\u7684\u5dee\uff0c\u7ecf\u8fc7\u5e73\u79fb\u540e\u53ef\u4ee5\u53d1\u73b0 \u5171\u8d77\u70b9\u5411\u91cf\u7684\u5dee\u5411\u91cf\u662f\u7531\u51cf\u5411\u91cf\u6307\u5411\u88ab\u51cf\u5411\u91cf\u7684\u6709\u5411\u7ebf\u6bb5 \u3002 \u8fd9\u4e5f\u662f\u5411\u91cf\u51cf\u6cd5\u7684\u51e0\u4f55\u610f\u4e49\u3002 \u6211\u4eec\u6709\u65f6\u5019\u6709\u4e24\u70b9 A,B A,B \uff0c\u60f3\u77e5\u9053 \\vec{AB} \\vec{AB} \uff0c\u53ef\u4ee5\u5229\u7528\u51cf\u6cd5\u8fd0\u7b97 \\vec{AB}=\\vec{OB}-\\vec{OA} \\vec{AB}=\\vec{OB}-\\vec{OA} \u83b7\u5f97\u3002","title":"\u5411\u91cf\u7684\u52a0\u6cd5\u4e0e\u51cf\u6cd5"},{"location":"math/misc/#_5","text":"\u8003\u8651 \\vec b=\\vec a+\\vec a+\\vec a \\vec b=\\vec a+\\vec a+\\vec a \uff0c \\vec b \\vec b \u7b49\u4e8e 3 \u4e2a \\vec a \\vec a \u76f8\u52a0\uff0c\u6211\u4eec\u8bb0\u4e3a \\vec b=3\\vec a \\vec b=3\\vec a \u3002 \u540c\u6837\u7684\uff0c \\vec c=-\\vec a-\\vec a-\\vec a \\vec c=-\\vec a-\\vec a-\\vec a \uff0c\u90a3\u4e48 \\vec c=3(-\\vec a)=-3\\vec a \\vec c=3(-\\vec a)=-3\\vec a \u3002 \u4e8e\u662f\uff0c\u4e00\u822c\u5730\uff0c\u6211\u4eec\u89c4\u5b9a\u5b9e\u6570 \\lambda \\lambda \u4e0e\u5411\u91cf \\vec a \\vec a \u7684\u79ef\u4e3a\u4e00\u4e2a\u5411\u91cf\uff0c\u8fd9\u79cd\u8fd0\u7b97\u5c31\u662f\u5411\u91cf\u7684 \u6570\u4e58\u8fd0\u7b97 \uff0c\u8bb0\u4f5c \\lambda \\vec a \\lambda \\vec a \uff0c\u5b83\u7684\u957f\u5ea6\u4e0e\u65b9\u5411\u89c4\u5b9a\u5982\u4e0b\uff1a |\\lambda \\vec a|=|\\lambda||\\vec a| |\\lambda \\vec a|=|\\lambda||\\vec a| \uff1b \u5f53 \\lambda >0 \\lambda >0 \u65f6\uff0c \\lambda\\vec a \\lambda\\vec a \u4e0e \\vec a \\vec a \u540c\u5411\uff0c\u5f53 \\lambda =0 \\lambda =0 \u65f6\uff0c \\lambda \\vec a=\\vec 0 \\lambda \\vec a=\\vec 0 \uff0c\u5f53 \\lambda<0 \\lambda<0 \u65f6\uff0c \\lambda \\vec a \\lambda \\vec a \u4e0e \\vec a \\vec a \u65b9\u5411\u76f8\u53cd\u3002 \u6211\u4eec\u6839\u636e\u6570\u4e58\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u6709\u5982\u4e0b\u8fd0\u7b97\u5f8b\uff1a \\lambda(\\mu \\vec a)=(\\lambda \\mu)\\vec a\\\\ (\\lambda+\\mu)\\vec a=\\lambda \\vec a+\\mu \\vec a\\\\ \\lambda(\\vec a+\\vec b)=\\lambda \\vec a+\\lambda \\vec b \\lambda(\\mu \\vec a)=(\\lambda \\mu)\\vec a\\\\ (\\lambda+\\mu)\\vec a=\\lambda \\vec a+\\mu \\vec a\\\\ \\lambda(\\vec a+\\vec b)=\\lambda \\vec a+\\lambda \\vec b \u7279\u522b\u5730\uff0c\u6211\u4eec\u6709\uff1a (-\\lambda)\\vec a=-(\\lambda \\vec a)=-\\lambda(\\vec a)\\\\ \\lambda(\\vec a-\\vec b)=\\lambda \\vec a-\\lambda \\vec b (-\\lambda)\\vec a=-(\\lambda \\vec a)=-\\lambda(\\vec a)\\\\ \\lambda(\\vec a-\\vec b)=\\lambda \\vec a-\\lambda \\vec b \u7531\u6570\u4e58\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c\u5bf9\u4e8e \u975e\u96f6 \u5411\u91cf \\vec a \\vec a \uff0c\u5982\u679c\u5b58\u5728\u5b9e\u6570 \\lambda \\lambda \uff0c\u4f7f\u5f97 \\vec b=\\lambda \\vec a \\vec b=\\lambda \\vec a \uff0c\u90a3\u4e48 \\vec a \\parallel \\vec b \\vec a \\parallel \\vec b \u3002 \u53cd\u8fc7\u6765\uff0c\u5982\u679c \\vec a\\parallel \\vec b \\vec a\\parallel \\vec b \uff0c \\vec a \\not = \\vec 0 \\vec a \\not = \\vec 0 \uff0c\u4e14 |\\vec b|=\\mu |\\vec a| |\\vec b|=\\mu |\\vec a| \uff0c\u90a3\u4e48\u5f53 \\vec a \\vec a \u4e0e \\vec b \\vec b \u540c\u5411\u65f6\uff0c \\vec b=\\mu \\vec a \\vec b=\\mu \\vec a \uff0c\u53cd\u5411\u65f6 \\vec b=-\\mu \\vec a \\vec b=-\\mu \\vec a \u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u975e\u96f6 \u5411\u91cf \\vec a \\vec a \u4e0e \\vec b \\vec b \u5171\u7ebf\uff0c\u5f53\u4e14\u4ec5\u5f53\u6709\u552f\u4e00\u5b9e\u6570 \\lambda \\lambda \uff0c\u4f7f\u5f97 \\vec b=\\lambda \\vec a \\vec b=\\lambda \\vec a \u3002 \u6700\u540e\uff0c\u5411\u91cf\u7684\u52a0\uff0c\u51cf\uff0c\u6570\u4e58\u7edf\u79f0\u4e3a\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\u3002","title":"\u5411\u91cf\u7684\u6570\u4e58"},{"location":"math/misc/#_6","text":"","title":"\u5e73\u9762\u5411\u91cf\u7684\u57fa\u672c\u5b9a\u7406\u53ca\u5750\u6807\u8868\u793a"},{"location":"math/misc/#_7","text":"\u5e73\u9762\u5411\u91cf\u90a3\u4e48\u591a\uff0c\u6211\u4eec\u60f3\u7528\u5c3d\u53ef\u80fd\u5c11\u7684\u91cf\u8868\u793a\u51fa\u6240\u6709\u5e73\u9762\u5411\u91cf\uff0c\u600e\u4e48\u529e\u5462\uff1f \u6211\u4eec\u5148\u7528\u4e00\u4e2a\u5411\u91cf\u8868\u793a\u51fa\u6240\u6709\u5411\u91cf\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6839\u636e 1.2.2 \u4e2d\u7684\u5b9a\u7406\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u80fd\u8868\u793a\u51fa\u67d0\u6761\u76f4\u7ebf\u4e0a\u7684\u5411\u91cf\u3002 \u6211\u4eec\u518d\u52a0\u5165\u4e00\u4e2a\u5411\u91cf\uff0c\u7528\u4e24\u4e2a \u4e0d\u5171\u7ebf \u5411\u91cf\u8868\u793a\uff08\u4e24\u4e2a\u5171\u7ebf\u5411\u91cf\u5728\u6b64\u53ef\u4ee5\u770b\u6210\u540c\u4e00\u4e2a\u5411\u91cf\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628a\u4efb\u610f\u4e00\u4e2a\u5e73\u9762\u5411\u91cf\u5206\u89e3\u5230\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u4e0a\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e24\u4e2a\u5411\u91cf \\vec{e_1},\\vec{e_2} \\vec{e_1},\\vec{e_2} \u4e0d\u5171\u7ebf\uff0c\u90a3\u4e48\u5b58\u5728\u552f\u4e00\u5b9e\u6570\u5bf9 (x,y) (x,y) \uff0c\u4f7f\u5f97\u4e0e \\vec{e_1},\\vec{e_2} \\vec{e_1},\\vec{e_2} \u5171\u9762\u7684\u4efb\u610f\u5411\u91cf \\vec p \\vec p \u6ee1\u8db3 \\vec p=x\\vec{e_1}+y\\vec{e_2} \\vec p=x\\vec{e_1}+y\\vec{e_2} \uff0c\u8fd9\u5c31\u662f \u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406 \u3002\u5728\u540c\u4e00\u5e73\u9762\u5185\u7684\u4e24\u4e2a\u4e0d\u5171\u7ebf\u7684\u5411\u91cf\u79f0\u4e3a \u57fa\u5e95 \u3002 \u5982\u679c\u57fa\u5e95\u76f8\u4e92\u5782\u76f4\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5206\u89e3\u7684\u65f6\u5019\u5c31\u662f\u5bf9\u5411\u91cf \u6b63\u4ea4\u5206\u89e3 \u3002","title":"\u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406"},{"location":"math/misc/#_8","text":"\u6211\u4eec\u60f3\u628a\u5e73\u9762\u4e0a\u7684\u56fe\u5f62\u90fd\u653e\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7814\u7a76\uff08\u8fd9\u6837\u5f62\u7684\u95ee\u9898\u5c31\u6709\u4e86\u6570\u4f5c\u4e3a\u4f9d\u636e\uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u53d6\u4e0e x x \u8f74\u4e0e y y \u8f74\u65b9\u5411\u76f8\u540c\u7684\u5355\u4f4d\u5411\u91cf i,j i,j \u4f5c\u4e3a\u4e00\u7ec4\u57fa\u5e95\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c \\vec p=x\\vec i+y\\vec j \\vec p=x\\vec i+y\\vec j \uff0c\u5176\u4e2d \\vec p \\vec p \u4e3a\u5e73\u9762\u5185\u4efb\u610f\u5411\u91cf\u3002 \u7531\u4e8e\u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u7684\u5b9e\u6570\u5bf9 (x,y) (x,y) \u662f\u552f\u4e00\u7684\u3002\u8fd9\u6837\uff0c\u5e73\u9762\u5185\u7684\u4efb\u610f\u5411\u91cf\u90fd\u53ef\u4ee5\u7528\u6709\u5e8f\u5b9e\u6570\u5bf9\u552f\u4e00\u786e\u5b9a\uff0c\u6211\u4eec\u628a (x,y) (x,y) \u53eb\u505a\u5411\u91cf\u7684 \u5750\u6807 \u3002\u8bb0\u4f5c\uff1a \\vec p=(x,y) \\vec p=(x,y) \u3002 \u8fd9\u6837\u6ca1\u95ee\u9898\uff1f\u662f\u7684\uff0c\u56e0\u4e3a\u6709\u5e8f\u5b9e\u6570\u5bf9 (x,y) (x,y) \u4e0e\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u70b9\u552f\u4e00\u786e\u5b9a\uff0c\u90a3\u4e48\u6211\u4eec\u4f5c \\vec{OP}=\\vec p \\vec{OP}=\\vec p \uff0c\u90a3\u4e48\u7ec8\u70b9 P(x,y) P(x,y) \u4e5f\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002\u7531\u4e8e\u6211\u4eec\u7814\u7a76\u7684\u90fd\u662f\u81ea\u7531\u5411\u91cf\uff0c\u53ef\u4ee5\u81ea\u7531\u5e73\u79fb\u8d77\u70b9\uff0c\u8fd9\u6837\uff0c\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u91cc\uff0c\u6bcf\u4e00\u4e2a\u5411\u91cf\u90fd\u53ef\u4ee5\u7528\u6709\u5e8f\u5b9e\u6570\u5bf9\u552f\u4e00\u8868\u793a\u3002","title":"\u5e73\u9762\u5411\u91cf\u7684\u5750\u6807\u8868\u793a"},{"location":"math/misc/#_9","text":"\u7531\u5e73\u9762\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u5176\u5750\u6807\u8fd0\u7b97\uff0c\u4e3b\u8981\u65b9\u6cd5\u662f\u5c06\u5750\u6807\u5168\u90e8\u5316\u4e3a\u7528\u57fa\u5e95\u8868\u793a\uff0c\u7136\u540e\u5229\u7528\u8fd0\u7b97\u5f8b\u8fdb\u884c\u5408\u5e76\uff0c\u4e4b\u540e\u8868\u793a\u51fa\u8fd0\u7b97\u7ed3\u679c\u7684\u5750\u6807\u5f62\u5f0f\u3002 \u63a8\u5bfc\u8fc7\u7a0b\u7701\u7565\uff0c\u4e0b\u9762\u7ed9\u51fa\u7ed3\u8bba\uff1a \u82e5\u4e24\u5411\u91cf \\vec a=(m,n),\\vec b=(p,q) \\vec a=(m,n),\\vec b=(p,q) \uff0c\u5219\uff1a \\vec a+\\vec b=(m+n,p+q)\\\\ \\vec a-\\vec b=(m-n,p-q)\\\\ k\\vec a=(km,kn) \\vec a+\\vec b=(m+n,p+q)\\\\ \\vec a-\\vec b=(m-n,p-q)\\\\ k\\vec a=(km,kn) \u6709\u4e86\u5750\u6807\u8fd0\u7b97\uff0c\u6211\u4eec\u5df2\u77e5\u4e24\u70b9 A(a,b),B(c,d) A(a,b),B(c,d) \uff0c\u60f3\u77e5\u9053 \\vec{AB} \\vec{AB} \u5c31\u4e0d\u96be\u4e86\uff0c\u53ea\u9700\u8981 \\vec{OB}-\\vec{OA} \\vec{OB}-\\vec{OA} \u5373\u53ef\uff0c\u4e5f\u5c31\u662f \\vec{AB}=(c-a,d-b) \\vec{AB}=(c-a,d-b) \u3002 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u70b9 P P \u6cbf\u4e00\u5b9a\u65b9\u5411\u5e73\u79fb\u67d0\u5355\u4f4d\u957f\u5ea6\uff0c\u8fd9\u6837\u6211\u4eec\u628a\u8981\u5e73\u79fb\u7684\u65b9\u5411\u548c\u8ddd\u79bb\u7ec4\u5408\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u5229\u7528\u5411\u91cf\u52a0\u6cd5\u7684\u4e09\u89d2\u5f62\u6cd5\u5219\uff0c\u5c06 \\vec{OP} \\vec{OP} \u52a0\u4e0a\u8fd9\u4e2a\u5411\u91cf\uff0c\u5f97\u5230\u7684\u5411\u91cf\u7ec8\u70b9\u5373\u4e3a\u5e73\u79fb\u540e\u7684\u70b9\u3002 \u5229\u7528\u5411\u91cf\u7684\u5750\u6807\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u8bb8\u591a\u5e73\u79fb\u64cd\u4f5c\u4e86\uff01 \u8fd8\u53ef\u4ee5\u5224\u65ad\u5411\u91cf\u5171\u7ebf\uff0c\u5728\u6b64\u7ed9\u51fa\u4f9d\u636e\uff1a \u82e5 A,B,C A,B,C \u4e09\u70b9\u5171\u7ebf\uff0c\u5219 \\vec{OB}=\\lambda \\vec{OA}+(1-\\lambda)\\vec{OC} \\vec{OB}=\\lambda \\vec{OA}+(1-\\lambda)\\vec{OC} \u3002 \u8bc1\u660e\u5f88\u7b80\u5355\uff0c \u7559\u4f5c\u8bfe\u540e\u4f5c\u4e1a\u3002","title":"\u5e73\u9762\u5411\u91cf\u7684\u5750\u6807\u8fd0\u7b97"},{"location":"math/misc/#_10","text":"\u5df2\u77e5\u4e24\u4e2a\u5411\u91cf \\vec a,\\vec b \\vec a,\\vec b \uff0c\u5b83\u4eec\u7684\u5939\u89d2\u4e3a \\theta \\theta \uff0c\u90a3\u4e48\uff1a \\vec a \\cdot \\vec b=|\\vec a||\\vec b|\\cos \\theta \\vec a \\cdot \\vec b=|\\vec a||\\vec b|\\cos \\theta \u5c31\u662f\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u6570\u91cf\u79ef\uff0c\u4e5f\u53eb\u70b9\u79ef\uff0c\u5185\u79ef\u3002\u5176\u4e2d\u79f0 |\\vec a|\\cos \\theta |\\vec a|\\cos \\theta \u4e3a \\vec a \\vec a \u5728 \\vec b \\vec b \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u79cd\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5b9e\u6570\uff0c\u4e3a\u6807\u91cf\uff0c\u5e76\u4e0d\u5c5e\u4e8e\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\u3002 \u6570\u91cf\u79ef\u6709\u4e00\u4e9b\u6027\u8d28\uff0c\u5728\u6b64\u7559\u7ed9\u8bfb\u8005\u8fdb\u4e00\u6b65\u63a2\u7a76\u3002\u5728\u6b64\u63d0\u4e00\u70b9\uff1a \\vec a \\perp \\vec b \\vec a \\perp \\vec b \u7b49\u4ef7\u4e8e \\vec a\\cdot \\vec b=0 \\vec a\\cdot \\vec b=0 \u6570\u91cf\u79ef\u5177\u6709\u51e0\u4f55\u610f\u4e49\uff1a\u6570\u91cf\u79ef \\vec a \\cdot \\vec b \\vec a \\cdot \\vec b \u7b49\u4e8e \\vec a \\vec a \u7684\u6a21\u4e0e \\vec b \\vec b \u5728 \\vec a \\vec a \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u7684\u4e58\u79ef\u3002 \u6309\u7167\u5750\u6807\u8fd0\u7b97\u7684\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6570\u91cf\u79ef\u7684\u5750\u6807\u8fd0\u7b97\uff1a \u82e5 \\vec a=(m,n),\\vec b=(p,q) \\vec a=(m,n),\\vec b=(p,q) \uff0c\u90a3\u4e48 \\vec a\\cdot \\vec b=mp+nq \\vec a\\cdot \\vec b=mp+nq \u3002 \u8fd8\u53ef\u4ee5\u77e5\u9053\uff0c\u5411\u91cf\u7684\u6a21 |\\vec a|=\\sqrt {m^2+n^2} |\\vec a|=\\sqrt {m^2+n^2} \u3002 \u5f53\u7136\u8fd8\u53ef\u4ee5\u77e5\u9053\u5411\u91cf\u5939\u89d2\u4f59\u5f26\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u5f0f\u5b50\u592a\u957f\u4e0d\u5728\u8fd9\u5199\u4e86\u3002 \uff08\u5176\u5b9e\u5c31\u662f\u628a \\cos \\theta \\cos \\theta \u653e\u5230\u4e00\u8fb9\uff0c\u628a\u5176\u4f59\u91cf\u6574\u7406\u4e00\u4e0b\u3002\uff09 \u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5411\u91cf\u89e3\u51b3\u5f88\u591a\u51e0\u4f55\u95ee\u9898\u4e86\u3002","title":"\u5411\u91cf\u7684\u6570\u91cf\u79ef"},{"location":"math/misc/#_11","text":"","title":"\u6269\u5c55"},{"location":"math/misc/#_12","text":"\uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 4-2 \u5185\u5bb9\uff09 \u6211\u4eec\u53d1\u73b0\uff0c\u77e9\u9635\u8fd0\u7b97\u7684\u76f8\u5173\u6cd5\u5219\u4e0e\u5411\u91cf\u8fd0\u7b97\u76f8\u4f3c\uff0c\u4e8e\u662f\u8003\u8651\u5c06\u5411\u91cf\u5199\u6210\u77e9\u9635\u5f62\u5f0f\uff0c\u8fd9\u6837\u5c31\u5c06\u5411\u91cf\u95ee\u9898\u5316\u4e3a\u77e9\u9635\u95ee\u9898\u4e86\u3002 \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003\u7ebf\u6027\u4ee3\u6570\u3002","title":"\u5411\u91cf\u4e0e\u77e9\u9635"},{"location":"math/misc/#_13","text":"\u6211\u4eec\u5b9a\u4e49\u5411\u91cf \\vec a,\\vec b \\vec a,\\vec b \u7684\u5411\u91cf\u79ef\u4e3a\u4e00\u4e2a\u5411\u91cf\uff0c\u8bb0\u4e3a \\vec a\\times \\vec b \\vec a\\times \\vec b \uff0c\u5176\u6a21\u4e0e\u65b9\u5411\u5b9a\u4e49\u5982\u4e0b\uff1a |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\langle \\vec a,\\vec b\\rangle |\\vec a\\times \\vec b|=|\\vec a||\\vec b|\\sin \\langle \\vec a,\\vec b\\rangle \uff1b \\vec a\\times \\vec b \\vec a\\times \\vec b \u4e0e \\vec a,\\vec b \\vec a,\\vec b \u90fd\u5782\u76f4\uff0c\u4e14 \\vec a,\\vec b,\\vec a\\times \\vec b \\vec a,\\vec b,\\vec a\\times \\vec b \u7b26\u5408\u53f3\u624b\u6cd5\u5219\u3002 \u5411\u91cf\u79ef\u4e5f\u53eb\u5916\u79ef\u3002 \u7531\u4e8e\u5411\u91cf\u79ef\u6d89\u53ca\u5230\u7a7a\u95f4\u51e0\u4f55\u4e0e\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\uff0c\u6240\u4ee5\u5e76\u672a\u5728\u9ad8\u4e2d\u8bfe\u672c\u4e2d\u51fa\u73b0\u3002\u7136\u800c\u6ce8\u610f\u5230\u5411\u91cf\u79ef\u7684\u6a21\uff0c\u8054\u60f3\u5230\u4e09\u89d2\u5f62\u9762\u79ef\u8ba1\u7b97\u516c\u5f0f S=\\frac{1}{2}ab\\sin C S=\\frac{1}{2}ab\\sin C \uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5411\u91cf\u79ef\u7684\u51e0\u4f55\u610f\u4e49\u662f\uff1a |\\vec a\\times \\vec b| |\\vec a\\times \\vec b| \u662f\u4ee5 \\vec a,\\vec b \\vec a,\\vec b \u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u9762\u79ef \u3002 \u77e5\u9053\u8fd9\u4e2a\uff0c\u591a\u8fb9\u5f62\u9762\u79ef\u5c31\u5f88\u597d\u7b97\u4e86\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u4e0d\u5b8c\u5168\u7684\u5750\u6807\u8868\u793a\uff1a\u8bb0 \\vec a=(m,n),\\vec b=(p,q) \\vec a=(m,n),\\vec b=(p,q) \uff0c\u90a3\u4e48\u4e24\u4e2a\u5411\u91cf\u7684\u5411\u91cf\u79ef\u7684\u7ad6\u5750\u6807\u4e3a mq-np mq-np \uff0c\u6211\u4eec\u6839\u636e\u53f3\u624b\u6cd5\u5219\u548c\u7ad6\u5750\u6807\u7b26\u53f7\u53ef\u4ee5\u63a8\u65ad\u51fa \\vec b \\vec b \u76f8\u5bf9\u4e8e \\vec a \\vec a \u7684\u65b9\u5411\uff0c\u82e5\u5728\u9006\u65f6\u9488\u65b9\u5411\u7ad6\u5750\u6807\u4e3a\u6b63\u503c\uff0c\u53cd\u4e4b\u4e3a\u8d1f\u503c\uff0c\u7b80\u8bb0\u4e3a \u987a\u8d1f\u9006\u6b63 \u3002","title":"\u5411\u91cf\u79ef"},{"location":"math/misc/#_14","text":"","title":"\u6781\u5750\u6807\u4e0e\u6781\u5750\u6807\u7cfb"},{"location":"math/misc/#_15","text":"\uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u5fc5\u4fee\u56db\u5185\u5bb9\uff09 \u6211\u4eec\u5728\u521d\u4e2d\u5b66\u4e60\u8fc7\u89d2\u5ea6\u503c\uff0c\u4f46\u662f\u89d2\u5ea6\u4e0d\u662f\u4e00\u4e2a\u6570\uff0c\u8fd9\u7ed9\u6211\u4eec\u6df1\u5165\u7814\u7a76\u5e26\u6765\u4e86\u4e00\u5b9a\u7684\u56f0\u96be\uff0c\u8fd8\u6709\u5176\u4ed6\u7684\u95ee\u9898\u65e0\u6cd5\u89e3\u91ca\u6e05\uff0c\u6240\u4ee5\u6211\u4eec\u6362\u7528\u5f27\u5ea6\u5236\u63cf\u8ff0\u89d2\u3002 \u9996\u5148\u6211\u4eec\u7528\u65cb\u8f6c\u7684\u601d\u8def\u5b9a\u4e49\u89d2\uff0c\u89d2\u53ef\u4ee5\u770b\u6210\u5e73\u9762\u5185\u4e00\u6761\u5c04\u7ebf\u7ed5\u5176\u7aef\u70b9\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u65cb\u8f6c\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u5f62\u6210\u7684\u56fe\u5f62\u3002\u5f00\u59cb\u7684\u4f4d\u7f6e\u79f0\u4e3a\u59cb\u8fb9\uff0c\u7ed3\u675f\u7684\u4f4d\u7f6e\u79f0\u4e3a\u7ec8\u8fb9\u3002 \u6211\u4eec\u89c4\u5b9a\uff0c\u6309 \u9006\u65f6\u9488 \u65b9\u5411\u65cb\u8f6c\u5f62\u6210\u7684\u89d2\u53eb\u505a \u6b63\u89d2 \uff0c\u6309 \u987a\u65f6\u9488 \u65b9\u5411\u65cb\u8f6c\u6240\u5f62\u6210\u7684\u89d2\u53eb\u505a \u8d1f\u89d2 \uff0c\u5982\u679c\u8fd9\u6761\u5c04\u7ebf\u6ca1\u6709\u505a\u4efb\u4f55\u65cb\u8f6c\uff0c\u79f0\u4e3a \u96f6\u89d2 \u3002\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u89d2\u7684\u6982\u5ff5\u63a8\u5411\u4e86 \u4efb\u610f\u89d2 \u3002 \u7136\u540e\u6211\u4eec\u4ecb\u7ecd \u5f27\u5ea6\u5236 \uff0c\u628a\u957f\u5ea6\u7b49\u4e8e\u534a\u5f84\u957f\u7684\u5f27\u6240\u5bf9\u7684\u5706\u5fc3\u89d2\u79f0\u4e3a 1 1 \u5f27\u5ea6\u7684\u89d2\uff0c\u7528\u7b26\u53f7 \\text{rad} \\text{rad} \u8868\u793a\uff0c\u8bfb\u4f5c\uff1a\u5f27\u5ea6\u3002 \u4e00\u822c\u5730\uff0c\u6b63\u89d2\u7684\u5f27\u5ea6\u6570\u4e3a\u6b63\uff0c\u8d1f\u89d2\u7684\u5f27\u5ea6\u6570\u4e3a\u8d1f\uff0c\u96f6\u89d2\u7684\u5f27\u5ea6\u6570\u4e3a 0 0 \uff0c\u5982\u679c\u534a\u5f84\u4e3a r r \u7684\u5706\u7684\u5706\u5fc3\u89d2 \\alpha \\alpha \u6240\u5bf9\u5f27\u957f\u4e3a l l \uff0c\u5219 |\\alpha|=\\frac{l}{r} |\\alpha|=\\frac{l}{r} \u3002\u5229\u7528\u8fd9\u4e2a\u516c\u5f0f\u8fd8\u53ef\u4ee5\u5199\u51fa\u5f27\u957f\u548c\u6247\u5f62\u9762\u79ef\u516c\u5f0f\uff0c\u5728\u6b64\u7565\u8fc7\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53d1\u73b0 360^\\circ 360^\\circ \u7684\u89d2\u5f27\u5ea6\u6570\u4e3a 2\\pi 2\\pi \uff0c\u8fd9\u6837\u6709\u4e86\u5bf9\u5e94\u5173\u7cfb\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u89d2\u5ea6\u503c\u548c\u5f27\u5ea6\u5236\u7684\u8f6c\u5316\u4e86\u3002 \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u89d2\uff0c\u5c06\u5176\u7ec8\u8fb9\u518d\u65cb\u8f6c\u4e00\u5468\uff0c\u751a\u81f3\u591a\u5468\uff0c\u59cb\u8fb9\u4f4d\u7f6e\u4e0d\u52a8\uff0c\u90a3\u4e48\u7ec8\u8fb9\u4f4d\u7f6e\u6c38\u8fdc\u662f\u76f8\u540c\u7684\uff0c\u6211\u4eec\u79f0\u8fd9\u4e9b\u89d2\u4e3a \u7ec8\u8fb9\u4f4d\u7f6e\u76f8\u540c\u7684\u89d2 \u3002 \u4e0e\u89d2 \\alpha \\alpha \u7ec8\u8fb9\u4f4d\u7f6e\u76f8\u540c\u7684\u89d2\u7684\u96c6\u5408\u5f88\u5bb9\u6613\u5f97\u51fa\uff0c\u4e3a \\{\\theta\\mid \\theta=\\alpha+2k\\pi,k\\in \\mathbb{Z}\\} \\{\\theta\\mid \\theta=\\alpha+2k\\pi,k\\in \\mathbb{Z}\\} \u3002 \u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u7ed9\u8fd9\u4e2a\u89d2\u4e0d\u505c\u52a0\u4e00\u5708\uff0c\u7ec8\u8fb9\u4f4d\u7f6e\u4e0d\u53d8\u3002","title":"\u4efb\u610f\u89d2\u4e0e\u5f27\u5ea6\u5236"},{"location":"math/misc/#_16","text":"\uff08\u4e3a\u4eba\u6559\u7248\u9ad8\u4e2d\u6570\u5b66 A \u7248\u9009\u4fee 4-4 \u5185\u5bb9\uff09 \u67d0\u540c\u5b66\uff1a\u5b66\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u90fd\u5b66\u70e6\u4e86\uff0c\u6709\u6ca1\u6709\u5176\u4ed6\u5750\u6807\u7cfb\uff1f \u6211\u4eec\u8003\u8651\u5b9e\u9645\u60c5\u51b5\uff0c\u6bd4\u5982\u822a\u6d77\uff0c\u6211\u4eec\u8bf4\u300c B B \u5728 A A \u7684\u5317\u504f\u4e1c 30^\\circ 30^\\circ \u65b9\u5411\u4e0a\uff0c\u8ddd\u79bb\u4e3a 100 100 \u7c73\u300d\uff0c\u800c\u4e0d\u662f\u300c\u4ee5 A A \u4e3a\u539f\u70b9\u5efa\u7acb\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c B(50,50\\sqrt 3) B(50,50\\sqrt 3) \u300d\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5728\u5e73\u9762\u4e0a\u9009\u4e00\u5b9a\u70b9 O O \uff0c\u79f0\u4e3a \u6781\u70b9 \uff0c\u81ea\u6781\u70b9\u5f15\u51fa\u4e00\u6761\u5c04\u7ebf Ox Ox \uff0c\u79f0\u4e3a \u6781\u8f74 \uff0c\u518d\u9009\u62e9\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\uff08\u5728\u6570\u5b66\u95ee\u9898\u4e2d\u901a\u5e38\u4e3a 1 1 \uff09\uff0c\u4e00\u4e2a\u89d2\u5ea6\u5355\u4f4d\uff08\u901a\u5e38\u4e3a\u5f27\u5ea6\uff09\u53ca\u5176\u6b63\u65b9\u5411\uff08\u901a\u5e38\u4e3a\u9006\u65f6\u9488\u65b9\u5411\uff09\uff0c\u8fd9\u6837\u5c31\u5efa\u7acb\u4e86 \u6781\u5750\u6807\u7cfb \u3002 \u5728\u6781\u5750\u6807\u7cfb\u4e0b\uff0c\u6211\u4eec\u600e\u4e48\u63cf\u8ff0\u4f4d\u7f6e\u5462\uff1f \u8bbe A A \u4e3a\u5e73\u9762\u4e0a\u4e00\u70b9\uff0c\u6781\u70b9 O O \u4e0e A A \u4e4b\u95f4\u7684\u8ddd\u79bb |OA| |OA| \u5373\u4e3a \u6781\u5f84 \uff0c\u8bb0\u4e3a \\rho \\rho \uff1b\u4ee5\u6781\u8f74\u4e3a\u59cb\u8fb9\uff0c OA OA \u4e3a\u7ec8\u8fb9\u7684\u89d2 \\angle xOA \\angle xOA \u4e3a \u6781\u89d2 \uff0c\u8bb0\u4e3a \\theta \\theta \uff0c\u90a3\u4e48\u6709\u5e8f\u6570\u5bf9 (\\rho,\\theta) (\\rho,\\theta) \u5373\u4e3a A A \u7684 \u6781\u5750\u6807 \u3002 \u7531\u7ec8\u8fb9\u76f8\u540c\u7684\u89d2\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c (\\rho,\\theta) (\\rho,\\theta) \u4e0e (\\rho,\\theta+2k\\pi)\\ (k\\in \\mathbb{Z}) (\\rho,\\theta+2k\\pi)\\ (k\\in \\mathbb{Z}) \u5176\u5b9e\u8868\u793a\u7684\u662f\u4e00\u6837\u7684\u70b9\uff0c\u7279\u522b\u5730\uff0c\u6781\u70b9\u7684\u6781\u5750\u6807\u4e3a (0,\\theta)\\ (\\theta\\in \\mathbb{R}) (0,\\theta)\\ (\\theta\\in \\mathbb{R}) \uff0c\u4e8e\u662f\u5e73\u9762\u5185\u7684\u70b9\u7684\u6781\u5750\u6807\u8868\u793a\u6709\u65e0\u6570\u591a\u79cd\u3002 \u5982\u679c\u89c4\u5b9a \\rho>0,0\\le \\theta<2\\pi\u200b \\rho>0,0\\le \\theta<2\\pi\u200b \uff0c\u90a3\u4e48\u9664\u6781\u70b9\u5916\uff0c\u5176\u4ed6\u5e73\u9762\u5185\u7684\u70b9\u53ef\u4ee5\u7528\u552f\u4e00\u6709\u5e8f\u6570\u5bf9 (\\rho,\\theta)\u200b (\\rho,\\theta)\u200b \u8868\u793a\uff0c\u800c\u6781\u5750\u6807 (\\rho,\\theta)\u200b (\\rho,\\theta)\u200b \u8868\u793a\u7684\u70b9\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002 \u5f53\u7136\uff0c\u6709\u65f6\u5019\u7814\u7a76\u6781\u5750\u6807\u7cfb\u4e0b\u7684\u56fe\u5f62\u6709\u4e9b\u4e0d\u65b9\u4fbf\uff0c\u6211\u4eec\u60f3\u8981\u8f6c\u5230\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7814\u7a76\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e92\u5316\u516c\u5f0f\u3002 \u70b9 A(\\rho,\\theta) A(\\rho,\\theta) \u7684\u76f4\u89d2\u5750\u6807 (x,y) (x,y) \u53ef\u4ee5\u5982\u4e0b\u8868\u793a\uff1a \\begin{cases} x=\\rho \\cos \\theta\\\\ y=\\rho \\sin \\theta \\end{cases} \\begin{cases} x=\\rho \\cos \\theta\\\\ y=\\rho \\sin \\theta \\end{cases} \u8fdb\u800c\u53ef\u77e5\uff1a \\rho ^2=x^2+y^2\\\\ \\tan \\theta=\\frac{y}{x}\\ \\ \\ \\ (x\\not =0) \\rho ^2=x^2+y^2\\\\ \\tan \\theta=\\frac{y}{x}\\ \\ \\ \\ (x\\not =0) \u4e8e\u662f\uff0c\u6781\u89d2 \\theta=\\arctan \\frac{y}{x} \\theta=\\arctan \\frac{y}{x} \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u51fa\u6781\u89d2\u4e86\u3002 \u5728\u7f16\u7a0b\u4e2d\uff0c\u82e5\u8981\u6c42\u53cd\u6b63\u5207\u51fd\u6570\uff0c\u5c3d\u91cf\u4f7f\u7528 atan2(y, x) \uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u9014\u6bd4 atan(x) \u5e7f\u6cdb\u3002","title":"\u6781\u5750\u6807\u4e0e\u6781\u5750\u6807\u7cfb"},{"location":"math/mobius/","text":"\u7b80\u4ecb \u00b6 \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u662f\u6570\u8bba\u4e2d\u7684\u91cd\u8981\u5185\u5bb9\u3002\u5bf9\u4e8e\u4e00\u4e9b\u51fd\u6570 f(n) f(n) \uff0c\u5982\u679c\u5f88\u96be\u76f4\u63a5\u6c42\u51fa\u5b83\u7684\u503c\uff0c\u800c\u5bb9\u6613\u6c42\u51fa\u5176\u500d\u6570\u548c\u6216\u7ea6\u6570\u548c g(n) g(n) \uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7b80\u5316\u8fd0\u7b97\uff0c\u6c42\u5f97 f(n) f(n) \u7684\u503c\u3002 \u5f00\u59cb\u5b66\u4e60\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u524d\u7f6e\u77e5\u8bc6\uff1a \u79ef\u6027\u51fd\u6570 \u3001 Dirichlet \u5377\u79ef \u3001 \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \u3002 \u79ef\u6027\u51fd\u6570 \u00b6 \u5b9a\u4e49 \u00b6 \u82e5 \\gcd(x,y)=1 \\gcd(x,y)=1 \u4e14 f(xy)=f(x)f(y) f(xy)=f(x)f(y) \uff0c\u5219 f(n) f(n) \u4e3a\u79ef\u6027\u51fd\u6570\u3002 \u6027\u8d28 \u00b6 \u82e5 f(x) f(x) \u548c g(x) g(x) \u5747\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u5219\u4ee5\u4e0b\u51fd\u6570\u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\uff1a \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned} \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned} \u4f8b\u5b50 \u00b6 \\qquad\\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1\\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d\\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k\\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1]\\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k &c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \\end{array} \\qquad\\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1\\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d\\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k\\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1]\\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k &c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \\end{array} Dirichlet \u5377\u79ef \u00b6 \u5b9a\u4e49 \u00b6 \u5b9a\u4e49\u4e24\u4e2a\u6570\u8bba\u51fd\u6570 f,g f,g \u7684 \\text{Dirichlet} \\text{Dirichlet} \u5377\u79ef\u4e3a (f*g)(n)=\\sum_{d\\mid n}f(d)g(\\frac{n}{d}) (f*g)(n)=\\sum_{d\\mid n}f(d)g(\\frac{n}{d}) \u6027\u8d28 \u00b6 \\text{Dirichlet} \\text{Dirichlet} \u5377\u79ef\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\u3002 \u5176\u4e2d \\varepsilon \\varepsilon \u4e3a \\text{Dirichlet} \\text{Dirichlet} \u5377\u79ef\u7684\u5355\u4f4d\u5143\uff08\u4efb\u4f55\u51fd\u6570\u5377 \\varepsilon \\varepsilon \u90fd\u4e3a\u5176\u672c\u8eab\uff09 \u4f8b\u5b50 \u00b6 \\begin{aligned} \\varepsilon=\\mu*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d)\\\\ d=1*1&\\Leftrightarrow d(n)=\\sum_{d\\mid n}1\\\\ \\sigma=d*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}d\\\\ \\varphi=\\mu*\\text{ID}&\\Leftrightarrow\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d}) \\end{aligned} \\begin{aligned} \\varepsilon=\\mu*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d)\\\\ d=1*1&\\Leftrightarrow d(n)=\\sum_{d\\mid n}1\\\\ \\sigma=d*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}d\\\\ \\varphi=\\mu*\\text{ID}&\\Leftrightarrow\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d}) \\end{aligned} \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \u00b6 \u5b9a\u4e49 \u00b6 \\mu \\mu \u4e3a\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \u6027\u8d28 \u00b6 \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u4e0d\u4f46\u662f\u79ef\u6027\u51fd\u6570\uff0c\u8fd8\u6709\u5982\u4e0b\u6027\u8d28\uff1a \\mu(n)= \\begin{cases} 1&n=1\\\\ 0&n\\text{ \u542b\u6709\u5e73\u65b9\u56e0\u5b50}\\\\ (-1)^k&k\\text{ \u4e3a }n\\text{ \u7684\u672c\u8d28\u4e0d\u540c\u8d28\u56e0\u5b50\u4e2a\u6570}\\\\ \\end{cases} \\mu(n)= \\begin{cases} 1&n=1\\\\ 0&n\\text{ \u542b\u6709\u5e73\u65b9\u56e0\u5b50}\\\\ (-1)^k&k\\text{ \u4e3a }n\\text{ \u7684\u672c\u8d28\u4e0d\u540c\u8d28\u56e0\u5b50\u4e2a\u6570}\\\\ \\end{cases} \u8bc1\u660e \u00b6 \\varepsilon(n)= \\begin{cases} 1&n=1\\\\ 0&n\\neq 1\\\\ \\end{cases} \\varepsilon(n)= \\begin{cases} 1&n=1\\\\ 0&n\\neq 1\\\\ \\end{cases} \u5176\u4e2d \\displaystyle\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d) \\displaystyle\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d) \u5373 \\varepsilon=\\mu*1 \\varepsilon=\\mu*1 \u8bbe \\displaystyle n=\\prod_{i=1}^k{p_i}^{c_i},n'=\\prod_{i=1}^k p_i \\displaystyle n=\\prod_{i=1}^k{p_i}^{c_i},n'=\\prod_{i=1}^k p_i \u90a3\u4e48 \\displaystyle\\sum_{d\\mid n}\\mu(d)=\\sum_{d\\mid n'}\\mu(d)=\\sum_{i=0}^k C_k^i\\cdot(-1)^k \\displaystyle\\sum_{d\\mid n}\\mu(d)=\\sum_{d\\mid n'}\\mu(d)=\\sum_{i=0}^k C_k^i\\cdot(-1)^k \u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u6613\u77e5\u8be5\u5f0f\u5b50\u7684\u503c\u5728 k=0 k=0 \u5373 n=1 n=1 \u65f6\u503c\u4e3a 1 1 \u5426\u5219\u4e3a 0 0 \uff0c\u8fd9\u4e5f\u540c\u65f6\u8bc1\u660e\u4e86 \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1] \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1] \u8865\u5145\u7ed3\u8bba \u00b6 \u53cd\u6f14\u7ed3\u8bba\uff1a \\displaystyle [gcd(i,j)=1] \\Leftrightarrow\\sum_{d\\mid\\gcd(i,j)}\\mu(d) \\displaystyle [gcd(i,j)=1] \\Leftrightarrow\\sum_{d\\mid\\gcd(i,j)}\\mu(d) \u76f4\u63a5\u63a8\u5bfc \uff1a\u5982\u679c\u770b\u61c2\u4e86\u4e0a\u4e00\u4e2a\u7ed3\u8bba\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u7a0d\u52a0\u601d\u8003\u4fbf\u53ef\u4ee5\u63a8\u51fa\uff1a\u5982\u679c \\gcd(i,j)=1 \\gcd(i,j)=1 \u7684\u8bdd\uff0c\u90a3\u4e48\u4ee3\u8868\u7740\u6211\u4eec\u6309\u4e0a\u4e2a\u7ed3\u8bba\u4e2d\u679a\u4e3e\u7684\u90a3\u4e2a n n \u662f 1 1 \uff0c\u4e5f\u5c31\u662f\u5f0f\u5b50\u7684\u503c\u662f 1 1 \uff0c\u53cd\u4e4b\uff0c\u6709\u4e00\u4e2a\u4e0e [\\gcd(i,j)=1] [\\gcd(i,j)=1] \u76f8\u540c\u7684\u503c\uff1a 0 0 \u5229\u7528 \\varepsilon \\varepsilon \u51fd\u6570 \uff1a\u6839\u636e\u4e0a\u4e00\u7ed3\u8bba\uff0c [\\gcd(i,j)=1]\\Rightarrow \\varepsilon(\\gcd(i,j)) [\\gcd(i,j)=1]\\Rightarrow \\varepsilon(\\gcd(i,j)) \uff0c\u5c06 \\varepsilon \\varepsilon \u5c55\u5f00\u5373\u53ef\u3002 \u7ebf\u6027\u7b5b \u00b6 \u7531\u4e8e \\mu \\mu \u51fd\u6570\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u7ebf\u6027\u7b5b\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\uff08\u7ebf\u6027\u7b5b\u57fa\u672c\u53ef\u4ee5\u6c42\u6240\u6709\u7684\u79ef\u6027\u51fd\u6570\uff0c\u5c3d\u7ba1\u65b9\u6cd5\u4e0d\u5c3d\u76f8\u540c\uff09\u3002 \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void getMu () { mu [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { if ( ! flg [ i ]) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= n ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { mu [ i * p [ j ]] = 0 ; break ; } mu [ i * p [ j ]] = - mu [ i ]; } } } \u62d3\u5c55 \u00b6 \u8bc1\u660e \\varphi*1=\\text{ID}\\text{\uff08ID \u51fd\u6570\u5373 } f(x)=x\\text{\uff09} \\varphi*1=\\text{ID}\\text{\uff08ID \u51fd\u6570\u5373 } f(x)=x\\text{\uff09} \u5c06 n n \u5206\u89e3\u8d28\u56e0\u6570\uff1a \\displaystyle n=\\prod_{i=1}^k {p_i}^{c_i} \\displaystyle n=\\prod_{i=1}^k {p_i}^{c_i} \u9996\u5148\uff0c\u56e0\u4e3a \\varphi \\varphi \u662f\u79ef\u6027\u51fd\u6570\uff0c\u6545\u53ea\u8981\u8bc1\u660e\u5f53 n'=p^c n'=p^c \u65f6 \\displaystyle\\varphi*1=\\sum_{d\\mid n'}\\varphi(\\frac{n'}{d})=\\text{ID} \\displaystyle\\varphi*1=\\sum_{d\\mid n'}\\varphi(\\frac{n'}{d})=\\text{ID} \u6210\u7acb\u5373\u53ef\u3002 \u56e0\u4e3a p p \u662f\u8d28\u6570\uff0c\u4e8e\u662f d=p^0,p^1,p^2,\\cdots,p^c d=p^0,p^1,p^2,\\cdots,p^c \u6613\u77e5\u5982\u4e0b\u8fc7\u7a0b\uff1a \\begin{aligned} \\varphi*1&=\\sum_{d\\mid n}\\varphi(\\frac{n}{d})\\\\ &=\\sum_{i=0}^c\\varphi(p^i)\\\\ &=1+p^0\\cdot(p-1)+p^1\\cdot(p-1)+\\cdots+p^{c-1}\\cdot(p-1)\\\\ &=p^c\\\\ &=\\text{ID}\\\\ \\end{aligned} \\begin{aligned} \\varphi*1&=\\sum_{d\\mid n}\\varphi(\\frac{n}{d})\\\\ &=\\sum_{i=0}^c\\varphi(p^i)\\\\ &=1+p^0\\cdot(p-1)+p^1\\cdot(p-1)+\\cdots+p^{c-1}\\cdot(p-1)\\\\ &=p^c\\\\ &=\\text{ID}\\\\ \\end{aligned} \u8be5\u5f0f\u5b50\u4e24\u4fa7\u540c\u65f6\u5377 \\mu \\mu \u53ef\u5f97 \\displaystyle\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d}) \\displaystyle\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d}) \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u00b6 \u516c\u5f0f \u00b6 \u8bbe f(n),g(n) f(n),g(n) \u4e3a\u4e24\u4e2a\u6570\u8bba\u51fd\u6570\u3002 \u5982\u679c\u6709 f(n)=\\sum_{d\\mid n}g(d) f(n)=\\sum_{d\\mid n}g(d) \u90a3\u4e48\u6709 g(n)=\\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d}) g(n)=\\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d}) \u8bc1\u660e \u00b6 \u66b4\u529b\u8ba1\u7b97 \uff1a \\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d})=\\sum_{d\\mid n}\\mu(d)\\sum_{k\\mid \\frac{n}{d}}g(k)=\\sum_{k\\mid n}g(k)\\sum_{d\\mid \\frac{n}{k}}\\mu(d)=g(n) \\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d})=\\sum_{d\\mid n}\\mu(d)\\sum_{k\\mid \\frac{n}{d}}g(k)=\\sum_{k\\mid n}g(k)\\sum_{d\\mid \\frac{n}{k}}\\mu(d)=g(n) \u7528 \\displaystyle\\sum_{d\\mid n}g(d) \\displaystyle\\sum_{d\\mid n}g(d) \u6765\u66ff\u6362 f(\\dfrac{n}{d}) f(\\dfrac{n}{d}) \uff0c\u518d\u53d8\u6362\u6c42\u548c\u987a\u5e8f\u3002\u6700\u540e\u4e00\u6b65\u8f6c\u4e3a\u7684\u4f9d\u636e\uff1a \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1] \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1] \uff0c\u56e0\u6b64\u5728 \\dfrac{n}{k}=1 \\dfrac{n}{k}=1 \u65f6\u7b2c\u4e8c\u4e2a\u548c\u5f0f\u7684\u503c\u624d\u4e3a 1 1 \u3002\u6b64\u65f6 n=k n=k \uff0c\u6545\u539f\u5f0f\u7b49\u4ef7\u4e8e \\displaystyle\\sum_{k\\mid n}[n=k]\\cdot g(k)=g(n) \\displaystyle\\sum_{k\\mid n}[n=k]\\cdot g(k)=g(n) \u8fd0\u7528\u5377\u79ef \uff1a \u539f\u95ee\u9898\u4e3a\uff1a\u5df2\u77e5 f=g*1 f=g*1 \uff0c\u8bc1\u660e g=f*\\mu g=f*\\mu \u6613\u77e5\u5982\u4e0b\u8f6c\u5316\uff1a f*\\mu=g*1*\\mu\\Rightarrow f*\\mu=g f*\\mu=g*1*\\mu\\Rightarrow f*\\mu=g \uff08\u5176\u4e2d 1*\\mu=\\varepsilon 1*\\mu=\\varepsilon \uff09 \u95ee\u9898\u5f62\u5f0f \u00b6 \u300cHAOI 2011\u300dProblem b \u00b6 \u6c42\u503c\uff08\u591a\u7ec4\u6570\u636e\uff09 \\sum_{i=x}^{n}\\sum_{j=y}^{m}[\\gcd(i,j)=k]\\qquad (1\\leqslant T,x,y,n,m,k\\leqslant 5\\times 10^4) \\sum_{i=x}^{n}\\sum_{j=y}^{m}[\\gcd(i,j)=k]\\qquad (1\\leqslant T,x,y,n,m,k\\leqslant 5\\times 10^4) \u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u539f\u5f0f\u53ef\u4ee5\u5206\u6210 4 4 \u5757\u6765\u5904\u7406\uff0c\u6bcf\u4e00\u5757\u7684\u5f0f\u5b50\u90fd\u4e3a \\sum_{i=1}^{n}\\sum_{j=1}^{m}[\\gcd(i,j)=k] \\sum_{i=1}^{n}\\sum_{j=1}^{m}[\\gcd(i,j)=k] \u8003\u8651\u5316\u7b80\u8be5\u5f0f\u5b50 \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}[\\gcd(i,j)=1] \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}[\\gcd(i,j)=1] \u56e0\u4e3a \\gcd(i,j)=1 \\gcd(i,j)=1 \u65f6\u5bf9\u7b54\u6848\u624d\u7528\u8d21\u732e\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u66ff\u6362\u4e3a \\varepsilon(\\gcd(i,j)) \\varepsilon(\\gcd(i,j)) \uff08 \\varepsilon(n) \\varepsilon(n) \u5f53\u4e14\u4ec5\u5f53 n=1 n=1 \u65f6\u503c\u4e3a 1 1 \u5426\u5219\u4e3a 0 0 \uff09\uff0c\u6545\u539f\u5f0f\u5316\u4e3a \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\varepsilon(\\gcd(i,j)) \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\varepsilon(\\gcd(i,j)) \u5c06 \\varepsilon \\varepsilon \u51fd\u6570\u5c55\u5f00\u5f97\u5230 \\displaystyle\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\sum_{d\\mid \\gcd(i,j)}\\mu(d) \\displaystyle\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\sum_{d\\mid \\gcd(i,j)}\\mu(d) \u53d8\u6362\u6c42\u548c\u987a\u5e8f\uff0c\u5148\u679a\u4e3e d\\mid gcd(i,j) d\\mid gcd(i,j) \u53ef\u5f97 \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d)\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}d\\mid i\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}d\\mid j \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d)\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}d\\mid i\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}d\\mid j \uff08\u5176\u4e2d d\\mid i d\\mid i \u8868\u793a i i \u662f d d \u7684\u500d\u6570\u65f6\u5bf9\u7b54\u6848\u6709 1 1 \u7684\u8d21\u732e\uff09 \u6613\u77e5 1\\sim\\lfloor\\dfrac{n}{k}\\rfloor 1\\sim\\lfloor\\dfrac{n}{k}\\rfloor \u4e2d d d \u7684\u500d\u6570\u6709 \\lfloor\\dfrac{n}{kd}\\rfloor \\lfloor\\dfrac{n}{kd}\\rfloor \u4e2a\uff0c\u6545\u539f\u5f0f\u5316\u4e3a \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d) \\lfloor\\frac{n}{kd}\\rfloor\\lfloor\\frac{m}{kd}\\rfloor \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d) \\lfloor\\frac{n}{kd}\\rfloor\\lfloor\\frac{m}{kd}\\rfloor \u5f88\u663e\u7136\uff0c\u5f0f\u5b50\u53ef\u4ee5\u6570\u8bba\u5206\u5757\u6c42\u89e3\uff08\u6ce8\u610f\uff1a\u8fc7\u7a0b\u4e2d\u9ed8\u8ba4 n\\leqslant m n\\leqslant m \uff09\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \\Theta(N+T\\sqrt{n}) \\Theta(N+T\\sqrt{n}) \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <algorithm> #include <cstdio> const int N = 50000 ; int mu [ N + 5 ], p [ N + 5 ]; bool flg [ N + 5 ]; void init () { int tot = 0 ; mu [ 1 ] = 1 ; for ( int i = 2 ; i <= N ; ++ i ) { if ( ! flg [ i ]) { p [ ++ tot ] = i ; mu [ i ] = - 1 ; } for ( int j = 1 ; j <= tot && i * p [ j ] <= N ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { mu [ i * p [ j ]] = 0 ; break ; } mu [ i * p [ j ]] = - mu [ i ]; } } for ( int i = 1 ; i <= N ; ++ i ) mu [ i ] += mu [ i - 1 ]; } int solve ( int n , int m ) { int res = 0 ; for ( int i = 1 , j ; i <= std :: min ( n , m ); i = j + 1 ) { j = std :: min ( n / ( n / i ), m / ( m / i )); res += ( mu [ j ] - mu [ i - 1 ]) * ( n / i ) * ( m / i ); } return res ; } int main () { int T , a , b , c , d , k ; init (); for ( scanf ( \"%d\" , & T ); T ; -- T ) { scanf ( \"%d%d%d%d%d\" , & a , & b , & c , & d , & k ); printf ( \"%d \\n \" , solve ( b / k , d / k ) - solve ( b / k , ( c - 1 ) / k ) - solve (( a - 1 ) / k , d / k ) + solve (( a - 1 ) / k , ( c - 1 ) / k )); } return 0 ; } \u300cSPOJ 5971\u300dLCMSUM \u00b6 \u6c42\u503c\uff08\u591a\u7ec4\u6570\u636e\uff09 \\sum_{i=1}^n \\text{lcm}(i,n)\\qquad (1\\leqslant T\\leqslant 3\\times 10^5,1\\leqslant n\\leqslant 10^6) \\sum_{i=1}^n \\text{lcm}(i,n)\\qquad (1\\leqslant T\\leqslant 3\\times 10^5,1\\leqslant n\\leqslant 10^6) \u6613\u5f97\u539f\u5f0f\u5373 \\sum_{i=1}^n \\frac{i\\cdot n}{\\gcd(i,n)} \\sum_{i=1}^n \\frac{i\\cdot n}{\\gcd(i,n)} \u6839\u636e \\gcd(a,n)=1 \\gcd(a,n)=1 \u65f6\u4e00\u5b9a\u6709 \\gcd(n-a,n)=1 \\gcd(n-a,n)=1 \uff0c\u53ef\u5c06\u539f\u5f0f\u5316\u4e3a \\frac{1}{2}\\cdot(\\sum_{i=1}^{n-1}\\frac{i\\cdot n}{\\gcd(i,n)}+\\sum_{i=n-1}^{1}\\frac{i\\cdot n}{\\gcd(i,n)})+n \\frac{1}{2}\\cdot(\\sum_{i=1}^{n-1}\\frac{i\\cdot n}{\\gcd(i,n)}+\\sum_{i=n-1}^{1}\\frac{i\\cdot n}{\\gcd(i,n)})+n \u4e0a\u8ff0\u5f0f\u5b50\u4e2d\u62ec\u53f7\u5185\u7684\u4e24\u4e2a \\sum \\sum \u5bf9\u5e94\u7684\u9879\u76f8\u7b49\uff0c\u6545\u53c8\u53ef\u4ee5\u5316\u4e3a \\frac{1}{2}\\cdot \\sum_{i=1}^{n-1}\\frac{n^2}{\\gcd(i,n)}+n \\frac{1}{2}\\cdot \\sum_{i=1}^{n-1}\\frac{n^2}{\\gcd(i,n)}+n \u53ef\u4ee5\u5c06\u76f8\u540c\u7684 \\gcd(i,n) \\gcd(i,n) \u5408\u5e76\u5728\u4e00\u8d77\u8ba1\u7b97\uff0c\u6545\u53ea\u9700\u8981\u7edf\u8ba1 \\gcd(i,n)=d \\gcd(i,n)=d \u7684\u4e2a\u6570\u3002\u5f53 \\gcd(i,n)=d \\gcd(i,n)=d \u65f6\uff0c \\displaystyle\\gcd(\\frac{i}{d},\\frac{n}{d})=1 \\displaystyle\\gcd(\\frac{i}{d},\\frac{n}{d})=1 \uff0c\u6240\u4ee5 \\gcd(i,n)=d \\gcd(i,n)=d \u7684\u4e2a\u6570\u6709 \\displaystyle\\varphi(\\frac{n}{d}) \\displaystyle\\varphi(\\frac{n}{d}) \u4e2a\u3002 \u6545\u7b54\u6848\u4e3a \\frac{1}{2}\\cdot\\sum_{d\\mid n}\\frac{n^2\\cdot\\varphi(\\frac{n}{d})}{d}+n \\frac{1}{2}\\cdot\\sum_{d\\mid n}\\frac{n^2\\cdot\\varphi(\\frac{n}{d})}{d}+n \u53d8\u6362\u6c42\u548c\u987a\u5e8f\uff0c\u8bbe \\displaystyle d'=\\frac{n}{d} \\displaystyle d'=\\frac{n}{d} \uff0c\u5f0f\u5b50\u5316\u4e3a \\frac{1}{2}n\\cdot\\sum_{d'\\mid n}d'\\cdot\\varphi(d')+n \\frac{1}{2}n\\cdot\\sum_{d'\\mid n}d'\\cdot\\varphi(d')+n \u8bbe \\displaystyle \\text{g}(n)=\\sum_{d\\mid n} d\\cdot\\varphi(d) \\displaystyle \\text{g}(n)=\\sum_{d\\mid n} d\\cdot\\varphi(d) \uff0c\u5df2\u77e5 \\text{g} \\text{g} \u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u4e8e\u662f\u53ef\u4ee5 \\Theta(n) \\Theta(n) \u9884\u5904\u7406\u3002\u6700\u540e\u679a\u4e3e d d \uff0c\u7edf\u8ba1\u8d21\u732e\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \\Theta(n\\log n) \\Theta(n\\log n) \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <cstdio> const int N = 1000000 ; int tot , p [ N + 5 ], phi [ N + 5 ]; long long ans [ N + 5 ]; bool flg [ N + 5 ]; void solve () { phi [ 1 ] = 1 ; for ( int i = 2 ; i <= N ; ++ i ) { if ( ! flg [ i ]) p [ ++ tot ] = i , phi [ i ] = i - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= N ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { phi [ i * p [ j ]] = phi [ i ] * p [ j ]; break ; } phi [ i * p [ j ]] = phi [ i ] * ( p [ j ] - 1 ); } } for ( int i = 1 ; i <= N ; ++ i ) { for ( int j = 1 ; i * j <= N ; ++ j ) { ans [ i * j ] += 1LL * j * phi [ j ] / 2 ; } } for ( int i = 1 ; i <= N ; ++ i ) ans [ i ] = 1LL * i * ans [ i ] + i ; } int main () { int T , n ; solve (); for ( scanf ( \"%d\" , & T ); T ; -- T ) { scanf ( \"%d\" , & n ); printf ( \"%lld \\n \" , ans [ n ]); } return 0 ; } \u300cBZOJ 2154\u300dCrash \u7684\u6570\u5b57\u8868\u683c \u00b6 \u6c42\u503c\uff08\u5bf9 20101009 20101009 \u53d6\u6a21\uff09 \\sum_{i=1}^n\\sum_{j=1}^m\\text{lcm}(i,j)\\qquad (n,m\\leqslant 10^7) \\sum_{i=1}^n\\sum_{j=1}^m\\text{lcm}(i,j)\\qquad (n,m\\leqslant 10^7) \u6613\u77e5\u539f\u5f0f\u7b49\u4ef7\u4e8e \\sum_{i=1}^n\\sum_{j=1}^m\\frac{i\\cdot j}{\\gcd(i,j)} \\sum_{i=1}^n\\sum_{j=1}^m\\frac{i\\cdot j}{\\gcd(i,j)} \u679a\u4e3e\u6700\u5927\u516c\u56e0\u6570 d d \uff0c\u663e\u7136\u4e24\u4e2a\u6570\u9664\u4ee5 d d \u5f97\u5230\u7684\u6570\u4e92\u8d28 \\sum_{i=1}^n\\sum_{j=1}^m\\sum_{d\\mid i,d\\mid j,\\gcd(\\frac{i}{d},\\frac{j}{d})=1}\\frac{i\\cdot j}{d} \\sum_{i=1}^n\\sum_{j=1}^m\\sum_{d\\mid i,d\\mid j,\\gcd(\\frac{i}{d},\\frac{j}{d})=1}\\frac{i\\cdot j}{d} \u975e\u5e38\u7ecf\u5178\u7684 \\gcd \\gcd \u5f0f\u5b50\u7684\u5316\u6cd5 \\sum_{d=1}^n d\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}[\\gcd(i,j)=1]\\ i\\cdot j \\sum_{d=1}^n d\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}[\\gcd(i,j)=1]\\ i\\cdot j \u540e\u534a\u6bb5\u5f0f\u5b50\u4e2d\uff0c\u51fa\u73b0\u4e86\u4e92\u8d28\u6570\u5bf9\u4e4b\u79ef\u7684\u548c\uff0c\u4e3a\u4e86\u8ba9\u5f0f\u5b50\u66f4\u7b80\u6d01\u5c31\u628a\u5b83\u62ff\u51fa\u6765\u5355\u72ec\u8ba1\u7b97\u3002\u4e8e\u662f\u6211\u4eec\u8bb0 \\text{sum}(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m [\\gcd(i,j)=1]\\ i\\cdot j \\text{sum}(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m [\\gcd(i,j)=1]\\ i\\cdot j \u63a5\u4e0b\u6765\u5bf9 \\text{sum}(n,m) \\text{sum}(n,m) \u8fdb\u884c\u5316\u7b80\u3002\u9996\u5148\u679a\u4e3e\u7ea6\u6570\uff0c\u5e76\u5c06 [\\gcd(i,j)=1] [\\gcd(i,j)=1] \u8868\u793a\u4e3a \\varepsilon(\\gcd(i,j)) \\varepsilon(\\gcd(i,j)) \\sum_{d=1}^n\\sum_{d\\mid i}^n\\sum_{d\\mid j}^m\\mu(d)\\cdot i\\cdot j \\sum_{d=1}^n\\sum_{d\\mid i}^n\\sum_{d\\mid j}^m\\mu(d)\\cdot i\\cdot j \u8bbe i=i'\\cdot d i=i'\\cdot d \uff0c j=j'\\cdot d j=j'\\cdot d \uff0c\u663e\u7136\u5f0f\u5b50\u53ef\u4ee5\u53d8\u4e3a \\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}i\\cdot j \\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}i\\cdot j \u89c2\u5bdf\u4e0a\u5f0f\uff0c\u524d\u534a\u6bb5\u53ef\u4ee5\u9884\u5904\u7406\u524d\u7f00\u548c\uff1b\u540e\u534a\u6bb5\u53c8\u662f\u4e00\u4e2a\u8303\u56f4\u5185\u6570\u5bf9\u4e4b\u548c\uff0c\u8bb0 g(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m i\\cdot j=\\frac{n\\cdot(n+1)}{2}\\times\\frac{m\\cdot(m+1)}{2} g(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m i\\cdot j=\\frac{n\\cdot(n+1)}{2}\\times\\frac{m\\cdot(m+1)}{2} \u53ef\u4ee5 \\Theta(1) \\Theta(1) \u6c42\u89e3 \u81f3\u6b64 \\text{sum}(n,m)=\\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot g(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \\text{sum}(n,m)=\\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot g(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \u6211\u4eec\u53ef\u4ee5 \\lfloor\\frac{n}{\\lfloor\\frac{n}{d}\\rfloor}\\rfloor \\lfloor\\frac{n}{\\lfloor\\frac{n}{d}\\rfloor}\\rfloor \u6570\u8bba\u5206\u5757\u6c42\u89e3 \\text{sum}(n,m) \\text{sum}(n,m) \u51fd\u6570\u3002 \u5728\u6c42\u51fa \\text{sum}(n,m) \\text{sum}(n,m) \u540e\uff0c\u56de\u5230\u5b9a\u4e49 \\text{sum} \\text{sum} \u7684\u5730\u65b9\uff0c\u53ef\u5f97\u539f\u5f0f\u4e3a \\sum_{d=1}^n d\\cdot\\text{sum}(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \\sum_{d=1}^n d\\cdot\\text{sum}(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \u53ef\u89c1\u8fd9\u53c8\u662f\u4e00\u4e2a\u53ef\u4ee5\u6570\u8bba\u5206\u5757\u6c42\u89e3\u7684\u5f0f\u5b50\uff01 \u672c\u9898\u9664\u4e86\u63a8\u5f0f\u5b50\u6bd4\u8f83\u590d\u6742\u3001\u4ee3\u7801\u7ec6\u8282\u8f83\u591a\u4e4b\u5916\uff0c\u662f\u4e00\u9053\u5f88\u597d\u7684\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7ec3\u4e60\u9898\uff01\uff08\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\uff0c\u9ed8\u8ba4 n\\leqslant m n\\leqslant m \uff09 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \\Theta(n+m) \\Theta(n+m) \uff08\u4e24\u6b21\u6570\u8bba\u5206\u5757\uff09 \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <algorithm> #include <cstdio> using std :: min ; const int N = 1e7 ; const int mod = 20101009 ; int n , m , mu [ N + 5 ], p [ N / 10 + 5 ], sum [ N + 5 ]; bool flg [ N + 5 ]; void init () { mu [ 1 ] = 1 ; int tot = 0 , k = min ( n , m ); for ( int i = 2 ; i <= k ; ++ i ) { if ( ! flg [ i ]) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= k ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { mu [ i * p [ j ]] = 0 ; break ; } mu [ i * p [ j ]] = - mu [ i ]; } } for ( int i = 1 ; i <= k ; ++ i ) sum [ i ] = ( sum [ i - 1 ] + 1LL * i * i % mod * ( mu [ i ] + mod )) % mod ; } int Sum ( int x , int y ) { return ( 1LL * x * ( x + 1 ) / 2 % mod ) * ( 1LL * y * ( y + 1 ) / 2 % mod ) % mod ; } int func ( int x , int y ) { int res = 0 ; for ( int i = 1 , j ; i <= min ( x , y ); i = j + 1 ) { j = min ( x / ( x / i ), y / ( y / i )); res = ( res + 1LL * ( sum [ j ] - sum [ i - 1 ] + mod ) * Sum ( x / i , y / i ) % mod ) % mod ; } return res ; } int solve ( int x , int y ) { int res = 0 ; for ( int i = 1 , j ; i <= min ( x , y ); i = j + 1 ) { j = min ( x / ( x / i ), y / ( y / i )); res = ( res + 1LL * ( j - i + 1 ) * ( i + j ) / 2 % mod * func ( x / i , y / i ) % mod ) % mod ; } return res ; } int main () { scanf ( \"%d%d\" , & n , & m ); init (); printf ( \"%d \\n \" , solve ( n , m )); } \u672c\u6587\u90e8\u5206\u5185\u5bb9\u5f15\u7528\u4e8e algocode \u7b97\u6cd5\u535a\u5ba2 \uff0c\u7279\u522b\u9e23\u8c22\uff01","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"math/mobius/#_1","text":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u662f\u6570\u8bba\u4e2d\u7684\u91cd\u8981\u5185\u5bb9\u3002\u5bf9\u4e8e\u4e00\u4e9b\u51fd\u6570 f(n) f(n) \uff0c\u5982\u679c\u5f88\u96be\u76f4\u63a5\u6c42\u51fa\u5b83\u7684\u503c\uff0c\u800c\u5bb9\u6613\u6c42\u51fa\u5176\u500d\u6570\u548c\u6216\u7ea6\u6570\u548c g(n) g(n) \uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7b80\u5316\u8fd0\u7b97\uff0c\u6c42\u5f97 f(n) f(n) \u7684\u503c\u3002 \u5f00\u59cb\u5b66\u4e60\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u524d\u7f6e\u77e5\u8bc6\uff1a \u79ef\u6027\u51fd\u6570 \u3001 Dirichlet \u5377\u79ef \u3001 \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \u3002","title":"\u7b80\u4ecb"},{"location":"math/mobius/#_2","text":"","title":"\u79ef\u6027\u51fd\u6570"},{"location":"math/mobius/#_3","text":"\u82e5 \\gcd(x,y)=1 \\gcd(x,y)=1 \u4e14 f(xy)=f(x)f(y) f(xy)=f(x)f(y) \uff0c\u5219 f(n) f(n) \u4e3a\u79ef\u6027\u51fd\u6570\u3002","title":"\u5b9a\u4e49"},{"location":"math/mobius/#_4","text":"\u82e5 f(x) f(x) \u548c g(x) g(x) \u5747\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u5219\u4ee5\u4e0b\u51fd\u6570\u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\uff1a \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned} \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned}","title":"\u6027\u8d28"},{"location":"math/mobius/#_5","text":"\\qquad\\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1\\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d\\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k\\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1]\\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k &c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \\end{array} \\qquad\\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1\\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d\\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k\\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1]\\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k &c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \\end{array}","title":"\u4f8b\u5b50"},{"location":"math/mobius/#dirichlet","text":"","title":"Dirichlet \u5377\u79ef"},{"location":"math/mobius/#_6","text":"\u5b9a\u4e49\u4e24\u4e2a\u6570\u8bba\u51fd\u6570 f,g f,g \u7684 \\text{Dirichlet} \\text{Dirichlet} \u5377\u79ef\u4e3a (f*g)(n)=\\sum_{d\\mid n}f(d)g(\\frac{n}{d}) (f*g)(n)=\\sum_{d\\mid n}f(d)g(\\frac{n}{d})","title":"\u5b9a\u4e49"},{"location":"math/mobius/#_7","text":"\\text{Dirichlet} \\text{Dirichlet} \u5377\u79ef\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\u3002 \u5176\u4e2d \\varepsilon \\varepsilon \u4e3a \\text{Dirichlet} \\text{Dirichlet} \u5377\u79ef\u7684\u5355\u4f4d\u5143\uff08\u4efb\u4f55\u51fd\u6570\u5377 \\varepsilon \\varepsilon \u90fd\u4e3a\u5176\u672c\u8eab\uff09","title":"\u6027\u8d28"},{"location":"math/mobius/#_8","text":"\\begin{aligned} \\varepsilon=\\mu*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d)\\\\ d=1*1&\\Leftrightarrow d(n)=\\sum_{d\\mid n}1\\\\ \\sigma=d*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}d\\\\ \\varphi=\\mu*\\text{ID}&\\Leftrightarrow\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d}) \\end{aligned} \\begin{aligned} \\varepsilon=\\mu*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d)\\\\ d=1*1&\\Leftrightarrow d(n)=\\sum_{d\\mid n}1\\\\ \\sigma=d*1&\\Leftrightarrow\\varepsilon(n)=\\sum_{d\\mid n}d\\\\ \\varphi=\\mu*\\text{ID}&\\Leftrightarrow\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d}) \\end{aligned}","title":"\u4f8b\u5b50"},{"location":"math/mobius/#_9","text":"","title":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570"},{"location":"math/mobius/#_10","text":"\\mu \\mu \u4e3a\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","title":"\u5b9a\u4e49"},{"location":"math/mobius/#_11","text":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u4e0d\u4f46\u662f\u79ef\u6027\u51fd\u6570\uff0c\u8fd8\u6709\u5982\u4e0b\u6027\u8d28\uff1a \\mu(n)= \\begin{cases} 1&n=1\\\\ 0&n\\text{ \u542b\u6709\u5e73\u65b9\u56e0\u5b50}\\\\ (-1)^k&k\\text{ \u4e3a }n\\text{ \u7684\u672c\u8d28\u4e0d\u540c\u8d28\u56e0\u5b50\u4e2a\u6570}\\\\ \\end{cases} \\mu(n)= \\begin{cases} 1&n=1\\\\ 0&n\\text{ \u542b\u6709\u5e73\u65b9\u56e0\u5b50}\\\\ (-1)^k&k\\text{ \u4e3a }n\\text{ \u7684\u672c\u8d28\u4e0d\u540c\u8d28\u56e0\u5b50\u4e2a\u6570}\\\\ \\end{cases}","title":"\u6027\u8d28"},{"location":"math/mobius/#_12","text":"\\varepsilon(n)= \\begin{cases} 1&n=1\\\\ 0&n\\neq 1\\\\ \\end{cases} \\varepsilon(n)= \\begin{cases} 1&n=1\\\\ 0&n\\neq 1\\\\ \\end{cases} \u5176\u4e2d \\displaystyle\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d) \\displaystyle\\varepsilon(n)=\\sum_{d\\mid n}\\mu(d) \u5373 \\varepsilon=\\mu*1 \\varepsilon=\\mu*1 \u8bbe \\displaystyle n=\\prod_{i=1}^k{p_i}^{c_i},n'=\\prod_{i=1}^k p_i \\displaystyle n=\\prod_{i=1}^k{p_i}^{c_i},n'=\\prod_{i=1}^k p_i \u90a3\u4e48 \\displaystyle\\sum_{d\\mid n}\\mu(d)=\\sum_{d\\mid n'}\\mu(d)=\\sum_{i=0}^k C_k^i\\cdot(-1)^k \\displaystyle\\sum_{d\\mid n}\\mu(d)=\\sum_{d\\mid n'}\\mu(d)=\\sum_{i=0}^k C_k^i\\cdot(-1)^k \u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u6613\u77e5\u8be5\u5f0f\u5b50\u7684\u503c\u5728 k=0 k=0 \u5373 n=1 n=1 \u65f6\u503c\u4e3a 1 1 \u5426\u5219\u4e3a 0 0 \uff0c\u8fd9\u4e5f\u540c\u65f6\u8bc1\u660e\u4e86 \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1] \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1]","title":"\u8bc1\u660e"},{"location":"math/mobius/#_13","text":"\u53cd\u6f14\u7ed3\u8bba\uff1a \\displaystyle [gcd(i,j)=1] \\Leftrightarrow\\sum_{d\\mid\\gcd(i,j)}\\mu(d) \\displaystyle [gcd(i,j)=1] \\Leftrightarrow\\sum_{d\\mid\\gcd(i,j)}\\mu(d) \u76f4\u63a5\u63a8\u5bfc \uff1a\u5982\u679c\u770b\u61c2\u4e86\u4e0a\u4e00\u4e2a\u7ed3\u8bba\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u7a0d\u52a0\u601d\u8003\u4fbf\u53ef\u4ee5\u63a8\u51fa\uff1a\u5982\u679c \\gcd(i,j)=1 \\gcd(i,j)=1 \u7684\u8bdd\uff0c\u90a3\u4e48\u4ee3\u8868\u7740\u6211\u4eec\u6309\u4e0a\u4e2a\u7ed3\u8bba\u4e2d\u679a\u4e3e\u7684\u90a3\u4e2a n n \u662f 1 1 \uff0c\u4e5f\u5c31\u662f\u5f0f\u5b50\u7684\u503c\u662f 1 1 \uff0c\u53cd\u4e4b\uff0c\u6709\u4e00\u4e2a\u4e0e [\\gcd(i,j)=1] [\\gcd(i,j)=1] \u76f8\u540c\u7684\u503c\uff1a 0 0 \u5229\u7528 \\varepsilon \\varepsilon \u51fd\u6570 \uff1a\u6839\u636e\u4e0a\u4e00\u7ed3\u8bba\uff0c [\\gcd(i,j)=1]\\Rightarrow \\varepsilon(\\gcd(i,j)) [\\gcd(i,j)=1]\\Rightarrow \\varepsilon(\\gcd(i,j)) \uff0c\u5c06 \\varepsilon \\varepsilon \u5c55\u5f00\u5373\u53ef\u3002","title":"\u8865\u5145\u7ed3\u8bba"},{"location":"math/mobius/#_14","text":"\u7531\u4e8e \\mu \\mu \u51fd\u6570\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u7ebf\u6027\u7b5b\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\uff08\u7ebf\u6027\u7b5b\u57fa\u672c\u53ef\u4ee5\u6c42\u6240\u6709\u7684\u79ef\u6027\u51fd\u6570\uff0c\u5c3d\u7ba1\u65b9\u6cd5\u4e0d\u5c3d\u76f8\u540c\uff09\u3002 \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void getMu () { mu [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { if ( ! flg [ i ]) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= n ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { mu [ i * p [ j ]] = 0 ; break ; } mu [ i * p [ j ]] = - mu [ i ]; } } }","title":"\u7ebf\u6027\u7b5b"},{"location":"math/mobius/#_15","text":"\u8bc1\u660e \\varphi*1=\\text{ID}\\text{\uff08ID \u51fd\u6570\u5373 } f(x)=x\\text{\uff09} \\varphi*1=\\text{ID}\\text{\uff08ID \u51fd\u6570\u5373 } f(x)=x\\text{\uff09} \u5c06 n n \u5206\u89e3\u8d28\u56e0\u6570\uff1a \\displaystyle n=\\prod_{i=1}^k {p_i}^{c_i} \\displaystyle n=\\prod_{i=1}^k {p_i}^{c_i} \u9996\u5148\uff0c\u56e0\u4e3a \\varphi \\varphi \u662f\u79ef\u6027\u51fd\u6570\uff0c\u6545\u53ea\u8981\u8bc1\u660e\u5f53 n'=p^c n'=p^c \u65f6 \\displaystyle\\varphi*1=\\sum_{d\\mid n'}\\varphi(\\frac{n'}{d})=\\text{ID} \\displaystyle\\varphi*1=\\sum_{d\\mid n'}\\varphi(\\frac{n'}{d})=\\text{ID} \u6210\u7acb\u5373\u53ef\u3002 \u56e0\u4e3a p p \u662f\u8d28\u6570\uff0c\u4e8e\u662f d=p^0,p^1,p^2,\\cdots,p^c d=p^0,p^1,p^2,\\cdots,p^c \u6613\u77e5\u5982\u4e0b\u8fc7\u7a0b\uff1a \\begin{aligned} \\varphi*1&=\\sum_{d\\mid n}\\varphi(\\frac{n}{d})\\\\ &=\\sum_{i=0}^c\\varphi(p^i)\\\\ &=1+p^0\\cdot(p-1)+p^1\\cdot(p-1)+\\cdots+p^{c-1}\\cdot(p-1)\\\\ &=p^c\\\\ &=\\text{ID}\\\\ \\end{aligned} \\begin{aligned} \\varphi*1&=\\sum_{d\\mid n}\\varphi(\\frac{n}{d})\\\\ &=\\sum_{i=0}^c\\varphi(p^i)\\\\ &=1+p^0\\cdot(p-1)+p^1\\cdot(p-1)+\\cdots+p^{c-1}\\cdot(p-1)\\\\ &=p^c\\\\ &=\\text{ID}\\\\ \\end{aligned} \u8be5\u5f0f\u5b50\u4e24\u4fa7\u540c\u65f6\u5377 \\mu \\mu \u53ef\u5f97 \\displaystyle\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d}) \\displaystyle\\varphi(n)=\\sum_{d\\mid n}d\\cdot\\mu(\\frac{n}{d})","title":"\u62d3\u5c55"},{"location":"math/mobius/#_16","text":"","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"math/mobius/#_17","text":"\u8bbe f(n),g(n) f(n),g(n) \u4e3a\u4e24\u4e2a\u6570\u8bba\u51fd\u6570\u3002 \u5982\u679c\u6709 f(n)=\\sum_{d\\mid n}g(d) f(n)=\\sum_{d\\mid n}g(d) \u90a3\u4e48\u6709 g(n)=\\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d}) g(n)=\\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d})","title":"\u516c\u5f0f"},{"location":"math/mobius/#_18","text":"\u66b4\u529b\u8ba1\u7b97 \uff1a \\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d})=\\sum_{d\\mid n}\\mu(d)\\sum_{k\\mid \\frac{n}{d}}g(k)=\\sum_{k\\mid n}g(k)\\sum_{d\\mid \\frac{n}{k}}\\mu(d)=g(n) \\sum_{d\\mid n}\\mu(d)f(\\frac{n}{d})=\\sum_{d\\mid n}\\mu(d)\\sum_{k\\mid \\frac{n}{d}}g(k)=\\sum_{k\\mid n}g(k)\\sum_{d\\mid \\frac{n}{k}}\\mu(d)=g(n) \u7528 \\displaystyle\\sum_{d\\mid n}g(d) \\displaystyle\\sum_{d\\mid n}g(d) \u6765\u66ff\u6362 f(\\dfrac{n}{d}) f(\\dfrac{n}{d}) \uff0c\u518d\u53d8\u6362\u6c42\u548c\u987a\u5e8f\u3002\u6700\u540e\u4e00\u6b65\u8f6c\u4e3a\u7684\u4f9d\u636e\uff1a \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1] \\displaystyle\\sum_{d\\mid n}\\mu(d)=[n=1] \uff0c\u56e0\u6b64\u5728 \\dfrac{n}{k}=1 \\dfrac{n}{k}=1 \u65f6\u7b2c\u4e8c\u4e2a\u548c\u5f0f\u7684\u503c\u624d\u4e3a 1 1 \u3002\u6b64\u65f6 n=k n=k \uff0c\u6545\u539f\u5f0f\u7b49\u4ef7\u4e8e \\displaystyle\\sum_{k\\mid n}[n=k]\\cdot g(k)=g(n) \\displaystyle\\sum_{k\\mid n}[n=k]\\cdot g(k)=g(n) \u8fd0\u7528\u5377\u79ef \uff1a \u539f\u95ee\u9898\u4e3a\uff1a\u5df2\u77e5 f=g*1 f=g*1 \uff0c\u8bc1\u660e g=f*\\mu g=f*\\mu \u6613\u77e5\u5982\u4e0b\u8f6c\u5316\uff1a f*\\mu=g*1*\\mu\\Rightarrow f*\\mu=g f*\\mu=g*1*\\mu\\Rightarrow f*\\mu=g \uff08\u5176\u4e2d 1*\\mu=\\varepsilon 1*\\mu=\\varepsilon \uff09","title":"\u8bc1\u660e"},{"location":"math/mobius/#_19","text":"","title":"\u95ee\u9898\u5f62\u5f0f"},{"location":"math/mobius/#haoi-2011problem-b","text":"\u6c42\u503c\uff08\u591a\u7ec4\u6570\u636e\uff09 \\sum_{i=x}^{n}\\sum_{j=y}^{m}[\\gcd(i,j)=k]\\qquad (1\\leqslant T,x,y,n,m,k\\leqslant 5\\times 10^4) \\sum_{i=x}^{n}\\sum_{j=y}^{m}[\\gcd(i,j)=k]\\qquad (1\\leqslant T,x,y,n,m,k\\leqslant 5\\times 10^4) \u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u539f\u5f0f\u53ef\u4ee5\u5206\u6210 4 4 \u5757\u6765\u5904\u7406\uff0c\u6bcf\u4e00\u5757\u7684\u5f0f\u5b50\u90fd\u4e3a \\sum_{i=1}^{n}\\sum_{j=1}^{m}[\\gcd(i,j)=k] \\sum_{i=1}^{n}\\sum_{j=1}^{m}[\\gcd(i,j)=k] \u8003\u8651\u5316\u7b80\u8be5\u5f0f\u5b50 \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}[\\gcd(i,j)=1] \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}[\\gcd(i,j)=1] \u56e0\u4e3a \\gcd(i,j)=1 \\gcd(i,j)=1 \u65f6\u5bf9\u7b54\u6848\u624d\u7528\u8d21\u732e\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u66ff\u6362\u4e3a \\varepsilon(\\gcd(i,j)) \\varepsilon(\\gcd(i,j)) \uff08 \\varepsilon(n) \\varepsilon(n) \u5f53\u4e14\u4ec5\u5f53 n=1 n=1 \u65f6\u503c\u4e3a 1 1 \u5426\u5219\u4e3a 0 0 \uff09\uff0c\u6545\u539f\u5f0f\u5316\u4e3a \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\varepsilon(\\gcd(i,j)) \\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\varepsilon(\\gcd(i,j)) \u5c06 \\varepsilon \\varepsilon \u51fd\u6570\u5c55\u5f00\u5f97\u5230 \\displaystyle\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\sum_{d\\mid \\gcd(i,j)}\\mu(d) \\displaystyle\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\sum_{d\\mid \\gcd(i,j)}\\mu(d) \u53d8\u6362\u6c42\u548c\u987a\u5e8f\uff0c\u5148\u679a\u4e3e d\\mid gcd(i,j) d\\mid gcd(i,j) \u53ef\u5f97 \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d)\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}d\\mid i\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}d\\mid j \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d)\\sum_{i=1}^{\\lfloor\\frac{n}{k}\\rfloor}d\\mid i\\sum_{j=1}^{\\lfloor\\frac{m}{k}\\rfloor}d\\mid j \uff08\u5176\u4e2d d\\mid i d\\mid i \u8868\u793a i i \u662f d d \u7684\u500d\u6570\u65f6\u5bf9\u7b54\u6848\u6709 1 1 \u7684\u8d21\u732e\uff09 \u6613\u77e5 1\\sim\\lfloor\\dfrac{n}{k}\\rfloor 1\\sim\\lfloor\\dfrac{n}{k}\\rfloor \u4e2d d d \u7684\u500d\u6570\u6709 \\lfloor\\dfrac{n}{kd}\\rfloor \\lfloor\\dfrac{n}{kd}\\rfloor \u4e2a\uff0c\u6545\u539f\u5f0f\u5316\u4e3a \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d) \\lfloor\\frac{n}{kd}\\rfloor\\lfloor\\frac{m}{kd}\\rfloor \\displaystyle\\sum_{d=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\mu(d) \\lfloor\\frac{n}{kd}\\rfloor\\lfloor\\frac{m}{kd}\\rfloor \u5f88\u663e\u7136\uff0c\u5f0f\u5b50\u53ef\u4ee5\u6570\u8bba\u5206\u5757\u6c42\u89e3\uff08\u6ce8\u610f\uff1a\u8fc7\u7a0b\u4e2d\u9ed8\u8ba4 n\\leqslant m n\\leqslant m \uff09\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \\Theta(N+T\\sqrt{n}) \\Theta(N+T\\sqrt{n}) \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <algorithm> #include <cstdio> const int N = 50000 ; int mu [ N + 5 ], p [ N + 5 ]; bool flg [ N + 5 ]; void init () { int tot = 0 ; mu [ 1 ] = 1 ; for ( int i = 2 ; i <= N ; ++ i ) { if ( ! flg [ i ]) { p [ ++ tot ] = i ; mu [ i ] = - 1 ; } for ( int j = 1 ; j <= tot && i * p [ j ] <= N ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { mu [ i * p [ j ]] = 0 ; break ; } mu [ i * p [ j ]] = - mu [ i ]; } } for ( int i = 1 ; i <= N ; ++ i ) mu [ i ] += mu [ i - 1 ]; } int solve ( int n , int m ) { int res = 0 ; for ( int i = 1 , j ; i <= std :: min ( n , m ); i = j + 1 ) { j = std :: min ( n / ( n / i ), m / ( m / i )); res += ( mu [ j ] - mu [ i - 1 ]) * ( n / i ) * ( m / i ); } return res ; } int main () { int T , a , b , c , d , k ; init (); for ( scanf ( \"%d\" , & T ); T ; -- T ) { scanf ( \"%d%d%d%d%d\" , & a , & b , & c , & d , & k ); printf ( \"%d \\n \" , solve ( b / k , d / k ) - solve ( b / k , ( c - 1 ) / k ) - solve (( a - 1 ) / k , d / k ) + solve (( a - 1 ) / k , ( c - 1 ) / k )); } return 0 ; }","title":"\u300cHAOI 2011\u300dProblem b"},{"location":"math/mobius/#spoj-5971lcmsum","text":"\u6c42\u503c\uff08\u591a\u7ec4\u6570\u636e\uff09 \\sum_{i=1}^n \\text{lcm}(i,n)\\qquad (1\\leqslant T\\leqslant 3\\times 10^5,1\\leqslant n\\leqslant 10^6) \\sum_{i=1}^n \\text{lcm}(i,n)\\qquad (1\\leqslant T\\leqslant 3\\times 10^5,1\\leqslant n\\leqslant 10^6) \u6613\u5f97\u539f\u5f0f\u5373 \\sum_{i=1}^n \\frac{i\\cdot n}{\\gcd(i,n)} \\sum_{i=1}^n \\frac{i\\cdot n}{\\gcd(i,n)} \u6839\u636e \\gcd(a,n)=1 \\gcd(a,n)=1 \u65f6\u4e00\u5b9a\u6709 \\gcd(n-a,n)=1 \\gcd(n-a,n)=1 \uff0c\u53ef\u5c06\u539f\u5f0f\u5316\u4e3a \\frac{1}{2}\\cdot(\\sum_{i=1}^{n-1}\\frac{i\\cdot n}{\\gcd(i,n)}+\\sum_{i=n-1}^{1}\\frac{i\\cdot n}{\\gcd(i,n)})+n \\frac{1}{2}\\cdot(\\sum_{i=1}^{n-1}\\frac{i\\cdot n}{\\gcd(i,n)}+\\sum_{i=n-1}^{1}\\frac{i\\cdot n}{\\gcd(i,n)})+n \u4e0a\u8ff0\u5f0f\u5b50\u4e2d\u62ec\u53f7\u5185\u7684\u4e24\u4e2a \\sum \\sum \u5bf9\u5e94\u7684\u9879\u76f8\u7b49\uff0c\u6545\u53c8\u53ef\u4ee5\u5316\u4e3a \\frac{1}{2}\\cdot \\sum_{i=1}^{n-1}\\frac{n^2}{\\gcd(i,n)}+n \\frac{1}{2}\\cdot \\sum_{i=1}^{n-1}\\frac{n^2}{\\gcd(i,n)}+n \u53ef\u4ee5\u5c06\u76f8\u540c\u7684 \\gcd(i,n) \\gcd(i,n) \u5408\u5e76\u5728\u4e00\u8d77\u8ba1\u7b97\uff0c\u6545\u53ea\u9700\u8981\u7edf\u8ba1 \\gcd(i,n)=d \\gcd(i,n)=d \u7684\u4e2a\u6570\u3002\u5f53 \\gcd(i,n)=d \\gcd(i,n)=d \u65f6\uff0c \\displaystyle\\gcd(\\frac{i}{d},\\frac{n}{d})=1 \\displaystyle\\gcd(\\frac{i}{d},\\frac{n}{d})=1 \uff0c\u6240\u4ee5 \\gcd(i,n)=d \\gcd(i,n)=d \u7684\u4e2a\u6570\u6709 \\displaystyle\\varphi(\\frac{n}{d}) \\displaystyle\\varphi(\\frac{n}{d}) \u4e2a\u3002 \u6545\u7b54\u6848\u4e3a \\frac{1}{2}\\cdot\\sum_{d\\mid n}\\frac{n^2\\cdot\\varphi(\\frac{n}{d})}{d}+n \\frac{1}{2}\\cdot\\sum_{d\\mid n}\\frac{n^2\\cdot\\varphi(\\frac{n}{d})}{d}+n \u53d8\u6362\u6c42\u548c\u987a\u5e8f\uff0c\u8bbe \\displaystyle d'=\\frac{n}{d} \\displaystyle d'=\\frac{n}{d} \uff0c\u5f0f\u5b50\u5316\u4e3a \\frac{1}{2}n\\cdot\\sum_{d'\\mid n}d'\\cdot\\varphi(d')+n \\frac{1}{2}n\\cdot\\sum_{d'\\mid n}d'\\cdot\\varphi(d')+n \u8bbe \\displaystyle \\text{g}(n)=\\sum_{d\\mid n} d\\cdot\\varphi(d) \\displaystyle \\text{g}(n)=\\sum_{d\\mid n} d\\cdot\\varphi(d) \uff0c\u5df2\u77e5 \\text{g} \\text{g} \u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u4e8e\u662f\u53ef\u4ee5 \\Theta(n) \\Theta(n) \u9884\u5904\u7406\u3002\u6700\u540e\u679a\u4e3e d d \uff0c\u7edf\u8ba1\u8d21\u732e\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \\Theta(n\\log n) \\Theta(n\\log n) \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <cstdio> const int N = 1000000 ; int tot , p [ N + 5 ], phi [ N + 5 ]; long long ans [ N + 5 ]; bool flg [ N + 5 ]; void solve () { phi [ 1 ] = 1 ; for ( int i = 2 ; i <= N ; ++ i ) { if ( ! flg [ i ]) p [ ++ tot ] = i , phi [ i ] = i - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= N ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { phi [ i * p [ j ]] = phi [ i ] * p [ j ]; break ; } phi [ i * p [ j ]] = phi [ i ] * ( p [ j ] - 1 ); } } for ( int i = 1 ; i <= N ; ++ i ) { for ( int j = 1 ; i * j <= N ; ++ j ) { ans [ i * j ] += 1LL * j * phi [ j ] / 2 ; } } for ( int i = 1 ; i <= N ; ++ i ) ans [ i ] = 1LL * i * ans [ i ] + i ; } int main () { int T , n ; solve (); for ( scanf ( \"%d\" , & T ); T ; -- T ) { scanf ( \"%d\" , & n ); printf ( \"%lld \\n \" , ans [ n ]); } return 0 ; }","title":"\u300cSPOJ 5971\u300dLCMSUM"},{"location":"math/mobius/#bzoj-2154crash","text":"\u6c42\u503c\uff08\u5bf9 20101009 20101009 \u53d6\u6a21\uff09 \\sum_{i=1}^n\\sum_{j=1}^m\\text{lcm}(i,j)\\qquad (n,m\\leqslant 10^7) \\sum_{i=1}^n\\sum_{j=1}^m\\text{lcm}(i,j)\\qquad (n,m\\leqslant 10^7) \u6613\u77e5\u539f\u5f0f\u7b49\u4ef7\u4e8e \\sum_{i=1}^n\\sum_{j=1}^m\\frac{i\\cdot j}{\\gcd(i,j)} \\sum_{i=1}^n\\sum_{j=1}^m\\frac{i\\cdot j}{\\gcd(i,j)} \u679a\u4e3e\u6700\u5927\u516c\u56e0\u6570 d d \uff0c\u663e\u7136\u4e24\u4e2a\u6570\u9664\u4ee5 d d \u5f97\u5230\u7684\u6570\u4e92\u8d28 \\sum_{i=1}^n\\sum_{j=1}^m\\sum_{d\\mid i,d\\mid j,\\gcd(\\frac{i}{d},\\frac{j}{d})=1}\\frac{i\\cdot j}{d} \\sum_{i=1}^n\\sum_{j=1}^m\\sum_{d\\mid i,d\\mid j,\\gcd(\\frac{i}{d},\\frac{j}{d})=1}\\frac{i\\cdot j}{d} \u975e\u5e38\u7ecf\u5178\u7684 \\gcd \\gcd \u5f0f\u5b50\u7684\u5316\u6cd5 \\sum_{d=1}^n d\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}[\\gcd(i,j)=1]\\ i\\cdot j \\sum_{d=1}^n d\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}[\\gcd(i,j)=1]\\ i\\cdot j \u540e\u534a\u6bb5\u5f0f\u5b50\u4e2d\uff0c\u51fa\u73b0\u4e86\u4e92\u8d28\u6570\u5bf9\u4e4b\u79ef\u7684\u548c\uff0c\u4e3a\u4e86\u8ba9\u5f0f\u5b50\u66f4\u7b80\u6d01\u5c31\u628a\u5b83\u62ff\u51fa\u6765\u5355\u72ec\u8ba1\u7b97\u3002\u4e8e\u662f\u6211\u4eec\u8bb0 \\text{sum}(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m [\\gcd(i,j)=1]\\ i\\cdot j \\text{sum}(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m [\\gcd(i,j)=1]\\ i\\cdot j \u63a5\u4e0b\u6765\u5bf9 \\text{sum}(n,m) \\text{sum}(n,m) \u8fdb\u884c\u5316\u7b80\u3002\u9996\u5148\u679a\u4e3e\u7ea6\u6570\uff0c\u5e76\u5c06 [\\gcd(i,j)=1] [\\gcd(i,j)=1] \u8868\u793a\u4e3a \\varepsilon(\\gcd(i,j)) \\varepsilon(\\gcd(i,j)) \\sum_{d=1}^n\\sum_{d\\mid i}^n\\sum_{d\\mid j}^m\\mu(d)\\cdot i\\cdot j \\sum_{d=1}^n\\sum_{d\\mid i}^n\\sum_{d\\mid j}^m\\mu(d)\\cdot i\\cdot j \u8bbe i=i'\\cdot d i=i'\\cdot d \uff0c j=j'\\cdot d j=j'\\cdot d \uff0c\u663e\u7136\u5f0f\u5b50\u53ef\u4ee5\u53d8\u4e3a \\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}i\\cdot j \\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{m}{d}\\rfloor}i\\cdot j \u89c2\u5bdf\u4e0a\u5f0f\uff0c\u524d\u534a\u6bb5\u53ef\u4ee5\u9884\u5904\u7406\u524d\u7f00\u548c\uff1b\u540e\u534a\u6bb5\u53c8\u662f\u4e00\u4e2a\u8303\u56f4\u5185\u6570\u5bf9\u4e4b\u548c\uff0c\u8bb0 g(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m i\\cdot j=\\frac{n\\cdot(n+1)}{2}\\times\\frac{m\\cdot(m+1)}{2} g(n,m)=\\sum_{i=1}^n\\sum_{j=1}^m i\\cdot j=\\frac{n\\cdot(n+1)}{2}\\times\\frac{m\\cdot(m+1)}{2} \u53ef\u4ee5 \\Theta(1) \\Theta(1) \u6c42\u89e3 \u81f3\u6b64 \\text{sum}(n,m)=\\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot g(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \\text{sum}(n,m)=\\sum_{d=1}^n\\mu(d)\\cdot d^2\\cdot g(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \u6211\u4eec\u53ef\u4ee5 \\lfloor\\frac{n}{\\lfloor\\frac{n}{d}\\rfloor}\\rfloor \\lfloor\\frac{n}{\\lfloor\\frac{n}{d}\\rfloor}\\rfloor \u6570\u8bba\u5206\u5757\u6c42\u89e3 \\text{sum}(n,m) \\text{sum}(n,m) \u51fd\u6570\u3002 \u5728\u6c42\u51fa \\text{sum}(n,m) \\text{sum}(n,m) \u540e\uff0c\u56de\u5230\u5b9a\u4e49 \\text{sum} \\text{sum} \u7684\u5730\u65b9\uff0c\u53ef\u5f97\u539f\u5f0f\u4e3a \\sum_{d=1}^n d\\cdot\\text{sum}(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \\sum_{d=1}^n d\\cdot\\text{sum}(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor) \u53ef\u89c1\u8fd9\u53c8\u662f\u4e00\u4e2a\u53ef\u4ee5\u6570\u8bba\u5206\u5757\u6c42\u89e3\u7684\u5f0f\u5b50\uff01 \u672c\u9898\u9664\u4e86\u63a8\u5f0f\u5b50\u6bd4\u8f83\u590d\u6742\u3001\u4ee3\u7801\u7ec6\u8282\u8f83\u591a\u4e4b\u5916\uff0c\u662f\u4e00\u9053\u5f88\u597d\u7684\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7ec3\u4e60\u9898\uff01\uff08\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\uff0c\u9ed8\u8ba4 n\\leqslant m n\\leqslant m \uff09 \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \\Theta(n+m) \\Theta(n+m) \uff08\u4e24\u6b21\u6570\u8bba\u5206\u5757\uff09 \u4ee3\u7801 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <algorithm> #include <cstdio> using std :: min ; const int N = 1e7 ; const int mod = 20101009 ; int n , m , mu [ N + 5 ], p [ N / 10 + 5 ], sum [ N + 5 ]; bool flg [ N + 5 ]; void init () { mu [ 1 ] = 1 ; int tot = 0 , k = min ( n , m ); for ( int i = 2 ; i <= k ; ++ i ) { if ( ! flg [ i ]) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= k ; ++ j ) { flg [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) { mu [ i * p [ j ]] = 0 ; break ; } mu [ i * p [ j ]] = - mu [ i ]; } } for ( int i = 1 ; i <= k ; ++ i ) sum [ i ] = ( sum [ i - 1 ] + 1LL * i * i % mod * ( mu [ i ] + mod )) % mod ; } int Sum ( int x , int y ) { return ( 1LL * x * ( x + 1 ) / 2 % mod ) * ( 1LL * y * ( y + 1 ) / 2 % mod ) % mod ; } int func ( int x , int y ) { int res = 0 ; for ( int i = 1 , j ; i <= min ( x , y ); i = j + 1 ) { j = min ( x / ( x / i ), y / ( y / i )); res = ( res + 1LL * ( sum [ j ] - sum [ i - 1 ] + mod ) * Sum ( x / i , y / i ) % mod ) % mod ; } return res ; } int solve ( int x , int y ) { int res = 0 ; for ( int i = 1 , j ; i <= min ( x , y ); i = j + 1 ) { j = min ( x / ( x / i ), y / ( y / i )); res = ( res + 1LL * ( j - i + 1 ) * ( i + j ) / 2 % mod * func ( x / i , y / i ) % mod ) % mod ; } return res ; } int main () { scanf ( \"%d%d\" , & n , & m ); init (); printf ( \"%d \\n \" , solve ( n , m )); } \u672c\u6587\u90e8\u5206\u5185\u5bb9\u5f15\u7528\u4e8e algocode \u7b97\u6cd5\u535a\u5ba2 \uff0c\u7279\u522b\u9e23\u8c22\uff01","title":"\u300cBZOJ 2154\u300dCrash \u7684\u6570\u5b57\u8868\u683c"},{"location":"math/ntt/","text":"\uff08\u672c\u6587\u8f6c\u8f7d\u81ea \u6843\u9171\u7684\u7b97\u6cd5\u7b14\u8bb0 \uff0c\u539f\u6587\u6233 \u94fe\u63a5 \uff0c\u5df2\u83b7\u5f97\u4f5c\u8005\u6388\u6743\uff09 \u7b80\u4ecb \u00b6 NTT \u89e3\u51b3\u7684\u662f\u591a\u9879\u5f0f\u4e58\u6cd5\u5e26\u6a21\u6570\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u8bf4\u6709\u4e9b\u53d7\u6a21\u6570\u7684\u9650\u5236\uff0c\u6570\u4e5f\u6bd4\u8f83\u5927\uff0c \u4f46\u662f\u5b83\u6bd4\u8f83\u65b9\u4fbf\u5440\u6bd5\u7adf\u6ca1\u6709\u590d\u6570\u90e8\u5206 qwq \u5b66\u4e60 NTT \u4e4b\u524d... \u00b6 \u751f\u6210\u5b50\u7fa4 \u00b6 \u5b50\u7fa4\uff1a\u7fa4 (S,\u2295), (S\u2032,\u2295) (S,\u2295), (S\u2032,\u2295) , \u6ee1\u8db3 S\u2032\u2282S S\u2032\u2282S \uff0c\u5219 (S\u2032,\u2295) (S\u2032,\u2295) \u662f (S,\u2295) (S,\u2295) \u7684\u5b50\u7fa4 \u62c9\u683c\u6717\u65e5\u5b9a\u7406: |S\u2032|\u2223|S | |S\u2032|\u2223|S | \u8bc1\u660e\u9700\u8981\u7528\u5230\u966a\u96c6\uff0c\u5f97\u5230\u966a\u96c6\u5927\u5c0f\u7b49\u4e8e\u5b50\u7fa4\u5927\u5c0f\uff0c\u6bcf\u4e2a\u966a\u96c6\u8981\u4e48\u4e0d\u60f3\u4ea4\u8981\u4e48\u76f8\u7b49\uff0c\u6240\u6709\u966a\u96c6\u7684\u5e76\u662f\u96c6\u5408 S S \uff0c\u90a3\u4e48\u663e\u7136\u6210\u7acb\u3002 \u751f\u6210\u5b50\u7fa4\uff1a a \\in S a \\in S \u200b\u7684\u751f\u6210\u5b50\u7fa4 \\left<a\\right> = \\{a^{(k)}, k \\geq 1 \\} \\left<a\\right> = \\{a^{(k)}, k \\geq 1 \\} \u200b\uff0c a a \u662f \\left< a \\right> \\left< a \\right> \u7684\u751f\u6210\u5143 \u9636\uff1a\u7fa4 S S \u4e2d a a \u7684\u9636\u662f\u6ee1\u8db3 a^r=e a^r=e \u7684\u6700\u5c0f\u7684 r r , \u7b26\u53f7 \\operatorname{ord}(a) \\operatorname{ord}(a) , \u6709 \\operatorname{ord}(a)=\\left|\\left<a\\right>\\right| \\operatorname{ord}(a)=\\left|\\left<a\\right>\\right| \uff0c\u663e\u7136\u6210\u7acb\u3002 \u8003\u8651\u7fa4 Z_n^ \\times =\\{[a], n \\in Z_n : \\gcd(a, n) = 1\\}, |Z_n^ \\times | = \\phi(n) Z_n^ \\times =\\{[a], n \\in Z_n : \\gcd(a, n) = 1\\}, |Z_n^ \\times | = \\phi(n) \u9636\u5c31\u662f\u6ee1\u8db3 a^r \\equiv 1 (\\bmod n) a^r \\equiv 1 (\\bmod n) \u200b\u7684\u6700\u5c0f\u7684 r r \uff0c \\operatorname{ord}(a)=r \\operatorname{ord}(a)=r \u539f\u6839 \u00b6 g g \u6ee1\u8db3 \\operatorname{ord}_n(g)=\\left|Z_n^\\times\\right|=\\phi(n) \\operatorname{ord}_n(g)=\\left|Z_n^\\times\\right|=\\phi(n) \uff0c\u5bf9\u4e8e\u8d28\u6570 p p \uff0c\u4e5f\u5c31\u662f\u8bf4 g^i \\bmod p, 0 \\leq i < p g^i \\bmod p, 0 \\leq i < p \u7ed3\u679c\u4e92\u4e0d\u76f8\u540c. \u6a21 n n \u6709\u539f\u6839\u7684\u5145\u8981\u6761\u4ef6 : n = 2, 4, p^e, 2 \\times p^e n = 2, 4, p^e, 2 \\times p^e \u79bb\u6563\u5bf9\u6570: g^t \\equiv a (\\bmod n)\uff0cind_{n,g}{(a)}=t g^t \\equiv a (\\bmod n)\uff0cind_{n,g}{(a)}=t \u200b\u56e0\u4e3a g g \u662f\u539f\u6839\uff0c\u6240\u4ee5 gt gt \u6bcf \\phi(n) \\phi(n) \u662f\u4e00\u4e2a\u5468\u671f\uff0c\u53ef\u4ee5\u53d6\u5230 | Z \\times n | | Z \\times n | \u7684\u6240\u6709\u5143\u7d20 \u5bf9\u4e8e n n \u662f\u8d28\u6570\u65f6\uff0c\u5c31\u662f\u5f97\u5230 [1,n\u22121] [1,n\u22121] \u7684\u6240\u6709\u6570\uff0c\u5c31\u662f [0,n\u22122] [0,n\u22122] \u5230 [1,n\u22121] [1,n\u22121] \u7684\u6620\u5c04 \u79bb\u6563\u5bf9\u6570\u6ee1\u8db3\u5bf9\u6570\u7684\u76f8\u5173\u6027\u8d28\uff0c\u5982 \u6c42\u539f\u6839\u53ef\u4ee5\u8bc1\u660e\u6ee1\u8db3 g^r \\equiv 1(\\bmod p) g^r \\equiv 1(\\bmod p) \u200b\u7684\u6700\u5c0f\u7684 r r \u4e00\u5b9a\u662f p\u22121 p\u22121 \u7684\u7ea6\u6570 \u5bf9\u4e8e\u8d28\u6570 p p \uff0c\u8d28\u56e0\u5b50\u5206\u89e3 p\u22121 p\u22121 \uff0c\u82e5 g^{(p-1)/pi} \\neq 1 (\\bmod p) g^{(p-1)/pi} \\neq 1 (\\bmod p) \u200b\u6052\u6210\u7acb\uff0c g g \u4e3a p p \u7684\u539f\u6839 NTT \u00b6 \u5bf9\u4e8e\u8d28\u6570 p=qn+1, (n=2^m) p=qn+1, (n=2^m) \u200b, \u539f\u6839 g g \u6ee1\u8db3 g^{qn} \\equiv 1 (\\bmod p) g^{qn} \\equiv 1 (\\bmod p) \u200b, \u5c06 g_n=g^p(\\bmod q) g_n=g^p(\\bmod q) \u770b\u505a \\omega_n \\omega_n \u7684\u7b49\u4ef7\uff0c\u62e9\u5176\u6ee1\u8db3\u76f8\u4f3c\u7684\u6027\u8d28\uff0c\u6bd4\u5982 g_n^n \\equiv 1 (\\bmod p), g_n^{n/2} \\equiv -1 (\\bmod p) g_n^n \\equiv 1 (\\bmod p), g_n^{n/2} \\equiv -1 (\\bmod p) \u7136\u540e\u56e0\u4e3a\u8fd9\u91cc\u6d89\u53ca\u5230\u6570\u8bba\u53d8\u5316\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684 N N \uff08\u4e3a\u4e86\u533a\u5206 FFT \u4e2d\u7684 n\uff0c\u6211\u4eec\u628a\u8fd9\u91cc\u7684 n \u79f0\u4e3a N N \uff09\u53ef\u4ee5\u6bd4 FFT \u4e2d\u7684 n \u5927\uff0c\u4f46\u662f\u53ea\u8981\u628a \\frac{qN}{n} \\frac{qN}{n} \u770b\u505a\u8fd9\u91cc\u7684 q q \u5c31\u884c\u4e86\uff0c\u80fd\u591f\u907f\u514d\u5927\u5c0f\u95ee\u9898\u3002\u3002\u3002 \u5e38\u89c1\u7684\u6709 p = 1004535809 = 479 \\times 2^{21}, g=3 p = 1004535809 = 479 \\times 2^{21}, g=3 p=998244353=2 \\times 17 \\times 2^{23}+1, g=3 p=998244353=2 \\times 17 \\times 2^{23}+1, g=3 \u5c31\u662f g^{qn} g^{qn} \u7684\u7b49\u4ef7 e^{2\\pi n} e^{2\\pi n} \u8fed\u4ee3\u5230\u957f\u5ea6 l l \u65f6 g_l = g^{\\frac{p-1}{l}} g_l = g^{\\frac{p-1}{l}} , \u6216\u8005 \\omega_n = g_l = g_N^{\\frac{N}{l}} = g_N^{\\frac{p-1}{l}} \\omega_n = g_l = g_N^{\\frac{N}{l}} = g_N^{\\frac{p-1}{l}} \u63a5\u4e0b\u6765\u653e\u4e00\u4e2a\u5927\u6570\u76f8\u4e58\u7684\u6a21\u677f \u53c2\u8003\u7f51\u5740\u5982\u4e0b https://blog.csdn.net/blackjack_/article/details/79346433 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <algorithm> #include <bitset> #include <cmath> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <iomanip> #include <iostream> #include <map> #include <queue> #include <set> #include <string> #include <vector> using namespace std ; inline int read () { int x = 0 , f = 1 ; char ch = getchar (); while ( ch < '0' || ch > '9' ) { if ( ch == '-' ) f = - 1 ; ch = getchar (); } while ( ch <= '9' && ch >= '0' ) { x = 10 * x + ch - '0' ; ch = getchar (); } return x * f ; } void print ( int x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x >= 10 ) print ( x / 10 ); putchar ( x % 10 + '0' ); } const int N = 300100 , P = 998244353 ; inline int qpow ( int x , int y ) { int res ( 1 ); while ( y ) { if ( y & 1 ) res = 1ll * res * x % P ; x = 1ll * x * x % P ; y >>= 1 ; } return res ; } int r [ N ]; void ntt ( int * x , int lim , int opt ) { register int i , j , k , m , gn , g , tmp ; for ( i = 0 ; i < lim ; ++ i ) if ( r [ i ] < i ) swap ( x [ i ], x [ r [ i ]]); for ( m = 2 ; m <= lim ; m <<= 1 ) { k = m >> 1 ; gn = qpow ( 3 , ( P - 1 ) / m ); for ( i = 0 ; i < lim ; i += m ) { g = 1 ; for ( j = 0 ; j < k ; ++ j , g = 1ll * g * gn % P ) { tmp = 1ll * x [ i + j + k ] * g % P ; x [ i + j + k ] = ( x [ i + j ] - tmp + P ) % P ; x [ i + j ] = ( x [ i + j ] + tmp ) % P ; } } } if ( opt == - 1 ) { reverse ( x + 1 , x + lim ); register int inv = qpow ( lim , P - 2 ); for ( i = 0 ; i < lim ; ++ i ) x [ i ] = 1ll * x [ i ] * inv % P ; } } int A [ N ], B [ N ], C [ N ]; char a [ N ], b [ N ]; int main () { register int i , lim ( 1 ), n ; scanf ( \"%s\" , & a ); n = strlen ( a ); for ( i = 0 ; i < n ; ++ i ) A [ i ] = a [ n - i - 1 ] - '0' ; while ( lim < ( n << 1 )) lim <<= 1 ; scanf ( \"%s\" , & b ); n = strlen ( b ); for ( i = 0 ; i < n ; ++ i ) B [ i ] = b [ n - i - 1 ] - '0' ; while ( lim < ( n << 1 )) lim <<= 1 ; for ( i = 0 ; i < lim ; ++ i ) r [ i ] = ( i & 1 ) * ( lim >> 1 ) + ( r [ i >> 1 ] >> 1 ); ntt ( A , lim , 1 ); ntt ( B , lim , 1 ); for ( i = 0 ; i < lim ; ++ i ) C [ i ] = 1ll * A [ i ] * B [ i ] % P ; ntt ( C , lim , - 1 ); int len ( 0 ); for ( i = 0 ; i < lim ; ++ i ) { if ( C [ i ] >= 10 ) len = i + 1 , C [ i + 1 ] += C [ i ] / 10 , C [ i ] %= 10 ; if ( C [ i ]) len = max ( len , i ); } while ( C [ len ] >= 10 ) C [ len + 1 ] += C [ len ] / 10 , C [ len ] %= 10 , len ++ ; for ( i = len ; ~ i ; -- i ) putchar ( C [ i ] + '0' ); puts ( \"\" ); return 0 ; }","title":"\u5feb\u901f\u6570\u8bba\u53d8\u6362"},{"location":"math/ntt/#_1","text":"NTT \u89e3\u51b3\u7684\u662f\u591a\u9879\u5f0f\u4e58\u6cd5\u5e26\u6a21\u6570\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u8bf4\u6709\u4e9b\u53d7\u6a21\u6570\u7684\u9650\u5236\uff0c\u6570\u4e5f\u6bd4\u8f83\u5927\uff0c \u4f46\u662f\u5b83\u6bd4\u8f83\u65b9\u4fbf\u5440\u6bd5\u7adf\u6ca1\u6709\u590d\u6570\u90e8\u5206 qwq","title":"\u7b80\u4ecb"},{"location":"math/ntt/#ntt","text":"","title":"\u5b66\u4e60 NTT \u4e4b\u524d..."},{"location":"math/ntt/#_2","text":"\u5b50\u7fa4\uff1a\u7fa4 (S,\u2295), (S\u2032,\u2295) (S,\u2295), (S\u2032,\u2295) , \u6ee1\u8db3 S\u2032\u2282S S\u2032\u2282S \uff0c\u5219 (S\u2032,\u2295) (S\u2032,\u2295) \u662f (S,\u2295) (S,\u2295) \u7684\u5b50\u7fa4 \u62c9\u683c\u6717\u65e5\u5b9a\u7406: |S\u2032|\u2223|S | |S\u2032|\u2223|S | \u8bc1\u660e\u9700\u8981\u7528\u5230\u966a\u96c6\uff0c\u5f97\u5230\u966a\u96c6\u5927\u5c0f\u7b49\u4e8e\u5b50\u7fa4\u5927\u5c0f\uff0c\u6bcf\u4e2a\u966a\u96c6\u8981\u4e48\u4e0d\u60f3\u4ea4\u8981\u4e48\u76f8\u7b49\uff0c\u6240\u6709\u966a\u96c6\u7684\u5e76\u662f\u96c6\u5408 S S \uff0c\u90a3\u4e48\u663e\u7136\u6210\u7acb\u3002 \u751f\u6210\u5b50\u7fa4\uff1a a \\in S a \\in S \u200b\u7684\u751f\u6210\u5b50\u7fa4 \\left<a\\right> = \\{a^{(k)}, k \\geq 1 \\} \\left<a\\right> = \\{a^{(k)}, k \\geq 1 \\} \u200b\uff0c a a \u662f \\left< a \\right> \\left< a \\right> \u7684\u751f\u6210\u5143 \u9636\uff1a\u7fa4 S S \u4e2d a a \u7684\u9636\u662f\u6ee1\u8db3 a^r=e a^r=e \u7684\u6700\u5c0f\u7684 r r , \u7b26\u53f7 \\operatorname{ord}(a) \\operatorname{ord}(a) , \u6709 \\operatorname{ord}(a)=\\left|\\left<a\\right>\\right| \\operatorname{ord}(a)=\\left|\\left<a\\right>\\right| \uff0c\u663e\u7136\u6210\u7acb\u3002 \u8003\u8651\u7fa4 Z_n^ \\times =\\{[a], n \\in Z_n : \\gcd(a, n) = 1\\}, |Z_n^ \\times | = \\phi(n) Z_n^ \\times =\\{[a], n \\in Z_n : \\gcd(a, n) = 1\\}, |Z_n^ \\times | = \\phi(n) \u9636\u5c31\u662f\u6ee1\u8db3 a^r \\equiv 1 (\\bmod n) a^r \\equiv 1 (\\bmod n) \u200b\u7684\u6700\u5c0f\u7684 r r \uff0c \\operatorname{ord}(a)=r \\operatorname{ord}(a)=r","title":"\u751f\u6210\u5b50\u7fa4"},{"location":"math/ntt/#_3","text":"g g \u6ee1\u8db3 \\operatorname{ord}_n(g)=\\left|Z_n^\\times\\right|=\\phi(n) \\operatorname{ord}_n(g)=\\left|Z_n^\\times\\right|=\\phi(n) \uff0c\u5bf9\u4e8e\u8d28\u6570 p p \uff0c\u4e5f\u5c31\u662f\u8bf4 g^i \\bmod p, 0 \\leq i < p g^i \\bmod p, 0 \\leq i < p \u7ed3\u679c\u4e92\u4e0d\u76f8\u540c. \u6a21 n n \u6709\u539f\u6839\u7684\u5145\u8981\u6761\u4ef6 : n = 2, 4, p^e, 2 \\times p^e n = 2, 4, p^e, 2 \\times p^e \u79bb\u6563\u5bf9\u6570: g^t \\equiv a (\\bmod n)\uff0cind_{n,g}{(a)}=t g^t \\equiv a (\\bmod n)\uff0cind_{n,g}{(a)}=t \u200b\u56e0\u4e3a g g \u662f\u539f\u6839\uff0c\u6240\u4ee5 gt gt \u6bcf \\phi(n) \\phi(n) \u662f\u4e00\u4e2a\u5468\u671f\uff0c\u53ef\u4ee5\u53d6\u5230 | Z \\times n | | Z \\times n | \u7684\u6240\u6709\u5143\u7d20 \u5bf9\u4e8e n n \u662f\u8d28\u6570\u65f6\uff0c\u5c31\u662f\u5f97\u5230 [1,n\u22121] [1,n\u22121] \u7684\u6240\u6709\u6570\uff0c\u5c31\u662f [0,n\u22122] [0,n\u22122] \u5230 [1,n\u22121] [1,n\u22121] \u7684\u6620\u5c04 \u79bb\u6563\u5bf9\u6570\u6ee1\u8db3\u5bf9\u6570\u7684\u76f8\u5173\u6027\u8d28\uff0c\u5982 \u6c42\u539f\u6839\u53ef\u4ee5\u8bc1\u660e\u6ee1\u8db3 g^r \\equiv 1(\\bmod p) g^r \\equiv 1(\\bmod p) \u200b\u7684\u6700\u5c0f\u7684 r r \u4e00\u5b9a\u662f p\u22121 p\u22121 \u7684\u7ea6\u6570 \u5bf9\u4e8e\u8d28\u6570 p p \uff0c\u8d28\u56e0\u5b50\u5206\u89e3 p\u22121 p\u22121 \uff0c\u82e5 g^{(p-1)/pi} \\neq 1 (\\bmod p) g^{(p-1)/pi} \\neq 1 (\\bmod p) \u200b\u6052\u6210\u7acb\uff0c g g \u4e3a p p \u7684\u539f\u6839","title":"\u539f\u6839"},{"location":"math/ntt/#ntt_1","text":"\u5bf9\u4e8e\u8d28\u6570 p=qn+1, (n=2^m) p=qn+1, (n=2^m) \u200b, \u539f\u6839 g g \u6ee1\u8db3 g^{qn} \\equiv 1 (\\bmod p) g^{qn} \\equiv 1 (\\bmod p) \u200b, \u5c06 g_n=g^p(\\bmod q) g_n=g^p(\\bmod q) \u770b\u505a \\omega_n \\omega_n \u7684\u7b49\u4ef7\uff0c\u62e9\u5176\u6ee1\u8db3\u76f8\u4f3c\u7684\u6027\u8d28\uff0c\u6bd4\u5982 g_n^n \\equiv 1 (\\bmod p), g_n^{n/2} \\equiv -1 (\\bmod p) g_n^n \\equiv 1 (\\bmod p), g_n^{n/2} \\equiv -1 (\\bmod p) \u7136\u540e\u56e0\u4e3a\u8fd9\u91cc\u6d89\u53ca\u5230\u6570\u8bba\u53d8\u5316\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684 N N \uff08\u4e3a\u4e86\u533a\u5206 FFT \u4e2d\u7684 n\uff0c\u6211\u4eec\u628a\u8fd9\u91cc\u7684 n \u79f0\u4e3a N N \uff09\u53ef\u4ee5\u6bd4 FFT \u4e2d\u7684 n \u5927\uff0c\u4f46\u662f\u53ea\u8981\u628a \\frac{qN}{n} \\frac{qN}{n} \u770b\u505a\u8fd9\u91cc\u7684 q q \u5c31\u884c\u4e86\uff0c\u80fd\u591f\u907f\u514d\u5927\u5c0f\u95ee\u9898\u3002\u3002\u3002 \u5e38\u89c1\u7684\u6709 p = 1004535809 = 479 \\times 2^{21}, g=3 p = 1004535809 = 479 \\times 2^{21}, g=3 p=998244353=2 \\times 17 \\times 2^{23}+1, g=3 p=998244353=2 \\times 17 \\times 2^{23}+1, g=3 \u5c31\u662f g^{qn} g^{qn} \u7684\u7b49\u4ef7 e^{2\\pi n} e^{2\\pi n} \u8fed\u4ee3\u5230\u957f\u5ea6 l l \u65f6 g_l = g^{\\frac{p-1}{l}} g_l = g^{\\frac{p-1}{l}} , \u6216\u8005 \\omega_n = g_l = g_N^{\\frac{N}{l}} = g_N^{\\frac{p-1}{l}} \\omega_n = g_l = g_N^{\\frac{N}{l}} = g_N^{\\frac{p-1}{l}} \u63a5\u4e0b\u6765\u653e\u4e00\u4e2a\u5927\u6570\u76f8\u4e58\u7684\u6a21\u677f \u53c2\u8003\u7f51\u5740\u5982\u4e0b https://blog.csdn.net/blackjack_/article/details/79346433 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <algorithm> #include <bitset> #include <cmath> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <iomanip> #include <iostream> #include <map> #include <queue> #include <set> #include <string> #include <vector> using namespace std ; inline int read () { int x = 0 , f = 1 ; char ch = getchar (); while ( ch < '0' || ch > '9' ) { if ( ch == '-' ) f = - 1 ; ch = getchar (); } while ( ch <= '9' && ch >= '0' ) { x = 10 * x + ch - '0' ; ch = getchar (); } return x * f ; } void print ( int x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x >= 10 ) print ( x / 10 ); putchar ( x % 10 + '0' ); } const int N = 300100 , P = 998244353 ; inline int qpow ( int x , int y ) { int res ( 1 ); while ( y ) { if ( y & 1 ) res = 1ll * res * x % P ; x = 1ll * x * x % P ; y >>= 1 ; } return res ; } int r [ N ]; void ntt ( int * x , int lim , int opt ) { register int i , j , k , m , gn , g , tmp ; for ( i = 0 ; i < lim ; ++ i ) if ( r [ i ] < i ) swap ( x [ i ], x [ r [ i ]]); for ( m = 2 ; m <= lim ; m <<= 1 ) { k = m >> 1 ; gn = qpow ( 3 , ( P - 1 ) / m ); for ( i = 0 ; i < lim ; i += m ) { g = 1 ; for ( j = 0 ; j < k ; ++ j , g = 1ll * g * gn % P ) { tmp = 1ll * x [ i + j + k ] * g % P ; x [ i + j + k ] = ( x [ i + j ] - tmp + P ) % P ; x [ i + j ] = ( x [ i + j ] + tmp ) % P ; } } } if ( opt == - 1 ) { reverse ( x + 1 , x + lim ); register int inv = qpow ( lim , P - 2 ); for ( i = 0 ; i < lim ; ++ i ) x [ i ] = 1ll * x [ i ] * inv % P ; } } int A [ N ], B [ N ], C [ N ]; char a [ N ], b [ N ]; int main () { register int i , lim ( 1 ), n ; scanf ( \"%s\" , & a ); n = strlen ( a ); for ( i = 0 ; i < n ; ++ i ) A [ i ] = a [ n - i - 1 ] - '0' ; while ( lim < ( n << 1 )) lim <<= 1 ; scanf ( \"%s\" , & b ); n = strlen ( b ); for ( i = 0 ; i < n ; ++ i ) B [ i ] = b [ n - i - 1 ] - '0' ; while ( lim < ( n << 1 )) lim <<= 1 ; for ( i = 0 ; i < lim ; ++ i ) r [ i ] = ( i & 1 ) * ( lim >> 1 ) + ( r [ i >> 1 ] >> 1 ); ntt ( A , lim , 1 ); ntt ( B , lim , 1 ); for ( i = 0 ; i < lim ; ++ i ) C [ i ] = 1ll * A [ i ] * B [ i ] % P ; ntt ( C , lim , - 1 ); int len ( 0 ); for ( i = 0 ; i < lim ; ++ i ) { if ( C [ i ] >= 10 ) len = i + 1 , C [ i + 1 ] += C [ i ] / 10 , C [ i ] %= 10 ; if ( C [ i ]) len = max ( len , i ); } while ( C [ len ] >= 10 ) C [ len + 1 ] += C [ len ] / 10 , C [ len ] %= 10 , len ++ ; for ( i = len ; ~ i ; -- i ) putchar ( C [ i ] + '0' ); puts ( \"\" ); return 0 ; }","title":"NTT"},{"location":"math/permutation-group/","text":"","title":"\u7f6e\u6362\u7fa4"},{"location":"math/poly/","text":"","title":"\u591a\u9879\u5f0f\u90e8\u5206\u7b80\u4ecb"},{"location":"math/prime/","text":"\u6211\u4eec\u8bf4\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6574\u6570 k k \uff0c\u4f7f\u5f97 a = kd a = kd \uff0c\u5219\u79f0 d d \u6574\u9664 a a \uff0c\u8bb0\u505a d | a d | a \uff0c\u79f0 a a \u662f d d \u7684\u500d\u6570\uff0c\u5982\u679c d > 0 d > 0 \uff0c\u79f0 d d \u662f a a \u7684\u7ea6\u6570\u3002\u7279\u522b\u5730\uff0c\u4efb\u4f55\u6574\u6570\u90fd\u6574\u9664 0 0 \u3002 \u663e\u7136\u5927\u4e8e 1 1 \u7684\u6b63\u6574\u6570 a a \u53ef\u4ee5\u88ab 1 1 \u548c a a \u6574\u9664\uff0c\u5982\u679c\u9664\u6b64\u4e4b\u5916 a a \u6ca1\u6709\u5176\u4ed6\u7684\u7ea6\u6570\uff0c\u5219\u79f0 a a \u662f\u7d20\u6570\uff0c\u53c8\u79f0\u8d28\u6570\u3002\u4efb\u4f55\u4e00\u4e2a\u5927\u4e8e 1 1 \u7684\u6574\u6570\u5982\u679c\u4e0d\u662f\u7d20\u6570\uff0c\u4e5f\u5c31\u662f\u6709\u5176\u4ed6\u7ea6\u6570\uff0c\u5c31\u79f0\u4e3a\u662f\u5408\u6570\u3002 1 1 \u65e2\u4e0d\u662f\u5408\u6570\u4e5f\u4e0d\u662f\u7d20\u6570\u3002 \u7d20\u6570\u8ba1\u6570\u51fd\u6570\uff1a\u5c0f\u4e8e\u6216\u7b49\u4e8e x x \u7684\u7d20\u6570\u7684\u4e2a\u6570\uff0c\u7528 \\pi(x) \\pi(x) \u8868\u793a\u3002\u968f\u7740 x x \u7684\u589e\u5927\uff0c\u6709\u8fd9\u6837\u7684\u8fd1\u4f3c\u7ed3\u679c\uff1a \\pi(x) \\sim \\frac{x}{\\ln(x)} \\pi(x) \\sim \\frac{x}{\\ln(x)} \u7d20\u6570\u5224\u5b9a \u00b6 \u6211\u4eec\u81ea\u7136\u5730\u4f1a\u60f3\u5230\uff0c\u5982\u4f55\u7528\u8ba1\u7b97\u673a\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u7d20\u6570\u5462\uff1f \u66b4\u529b\u505a\u6cd5 \u00b6 \u81ea\u7136\u53ef\u4ee5\u679a\u4e3e\u4ece\u5c0f\u5230\u5927\u7684\u6bcf\u4e2a\u6570\u770b\u662f\u5426\u80fd\u6574\u9664 1 2 3 4 5 bool isPrime ( a ) { for ( int i = 2 ; i < a ; ++ i ) if ( a % i == 0 ) return 0 ; return 1 ; } \u8fd9\u6837\u505a\u662f\u5341\u5206\u7a33\u59a5\u4e86\uff0c\u4f46\u662f\u771f\u7684\u6709\u5fc5\u8981\u6bcf\u4e2a\u6570\u90fd\u53bb\u5224\u65ad\u5417\uff1f \u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u5982\u679c x x \u662f a a \u7684\u7ea6\u6570\uff0c\u90a3\u4e48 \\frac{a}{x} \\frac{a}{x} \u4e5f\u662f a a \u7684\u7ea6\u6570\u3002 \u8fd9\u4e2a\u7ed3\u8bba\u544a\u8bc9\u6211\u4eec\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 (x, \\frac{a}{x} ) (x, \\frac{a}{x} ) \uff0c\u53ea\u9700\u8981\u68c0\u9a8c\u5176\u4e2d\u7684\u4e00\u4e2a\u5c31\u597d\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u4e4b\u8003\u5bdf\u6bcf\u4e00\u5bf9\u91cc\u9762\u5c0f\u7684\u90a3\u4e2a\u6570\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u6240\u6709\u8fd9\u4e9b\u8f83\u5c0f\u6570\u5c31\u662f [1, \\sqrt{a}] [1, \\sqrt{a}] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u3002 \u7531\u4e8e 1 1 \u80af\u5b9a\u662f\u7ea6\u6570\uff0c\u6240\u4ee5\u4e0d\u68c0\u9a8c\u5b83\u3002 1 2 3 4 5 bool isPrime ( a ) { for ( int i = 2 ; i * i <= a ; ++ i ) if ( a % i ) return 0 ; return 1 ; } Miller-Rabin \u7d20\u6027\u6d4b\u8bd5 \u00b6 Miller-Rabin \u7d20\u6027\u6d4b\u8bd5\uff08Miller\u2013Rabin primality test\uff09\u662f\u8fdb\u9636\u7684\u7d20\u6570\u5224\u5b9a\u65b9\u6cd5\uff0c\u5177\u6709\u6bd4\u66b4\u529b\u505a\u6cd5\u66f4\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f46\u662f\u4ee3\u7801\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u5728\u6bd4\u8d5b\u4e2d\u4f7f\u7528\u8f83\u5c11\u3002 Fermat \u7d20\u6027\u6d4b\u8bd5 \u00b6 \u6211\u4eec\u53ef\u4ee5\u6839\u636e \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u5f97\u51fa\u4e00\u79cd\u68c0\u9a8c\u7d20\u6570\u7684\u601d\u8def\uff1a \u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u4e0d\u65ad\u5730\u9009\u53d6\u5728 [2, n-1] [2, n-1] \u4e2d\u7684\u57fa a a \uff0c\u5e76\u68c0\u9a8c\u662f\u5426\u6bcf\u6b21\u90fd\u6709 a^{n-1} \\equiv 1 \\pmod n a^{n-1} \\equiv 1 \\pmod n 1 2 3 4 5 6 7 bool millerRabin ( int n ) { for ( int i = 1 ; i <= s ; ++ i ) { int a = rand () % ( n - 2 ) + 2 ; if ( quickPow ( a , n - 1 , n ) != 1 ) return 0 ; } return 1 ; } \u5f88\u9057\u61be\uff0c\u8d39\u9a6c\u5c0f\u5b9a\u7406\u7684\u9006\u5b9a\u7406\u5e76\u4e0d\u6210\u7acb\uff0c\u6362\u8a00\u4e4b\uff0c\u6ee1\u8db3\u4e86 a^{n-1} \\equiv 1 \\pmod n a^{n-1} \\equiv 1 \\pmod n \uff0c n n \u4e5f\u4e0d\u4e00\u5b9a\u662f\u7d20\u6570\u3002 \u5361\u8fc8\u514b\u5c14\u6570 \u00b6 \u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\u968f\u673a\u5730\u9009\u62e9 a a \uff0c\u5f88\u5927\u7a0b\u5ea6\u5730\u964d\u4f4e\u4e86\u72af\u9519\u7684\u6982\u7387\u3002\u4f46\u662f\u4ecd\u6709\u4e00\u7c7b\u6570\uff0c\u4e0a\u9762\u7684\u505a\u6cd5\u5e76\u4e0d\u80fd\u51c6\u786e\u5730\u5224\u65ad\u3002 \u5bf9\u4e8e\u5408\u6570 n n \uff0c\u5982\u679c\u5bf9\u4e8e\u6240\u6709\u6b63\u6574\u6570 a a \uff0c a a \u548c n n \u4e92\u7d20\uff0c\u90fd\u6709\u540c\u4f59\u5f0f a^{n-1} \\equiv 1 \\pmod n a^{n-1} \\equiv 1 \\pmod n \u6210\u7acb\uff0c\u5219\u5408\u6570 n n \u4e3a\u5361\u8fc8\u514b\u5c14\u6570\uff08Carmichael Number\uff09\uff0c\u53c8\u79f0\u4e3a\u8d39\u9a6c\u4f2a\u7d20\u6570\u3002 \u6bd4\u5982\uff0c 341 = 11 \\times 31 341 = 11 \\times 31 \u5c31\u662f\u4e00\u4e2a\u5361\u8fc8\u514b\u5c14\u6570\u3002 \u800c\u4e14\u6211\u4eec\u77e5\u9053\uff0c\u82e5 n n \u4e3a\u5361\u8fc8\u514b\u5c14\u6570\uff0c\u5219 m=2^{n}-1 m=2^{n}-1 \u4e5f\u662f\u4e00\u4e2a\u5361\u8fc8\u514b\u5c14\u6570\uff0c\u4ece\u800c\u5361\u8fc8\u514b\u5c14\u6570\u7684\u4e2a\u6570\u662f\u65e0\u7a77\u7684\u3002 \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406 \u00b6 \u5982\u679c p p \u662f\u5947\u7d20\u6570\uff0c\u5219 x^2 \\equiv 1 \\bmod p x^2 \\equiv 1 \\bmod p \u7684\u89e3\u4e3a x = 1 x = 1 \u6216\u8005 x = p - 1 (\\bmod p) x = p - 1 (\\bmod p) ; \u5b9e\u73b0 \u00b6 \u6839\u636e\u5361\u8fc8\u514b\u5c14\u6570\u7684\u6027\u8d28\uff0c\u53ef\u77e5\u5176\u4e00\u5b9a\u4e0d\u662f p^e p^e \u3002 \u4e0d\u59a8\u5c06\u8d39\u9a6c\u5c0f\u5b9a\u7406\u548c\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u7ed3\u5408\u8d77\u6765\u4f7f\u7528\uff1a \u5c06 n\u22121 n\u22121 \u5206\u89e3\u4e3a n\u22121=u \\times 2^t n\u22121=u \\times 2^t \uff0c\u4e0d\u65ad\u5730\u5bf9 u u \u8fdb\u884c\u5e73\u65b9\u64cd\u4f5c\uff0c\u82e5\u53d1\u73b0\u975e\u5e73\u51e1\u5e73\u65b9\u6839\u65f6\u5373\u53ef\u5224\u65ad\u51fa\u5176\u4e0d\u662f\u7d20\u6570\u3002 \u6bd4\u8f83\u6b63\u786e\u7684 Miller Rabin\uff1a\uff08\u6765\u81ea fjzzq2002\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 bool millerRabbin ( int n ) { int a = n - 1 , b = 0 ; while ( a % 2 == 0 ) a /= 2 , ++ b ; for ( int i = 1 , j ; i <= s ; ++ i ) { int x = rand () % ( n - 2 ) + 2 , v = quickPow ( x , a , n ); if ( v == 1 || v == n - 1 ) continue ; for ( j = 0 ; j < b ; ++ j ) { v = ( long long ) v * v % n ; if ( v == n - 1 ) break ; } if ( j >= b ) return 0 ; } return 1 ; } \u53c2\u8003 \u00b6 http://www.matrix67.com/blog/archives/234 https://blog.bill.moe/miller-rabin-notes/ \u53cd\u7d20\u6570 \u00b6 \u5b9a\u4e49 \u00b6 \u5982\u679c\u67d0\u4e2a\u6b63\u6574\u6570 n n \u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff0c\u5219\u79f0\u4e3a\u662f\u53cd\u7d20\u6570\uff1a \u4efb\u4f55\u5c0f\u4e8e n n \u7684\u6b63\u6570\u7684\u7ea6\u6570\u4e2a\u6570\u90fd\u5c0f\u4e8e n n \u7684\u7ea6\u6570\u4e2a\u6570 \u6ce8\uff1a\u6ce8\u610f\u533a\u5206 emirp \uff0c\u5b83\u662f\u7528\u6765\u8868\u793a\u4ece\u540e\u5411\u524d\u5199\u8bfb\u662f\u7d20\u6570\u7684\u6570\u3002 \u7b80\u4ecb \u00b6 \uff08\u672c\u6bb5\u8f6c\u8f7d\u81ea \u6843\u9171\u7684\u7b97\u6cd5\u7b14\u8bb0 \uff0c\u539f\u6587\u6233 \u94fe\u63a5 \uff0c\u5df2\u83b7\u5f97\u4f5c\u8005\u6388\u6743\uff09 \u5176\u5b9e\u987e\u540d\u601d\u4e49\uff0c\u7d20\u6570\u5c31\u662f\u56e0\u5b50\u53ea\u6709\u4e24\u4e2a\u7684\u6570\uff0c\u90a3\u4e48\u53cd\u7d20\u6570\uff0c\u5c31\u662f\u56e0\u5b50\u6700\u591a\u7684\u6570\uff08\u5e76\u4e14\u56e0\u5b50\u4e2a\u6570\u76f8\u540c\u7684\u65f6\u5019\u503c\u6700\u5c0f\uff09\uff0c\u6240\u4ee5\u53cd\u7d20\u6570\u662f\u76f8\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408\u6765\u8bf4\u7684\u3002 \u6211\u6240\u7406\u89e3\u7684\u53cd\u7d20\u6570\u5b9a\u4e49\u5c31\u662f\uff0c\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u56e0\u7d20\u6700\u591a\u5e76\u4e14\u503c\u6700\u5c0f\u7684\u6570\uff0c\u5c31\u662f\u53cd\u7d20\u6570\u3002 \u90a3\u4e48\uff0c\u5982\u4f55\u6765\u6c42\u89e3\u53cd\u7d20\u6570\u5462\uff1f \u9996\u5148\uff0c\u65e2\u7136\u8981\u6c42\u56e0\u5b50\u6570\uff0c\u6211\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u7d20\u56e0\u5b50\u5206\u89e3\u3002\u628a n n \u5206\u89e3\u6210 n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d p p \u662f\u7d20\u6570\uff0c k k \u4e3a\u4ed6\u7684\u6307\u6570\u3002\u8fd9\u6837\u7684\u8bdd\u603b\u56e0\u5b50\u4e2a\u6570\u5c31\u662f (k_1+1) \\times (k_2+1) \\times (k_3+1) \\cdots \\times (k_n+1) (k_1+1) \\times (k_2+1) \\times (k_3+1) \\cdots \\times (k_n+1) \u3002 \u4f46\u662f\u663e\u7136\u8d28\u56e0\u5b50\u5206\u89e3\u7684\u590d\u6742\u5ea6\u662f\u5f88\u9ad8\u7684\uff0c\u5e76\u4e14\u524d\u4e00\u4e2a\u6570\u7684\u7ed3\u679c\u4e0d\u80fd\u88ab\u540e\u9762\u5229\u7528\u3002\u6240\u4ee5\u8981\u6362\u4e2a\u65b9\u6cd5\u3002 \u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b\u53cd\u7d20\u6570\u7684\u7279\u70b9\u3002 \u53cd\u7d20\u6570\u80af\u5b9a\u662f\u4ece 2 2 \u5f00\u59cb\u7684\u8fde\u7eed\u7d20\u6570\u7684\u5e42\u6b21\u5f62\u5f0f\u7684\u4e58\u79ef\u3002 \u6570\u503c\u5c0f\u7684\u7d20\u6570\u7684\u5e42\u6b21\u5927\u4e8e\u7b49\u4e8e\u6570\u503c\u5927\u7684\u7d20\u6570\uff0c\u5373 n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} \u4e2d\uff0c\u6709 k_1 \\geq k_2 \\geq k_3 \\geq \\cdots \\geq k_n k_1 \\geq k_2 \\geq k_3 \\geq \\cdots \\geq k_n \u89e3\u91ca\uff1a \u5982\u679c\u4e0d\u662f\u4ece 2 2 \u5f00\u59cb\u7684\u8fde\u7eed\u7d20\u6570\uff0c\u90a3\u4e48\u5982\u679c\u5e42\u6b21\u4e0d\u53d8\uff0c\u628a\u7d20\u6570\u53d8\u6210\u6570\u503c\u66f4\u5c0f\u7684\u7d20\u6570\uff0c\u90a3\u4e48\u6b64\u65f6\u56e0\u5b50\u4e2a\u6570\u4e0d\u53d8\uff0c\u4f46\u662f n n \u7684\u6570\u503c\u53d8\u5c0f\u4e86\u3002\u4ea4\u6362\u5230\u4ece 2 2 \u5f00\u59cb\u7684\u8fde\u7eed\u7d20\u6570\u7684\u65f6\u5019 n n \u503c\u6700\u5c0f\u3002 \u5982\u679c\u6570\u503c\u5c0f\u7684\u7d20\u6570\u7684\u5e42\u6b21\u5c0f\u4e8e\u6570\u503c\u5927\u7684\u7d20\u6570\u7684\u5e42\uff0c\u90a3\u4e48\u5982\u679c\u628a\u8fd9\u4e24\u4e2a\u7d20\u6570\u4ea4\u6362\u4f4d\u7f6e\uff08\u5e42\u6b21\u4e0d\u53d8\uff09\uff0c\u90a3\u4e48\u6240\u5f97\u7684 n n \u56e0\u5b50\u6570\u91cf\u4e0d\u53d8\uff0c\u4f46\u662f n n \u7684\u503c\u53d8\u5c0f\u3002 \u53e6\u5916\u8fd8\u6709\u4e24\u4e2a\u95ee\u9898\uff0c \u5bf9\u4e8e\u7ed9\u5b9a\u7684 n n \uff0c\u8981\u679a\u4e3e\u5230\u54ea\u4e00\u4e2a\u7d20\u6570\u5462\uff1f \u6700\u6781\u7aef\u7684\u60c5\u51b5\u5927\u4e0d\u4e86\u5c31\u662f n=p_{1}*p_{2} \\cdots p_{n} n=p_{1}*p_{2} \\cdots p_{n} \uff0c\u6240\u4ee5\u53ea\u8981\u8fde\u7eed\u7d20\u6570\u8fde\u4e58\u5230\u521a\u597d\u5c0f\u4e8e\u7b49\u4e8e n n \u5c31\u53ef\u4ee5\u7684\u5462\u3002\u518d\u5927\u4e86\uff0c\u8fde\u5168\u90fd\u4e00\u6b21\u5e42\uff0c\u90fd\u7528\u4e0d\u4e86\uff0c\u5f53\u7136\u5c31\u662f\u7528\u4e0d\u5230\u7684\u5566\uff01 \u6211\u4eec\u8981\u679a\u4e3e\u5230\u591a\u5c11\u6b21\u5e42\u5462\uff1f \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u6781\u7aef\u60c5\u51b5\uff0c\u5f53\u6211\u4eec\u6700\u5c0f\u7684\u7d20\u6570\u7684\u67d0\u4e2a\u5e42\u6b21\u5df2\u7ecf\u6bd4\u6240\u7ed9\u7684 n n \uff08\u7684\u6700\u5927\u503c\uff09\u5927\u7684\u8bdd\uff0c\u90a3\u4e48\u5c55\u5f00\u6210\u5176\u4ed6\u7684\u5f62\u5f0f\uff0c\u6700\u5927\u5e42\u6b21\u4e00\u5b9a\u5c0f\u4e8e\u8fd9\u4e2a\u5e42\u6b21\u3002unsigned long long \u7684\u6700\u5927\u503c\u662f 2 \u7684 64 \u6b21\u65b9\uff0c\u6240\u4ee5\u6211\u8fd9\u8fb9\u4e60\u60ef\u5c55\u5f00\u6210 2 \u7684 64 \u6b21\u65b9\u3002 \u7ec6\u8282\u6709\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5177\u4f53\u5982\u4f55\u5177\u4f53\u5b9e\u73b0\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u628a\u5f53\u524d\u8d70\u5230\u6bcf\u4e00\u4e2a\u7d20\u6570\u524d\u9762\u7684\u65f6\u5019\u5217\u4e3e\u6210\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u4e00\u5c42\u5c42\u7684\u53bb\u627e\u3002\u627e\u5230\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u5462\uff1f \u5f53\u524d\u8d70\u5230\u7684\u6570\u5b57\u5df2\u7ecf\u5927\u4e8e\u6211\u4eec\u60f3\u8981\u7684\u6570\u5b57\u4e86 \u5f53\u524d\u679a\u4e3e\u7684\u56e0\u5b50\u5df2\u7ecf\u7528\u4e0d\u5230\u4e86\uff08\u548c 1 1 \u91cd\u590d\u4e86\u563b\u563b\u563b\uff09 \u5f53\u524d\u56e0\u5b50\u5927\u4e8e\u6211\u4eec\u60f3\u8981\u7684\u56e0\u5b50\u4e86 \u5f53\u524d\u56e0\u5b50\u6b63\u597d\u662f\u6211\u4eec\u60f3\u8981\u7684\u56e0\u5b50\uff08\u6b64\u65f6\u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u6700\u5c0f ans ans \uff09 \u7136\u540e dfs \u91cc\u9762\u4e0d\u65ad\u4e00\u5c42\u4e00\u5c42\u679a\u4e3e\u6b21\u6570\u7ee7\u7eed\u5f80\u4e0b\u8fed\u4ee3\u5c31\u597d\u5566~~ \u5e38\u89c1\u9898\u578b \u00b6 \u6c42\u56e0\u5b50\u6570\u4e00\u5b9a\u7684\u6700\u5c0f\u6570 \u00b6 \u9898\u76ee\u94fe\u63a5\uff1a http://codeforces.com/problemset/problem/27/E \u5bf9\u4e8e\u8fd9\u79cd\u9898\uff0c\u6211\u4e48\u53ea\u8981\u4ee5\u56e0\u5b50\u6570\u4e3a dfs \u7684\u8fd4\u56de\u6761\u4ef6\u57fa\u51c6\uff0c\u4e0d\u65ad\u66f4\u65b0\u627e\u5230\u7684\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86 \u4e0a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <stdio.h> #define ULL unsigned long long #define INF ~0ULL int p [ 16 ] = { 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 }; ULL ans ; int n ; // depth: \u5f53\u524d\u5728\u679a\u4e3e\u7b2c\u51e0\u4e2a\u7d20\u6570\u3002num: \u5f53\u524d\u56e0\u5b50\u6570\u3002 // temp: \u5f53\u524d\u56e0\u5b50\u6570\u91cf\u4e3a num // \u7684\u65f6\u5019\u7684\u6570\u503c\u3002up\uff1a\u4e0a\u4e00\u4e2a\u7d20\u6570\u7684\u5e42\uff0c\u8fd9\u6b21\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5e42\u6b21\u561b void dfs ( int depth , int temp , int num , int up ) { if ( num > n || depth >= 16 ) return ; if ( num == n && ans > temp ) { ans = temp ; return ; } for ( int i = 1 ; i <= up ; i ++ ) { if ( temp / p [ depth ] > ans ) break ; dfs ( depth + 1 , temp = temp * p [ depth ], num * ( i + 1 ), i ); } } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { ans = INF ; dfs ( 0 , 1 , 1 , 64 ); printf ( \"%d \\n \" , ans ); } return 0 ; } \u6c42 n \u4ee5\u5185\u56e0\u5b50\u6570\u6700\u591a\u7684\u6570 \u00b6 http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=1562 \u601d\u8def\u540c\u4e0a\uff0c\u53ea\u4e0d\u8fc7\u8981\u6539\u6539 dfs \u7684\u8fd4\u56de\u6761\u4ef6\u3002\u6ce8\u610f\u8fd9\u6837\u7684\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\uff0c\u6211\u4e00\u5f00\u59cb\u7528\u4e86 int\uff0c\u5e94\u8be5\u662f\u6ea2\u51fa\u4e86\uff0c\u5728\u5faa\u73af\u91cc\u53ef\u80fd\u5c31\u51fa\u4e0d\u6765\u4e86\u5c31\u8d85\u65f6\u4e86\u3002\u4e0a\u4ee3\u7801\uff0c0ms \u8fc7\u3002\u6ce8\u91ca\u5c31\u6ca1\u5fc5\u8981\u5199\u4e86\u4e0a\u9762\u5199\u7684\u5f88\u6e05\u695a\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <cstdio> #include <iostream> #define ULL unsigned long long int p [ 16 ] = { 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 }; ULL n ; ULL ans , ans_num ; // ans \u4e3a n \u4ee5\u5185\u7684\u6700\u5927\u53cd\u7d20\u6570\uff08\u4f1a\u6301\u7eed\u66f4\u65b0\uff09\uff0cans_sum \u4e3a ans // \u7684\u56e0\u5b50\u6570\u3002 void dfs ( int depth , ULL temp , ULL num , int up ) { if ( depth >= 16 || temp > n ) return ; if ( num > ans_num ) { ans = temp ; ans_num = num ; } if ( num == ans_num && ans > temp ) ans = temp ; for ( int i = 1 ; i <= up ; i ++ ) { if ( temp * p [ depth ] > n ) break ; dfs ( depth + 1 , temp *= p [ depth ], num * ( i + 1 ), i ); } return ; } int main () { while ( scanf ( \"%lld\" , & n ) != EOF ) { ans_num = 0 ; dfs ( 0 , 1 , 1 , 60 ); printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"\u7d20\u6570"},{"location":"math/prime/#_1","text":"\u6211\u4eec\u81ea\u7136\u5730\u4f1a\u60f3\u5230\uff0c\u5982\u4f55\u7528\u8ba1\u7b97\u673a\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u7d20\u6570\u5462\uff1f","title":"\u7d20\u6570\u5224\u5b9a"},{"location":"math/prime/#_2","text":"\u81ea\u7136\u53ef\u4ee5\u679a\u4e3e\u4ece\u5c0f\u5230\u5927\u7684\u6bcf\u4e2a\u6570\u770b\u662f\u5426\u80fd\u6574\u9664 1 2 3 4 5 bool isPrime ( a ) { for ( int i = 2 ; i < a ; ++ i ) if ( a % i == 0 ) return 0 ; return 1 ; } \u8fd9\u6837\u505a\u662f\u5341\u5206\u7a33\u59a5\u4e86\uff0c\u4f46\u662f\u771f\u7684\u6709\u5fc5\u8981\u6bcf\u4e2a\u6570\u90fd\u53bb\u5224\u65ad\u5417\uff1f \u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u5982\u679c x x \u662f a a \u7684\u7ea6\u6570\uff0c\u90a3\u4e48 \\frac{a}{x} \\frac{a}{x} \u4e5f\u662f a a \u7684\u7ea6\u6570\u3002 \u8fd9\u4e2a\u7ed3\u8bba\u544a\u8bc9\u6211\u4eec\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 (x, \\frac{a}{x} ) (x, \\frac{a}{x} ) \uff0c\u53ea\u9700\u8981\u68c0\u9a8c\u5176\u4e2d\u7684\u4e00\u4e2a\u5c31\u597d\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u4e4b\u8003\u5bdf\u6bcf\u4e00\u5bf9\u91cc\u9762\u5c0f\u7684\u90a3\u4e2a\u6570\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u6240\u6709\u8fd9\u4e9b\u8f83\u5c0f\u6570\u5c31\u662f [1, \\sqrt{a}] [1, \\sqrt{a}] \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u3002 \u7531\u4e8e 1 1 \u80af\u5b9a\u662f\u7ea6\u6570\uff0c\u6240\u4ee5\u4e0d\u68c0\u9a8c\u5b83\u3002 1 2 3 4 5 bool isPrime ( a ) { for ( int i = 2 ; i * i <= a ; ++ i ) if ( a % i ) return 0 ; return 1 ; }","title":"\u66b4\u529b\u505a\u6cd5"},{"location":"math/prime/#miller-rabin","text":"Miller-Rabin \u7d20\u6027\u6d4b\u8bd5\uff08Miller\u2013Rabin primality test\uff09\u662f\u8fdb\u9636\u7684\u7d20\u6570\u5224\u5b9a\u65b9\u6cd5\uff0c\u5177\u6709\u6bd4\u66b4\u529b\u505a\u6cd5\u66f4\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f46\u662f\u4ee3\u7801\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u5728\u6bd4\u8d5b\u4e2d\u4f7f\u7528\u8f83\u5c11\u3002","title":"Miller-Rabin \u7d20\u6027\u6d4b\u8bd5"},{"location":"math/prime/#fermat","text":"\u6211\u4eec\u53ef\u4ee5\u6839\u636e \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u5f97\u51fa\u4e00\u79cd\u68c0\u9a8c\u7d20\u6570\u7684\u601d\u8def\uff1a \u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u4e0d\u65ad\u5730\u9009\u53d6\u5728 [2, n-1] [2, n-1] \u4e2d\u7684\u57fa a a \uff0c\u5e76\u68c0\u9a8c\u662f\u5426\u6bcf\u6b21\u90fd\u6709 a^{n-1} \\equiv 1 \\pmod n a^{n-1} \\equiv 1 \\pmod n 1 2 3 4 5 6 7 bool millerRabin ( int n ) { for ( int i = 1 ; i <= s ; ++ i ) { int a = rand () % ( n - 2 ) + 2 ; if ( quickPow ( a , n - 1 , n ) != 1 ) return 0 ; } return 1 ; } \u5f88\u9057\u61be\uff0c\u8d39\u9a6c\u5c0f\u5b9a\u7406\u7684\u9006\u5b9a\u7406\u5e76\u4e0d\u6210\u7acb\uff0c\u6362\u8a00\u4e4b\uff0c\u6ee1\u8db3\u4e86 a^{n-1} \\equiv 1 \\pmod n a^{n-1} \\equiv 1 \\pmod n \uff0c n n \u4e5f\u4e0d\u4e00\u5b9a\u662f\u7d20\u6570\u3002","title":"Fermat \u7d20\u6027\u6d4b\u8bd5"},{"location":"math/prime/#_3","text":"\u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\u968f\u673a\u5730\u9009\u62e9 a a \uff0c\u5f88\u5927\u7a0b\u5ea6\u5730\u964d\u4f4e\u4e86\u72af\u9519\u7684\u6982\u7387\u3002\u4f46\u662f\u4ecd\u6709\u4e00\u7c7b\u6570\uff0c\u4e0a\u9762\u7684\u505a\u6cd5\u5e76\u4e0d\u80fd\u51c6\u786e\u5730\u5224\u65ad\u3002 \u5bf9\u4e8e\u5408\u6570 n n \uff0c\u5982\u679c\u5bf9\u4e8e\u6240\u6709\u6b63\u6574\u6570 a a \uff0c a a \u548c n n \u4e92\u7d20\uff0c\u90fd\u6709\u540c\u4f59\u5f0f a^{n-1} \\equiv 1 \\pmod n a^{n-1} \\equiv 1 \\pmod n \u6210\u7acb\uff0c\u5219\u5408\u6570 n n \u4e3a\u5361\u8fc8\u514b\u5c14\u6570\uff08Carmichael Number\uff09\uff0c\u53c8\u79f0\u4e3a\u8d39\u9a6c\u4f2a\u7d20\u6570\u3002 \u6bd4\u5982\uff0c 341 = 11 \\times 31 341 = 11 \\times 31 \u5c31\u662f\u4e00\u4e2a\u5361\u8fc8\u514b\u5c14\u6570\u3002 \u800c\u4e14\u6211\u4eec\u77e5\u9053\uff0c\u82e5 n n \u4e3a\u5361\u8fc8\u514b\u5c14\u6570\uff0c\u5219 m=2^{n}-1 m=2^{n}-1 \u4e5f\u662f\u4e00\u4e2a\u5361\u8fc8\u514b\u5c14\u6570\uff0c\u4ece\u800c\u5361\u8fc8\u514b\u5c14\u6570\u7684\u4e2a\u6570\u662f\u65e0\u7a77\u7684\u3002","title":"\u5361\u8fc8\u514b\u5c14\u6570"},{"location":"math/prime/#_4","text":"\u5982\u679c p p \u662f\u5947\u7d20\u6570\uff0c\u5219 x^2 \\equiv 1 \\bmod p x^2 \\equiv 1 \\bmod p \u7684\u89e3\u4e3a x = 1 x = 1 \u6216\u8005 x = p - 1 (\\bmod p) x = p - 1 (\\bmod p) ;","title":"\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406"},{"location":"math/prime/#_5","text":"\u6839\u636e\u5361\u8fc8\u514b\u5c14\u6570\u7684\u6027\u8d28\uff0c\u53ef\u77e5\u5176\u4e00\u5b9a\u4e0d\u662f p^e p^e \u3002 \u4e0d\u59a8\u5c06\u8d39\u9a6c\u5c0f\u5b9a\u7406\u548c\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u7ed3\u5408\u8d77\u6765\u4f7f\u7528\uff1a \u5c06 n\u22121 n\u22121 \u5206\u89e3\u4e3a n\u22121=u \\times 2^t n\u22121=u \\times 2^t \uff0c\u4e0d\u65ad\u5730\u5bf9 u u \u8fdb\u884c\u5e73\u65b9\u64cd\u4f5c\uff0c\u82e5\u53d1\u73b0\u975e\u5e73\u51e1\u5e73\u65b9\u6839\u65f6\u5373\u53ef\u5224\u65ad\u51fa\u5176\u4e0d\u662f\u7d20\u6570\u3002 \u6bd4\u8f83\u6b63\u786e\u7684 Miller Rabin\uff1a\uff08\u6765\u81ea fjzzq2002\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 bool millerRabbin ( int n ) { int a = n - 1 , b = 0 ; while ( a % 2 == 0 ) a /= 2 , ++ b ; for ( int i = 1 , j ; i <= s ; ++ i ) { int x = rand () % ( n - 2 ) + 2 , v = quickPow ( x , a , n ); if ( v == 1 || v == n - 1 ) continue ; for ( j = 0 ; j < b ; ++ j ) { v = ( long long ) v * v % n ; if ( v == n - 1 ) break ; } if ( j >= b ) return 0 ; } return 1 ; }","title":"\u5b9e\u73b0"},{"location":"math/prime/#_6","text":"http://www.matrix67.com/blog/archives/234 https://blog.bill.moe/miller-rabin-notes/","title":"\u53c2\u8003"},{"location":"math/prime/#_7","text":"","title":"\u53cd\u7d20\u6570"},{"location":"math/prime/#_8","text":"\u5982\u679c\u67d0\u4e2a\u6b63\u6574\u6570 n n \u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff0c\u5219\u79f0\u4e3a\u662f\u53cd\u7d20\u6570\uff1a \u4efb\u4f55\u5c0f\u4e8e n n \u7684\u6b63\u6570\u7684\u7ea6\u6570\u4e2a\u6570\u90fd\u5c0f\u4e8e n n \u7684\u7ea6\u6570\u4e2a\u6570 \u6ce8\uff1a\u6ce8\u610f\u533a\u5206 emirp \uff0c\u5b83\u662f\u7528\u6765\u8868\u793a\u4ece\u540e\u5411\u524d\u5199\u8bfb\u662f\u7d20\u6570\u7684\u6570\u3002","title":"\u5b9a\u4e49"},{"location":"math/prime/#_9","text":"\uff08\u672c\u6bb5\u8f6c\u8f7d\u81ea \u6843\u9171\u7684\u7b97\u6cd5\u7b14\u8bb0 \uff0c\u539f\u6587\u6233 \u94fe\u63a5 \uff0c\u5df2\u83b7\u5f97\u4f5c\u8005\u6388\u6743\uff09 \u5176\u5b9e\u987e\u540d\u601d\u4e49\uff0c\u7d20\u6570\u5c31\u662f\u56e0\u5b50\u53ea\u6709\u4e24\u4e2a\u7684\u6570\uff0c\u90a3\u4e48\u53cd\u7d20\u6570\uff0c\u5c31\u662f\u56e0\u5b50\u6700\u591a\u7684\u6570\uff08\u5e76\u4e14\u56e0\u5b50\u4e2a\u6570\u76f8\u540c\u7684\u65f6\u5019\u503c\u6700\u5c0f\uff09\uff0c\u6240\u4ee5\u53cd\u7d20\u6570\u662f\u76f8\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408\u6765\u8bf4\u7684\u3002 \u6211\u6240\u7406\u89e3\u7684\u53cd\u7d20\u6570\u5b9a\u4e49\u5c31\u662f\uff0c\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u56e0\u7d20\u6700\u591a\u5e76\u4e14\u503c\u6700\u5c0f\u7684\u6570\uff0c\u5c31\u662f\u53cd\u7d20\u6570\u3002 \u90a3\u4e48\uff0c\u5982\u4f55\u6765\u6c42\u89e3\u53cd\u7d20\u6570\u5462\uff1f \u9996\u5148\uff0c\u65e2\u7136\u8981\u6c42\u56e0\u5b50\u6570\uff0c\u6211\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u7d20\u56e0\u5b50\u5206\u89e3\u3002\u628a n n \u5206\u89e3\u6210 n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d p p \u662f\u7d20\u6570\uff0c k k \u4e3a\u4ed6\u7684\u6307\u6570\u3002\u8fd9\u6837\u7684\u8bdd\u603b\u56e0\u5b50\u4e2a\u6570\u5c31\u662f (k_1+1) \\times (k_2+1) \\times (k_3+1) \\cdots \\times (k_n+1) (k_1+1) \\times (k_2+1) \\times (k_3+1) \\cdots \\times (k_n+1) \u3002 \u4f46\u662f\u663e\u7136\u8d28\u56e0\u5b50\u5206\u89e3\u7684\u590d\u6742\u5ea6\u662f\u5f88\u9ad8\u7684\uff0c\u5e76\u4e14\u524d\u4e00\u4e2a\u6570\u7684\u7ed3\u679c\u4e0d\u80fd\u88ab\u540e\u9762\u5229\u7528\u3002\u6240\u4ee5\u8981\u6362\u4e2a\u65b9\u6cd5\u3002 \u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b\u53cd\u7d20\u6570\u7684\u7279\u70b9\u3002 \u53cd\u7d20\u6570\u80af\u5b9a\u662f\u4ece 2 2 \u5f00\u59cb\u7684\u8fde\u7eed\u7d20\u6570\u7684\u5e42\u6b21\u5f62\u5f0f\u7684\u4e58\u79ef\u3002 \u6570\u503c\u5c0f\u7684\u7d20\u6570\u7684\u5e42\u6b21\u5927\u4e8e\u7b49\u4e8e\u6570\u503c\u5927\u7684\u7d20\u6570\uff0c\u5373 n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} n=p_{1}^{k_{1}}p_{2}^{k_{2}} \\cdots p_{n}^{k_{n}} \u4e2d\uff0c\u6709 k_1 \\geq k_2 \\geq k_3 \\geq \\cdots \\geq k_n k_1 \\geq k_2 \\geq k_3 \\geq \\cdots \\geq k_n \u89e3\u91ca\uff1a \u5982\u679c\u4e0d\u662f\u4ece 2 2 \u5f00\u59cb\u7684\u8fde\u7eed\u7d20\u6570\uff0c\u90a3\u4e48\u5982\u679c\u5e42\u6b21\u4e0d\u53d8\uff0c\u628a\u7d20\u6570\u53d8\u6210\u6570\u503c\u66f4\u5c0f\u7684\u7d20\u6570\uff0c\u90a3\u4e48\u6b64\u65f6\u56e0\u5b50\u4e2a\u6570\u4e0d\u53d8\uff0c\u4f46\u662f n n \u7684\u6570\u503c\u53d8\u5c0f\u4e86\u3002\u4ea4\u6362\u5230\u4ece 2 2 \u5f00\u59cb\u7684\u8fde\u7eed\u7d20\u6570\u7684\u65f6\u5019 n n \u503c\u6700\u5c0f\u3002 \u5982\u679c\u6570\u503c\u5c0f\u7684\u7d20\u6570\u7684\u5e42\u6b21\u5c0f\u4e8e\u6570\u503c\u5927\u7684\u7d20\u6570\u7684\u5e42\uff0c\u90a3\u4e48\u5982\u679c\u628a\u8fd9\u4e24\u4e2a\u7d20\u6570\u4ea4\u6362\u4f4d\u7f6e\uff08\u5e42\u6b21\u4e0d\u53d8\uff09\uff0c\u90a3\u4e48\u6240\u5f97\u7684 n n \u56e0\u5b50\u6570\u91cf\u4e0d\u53d8\uff0c\u4f46\u662f n n \u7684\u503c\u53d8\u5c0f\u3002 \u53e6\u5916\u8fd8\u6709\u4e24\u4e2a\u95ee\u9898\uff0c \u5bf9\u4e8e\u7ed9\u5b9a\u7684 n n \uff0c\u8981\u679a\u4e3e\u5230\u54ea\u4e00\u4e2a\u7d20\u6570\u5462\uff1f \u6700\u6781\u7aef\u7684\u60c5\u51b5\u5927\u4e0d\u4e86\u5c31\u662f n=p_{1}*p_{2} \\cdots p_{n} n=p_{1}*p_{2} \\cdots p_{n} \uff0c\u6240\u4ee5\u53ea\u8981\u8fde\u7eed\u7d20\u6570\u8fde\u4e58\u5230\u521a\u597d\u5c0f\u4e8e\u7b49\u4e8e n n \u5c31\u53ef\u4ee5\u7684\u5462\u3002\u518d\u5927\u4e86\uff0c\u8fde\u5168\u90fd\u4e00\u6b21\u5e42\uff0c\u90fd\u7528\u4e0d\u4e86\uff0c\u5f53\u7136\u5c31\u662f\u7528\u4e0d\u5230\u7684\u5566\uff01 \u6211\u4eec\u8981\u679a\u4e3e\u5230\u591a\u5c11\u6b21\u5e42\u5462\uff1f \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u6781\u7aef\u60c5\u51b5\uff0c\u5f53\u6211\u4eec\u6700\u5c0f\u7684\u7d20\u6570\u7684\u67d0\u4e2a\u5e42\u6b21\u5df2\u7ecf\u6bd4\u6240\u7ed9\u7684 n n \uff08\u7684\u6700\u5927\u503c\uff09\u5927\u7684\u8bdd\uff0c\u90a3\u4e48\u5c55\u5f00\u6210\u5176\u4ed6\u7684\u5f62\u5f0f\uff0c\u6700\u5927\u5e42\u6b21\u4e00\u5b9a\u5c0f\u4e8e\u8fd9\u4e2a\u5e42\u6b21\u3002unsigned long long \u7684\u6700\u5927\u503c\u662f 2 \u7684 64 \u6b21\u65b9\uff0c\u6240\u4ee5\u6211\u8fd9\u8fb9\u4e60\u60ef\u5c55\u5f00\u6210 2 \u7684 64 \u6b21\u65b9\u3002 \u7ec6\u8282\u6709\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5177\u4f53\u5982\u4f55\u5177\u4f53\u5b9e\u73b0\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u628a\u5f53\u524d\u8d70\u5230\u6bcf\u4e00\u4e2a\u7d20\u6570\u524d\u9762\u7684\u65f6\u5019\u5217\u4e3e\u6210\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u4e00\u5c42\u5c42\u7684\u53bb\u627e\u3002\u627e\u5230\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u5462\uff1f \u5f53\u524d\u8d70\u5230\u7684\u6570\u5b57\u5df2\u7ecf\u5927\u4e8e\u6211\u4eec\u60f3\u8981\u7684\u6570\u5b57\u4e86 \u5f53\u524d\u679a\u4e3e\u7684\u56e0\u5b50\u5df2\u7ecf\u7528\u4e0d\u5230\u4e86\uff08\u548c 1 1 \u91cd\u590d\u4e86\u563b\u563b\u563b\uff09 \u5f53\u524d\u56e0\u5b50\u5927\u4e8e\u6211\u4eec\u60f3\u8981\u7684\u56e0\u5b50\u4e86 \u5f53\u524d\u56e0\u5b50\u6b63\u597d\u662f\u6211\u4eec\u60f3\u8981\u7684\u56e0\u5b50\uff08\u6b64\u65f6\u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u6700\u5c0f ans ans \uff09 \u7136\u540e dfs \u91cc\u9762\u4e0d\u65ad\u4e00\u5c42\u4e00\u5c42\u679a\u4e3e\u6b21\u6570\u7ee7\u7eed\u5f80\u4e0b\u8fed\u4ee3\u5c31\u597d\u5566~~","title":"\u7b80\u4ecb"},{"location":"math/prime/#_10","text":"","title":"\u5e38\u89c1\u9898\u578b"},{"location":"math/prime/#_11","text":"\u9898\u76ee\u94fe\u63a5\uff1a http://codeforces.com/problemset/problem/27/E \u5bf9\u4e8e\u8fd9\u79cd\u9898\uff0c\u6211\u4e48\u53ea\u8981\u4ee5\u56e0\u5b50\u6570\u4e3a dfs \u7684\u8fd4\u56de\u6761\u4ef6\u57fa\u51c6\uff0c\u4e0d\u65ad\u66f4\u65b0\u627e\u5230\u7684\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86 \u4e0a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <stdio.h> #define ULL unsigned long long #define INF ~0ULL int p [ 16 ] = { 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 }; ULL ans ; int n ; // depth: \u5f53\u524d\u5728\u679a\u4e3e\u7b2c\u51e0\u4e2a\u7d20\u6570\u3002num: \u5f53\u524d\u56e0\u5b50\u6570\u3002 // temp: \u5f53\u524d\u56e0\u5b50\u6570\u91cf\u4e3a num // \u7684\u65f6\u5019\u7684\u6570\u503c\u3002up\uff1a\u4e0a\u4e00\u4e2a\u7d20\u6570\u7684\u5e42\uff0c\u8fd9\u6b21\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5e42\u6b21\u561b void dfs ( int depth , int temp , int num , int up ) { if ( num > n || depth >= 16 ) return ; if ( num == n && ans > temp ) { ans = temp ; return ; } for ( int i = 1 ; i <= up ; i ++ ) { if ( temp / p [ depth ] > ans ) break ; dfs ( depth + 1 , temp = temp * p [ depth ], num * ( i + 1 ), i ); } } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { ans = INF ; dfs ( 0 , 1 , 1 , 64 ); printf ( \"%d \\n \" , ans ); } return 0 ; }","title":"\u6c42\u56e0\u5b50\u6570\u4e00\u5b9a\u7684\u6700\u5c0f\u6570"},{"location":"math/prime/#n","text":"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=1562 \u601d\u8def\u540c\u4e0a\uff0c\u53ea\u4e0d\u8fc7\u8981\u6539\u6539 dfs \u7684\u8fd4\u56de\u6761\u4ef6\u3002\u6ce8\u610f\u8fd9\u6837\u7684\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\uff0c\u6211\u4e00\u5f00\u59cb\u7528\u4e86 int\uff0c\u5e94\u8be5\u662f\u6ea2\u51fa\u4e86\uff0c\u5728\u5faa\u73af\u91cc\u53ef\u80fd\u5c31\u51fa\u4e0d\u6765\u4e86\u5c31\u8d85\u65f6\u4e86\u3002\u4e0a\u4ee3\u7801\uff0c0ms \u8fc7\u3002\u6ce8\u91ca\u5c31\u6ca1\u5fc5\u8981\u5199\u4e86\u4e0a\u9762\u5199\u7684\u5f88\u6e05\u695a\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <cstdio> #include <iostream> #define ULL unsigned long long int p [ 16 ] = { 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 }; ULL n ; ULL ans , ans_num ; // ans \u4e3a n \u4ee5\u5185\u7684\u6700\u5927\u53cd\u7d20\u6570\uff08\u4f1a\u6301\u7eed\u66f4\u65b0\uff09\uff0cans_sum \u4e3a ans // \u7684\u56e0\u5b50\u6570\u3002 void dfs ( int depth , ULL temp , ULL num , int up ) { if ( depth >= 16 || temp > n ) return ; if ( num > ans_num ) { ans = temp ; ans_num = num ; } if ( num == ans_num && ans > temp ) ans = temp ; for ( int i = 1 ; i <= up ; i ++ ) { if ( temp * p [ depth ] > n ) break ; dfs ( depth + 1 , temp *= p [ depth ], num * ( i + 1 ), i ); } return ; } int main () { while ( scanf ( \"%lld\" , & n ) != EOF ) { ans_num = 0 ; dfs ( 0 , 1 , 1 , 60 ); printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"\u6c42 n \u4ee5\u5185\u56e0\u5b50\u6570\u6700\u591a\u7684\u6570"},{"location":"math/primitive-root/","text":"","title":"\u539f\u6839"},{"location":"math/quick-pow/","text":"\u5feb\u901f\u5e42\uff0c\u662f\u4e00\u79cd\u6c42 a^b \\bmod p a^b \\bmod p \u7684\u65b9\u6cd5\uff0c\u5f97\u76ca\u4e8e\u5c06\u6307\u6570\u6309\u4e8c\u8fdb\u5236\u62c6\u5f00\u7684\u601d\u60f3\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6839\u636e\u6a21\u8fd0\u7b97\u7684\u6027\u8d28\uff0c a \\times b \\bmod p = ((a \\bmod p) \\times b) \\bmod p a \\times b \\bmod p = ((a \\bmod p) \\times b) \\bmod p \u3002\u90a3\u4e48\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a a^b \\mod p a^b \\mod p \u5206\u89e3\u6210\u4e00\u7cfb\u5217\u6bd4\u8f83\u5c0f\u7684\u6570\u7684\u4e58\u79ef\u3002 \u5982\u679c\u628a b b \u5199\u4f5c\u4e8c\u8fdb\u5236\u4e3a a_ta_{t-1} \\cdots a_1a_0 a_ta_{t-1} \\cdots a_1a_0 \uff0c\u90a3\u4e48\u6709\uff1a b = a_t2^2 + a_{t-1}2^{t-1} + a_{t-2}2^{t-2} + \\cdots + a_12^1 + a_02^0 b = a_t2^2 + a_{t-1}2^{t-1} + a_{t-2}2^{t-2} + \\cdots + a_12^1 + a_02^0 \uff0c\u5176\u4e2d a_i a_i \u662f 0 \u6216\u8005 1\u3002 \u90a3\u4e48\u5c31\u6709 \\begin{aligned} a^b \\bmod p & = (a^{a_t 2^t + \\cdots + a_0 2^0}) \\bmod p \\\\\\\\ & = (..(a^{a_0 2^0} \\bmod p) \\times \\cdots \\times a^{a_52^5}) \\bmod p \\end{aligned} \\begin{aligned} a^b \\bmod p & = (a^{a_t 2^t + \\cdots + a_0 2^0}) \\bmod p \\\\\\\\ & = (..(a^{a_0 2^0} \\bmod p) \\times \\cdots \\times a^{a_52^5}) \\bmod p \\end{aligned} \u6839\u636e\u4e0a\u5f0f\u6211\u4eec\u53d1\u73b0\uff0c\u539f\u95ee\u9898\u88ab\u6211\u4eec\u8f6c\u5316\u6210\u4e86\u5f62\u5f0f\u76f8\u540c\u7684\u5b50\u95ee\u9898\u7684\u4e58\u79ef\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c a^{2^{i+1}} \\bmod c = (a^{2^i})^2 \\bmod c a^{2^{i+1}} \\bmod c = (a^{2^i})^2 \\bmod c \uff0c\u53ef\u4ee5\u518d\u5e38\u6570\u65f6\u95f4\u5185\u4ece 2^i 2^i \u9879\u63a8\u51fa 2^{i+1} 2^{i+1} \u9879\u3002\u4e8e\u662f\uff0c\u539f\u95ee\u9898\u603b\u7684\u590d\u6742\u5ea6\u5c31\u662f O(logb) O(logb) \u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u5feb\u901f\u5e42\u7684\u601d\u60f3\u4e0d\u4ec5\u7528\u4e8e\u6574\u6570\u4e58\u6cd5\uff0c\u4e5f\u53ef\u7528\u4e8e\u5927\u6574\u6570\u52a0\u6cd5\uff0c\u77e9\u9635\u5e42\u8fd0\u7b97\u7b49\u573a\u5408\u4e2d\u3002 \u5982\u679c\u4f60\u770b\u4e0d\u61c2\uff0c\u90a3\u5c31\u7b80\u5355\u70b9\u8bf4\u5427\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c a^{10} a^{10} \u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u5f0f\u5b50\uff1a a \\times a \\times a \\times a \\times a \\times a \\times a \\times a \\times a \\times a a \\times a \\times a \\times a \\times a \\times a \\times a \\times a \\times a \\times a \u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c a^{10} a^{10} \u53ef\u4ee5\u8f6c\u5316\u6210 (a \\times a)^{5} (a \\times a)^{5} \\left(a \\times a \\right) \\times\\left(a \\times a \\right) \\times \\left(a \\times a \\right) \\times \\left(a \\times a \\right) \\times \\left(a \\times a \\right) \\left(a \\times a \\right) \\times\\left(a \\times a \\right) \\times \\left(a \\times a \\right) \\times \\left(a \\times a \\right) \\times \\left(a \\times a \\right) \u8fd9\u65f6\uff0c\u518d\u8fdb\u884c\u5206\u89e3\uff0c\u6211\u4eec\u5047\u8bbe a' =a \\times a a' =a \\times a \uff0c\u53ef\u662f\u6211\u4eec\u53d1\u73b0\uff0ca \u4e0d\u80fd\u6b63\u597d\u5206\u5b8c\uff0c\u4e8e\u662f\u6211\u4eec\u5355\u72ec\u62ce\u51fa\u6765\u4e00\u4e2a a'\uff0c\u5c31\u8f6c\u5316\u6210\u4e86 {a' \\times a' }^{2} \\times a' {a' \\times a' }^{2} \\times a' \\left (a' \\times a'\\right) \\times\\left (a' \\times a'\\right) \\times a' \\left (a' \\times a'\\right) \\times\\left (a' \\times a'\\right) \\times a' \u5982\u6b64\u91cd\u590d\u4e0b\u53bb\u5373\u53ef\uff0c\u7ec8\u6b62\u6761\u4ef6\uff1a a^0=1 a^0=1 \u548c a^1=a a^1=a \u5b9e\u73b0\u4ee3\u7801 \u00b6 \u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u80fd\u5b9e\u73b0\u7684\u95ee\u9898\u6bd4\u8f83\u5355\u8c03\uff0c\u4e0d\u53ef\u4ee5\u89e3\u51b3\u5927\u6574\u6570\u52a0\u6cd5\uff0c\u77e9\u9635\u5e42\u8fd0\u7b97\u3002 \u975e\u9012\u5f52\u7248 \u00b6 1 2 3 4 5 6 7 8 9 10 11 int quickPow ( int a , int b , int c ) { // calculates a^b mod c int res = 1 , bas = a ; while ( b ) { if ( b & 1 ) res = ( LL ) res * bas % c ; // Transform to long long in case of overflow. bas = bas * bas % c ; b >>= 1 ; } return res ; } \u9012\u5f52\u7248 \u00b6 1 2 3 4 5 6 7 8 9 10 11 long long qpow ( long long a , long long b , long long p ) { if ( b == 0 ) return 1 % p ; if ( b == 1 ) return a % p ; if ( b % 2 == 0 ) { long long t = a * a % p ; return qpow ( t , b / 2 , p ); } else { long long t = a * a % p ; return ( qpow ( t , b / 2 , p ) * a ) % p ; } } \u4f8b\u9898 \u505a\u4e00\u505a Luogu P1226","title":"\u5feb\u901f\u5e42"},{"location":"math/quick-pow/#_1","text":"\u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u80fd\u5b9e\u73b0\u7684\u95ee\u9898\u6bd4\u8f83\u5355\u8c03\uff0c\u4e0d\u53ef\u4ee5\u89e3\u51b3\u5927\u6574\u6570\u52a0\u6cd5\uff0c\u77e9\u9635\u5e42\u8fd0\u7b97\u3002","title":"\u5b9e\u73b0\u4ee3\u7801"},{"location":"math/quick-pow/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 int quickPow ( int a , int b , int c ) { // calculates a^b mod c int res = 1 , bas = a ; while ( b ) { if ( b & 1 ) res = ( LL ) res * bas % c ; // Transform to long long in case of overflow. bas = bas * bas % c ; b >>= 1 ; } return res ; }","title":"\u975e\u9012\u5f52\u7248"},{"location":"math/quick-pow/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 long long qpow ( long long a , long long b , long long p ) { if ( b == 0 ) return 1 % p ; if ( b == 1 ) return a % p ; if ( b % 2 == 0 ) { long long t = a * a % p ; return qpow ( t , b / 2 , p ); } else { long long t = a * a % p ; return ( qpow ( t , b / 2 , p ) * a ) % p ; } } \u4f8b\u9898 \u505a\u4e00\u505a Luogu P1226","title":"\u9012\u5f52\u7248"},{"location":"math/sieve/","text":"\u7d20\u6570\u7b5b\u6cd5 \u00b6 \u5982\u679c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u5c0f\u4e8e\u7b49\u4e8e n n \u6709\u591a\u5c11\u4e2a\u7d20\u6570\u5462\uff1f \u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u5bf9\u4e8e\u5c0f\u4e8e\u7b49\u4e8e n n \u7684\u6bcf\u4e2a\u6570\u8fdb\u884c\u4e00\u6b21\u5224\u5b9a\u3002\u8fd9\u79cd\u66b4\u529b\u7684\u505a\u6cd5\u663e\u7136\u4e0d\u80fd\u8fbe\u5230\u6700\u4f18\u590d\u6742\u5ea6\uff0c\u8003\u8651\u5982\u4f55\u4f18\u5316\u3002 \u8003\u8651\u8fd9\u6837\u4e00\u4ef6\u4e8b\u60c5\uff1a\u5982\u679c x x \u662f\u5408\u6570\uff0c\u90a3\u4e48 x x \u7684\u500d\u6570\u4e5f\u4e00\u5b9a\u662f\u5408\u6570\u3002\u5229\u7528\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u53ef\u4ee5\u907f\u514d\u5f88\u591a\u6b21\u4e0d\u5fc5\u8981\u7684\u68c0\u6d4b\u3002 \u5982\u679c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u8003\u8651\u6bcf\u4e2a\u6570\uff0c\u7136\u540e\u540c\u65f6\u628a\u5f53\u524d\u8fd9\u4e2a\u6570\u7684\u6240\u6709\uff08\u6bd4\u81ea\u5df1\u5927\u7684\uff09\u500d\u6570\u8bb0\u4e3a\u5408\u6570\uff0c\u90a3\u4e48\u8fd0\u884c\u7ed3\u675f\u7684\u65f6\u5019\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u6570\u5c31\u662f\u7d20\u6570\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int Eratosthenes ( int n ) { int p = 0 ; for ( int i = 0 ; i <= n ; ++ i ) is_prime [ i ] = 1 ; is_prime [ 0 ] = is_prime [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) { if ( is_prime [ i ]) { prime [ p ++ ] = i ; // prime[p]\u662fi,\u540e\u7f6e\u81ea\u589e\u8fd0\u7b97\u4ee3\u8868\u5f53\u524d\u7d20\u6570\u6570\u91cf for ( int j = 2 * i ; j <= n ; j += i ) is_prime [ j ] = 0 ; //\u662fi\u7684\u500d\u6570\u7684\u5747\u4e0d\u662f\u7d20\u6570 } } return p ; } \u4ee5\u4e0a\u4e3a Eratosthenes \u7b5b\u6cd5 \uff08\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n\\log\\log n) O(n\\log\\log n) \u3002 \u4ee5\u4e0a\u505a\u6cd5\u4ecd\u6709\u4f18\u5316\u7a7a\u95f4\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u9762\u4f3c\u4e4e\u4f1a\u5bf9\u67d0\u4e9b\u6570\u6807\u8bb0\u4e86\u5f88\u591a\u6b21\u5176\u4e3a\u5408\u6570\u3002\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u7701\u6389\u65e0\u610f\u4e49\u7684\u6b65\u9aa4\u5462\uff1f \u7b54\u6848\u5f53\u7136\u662f\uff1a\u6709\uff01 \u5982\u679c\u80fd\u8ba9\u6bcf\u4e2a\u5408\u6570\u90fd\u53ea\u88ab\u6807\u8bb0\u4e00\u6b21\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u5230 O(n) O(n) \u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void init () { phi [ 1 ] = 1 ; f ( i , 2 , MAXN ) { if ( ! vis [ i ]) { phi [ i ] = i - 1 ; pri [ cnt ++ ] = i ; } f ( j , 0 , cnt ) { if (( LL ) i * pri [ j ] >= MAXN ) break ; vis [ i * pri [ j ]] = 1 ; if ( i % pri [ j ]) { phi [ i * pri [ j ]] = phi [ i ] * ( pri [ j ] - 1 ); } else { // i % pri[j] == 0 // \u6362\u8a00\u4e4b\uff0ci \u4e4b\u524d\u88ab pri[j] \u7b5b\u8fc7\u4e86 // \u7531\u4e8e pri \u91cc\u9762\u8d28\u6570\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff0c\u6240\u4ee5 i \u4e58\u4e0a\u5176\u4ed6\u7684\u8d28\u6570\u7684\u7ed3\u679c\u4e00\u5b9a\u4e5f\u662f // pri[j] \u7684\u500d\u6570 \u5b83\u4eec\u90fd\u88ab\u7b5b\u8fc7\u4e86\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u7b5b\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5 break // \u6389\u5c31\u597d\u4e86 phi [ i * pri [ j ]] = phi [ i ] * pri [ j ]; break ; } } } } \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 phi phi \u6570\u7ec4\uff0c\u4f1a\u5728\u4e0b\u9762\u63d0\u5230\u3002 \u4e0a\u9762\u7684\u8fd9\u79cd \u7ebf\u6027\u7b5b\u6cd5 \u4e5f\u79f0\u4e3a Euler \u7b5b\u6cd5 \uff08\u6b27\u62c9\u7b5b\u6cd5\uff09\u3002 Note \u6ce8\u610f\u5230\u7b5b\u6cd5\u6c42\u7d20\u6570\u7684\u540c\u65f6\u4e5f\u5f97\u5230\u4e86\u6bcf\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50 \u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 \u6ce8\u610f\u5230\u5728\u7ebf\u6027\u7b5b\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5408\u6570\u90fd\u662f\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u6389\u3002\u6bd4\u5982\u8bbe p_1 p_1 \u662f n n \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c n' = \\frac{n}{p_1} n' = \\frac{n}{p_1} \uff0c\u90a3\u4e48\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\u4e2d n n \u901a\u8fc7 n' \\times p_1 n' \\times p_1 \u7b5b\u6389\u3002 \u89c2\u5bdf\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u4e24\u4e2a\u90e8\u5206\uff0c\u4e0b\u9762\u5bf9 n' \\bmod p_1 n' \\bmod p_1 \u5206\u60c5\u51b5\u8ba8\u8bba\u3002 \u5982\u679c n' \\bmod p_1 = 0 n' \\bmod p_1 = 0 \uff0c\u90a3\u4e48 n' n' \u5305\u542b\u4e86 n n \u7684\u6240\u6709\u8d28\u56e0\u5b50\u3002 \\begin{aligned} \\varphi(n) & = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times n' \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times \\varphi(n') \\end{aligned} \\begin{aligned} \\varphi(n) & = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times n' \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times \\varphi(n') \\end{aligned} \u90a3\u5982\u679c n' \\bmod p_1 \\neq 0 n' \\bmod p_1 \\neq 0 \u5462\uff0c\u8fd9\u65f6 n' n' \u548c n n \u662f\u4e92\u8d28\u7684\uff0c\u6839\u636e\u6b27\u62c9\u51fd\u6570\u6027\u8d28\uff0c\u6211\u4eec\u6709\uff1a \\begin{aligned} \\varphi(n) & = \\varphi(p_1) \\times \\varphi(n') \\\\\\\\ & = (p_1 - 1) \\times \\varphi(n') \\end{aligned} \\begin{aligned} \\varphi(n) & = \\varphi(p_1) \\times \\varphi(n') \\\\\\\\ & = (p_1 - 1) \\times \\varphi(n') \\end{aligned} 1 2 3 4 5 6 7 8 9 10 void phi_table ( int n , int * phi ) { for ( int i = 2 ; i <= n ; i ++ ) phi [ i ] = 0 ; phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) if ( ! phi [ i ]) for ( int j = i ; j <= n ; j += i ) { if ( ! phi [ j ]) phi [ j ] = j ; phi [ j ] = phi [ j ] / i * ( i - 1 ); } } \u7b5b\u6cd5\u6c42\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \u00b6 \u7b5b\u6cd5\u6c42\u7ea6\u6570\u4e2a\u6570 \u00b6 \u5176\u4ed6\u7ebf\u6027\u51fd\u6570 \u00b6","title":"\u7b5b\u6cd5"},{"location":"math/sieve/#_1","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u5c0f\u4e8e\u7b49\u4e8e n n \u6709\u591a\u5c11\u4e2a\u7d20\u6570\u5462\uff1f \u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u5bf9\u4e8e\u5c0f\u4e8e\u7b49\u4e8e n n \u7684\u6bcf\u4e2a\u6570\u8fdb\u884c\u4e00\u6b21\u5224\u5b9a\u3002\u8fd9\u79cd\u66b4\u529b\u7684\u505a\u6cd5\u663e\u7136\u4e0d\u80fd\u8fbe\u5230\u6700\u4f18\u590d\u6742\u5ea6\uff0c\u8003\u8651\u5982\u4f55\u4f18\u5316\u3002 \u8003\u8651\u8fd9\u6837\u4e00\u4ef6\u4e8b\u60c5\uff1a\u5982\u679c x x \u662f\u5408\u6570\uff0c\u90a3\u4e48 x x \u7684\u500d\u6570\u4e5f\u4e00\u5b9a\u662f\u5408\u6570\u3002\u5229\u7528\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u53ef\u4ee5\u907f\u514d\u5f88\u591a\u6b21\u4e0d\u5fc5\u8981\u7684\u68c0\u6d4b\u3002 \u5982\u679c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u8003\u8651\u6bcf\u4e2a\u6570\uff0c\u7136\u540e\u540c\u65f6\u628a\u5f53\u524d\u8fd9\u4e2a\u6570\u7684\u6240\u6709\uff08\u6bd4\u81ea\u5df1\u5927\u7684\uff09\u500d\u6570\u8bb0\u4e3a\u5408\u6570\uff0c\u90a3\u4e48\u8fd0\u884c\u7ed3\u675f\u7684\u65f6\u5019\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u6570\u5c31\u662f\u7d20\u6570\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int Eratosthenes ( int n ) { int p = 0 ; for ( int i = 0 ; i <= n ; ++ i ) is_prime [ i ] = 1 ; is_prime [ 0 ] = is_prime [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) { if ( is_prime [ i ]) { prime [ p ++ ] = i ; // prime[p]\u662fi,\u540e\u7f6e\u81ea\u589e\u8fd0\u7b97\u4ee3\u8868\u5f53\u524d\u7d20\u6570\u6570\u91cf for ( int j = 2 * i ; j <= n ; j += i ) is_prime [ j ] = 0 ; //\u662fi\u7684\u500d\u6570\u7684\u5747\u4e0d\u662f\u7d20\u6570 } } return p ; } \u4ee5\u4e0a\u4e3a Eratosthenes \u7b5b\u6cd5 \uff08\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n\\log\\log n) O(n\\log\\log n) \u3002 \u4ee5\u4e0a\u505a\u6cd5\u4ecd\u6709\u4f18\u5316\u7a7a\u95f4\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u9762\u4f3c\u4e4e\u4f1a\u5bf9\u67d0\u4e9b\u6570\u6807\u8bb0\u4e86\u5f88\u591a\u6b21\u5176\u4e3a\u5408\u6570\u3002\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u7701\u6389\u65e0\u610f\u4e49\u7684\u6b65\u9aa4\u5462\uff1f \u7b54\u6848\u5f53\u7136\u662f\uff1a\u6709\uff01 \u5982\u679c\u80fd\u8ba9\u6bcf\u4e2a\u5408\u6570\u90fd\u53ea\u88ab\u6807\u8bb0\u4e00\u6b21\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u5230 O(n) O(n) \u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void init () { phi [ 1 ] = 1 ; f ( i , 2 , MAXN ) { if ( ! vis [ i ]) { phi [ i ] = i - 1 ; pri [ cnt ++ ] = i ; } f ( j , 0 , cnt ) { if (( LL ) i * pri [ j ] >= MAXN ) break ; vis [ i * pri [ j ]] = 1 ; if ( i % pri [ j ]) { phi [ i * pri [ j ]] = phi [ i ] * ( pri [ j ] - 1 ); } else { // i % pri[j] == 0 // \u6362\u8a00\u4e4b\uff0ci \u4e4b\u524d\u88ab pri[j] \u7b5b\u8fc7\u4e86 // \u7531\u4e8e pri \u91cc\u9762\u8d28\u6570\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff0c\u6240\u4ee5 i \u4e58\u4e0a\u5176\u4ed6\u7684\u8d28\u6570\u7684\u7ed3\u679c\u4e00\u5b9a\u4e5f\u662f // pri[j] \u7684\u500d\u6570 \u5b83\u4eec\u90fd\u88ab\u7b5b\u8fc7\u4e86\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u7b5b\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5 break // \u6389\u5c31\u597d\u4e86 phi [ i * pri [ j ]] = phi [ i ] * pri [ j ]; break ; } } } } \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 phi phi \u6570\u7ec4\uff0c\u4f1a\u5728\u4e0b\u9762\u63d0\u5230\u3002 \u4e0a\u9762\u7684\u8fd9\u79cd \u7ebf\u6027\u7b5b\u6cd5 \u4e5f\u79f0\u4e3a Euler \u7b5b\u6cd5 \uff08\u6b27\u62c9\u7b5b\u6cd5\uff09\u3002 Note \u6ce8\u610f\u5230\u7b5b\u6cd5\u6c42\u7d20\u6570\u7684\u540c\u65f6\u4e5f\u5f97\u5230\u4e86\u6bcf\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50","title":"\u7d20\u6570\u7b5b\u6cd5"},{"location":"math/sieve/#_2","text":"\u6ce8\u610f\u5230\u5728\u7ebf\u6027\u7b5b\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5408\u6570\u90fd\u662f\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u6389\u3002\u6bd4\u5982\u8bbe p_1 p_1 \u662f n n \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c n' = \\frac{n}{p_1} n' = \\frac{n}{p_1} \uff0c\u90a3\u4e48\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\u4e2d n n \u901a\u8fc7 n' \\times p_1 n' \\times p_1 \u7b5b\u6389\u3002 \u89c2\u5bdf\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u4e24\u4e2a\u90e8\u5206\uff0c\u4e0b\u9762\u5bf9 n' \\bmod p_1 n' \\bmod p_1 \u5206\u60c5\u51b5\u8ba8\u8bba\u3002 \u5982\u679c n' \\bmod p_1 = 0 n' \\bmod p_1 = 0 \uff0c\u90a3\u4e48 n' n' \u5305\u542b\u4e86 n n \u7684\u6240\u6709\u8d28\u56e0\u5b50\u3002 \\begin{aligned} \\varphi(n) & = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times n' \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times \\varphi(n') \\end{aligned} \\begin{aligned} \\varphi(n) & = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times n' \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times \\varphi(n') \\end{aligned} \u90a3\u5982\u679c n' \\bmod p_1 \\neq 0 n' \\bmod p_1 \\neq 0 \u5462\uff0c\u8fd9\u65f6 n' n' \u548c n n \u662f\u4e92\u8d28\u7684\uff0c\u6839\u636e\u6b27\u62c9\u51fd\u6570\u6027\u8d28\uff0c\u6211\u4eec\u6709\uff1a \\begin{aligned} \\varphi(n) & = \\varphi(p_1) \\times \\varphi(n') \\\\\\\\ & = (p_1 - 1) \\times \\varphi(n') \\end{aligned} \\begin{aligned} \\varphi(n) & = \\varphi(p_1) \\times \\varphi(n') \\\\\\\\ & = (p_1 - 1) \\times \\varphi(n') \\end{aligned} 1 2 3 4 5 6 7 8 9 10 void phi_table ( int n , int * phi ) { for ( int i = 2 ; i <= n ; i ++ ) phi [ i ] = 0 ; phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) if ( ! phi [ i ]) for ( int j = i ; j <= n ; j += i ) { if ( ! phi [ j ]) phi [ j ] = j ; phi [ j ] = phi [ j ] / i * ( i - 1 ); } }","title":"\u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"math/sieve/#_3","text":"","title":"\u7b5b\u6cd5\u6c42\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570"},{"location":"math/sieve/#_4","text":"","title":"\u7b5b\u6cd5\u6c42\u7ea6\u6570\u4e2a\u6570"},{"location":"math/sieve/#_5","text":"","title":"\u5176\u4ed6\u7ebf\u6027\u51fd\u6570"},{"location":"math/stirling/","text":"Stirling \u6570\uff08\u5b50\u96c6\u5212\u5206\uff09 \u00b6 \u6839\u636e\u4f8b\u9898\u6765\u8bb2\u89e3\uff1a \uff082007 \u666e\u53ca\uff09\u5c06 n n \u4e2a\u6570 \uff081\uff0c2\uff0c\u2026\uff0cn\uff09 \uff081\uff0c2\uff0c\u2026\uff0cn\uff09 \u5206\u6210 r r \u4e2a\u90e8\u5206\u3002\u6bcf\u4e2a\u90e8\u5206\u81f3\u5c11\u4e00\u4e2a\u6570\u3002\u5c06\u4e0d\u540c\u5212\u5206\u65b9\u6cd5\u7684\u603b\u6570\u8bb0\u4e3a S_n^r S_n^r \u3002\u4f8b\u5982\uff0c S_4^2=7 S_4^2=7 \uff0c\u8fd9 7 \u79cd\u4e0d\u540c\u7684\u5212\u5206\u65b9\u6cd5\u4f9d\u6b21\u4e3a \\{\\ (1) , (234) \\}\\,\\{\\ (2) , (134) \\}\\,\\{\\ (3) , (124) \\}\\,\\{\\ (4) , (123) \\}\\,\\{\\ (12) , (34) \\}\\,\\{\\ (13) , (24) \\}\\,\\{\\ (14) , (23) \\} \\{\\ (1) , (234) \\}\\,\\{\\ (2) , (134) \\}\\,\\{\\ (3) , (124) \\}\\,\\{\\ (4) , (123) \\}\\,\\{\\ (12) , (34) \\}\\,\\{\\ (13) , (24) \\}\\,\\{\\ (14) , (23) \\} \u3002\u5f53 n=6\uff0cr=3 n=6\uff0cr=3 \u65f6\uff0c S_6^3 S_6^3 =\uff08 \uff09 \u63d0\u793a\uff1a\u5148\u56fa\u5b9a\u4e00\u4e2a\u6570\uff0c\u5bf9\u4e8e\u5176\u4f59\u7684 5 \u4e2a\u6570\u8003\u8651 S_5^3 S_5^3 \u4e0e S_5^2 S_5^2 \uff0c\u518d\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\u5bf9\u539f\u56fa\u5b9a\u7684\u6570\u8fdb\u884c\u5206\u6790\u3002 \u9898\u89e3\uff1a\u5728\u8fd1\u51e0\u5e74\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u9012\u63a8\u7b97\u6cd5\u8d8a\u6765\u8d8a\u91cd\u8981\uff1a S_6^3=3 \\times S_5^3 + S_5^2 S_6^3=3 \\times S_5^3 + S_5^2 S_5^3=3 \\times S_4^3 + S_4^2 S_5^3=3 \\times S_4^3 + S_4^2 S_5^2=2 \\times S_4^2 + S_4^1 S_5^2=2 \\times S_4^2 + S_4^1 \u7b2c\u4e8c\u7c7b stirling \u6570\uff0c\u663e\u7136\u62e5\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a S_n^m = m \\times S_{n-1}^{m} + S_{n-1}^{m-1} S_n^m = m \\times S_{n-1}^{m} + S_{n-1}^{m-1} S_n^1 = 1,S_n^0 = 0,S_n^n = 1 S_n^1 = 1,S_n^0 = 0,S_n^n = 1 \u800c\u8fd9\u4e9b\u6027\u8d28\u5c31\u53ef\u4ee5\u603b\u7ed3\u6210\uff1a S_n^3 = \\frac{1}{2} \\times (3^{n-1}+1) - 2^{n-1} S_n^3 = \\frac{1}{2} \\times (3^{n-1}+1) - 2^{n-1}","title":"\u65af\u7279\u6797\u6570"},{"location":"math/stirling/#stirling","text":"\u6839\u636e\u4f8b\u9898\u6765\u8bb2\u89e3\uff1a \uff082007 \u666e\u53ca\uff09\u5c06 n n \u4e2a\u6570 \uff081\uff0c2\uff0c\u2026\uff0cn\uff09 \uff081\uff0c2\uff0c\u2026\uff0cn\uff09 \u5206\u6210 r r \u4e2a\u90e8\u5206\u3002\u6bcf\u4e2a\u90e8\u5206\u81f3\u5c11\u4e00\u4e2a\u6570\u3002\u5c06\u4e0d\u540c\u5212\u5206\u65b9\u6cd5\u7684\u603b\u6570\u8bb0\u4e3a S_n^r S_n^r \u3002\u4f8b\u5982\uff0c S_4^2=7 S_4^2=7 \uff0c\u8fd9 7 \u79cd\u4e0d\u540c\u7684\u5212\u5206\u65b9\u6cd5\u4f9d\u6b21\u4e3a \\{\\ (1) , (234) \\}\\,\\{\\ (2) , (134) \\}\\,\\{\\ (3) , (124) \\}\\,\\{\\ (4) , (123) \\}\\,\\{\\ (12) , (34) \\}\\,\\{\\ (13) , (24) \\}\\,\\{\\ (14) , (23) \\} \\{\\ (1) , (234) \\}\\,\\{\\ (2) , (134) \\}\\,\\{\\ (3) , (124) \\}\\,\\{\\ (4) , (123) \\}\\,\\{\\ (12) , (34) \\}\\,\\{\\ (13) , (24) \\}\\,\\{\\ (14) , (23) \\} \u3002\u5f53 n=6\uff0cr=3 n=6\uff0cr=3 \u65f6\uff0c S_6^3 S_6^3 =\uff08 \uff09 \u63d0\u793a\uff1a\u5148\u56fa\u5b9a\u4e00\u4e2a\u6570\uff0c\u5bf9\u4e8e\u5176\u4f59\u7684 5 \u4e2a\u6570\u8003\u8651 S_5^3 S_5^3 \u4e0e S_5^2 S_5^2 \uff0c\u518d\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\u5bf9\u539f\u56fa\u5b9a\u7684\u6570\u8fdb\u884c\u5206\u6790\u3002 \u9898\u89e3\uff1a\u5728\u8fd1\u51e0\u5e74\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u9012\u63a8\u7b97\u6cd5\u8d8a\u6765\u8d8a\u91cd\u8981\uff1a S_6^3=3 \\times S_5^3 + S_5^2 S_6^3=3 \\times S_5^3 + S_5^2 S_5^3=3 \\times S_4^3 + S_4^2 S_5^3=3 \\times S_4^3 + S_4^2 S_5^2=2 \\times S_4^2 + S_4^1 S_5^2=2 \\times S_4^2 + S_4^1 \u7b2c\u4e8c\u7c7b stirling \u6570\uff0c\u663e\u7136\u62e5\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a S_n^m = m \\times S_{n-1}^{m} + S_{n-1}^{m-1} S_n^m = m \\times S_{n-1}^{m} + S_{n-1}^{m-1} S_n^1 = 1,S_n^0 = 0,S_n^n = 1 S_n^1 = 1,S_n^0 = 0,S_n^n = 1 \u800c\u8fd9\u4e9b\u6027\u8d28\u5c31\u53ef\u4ee5\u603b\u7ed3\u6210\uff1a S_n^3 = \\frac{1}{2} \\times (3^{n-1}+1) - 2^{n-1} S_n^3 = \\frac{1}{2} \\times (3^{n-1}+1) - 2^{n-1}","title":"Stirling \u6570\uff08\u5b50\u96c6\u5212\u5206\uff09"},{"location":"misc/","text":"\u8fd9\u4e2a\u677f\u5757\u4e3b\u8981\u4ecb\u7ecd\u7684\u662f\u4e00\u4e9b\u96be\u4ee5\u5206\u7c7b\u7684\u5b9e\u7528\u7b97\u6cd5\u3001\u5b9e\u7528\u6280\u5de7 \u5982\u679c\u4f60\u662f\u4e00\u540d\u60f3\u5b66\u4e60\u4e00\u4e9b\u57fa\u7840\u6280\u5de7\u7684 OIer / \u60f3\u638c\u63e1\u8fd9\u4e2a\u677f\u5757 NOIP \u9700\u8981\u638c\u63e1\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u9605\u4ee5\u4e0b\u7c7b \uff1a \u79bb\u7ebf\u5904\u7406 \u5404\u79cd\u8ddd\u79bb \u590d\u6742\u5ea6 \u79bb\u6563\u5316 \u5982\u679c\u4f60\u60f3\u7a0d\u7a0d\u8fdb\u9636\uff0c\u53ef\u4ee5\u53c2\u9605\u4e0b\u9762\u7684\u7c7b\uff0c\u5f53\u7136\uff0c\u8fd9\u4e9b\u540c\u6837\u5bf9 NOIP \u6709\u5f88\u5927\u7684\u5e2e\u52a9 \uff1a CDQ \u5206\u6cbb \u83ab\u961f \u722c\u5c71\u3001\u9000\u706b \u8bfb\u5165\u8f93\u51fa\u4f18\u5316 \u5206\u6570\u89c4\u5212 \u66f4\u52a0\u8fdb\u9636\u6216\u8005\u6709\u5174\u8da3\u4e86\u89e3\u96be\u4e00\u4e9b\u7684\u3001 NOIP \u8303\u56f4\u5185\u5f88\u96be\u7528\u5230\u7684\u7b97\u6cd5\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u7c7b \uff1a \u77e9\u9635\u6811\u5b9a\u7406 DSU on Tree \u6731\u5218\u7b97\u6cd5 \uff08 \u5e76\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811 \uff09","title":"\u6742\u9879\u7b80\u4ecb"},{"location":"misc/cdq-divide/","text":"\u5f15\u5b50 \u00b6 \u4ec0\u4e48\u662f cdq \u5206\u6cbb\u5462\uff1f\uff0c\u5176\u5b9e\u4ed6\u662f\u4e00\u79cd\u601d\u60f3\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7b97\u6cd5\uff08\u5c31\u548c dp \u662f\u4e00\u6837\u7684\uff09\uff0c\u56e0\u6b64 cdq \u5206\u6cbb\u6db5\u76d6\u7684\u8303\u56f4\u76f8\u5f53\u7684\u5e7f\u6cdb\uff0c\u7531\u4e8e\u8fd9\u6837\u7684\u601d\u8def\u6700\u65e9\u662f\u88ab\u9648\u4e39\u742a\u5f15\u5165\u56fd\u5185\u7684\uff0c\u6240\u4ee5\u5c31\u53eb cdq \u5206\u6cbb\u4e86 \u73b0\u5728 oi \u754c\u5bf9\u4e8e cdq \u5206\u6cbb\u8fd9\u4e2a\u601d\u60f3\u7684\u62d3\u5c55\u5341\u5206\u5e7f\u6cdb\uff0c\u4f46\u662f\u8fd9\u4e9b\u90fd\u53eb cdq \u7684\u4e1c\u897f\u5176\u5b9e\u539f\u7406\u548c\u5199\u6cd5\u4e0a\u5e76\u4e0d\u76f8\u540c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u5927\u6982\u7684\u5c06\u5b83\u4eec\u5206\u4e3a\u4e09\u7c7b 1.cdq \u5206\u6cbb\u89e3\u51b3\u548c\u70b9\u5bf9\u6709\u5173\u7684\u95ee\u9898 2.cdq \u5206\u6cbb\u4f18\u5316 1D/1D \u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb 3. \u901a\u8fc7 cdq \u5206\u6cbb, \u5c06\u4e00\u4e9b\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898 CDQ \u5206\u6cbb\u89e3\u51b3\u548c\u70b9\u5bf9\u6709\u5173\u7684\u95ee\u9898 \u00b6 \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u662f\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217\uff0c\u7136\u540e\u8ba9\u4f60\u7edf\u8ba1\u6709\u4e00\u4e9b\u7279\u6027\u7684\u70b9\u5bf9 (i,j) (i,j) \u6709\u591a\u5c11\u4e2a, \u53c8\u6216\u8005\u8bf4\u662f\u627e\u5230\u4e00\u5bf9\u70b9 (i,j) (i,j) \u4f7f\u5f97\u4e00\u4e9b\u51fd\u6570\u7684\u503c\u6700\u5927\u4e4b\u7c7b\u7684\u95ee\u9898 \u90a3\u4e48 cdq \u5206\u6cbb\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898 1. \u627e\u5230\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u70b9 mid mid 2. \u5c06\u6240\u6709\u70b9\u5bf9 (i,j) (i,j) \u5212\u5206\u4e3a 3 \u7c7b \u7b2c\u4e00\u79cd\u662f 1 \\leq i \\leq mid,1 \\leq j \\leq mid 1 \\leq i \\leq mid,1 \\leq j \\leq mid \u7684\u70b9\u5bf9 \u7b2c\u4e8c\u79cd\u662f 1 \\leq i \\leq mid ,mid+1 \\leq j \\leq n 1 \\leq i \\leq mid ,mid+1 \\leq j \\leq n \u7684\u70b9\u5bf9 \u7b2c\u4e09\u79cd\u662f mid+1 \\leq i \\leq n,mid+1 \\leq j \\leq n mid+1 \\leq i \\leq n,mid+1 \\leq j \\leq n \u7684\u70b9\u5bf9 3. \u5c06 (1,n) (1,n) \u8fd9\u4e2a\u5e8f\u5217\u62c6\u6210\u4e24\u4e2a\u5e8f\u5217 (1,mid) (1,mid) \u548c (mid+1,n) (mid+1,n) \u4f1a\u53d1\u73b0\u7b2c\u4e00\u7c7b\u70b9\u5bf9\u548c\u7b2c\u4e09\u7c7b\u70b9\u5bf9\u90fd\u5728\u8fd9\u4e24\u4e2a\u5e8f\u5217\u4e4b\u4e2d, \u9012\u5f52\u7684\u53bb\u89e3\u51b3\u8fd9\u4e24\u7c7b\u70b9\u5bf9 4. \u60f3\u65b9\u8bbe\u6cd5\u5904\u7406\u4e00\u4e0b\u7b2c\u4e8c\u7c7b\u70b9\u5bf9\u7684\u4fe1\u606f \u5b9e\u9645\u5e94\u7528\u7684\u65f6\u5019\u6211\u4eec\u901a\u5e38\u90fd\u662f\u5199\u4e00\u4e2a\u51fd\u6570 solve(l,r) solve(l,r) \u8868\u793a\u6211\u4eec\u6b63\u5728\u5904\u7406 l \\leq i \\leq r,l \\leq j \\leq r l \\leq i \\leq r,l \\leq j \\leq r \u7684\u70b9\u5bf9 \u6240\u4ee5\u521a\u624d\u7684\u7b97\u6cd5\u6d41\u7a0b\u4e2d\u7684\u9012\u5f52\u90e8\u5206\u6211\u4eec\u5c31\u662f\u901a\u8fc7 solve(l,mid),solve(mid,r) solve(l,mid),solve(mid,r) \u6765\u5b9e\u73b0\u7684 \u6240\u4ee5\u8bf4 cdq \u5206\u6cbb\u53ea\u662f\u4e00\u79cd\u5341\u5206\u6a21\u7cca\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u79cd\u601d\u60f3\u5c31\u662f\u4e0d\u65ad\u7684\u628a\u70b9\u5bf9\u901a\u8fc7\u9012\u5f52 (\u7529\u9505) \u7684\u65b9\u5f0f\u5206\u7ed9\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4 \u81f3\u4e8e\u6211\u4eec\u8bbe\u8ba1\u51fa\u6765\u7684\u7b97\u6cd5\u771f\u6b63\u5e72\u6d3b\u7684\u90e8\u5206\u5c31\u662f\u7b2c 4 \u90e8\u5206\u9700\u8981\u6211\u4eec\u60f3\u65b9\u8bbe\u6cd5\u89e3\u51b3\u7684\u90e8\u5206\u4e86 \u6240\u4ee5\u8bf4\u8ba9\u6211\u4eec\u4e0a\u51e0\u9053\u4f8b\u9898\u770b\u4e00\u4e0b\u7b2c\u56db\u90e8\u5206\u4e00\u822c\u8be5\u600e\u4e48\u5199 \u6bd4\u5982\u8bf4\u6211\u4eec\u6765\u4e00\u4e2a cdq \u5206\u6cbb\u7684\u7ecf\u5178\u95ee\u9898\u2014\u2014\u4e09\u7ef4\u504f\u5e8f \u4e09\u7ef4\u504f\u5e8f \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217, \u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u5c5e\u6027 (a,b) (a,b) \uff0c\u8bd5\u6c42\uff1a\u8fd9\u4e2a\u5e8f\u5217\u91cc\u6709\u591a\u5c11\u5bf9\u70b9\u5bf9 (i,j) (i,j) \u6ee1\u8db3 i<j,a_{i}<a_{j},b_{i}<b_{j} i<j,a_{i}<a_{j},b_{i}<b_{j} \u7edf\u8ba1\u5e8f\u5217\u91cc\u70b9\u5bf9\u7684\u4e2a\u6570\uff1f\u6211\u4eec\u7ed9\u4ed6\u5957\u4e2a cdq \u8bd5\u8bd5\u3002 \u597d\u4e86\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6b63\u5728 solve(l,r) solve(l,r) \u5e76\u4e14\u901a\u8fc7\u67d0\u4e9b\u5965\u5999\u91cd\u91cd\u7684\u624b\u6bb5\u641e\u5b9a\u4e86 solve(l,mid) solve(l,mid) \u548c solve(mid+1,r) solve(mid+1,r) (\u5176\u5b9e\u5c31\u662f\u9012\u5f52) \u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u662f\u7edf\u8ba1\u6ee1\u8db3 l \\leq i \\leq mid,mid+1 \\leq j \\leq r l \\leq i \\leq mid,mid+1 \\leq j \\leq r \u7684\u70b9\u5bf9 (i,j) (i,j) \u4e2d\uff0c\u6709\u591a\u4e2a\u70b9\u5bf9\u8fd8\u6ee1\u8db3 i<j,a_{i}<a_{j},b_{i}<b_{j} i<j,a_{i}<a_{j},b_{i}<b_{j} \u7684\u9650\u5236\u6761\u4ef6\u54af \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u90a3\u4e2a i<j i<j \u7684\u9650\u5236\u6761\u4ef6\u6ca1\u5565\u7528\u4e86\uff0c\u65e2\u7136 i i \u6bd4 mid mid \u5c0f j j \u6bd4 mid mid \u5927, \u90a3 i i \u80af\u5b9a\u6bd4 j j \u8981\u5c0f \u4f60\u53c8\u53d1\u73b0\u73b0\u5728\u8fd8\u5269\u4e0b\u4e24\u4e2a\u9650\u5236\u6761\u4ef6 a_{i}<a_{j},b_{i}<b_{j} a_{i}<a_{j},b_{i}<b_{j} , \u6839\u636e\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e j j , \u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684 i i \u4e3a\u4e86\u65b9\u4fbf\u679a\u4e3e, \u6211\u4eec\u628a (l,mid) (l,mid) \u548c (mid+1,r) (mid+1,r) \u4e2d\u7684\u70b9\u5168\u90e8\u6309\u7167 a a \u503c\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f \u4e4b\u540e\u6211\u4eec\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u4e2a j j , \u628a\u6240\u6709 a_{i}<a_{j} a_{i}<a_{j} \u7684\u70b9 i i \u5168\u90e8\u63d2\u5165\u5230\u67d0\u4e00\u4e2a\u795e\u5947\u6570\u636e\u7ed3\u6784\u91cc, \u6b64\u65f6\u53ea\u8981\u5bf9\u8fd9\u4e2a\u795e\u5947\u6570\u636e\u7ed3\u6784\u8be2\u95ee\u4e00\u53d1: \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u91cc\u6709\u591a\u5c11\u4e2a\u70b9\u7684 b b \u503c\u662f\u5c0f\u4e8e b_{j} b_{j} \u7684, \u6211\u4eec\u5c31\u5bf9\u4e8e\u8fd9\u4e2a\u70b9 j j \u6c42\u51fa\u4e86\u6709\u591a\u5c11\u4e2a i i \u53ef\u4ee5\u548c\u4ed6\u5408\u6cd5\u7684\u5339\u914d\u4e86 \u95ee\u9898\u6765\u4e86\u90a3\u4e2a\u795e\u5947\u6570\u636e\u7ed3\u6784\u53eb\u4ec0\u4e48\u5462\uff1f \u6811\u72b6\u6570\u7ec4\u554a \u5f53\u6211\u4eec\u63d2\u5165\u4e00\u4e2a b b \u503c\u7b49\u4e8e x x \u7684\u70b9\u65f6, \u6211\u4eec\u5c31\u4ee4\u6811\u72b6\u6570\u7ec4\u7684 x x \u8fd9\u4e2a\u4f4d\u7f6e\u5355\u70b9 + 1\uff0c\u800c\u67e5\u8be2\u6570\u636e\u7ed3\u6784\u91cc\u6709\u591a\u5c11\u4e2a\u70b9\u5c0f\u4e8e x x \u7684\u64cd\u4f5c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u6c42\u524d\u7f00\u548c, \u53ea\u8981\u6211\u4eec\u4e8b\u5148\u5bf9\u4e8e\u6240\u6709\u7684 b \u503c\u505a\u4e86\u79bb\u6563\u5316\u6211\u4eec\u7684\u590d\u6742\u5ea6\u5c31\u662f\u5bf9\u7684 \u95ee\u9898\u53c8\u6765\u4e86\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a j j \u6211\u4eec\u90fd\u9700\u8981\u5c06\u6240\u6709 a_{i}<a_{j} a_{i}<a_{j} \u7684\u70b9 i i \u63d2\u5165\u6811\u72b6\u6570\u7ec4\u4e2d, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u603b\u5171\u8981\u5bf9\u6811\u72b6\u6570\u7ec4\u505a O(n^2) O(n^2) \u6b21\u64cd\u4f5c\u554a\uff0c\u600e\u4e48\u529e\u5462\uff1f \u8fd8\u8bb0\u5f97\u4f60\u628a\u6240\u6709\u7684 i i \u548c j j \u90fd\u4e8b\u5148\u6309\u7167 a a \u503c\u6392\u597d\u5e8f\u4e86\u5417\uff1f\u6211\u4eec\u4ee5\u53cc\u6307\u9488\u7684\u65b9\u5f0f\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u63d2\u5165\u70b9, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ea\u9700\u8981\u505a O(n) O(n) \u6b21\u63d2\u5165\u64cd\u4f5c\u5566~ \u6240\u4ee5\u901a\u8fc7\u8fd9\u6837\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b\u6211\u4eec\u5c31\u7528 O(nlogn) O(nlogn) \u7684\u65f6\u95f4\u5904\u7406\u5b8c\u4e86\u5173\u4e8e\u7b2c 2 2 \u7c7b\u70b9\u5bf9\u7684\u4fe1\u606f\u4e86 \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u5c31\u662f T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+O(nlogn)=O(nlog^2n) T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+O(nlogn)=O(nlog^2n) \u4e86 \u4f8b\u9898 [CQOI2011]\u52a8\u6001\u9006\u5e8f\u5bf9 \u00b6 \u4ed4\u7ec6\u63a8\u4e00\u4e0b\u5c31\u662f\u548c\u4e09\u7ef4\u504f\u5e8f\u5dee\u4e0d\u591a\u7684\u5f0f\u5b50\u4e86\uff0c\u57fa\u672c\u5c31\u662f\u4e00\u4e2a\u4e09\u7ef4\u504f\u5e8f\u7684\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <algorithm> #include <cstdio> using namespace std ; typedef long long ll ; int n ; int m ; struct treearray { int ta [ 200010 ]; inline void ub ( int & x ) { x += x & ( - x ); } inline void db ( int & x ) { x -= x & ( - x ); } inline void c ( int x , int t ) { for (; x <= n + 1 ; ub ( x )) ta [ x ] += t ; } inline int sum ( int x ) { int r = 0 ; for (; x > 0 ; db ( x )) r += ta [ x ]; return r ; } } ta ; struct data { int val ; int del ; int ans ; } a [ 100010 ]; int rv [ 100010 ]; ll res ; bool cmp1 ( const data & a , const data & b ) { return a . val < b . val ; } bool cmp2 ( const data & a , const data & b ) { return a . del < b . del ; } void solve ( int l , int r ) { if ( r - l == 1 ) { return ; } int mid = ( l + r ) / 2 ; solve ( l , mid ); solve ( mid , r ); int i = l + 1 ; int j = mid + 1 ; while ( i <= mid ) { while ( a [ i ]. val > a [ j ]. val && j <= r ) { ta . c ( a [ j ]. del , 1 ); j ++ ; } a [ i ]. ans += ta . sum ( m + 1 ) - ta . sum ( a [ i ]. del ); i ++ ; } i = l + 1 ; j = mid + 1 ; while ( i <= mid ) { while ( a [ i ]. val > a [ j ]. val && j <= r ) { ta . c ( a [ j ]. del , - 1 ); j ++ ; } i ++ ; } i = mid ; j = r ; while ( j > mid ) { while ( a [ j ]. val < a [ i ]. val && i > l ) { ta . c ( a [ i ]. del , 1 ); i -- ; } a [ j ]. ans += ta . sum ( m + 1 ) - ta . sum ( a [ j ]. del ); j -- ; } i = mid ; j = r ; while ( j > mid ) { while ( a [ j ]. val < a [ i ]. val && i > l ) { ta . c ( a [ i ]. del , - 1 ); i -- ; } j -- ; } sort ( a + l + 1 , a + r + 1 , cmp1 ); return ; } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ]. val ); rv [ a [ i ]. val ] = i ; } for ( int i = 1 ; i <= m ; i ++ ) { int p ; scanf ( \"%d\" , & p ); a [ rv [ p ]]. del = i ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ i ]. del == 0 ) a [ i ]. del = m + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { res += ta . sum ( n + 1 ) - ta . sum ( a [ i ]. val ); ta . c ( a [ i ]. val , 1 ); } for ( int i = 1 ; i <= n ; i ++ ) { ta . c ( a [ i ]. val , - 1 ); } solve ( 0 , n ); sort ( a + 1 , a + n + 1 , cmp2 ); for ( int i = 1 ; i <= m ; i ++ ) { printf ( \"%lld \\n \" , res ); res -= a [ i ]. ans ; } return 0 ; } CDQ \u5206\u6cbb\u4f18\u5316 1D/1D \u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb \u00b6 \u6240\u8c13 1D/1D \u52a8\u6001\u89c4\u5212\u5c31\u662f\u8bf4\u6211\u4eec\u7684 dp \u6570\u7ec4\u662f 1 \u7ef4\u7684\uff0c\u8f6c\u79fb\u662f O(n) O(n) \u7684\u4e00\u7c7b dp \u95ee\u9898\uff0c\u5982\u679c\u6761\u4ef6\u826f\u597d\u7684\u8bdd\u6211\u4eec\u6709\u4e9b\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7 cdq \u5206\u6cbb\u6765\u628a\u8fd9\u7c7b\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7531 O(n^2) O(n^2) \u964d\u81f3 O(nlog^2n) O(nlog^2n) \u90a3\u4e48\u6bd4\u5982\u8bf4\u6211\u4eec\u8981\u4f18\u5316\u8fd9\u6837\u7684\u4e00\u4e2a dp dp \u5f0f\u5b50\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u6709\u4e24\u4e2a\u5c5e\u6027 a,b a,b \u6211\u4eec\u5e0c\u671b\u8ba1\u7b97\u4e00\u4e2a dp \u5f0f\u5b50\u7684\u503c\uff0c\u5b83\u7684\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: dp_{i}=1+ \\max_{j=1}^{i-1}dp_{j}[a_{j}<a_{i}][b_{j}<b_{i}] dp_{i}=1+ \\max_{j=1}^{i-1}dp_{j}[a_{j}<a_{i}][b_{j}<b_{i}] \u5982\u679c\u4f60\u8db3\u591f\u719f\u7ec3\u7684\u8bdd\u53ef\u4ee5\u770b\u51fa\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684 dp dp \u65b9\u7a0b \u89e3\u91ca\u4e00\u4e0b\u4e0a\u9762\u7684\u5f0f\u5b50\u5c31\u662f\u8bf4\u53ea\u6709 i<j,a_{i}<a_{j},b_{i}<b_{j} i<j,a_{i}<a_{j},b_{i}<b_{j} \u7684\u70b9 j j \u53ef\u4ee5\u53bb\u66f4\u65b0\u70b9 i i \u7684 dp \u503c \u76f4\u63a5\u8f6c\u79fb\u663e\u7136\u662f O(n^2) O(n^2) \u7684\uff0c\u6211\u4eec\u5982\u4f55\u4f7f\u7528 cdq cdq \u5206\u6cbb\u53bb\u4f18\u5316\u5b83\u7684\u8f6c\u79fb\u8fc7\u7a0b\u5462\uff1f \u8fd9\u4e2a\u8f6c\u79fb\u8fc7\u7a0b\u76f8\u5bf9\u6765\u8bb2\u6bd4\u8f83\u5957\u8def\uff0c\u6211\u4eec\u5148\u4ecb\u7ecd\u7b97\u6cd5\u6d41\u7a0b\u7136\u540e\u518d\u6162\u6162\u8bc1\u660e\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684 \u6211\u4eec\u53d1\u73b0 dp_{j} dp_{j} \u8f6c\u79fb\u5230 dp_{i} dp_{i} \u8fd9\u79cd\u8f6c\u79fb\u5173\u7cfb\u4e5f\u662f\u4e00\u79cd\u70b9\u5bf9\u95f4\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u50cf cdq cdq \u5206\u6cbb\u5904\u7406\u70b9\u5bf9\u5173\u7cfb\u4e00\u6837\u7684\u6765\u5904\u7406\u5b83 \u5177\u4f53\u6765\u8bb2\u6211\u4eec\u8fd9\u6837\u5199 cdq, \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6b63\u5728\u5904\u7406\u7684\u533a\u95f4\u662f (l,r) (l,r) , 0. \u5982\u679c l=r l=r \u8bf4\u660e\u6211\u4eec\u7684 dp_{r} dp_{r} \u503c\u5df2\u7ecf\u88ab\u8ba1\u7b97\u597d\u4e86, \u6211\u4eec\u76f4\u63a5\u4ee4 dp_{r}++ dp_{r}++ \u7136\u540e\u8fd4\u56de\u5373\u53ef 1. \u5148\u9012\u5f52\u7684 solve(l,mid) solve(l,mid) 2. \u5904\u7406\u6240\u6709 l \\leq j \\leq mid,mid+1 \\leq i \\leq r l \\leq j \\leq mid,mid+1 \\leq i \\leq r \u7684\u8f6c\u79fb\u5173\u7cfb 3. \u7136\u540e\u9012\u5f52\u7684 solve(mid+1,r) solve(mid+1,r) \u90a3\u4e48\u7b2c\u4e8c\u6b65\u600e\u4e48\u505a\u5462\uff1f \u5176\u5b9e\u548c cdq \u5206\u6cbb\u6c42\u4e09\u7ef4\u504f\u5e8f\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5904\u7406 l \\leq j \\leq mid,mid+1 \\leq i \\leq r l \\leq j \\leq mid,mid+1 \\leq i \\leq r \u7684\u8f6c\u79fb\u5173\u7cfb\u7684\u65f6\u5019\u6211\u4eec\u5df2\u7ecf\u4e0d\u7528\u7ba1 j<i j<i \u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u4e86, \u56e0\u6b64\u6211\u4eec\u4f9d\u7136\u662f\u5c06\u6240\u6709\u7684\u70b9 i i \u548c\u70b9 j j \u6309 a a \u503c\u8fdb\u884c\u6392\u5e8f\u5904\u7406\u4e4b\u540e\u7528\u53cc\u6307\u9488\u7684\u65b9\u5f0f\u5c06 j j \u70b9\u63d2\u5165\u5230\u6811\u72b6\u6570\u7ec4\u91cc, \u7136\u540e\u6700\u540e\u67e5\u4e00\u53d1\u524d\u7f00\u6700\u5927\u503c\u66f4\u65b0\u4e00\u4e0b dp_{i} dp_{i} \u5c31\u53ef\u4ee5\u4e86 \u4f60\u4f1a\u53d1\u73b0\u6b64\u65f6\u7684 cdq \u5199\u6cd5\u548c\u4e0a\u4e00\u79cd\u5904\u7406\u70b9\u5bf9\u95f4\u5173\u7cfb\u7684 cdq \u5199\u6cd5\u6700\u5927\u7684\u4e0d\u540c\u5c31\u662f\u5904\u7406 l \\leq j \\leq mid,mid+1 \\leq i \\leq r l \\leq j \\leq mid,mid+1 \\leq i \\leq r \u7684\u70b9\u5bf9\u8fd9\u4e00\u90e8\u5206\uff0c\u4e0a\u9762\u7684\u5199\u6cd5\u4e2d\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u653e\u5230\u54ea\u91cc\u90fd\u662f\u53ef\u4ee5\u7684, \u4f46\u662f, \u5728\u7528 cdq \u5206\u6cbb\u4f18\u5316 dp \u7684\u65f6\u5019\u8fd9\u4e2a\u6d41\u7a0b\u5374\u5fc5\u987b\u5939\u5728 solve(l,mid),solve(mid+1,r) solve(l,mid),solve(mid+1,r) \u7684\u4e2d\u95f4\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a dp \u7684\u8f6c\u79fb\u662f \u6709\u5e8f\u7684 \uff0c\u6211\u4eec\u7684 dp \u7684\u8f6c\u79fb\u5fc5\u987b\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\u5426\u5219\u5c31\u662f\u4e0d\u5bf9\u7684 1. \u7528\u6765\u8ba1\u7b97 dp_{i} dp_{i} \u7684\u6240\u6709 dp_{j} dp_{j} \u503c\u90fd\u5fc5\u987b\u662f\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u7684, \u4e0d\u80fd\u5b58\u5728 \"\u534a\u6210\u54c1\" 2. \u7528\u6765\u8ba1\u7b97 dp_{i} dp_{i} \u7684\u6240\u6709 dp_{j} dp_{j} \u503c\u90fd\u5fc5\u987b\u80fd\u66f4\u65b0\u5230 dp_{i} dp_{i} \u4e0d\u80fd\u5b58\u5728\u6709\u7684 dp_{j} dp_{j} \u503c\u6ca1\u6709\u66f4\u65b0\u5230 \u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u53ef\u80fd\u5728 O(n^2) O(n^2) \u66b4\u529b\u7684\u65f6\u5019\u662f\u76f8\u5f53\u5bb9\u6613\u6ee1\u8db3\u7684, \u4f46\u662f\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u4f7f\u7528\u4e86 cdq \u5206\u6cbb\uff0c\u5f88\u663e\u7136\u8f6c\u79fb\u987a\u5e8f\u88ab\u6211\u4eec\u641e\u7684\u4e71\u4e03\u516b\u7cdf\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u5fc5\u8981\u597d\u597d\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u8fd9\u6837\u505a\u5230\u5e95\u662f\u4e0d\u662f\u5bf9\u7684 \u90a3\u5c31\u8ba9\u6211\u4eec\u770b\u4e00\u770b cdq \u5206\u6cbb\u7684\u9012\u5f52\u6811\u597d\u4e86 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u6267\u884c\u521a\u624d\u7684\u7b97\u6cd5\u6d41\u7a0b\u7684\u8bdd \u4f60\u4f1a\u53d1\u73b0\u6bd4\u5982\u8bf4 8 8 \u8fd9\u4e2a\u70b9\u7684 dp dp \u503c\u662f\u5728 solve(1,8),solve(5,8),solve(7,8) solve(1,8),solve(5,8),solve(7,8) \u8fd9 3 \u4e2a\u51fd\u6570\u4e2d\u88ab\u66f4\u65b0\u5b8c\u6210\u7684, \u800c\u4e09\u6b21\u7528\u6765\u66f4\u65b0\u5b83\u7684\u70b9\u5206\u522b\u662f (1,4)(5,6)(7,7) (1,4)(5,6)(7,7) \u8fd9\u4e09\u4e2a\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4 \u53c8\u6bd4\u5982\u8bf4 5 5 \u8fd9\u4e2a\u70b9\u5b83\u7684 dp \u503c\u5c31\u662f\u5728 solve(1,4) solve(1,4) \u51fd\u6570\u4e2d\u89e3\u51b3\u7684, \u66f4\u65b0\u5b83\u7684\u533a\u95f4\u662f (1,4) (1,4) \u4ed4\u7ec6\u89c2\u5bdf\u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a i \u70b9\u7684 dp \u503c\u88ab\u66f4\u65b0\u4e86 log log \u6b21\uff0c\u800c\u4e14, \u66f4\u65b0\u5b83\u7684\u533a\u95f4\u521a\u597d\u662f (1,i) (1,i) \u5728\u7ebf\u6bb5\u6811\u4e0a\u88ab\u62c6\u5206\u51fa\u6765\u7684 log \u4e2a\u533a\u95f4 \u56e0\u6b64\u6211\u4eec\u7684\u7b2c 2 \u4e2a\u6761\u4ef6\u5c31\u6ee1\u8db3\u4e86, \u6211\u4eec\u7684\u786e\u4fdd\u8bc1\u4e86\u6240\u6709\u5408\u6cd5\u7684 j j \u90fd\u53bb\u66f4\u65b0\u8fc7\u70b9 i i \u6211\u4eec\u63a5\u7740\u5206\u6790\u6211\u4eec\u7b97\u6cd5\u7684\u6267\u884c\u6d41\u7a0b \u7b2c\u4e00\u4e2a\u7ed3\u675f\u7684\u51fd\u6570\u662f solve(1,1) solve(1,1) \u6b64\u65f6\u6211\u4eec\u53d1\u73b0 dp_{1} dp_{1} \u7684\u503c\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u7b2c\u4e00\u4e2a\u6267\u884c\u8f6c\u79fb\u8fc7\u7a0b\u7684\u51fd\u6570\u662f solve(1,2) solve(1,2) \u6b64\u65f6\u6211\u4eec\u53d1\u73b0 dp_{2} dp_{2} \u7684\u503c\u5df2\u7ecf\u88ab\u8f6c\u79fb\u597d\u4e86 \u7b2c\u4e8c\u4e2a\u7ed3\u675f\u7684\u51fd\u6570 solve(2,2) solve(2,2) \u6b64\u65f6\u6211\u4eec\u53d1\u73b0 dp_{2} dp_{2} \u7684\u503c\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u63a5\u4e0b\u6765 solve(1,2) solve(1,2) \u7ed3\u675f, (1,2) (1,2) \u8fd9\u6bb5\u533a\u95f4\u7684 dp dp \u503c\u5747\u88ab\u8ba1\u7b97\u597d \u4e0b\u4e00\u4e2a\u6267\u884c\u8f6c\u79fb\u6d41\u7a0b\u7684\u51fd\u6570\u662f solve(1,4) solve(1,4) \u8fd9\u6b21\u8f6c\u79fb\u7ed3\u675f\u4e4b\u540e\u6211\u4eec\u53d1\u73b0 dp_{3} dp_{3} \u7684\u503c\u5df2\u7ecf\u88ab\u8f6c\u79fb\u597d\u4e86 \u63a5\u4e0b\u6765\u7ed3\u675f\u7684\u51fd\u6570\u662f solve(3,3) solve(3,3) \u6211\u4eec\u4f1a\u53d1\u73b0 dp_{3} dp_{3} \u7684 dp \u503c\u88ab\u8ba1\u7b97\u597d\u4e86 \u63a5\u4e0b\u6765\u6267\u884c\u7684\u8f6c\u79fb\u662f solve(2,4) solve(2,4) \u6b64\u65f6 dp_{4} dp_{4} \u5728 solve(1,4) solve(1,4) \u4e2d\u88ab (1,2)\u8f6c\u79fb\u4e86\u4e00\u6b21,\u8fd9\u6b21\u53c8\u88ab (1,2)\u8f6c\u79fb\u4e86\u4e00\u6b21,\u8fd9\u6b21\u53c8\u88ab (3,3)$ \u8f6c\u79fb\u4e86 \u56e0\u6b64 dp_{4} dp_{4} \u7684\u503c\u4e5f\u88ab\u8f6c\u79fb\u597d\u4e86 \u63a5\u4e0b\u6765 solve(4,4) solve(4,4) \u7ed3\u675f dp_{4} dp_{4} \u7684\u503c\u88ab\u8ba1\u7b97\u5b8c\u6bd5 \u63a5\u4e0b\u6765 solve(3,4) solve(3,4) \u7ed3\u675f (3,4) (3,4) \u7684\u503c\u88ab\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u63a5\u4e0b\u6765 solve(1,4) solve(1,4) \u7ed3\u675f (1,4) (1,4) \u7684\u503c\u88ab\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u901a\u8fc7\u6211\u4eec\u521a\u624d\u624b\u73a9\u4e86\u534a\u4e2a\u51fd\u6570\u6d41\u7a0b\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e8b\u5b9e\u5c31\u662f\u6bcf\u6b21 solve(l,r) solve(l,r) \u7ed3\u675f\u7684\u65f6\u5019 (l,r) (l,r) \u533a\u95f4\u7684 dp \u503c\u5168\u90e8\u4f1a\u88ab\u8ba1\u7b97\u597d, \u7531\u4e8e\u6211\u4eec\u6bcf\u4e00\u6b21\u6267\u884c\u8f6c\u79fb\u51fd\u6570\u7684\u65f6\u5019\u7531\u4e8e solve(l,mid) solve(l,mid) \u5df2\u7ecf\u7ed3\u675f\uff0c\u56e0\u6b64\u6211\u4eec\u6bcf\u4e00\u6b21\u6267\u884c\u7684\u8f6c\u79fb\u8fc7\u7a0b\u90fd\u662f\u5408\u6cd5\u7684 \u5728\u521a\u624d\u7684\u8fc7\u7a0b\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06 cdq \u5206\u6cbb\u7684\u9012\u5f52\u6811\u770b\u6210\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48 cdq \u5206\u6cbb\u5c31\u662f\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7684 \u4e2d\u5e8f\u904d\u5386\u51fd\u6570 \uff0c\u56e0\u6b64\u6211\u4eec\u76f8\u5f53\u4e8e\u6309\u987a\u5e8f\u5904\u7406\u4e86\u6240\u6709\u7684 dp \u503c\uff0c\u53ea\u662f\u8f6c\u79fb\u987a\u5e8f\u88ab\u62c6\u5f00\u4e86\u800c\u5df2\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u7b97\u6cd5\u662f\u6b63\u786e\u7684 \u4f8b\u9898[SDOI2011] \u62e6\u622a\u5bfc\u5f39 \u00b6 \u4e00\u9053\u4e8c\u7ef4\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u9898, \u4e3a\u4e86\u786e\u5b9a\u67d0\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e2d\u53ef\u4ee5\u6b63\u53cd\u8dd1\u4e24\u904d CDQ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <cstdio> #include <algorithm> using namespace std ; typedef double db ; const int N = 1e6 + 10 ; struct data { int h ; int v ; int p ; int ma ; db ca ;} a [ 2 ][ N ]; int n ; bool tr ; inline bool cmp1 ( const data & a , const data & b ){ if ( tr ) return a . h > b . h ; else return a . h < b . h ;} inline bool cmp2 ( const data & a , const data & b ){ if ( tr ) return a . v > b . v ; else return a . v < b . v ;} inline bool cmp3 ( const data & a , const data & b ){ if ( tr ) return a . p < b . p ; else return a . p > b . p ;} inline bool cmp4 ( const data & a , const data & b ){ return a . v == b . v ;} struct treearray { int ma [ 2 * N ]; db ca [ 2 * N ]; inline void c ( int x , int t , db c ) { for (; x <= n ; x += x & ( - x )){ if ( ma [ x ] == t ){ ca [ x ] += c ;} else if ( ma [ x ] < t ){ ca [ x ] = c ; ma [ x ] = t ;}}} inline void d ( int x ){ for (; x <= n ; x += x & ( - x )){ ma [ x ] = 0 ; ca [ x ] = 0 ;}} inline void q ( int x , int & m , db & c ) { for (; x > 0 ; x -= x & ( - x )){ if ( ma [ x ] == m ){ c += ca [ x ];} else if ( m < ma [ x ]){ c = ca [ x ]; m = ma [ x ];}}} } ta ; int rk [ 2 ][ N ]; inline void solve ( int l , int r , int t ) { if ( r - l == 1 ){ return ;} int mid = ( l + r ) / 2 ; solve ( l , mid , t ); sort ( a [ t ] + mid + 1 , a [ t ] + r + 1 , cmp1 ); int p = l + 1 ; for ( int i = mid + 1 ; i <= r ; i ++ ) { for (;( cmp1 ( a [ t ][ p ], a [ t ][ i ]) || a [ t ][ p ]. h == a [ t ][ i ]. h ) && p <= mid ; p ++ ) { ta . c ( a [ t ][ p ]. v , a [ t ][ p ]. ma , a [ t ][ p ]. ca );} db c = 0 ; int m = 0 ; ta . q ( a [ t ][ i ]. v , m , c ); if ( a [ t ][ i ]. ma < m + 1 ){ a [ t ][ i ]. ma = m + 1 ; a [ t ][ i ]. ca = c ;} else if ( a [ t ][ i ]. ma == m + 1 ){ a [ t ][ i ]. ca += c ;} } for ( int i = l + 1 ; i <= mid ; i ++ ){ ta . d ( a [ t ][ i ]. v );} sort ( a [ t ] + mid , a [ t ] + r + 1 , cmp3 ); solve ( mid , r , t ); sort ( a [ t ] + l + 1 , a [ t ] + r + 1 , cmp1 ); } inline void ih ( int t ) { sort ( a [ t ] + 1 , a [ t ] + n + 1 , cmp2 ); rk [ t ][ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ){ rk [ t ][ i ] = ( cmp4 ( a [ t ][ i ], a [ t ][ i - 1 ])) ? rk [ t ][ i - 1 ] : i ;} for ( int i = 1 ; i <= n ; i ++ ){ a [ t ][ i ]. v = rk [ t ][ i ];} sort ( a [ t ] + 1 , a [ t ] + n + 1 , cmp3 ); for ( int i = 1 ; i <= n ; i ++ ){ a [ t ][ i ]. ma = 1 ; a [ t ][ i ]. ca = 1 ;} } int len ; db ans ; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & a [ 0 ][ i ]. h , & a [ 0 ][ i ]. v ); a [ 0 ][ i ]. p = i ; a [ 1 ][ i ]. h = a [ 0 ][ i ]. h ; a [ 1 ][ i ]. v = a [ 0 ][ i ]. v ; a [ 1 ][ i ]. p = i ; } ih ( 0 ); solve ( 0 , n , 0 ); tr = 1 ; ih ( 1 ); solve ( 0 , n , 1 ); tr = 1 ; sort ( a [ 0 ] + 1 , a [ 0 ] + n + 1 , cmp3 ); sort ( a [ 1 ] + 1 , a [ 1 ] + n + 1 , cmp3 ); for ( int i = 1 ; i <= n ; i ++ ){ len = max ( len , a [ 0 ][ i ]. ma );} printf ( \"%d \\n \" , len ); for ( int i = 1 ; i <= n ; i ++ ){ if ( a [ 0 ][ i ]. ma == len ){ ans += a [ 0 ][ i ]. ca ;}} for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ 0 ][ i ]. ma + a [ 1 ][ i ]. ma - 1 == len ){ printf ( \"%.5lf \" ,( a [ 0 ][ i ]. ca * a [ 1 ][ i ]. ca ) / ans );} else { printf ( \"0.00000 \" );} } return 0 ; } \u9700\u8981 CDQ \u5c06\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\u7684\u9898 \u00b6 \u6211\u4eec\u4f1a\u53d1\u73b0 CDQ \u5206\u6cbb\u4e00\u822c\u662f\u4e00\u79cd\u5904\u7406\u5e8f\u5217\u95ee\u9898\u7684\u5957\u8def\uff0c\u901a\u8fc7\u5c06\u5e8f\u5217\u6298\u534a\u4e4b\u540e\u9012\u5f52\u5904\u7406\u70b9\u5bf9\u95f4\u7684\u5173\u7cfb\u6765\u83b7\u5f97\u826f\u597d\u7684\u590d\u6742\u5ea6 \u4e0d\u8fc7\u5728\u8fd9\u4e00\u90e8\u5206\u5f53\u4e2d\u6211\u4eec\u5206\u6cbb\u7684\u5374\u4e0d\u662f\u4e00\u822c\u7684\u5e8f\u5217\u800c\u662f\u65f6\u95f4\u5e8f\u5217 \u4ec0\u4e48\u610f\u601d\u5462\uff1f \u4f17\u6240\u5468\u77e5\u7684\u662f\u6709\u4e9b\u6570\u636e\u7ed3\u6784\u9898\u9700\u8981\u6211\u4eec\u5179\u6b21\u505a xxx \u4fee\u6539\u7136\u540e\u505a xxx \u8be2\u95ee\u7684\u60c5\u51b5 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\u5982\u679c\u6211\u4eec\u628a\u8be2\u95ee\u8fdb\u884c\u79bb\u7ebf\u4e4b\u540e\uff0c\u6240\u6709\u64cd\u4f5c\u6309\u7167\u65f6\u95f4\u81ea\u7136\u7684\u6392\u6210\u4e86\u4e00\u4e2a\u5e8f\u5217\uff0c\u53e6\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u4e8b\u5b9e\u662f\u6bcf\u4e00\u4e2a\u4fee\u6539\u4f1a\u5bf9\u5b83\u4e4b\u540e\u7684\u8be2\u95ee\u53d1\u751f\u5173\u7cfb\uff0c\u800c\u8fd9\u6837\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u4e00\u5171\u4f1a\u6709 O(n^2) O(n^2) \u5bf9 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 cdq \u5206\u6cbb\u5bf9\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u5e8f\u5217\u8fdb\u884c\u5206\u6cbb, \u6309\u7167 cdq \u5206\u6cbb\u5904\u7406\u4fee\u6539\u548c\u8be2\u95ee\u4e4b\u95f4\u7684\u5173\u7cfb \u8fd8\u662f\u548c\u5904\u7406\u70b9\u5bf9\u5173\u7cfb\u7684 cdq \u5206\u6cbb\u7c7b\u4f3c, \u6211\u4eec\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u5206\u6cbb\u7684\u5e8f\u5217\u662f (l,r) (l,r) , \u6211\u4eec\u5148\u9012\u5f52\u7684\u5904\u7406 (l,mid) (l,mid) \u548c (mid,r) (mid,r) \u4e4b\u95f4\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb \u63a5\u4e0b\u6765\u6211\u4eec\u5904\u7406\u6240\u6709 l \\leq i \\leq mid,mid+1 \\leq j \\leq r l \\leq i \\leq mid,mid+1 \\leq j \\leq r \u5e76\u4e14 i i \u662f\u4e00\u4e2a\u4fee\u6539\u5e76\u4e14 j j \u662f\u4e00\u4e2a\u8be2\u95ee\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb \u6ce8\u610f\u5982\u679c\u6211\u4eec\u7684\u5404\u4e2a\u4fee\u6539\u4e4b\u95f4\u662f \u72ec\u7acb \u7684\u8bdd\u6211\u4eec\u4e0d\u9700\u8981\u7ba1\u5904\u7406 l \\leq i \\leq mid,mid+1 \\leq j \\leq r l \\leq i \\leq mid,mid+1 \\leq j \\leq r \u548c solve(l,mid) solve(l,mid) \u4ee5\u53ca solve(mid+1,r) solve(mid+1,r) \u4e4b\u95f4\u65f6\u5e8f\u5173\u7cfb (\u6bd4\u5982\u4f60\u7684\u4fee\u6539\u5c31\u662f\u666e\u901a\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u95ee\u9898\u4e4b\u7c7b\u7684) \u4f46\u662f\u5982\u679c\u4f60\u7684\u5404\u4e2a\u4fee\u6539\u4e4b\u95f4\u5e76\u4e0d\u72ec\u7acb\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u7684\u4fee\u6539\u662f\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u505a\u5b8c\u8fd9\u4e2a\u8d4b\u503c\u64cd\u4f5c\u4e4b\u540e\u5e8f\u5217\u957f\u4ec0\u4e48\u6837\u53ef\u80fd\u9700\u8981\u4f9d\u8d56\u4e8e\u4e4b\u524d\u7684\u5e8f\u5217\u957f\u4ec0\u4e48\u6837 \u90a3\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5904\u7406\u6240\u6709\u8de8\u8d8a mid \u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u7684\u65f6\u5019\u5c31\u5fc5\u987b\u628a\u5b83\u653e\u5728 solve(l,mid) solve(l,mid) \u548c solve(mid+1,r) solve(mid+1,r) \u4e4b\u95f4\u4e86, \u7406\u7531\u548c cdq \u5206\u6cbb\u4f18\u5316 1D/1D \u52a8\u6001\u89c4\u5212\u7684\u539f\u56e0\u662f\u4e00\u6837\u7684, \u6309\u7167\u4e2d\u5e8f\u904d\u5386\u5e8f\u8fdb\u884c\u5206\u6cbb\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u4fee\u6539\u90fd\u662f\u4e25\u683c\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u88ab\u6267\u884c\u7684 \u8fd9\u6837\u5149\u8bf4\u662f\u6ca1\u529e\u6cd5\u89e3\u51b3\u6211\u4eec\u7684\u95ee\u9898\u7684, \u56e0\u6b64\u6211\u4eec\u8fd8\u662f\u4e0a\u9053\u4f8b\u9898\u5427 \u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c \u00b6 \u8fd9\u91cc\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\u5c31\u662f\u5b57\u9762\u610f\u601d\u4e0a\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\uff0c\u8ba9\u4f60\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u7136\u540e\u652f\u6301\u5728\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u5185\u52a0\u4e00\u4e2a\u6570\u5b57\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u7684\u548c \u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u9759\u6001\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u4e8c\u7ef4\u5e73\u9762\u91cc\u6709\u4e00\u5806\u77e9\u5f62\uff0c\u6211\u4eec\u5e0c\u671b\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u7684\u548c\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u662f\u6709\u4e00\u4e2a\u7ecf\u5178\u505a\u6cd5\u53eb\u7ebf\u6bb5\u6811 + \u626b\u63cf\u7ebf\u7684 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6211\u4eec\u5c06\u6bcf\u4e2a\u77e9\u5f62\u62c6\u6210\u63d2\u5165\u548c\u5220\u9664\u4e24\u4e2a\u64cd\u4f5c\uff0c\u5c06\u6bcf\u4e2a\u8be2\u95ee\u62c6\u6210\u4e24\u4e2a\u524d\u7f00\u548c\u76f8\u51cf\u7684\u5f62\u5f0f\u7136\u540e\u79bb\u7ebf\u8dd1\u4e00\u6ce2\u5c31\u53ef\u4ee5\u4e86 \u95ee\u9898\u6765\u4e86\u554a\uff0c\u6211\u4eec\u73b0\u5728\u7684\u95ee\u9898\u662f\u52a8\u6001\u7684\u554a\uff0c\u600e\u4e48\u529e\u5462\uff1f \u4e0d\u5982\u5f3a\u884c\u5957\u4e00\u4e2a cdq \u5206\u6cbb\u8bd5\u8bd5\uff1f \u6211\u4eec\u5c06\u6240\u6709\u7684\u8be2\u95ee\u548c\u4fee\u6539\u64cd\u4f5c\u5168\u90e8\u79bb\u7ebf, \u8fd9\u4e9b\u64cd\u4f5c\u5f62\u6210\u4e86\u4e00\u4e2a\u5e8f\u5217\uff0c\u5e76\u4e14\u6709 O(N^2) O(N^2) \u5bf9\u4fee\u6539 - \u8be2\u95ee\u7684\u5173\u7cfb \u90a3\u4e48\u6211\u4eec\u4f9d\u7136\u4f7f\u7528 cdq \u5206\u6cbb\u7684\u4e00\u822c\u5957\u8def, \u5c06\u6240\u6709\u7684\u5173\u7cfb\u5206\u6210\u4e09\u7c7b, \u5728\u8fd9\u4e00\u5c42\u5206\u6cbb\u8fc7\u7a0b\u5f53\u4e2d\u4ec5\u4ec5\u5904\u7406\u8de8\u8d8a mid mid \uff0c\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\uff0c\u800c\u5269\u4e0b\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u901a\u8fc7\u9012\u5f52\u7684\u7684\u65b9\u5f0f\u6765\u89e3\u51b3 \u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8b\u5b9e\u5c31\u662f\u6240\u6709\u7684\u4fee\u6539\u90fd\u5728\u8be2\u95ee\u4e4b\u524d\u88ab\u505a\u51fa\u4e86 \u8fd9\u4e2a\u95ee\u9898\u5c31\u7b49\u4ef7\u4e8e\u5e73\u9762\u4e0a\u6709\u9759\u6001\u7684\u4e00\u5806\u77e9\u5f62\u63a5\u4e0b\u6765\u4e0d\u505c\u7684\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u7684\u548c\u4e86 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5957\u4e00\u4e2a\u626b\u63cf\u7ebf\u5728 O(nlogn) O(nlogn) \u7684\u65f6\u95f4\u5185\u5904\u7406\u597d\u6240\u6709\u8de8\u8d8a mid mid \u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb \u5269\u4e0b\u7684\u4e8b\u60c5\u5c31\u662f\u9012\u5f52\u7684\u5206\u6cbb\u5de6\u53f3\u4e24\u4fa7\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86 \u8fd9\u6837\u5b9e\u73b0\u7684 cdq \u5206\u6cbb\u7684\u8bdd\u4f60\u4f1a\u53d1\u73b0\u540c\u4e00\u4e2a\u8be2\u95ee\u88ab\u5904\u7406\u4e86 O(logn) O(logn) \u6b21\u6765\u56de\u7b54, \u4e0d\u8fc7\u6ca1\u6709\u5173\u7cfb\u56e0\u4e3a\u6bcf\u6b21\u8d21\u732e\u8fd9\u4e2a\u8be2\u95ee\u7684\u4fee\u6539\u662f\u4e92\u4e0d\u76f8\u4ea4\u7684 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) \u89c2\u5bdf\u4e0a\u8ff0\u7684\u7b97\u6cd5\u6d41\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u5f00\u59cb\u6211\u4eec\u53ea\u80fd\u89e3\u51b3\u9759\u6001\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\u95ee\u9898, \u4f46\u662f\u53ea\u662f\u7b80\u5355\u7684\u5957\u4e86\u4e00\u4e2a cdq \u5206\u6cbb\u4e0a\u53bb\u6211\u4eec\u5c31\u53ef\u4ee5\u79bb\u7ebf\u7684\u89e3\u51b3\u4e00\u4e2a\u52a8\u6001\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\u95ee\u9898\u4e86\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\u7684\u7cbe\u9ad3\u5c31\u5728\u4e8e cdq \u5206\u6cbb\u6bcf\u6b21\u4ec5\u4ec5\u5904\u7406\u8de8\u8d8a\u67d0\u4e00\u4e2a\u70b9\u7684\u4fee\u6539\u548c\u8be2\u95ee\u5173\u7cfb\u4e86, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ea\u9700\u8981\u8003\u8651\u6240\u6709\u8be2\u95ee\u90fd\u5728\u4fee\u6539\u4e4b\u540e\u8fd9\u4e2a\u7b80\u5355\u7684\u95ee\u9898\u4e86\u3002 \u4e5f\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e00\u70b9 cdq \u5206\u6cbb\u88ab\u79f0\u4e3a \u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\u7684\u5de5\u5177 [Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b \u00b6 \u4e00\u53e5\u8bdd\u9898\u610f\u533a\u95f4\u8d4b\u503c\u533a\u95f4\u6570\u989c\u8272 \u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u540c\u8272\u70b9\u7684\u4f4d\u7f6e, \u8bb0\u4e3a pre_{i} pre_{i} \uff0c\u6b64\u65f6\u533a\u95f4\u6570\u989c\u8272\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898 \u901a\u8fc7\u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u989c\u8272\u770b\u6210\u4e00\u4e2a\u70b9\u7684\u65b9\u5f0f\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e pre pre \u7684\u53d8\u5316\u91cf\u662f O(n+m) O(n+m) \u7684, \u6362\u53e5\u8bdd\u8bf4\u5355\u6b21\u64cd\u4f5c\u4ec5\u4ec5\u5f15\u8d77 O(1) O(1) \u7684 pre pre \u503c\u53d8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528 cdq \u5206\u6cbb\u6765\u89e3\u51b3\u52a8\u6001\u7684\u5355\u70b9\u52a0\u77e9\u5f62\u6c42\u548c\u95ee\u9898 pre pre \u6570\u7ec4\u7684\u5177\u4f53\u53d8\u5316\u53ef\u4ee5\u4f7f\u7528 std::set std::set \u6765\u8fdb\u884c\u5904\u7406 (\u8fd9\u4e2a\u7528 set \u7ef4\u62a4\u8fde\u7eed\u7684\u533a\u95f4\u7684\u6280\u5de7\u4e5f\u88ab\u79f0\u4e4b\u4e3a old driver tree ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 #include <cstdio> #include <algorithm> #include <set> #include <map> #define SNI set <nod> :: iterator #define SDI set <data> :: iterator using namespace std ; const int N = 1e5 + 10 ; int n ; int m ; int pre [ N ]; int npre [ N ]; int a [ N ]; int tp [ N ]; int lf [ N ]; int rt [ N ]; int co [ N ]; struct modi { int t ; int pos ; int pre ; int va ; friend bool operator < ( modi a , modi b ){ return a . pre < b . pre ;}} md [ 10 * N ]; int tp1 ; struct qry { int t ; int l ; int r ; int ans ; friend bool operator < ( qry a , qry b ){ return a . l < b . l ;}} qr [ N ]; int tp2 ; int cnt ; inline bool cmp ( const qry & a , const qry & b ){ return a . t < b . t ;} inline void modify ( int pos , int co ) //\u4fee\u6539\u51fd\u6570 { if ( npre [ pos ] == co ) return ; md [ ++ tp1 ] = ( modi ){ ++ cnt , pos , npre [ pos ], - 1 }; md [ ++ tp1 ] = ( modi ){ ++ cnt , pos , npre [ pos ] = co , 1 }; } namespace prew { int lst [ 2 * N ]; map < int , int > mp ; //\u63d0\u524d\u79bb\u6563\u5316 inline void prew () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]), mp [ a [ i ]] = 1 ; for ( int i = 1 ; i <= m ; i ++ ){ scanf ( \"%d%d%d\" , & tp [ i ], & lf [ i ], & rt [ i ]); if ( tp [ i ] == 1 ) scanf ( \"%d\" , & co [ i ]), mp [ co [ i ]] = 1 ;} map < int , int > :: iterator it , it1 ; for ( it = mp . begin (), it1 = it , ++ it1 ; it1 != mp . end (); ++ it , ++ it1 ) it1 -> second += it -> second ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = mp [ a [ i ]]; for ( int i = 1 ; i <= n ; i ++ ) if ( tp [ i ] == 1 ) co [ i ] = mp [ co [ i ]]; for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = lst [ a [ i ]], lst [ a [ i ]] = i ; for ( int i = 1 ; i <= n ; i ++ ) npre [ i ] = pre [ i ]; } } namespace colist { struct data { int l ; int r ; int x ; friend bool operator < ( data a , data b ){ return a . r < b . r ;}}; set < data > s ; struct nod { int l ; int r ; friend bool operator < ( nod a , nod b ){ return a . r < b . r ;}}; set < nod > c [ 2 * N ]; set < int > bd ; inline void split ( int mid ) //\u5c06\u4e00\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9 { SDI it = s . lower_bound (( data ){ 0 , mid , 0 }); data p =* it ; if ( mid == p . r ) return ; s . erase ( p ); s . insert (( data ){ p . l , mid , p . x }); s . insert (( data ){ mid + 1 , p . r , p . x }); c [ p . x ]. erase (( nod ){ p . l , p . r }); c [ p . x ]. insert (( nod ){ p . l , mid }); c [ p . x ]. insert (( nod ){ mid + 1 , p . r }); } inline void del ( set < data > :: iterator it ) //\u5220\u9664\u4e00\u4e2a\u8fed\u4ee3\u5668 { bd . insert ( it -> l ); SNI it1 , it2 ; it1 = it2 = c [ it -> x ]. find (( nod ){ it -> l , it -> r }); ++ it2 ; if ( it2 != c [ it -> x ]. end ()) bd . insert ( it2 -> l ); c [ it -> x ]. erase ( it1 ); s . erase ( it ); } inline void ins ( data p ) //\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 { s . insert ( p ); SNI it = c [ p . x ]. insert (( nod ){ p . l , p . r }). first ; ++ it ; if ( it != c [ p . x ]. end ()){ bd . insert ( it -> l );} } inline void stv ( int l , int r , int x ) //\u533a\u95f4\u8d4b\u503c { if ( l != 1 ) split ( l - 1 ); split ( r ); int p = l ; //split\u4e24\u4e0b\u4e4b\u540e\u5220\u6389\u6240\u6709\u533a\u95f4 while ( p != r + 1 ){ SDI it = s . lower_bound (( data ){ 0 , p , 0 }); p = it -> r + 1 ; del ( it );} ins (( data ){ l , r , x }); //\u626b\u4e00\u904dset\u5904\u7406\u6240\u6709\u53d8\u5316\u7684pre\u503c for ( set < int > :: iterator it = bd . begin (); it != bd . end (); ++ it ) { SDI it1 = s . lower_bound (( data ){ 0 , * it , 0 }); if ( * it != it1 -> l ) modify ( * it , * it - 1 ); else { SNI it2 = c [ it1 -> x ]. lower_bound (( nod ){ 0 , * it }); if ( it2 != c [ it1 -> x ]. begin ()) -- it2 , modify ( * it , it2 -> r ); else modify ( * it , 0 ); } } bd . clear (); } inline void ih () { int nc = a [ 1 ]; int ccnt = 1 ; //\u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u63d2\u5165\u5230set\u4e2d for ( int i = 2 ; i <= n ; i ++ ) if ( nc != a [ i ]){ s . insert (( data ){ i - ccnt , i - 1 , nc }), c [ nc ]. insert (( nod ){ i - ccnt , i - 1 }); nc = a [ i ]; ccnt = 1 ;} else { ccnt ++ ;} s . insert (( data ){ n - ccnt + 1 , n , a [ n ]}), c [ a [ n ]]. insert (( nod ){ n - ccnt + 1 , n }); } } namespace cdq { struct treearray //\u6811\u72b6\u6570\u7ec4 { int ta [ N ]; inline void c ( int x , int t ){ for (; x <= n ; x += x & ( - x )) ta [ x ] += t ;} inline void d ( int x ){ for (; x <= n ; x += x & ( - x )) ta [ x ] = 0 ;} inline int q ( int x ){ int r = 0 ; for (; x ; x -= x & ( - x )) r += ta [ x ]; return r ;} inline void clear (){ for ( int i = 1 ; i <= n ; i ++ ) ta [ i ] = 0 ;} } ta ; int srt [ N ]; inline bool cmp1 ( const int & a , const int & b ){ return pre [ a ] < pre [ b ];} inline void solve ( int l1 , int r1 , int l2 , int r2 , int L , int R ) //cdq { if ( l1 == r1 || l2 == r2 ) return ; int mid = ( L + R ) / 2 ; int mid1 = l1 ; while ( mid1 != r1 && md [ mid1 + 1 ]. t <= mid ) mid1 ++ ; int mid2 = l2 ; while ( mid2 != r2 && qr [ mid2 + 1 ]. t <= mid ) mid2 ++ ; solve ( l1 , mid1 , l2 , mid2 , L , mid ); solve ( mid1 , r1 , mid2 , r2 , mid , R ); if ( l1 != mid1 && mid2 != r2 ) { sort ( md + l1 + 1 , md + mid1 + 1 ); sort ( qr + mid2 + 1 , qr + r2 + 1 ); for ( int i = mid2 + 1 , j = l1 + 1 ; i <= r2 ; i ++ ) //\u8003\u8651\u5de6\u4fa7\u5bf9\u53f3\u4fa7\u8d21\u732e { while ( j <= mid1 && md [ j ]. pre < qr [ i ]. l ) ta . c ( md [ j ]. pos , md [ j ]. va ), j ++ ; qr [ i ]. ans += ta . q ( qr [ i ]. r ) - ta . q ( qr [ i ]. l - 1 ); } for ( int i = l1 + 1 ; i <= mid1 ; i ++ ) ta . d ( md [ i ]. pos ); } } inline void mainsolve () { colist :: ih (); for ( int i = 1 ; i <= m ; i ++ ) if ( tp [ i ] == 1 ) colist :: stv ( lf [ i ], rt [ i ], co [ i ]); else qr [ ++ tp2 ] = ( qry ){ ++ cnt , lf [ i ], rt [ i ], 0 }; sort ( qr + 1 , qr + tp2 + 1 ); for ( int i = 1 ; i <= n ; i ++ ) srt [ i ] = i ; sort ( srt + 1 , srt + n + 1 , cmp1 ); for ( int i = 1 , j = 1 ; i <= tp2 ; i ++ ) //\u521d\u59cb\u5316\u4e00\u4e0b\u6bcf\u4e2a\u8be2\u95ee\u7684\u503c { while ( j <= n && pre [ srt [ j ]] < qr [ i ]. l ) ta . c ( srt [ j ], 1 ), j ++ ; qr [ i ]. ans += ta . q ( qr [ i ]. r ) - ta . q ( qr [ i ]. l - 1 ); } ta . clear (); sort ( qr + 1 , qr + tp2 + 1 , cmp ); solve ( 0 , tp1 , 0 , tp2 , 0 , cnt ); sort ( qr + 1 , qr + tp2 + 1 , cmp ); for ( int i = 1 ; i <= tp2 ; i ++ ) printf ( \"%d \\n \" , qr [ i ]. ans ); } } int main (){ prew :: prew (); cdq :: mainsolve (); return 0 ;} //\u62dc\u62dc\u7a0b\u5e8f~ [HNOI2010]\u57ce\u5e02\u5efa\u8bbe \u00b6 \u4e00\u53e5\u8bdd\u9898\u610f: \u7ed9\u5b9a\u4e00\u5f20\u56fe\u652f\u6301\u52a8\u6001\u7684\u4fee\u6539\u8fb9\u6743, \u8981\u6c42\u5728\u6bcf\u6b21\u4fee\u6539\u8fb9\u6743\u4e4b\u540e\u8f93\u51fa\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6700\u5c0f\u4ee3\u4ef7\u548c \u4e8b\u5b9e\u4e0a\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5206\u6cbb\u5957 lct \u7684\u505a\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u4f46\u662f\u8fd9\u4e2a\u5b9e\u73b0\u65b9\u5f0f\u5e38\u6570\u8fc7\u5927\u53ef\u80fd\u9700\u8981\u7cbe\u5999\u7684\u5361\u5e38\u6280\u5de7\u624d\u53ef\u4ee5\u901a\u8fc7\u672c\u9898, \u56e0\u6b64\u6211\u4eec\u4e0d\u59a8\u8003\u8651 cdq \u5206\u6cbb\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \u548c\u4e00\u822c\u7684 cdq \u5206\u6cbb\u89e3\u51b3\u7684\u95ee\u9898\u4e0d\u540c\uff0c\u6211\u4eec\u6b64\u65f6 cdq \u5206\u6cbb\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u4fee\u6539\u548c\u8be2\u95ee\u7684\u5173\u7cfb\u6765\u8ba9\u6211\u4eec\u8fdb\u884c\u5206\u6cbb, \u56e0\u4e3a\u6211\u4eec\u662f\u6ca1\u6709\u529e\u6cd5\u5355\u72ec\u7684\u8003\u8651\u4fee\u6539\u4e00\u4e2a\u8fb9\u5bf9\u6574\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u6709\u4ec0\u4e48\u8d21\u732e, \u56e0\u6b64\u4f3c\u4e4e\u4f20\u7edf\u7684 cdq \u5206\u6cbb\u601d\u8def\u4f3c\u4e4e\u4e0d\u662f\u5f88\u597d\u4f7f \u90a3\u4e48\u6211\u4eec\u901a\u8fc7\u521a\u624d\u7684\u4f8b\u9898\u53ef\u4ee5\u53d1\u73b0\u4e00\u822c\u7684 cdq \u5206\u6cbb\u548c\u7ebf\u6bb5\u6811\u6709\u7740\u7279\u6b8a\u7684\u8054\u7cfb\uff0c\u6211\u4eec\u5728 cdq \u5206\u6cbb\u7684\u8fc7\u7a0b\u4e2d\u5176\u5b9e\u9690\u5f0f\u7684\u5efa\u4e86\u4e00\u9897\u7ebf\u6bb5\u6811\u51fa\u6765 (\u56e0\u4e3a cdq \u5206\u6cbb\u7684\u9012\u5f52\u6811\u5c31\u662f\u4e00\u9897\u7ebf\u6bb5\u6811) \u901a\u5e38\u7684 cdq \u662f\u8003\u8651\u7ebf\u6bb5\u6811\u5de6\u53f3\u513f\u5b50\u4e4b\u95f4\u7684\u8054\u7cfb \u800c\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bb2\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u7236\u4eb2\u548c\u5b69\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb \u6362\u53e5\u8bdd\u6765\u8bb2, \u6211\u4eec\u5728 solve(l,r) solve(l,r) \u8fd9\u6bb5\u533a\u95f4\u7684\u65f6\u5019\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u60f3\u529e\u6cd5\u4f7f\u56fe\u7684\u89c4\u6a21\u53d8\u6210\u548c\u533a\u95f4\u957f\u5ea6\u76f8\u5173\u7684\u4e00\u4e2a\u53d8\u91cf\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86 \u90a3\u4e48\u5177\u4f53\u6765\u8bb2\u5982\u4f55\u8bbe\u8ba1\u7b97\u6cd5\u5462? \u5047\u8bbe\u6211\u4eec\u6b63\u5728\u6784\u9020 (l,r) (l,r) \u8fd9\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u96c6\uff0c\u5e76\u4e14\u6211\u4eec\u5df2\u77e5\u5b83\u7236\u4eb2\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6 \u6211\u4eec\u5c06\u5728 (l,r) (l,r) \u8fd9\u6bb5\u533a\u95f4\u4e2d\u53d1\u751f\u53d8\u5316\u7684\u8fb9\u5206\u522b\u5c06\u8fb9\u6743\u8d4b\u6210 + \\infty + \\infty \u548c -\\infty -\\infty \u5206\u522b\u5404\u8dd1\u4e00\u8fb9 kruskal \u6c42\u51fa\u90a3\u4e9b\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d \u5bf9\u4e8e\u4e00\u6761\u8fb9\u6765\u8bb2, \u5982\u679c\u4ed6\u6ca1\u6709\u51fa\u73b0\u5728\u4e86\u6240\u6709\u88ab\u4fee\u6539\u7684\u8fb9\u6743\u90fd\u88ab\u8d4b\u6210\u4e86 +\\infty +\\infty \u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\u8bc1\u660e\u5b83\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728 (l,r) (l,r) \u8fd9\u4e9b\u8be2\u95ee\u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d, \u6240\u4ee5\u6211\u4eec\u4ec5\u4ec5\u5728 (l,r) (l,r) \u7684\u8fb9\u96c6\u4e2d\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u6811\u8fb9 \u5bf9\u4e8e\u4e00\u6761\u8fb9\u6765\u8bb2, \u5982\u679c\u5b83\u51fa\u73b0\u5728\u4e86\u6240\u6709\u88ab\u4fee\u6539\u7684\u8fb9\u6743\u90fd\u88ab\u8d4b\u6210\u4e86 - \\infty - \\infty \u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\uff0c\u5c31\u8bc1\u660e\u5b83\u4e00\u5b9a\u4f1a\u51fa\u73b0 (l,r) (l,r) \u8fd9\u6bb5\u7684\u533a\u95f4\u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u5c06\u8fd9\u4e9b\u8fb9\u5bf9\u5e94\u7684\u70b9\u7f29\u8d77\u6765, \u5e76\u4e14\u5c06\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743 \u5982\u6b64\u8fd9\u822c\u6211\u4eec\u5c31\u5c06 (l,r) (l,r) \u8fd9\u6bb5\u533a\u95f4\u7684\u8fb9\u96c6\u6784\u9020\u51fa\u6765\u4e86, \u7528\u8fd9\u4e9b\u8fb9\u6c42\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u548c\u76f4\u63a5\u6c42\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b49\u4ef7 \u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u5462? \u9996\u5148\u88ab\u4fee\u6539\u7684\u8fb9\u4e00\u5b9a\u4f1a\u52a0\u5165\u5230\u6211\u4eec\u7684\u8fb9\u96c6\u5f53\u4e2d\u53bb, \u8fd9\u4e9b\u8fb9\u7684\u6570\u76ee\u662f O(len) O(len) \u7ea7\u522b\u7684 \u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u8bc1\u660e\u7684\u662f\u8fb9\u96c6\u5f53\u4e2d\u4e0d\u4f1a\u6709\u8fc7\u591a\u7684\u672a\u88ab\u4fee\u6539\u7684\u8fb9 \u6ce8\u610f\u5230\u6211\u4eec\u53ea\u4f1a\u52a0\u5165\u6240\u6709\u8fb9\u6743\u53d6 +\\infty +\\infty \u6700\u5c0f\u751f\u6210\u6811\u7684\u6811\u8fb9, \u56e0\u6b64\u6211\u4eec\u52a0\u5165\u7684\u8fb9\u6570\u76ee\u662f\u4e0d\u4f1a\u8d85\u8fc7\u5f53\u524d\u56fe\u7684\u70b9\u6570\u7684 \u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8bc1\u660e\u6bcf\u9012\u5f52\u4e00\u5c42\u56fe\u7684\u70b9\u6570\u662f O(len) O(len) \u7ea7\u522b\u7684\u5c31\u53ef\u4ee5\u8bf4\u660e\u56fe\u7684\u8fb9\u6570\u662f O(len) O(len) \u7ea7\u522b\u7684\u4e86 \u8bc1\u660e\u70b9\u6570\u662f O(len) O(len) \u51e0\u500d\u5c31\u53d8\u7684\u5341\u5206\u7b80\u5355\u4e86, \u6211\u4eec\u6bcf\u6b21\u5411\u4e0b\u9012\u5f52\u7684\u65f6\u4faf\u7f29\u6389\u7684\u8fb9\u662f\u5728 -\\infty -\\infty \u751f\u6210\u6811\u4e2d\u51fa\u73b0\u7684\u672a\u88ab\u4fee\u6539\u8fb9, \u90a3\u4e48\u53cd\u8fc7\u6765\u60f3\u5c31\u662f\u6211\u4eec\u5272\u6389\u4e86\u51fa\u73b0\u5728 -\\infty -\\infty \u751f\u6210\u6811\u5f53\u4e2d\u7684\u6240\u6709\u7684\u88ab\u4fee\u6539\u8fb9, \u663e\u7136\u6211\u4eec\u6700\u591a\u5272\u6389 len len \u6761\u8fb9\uff0c\u6574\u5f20\u56fe\u6700\u591a\u5206\u88c2\u6210 O(len) O(len) \u4e2a\u8054\u901a\u5757, \u8fd9\u6837\u7684\u8bdd\u65b0\u56fe\u70b9\u6570\u5c31\u662f O(len) O(len) \u7ea7\u522b\u7684\u4e86 \u6240\u4ee5\u6211\u4eec\u5c31\u8bc1\u660e\u4e86\u6bcf\u6b21\u6211\u4eec\u7528\u6765\u8dd1 kruskal \u7684\u56fe\u90fd\u662f O(len) O(len) \u7ea7\u522b\u7684\u4e86 \u4ece\u800c\u6bcf\u4e00\u5c42\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f (nlogn) (nlogn) \u4e86 \u56e0\u6b64\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) \u4e86 \u4ee3\u7801\u5b9e\u73b0\u4e0a\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u96be\u5ea6, \u9700\u8981\u6ce8\u610f\u7684\u662f\u5e76\u67e5\u96c6\u4e0d\u80fd\u4f7f\u7528\u8def\u5f84\u538b\u7f29, \u5426\u5219\u5c31\u4e0d\u652f\u6301\u56de\u9000\u64cd\u4f5c\u4e86, \u6267\u884c\u7f29\u70b9\u64cd\u4f5c\u7684\u65f6\u5019\u4e5f\u6ca1\u6709\u5fc5\u8981\u771f\u7684\u6267\u884c\uff0c\u800c\u662f\u6bcf\u4e00\u5c42\u7684 kruskal \u90fd\u5728\u4e0a\u4e00\u5c42\u7684\u5e76\u67e5\u96c6\u91cc\u76f4\u63a5\u505a\u5c31\u53ef\u4ee5\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #include <cstdio> #include <algorithm> #include <vector> #include <stack> using namespace std ; typedef long long ll ; int n ; int m ; int ask ; struct bcj { int fa [ 20010 ]; int size [ 20010 ]; struct opt { int u ; int v ;}; stack < opt > st ; inline void ih (){ for ( int i = 1 ; i <= n ; i ++ ) fa [ i ] = i , size [ i ] = 1 ;} inline int f ( int x ){ return ( fa [ x ] == x ) ? x : f ( fa [ x ]);} inline void u ( int x , int y ) //\u5e26\u64a4\u56de { int u = f ( x ); int v = f ( y ); if ( u == v ) return ; if ( size [ u ] < size [ v ]) swap ( u , v ); size [ u ] += size [ v ]; fa [ v ] = u ; opt o ; o . u = u ; o . v = v ; st . push ( o ); } inline void undo (){ opt o = st . top (); st . pop (); fa [ o . v ] = o . v ; size [ o . u ] -= size [ o . v ];} inline void clear ( int tim ){ while ( st . size () > tim ){ undo ();}} } s , s1 ; struct edge //\u9759\u6001\u8fb9 { int u ; int v ; ll val ; int mrk ; friend bool operator < ( edge a , edge b ){ return a . val < b . val ;} } e [ 50010 ]; struct moved { int u ; int v ;}; //\u52a8\u6001\u8fb9 struct query { int num ; ll val ; ll ans ;} q [ 50010 ]; bool book [ 50010 ]; //\u8be2\u95ee vector < edge > ve [ 30 ]; vector < moved > vq ; vector < edge > tr ; ll res [ 30 ]; int tim [ 30 ]; inline void pushdown ( int dep ) //\u7f29\u8fb9 { tr . clear (); //\u8fd9\u91cc\u8981\u590d\u5236\u4e00\u4efd\uff0c\u4ee5\u514d\u65e0\u6cd5\u56de\u64a4\u64cd\u4f5c for ( int i = 0 ; i < ve [ dep ]. size (); i ++ ){ tr . push_back ( ve [ dep ][ i ]);} sort ( tr . begin (), tr . end ()); for ( int i = 0 ; i < tr . size (); i ++ ) //\u65e0\u7528\u8fb9 { if ( s1 . f ( tr [ i ]. u ) == s1 . f ( tr [ i ]. v )){ tr [ i ]. mrk =- 1 ; continue ;} s1 . u ( tr [ i ]. u , tr [ i ]. v ); } s1 . clear ( 0 ); res [ dep + 1 ] = res [ dep ]; for ( int i = 0 ; i < vq . size (); i ++ ){ s1 . u ( vq [ i ]. u , vq [ i ]. v );} vq . clear (); for ( int i = 0 ; i < tr . size (); i ++ ) //\u5fc5\u987b\u8fb9 { if ( tr [ i ]. mrk ==- 1 || s1 . f ( tr [ i ]. u ) == s1 . f ( tr [ i ]. v )) continue ; tr [ i ]. mrk = 1 ; s1 . u ( tr [ i ]. u , tr [ i ]. v ); s . u ( tr [ i ]. u , tr [ i ]. v ); res [ dep + 1 ] += tr [ i ]. val ; } s1 . clear ( 0 ); ve [ dep + 1 ]. clear (); for ( int i = 0 ; i < tr . size (); i ++ ) //\u7f29\u8fb9 { if ( tr [ i ]. mrk != 0 ) continue ; edge p ; p . u = s . f ( tr [ i ]. u ); p . v = s . f ( tr [ i ]. v ); if ( p . u == p . v ) continue ; p . val = tr [ i ]. val ; p . mrk = 0 ; ve [ dep + 1 ]. push_back ( p ); } return ; } inline void solve ( int l , int r , int dep ) { tim [ dep ] = s . st . size (); int mid = ( l + r ) / 2 ; if ( r - l == 1 ) //\u7ec8\u6b62\u6761\u4ef6 { edge p ; p . u = s . f ( e [ q [ r ]. num ]. u ); p . v = s . f ( e [ q [ r ]. num ]. v ); p . val = q [ r ]. val ; e [ q [ r ]. num ]. val = q [ r ]. val ; p . mrk = 0 ; ve [ dep ]. push_back ( p ); pushdown ( dep ); q [ r ]. ans = res [ dep + 1 ]; s . clear ( tim [ dep - 1 ]); return ; } for ( int i = l + 1 ; i <= mid ; i ++ ){ book [ q [ i ]. num ] = true ;} for ( int i = mid + 1 ; i <= r ; i ++ ) //\u52a8\u8f6c\u9759 { if ( book [ q [ i ]. num ]) continue ; edge p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); p . val = e [ q [ i ]. num ]. val ; p . mrk = 0 ; ve [ dep ]. push_back ( p ); } for ( int i = l + 1 ; i <= mid ; i ++ ) //\u8be2\u95ee\u8f6c\u52a8\u6001 { moved p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); vq . push_back ( p ); } pushdown ( dep ); //\u4e0b\u9762\u7684\u662f\u56de\u64a4 for ( int i = mid + 1 ; i <= r ; i ++ ){ if ( book [ q [ i ]. num ]) continue ; ve [ dep ]. pop_back ();} for ( int i = l + 1 ; i <= mid ; i ++ ){ book [ q [ i ]. num ] = false ;} solve ( l , mid , dep + 1 ); for ( int i = 0 ; i < ve [ dep ]. size (); i ++ ){ ve [ dep ][ i ]. mrk = 0 ;} for ( int i = mid + 1 ; i <= r ; i ++ ){ book [ q [ i ]. num ] = true ;} for ( int i = l + 1 ; i <= mid ; i ++ ) //\u52a8\u8f6c\u9759 { if ( book [ q [ i ]. num ]) continue ; edge p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); p . val = e [ q [ i ]. num ]. val ; p . mrk = 0 ; ve [ dep ]. push_back ( p ); } for ( int i = mid + 1 ; i <= r ; i ++ ) //\u8be2\u95ee\u8f6c\u52a8 { book [ q [ i ]. num ] = false ; moved p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); vq . push_back ( p ); } pushdown ( dep ); solve ( mid , r , dep + 1 ); s . clear ( tim [ dep - 1 ]); return ; //\u65f6\u95f4\u5012\u6d41\u81f3\u4e0a\u4e00\u5c42 } int main () { scanf ( \"%d%d%d\" , & n , & m , & ask ); s . ih (); s1 . ih (); for ( int i = 1 ; i <= m ; i ++ ){ scanf ( \"%d%d%lld\" , & e [ i ]. u , & e [ i ]. v , & e [ i ]. val );} for ( int i = 1 ; i <= ask ; i ++ ){ scanf ( \"%d%lld\" , & q [ i ]. num , & q [ i ]. val );} for ( int i = 1 ; i <= ask ; i ++ ) //\u521d\u59cb\u52a8\u6001\u8fb9 { book [ q [ i ]. num ] = true ; moved p ; p . u = e [ q [ i ]. num ]. u ; p . v = e [ q [ i ]. num ]. v ; vq . push_back ( p ); } for ( int i = 1 ; i <= m ; i ++ ){ if ( book [ i ]) continue ; ve [ 1 ]. push_back ( e [ i ]);} //\u521d\u59cb\u9759\u6001 for ( int i = 1 ; i <= ask ; i ++ ){ book [ q [ i ]. num ] = false ;} solve ( 0 , ask , 1 ); for ( int i = 1 ; i <= ask ; i ++ ){ printf ( \"%lld \\n \" , q [ i ]. ans );} return 0 ; //\u62dc\u62dc\u7a0b\u5e8f~ }","title":"CDQ \u5206\u6cbb"},{"location":"misc/cdq-divide/#_1","text":"\u4ec0\u4e48\u662f cdq \u5206\u6cbb\u5462\uff1f\uff0c\u5176\u5b9e\u4ed6\u662f\u4e00\u79cd\u601d\u60f3\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7b97\u6cd5\uff08\u5c31\u548c dp \u662f\u4e00\u6837\u7684\uff09\uff0c\u56e0\u6b64 cdq \u5206\u6cbb\u6db5\u76d6\u7684\u8303\u56f4\u76f8\u5f53\u7684\u5e7f\u6cdb\uff0c\u7531\u4e8e\u8fd9\u6837\u7684\u601d\u8def\u6700\u65e9\u662f\u88ab\u9648\u4e39\u742a\u5f15\u5165\u56fd\u5185\u7684\uff0c\u6240\u4ee5\u5c31\u53eb cdq \u5206\u6cbb\u4e86 \u73b0\u5728 oi \u754c\u5bf9\u4e8e cdq \u5206\u6cbb\u8fd9\u4e2a\u601d\u60f3\u7684\u62d3\u5c55\u5341\u5206\u5e7f\u6cdb\uff0c\u4f46\u662f\u8fd9\u4e9b\u90fd\u53eb cdq \u7684\u4e1c\u897f\u5176\u5b9e\u539f\u7406\u548c\u5199\u6cd5\u4e0a\u5e76\u4e0d\u76f8\u540c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u5927\u6982\u7684\u5c06\u5b83\u4eec\u5206\u4e3a\u4e09\u7c7b 1.cdq \u5206\u6cbb\u89e3\u51b3\u548c\u70b9\u5bf9\u6709\u5173\u7684\u95ee\u9898 2.cdq \u5206\u6cbb\u4f18\u5316 1D/1D \u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb 3. \u901a\u8fc7 cdq \u5206\u6cbb, \u5c06\u4e00\u4e9b\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898","title":"\u5f15\u5b50"},{"location":"misc/cdq-divide/#cdq","text":"\u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u662f\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217\uff0c\u7136\u540e\u8ba9\u4f60\u7edf\u8ba1\u6709\u4e00\u4e9b\u7279\u6027\u7684\u70b9\u5bf9 (i,j) (i,j) \u6709\u591a\u5c11\u4e2a, \u53c8\u6216\u8005\u8bf4\u662f\u627e\u5230\u4e00\u5bf9\u70b9 (i,j) (i,j) \u4f7f\u5f97\u4e00\u4e9b\u51fd\u6570\u7684\u503c\u6700\u5927\u4e4b\u7c7b\u7684\u95ee\u9898 \u90a3\u4e48 cdq \u5206\u6cbb\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898 1. \u627e\u5230\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u70b9 mid mid 2. \u5c06\u6240\u6709\u70b9\u5bf9 (i,j) (i,j) \u5212\u5206\u4e3a 3 \u7c7b \u7b2c\u4e00\u79cd\u662f 1 \\leq i \\leq mid,1 \\leq j \\leq mid 1 \\leq i \\leq mid,1 \\leq j \\leq mid \u7684\u70b9\u5bf9 \u7b2c\u4e8c\u79cd\u662f 1 \\leq i \\leq mid ,mid+1 \\leq j \\leq n 1 \\leq i \\leq mid ,mid+1 \\leq j \\leq n \u7684\u70b9\u5bf9 \u7b2c\u4e09\u79cd\u662f mid+1 \\leq i \\leq n,mid+1 \\leq j \\leq n mid+1 \\leq i \\leq n,mid+1 \\leq j \\leq n \u7684\u70b9\u5bf9 3. \u5c06 (1,n) (1,n) \u8fd9\u4e2a\u5e8f\u5217\u62c6\u6210\u4e24\u4e2a\u5e8f\u5217 (1,mid) (1,mid) \u548c (mid+1,n) (mid+1,n) \u4f1a\u53d1\u73b0\u7b2c\u4e00\u7c7b\u70b9\u5bf9\u548c\u7b2c\u4e09\u7c7b\u70b9\u5bf9\u90fd\u5728\u8fd9\u4e24\u4e2a\u5e8f\u5217\u4e4b\u4e2d, \u9012\u5f52\u7684\u53bb\u89e3\u51b3\u8fd9\u4e24\u7c7b\u70b9\u5bf9 4. \u60f3\u65b9\u8bbe\u6cd5\u5904\u7406\u4e00\u4e0b\u7b2c\u4e8c\u7c7b\u70b9\u5bf9\u7684\u4fe1\u606f \u5b9e\u9645\u5e94\u7528\u7684\u65f6\u5019\u6211\u4eec\u901a\u5e38\u90fd\u662f\u5199\u4e00\u4e2a\u51fd\u6570 solve(l,r) solve(l,r) \u8868\u793a\u6211\u4eec\u6b63\u5728\u5904\u7406 l \\leq i \\leq r,l \\leq j \\leq r l \\leq i \\leq r,l \\leq j \\leq r \u7684\u70b9\u5bf9 \u6240\u4ee5\u521a\u624d\u7684\u7b97\u6cd5\u6d41\u7a0b\u4e2d\u7684\u9012\u5f52\u90e8\u5206\u6211\u4eec\u5c31\u662f\u901a\u8fc7 solve(l,mid),solve(mid,r) solve(l,mid),solve(mid,r) \u6765\u5b9e\u73b0\u7684 \u6240\u4ee5\u8bf4 cdq \u5206\u6cbb\u53ea\u662f\u4e00\u79cd\u5341\u5206\u6a21\u7cca\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u79cd\u601d\u60f3\u5c31\u662f\u4e0d\u65ad\u7684\u628a\u70b9\u5bf9\u901a\u8fc7\u9012\u5f52 (\u7529\u9505) \u7684\u65b9\u5f0f\u5206\u7ed9\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4 \u81f3\u4e8e\u6211\u4eec\u8bbe\u8ba1\u51fa\u6765\u7684\u7b97\u6cd5\u771f\u6b63\u5e72\u6d3b\u7684\u90e8\u5206\u5c31\u662f\u7b2c 4 \u90e8\u5206\u9700\u8981\u6211\u4eec\u60f3\u65b9\u8bbe\u6cd5\u89e3\u51b3\u7684\u90e8\u5206\u4e86 \u6240\u4ee5\u8bf4\u8ba9\u6211\u4eec\u4e0a\u51e0\u9053\u4f8b\u9898\u770b\u4e00\u4e0b\u7b2c\u56db\u90e8\u5206\u4e00\u822c\u8be5\u600e\u4e48\u5199 \u6bd4\u5982\u8bf4\u6211\u4eec\u6765\u4e00\u4e2a cdq \u5206\u6cbb\u7684\u7ecf\u5178\u95ee\u9898\u2014\u2014\u4e09\u7ef4\u504f\u5e8f","title":"CDQ \u5206\u6cbb\u89e3\u51b3\u548c\u70b9\u5bf9\u6709\u5173\u7684\u95ee\u9898"},{"location":"misc/cdq-divide/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217, \u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u5c5e\u6027 (a,b) (a,b) \uff0c\u8bd5\u6c42\uff1a\u8fd9\u4e2a\u5e8f\u5217\u91cc\u6709\u591a\u5c11\u5bf9\u70b9\u5bf9 (i,j) (i,j) \u6ee1\u8db3 i<j,a_{i}<a_{j},b_{i}<b_{j} i<j,a_{i}<a_{j},b_{i}<b_{j} \u7edf\u8ba1\u5e8f\u5217\u91cc\u70b9\u5bf9\u7684\u4e2a\u6570\uff1f\u6211\u4eec\u7ed9\u4ed6\u5957\u4e2a cdq \u8bd5\u8bd5\u3002 \u597d\u4e86\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6b63\u5728 solve(l,r) solve(l,r) \u5e76\u4e14\u901a\u8fc7\u67d0\u4e9b\u5965\u5999\u91cd\u91cd\u7684\u624b\u6bb5\u641e\u5b9a\u4e86 solve(l,mid) solve(l,mid) \u548c solve(mid+1,r) solve(mid+1,r) (\u5176\u5b9e\u5c31\u662f\u9012\u5f52) \u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u662f\u7edf\u8ba1\u6ee1\u8db3 l \\leq i \\leq mid,mid+1 \\leq j \\leq r l \\leq i \\leq mid,mid+1 \\leq j \\leq r \u7684\u70b9\u5bf9 (i,j) (i,j) \u4e2d\uff0c\u6709\u591a\u4e2a\u70b9\u5bf9\u8fd8\u6ee1\u8db3 i<j,a_{i}<a_{j},b_{i}<b_{j} i<j,a_{i}<a_{j},b_{i}<b_{j} \u7684\u9650\u5236\u6761\u4ef6\u54af \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u90a3\u4e2a i<j i<j \u7684\u9650\u5236\u6761\u4ef6\u6ca1\u5565\u7528\u4e86\uff0c\u65e2\u7136 i i \u6bd4 mid mid \u5c0f j j \u6bd4 mid mid \u5927, \u90a3 i i \u80af\u5b9a\u6bd4 j j \u8981\u5c0f \u4f60\u53c8\u53d1\u73b0\u73b0\u5728\u8fd8\u5269\u4e0b\u4e24\u4e2a\u9650\u5236\u6761\u4ef6 a_{i}<a_{j},b_{i}<b_{j} a_{i}<a_{j},b_{i}<b_{j} , \u6839\u636e\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e j j , \u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684 i i \u4e3a\u4e86\u65b9\u4fbf\u679a\u4e3e, \u6211\u4eec\u628a (l,mid) (l,mid) \u548c (mid+1,r) (mid+1,r) \u4e2d\u7684\u70b9\u5168\u90e8\u6309\u7167 a a \u503c\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f \u4e4b\u540e\u6211\u4eec\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u4e2a j j , \u628a\u6240\u6709 a_{i}<a_{j} a_{i}<a_{j} \u7684\u70b9 i i \u5168\u90e8\u63d2\u5165\u5230\u67d0\u4e00\u4e2a\u795e\u5947\u6570\u636e\u7ed3\u6784\u91cc, \u6b64\u65f6\u53ea\u8981\u5bf9\u8fd9\u4e2a\u795e\u5947\u6570\u636e\u7ed3\u6784\u8be2\u95ee\u4e00\u53d1: \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u91cc\u6709\u591a\u5c11\u4e2a\u70b9\u7684 b b \u503c\u662f\u5c0f\u4e8e b_{j} b_{j} \u7684, \u6211\u4eec\u5c31\u5bf9\u4e8e\u8fd9\u4e2a\u70b9 j j \u6c42\u51fa\u4e86\u6709\u591a\u5c11\u4e2a i i \u53ef\u4ee5\u548c\u4ed6\u5408\u6cd5\u7684\u5339\u914d\u4e86 \u95ee\u9898\u6765\u4e86\u90a3\u4e2a\u795e\u5947\u6570\u636e\u7ed3\u6784\u53eb\u4ec0\u4e48\u5462\uff1f \u6811\u72b6\u6570\u7ec4\u554a \u5f53\u6211\u4eec\u63d2\u5165\u4e00\u4e2a b b \u503c\u7b49\u4e8e x x \u7684\u70b9\u65f6, \u6211\u4eec\u5c31\u4ee4\u6811\u72b6\u6570\u7ec4\u7684 x x \u8fd9\u4e2a\u4f4d\u7f6e\u5355\u70b9 + 1\uff0c\u800c\u67e5\u8be2\u6570\u636e\u7ed3\u6784\u91cc\u6709\u591a\u5c11\u4e2a\u70b9\u5c0f\u4e8e x x \u7684\u64cd\u4f5c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u6c42\u524d\u7f00\u548c, \u53ea\u8981\u6211\u4eec\u4e8b\u5148\u5bf9\u4e8e\u6240\u6709\u7684 b \u503c\u505a\u4e86\u79bb\u6563\u5316\u6211\u4eec\u7684\u590d\u6742\u5ea6\u5c31\u662f\u5bf9\u7684 \u95ee\u9898\u53c8\u6765\u4e86\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a j j \u6211\u4eec\u90fd\u9700\u8981\u5c06\u6240\u6709 a_{i}<a_{j} a_{i}<a_{j} \u7684\u70b9 i i \u63d2\u5165\u6811\u72b6\u6570\u7ec4\u4e2d, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u603b\u5171\u8981\u5bf9\u6811\u72b6\u6570\u7ec4\u505a O(n^2) O(n^2) \u6b21\u64cd\u4f5c\u554a\uff0c\u600e\u4e48\u529e\u5462\uff1f \u8fd8\u8bb0\u5f97\u4f60\u628a\u6240\u6709\u7684 i i \u548c j j \u90fd\u4e8b\u5148\u6309\u7167 a a \u503c\u6392\u597d\u5e8f\u4e86\u5417\uff1f\u6211\u4eec\u4ee5\u53cc\u6307\u9488\u7684\u65b9\u5f0f\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u63d2\u5165\u70b9, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ea\u9700\u8981\u505a O(n) O(n) \u6b21\u63d2\u5165\u64cd\u4f5c\u5566~ \u6240\u4ee5\u901a\u8fc7\u8fd9\u6837\u4e00\u4e2a\u7b97\u6cd5\u6d41\u7a0b\u6211\u4eec\u5c31\u7528 O(nlogn) O(nlogn) \u7684\u65f6\u95f4\u5904\u7406\u5b8c\u4e86\u5173\u4e8e\u7b2c 2 2 \u7c7b\u70b9\u5bf9\u7684\u4fe1\u606f\u4e86 \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u5c31\u662f T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+O(nlogn)=O(nlog^2n) T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+O(nlogn)=O(nlog^2n) \u4e86","title":"\u4e09\u7ef4\u504f\u5e8f"},{"location":"misc/cdq-divide/#cqoi2011","text":"\u4ed4\u7ec6\u63a8\u4e00\u4e0b\u5c31\u662f\u548c\u4e09\u7ef4\u504f\u5e8f\u5dee\u4e0d\u591a\u7684\u5f0f\u5b50\u4e86\uff0c\u57fa\u672c\u5c31\u662f\u4e00\u4e2a\u4e09\u7ef4\u504f\u5e8f\u7684\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <algorithm> #include <cstdio> using namespace std ; typedef long long ll ; int n ; int m ; struct treearray { int ta [ 200010 ]; inline void ub ( int & x ) { x += x & ( - x ); } inline void db ( int & x ) { x -= x & ( - x ); } inline void c ( int x , int t ) { for (; x <= n + 1 ; ub ( x )) ta [ x ] += t ; } inline int sum ( int x ) { int r = 0 ; for (; x > 0 ; db ( x )) r += ta [ x ]; return r ; } } ta ; struct data { int val ; int del ; int ans ; } a [ 100010 ]; int rv [ 100010 ]; ll res ; bool cmp1 ( const data & a , const data & b ) { return a . val < b . val ; } bool cmp2 ( const data & a , const data & b ) { return a . del < b . del ; } void solve ( int l , int r ) { if ( r - l == 1 ) { return ; } int mid = ( l + r ) / 2 ; solve ( l , mid ); solve ( mid , r ); int i = l + 1 ; int j = mid + 1 ; while ( i <= mid ) { while ( a [ i ]. val > a [ j ]. val && j <= r ) { ta . c ( a [ j ]. del , 1 ); j ++ ; } a [ i ]. ans += ta . sum ( m + 1 ) - ta . sum ( a [ i ]. del ); i ++ ; } i = l + 1 ; j = mid + 1 ; while ( i <= mid ) { while ( a [ i ]. val > a [ j ]. val && j <= r ) { ta . c ( a [ j ]. del , - 1 ); j ++ ; } i ++ ; } i = mid ; j = r ; while ( j > mid ) { while ( a [ j ]. val < a [ i ]. val && i > l ) { ta . c ( a [ i ]. del , 1 ); i -- ; } a [ j ]. ans += ta . sum ( m + 1 ) - ta . sum ( a [ j ]. del ); j -- ; } i = mid ; j = r ; while ( j > mid ) { while ( a [ j ]. val < a [ i ]. val && i > l ) { ta . c ( a [ i ]. del , - 1 ); i -- ; } j -- ; } sort ( a + l + 1 , a + r + 1 , cmp1 ); return ; } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ]. val ); rv [ a [ i ]. val ] = i ; } for ( int i = 1 ; i <= m ; i ++ ) { int p ; scanf ( \"%d\" , & p ); a [ rv [ p ]]. del = i ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ i ]. del == 0 ) a [ i ]. del = m + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { res += ta . sum ( n + 1 ) - ta . sum ( a [ i ]. val ); ta . c ( a [ i ]. val , 1 ); } for ( int i = 1 ; i <= n ; i ++ ) { ta . c ( a [ i ]. val , - 1 ); } solve ( 0 , n ); sort ( a + 1 , a + n + 1 , cmp2 ); for ( int i = 1 ; i <= m ; i ++ ) { printf ( \"%lld \\n \" , res ); res -= a [ i ]. ans ; } return 0 ; }","title":"\u4f8b\u9898 [CQOI2011]\u52a8\u6001\u9006\u5e8f\u5bf9"},{"location":"misc/cdq-divide/#cdq-1d1d","text":"\u6240\u8c13 1D/1D \u52a8\u6001\u89c4\u5212\u5c31\u662f\u8bf4\u6211\u4eec\u7684 dp \u6570\u7ec4\u662f 1 \u7ef4\u7684\uff0c\u8f6c\u79fb\u662f O(n) O(n) \u7684\u4e00\u7c7b dp \u95ee\u9898\uff0c\u5982\u679c\u6761\u4ef6\u826f\u597d\u7684\u8bdd\u6211\u4eec\u6709\u4e9b\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7 cdq \u5206\u6cbb\u6765\u628a\u8fd9\u7c7b\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7531 O(n^2) O(n^2) \u964d\u81f3 O(nlog^2n) O(nlog^2n) \u90a3\u4e48\u6bd4\u5982\u8bf4\u6211\u4eec\u8981\u4f18\u5316\u8fd9\u6837\u7684\u4e00\u4e2a dp dp \u5f0f\u5b50\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u6709\u4e24\u4e2a\u5c5e\u6027 a,b a,b \u6211\u4eec\u5e0c\u671b\u8ba1\u7b97\u4e00\u4e2a dp \u5f0f\u5b50\u7684\u503c\uff0c\u5b83\u7684\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: dp_{i}=1+ \\max_{j=1}^{i-1}dp_{j}[a_{j}<a_{i}][b_{j}<b_{i}] dp_{i}=1+ \\max_{j=1}^{i-1}dp_{j}[a_{j}<a_{i}][b_{j}<b_{i}] \u5982\u679c\u4f60\u8db3\u591f\u719f\u7ec3\u7684\u8bdd\u53ef\u4ee5\u770b\u51fa\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684 dp dp \u65b9\u7a0b \u89e3\u91ca\u4e00\u4e0b\u4e0a\u9762\u7684\u5f0f\u5b50\u5c31\u662f\u8bf4\u53ea\u6709 i<j,a_{i}<a_{j},b_{i}<b_{j} i<j,a_{i}<a_{j},b_{i}<b_{j} \u7684\u70b9 j j \u53ef\u4ee5\u53bb\u66f4\u65b0\u70b9 i i \u7684 dp \u503c \u76f4\u63a5\u8f6c\u79fb\u663e\u7136\u662f O(n^2) O(n^2) \u7684\uff0c\u6211\u4eec\u5982\u4f55\u4f7f\u7528 cdq cdq \u5206\u6cbb\u53bb\u4f18\u5316\u5b83\u7684\u8f6c\u79fb\u8fc7\u7a0b\u5462\uff1f \u8fd9\u4e2a\u8f6c\u79fb\u8fc7\u7a0b\u76f8\u5bf9\u6765\u8bb2\u6bd4\u8f83\u5957\u8def\uff0c\u6211\u4eec\u5148\u4ecb\u7ecd\u7b97\u6cd5\u6d41\u7a0b\u7136\u540e\u518d\u6162\u6162\u8bc1\u660e\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684 \u6211\u4eec\u53d1\u73b0 dp_{j} dp_{j} \u8f6c\u79fb\u5230 dp_{i} dp_{i} \u8fd9\u79cd\u8f6c\u79fb\u5173\u7cfb\u4e5f\u662f\u4e00\u79cd\u70b9\u5bf9\u95f4\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u50cf cdq cdq \u5206\u6cbb\u5904\u7406\u70b9\u5bf9\u5173\u7cfb\u4e00\u6837\u7684\u6765\u5904\u7406\u5b83 \u5177\u4f53\u6765\u8bb2\u6211\u4eec\u8fd9\u6837\u5199 cdq, \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6b63\u5728\u5904\u7406\u7684\u533a\u95f4\u662f (l,r) (l,r) , 0. \u5982\u679c l=r l=r \u8bf4\u660e\u6211\u4eec\u7684 dp_{r} dp_{r} \u503c\u5df2\u7ecf\u88ab\u8ba1\u7b97\u597d\u4e86, \u6211\u4eec\u76f4\u63a5\u4ee4 dp_{r}++ dp_{r}++ \u7136\u540e\u8fd4\u56de\u5373\u53ef 1. \u5148\u9012\u5f52\u7684 solve(l,mid) solve(l,mid) 2. \u5904\u7406\u6240\u6709 l \\leq j \\leq mid,mid+1 \\leq i \\leq r l \\leq j \\leq mid,mid+1 \\leq i \\leq r \u7684\u8f6c\u79fb\u5173\u7cfb 3. \u7136\u540e\u9012\u5f52\u7684 solve(mid+1,r) solve(mid+1,r) \u90a3\u4e48\u7b2c\u4e8c\u6b65\u600e\u4e48\u505a\u5462\uff1f \u5176\u5b9e\u548c cdq \u5206\u6cbb\u6c42\u4e09\u7ef4\u504f\u5e8f\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5904\u7406 l \\leq j \\leq mid,mid+1 \\leq i \\leq r l \\leq j \\leq mid,mid+1 \\leq i \\leq r \u7684\u8f6c\u79fb\u5173\u7cfb\u7684\u65f6\u5019\u6211\u4eec\u5df2\u7ecf\u4e0d\u7528\u7ba1 j<i j<i \u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u4e86, \u56e0\u6b64\u6211\u4eec\u4f9d\u7136\u662f\u5c06\u6240\u6709\u7684\u70b9 i i \u548c\u70b9 j j \u6309 a a \u503c\u8fdb\u884c\u6392\u5e8f\u5904\u7406\u4e4b\u540e\u7528\u53cc\u6307\u9488\u7684\u65b9\u5f0f\u5c06 j j \u70b9\u63d2\u5165\u5230\u6811\u72b6\u6570\u7ec4\u91cc, \u7136\u540e\u6700\u540e\u67e5\u4e00\u53d1\u524d\u7f00\u6700\u5927\u503c\u66f4\u65b0\u4e00\u4e0b dp_{i} dp_{i} \u5c31\u53ef\u4ee5\u4e86 \u4f60\u4f1a\u53d1\u73b0\u6b64\u65f6\u7684 cdq \u5199\u6cd5\u548c\u4e0a\u4e00\u79cd\u5904\u7406\u70b9\u5bf9\u95f4\u5173\u7cfb\u7684 cdq \u5199\u6cd5\u6700\u5927\u7684\u4e0d\u540c\u5c31\u662f\u5904\u7406 l \\leq j \\leq mid,mid+1 \\leq i \\leq r l \\leq j \\leq mid,mid+1 \\leq i \\leq r \u7684\u70b9\u5bf9\u8fd9\u4e00\u90e8\u5206\uff0c\u4e0a\u9762\u7684\u5199\u6cd5\u4e2d\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u653e\u5230\u54ea\u91cc\u90fd\u662f\u53ef\u4ee5\u7684, \u4f46\u662f, \u5728\u7528 cdq \u5206\u6cbb\u4f18\u5316 dp \u7684\u65f6\u5019\u8fd9\u4e2a\u6d41\u7a0b\u5374\u5fc5\u987b\u5939\u5728 solve(l,mid),solve(mid+1,r) solve(l,mid),solve(mid+1,r) \u7684\u4e2d\u95f4\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a dp \u7684\u8f6c\u79fb\u662f \u6709\u5e8f\u7684 \uff0c\u6211\u4eec\u7684 dp \u7684\u8f6c\u79fb\u5fc5\u987b\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\u5426\u5219\u5c31\u662f\u4e0d\u5bf9\u7684 1. \u7528\u6765\u8ba1\u7b97 dp_{i} dp_{i} \u7684\u6240\u6709 dp_{j} dp_{j} \u503c\u90fd\u5fc5\u987b\u662f\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u7684, \u4e0d\u80fd\u5b58\u5728 \"\u534a\u6210\u54c1\" 2. \u7528\u6765\u8ba1\u7b97 dp_{i} dp_{i} \u7684\u6240\u6709 dp_{j} dp_{j} \u503c\u90fd\u5fc5\u987b\u80fd\u66f4\u65b0\u5230 dp_{i} dp_{i} \u4e0d\u80fd\u5b58\u5728\u6709\u7684 dp_{j} dp_{j} \u503c\u6ca1\u6709\u66f4\u65b0\u5230 \u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u53ef\u80fd\u5728 O(n^2) O(n^2) \u66b4\u529b\u7684\u65f6\u5019\u662f\u76f8\u5f53\u5bb9\u6613\u6ee1\u8db3\u7684, \u4f46\u662f\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u4f7f\u7528\u4e86 cdq \u5206\u6cbb\uff0c\u5f88\u663e\u7136\u8f6c\u79fb\u987a\u5e8f\u88ab\u6211\u4eec\u641e\u7684\u4e71\u4e03\u516b\u7cdf\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u5fc5\u8981\u597d\u597d\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u8fd9\u6837\u505a\u5230\u5e95\u662f\u4e0d\u662f\u5bf9\u7684 \u90a3\u5c31\u8ba9\u6211\u4eec\u770b\u4e00\u770b cdq \u5206\u6cbb\u7684\u9012\u5f52\u6811\u597d\u4e86 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u6267\u884c\u521a\u624d\u7684\u7b97\u6cd5\u6d41\u7a0b\u7684\u8bdd \u4f60\u4f1a\u53d1\u73b0\u6bd4\u5982\u8bf4 8 8 \u8fd9\u4e2a\u70b9\u7684 dp dp \u503c\u662f\u5728 solve(1,8),solve(5,8),solve(7,8) solve(1,8),solve(5,8),solve(7,8) \u8fd9 3 \u4e2a\u51fd\u6570\u4e2d\u88ab\u66f4\u65b0\u5b8c\u6210\u7684, \u800c\u4e09\u6b21\u7528\u6765\u66f4\u65b0\u5b83\u7684\u70b9\u5206\u522b\u662f (1,4)(5,6)(7,7) (1,4)(5,6)(7,7) \u8fd9\u4e09\u4e2a\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4 \u53c8\u6bd4\u5982\u8bf4 5 5 \u8fd9\u4e2a\u70b9\u5b83\u7684 dp \u503c\u5c31\u662f\u5728 solve(1,4) solve(1,4) \u51fd\u6570\u4e2d\u89e3\u51b3\u7684, \u66f4\u65b0\u5b83\u7684\u533a\u95f4\u662f (1,4) (1,4) \u4ed4\u7ec6\u89c2\u5bdf\u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a i \u70b9\u7684 dp \u503c\u88ab\u66f4\u65b0\u4e86 log log \u6b21\uff0c\u800c\u4e14, \u66f4\u65b0\u5b83\u7684\u533a\u95f4\u521a\u597d\u662f (1,i) (1,i) \u5728\u7ebf\u6bb5\u6811\u4e0a\u88ab\u62c6\u5206\u51fa\u6765\u7684 log \u4e2a\u533a\u95f4 \u56e0\u6b64\u6211\u4eec\u7684\u7b2c 2 \u4e2a\u6761\u4ef6\u5c31\u6ee1\u8db3\u4e86, \u6211\u4eec\u7684\u786e\u4fdd\u8bc1\u4e86\u6240\u6709\u5408\u6cd5\u7684 j j \u90fd\u53bb\u66f4\u65b0\u8fc7\u70b9 i i \u6211\u4eec\u63a5\u7740\u5206\u6790\u6211\u4eec\u7b97\u6cd5\u7684\u6267\u884c\u6d41\u7a0b \u7b2c\u4e00\u4e2a\u7ed3\u675f\u7684\u51fd\u6570\u662f solve(1,1) solve(1,1) \u6b64\u65f6\u6211\u4eec\u53d1\u73b0 dp_{1} dp_{1} \u7684\u503c\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u7b2c\u4e00\u4e2a\u6267\u884c\u8f6c\u79fb\u8fc7\u7a0b\u7684\u51fd\u6570\u662f solve(1,2) solve(1,2) \u6b64\u65f6\u6211\u4eec\u53d1\u73b0 dp_{2} dp_{2} \u7684\u503c\u5df2\u7ecf\u88ab\u8f6c\u79fb\u597d\u4e86 \u7b2c\u4e8c\u4e2a\u7ed3\u675f\u7684\u51fd\u6570 solve(2,2) solve(2,2) \u6b64\u65f6\u6211\u4eec\u53d1\u73b0 dp_{2} dp_{2} \u7684\u503c\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u63a5\u4e0b\u6765 solve(1,2) solve(1,2) \u7ed3\u675f, (1,2) (1,2) \u8fd9\u6bb5\u533a\u95f4\u7684 dp dp \u503c\u5747\u88ab\u8ba1\u7b97\u597d \u4e0b\u4e00\u4e2a\u6267\u884c\u8f6c\u79fb\u6d41\u7a0b\u7684\u51fd\u6570\u662f solve(1,4) solve(1,4) \u8fd9\u6b21\u8f6c\u79fb\u7ed3\u675f\u4e4b\u540e\u6211\u4eec\u53d1\u73b0 dp_{3} dp_{3} \u7684\u503c\u5df2\u7ecf\u88ab\u8f6c\u79fb\u597d\u4e86 \u63a5\u4e0b\u6765\u7ed3\u675f\u7684\u51fd\u6570\u662f solve(3,3) solve(3,3) \u6211\u4eec\u4f1a\u53d1\u73b0 dp_{3} dp_{3} \u7684 dp \u503c\u88ab\u8ba1\u7b97\u597d\u4e86 \u63a5\u4e0b\u6765\u6267\u884c\u7684\u8f6c\u79fb\u662f solve(2,4) solve(2,4) \u6b64\u65f6 dp_{4} dp_{4} \u5728 solve(1,4) solve(1,4) \u4e2d\u88ab (1,2)\u8f6c\u79fb\u4e86\u4e00\u6b21,\u8fd9\u6b21\u53c8\u88ab (1,2)\u8f6c\u79fb\u4e86\u4e00\u6b21,\u8fd9\u6b21\u53c8\u88ab (3,3)$ \u8f6c\u79fb\u4e86 \u56e0\u6b64 dp_{4} dp_{4} \u7684\u503c\u4e5f\u88ab\u8f6c\u79fb\u597d\u4e86 \u63a5\u4e0b\u6765 solve(4,4) solve(4,4) \u7ed3\u675f dp_{4} dp_{4} \u7684\u503c\u88ab\u8ba1\u7b97\u5b8c\u6bd5 \u63a5\u4e0b\u6765 solve(3,4) solve(3,4) \u7ed3\u675f (3,4) (3,4) \u7684\u503c\u88ab\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u63a5\u4e0b\u6765 solve(1,4) solve(1,4) \u7ed3\u675f (1,4) (1,4) \u7684\u503c\u88ab\u8ba1\u7b97\u5b8c\u6bd5\u4e86 \u901a\u8fc7\u6211\u4eec\u521a\u624d\u624b\u73a9\u4e86\u534a\u4e2a\u51fd\u6570\u6d41\u7a0b\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e8b\u5b9e\u5c31\u662f\u6bcf\u6b21 solve(l,r) solve(l,r) \u7ed3\u675f\u7684\u65f6\u5019 (l,r) (l,r) \u533a\u95f4\u7684 dp \u503c\u5168\u90e8\u4f1a\u88ab\u8ba1\u7b97\u597d, \u7531\u4e8e\u6211\u4eec\u6bcf\u4e00\u6b21\u6267\u884c\u8f6c\u79fb\u51fd\u6570\u7684\u65f6\u5019\u7531\u4e8e solve(l,mid) solve(l,mid) \u5df2\u7ecf\u7ed3\u675f\uff0c\u56e0\u6b64\u6211\u4eec\u6bcf\u4e00\u6b21\u6267\u884c\u7684\u8f6c\u79fb\u8fc7\u7a0b\u90fd\u662f\u5408\u6cd5\u7684 \u5728\u521a\u624d\u7684\u8fc7\u7a0b\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06 cdq \u5206\u6cbb\u7684\u9012\u5f52\u6811\u770b\u6210\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48 cdq \u5206\u6cbb\u5c31\u662f\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7684 \u4e2d\u5e8f\u904d\u5386\u51fd\u6570 \uff0c\u56e0\u6b64\u6211\u4eec\u76f8\u5f53\u4e8e\u6309\u987a\u5e8f\u5904\u7406\u4e86\u6240\u6709\u7684 dp \u503c\uff0c\u53ea\u662f\u8f6c\u79fb\u987a\u5e8f\u88ab\u62c6\u5f00\u4e86\u800c\u5df2\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u7b97\u6cd5\u662f\u6b63\u786e\u7684","title":"CDQ \u5206\u6cbb\u4f18\u5316 1D/1D \u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb"},{"location":"misc/cdq-divide/#sdoi2011","text":"\u4e00\u9053\u4e8c\u7ef4\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u9898, \u4e3a\u4e86\u786e\u5b9a\u67d0\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e2d\u53ef\u4ee5\u6b63\u53cd\u8dd1\u4e24\u904d CDQ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <cstdio> #include <algorithm> using namespace std ; typedef double db ; const int N = 1e6 + 10 ; struct data { int h ; int v ; int p ; int ma ; db ca ;} a [ 2 ][ N ]; int n ; bool tr ; inline bool cmp1 ( const data & a , const data & b ){ if ( tr ) return a . h > b . h ; else return a . h < b . h ;} inline bool cmp2 ( const data & a , const data & b ){ if ( tr ) return a . v > b . v ; else return a . v < b . v ;} inline bool cmp3 ( const data & a , const data & b ){ if ( tr ) return a . p < b . p ; else return a . p > b . p ;} inline bool cmp4 ( const data & a , const data & b ){ return a . v == b . v ;} struct treearray { int ma [ 2 * N ]; db ca [ 2 * N ]; inline void c ( int x , int t , db c ) { for (; x <= n ; x += x & ( - x )){ if ( ma [ x ] == t ){ ca [ x ] += c ;} else if ( ma [ x ] < t ){ ca [ x ] = c ; ma [ x ] = t ;}}} inline void d ( int x ){ for (; x <= n ; x += x & ( - x )){ ma [ x ] = 0 ; ca [ x ] = 0 ;}} inline void q ( int x , int & m , db & c ) { for (; x > 0 ; x -= x & ( - x )){ if ( ma [ x ] == m ){ c += ca [ x ];} else if ( m < ma [ x ]){ c = ca [ x ]; m = ma [ x ];}}} } ta ; int rk [ 2 ][ N ]; inline void solve ( int l , int r , int t ) { if ( r - l == 1 ){ return ;} int mid = ( l + r ) / 2 ; solve ( l , mid , t ); sort ( a [ t ] + mid + 1 , a [ t ] + r + 1 , cmp1 ); int p = l + 1 ; for ( int i = mid + 1 ; i <= r ; i ++ ) { for (;( cmp1 ( a [ t ][ p ], a [ t ][ i ]) || a [ t ][ p ]. h == a [ t ][ i ]. h ) && p <= mid ; p ++ ) { ta . c ( a [ t ][ p ]. v , a [ t ][ p ]. ma , a [ t ][ p ]. ca );} db c = 0 ; int m = 0 ; ta . q ( a [ t ][ i ]. v , m , c ); if ( a [ t ][ i ]. ma < m + 1 ){ a [ t ][ i ]. ma = m + 1 ; a [ t ][ i ]. ca = c ;} else if ( a [ t ][ i ]. ma == m + 1 ){ a [ t ][ i ]. ca += c ;} } for ( int i = l + 1 ; i <= mid ; i ++ ){ ta . d ( a [ t ][ i ]. v );} sort ( a [ t ] + mid , a [ t ] + r + 1 , cmp3 ); solve ( mid , r , t ); sort ( a [ t ] + l + 1 , a [ t ] + r + 1 , cmp1 ); } inline void ih ( int t ) { sort ( a [ t ] + 1 , a [ t ] + n + 1 , cmp2 ); rk [ t ][ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ){ rk [ t ][ i ] = ( cmp4 ( a [ t ][ i ], a [ t ][ i - 1 ])) ? rk [ t ][ i - 1 ] : i ;} for ( int i = 1 ; i <= n ; i ++ ){ a [ t ][ i ]. v = rk [ t ][ i ];} sort ( a [ t ] + 1 , a [ t ] + n + 1 , cmp3 ); for ( int i = 1 ; i <= n ; i ++ ){ a [ t ][ i ]. ma = 1 ; a [ t ][ i ]. ca = 1 ;} } int len ; db ans ; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & a [ 0 ][ i ]. h , & a [ 0 ][ i ]. v ); a [ 0 ][ i ]. p = i ; a [ 1 ][ i ]. h = a [ 0 ][ i ]. h ; a [ 1 ][ i ]. v = a [ 0 ][ i ]. v ; a [ 1 ][ i ]. p = i ; } ih ( 0 ); solve ( 0 , n , 0 ); tr = 1 ; ih ( 1 ); solve ( 0 , n , 1 ); tr = 1 ; sort ( a [ 0 ] + 1 , a [ 0 ] + n + 1 , cmp3 ); sort ( a [ 1 ] + 1 , a [ 1 ] + n + 1 , cmp3 ); for ( int i = 1 ; i <= n ; i ++ ){ len = max ( len , a [ 0 ][ i ]. ma );} printf ( \"%d \\n \" , len ); for ( int i = 1 ; i <= n ; i ++ ){ if ( a [ 0 ][ i ]. ma == len ){ ans += a [ 0 ][ i ]. ca ;}} for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ 0 ][ i ]. ma + a [ 1 ][ i ]. ma - 1 == len ){ printf ( \"%.5lf \" ,( a [ 0 ][ i ]. ca * a [ 1 ][ i ]. ca ) / ans );} else { printf ( \"0.00000 \" );} } return 0 ; }","title":"\u4f8b\u9898[SDOI2011] \u62e6\u622a\u5bfc\u5f39"},{"location":"misc/cdq-divide/#cdq_1","text":"\u6211\u4eec\u4f1a\u53d1\u73b0 CDQ \u5206\u6cbb\u4e00\u822c\u662f\u4e00\u79cd\u5904\u7406\u5e8f\u5217\u95ee\u9898\u7684\u5957\u8def\uff0c\u901a\u8fc7\u5c06\u5e8f\u5217\u6298\u534a\u4e4b\u540e\u9012\u5f52\u5904\u7406\u70b9\u5bf9\u95f4\u7684\u5173\u7cfb\u6765\u83b7\u5f97\u826f\u597d\u7684\u590d\u6742\u5ea6 \u4e0d\u8fc7\u5728\u8fd9\u4e00\u90e8\u5206\u5f53\u4e2d\u6211\u4eec\u5206\u6cbb\u7684\u5374\u4e0d\u662f\u4e00\u822c\u7684\u5e8f\u5217\u800c\u662f\u65f6\u95f4\u5e8f\u5217 \u4ec0\u4e48\u610f\u601d\u5462\uff1f \u4f17\u6240\u5468\u77e5\u7684\u662f\u6709\u4e9b\u6570\u636e\u7ed3\u6784\u9898\u9700\u8981\u6211\u4eec\u5179\u6b21\u505a xxx \u4fee\u6539\u7136\u540e\u505a xxx \u8be2\u95ee\u7684\u60c5\u51b5 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\u5982\u679c\u6211\u4eec\u628a\u8be2\u95ee\u8fdb\u884c\u79bb\u7ebf\u4e4b\u540e\uff0c\u6240\u6709\u64cd\u4f5c\u6309\u7167\u65f6\u95f4\u81ea\u7136\u7684\u6392\u6210\u4e86\u4e00\u4e2a\u5e8f\u5217\uff0c\u53e6\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u4e8b\u5b9e\u662f\u6bcf\u4e00\u4e2a\u4fee\u6539\u4f1a\u5bf9\u5b83\u4e4b\u540e\u7684\u8be2\u95ee\u53d1\u751f\u5173\u7cfb\uff0c\u800c\u8fd9\u6837\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u4e00\u5171\u4f1a\u6709 O(n^2) O(n^2) \u5bf9 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 cdq \u5206\u6cbb\u5bf9\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u5e8f\u5217\u8fdb\u884c\u5206\u6cbb, \u6309\u7167 cdq \u5206\u6cbb\u5904\u7406\u4fee\u6539\u548c\u8be2\u95ee\u4e4b\u95f4\u7684\u5173\u7cfb \u8fd8\u662f\u548c\u5904\u7406\u70b9\u5bf9\u5173\u7cfb\u7684 cdq \u5206\u6cbb\u7c7b\u4f3c, \u6211\u4eec\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u5206\u6cbb\u7684\u5e8f\u5217\u662f (l,r) (l,r) , \u6211\u4eec\u5148\u9012\u5f52\u7684\u5904\u7406 (l,mid) (l,mid) \u548c (mid,r) (mid,r) \u4e4b\u95f4\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb \u63a5\u4e0b\u6765\u6211\u4eec\u5904\u7406\u6240\u6709 l \\leq i \\leq mid,mid+1 \\leq j \\leq r l \\leq i \\leq mid,mid+1 \\leq j \\leq r \u5e76\u4e14 i i \u662f\u4e00\u4e2a\u4fee\u6539\u5e76\u4e14 j j \u662f\u4e00\u4e2a\u8be2\u95ee\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb \u6ce8\u610f\u5982\u679c\u6211\u4eec\u7684\u5404\u4e2a\u4fee\u6539\u4e4b\u95f4\u662f \u72ec\u7acb \u7684\u8bdd\u6211\u4eec\u4e0d\u9700\u8981\u7ba1\u5904\u7406 l \\leq i \\leq mid,mid+1 \\leq j \\leq r l \\leq i \\leq mid,mid+1 \\leq j \\leq r \u548c solve(l,mid) solve(l,mid) \u4ee5\u53ca solve(mid+1,r) solve(mid+1,r) \u4e4b\u95f4\u65f6\u5e8f\u5173\u7cfb (\u6bd4\u5982\u4f60\u7684\u4fee\u6539\u5c31\u662f\u666e\u901a\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u95ee\u9898\u4e4b\u7c7b\u7684) \u4f46\u662f\u5982\u679c\u4f60\u7684\u5404\u4e2a\u4fee\u6539\u4e4b\u95f4\u5e76\u4e0d\u72ec\u7acb\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u7684\u4fee\u6539\u662f\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u505a\u5b8c\u8fd9\u4e2a\u8d4b\u503c\u64cd\u4f5c\u4e4b\u540e\u5e8f\u5217\u957f\u4ec0\u4e48\u6837\u53ef\u80fd\u9700\u8981\u4f9d\u8d56\u4e8e\u4e4b\u524d\u7684\u5e8f\u5217\u957f\u4ec0\u4e48\u6837 \u90a3\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5904\u7406\u6240\u6709\u8de8\u8d8a mid \u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u7684\u65f6\u5019\u5c31\u5fc5\u987b\u628a\u5b83\u653e\u5728 solve(l,mid) solve(l,mid) \u548c solve(mid+1,r) solve(mid+1,r) \u4e4b\u95f4\u4e86, \u7406\u7531\u548c cdq \u5206\u6cbb\u4f18\u5316 1D/1D \u52a8\u6001\u89c4\u5212\u7684\u539f\u56e0\u662f\u4e00\u6837\u7684, \u6309\u7167\u4e2d\u5e8f\u904d\u5386\u5e8f\u8fdb\u884c\u5206\u6cbb\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u4fee\u6539\u90fd\u662f\u4e25\u683c\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u88ab\u6267\u884c\u7684 \u8fd9\u6837\u5149\u8bf4\u662f\u6ca1\u529e\u6cd5\u89e3\u51b3\u6211\u4eec\u7684\u95ee\u9898\u7684, \u56e0\u6b64\u6211\u4eec\u8fd8\u662f\u4e0a\u9053\u4f8b\u9898\u5427","title":"\u9700\u8981 CDQ \u5c06\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\u7684\u9898"},{"location":"misc/cdq-divide/#_3","text":"\u8fd9\u91cc\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\u5c31\u662f\u5b57\u9762\u610f\u601d\u4e0a\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\uff0c\u8ba9\u4f60\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u7136\u540e\u652f\u6301\u5728\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u5185\u52a0\u4e00\u4e2a\u6570\u5b57\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u7684\u548c \u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u9759\u6001\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u4e8c\u7ef4\u5e73\u9762\u91cc\u6709\u4e00\u5806\u77e9\u5f62\uff0c\u6211\u4eec\u5e0c\u671b\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u7684\u548c\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u662f\u6709\u4e00\u4e2a\u7ecf\u5178\u505a\u6cd5\u53eb\u7ebf\u6bb5\u6811 + \u626b\u63cf\u7ebf\u7684 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u6211\u4eec\u5c06\u6bcf\u4e2a\u77e9\u5f62\u62c6\u6210\u63d2\u5165\u548c\u5220\u9664\u4e24\u4e2a\u64cd\u4f5c\uff0c\u5c06\u6bcf\u4e2a\u8be2\u95ee\u62c6\u6210\u4e24\u4e2a\u524d\u7f00\u548c\u76f8\u51cf\u7684\u5f62\u5f0f\u7136\u540e\u79bb\u7ebf\u8dd1\u4e00\u6ce2\u5c31\u53ef\u4ee5\u4e86 \u95ee\u9898\u6765\u4e86\u554a\uff0c\u6211\u4eec\u73b0\u5728\u7684\u95ee\u9898\u662f\u52a8\u6001\u7684\u554a\uff0c\u600e\u4e48\u529e\u5462\uff1f \u4e0d\u5982\u5f3a\u884c\u5957\u4e00\u4e2a cdq \u5206\u6cbb\u8bd5\u8bd5\uff1f \u6211\u4eec\u5c06\u6240\u6709\u7684\u8be2\u95ee\u548c\u4fee\u6539\u64cd\u4f5c\u5168\u90e8\u79bb\u7ebf, \u8fd9\u4e9b\u64cd\u4f5c\u5f62\u6210\u4e86\u4e00\u4e2a\u5e8f\u5217\uff0c\u5e76\u4e14\u6709 O(N^2) O(N^2) \u5bf9\u4fee\u6539 - \u8be2\u95ee\u7684\u5173\u7cfb \u90a3\u4e48\u6211\u4eec\u4f9d\u7136\u4f7f\u7528 cdq \u5206\u6cbb\u7684\u4e00\u822c\u5957\u8def, \u5c06\u6240\u6709\u7684\u5173\u7cfb\u5206\u6210\u4e09\u7c7b, \u5728\u8fd9\u4e00\u5c42\u5206\u6cbb\u8fc7\u7a0b\u5f53\u4e2d\u4ec5\u4ec5\u5904\u7406\u8de8\u8d8a mid mid \uff0c\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\uff0c\u800c\u5269\u4e0b\u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u901a\u8fc7\u9012\u5f52\u7684\u7684\u65b9\u5f0f\u6765\u89e3\u51b3 \u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8b\u5b9e\u5c31\u662f\u6240\u6709\u7684\u4fee\u6539\u90fd\u5728\u8be2\u95ee\u4e4b\u524d\u88ab\u505a\u51fa\u4e86 \u8fd9\u4e2a\u95ee\u9898\u5c31\u7b49\u4ef7\u4e8e\u5e73\u9762\u4e0a\u6709\u9759\u6001\u7684\u4e00\u5806\u77e9\u5f62\u63a5\u4e0b\u6765\u4e0d\u505c\u7684\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u7684\u548c\u4e86 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5957\u4e00\u4e2a\u626b\u63cf\u7ebf\u5728 O(nlogn) O(nlogn) \u7684\u65f6\u95f4\u5185\u5904\u7406\u597d\u6240\u6709\u8de8\u8d8a mid mid \u7684\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb \u5269\u4e0b\u7684\u4e8b\u60c5\u5c31\u662f\u9012\u5f52\u7684\u5206\u6cbb\u5de6\u53f3\u4e24\u4fa7\u4fee\u6539 - \u8be2\u95ee\u5173\u7cfb\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86 \u8fd9\u6837\u5b9e\u73b0\u7684 cdq \u5206\u6cbb\u7684\u8bdd\u4f60\u4f1a\u53d1\u73b0\u540c\u4e00\u4e2a\u8be2\u95ee\u88ab\u5904\u7406\u4e86 O(logn) O(logn) \u6b21\u6765\u56de\u7b54, \u4e0d\u8fc7\u6ca1\u6709\u5173\u7cfb\u56e0\u4e3a\u6bcf\u6b21\u8d21\u732e\u8fd9\u4e2a\u8be2\u95ee\u7684\u4fee\u6539\u662f\u4e92\u4e0d\u76f8\u4ea4\u7684 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) \u89c2\u5bdf\u4e0a\u8ff0\u7684\u7b97\u6cd5\u6d41\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u5f00\u59cb\u6211\u4eec\u53ea\u80fd\u89e3\u51b3\u9759\u6001\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\u95ee\u9898, \u4f46\u662f\u53ea\u662f\u7b80\u5355\u7684\u5957\u4e86\u4e00\u4e2a cdq \u5206\u6cbb\u4e0a\u53bb\u6211\u4eec\u5c31\u53ef\u4ee5\u79bb\u7ebf\u7684\u89e3\u51b3\u4e00\u4e2a\u52a8\u6001\u7684\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c\u95ee\u9898\u4e86\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\u7684\u7cbe\u9ad3\u5c31\u5728\u4e8e cdq \u5206\u6cbb\u6bcf\u6b21\u4ec5\u4ec5\u5904\u7406\u8de8\u8d8a\u67d0\u4e00\u4e2a\u70b9\u7684\u4fee\u6539\u548c\u8be2\u95ee\u5173\u7cfb\u4e86, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ea\u9700\u8981\u8003\u8651\u6240\u6709\u8be2\u95ee\u90fd\u5728\u4fee\u6539\u4e4b\u540e\u8fd9\u4e2a\u7b80\u5355\u7684\u95ee\u9898\u4e86\u3002 \u4e5f\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e00\u70b9 cdq \u5206\u6cbb\u88ab\u79f0\u4e3a \u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\u7684\u5de5\u5177","title":"\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c"},{"location":"misc/cdq-divide/#ynoi2016","text":"\u4e00\u53e5\u8bdd\u9898\u610f\u533a\u95f4\u8d4b\u503c\u533a\u95f4\u6570\u989c\u8272 \u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u540c\u8272\u70b9\u7684\u4f4d\u7f6e, \u8bb0\u4e3a pre_{i} pre_{i} \uff0c\u6b64\u65f6\u533a\u95f4\u6570\u989c\u8272\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898 \u901a\u8fc7\u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u989c\u8272\u770b\u6210\u4e00\u4e2a\u70b9\u7684\u65b9\u5f0f\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e pre pre \u7684\u53d8\u5316\u91cf\u662f O(n+m) O(n+m) \u7684, \u6362\u53e5\u8bdd\u8bf4\u5355\u6b21\u64cd\u4f5c\u4ec5\u4ec5\u5f15\u8d77 O(1) O(1) \u7684 pre pre \u503c\u53d8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528 cdq \u5206\u6cbb\u6765\u89e3\u51b3\u52a8\u6001\u7684\u5355\u70b9\u52a0\u77e9\u5f62\u6c42\u548c\u95ee\u9898 pre pre \u6570\u7ec4\u7684\u5177\u4f53\u53d8\u5316\u53ef\u4ee5\u4f7f\u7528 std::set std::set \u6765\u8fdb\u884c\u5904\u7406 (\u8fd9\u4e2a\u7528 set \u7ef4\u62a4\u8fde\u7eed\u7684\u533a\u95f4\u7684\u6280\u5de7\u4e5f\u88ab\u79f0\u4e4b\u4e3a old driver tree ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 #include <cstdio> #include <algorithm> #include <set> #include <map> #define SNI set <nod> :: iterator #define SDI set <data> :: iterator using namespace std ; const int N = 1e5 + 10 ; int n ; int m ; int pre [ N ]; int npre [ N ]; int a [ N ]; int tp [ N ]; int lf [ N ]; int rt [ N ]; int co [ N ]; struct modi { int t ; int pos ; int pre ; int va ; friend bool operator < ( modi a , modi b ){ return a . pre < b . pre ;}} md [ 10 * N ]; int tp1 ; struct qry { int t ; int l ; int r ; int ans ; friend bool operator < ( qry a , qry b ){ return a . l < b . l ;}} qr [ N ]; int tp2 ; int cnt ; inline bool cmp ( const qry & a , const qry & b ){ return a . t < b . t ;} inline void modify ( int pos , int co ) //\u4fee\u6539\u51fd\u6570 { if ( npre [ pos ] == co ) return ; md [ ++ tp1 ] = ( modi ){ ++ cnt , pos , npre [ pos ], - 1 }; md [ ++ tp1 ] = ( modi ){ ++ cnt , pos , npre [ pos ] = co , 1 }; } namespace prew { int lst [ 2 * N ]; map < int , int > mp ; //\u63d0\u524d\u79bb\u6563\u5316 inline void prew () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]), mp [ a [ i ]] = 1 ; for ( int i = 1 ; i <= m ; i ++ ){ scanf ( \"%d%d%d\" , & tp [ i ], & lf [ i ], & rt [ i ]); if ( tp [ i ] == 1 ) scanf ( \"%d\" , & co [ i ]), mp [ co [ i ]] = 1 ;} map < int , int > :: iterator it , it1 ; for ( it = mp . begin (), it1 = it , ++ it1 ; it1 != mp . end (); ++ it , ++ it1 ) it1 -> second += it -> second ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = mp [ a [ i ]]; for ( int i = 1 ; i <= n ; i ++ ) if ( tp [ i ] == 1 ) co [ i ] = mp [ co [ i ]]; for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = lst [ a [ i ]], lst [ a [ i ]] = i ; for ( int i = 1 ; i <= n ; i ++ ) npre [ i ] = pre [ i ]; } } namespace colist { struct data { int l ; int r ; int x ; friend bool operator < ( data a , data b ){ return a . r < b . r ;}}; set < data > s ; struct nod { int l ; int r ; friend bool operator < ( nod a , nod b ){ return a . r < b . r ;}}; set < nod > c [ 2 * N ]; set < int > bd ; inline void split ( int mid ) //\u5c06\u4e00\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9 { SDI it = s . lower_bound (( data ){ 0 , mid , 0 }); data p =* it ; if ( mid == p . r ) return ; s . erase ( p ); s . insert (( data ){ p . l , mid , p . x }); s . insert (( data ){ mid + 1 , p . r , p . x }); c [ p . x ]. erase (( nod ){ p . l , p . r }); c [ p . x ]. insert (( nod ){ p . l , mid }); c [ p . x ]. insert (( nod ){ mid + 1 , p . r }); } inline void del ( set < data > :: iterator it ) //\u5220\u9664\u4e00\u4e2a\u8fed\u4ee3\u5668 { bd . insert ( it -> l ); SNI it1 , it2 ; it1 = it2 = c [ it -> x ]. find (( nod ){ it -> l , it -> r }); ++ it2 ; if ( it2 != c [ it -> x ]. end ()) bd . insert ( it2 -> l ); c [ it -> x ]. erase ( it1 ); s . erase ( it ); } inline void ins ( data p ) //\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 { s . insert ( p ); SNI it = c [ p . x ]. insert (( nod ){ p . l , p . r }). first ; ++ it ; if ( it != c [ p . x ]. end ()){ bd . insert ( it -> l );} } inline void stv ( int l , int r , int x ) //\u533a\u95f4\u8d4b\u503c { if ( l != 1 ) split ( l - 1 ); split ( r ); int p = l ; //split\u4e24\u4e0b\u4e4b\u540e\u5220\u6389\u6240\u6709\u533a\u95f4 while ( p != r + 1 ){ SDI it = s . lower_bound (( data ){ 0 , p , 0 }); p = it -> r + 1 ; del ( it );} ins (( data ){ l , r , x }); //\u626b\u4e00\u904dset\u5904\u7406\u6240\u6709\u53d8\u5316\u7684pre\u503c for ( set < int > :: iterator it = bd . begin (); it != bd . end (); ++ it ) { SDI it1 = s . lower_bound (( data ){ 0 , * it , 0 }); if ( * it != it1 -> l ) modify ( * it , * it - 1 ); else { SNI it2 = c [ it1 -> x ]. lower_bound (( nod ){ 0 , * it }); if ( it2 != c [ it1 -> x ]. begin ()) -- it2 , modify ( * it , it2 -> r ); else modify ( * it , 0 ); } } bd . clear (); } inline void ih () { int nc = a [ 1 ]; int ccnt = 1 ; //\u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u63d2\u5165\u5230set\u4e2d for ( int i = 2 ; i <= n ; i ++ ) if ( nc != a [ i ]){ s . insert (( data ){ i - ccnt , i - 1 , nc }), c [ nc ]. insert (( nod ){ i - ccnt , i - 1 }); nc = a [ i ]; ccnt = 1 ;} else { ccnt ++ ;} s . insert (( data ){ n - ccnt + 1 , n , a [ n ]}), c [ a [ n ]]. insert (( nod ){ n - ccnt + 1 , n }); } } namespace cdq { struct treearray //\u6811\u72b6\u6570\u7ec4 { int ta [ N ]; inline void c ( int x , int t ){ for (; x <= n ; x += x & ( - x )) ta [ x ] += t ;} inline void d ( int x ){ for (; x <= n ; x += x & ( - x )) ta [ x ] = 0 ;} inline int q ( int x ){ int r = 0 ; for (; x ; x -= x & ( - x )) r += ta [ x ]; return r ;} inline void clear (){ for ( int i = 1 ; i <= n ; i ++ ) ta [ i ] = 0 ;} } ta ; int srt [ N ]; inline bool cmp1 ( const int & a , const int & b ){ return pre [ a ] < pre [ b ];} inline void solve ( int l1 , int r1 , int l2 , int r2 , int L , int R ) //cdq { if ( l1 == r1 || l2 == r2 ) return ; int mid = ( L + R ) / 2 ; int mid1 = l1 ; while ( mid1 != r1 && md [ mid1 + 1 ]. t <= mid ) mid1 ++ ; int mid2 = l2 ; while ( mid2 != r2 && qr [ mid2 + 1 ]. t <= mid ) mid2 ++ ; solve ( l1 , mid1 , l2 , mid2 , L , mid ); solve ( mid1 , r1 , mid2 , r2 , mid , R ); if ( l1 != mid1 && mid2 != r2 ) { sort ( md + l1 + 1 , md + mid1 + 1 ); sort ( qr + mid2 + 1 , qr + r2 + 1 ); for ( int i = mid2 + 1 , j = l1 + 1 ; i <= r2 ; i ++ ) //\u8003\u8651\u5de6\u4fa7\u5bf9\u53f3\u4fa7\u8d21\u732e { while ( j <= mid1 && md [ j ]. pre < qr [ i ]. l ) ta . c ( md [ j ]. pos , md [ j ]. va ), j ++ ; qr [ i ]. ans += ta . q ( qr [ i ]. r ) - ta . q ( qr [ i ]. l - 1 ); } for ( int i = l1 + 1 ; i <= mid1 ; i ++ ) ta . d ( md [ i ]. pos ); } } inline void mainsolve () { colist :: ih (); for ( int i = 1 ; i <= m ; i ++ ) if ( tp [ i ] == 1 ) colist :: stv ( lf [ i ], rt [ i ], co [ i ]); else qr [ ++ tp2 ] = ( qry ){ ++ cnt , lf [ i ], rt [ i ], 0 }; sort ( qr + 1 , qr + tp2 + 1 ); for ( int i = 1 ; i <= n ; i ++ ) srt [ i ] = i ; sort ( srt + 1 , srt + n + 1 , cmp1 ); for ( int i = 1 , j = 1 ; i <= tp2 ; i ++ ) //\u521d\u59cb\u5316\u4e00\u4e0b\u6bcf\u4e2a\u8be2\u95ee\u7684\u503c { while ( j <= n && pre [ srt [ j ]] < qr [ i ]. l ) ta . c ( srt [ j ], 1 ), j ++ ; qr [ i ]. ans += ta . q ( qr [ i ]. r ) - ta . q ( qr [ i ]. l - 1 ); } ta . clear (); sort ( qr + 1 , qr + tp2 + 1 , cmp ); solve ( 0 , tp1 , 0 , tp2 , 0 , cnt ); sort ( qr + 1 , qr + tp2 + 1 , cmp ); for ( int i = 1 ; i <= tp2 ; i ++ ) printf ( \"%d \\n \" , qr [ i ]. ans ); } } int main (){ prew :: prew (); cdq :: mainsolve (); return 0 ;} //\u62dc\u62dc\u7a0b\u5e8f~","title":"[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b"},{"location":"misc/cdq-divide/#hnoi2010","text":"\u4e00\u53e5\u8bdd\u9898\u610f: \u7ed9\u5b9a\u4e00\u5f20\u56fe\u652f\u6301\u52a8\u6001\u7684\u4fee\u6539\u8fb9\u6743, \u8981\u6c42\u5728\u6bcf\u6b21\u4fee\u6539\u8fb9\u6743\u4e4b\u540e\u8f93\u51fa\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6700\u5c0f\u4ee3\u4ef7\u548c \u4e8b\u5b9e\u4e0a\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5206\u6cbb\u5957 lct \u7684\u505a\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u4f46\u662f\u8fd9\u4e2a\u5b9e\u73b0\u65b9\u5f0f\u5e38\u6570\u8fc7\u5927\u53ef\u80fd\u9700\u8981\u7cbe\u5999\u7684\u5361\u5e38\u6280\u5de7\u624d\u53ef\u4ee5\u901a\u8fc7\u672c\u9898, \u56e0\u6b64\u6211\u4eec\u4e0d\u59a8\u8003\u8651 cdq \u5206\u6cbb\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \u548c\u4e00\u822c\u7684 cdq \u5206\u6cbb\u89e3\u51b3\u7684\u95ee\u9898\u4e0d\u540c\uff0c\u6211\u4eec\u6b64\u65f6 cdq \u5206\u6cbb\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u4fee\u6539\u548c\u8be2\u95ee\u7684\u5173\u7cfb\u6765\u8ba9\u6211\u4eec\u8fdb\u884c\u5206\u6cbb, \u56e0\u4e3a\u6211\u4eec\u662f\u6ca1\u6709\u529e\u6cd5\u5355\u72ec\u7684\u8003\u8651\u4fee\u6539\u4e00\u4e2a\u8fb9\u5bf9\u6574\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u6709\u4ec0\u4e48\u8d21\u732e, \u56e0\u6b64\u4f3c\u4e4e\u4f20\u7edf\u7684 cdq \u5206\u6cbb\u601d\u8def\u4f3c\u4e4e\u4e0d\u662f\u5f88\u597d\u4f7f \u90a3\u4e48\u6211\u4eec\u901a\u8fc7\u521a\u624d\u7684\u4f8b\u9898\u53ef\u4ee5\u53d1\u73b0\u4e00\u822c\u7684 cdq \u5206\u6cbb\u548c\u7ebf\u6bb5\u6811\u6709\u7740\u7279\u6b8a\u7684\u8054\u7cfb\uff0c\u6211\u4eec\u5728 cdq \u5206\u6cbb\u7684\u8fc7\u7a0b\u4e2d\u5176\u5b9e\u9690\u5f0f\u7684\u5efa\u4e86\u4e00\u9897\u7ebf\u6bb5\u6811\u51fa\u6765 (\u56e0\u4e3a cdq \u5206\u6cbb\u7684\u9012\u5f52\u6811\u5c31\u662f\u4e00\u9897\u7ebf\u6bb5\u6811) \u901a\u5e38\u7684 cdq \u662f\u8003\u8651\u7ebf\u6bb5\u6811\u5de6\u53f3\u513f\u5b50\u4e4b\u95f4\u7684\u8054\u7cfb \u800c\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bb2\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u7236\u4eb2\u548c\u5b69\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb \u6362\u53e5\u8bdd\u6765\u8bb2, \u6211\u4eec\u5728 solve(l,r) solve(l,r) \u8fd9\u6bb5\u533a\u95f4\u7684\u65f6\u5019\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u60f3\u529e\u6cd5\u4f7f\u56fe\u7684\u89c4\u6a21\u53d8\u6210\u548c\u533a\u95f4\u957f\u5ea6\u76f8\u5173\u7684\u4e00\u4e2a\u53d8\u91cf\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86 \u90a3\u4e48\u5177\u4f53\u6765\u8bb2\u5982\u4f55\u8bbe\u8ba1\u7b97\u6cd5\u5462? \u5047\u8bbe\u6211\u4eec\u6b63\u5728\u6784\u9020 (l,r) (l,r) \u8fd9\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u96c6\uff0c\u5e76\u4e14\u6211\u4eec\u5df2\u77e5\u5b83\u7236\u4eb2\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6 \u6211\u4eec\u5c06\u5728 (l,r) (l,r) \u8fd9\u6bb5\u533a\u95f4\u4e2d\u53d1\u751f\u53d8\u5316\u7684\u8fb9\u5206\u522b\u5c06\u8fb9\u6743\u8d4b\u6210 + \\infty + \\infty \u548c -\\infty -\\infty \u5206\u522b\u5404\u8dd1\u4e00\u8fb9 kruskal \u6c42\u51fa\u90a3\u4e9b\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d \u5bf9\u4e8e\u4e00\u6761\u8fb9\u6765\u8bb2, \u5982\u679c\u4ed6\u6ca1\u6709\u51fa\u73b0\u5728\u4e86\u6240\u6709\u88ab\u4fee\u6539\u7684\u8fb9\u6743\u90fd\u88ab\u8d4b\u6210\u4e86 +\\infty +\\infty \u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\u8bc1\u660e\u5b83\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728 (l,r) (l,r) \u8fd9\u4e9b\u8be2\u95ee\u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d, \u6240\u4ee5\u6211\u4eec\u4ec5\u4ec5\u5728 (l,r) (l,r) \u7684\u8fb9\u96c6\u4e2d\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u6811\u8fb9 \u5bf9\u4e8e\u4e00\u6761\u8fb9\u6765\u8bb2, \u5982\u679c\u5b83\u51fa\u73b0\u5728\u4e86\u6240\u6709\u88ab\u4fee\u6539\u7684\u8fb9\u6743\u90fd\u88ab\u8d4b\u6210\u4e86 - \\infty - \\infty \u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\uff0c\u5c31\u8bc1\u660e\u5b83\u4e00\u5b9a\u4f1a\u51fa\u73b0 (l,r) (l,r) \u8fd9\u6bb5\u7684\u533a\u95f4\u7684\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d, \u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u5c06\u8fd9\u4e9b\u8fb9\u5bf9\u5e94\u7684\u70b9\u7f29\u8d77\u6765, \u5e76\u4e14\u5c06\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743 \u5982\u6b64\u8fd9\u822c\u6211\u4eec\u5c31\u5c06 (l,r) (l,r) \u8fd9\u6bb5\u533a\u95f4\u7684\u8fb9\u96c6\u6784\u9020\u51fa\u6765\u4e86, \u7528\u8fd9\u4e9b\u8fb9\u6c42\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u548c\u76f4\u63a5\u6c42\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b49\u4ef7 \u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u5462? \u9996\u5148\u88ab\u4fee\u6539\u7684\u8fb9\u4e00\u5b9a\u4f1a\u52a0\u5165\u5230\u6211\u4eec\u7684\u8fb9\u96c6\u5f53\u4e2d\u53bb, \u8fd9\u4e9b\u8fb9\u7684\u6570\u76ee\u662f O(len) O(len) \u7ea7\u522b\u7684 \u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u8bc1\u660e\u7684\u662f\u8fb9\u96c6\u5f53\u4e2d\u4e0d\u4f1a\u6709\u8fc7\u591a\u7684\u672a\u88ab\u4fee\u6539\u7684\u8fb9 \u6ce8\u610f\u5230\u6211\u4eec\u53ea\u4f1a\u52a0\u5165\u6240\u6709\u8fb9\u6743\u53d6 +\\infty +\\infty \u6700\u5c0f\u751f\u6210\u6811\u7684\u6811\u8fb9, \u56e0\u6b64\u6211\u4eec\u52a0\u5165\u7684\u8fb9\u6570\u76ee\u662f\u4e0d\u4f1a\u8d85\u8fc7\u5f53\u524d\u56fe\u7684\u70b9\u6570\u7684 \u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8bc1\u660e\u6bcf\u9012\u5f52\u4e00\u5c42\u56fe\u7684\u70b9\u6570\u662f O(len) O(len) \u7ea7\u522b\u7684\u5c31\u53ef\u4ee5\u8bf4\u660e\u56fe\u7684\u8fb9\u6570\u662f O(len) O(len) \u7ea7\u522b\u7684\u4e86 \u8bc1\u660e\u70b9\u6570\u662f O(len) O(len) \u51e0\u500d\u5c31\u53d8\u7684\u5341\u5206\u7b80\u5355\u4e86, \u6211\u4eec\u6bcf\u6b21\u5411\u4e0b\u9012\u5f52\u7684\u65f6\u4faf\u7f29\u6389\u7684\u8fb9\u662f\u5728 -\\infty -\\infty \u751f\u6210\u6811\u4e2d\u51fa\u73b0\u7684\u672a\u88ab\u4fee\u6539\u8fb9, \u90a3\u4e48\u53cd\u8fc7\u6765\u60f3\u5c31\u662f\u6211\u4eec\u5272\u6389\u4e86\u51fa\u73b0\u5728 -\\infty -\\infty \u751f\u6210\u6811\u5f53\u4e2d\u7684\u6240\u6709\u7684\u88ab\u4fee\u6539\u8fb9, \u663e\u7136\u6211\u4eec\u6700\u591a\u5272\u6389 len len \u6761\u8fb9\uff0c\u6574\u5f20\u56fe\u6700\u591a\u5206\u88c2\u6210 O(len) O(len) \u4e2a\u8054\u901a\u5757, \u8fd9\u6837\u7684\u8bdd\u65b0\u56fe\u70b9\u6570\u5c31\u662f O(len) O(len) \u7ea7\u522b\u7684\u4e86 \u6240\u4ee5\u6211\u4eec\u5c31\u8bc1\u660e\u4e86\u6bcf\u6b21\u6211\u4eec\u7528\u6765\u8dd1 kruskal \u7684\u56fe\u90fd\u662f O(len) O(len) \u7ea7\u522b\u7684\u4e86 \u4ece\u800c\u6bcf\u4e00\u5c42\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f (nlogn) (nlogn) \u4e86 \u56e0\u6b64\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+ O(nlogn)=O(nlog^2n) \u4e86 \u4ee3\u7801\u5b9e\u73b0\u4e0a\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u96be\u5ea6, \u9700\u8981\u6ce8\u610f\u7684\u662f\u5e76\u67e5\u96c6\u4e0d\u80fd\u4f7f\u7528\u8def\u5f84\u538b\u7f29, \u5426\u5219\u5c31\u4e0d\u652f\u6301\u56de\u9000\u64cd\u4f5c\u4e86, \u6267\u884c\u7f29\u70b9\u64cd\u4f5c\u7684\u65f6\u5019\u4e5f\u6ca1\u6709\u5fc5\u8981\u771f\u7684\u6267\u884c\uff0c\u800c\u662f\u6bcf\u4e00\u5c42\u7684 kruskal \u90fd\u5728\u4e0a\u4e00\u5c42\u7684\u5e76\u67e5\u96c6\u91cc\u76f4\u63a5\u505a\u5c31\u53ef\u4ee5\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #include <cstdio> #include <algorithm> #include <vector> #include <stack> using namespace std ; typedef long long ll ; int n ; int m ; int ask ; struct bcj { int fa [ 20010 ]; int size [ 20010 ]; struct opt { int u ; int v ;}; stack < opt > st ; inline void ih (){ for ( int i = 1 ; i <= n ; i ++ ) fa [ i ] = i , size [ i ] = 1 ;} inline int f ( int x ){ return ( fa [ x ] == x ) ? x : f ( fa [ x ]);} inline void u ( int x , int y ) //\u5e26\u64a4\u56de { int u = f ( x ); int v = f ( y ); if ( u == v ) return ; if ( size [ u ] < size [ v ]) swap ( u , v ); size [ u ] += size [ v ]; fa [ v ] = u ; opt o ; o . u = u ; o . v = v ; st . push ( o ); } inline void undo (){ opt o = st . top (); st . pop (); fa [ o . v ] = o . v ; size [ o . u ] -= size [ o . v ];} inline void clear ( int tim ){ while ( st . size () > tim ){ undo ();}} } s , s1 ; struct edge //\u9759\u6001\u8fb9 { int u ; int v ; ll val ; int mrk ; friend bool operator < ( edge a , edge b ){ return a . val < b . val ;} } e [ 50010 ]; struct moved { int u ; int v ;}; //\u52a8\u6001\u8fb9 struct query { int num ; ll val ; ll ans ;} q [ 50010 ]; bool book [ 50010 ]; //\u8be2\u95ee vector < edge > ve [ 30 ]; vector < moved > vq ; vector < edge > tr ; ll res [ 30 ]; int tim [ 30 ]; inline void pushdown ( int dep ) //\u7f29\u8fb9 { tr . clear (); //\u8fd9\u91cc\u8981\u590d\u5236\u4e00\u4efd\uff0c\u4ee5\u514d\u65e0\u6cd5\u56de\u64a4\u64cd\u4f5c for ( int i = 0 ; i < ve [ dep ]. size (); i ++ ){ tr . push_back ( ve [ dep ][ i ]);} sort ( tr . begin (), tr . end ()); for ( int i = 0 ; i < tr . size (); i ++ ) //\u65e0\u7528\u8fb9 { if ( s1 . f ( tr [ i ]. u ) == s1 . f ( tr [ i ]. v )){ tr [ i ]. mrk =- 1 ; continue ;} s1 . u ( tr [ i ]. u , tr [ i ]. v ); } s1 . clear ( 0 ); res [ dep + 1 ] = res [ dep ]; for ( int i = 0 ; i < vq . size (); i ++ ){ s1 . u ( vq [ i ]. u , vq [ i ]. v );} vq . clear (); for ( int i = 0 ; i < tr . size (); i ++ ) //\u5fc5\u987b\u8fb9 { if ( tr [ i ]. mrk ==- 1 || s1 . f ( tr [ i ]. u ) == s1 . f ( tr [ i ]. v )) continue ; tr [ i ]. mrk = 1 ; s1 . u ( tr [ i ]. u , tr [ i ]. v ); s . u ( tr [ i ]. u , tr [ i ]. v ); res [ dep + 1 ] += tr [ i ]. val ; } s1 . clear ( 0 ); ve [ dep + 1 ]. clear (); for ( int i = 0 ; i < tr . size (); i ++ ) //\u7f29\u8fb9 { if ( tr [ i ]. mrk != 0 ) continue ; edge p ; p . u = s . f ( tr [ i ]. u ); p . v = s . f ( tr [ i ]. v ); if ( p . u == p . v ) continue ; p . val = tr [ i ]. val ; p . mrk = 0 ; ve [ dep + 1 ]. push_back ( p ); } return ; } inline void solve ( int l , int r , int dep ) { tim [ dep ] = s . st . size (); int mid = ( l + r ) / 2 ; if ( r - l == 1 ) //\u7ec8\u6b62\u6761\u4ef6 { edge p ; p . u = s . f ( e [ q [ r ]. num ]. u ); p . v = s . f ( e [ q [ r ]. num ]. v ); p . val = q [ r ]. val ; e [ q [ r ]. num ]. val = q [ r ]. val ; p . mrk = 0 ; ve [ dep ]. push_back ( p ); pushdown ( dep ); q [ r ]. ans = res [ dep + 1 ]; s . clear ( tim [ dep - 1 ]); return ; } for ( int i = l + 1 ; i <= mid ; i ++ ){ book [ q [ i ]. num ] = true ;} for ( int i = mid + 1 ; i <= r ; i ++ ) //\u52a8\u8f6c\u9759 { if ( book [ q [ i ]. num ]) continue ; edge p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); p . val = e [ q [ i ]. num ]. val ; p . mrk = 0 ; ve [ dep ]. push_back ( p ); } for ( int i = l + 1 ; i <= mid ; i ++ ) //\u8be2\u95ee\u8f6c\u52a8\u6001 { moved p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); vq . push_back ( p ); } pushdown ( dep ); //\u4e0b\u9762\u7684\u662f\u56de\u64a4 for ( int i = mid + 1 ; i <= r ; i ++ ){ if ( book [ q [ i ]. num ]) continue ; ve [ dep ]. pop_back ();} for ( int i = l + 1 ; i <= mid ; i ++ ){ book [ q [ i ]. num ] = false ;} solve ( l , mid , dep + 1 ); for ( int i = 0 ; i < ve [ dep ]. size (); i ++ ){ ve [ dep ][ i ]. mrk = 0 ;} for ( int i = mid + 1 ; i <= r ; i ++ ){ book [ q [ i ]. num ] = true ;} for ( int i = l + 1 ; i <= mid ; i ++ ) //\u52a8\u8f6c\u9759 { if ( book [ q [ i ]. num ]) continue ; edge p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); p . val = e [ q [ i ]. num ]. val ; p . mrk = 0 ; ve [ dep ]. push_back ( p ); } for ( int i = mid + 1 ; i <= r ; i ++ ) //\u8be2\u95ee\u8f6c\u52a8 { book [ q [ i ]. num ] = false ; moved p ; p . u = s . f ( e [ q [ i ]. num ]. u ); p . v = s . f ( e [ q [ i ]. num ]. v ); vq . push_back ( p ); } pushdown ( dep ); solve ( mid , r , dep + 1 ); s . clear ( tim [ dep - 1 ]); return ; //\u65f6\u95f4\u5012\u6d41\u81f3\u4e0a\u4e00\u5c42 } int main () { scanf ( \"%d%d%d\" , & n , & m , & ask ); s . ih (); s1 . ih (); for ( int i = 1 ; i <= m ; i ++ ){ scanf ( \"%d%d%lld\" , & e [ i ]. u , & e [ i ]. v , & e [ i ]. val );} for ( int i = 1 ; i <= ask ; i ++ ){ scanf ( \"%d%lld\" , & q [ i ]. num , & q [ i ]. val );} for ( int i = 1 ; i <= ask ; i ++ ) //\u521d\u59cb\u52a8\u6001\u8fb9 { book [ q [ i ]. num ] = true ; moved p ; p . u = e [ q [ i ]. num ]. u ; p . v = e [ q [ i ]. num ]. v ; vq . push_back ( p ); } for ( int i = 1 ; i <= m ; i ++ ){ if ( book [ i ]) continue ; ve [ 1 ]. push_back ( e [ i ]);} //\u521d\u59cb\u9759\u6001 for ( int i = 1 ; i <= ask ; i ++ ){ book [ q [ i ]. num ] = false ;} solve ( 0 , ask , 1 ); for ( int i = 1 ; i <= ask ; i ++ ){ printf ( \"%lld \\n \" , q [ i ]. ans );} return 0 ; //\u62dc\u62dc\u7a0b\u5e8f~ }","title":"[HNOI2010]\u57ce\u5e02\u5efa\u8bbe"},{"location":"misc/complexity/","text":"\u590d\u6742\u5ea6\u662f\u6211\u4eec\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u597d\u574f\u7684\u91cd\u8981\u7684\u6807\u51c6\u3002\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u5173\u6ce8\u4e8e\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u4e00\u822c\u7684\u6765\u8bf4\uff0c\u590d\u6742\u5ea6\u662f\u4e00\u4e2a\u5173\u4e8e\u8f93\u5165\u957f\u5ea6\u7684\u4e00\u4e2a\u51fd\u6570\u3002\u5bf9\u4e8e\u67d0\u4e9b\u7b97\u6cd5\u6765\u8bf4\uff0c\u76f8\u540c\u7684\u8f93\u5165\u7684\u4e0d\u540c\u8f93\u5165\u4f9d\u7136\u4f1a\u9020\u6210\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4 / \u7a7a\u95f4\u7684\u4e0d\u540c\uff0c\u56e0\u6b64\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7b97\u6cd5\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8bb0\u4e3a T(n) T(n) \u3002\u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5173\u5fc3\u5b83\u7684\u5e73\u5747\u60c5\u51b5\u590d\u6742\u590d\u6742\u5ea6\uff08\u7279\u522b\u662f\u5bf9\u4e8e\u968f\u673a\u7b97\u6cd5 (randomized algorithm) \uff09\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u968f\u673a\u5206\u6790 (probabilistic analysis) \u6765\u5f97\u5230\u671f\u671b\u7684\u590d\u6742\u5ea6\u3002 \u6e10\u8fdb\u7b26\u53f7 \u00b6 \u6211\u4eec\u901a\u5e38\u4f7f\u7528\u6e10\u8fdb\u7b26\u53f7\u6765\u63cf\u8ff0\u4e00\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \\Theta \\Theta \u7b26\u53f7 \u00b6 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a\u51fd\u6570 g(n) g(n) , \u51fd\u6570\u96c6\u5408 \\Theta(g(n)) \\Theta(g(n)) \u5b9a\u4e49\u4e3a \\Theta(g(n)) = \\{f(n) : \u5b58\u5728\u5e38\u6570 c_1,c_2,n_0 \\in \\mathbb{R^{+}}\u4f7f\u5f97 0 \\leq c_1g(n) \\leq f(n) \\leq c_2g(n), \\qquad \\forall n \\geq n_0\\} \\Theta(g(n)) = \\{f(n) : \u5b58\u5728\u5e38\u6570 c_1,c_2,n_0 \\in \\mathbb{R^{+}}\u4f7f\u5f97 0 \\leq c_1g(n) \\leq f(n) \\leq c_2g(n), \\qquad \\forall n \\geq n_0\\} \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u51fd\u6570 f(n) f(n) \u5c5e\u4e8e \\Theta(g(n)) \\Theta(g(n)) \uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u627e\u5230\u4e24\u4e2a\u6b63\u5e38\u6570 c_1, c_2 c_1, c_2 \u4f7f\u5f97 f(n) f(n) \u88ab c_1g(n) c_1g(n) \u548c c_2g(n) c_2g(n) \u5939\u5728\u4e2d\u95f4\u3002 \u56e0\u4e3a \\Theta(g(n)) \\Theta(g(n)) \u662f\u4e00\u4e2a\u51fd\u6570\u96c6\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 f(n) \\in \\Theta(g(n)) f(n) \\in \\Theta(g(n)) \u8868\u8fbe f(n) f(n) \u5c5e\u4e8e \\Theta(g(n)) \\Theta(g(n)) \uff0c \u4f46\u662f\u6211\u4eec\u901a\u5e38\u4f7f\u7528 f(n) = \\Theta(g(n)) f(n) = \\Theta(g(n)) \u3002 O O \u7b26\u53f7 \u00b6 \\Theta \\Theta \u7b26\u53f7\u540c\u65f6\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u51fd\u6570\u7684\u4e0a\u4e0b\u754c\uff0c\u5982\u679c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u51fd\u6570\u7684\u6e10\u8fdb\u4e0a\u754c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528 O O \u7b26\u53f7\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u51fd\u6570 g(n) g(n) , \u6211\u4eec\u628a\u5b83\u8bb0\u4f5c O(g(n)) O(g(n)) \u3002 O(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0\\leq f(n) \\leq cg(n), \\qquad \\forall n \\geq n_0\\} O(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0\\leq f(n) \\leq cg(n), \\qquad \\forall n \\geq n_0\\} \\Omega \\Omega \u7b26\u53f7 \u00b6 \u540c\u6837\u7684\uff0c\u6211\u4eec\u4f7f\u7528 \\Omega \\Omega \u7b26\u53f7\u6765\u63cf\u8ff0\u4e00\u4e2a\u51fd\u6570\u7684\u6e10\u8fdb\u4e0b\u754c\u3002 \\Omega(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0 \\leq cg(n) \\leq f(n) , \\qquad \\forall n \\geq n_0\\} \\Omega(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0 \\leq cg(n) \\leq f(n) , \\qquad \\forall n \\geq n_0\\} \u5e38\u89c1\u6027\u8d28 \u00b6 f_1(n) + f_2(n) = O(\\max(f_1(n), f_2(n))) f_1(n) + f_2(n) = O(\\max(f_1(n), f_2(n))) f_1(n) \\times f_2(n) = O(f_1(n) \\times f_2(n)) f_1(n) \\times f_2(n) = O(f_1(n) \\times f_2(n)) \u4efb\u4f55\u5bf9\u6570\u51fd\u6570\u65e0\u8bba\u5e95\u6570\u4e3a\u4f55\uff0c\u90fd\u5177\u6709\u76f8\u540c\u7684\u589e\u957f\u7387\u3002 \\forall a \\neq 1, \\log_a{n} = O(\\log_2 n) \\forall a \\neq 1, \\log_a{n} = O(\\log_2 n) \u4e3b\u5b9a\u7406 (Master Theorem) \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Master Theorem \u6765\u5feb\u901f\u7684\u6c42\u5f97\u5173\u4e8e\u9012\u5f52\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u9012\u63a8\u5173\u7cfb\u5f0f T(n) = AT\\left(\\frac{n}{b}\\right)\uff0bcn^k, \\qquad \\forall n > b T(n) = AT\\left(\\frac{n}{b}\\right)\uff0bcn^k, \\qquad \\forall n > b \u90a3\u4e48 T(n) = \\begin{cases}\\Theta(n^{\\log_b a}) & a > b^k \\\\ \\Theta(n^k) & a< b^k \\\\ \\Theta(n^k\\log n ) & a = b^k \\end{cases} T(n) = \\begin{cases}\\Theta(n^{\\log_b a}) & a > b^k \\\\ \\Theta(n^k) & a< b^k \\\\ \\Theta(n^k\\log n ) & a = b^k \\end{cases} \u5747\u644a\u590d\u6742\u5ea6 \u00b6 \u7b97\u6cd5\u5f80\u5f80\u662f\u4f1a\u5bf9\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u4fee\u6539\u7684\uff0c\u800c\u540c\u4e00\u4e2a\u7b97\u6cd5\u7684\u591a\u6b21\u6267\u884c\uff0c\u5c31\u4f1a\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u4fee\u6539\u800c\u4e92\u76f8\u5f71\u54cd\u3002 \u4f8b\u5982\u5feb\u901f\u6392\u5e8f\u4e2d\u7684 \u201c\u6309\u5927\u5c0f\u5206\u7c7b\u201d \u64cd\u4f5c\uff0c\u5355\u6b21\u6267\u884c\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u770b\u4f3c\u662f O(n) O(n) \u7684\u3002 \u4f46\u662f\u7531\u4e8e\u5feb\u6392\u7684\u5206\u6cbb\u8fc7\u7a0b\uff0c\u5148\u524d\u7684 \u201c\u5206\u7c7b\u201d \u64cd\u4f5c\u6bcf\u6b21\u90fd\u51cf\u5c0f\u4e86\u6570\u7ec4\u957f\u5ea6\uff0c\u6240\u4ee5\u5b9e\u9645\u7684\u603b\u590d\u6742\u5ea6 O(n \\log_2 n) O(n \\log_2 n) \uff0c\u5206\u644a\u5728\u6bcf\u4e00\u6b21 \u201c\u5206\u7c7b\u201d \u64cd\u4f5c\u4e0a\uff0c\u662f O(\\log_2 n) O(\\log_2 n) \u3002 \u591a\u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u9664\u4ee5\u64cd\u4f5c\u6b21\u6570\uff0c\u5c31\u662f\u8fd9\u79cd\u64cd\u4f5c\u7684 \u5747\u644a\u590d\u6742\u5ea6 \u3002 \u52bf\u80fd\u5206\u6790 \u00b6 \u52bf\u80fd\u5206\u6790\uff0c\u662f\u4e00\u79cd\u6c42\u5747\u644a\u590d\u6742\u5ea6\u4e0b\u754c\u7684\u65b9\u6cd5\u3002 \u6c42\u5747\u644a\u590d\u6742\u5ea6\uff0c\u5173\u952e\u662f\u8868\u8fbe\u51fa\u5148\u524d\u64cd\u4f5c\u5bf9\u5f53\u524d\u64cd\u4f5c\u7684\u5f71\u54cd\u3002\u52bf\u80fd\u5206\u6790\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u8868\u8fbe\u6b64\u79cd\u5f71\u54cd\u3002 \u5b9a\u4e49 \u201c\u72b6\u6001\u201d S S \uff1a\u5373\u67d0\u4e00\u65f6\u523b\u7684\u6240\u6709\u6570\u636e\u3002 \u5728\u5feb\u6392\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u4e2a \u201c\u72b6\u6001\u201d \u5c31\u662f\u5f53\u524d\u8fc7\u7a0b\u9700\u8981\u6392\u5e8f\u7684\u4e0b\u6807\u533a\u95f4 \u5b9a\u4e49 \u201c\u521d\u59cb\u72b6\u6001\u201d S_0 S_0 \uff1a\u5373\u672a\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u65f6\u7684\u72b6\u6001\u3002 \u5728\u5feb\u6392\u7684\u4f8b\u5b50\u4e2d\uff0c\u201c\u521d\u59cb\u72b6\u6001\u201d \u5c31\u662f\u6574\u4e2a\u6570\u7ec4 \u5047\u8bbe\u5b58\u5728\u4ece\u72b6\u6001\u5230\u6570\u7684\u51fd\u6570 F F \uff0c\u4e14\u5bf9\u4e8e\u4efb\u4f55\u72b6\u6001 S S \uff0c F(S) \\geq F(S_0) F(S) \\geq F(S_0) \uff0c\u5219\u6709\u4ee5\u4e0b\u63a8\u8bba\uff1a \u8bbe S_1,S_2, \\cdots ,S_m S_1,S_2, \\cdots ,S_m \u4e3a\u4ece S_0 S_0 \u5f00\u59cb\u8fde\u7eed\u505a m m \u6b21\u64cd\u4f5c\u6240\u5f97\u7684\u72b6\u6001\u5e8f\u5217\uff0c c_i c_i \u4e3a\u7b2c i i \u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u5f00\u9500\u3002 \u8bb0 p_i = c_i + F(S_i) - F(S_{i-1}) p_i = c_i + F(S_i) - F(S_{i-1}) \uff0c\u5219 m m \u6b21\u64cd\u4f5c\u7684\u603b\u65f6\u95f4\u82b1\u9500\u4e3a \\sum_{i=1}^m p_i + F(S_0) - F(S_m) \\sum_{i=1}^m p_i + F(S_0) - F(S_m) \uff08\u6b63\u8d1f\u76f8\u6d88\uff0c\u8bc1\u660e\u663e\u7136\uff09 \u53c8\u56e0\u4e3a F(S) \\geq F(S_0) F(S) \\geq F(S_0) \uff0c\u6240\u4ee5\u6709 \\sum_{i=1}^m p_i \\geq \\sum_{i=1}^m c_i \\sum_{i=1}^m p_i \\geq \\sum_{i=1}^m c_i \u56e0\u6b64\uff0c\u82e5 p_i = O(T(n)) p_i = O(T(n)) \uff0c\u5219 O(T(n)) O(T(n)) \u662f\u5747\u644a\u590d\u6742\u5ea6\u7684\u4e00\u4e2a\u4e0b\u754c\u3002 \u52bf\u80fd\u5206\u6790\u4f7f\u7528\u4e2d\u6709\u5f88\u591a\u6280\u5de7\uff0c\u6848\u4f8b\u5728\u6b64\u4e0d\u9898\u3002","title":"\u590d\u6742\u5ea6"},{"location":"misc/complexity/#_1","text":"\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u6e10\u8fdb\u7b26\u53f7\u6765\u63cf\u8ff0\u4e00\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002","title":"\u6e10\u8fdb\u7b26\u53f7"},{"location":"misc/complexity/#thetatheta","text":"\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a\u51fd\u6570 g(n) g(n) , \u51fd\u6570\u96c6\u5408 \\Theta(g(n)) \\Theta(g(n)) \u5b9a\u4e49\u4e3a \\Theta(g(n)) = \\{f(n) : \u5b58\u5728\u5e38\u6570 c_1,c_2,n_0 \\in \\mathbb{R^{+}}\u4f7f\u5f97 0 \\leq c_1g(n) \\leq f(n) \\leq c_2g(n), \\qquad \\forall n \\geq n_0\\} \\Theta(g(n)) = \\{f(n) : \u5b58\u5728\u5e38\u6570 c_1,c_2,n_0 \\in \\mathbb{R^{+}}\u4f7f\u5f97 0 \\leq c_1g(n) \\leq f(n) \\leq c_2g(n), \\qquad \\forall n \\geq n_0\\} \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u51fd\u6570 f(n) f(n) \u5c5e\u4e8e \\Theta(g(n)) \\Theta(g(n)) \uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u627e\u5230\u4e24\u4e2a\u6b63\u5e38\u6570 c_1, c_2 c_1, c_2 \u4f7f\u5f97 f(n) f(n) \u88ab c_1g(n) c_1g(n) \u548c c_2g(n) c_2g(n) \u5939\u5728\u4e2d\u95f4\u3002 \u56e0\u4e3a \\Theta(g(n)) \\Theta(g(n)) \u662f\u4e00\u4e2a\u51fd\u6570\u96c6\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 f(n) \\in \\Theta(g(n)) f(n) \\in \\Theta(g(n)) \u8868\u8fbe f(n) f(n) \u5c5e\u4e8e \\Theta(g(n)) \\Theta(g(n)) \uff0c \u4f46\u662f\u6211\u4eec\u901a\u5e38\u4f7f\u7528 f(n) = \\Theta(g(n)) f(n) = \\Theta(g(n)) \u3002","title":"\\Theta\\Theta \u7b26\u53f7"},{"location":"misc/complexity/#oo","text":"\\Theta \\Theta \u7b26\u53f7\u540c\u65f6\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u51fd\u6570\u7684\u4e0a\u4e0b\u754c\uff0c\u5982\u679c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u51fd\u6570\u7684\u6e10\u8fdb\u4e0a\u754c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528 O O \u7b26\u53f7\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u51fd\u6570 g(n) g(n) , \u6211\u4eec\u628a\u5b83\u8bb0\u4f5c O(g(n)) O(g(n)) \u3002 O(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0\\leq f(n) \\leq cg(n), \\qquad \\forall n \\geq n_0\\} O(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0\\leq f(n) \\leq cg(n), \\qquad \\forall n \\geq n_0\\}","title":"OO \u7b26\u53f7"},{"location":"misc/complexity/#omegaomega","text":"\u540c\u6837\u7684\uff0c\u6211\u4eec\u4f7f\u7528 \\Omega \\Omega \u7b26\u53f7\u6765\u63cf\u8ff0\u4e00\u4e2a\u51fd\u6570\u7684\u6e10\u8fdb\u4e0b\u754c\u3002 \\Omega(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0 \\leq cg(n) \\leq f(n) , \\qquad \\forall n \\geq n_0\\} \\Omega(g(n)) = \\{f(n):\u5b58\u5728\u5e38\u6570 c,n_0 \u4f7f\u5f97 0 \\leq cg(n) \\leq f(n) , \\qquad \\forall n \\geq n_0\\}","title":"\\Omega\\Omega \u7b26\u53f7"},{"location":"misc/complexity/#_2","text":"f_1(n) + f_2(n) = O(\\max(f_1(n), f_2(n))) f_1(n) + f_2(n) = O(\\max(f_1(n), f_2(n))) f_1(n) \\times f_2(n) = O(f_1(n) \\times f_2(n)) f_1(n) \\times f_2(n) = O(f_1(n) \\times f_2(n)) \u4efb\u4f55\u5bf9\u6570\u51fd\u6570\u65e0\u8bba\u5e95\u6570\u4e3a\u4f55\uff0c\u90fd\u5177\u6709\u76f8\u540c\u7684\u589e\u957f\u7387\u3002 \\forall a \\neq 1, \\log_a{n} = O(\\log_2 n) \\forall a \\neq 1, \\log_a{n} = O(\\log_2 n)","title":"\u5e38\u89c1\u6027\u8d28"},{"location":"misc/complexity/#master-theorem","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Master Theorem \u6765\u5feb\u901f\u7684\u6c42\u5f97\u5173\u4e8e\u9012\u5f52\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u9012\u63a8\u5173\u7cfb\u5f0f T(n) = AT\\left(\\frac{n}{b}\\right)\uff0bcn^k, \\qquad \\forall n > b T(n) = AT\\left(\\frac{n}{b}\\right)\uff0bcn^k, \\qquad \\forall n > b \u90a3\u4e48 T(n) = \\begin{cases}\\Theta(n^{\\log_b a}) & a > b^k \\\\ \\Theta(n^k) & a< b^k \\\\ \\Theta(n^k\\log n ) & a = b^k \\end{cases} T(n) = \\begin{cases}\\Theta(n^{\\log_b a}) & a > b^k \\\\ \\Theta(n^k) & a< b^k \\\\ \\Theta(n^k\\log n ) & a = b^k \\end{cases}","title":"\u4e3b\u5b9a\u7406 (Master Theorem)"},{"location":"misc/complexity/#_3","text":"\u7b97\u6cd5\u5f80\u5f80\u662f\u4f1a\u5bf9\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u4fee\u6539\u7684\uff0c\u800c\u540c\u4e00\u4e2a\u7b97\u6cd5\u7684\u591a\u6b21\u6267\u884c\uff0c\u5c31\u4f1a\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u4fee\u6539\u800c\u4e92\u76f8\u5f71\u54cd\u3002 \u4f8b\u5982\u5feb\u901f\u6392\u5e8f\u4e2d\u7684 \u201c\u6309\u5927\u5c0f\u5206\u7c7b\u201d \u64cd\u4f5c\uff0c\u5355\u6b21\u6267\u884c\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u770b\u4f3c\u662f O(n) O(n) \u7684\u3002 \u4f46\u662f\u7531\u4e8e\u5feb\u6392\u7684\u5206\u6cbb\u8fc7\u7a0b\uff0c\u5148\u524d\u7684 \u201c\u5206\u7c7b\u201d \u64cd\u4f5c\u6bcf\u6b21\u90fd\u51cf\u5c0f\u4e86\u6570\u7ec4\u957f\u5ea6\uff0c\u6240\u4ee5\u5b9e\u9645\u7684\u603b\u590d\u6742\u5ea6 O(n \\log_2 n) O(n \\log_2 n) \uff0c\u5206\u644a\u5728\u6bcf\u4e00\u6b21 \u201c\u5206\u7c7b\u201d \u64cd\u4f5c\u4e0a\uff0c\u662f O(\\log_2 n) O(\\log_2 n) \u3002 \u591a\u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u9664\u4ee5\u64cd\u4f5c\u6b21\u6570\uff0c\u5c31\u662f\u8fd9\u79cd\u64cd\u4f5c\u7684 \u5747\u644a\u590d\u6742\u5ea6 \u3002","title":"\u5747\u644a\u590d\u6742\u5ea6"},{"location":"misc/complexity/#_4","text":"\u52bf\u80fd\u5206\u6790\uff0c\u662f\u4e00\u79cd\u6c42\u5747\u644a\u590d\u6742\u5ea6\u4e0b\u754c\u7684\u65b9\u6cd5\u3002 \u6c42\u5747\u644a\u590d\u6742\u5ea6\uff0c\u5173\u952e\u662f\u8868\u8fbe\u51fa\u5148\u524d\u64cd\u4f5c\u5bf9\u5f53\u524d\u64cd\u4f5c\u7684\u5f71\u54cd\u3002\u52bf\u80fd\u5206\u6790\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u8868\u8fbe\u6b64\u79cd\u5f71\u54cd\u3002 \u5b9a\u4e49 \u201c\u72b6\u6001\u201d S S \uff1a\u5373\u67d0\u4e00\u65f6\u523b\u7684\u6240\u6709\u6570\u636e\u3002 \u5728\u5feb\u6392\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u4e2a \u201c\u72b6\u6001\u201d \u5c31\u662f\u5f53\u524d\u8fc7\u7a0b\u9700\u8981\u6392\u5e8f\u7684\u4e0b\u6807\u533a\u95f4 \u5b9a\u4e49 \u201c\u521d\u59cb\u72b6\u6001\u201d S_0 S_0 \uff1a\u5373\u672a\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u65f6\u7684\u72b6\u6001\u3002 \u5728\u5feb\u6392\u7684\u4f8b\u5b50\u4e2d\uff0c\u201c\u521d\u59cb\u72b6\u6001\u201d \u5c31\u662f\u6574\u4e2a\u6570\u7ec4 \u5047\u8bbe\u5b58\u5728\u4ece\u72b6\u6001\u5230\u6570\u7684\u51fd\u6570 F F \uff0c\u4e14\u5bf9\u4e8e\u4efb\u4f55\u72b6\u6001 S S \uff0c F(S) \\geq F(S_0) F(S) \\geq F(S_0) \uff0c\u5219\u6709\u4ee5\u4e0b\u63a8\u8bba\uff1a \u8bbe S_1,S_2, \\cdots ,S_m S_1,S_2, \\cdots ,S_m \u4e3a\u4ece S_0 S_0 \u5f00\u59cb\u8fde\u7eed\u505a m m \u6b21\u64cd\u4f5c\u6240\u5f97\u7684\u72b6\u6001\u5e8f\u5217\uff0c c_i c_i \u4e3a\u7b2c i i \u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u5f00\u9500\u3002 \u8bb0 p_i = c_i + F(S_i) - F(S_{i-1}) p_i = c_i + F(S_i) - F(S_{i-1}) \uff0c\u5219 m m \u6b21\u64cd\u4f5c\u7684\u603b\u65f6\u95f4\u82b1\u9500\u4e3a \\sum_{i=1}^m p_i + F(S_0) - F(S_m) \\sum_{i=1}^m p_i + F(S_0) - F(S_m) \uff08\u6b63\u8d1f\u76f8\u6d88\uff0c\u8bc1\u660e\u663e\u7136\uff09 \u53c8\u56e0\u4e3a F(S) \\geq F(S_0) F(S) \\geq F(S_0) \uff0c\u6240\u4ee5\u6709 \\sum_{i=1}^m p_i \\geq \\sum_{i=1}^m c_i \\sum_{i=1}^m p_i \\geq \\sum_{i=1}^m c_i \u56e0\u6b64\uff0c\u82e5 p_i = O(T(n)) p_i = O(T(n)) \uff0c\u5219 O(T(n)) O(T(n)) \u662f\u5747\u644a\u590d\u6742\u5ea6\u7684\u4e00\u4e2a\u4e0b\u754c\u3002 \u52bf\u80fd\u5206\u6790\u4f7f\u7528\u4e2d\u6709\u5f88\u591a\u6280\u5de7\uff0c\u6848\u4f8b\u5728\u6b64\u4e0d\u9898\u3002","title":"\u52bf\u80fd\u5206\u6790"},{"location":"misc/discrete/","text":"\u7b80\u4ecb \u00b6 \u6240\u8c13\u79bb\u6563\u5316\uff0c\u4e00\u822c\u662f\u6307\u6570\u636e\u8303\u56f4\u5f88\u5927\uff0c\u4f46\u662f\u5b83\u7684\u5b9e\u9645\u5927\u5c0f\u5e76\u4e0d\u662f\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u5230\u5b83\u4eec\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\u3002 \u6216\u8005\u662f\u6709\u4e9b\u6570\u672c\u8eab\u5f88\u5927\uff0c\u81ea\u8eab\u65e0\u6cd5\u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\u6765\u65b9\u4fbf\u5730\u5904\u7406\u3002 \u7528\u6765\u79bb\u6563\u5316\u7684\u53ef\u4ee5\u662f\u5927\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32 \u2026\u2026 \u7b49\u7b49\u3002 \u79bb\u6563\u5316\u672c\u8d28\u4e0a\u4e5f\u53ef\u4ee5\u770b\u6210\u662f \u54c8\u5e0c \u7684\u8fc7\u7a0b\u3002 \u5b9e\u73b0 \u00b6 C++ \u79bb\u6563\u5316\u6709\u73b0\u6210\u7684 STL \u7b97\u6cd5\uff1a 1 2 3 4 5 // vector<int> a, b; b \u662f a \u7684\u4e00\u4e2a\u526f\u672c std :: sort ( a . begin (), a . end ()); V . erase ( std :: unique ( a . begin (), a . end ()), a . end ()); for ( int i = 0 ; i < n ; ++ i ) b [ i ] = std :: lower_bound ( a . begin (), a . end (), b [ i ]) - a . begin ();","title":"\u79bb\u6563\u5316"},{"location":"misc/discrete/#_1","text":"\u6240\u8c13\u79bb\u6563\u5316\uff0c\u4e00\u822c\u662f\u6307\u6570\u636e\u8303\u56f4\u5f88\u5927\uff0c\u4f46\u662f\u5b83\u7684\u5b9e\u9645\u5927\u5c0f\u5e76\u4e0d\u662f\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u5230\u5b83\u4eec\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\u3002 \u6216\u8005\u662f\u6709\u4e9b\u6570\u672c\u8eab\u5f88\u5927\uff0c\u81ea\u8eab\u65e0\u6cd5\u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\u6765\u65b9\u4fbf\u5730\u5904\u7406\u3002 \u7528\u6765\u79bb\u6563\u5316\u7684\u53ef\u4ee5\u662f\u5927\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32 \u2026\u2026 \u7b49\u7b49\u3002 \u79bb\u6563\u5316\u672c\u8d28\u4e0a\u4e5f\u53ef\u4ee5\u770b\u6210\u662f \u54c8\u5e0c \u7684\u8fc7\u7a0b\u3002","title":"\u7b80\u4ecb"},{"location":"misc/discrete/#_2","text":"C++ \u79bb\u6563\u5316\u6709\u73b0\u6210\u7684 STL \u7b97\u6cd5\uff1a 1 2 3 4 5 // vector<int> a, b; b \u662f a \u7684\u4e00\u4e2a\u526f\u672c std :: sort ( a . begin (), a . end ()); V . erase ( std :: unique ( a . begin (), a . end ()), a . end ()); for ( int i = 0 ; i < n ; ++ i ) b [ i ] = std :: lower_bound ( a . begin (), a . end (), b [ i ]) - a . begin ();","title":"\u5b9e\u73b0"},{"location":"misc/distance/","text":"OI \u4e2d\u5e38\u7528\u7684\u51e0\u7c7b\u8ddd\u79bb \u00b6 \u66fc\u54c8\u987f\u8ddd\u79bb \u00b6 \u5bf9\u4e8e\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) Dis(A, B) = |x_1-x_2| + |y_1-y_2| Dis(A, B) = |x_1-x_2| + |y_1-y_2| \u4e00\u822c\u6765\u8bb2\uff0c\u6211\u4eec\u53ea\u4f1a\u7528\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u66fc\u54c8\u987f\u8ddd\u79bb \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb \u00b6 \u5bf9\u4e8e\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) Dis(A, B) = \\max(|x_1-x_2| , |y_1-y_2|) Dis(A, B) = \\max(|x_1-x_2| , |y_1-y_2|) \u5bf9\u4e8e\u4e24\u4e2a n n \u7ef4\u5411\u91cf \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) Dis(A, B) = \\max\\limits_i(|x_{1i}-x_{2i}|) Dis(A, B) = \\max\\limits_i(|x_{1i}-x_{2i}|) \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb \uff08\u53c8\u79f0\u6b27\u6c0f\u8ddd\u79bb\uff09 \u00b6 \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u662f\u4e24\u70b9\u7684\u76f4\u7ebf\u8ddd\u79bb\u3002 \u5bf9\u4e8e\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) Dis(A, B) = \\sqrt{(x_1-x2)^2+(y1-y2)^2} Dis(A, B) = \\sqrt{(x_1-x2)^2+(y1-y2)^2} \u5bf9\u4e8e\u4e24\u4e2a n n \u7ef4\u5411\u91cf \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) Dis(A, B) = \\sqrt{\\sum\\limits_{k=1}^n(x_{1k}-x_{2k})^2} Dis(A, B) = \\sqrt{\\sum\\limits_{k=1}^n(x_{1k}-x_{2k})^2} L_m L_m \u8ddd\u79bb \u00b6 \u4e00\u822c\u5730\uff0c\u6211\u4eec\u5b9a\u4e49\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) \u4e4b\u95f4\u7684 L_m L_m \u8ddd\u79bb\u4e3a dist~L_m = (|x_1-x_2|^m+|y1-y2|^m)^{\\frac{1}{m}} dist~L_m = (|x_1-x_2|^m+|y1-y2|^m)^{\\frac{1}{m}} \u7279\u6b8a\u7684\uff0c L_2 L_2 \u8ddd\u79bb\u5c31\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c L_1 L_1 \u8ddd\u79bb\u5c31\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002 \u6c49\u660e\u8ddd\u79bb \u00b6 \u6c49\u660e\u8ddd\u79bb\u662f\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5b83\u8868\u793a\u4e24\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u5bf9\u5e94\u4f4d\u5b57\u7b26\u4e0d\u540c\u7684\u6570\u91cf \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8ba4\u4e3a\u5bf9\u4e24\u4e2a\u4e32\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c\u4e3a 1 \u7684\u6570\u91cf\u5c31\u662f\u4e24\u4e2a\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u5f53\u7136\uff0c \u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u8ddd\u79bb\uff0c\u4f46\u662f\u5728 OI \u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u6709\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\u3002","title":"\u8ddd\u79bb"},{"location":"misc/distance/#oi","text":"","title":"OI \u4e2d\u5e38\u7528\u7684\u51e0\u7c7b\u8ddd\u79bb"},{"location":"misc/distance/#_1","text":"\u5bf9\u4e8e\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) Dis(A, B) = |x_1-x_2| + |y_1-y_2| Dis(A, B) = |x_1-x_2| + |y_1-y_2| \u4e00\u822c\u6765\u8bb2\uff0c\u6211\u4eec\u53ea\u4f1a\u7528\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u66fc\u54c8\u987f\u8ddd\u79bb","title":"\u66fc\u54c8\u987f\u8ddd\u79bb"},{"location":"misc/distance/#_2","text":"\u5bf9\u4e8e\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) Dis(A, B) = \\max(|x_1-x_2| , |y_1-y_2|) Dis(A, B) = \\max(|x_1-x_2| , |y_1-y_2|) \u5bf9\u4e8e\u4e24\u4e2a n n \u7ef4\u5411\u91cf \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) Dis(A, B) = \\max\\limits_i(|x_{1i}-x_{2i}|) Dis(A, B) = \\max\\limits_i(|x_{1i}-x_{2i}|)","title":"\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb"},{"location":"misc/distance/#_3","text":"\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u662f\u4e24\u70b9\u7684\u76f4\u7ebf\u8ddd\u79bb\u3002 \u5bf9\u4e8e\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) Dis(A, B) = \\sqrt{(x_1-x2)^2+(y1-y2)^2} Dis(A, B) = \\sqrt{(x_1-x2)^2+(y1-y2)^2} \u5bf9\u4e8e\u4e24\u4e2a n n \u7ef4\u5411\u91cf \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec A(x_{11}, x_{12}, \\cdots,x_{1n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) \\vec B(x_{21}, x_{22}, \\cdots,x_{2n}) Dis(A, B) = \\sqrt{\\sum\\limits_{k=1}^n(x_{1k}-x_{2k})^2} Dis(A, B) = \\sqrt{\\sum\\limits_{k=1}^n(x_{1k}-x_{2k})^2}","title":"\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb \uff08\u53c8\u79f0\u6b27\u6c0f\u8ddd\u79bb\uff09"},{"location":"misc/distance/#l_ml_m","text":"\u4e00\u822c\u5730\uff0c\u6211\u4eec\u5b9a\u4e49\u5e73\u9762\u4e0a\u4e24\u70b9 A(x_1, y_1) A(x_1, y_1) , B(x_2, y_2) B(x_2, y_2) \u4e4b\u95f4\u7684 L_m L_m \u8ddd\u79bb\u4e3a dist~L_m = (|x_1-x_2|^m+|y1-y2|^m)^{\\frac{1}{m}} dist~L_m = (|x_1-x_2|^m+|y1-y2|^m)^{\\frac{1}{m}} \u7279\u6b8a\u7684\uff0c L_2 L_2 \u8ddd\u79bb\u5c31\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c L_1 L_1 \u8ddd\u79bb\u5c31\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002","title":"L_mL_m \u8ddd\u79bb"},{"location":"misc/distance/#_4","text":"\u6c49\u660e\u8ddd\u79bb\u662f\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5b83\u8868\u793a\u4e24\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u5bf9\u5e94\u4f4d\u5b57\u7b26\u4e0d\u540c\u7684\u6570\u91cf \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8ba4\u4e3a\u5bf9\u4e24\u4e2a\u4e32\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c\u4e3a 1 \u7684\u6570\u91cf\u5c31\u662f\u4e24\u4e2a\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u5f53\u7136\uff0c \u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u8ddd\u79bb\uff0c\u4f46\u662f\u5728 OI \u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u6709\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\u3002","title":"\u6c49\u660e\u8ddd\u79bb"},{"location":"misc/dsu-on-tree/","text":"\u5f15\u5165 \u00b6 \u542f\u53d1\u5f0f\u7b97\u6cd5\u662f\u4ec0\u4e48\u5462\uff1f \u542f\u53d1\u5f0f\u7b97\u6cd5\u662f\u57fa\u4e8e\u4eba\u7c7b\u7684\u7ecf\u9a8c\u548c\u76f4\u89c2\u611f\u89c9\uff0c\u5bf9\u4e00\u4e9b\u7b97\u6cd5\u7684\u4f18\u5316\u3002 \u7ed9\u4e2a\u4f8b\u5b50\uff1f \u6700\u5e38\u89c1\u7684\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u6309\u79e9\u5408\u5e76\u4e86\uff0c\u6709\u5e26\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u4e2d\uff0c\u5408\u5e76\u7684\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 6 void merge ( int x , int y ) { int xx = find ( x ), yy = find ( y ); if ( size [ xx ] < size [ yy ]) swap ( xx , yy ); fa [ yy ] = xx ; size [ xx ] += size [ yy ]; } \u5728\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u5927\u5c0f\u4e0d\u4e00\u6837\u7684\u96c6\u5408\uff0c\u6211\u4eec\u5c06\u5927\u5c0f\u5c0f\u7684\u5e76\u5230\u5927\u7684\uff0c\u800c\u4e0d\u662f\u5927\u7684\u8fde\u63a5\u5c0f\u7684\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u96c6\u5408\u7684\u9ad8\u5ea6\uff08\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\uff0c\u800c\u6211\u4eec\u5c06\u96c6\u5408\u9ad8\u5ea6\u5c0f\u7684\u5e76\u5230\u9ad8\u5ea6\u5927\u7684\u663e\u7136\u6709\u52a9\u4e8e\u6211\u4eec\u627e\u5230\u7236\u4eb2 \u8ba9\u9ad8\u5ea6\u5c0f\u7684\u6811\u6210\u4e3a\u9ad8\u5ea6\u8f83\u5927\u7684\u6811\u7684\u5b50\u6811\uff0c\u8fd9\u4e2a\u4f18\u5316\u53ef\u4ee5\u79f0\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\u7b97\u6cd5\u3002 \u7b97\u6cd5\u5185\u5bb9 \u00b6 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff08dsu on tree\uff09\u5bf9\u4e8e\u67d0\u4e9b\u6811\u4e0a\u79bb\u7ebf\u95ee\u9898\u53ef\u4ee5\u901f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u5927\u90e8\u5206\u7b97\u6cd5\u4e14\u66f4\u6613\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\u7684\u7b97\u6cd5\u3002 \u8003\u8651\u4e0b\u9762\u7684\u95ee\u9898\uff1a \u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u989c\u8272\uff0c\u8be2\u95ee\u4e00\u4e9b\u5b50\u6811\u7684\u989c\u8272\u6570\u91cf\uff08\u989c\u8272\u53ef\u91cd\u590d\uff09\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\u89e3\u51b3\u65b9\u5f0f\u5927\u591a\u662f\u8fd0\u7528\u5927\u91cf\u7684\u6570\u636e\u7ed3\u6784\uff08\u6811\u5957\u6811\u7b49\uff09\uff0c\u5982\u679c\u53ef\u4ee5\u79bb\u7ebf\uff0c\u8be2\u95ee\u7684\u91cf\u5de8\u5927\uff0c\u662f\u4e0d\u662f\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff1f \u6811\u4e0a\u83ab\u961f! \u4e0d\u884c\uff0c\u83ab\u961f\u5e26\u6839\u53f7\uff0c\u6211\u8981 log \u65e2\u7136\u652f\u6301\u79bb\u7ebf\uff0c\u8003\u8651\u9884\u5904\u7406\u540e O(1) O(1) \u8f93\u51fa\u7b54\u6848\u3002 \u76f4\u63a5\u66b4\u529b\u9884\u5904\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \uff0c\u5373\u5bf9\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u8fdb\u884c\u4e00\u6b21\u904d\u5386\uff0c\u6bcf\u6b21\u904d\u5386\u7684\u590d\u6742\u5ea6\u663e\u7136\u4e0e n n \u540c\u9636\uff0c\u6709 n n \u4e2a\u8282\u70b9\uff0c\u6545\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u662f\u5176\u5b50\u6811\u7684\u53e0\u52a0\uff0c\u8003\u8651\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u5904\u7406\u95ee\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u7684 size size \u548c\u5b83\u7684\u91cd\u513f\u5b50\uff0c\u91cd\u513f\u5b50\u540c\u6811\u94fe\u5256\u5206\u4e00\u6837\uff0c\u662f\u62e5\u6709\u8282\u70b9\u6700\u591a\u5b50\u6811\u7684\u513f\u5b50\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5 O(n) O(n) \u5b8c\u6210 \u6211\u4eec\u7528 check[i] \u8868\u793a\u989c\u8272 i i \u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0cans[i] \u8868\u793a\u4ed6\u7684\u989c\u8272\u4e2a\u6570 \u904d\u5386\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u6309\u4ee5\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u904d\u5386\uff1a \u5148\u904d\u5386\u5176\u975e\u91cd\u513f\u5b50\uff0c\u83b7\u53d6\u5b83\u7684 ans\uff0c\u4f46 \u4e0d\u4fdd\u7559\u904d\u5386\u540e\u5b83\u7684 check \uff1b \u904d\u5386\u5b83\u7684\u91cd\u513f\u5b50\uff0c \u4fdd\u7559\u5b83\u7684 check \uff1b \u518d\u6b21\u904d\u5386\u5176\u975e\u91cd\u513f\u5b50\u53ca\u5176\u7236\u4eb2\uff0c\u7528\u91cd\u513f\u5b50\u7684 check \u5bf9\u904d\u5386\u5230\u7684\u8282\u70b9\u8fdb\u884c\u8ba1\u7b97\uff0c\u83b7\u53d6\u6574\u68f5\u5b50\u6811\u7684 ans\uff1b \u4e0a\u56fe\u662f\u4e00\u4e2a\u4f8b\u5b50 \u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u904d\u5386\u4e86\u4e00\u6b21\u91cd\u5b50\u6811\uff0c\u4e24\u6b21\u975e\u91cd\u5b50\u6811\uff0c\u663e\u7136\u662f\u6700\u5212\u7b97\u7684\u3002 \u7ecf\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u6240\u6709 ans \u4e3a\u4ec0\u4e48\u4e0d\u5408\u5e76\u7b2c\u4e00\u6b65\u548c\u7b2c\u4e09\u6b65\u5462\uff1f\u56e0\u4e3a check \u6570\u7ec4\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\uff0c\u5426\u5219\u7a7a\u95f4\u4f1a\u592a\u5927\uff0c\u9700\u8981\u5728 O(n) O(n) \u7684\u7a7a\u95f4\u5185\u5b8c\u6210\u3002 \u663e\u7136\u82e5\u4e00\u4e2a\u8282\u70b9 u u \u88ab\u904d\u5386\u4e86 x x \u6b21\uff0c\u5219\u5176\u91cd\u513f\u5b50\u4f1a\u88ab\u904d\u5386 x x \u6b21\uff0c\u8f7b\u513f\u5b50\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u4f1a\u88ab\u904d\u5386 2x 2x \u6b21\u3002 \u6ce8\u610f\u9664\u4e86\u91cd\u513f\u5b50\uff0c\u6bcf\u6b21\u904d\u5386\u5b8c check check \u8981\u6e05\u96f6\u3002 \u590d\u6742\u5ea6 \u00b6 \uff08\u5bf9\u4e8e\u4e0d\u5173\u5fc3\u590d\u6742\u5ea6\u8bc1\u660e\u7684\uff0c\u53ef\u4ee5\u8df3\u8fc7\u4e0d\u770b\uff09 \u6211\u4eec\u50cf\u6811\u94fe\u5256\u5206\u4e00\u6837\u5b9a\u4e49\u91cd\u8fb9\u548c\u8f7b\u8fb9\uff08\u8fde\u5411\u91cd\u513f\u5b50\u7684\u4e3a\u91cd\u8fb9\uff0c\u5176\u4f59\u4e3a\u8f7b\u8fb9\uff09\u5173\u4e8e\u91cd\u513f\u5b50\u548c\u91cd\u8fb9\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u89c1\u4e0b\u56fe\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6709 n n \u4e2a\u8282\u70b9\u7684\u6811\uff1a \u6839\u8282\u70b9\u5230\u6811\u4e0a\u4efb\u610f\u8282\u70b9\u7684\u8f7b\u8fb9\u6570\u4e0d\u8d85\u8fc7 \\log n \\log n \u6761\u3002\u6211\u4eec\u8bbe\u6839\u5230\u8be5\u8282\u70b9\u6709 x \u6761\u8f7b\u8fb9\u8be5\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a y y \uff0c\u663e\u7136\u8f7b\u8fb9\u8fde\u63a5\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u5c0f\u4e8e\u7236\u4eb2\u7684\u4e00\u534a\uff08\u82e5\u5927\u4e8e\u4e00\u534a\u5c31\u4e0d\u662f\u8f7b\u8fb9\u4e86\uff09\uff0c\u5219 y<n/2^x y<n/2^x \uff0c\u663e\u7136 n>2^x n>2^x \uff0c\u6240\u4ee5 x<\\log n x<\\log n \u3002 \u53c8\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u5176\u7236\u4eb2\u7684\u91cd\u513f\u5b50\uff0c\u5219\u4ed6\u7684\u5b50\u6811\u5fc5\u5b9a\u5728\u4ed6\u7684\u5144\u5f1f\u4e4b\u4e2d\u6700\u591a\uff0c\u6240\u4ee5\u4efb\u610f\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u91cd\u8fb9\u8fde\u63a5\u7684\u7236\u8282\u70b9\u5728\u8ba1\u7b97\u7b54\u6848\u662f\u5fc5\u5b9a\u4e0d\u4f1a\u904d\u5386\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u7684\u88ab\u904d\u5386\u7684\u6b21\u6570\u7b49\u4e8e\u4ed6\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u8f7b\u8fb9\u6811 +1 +1 \uff08\u4e4b\u6240\u4ee5\u8981 +1 +1 \u662f\u56e0\u4e3a\u4ed6\u672c\u8eab\u8981\u88ab\u904d\u5386\u5230\uff09\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u7684\u88ab\u904d\u5386\u6b21\u6570 =\\log n+1 =\\log n+1 , \u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5219\u4e3a O(n(\\log n+1))=O(n\\log n) O(n(\\log n+1))=O(n\\log n) \uff0c\u8f93\u51fa\u7b54\u6848\u82b1\u8d39 O(m) O(m) . \u56fe\u4e2d\u6807\u7ea2\u7684\u5373\u4e3a\u91cd\u8fb9\uff0c\u91cd\u8fb9\u8fde\u5411\u7684\u5b50\u8282\u70b9\u4e3a\u91cd\u513f\u5b50 \u5927\u81f4\u4ee3\u7801 \u00b6 \u8fd9\u91cc\u662f\u9884\u5904\u7406\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 void dfs1 ( int u , int fa ) { size [ u ] = 1 ; for ( int i = head [ u ]; i ; i = tree [ i ]. next ) { int v = tree [ i ]. v ; if ( v != fa ) { dfs1 ( v , u ); size [ u ] += size [ v ]; if ( size [ v ] > size [ son [ u ]]) son [ u ] = v ; } } } \u4e0b\u9762\u662f\u6c42\u7b54\u6848\u7684\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 int dfs2 ( int u , int fa , bool keep , bool isson ) { int tmp = 0 ; for ( int i = head [ u ]; i ; i = tree [ i ]. next ) { int v = tree [ i ]. v ; if ( v != fa && v != son [ u ]) { dfs2 ( v , u , 0 , 0 ); } } if ( son [ u ]) tmp += dfs2 ( son [ u ], u , 1 , 1 ); for ( int i = head [ u ]; i ; i = tree [ i ]. next ) { int v = tree [ i ]. v ; if ( v != fa && v != son [ u ]) { tmp += dfs2 ( v , u , 1 , 0 ); } } if ( ! check [ color [ u ]]) { tmp ++ ; check [ color [ u ]] = 1 ; } if ( ! keep || isson ) ans [ u ] = tmp ; if ( ! keep ) memset ( check , 0 , sizeof ( check )), tmp = 0 ; return tmp ; } \u4ee3\u7801\u662f\u6211\u53e3\u80e1\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u7ecf\u8fc7\u6d4b\u8bc4\u4e0d\u4fdd\u8bc1\u6b63\u786e\u3002 \u8fd0\u7528 \u00b6 \u67d0\u4e9b\u51fa\u9898\u4eba\u8bbe\u7f6e\u7684\u6b63\u89e3\u662f dsu on tree \u7684\u9898 \u5982 CF741D \u3002\u7ed9\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u662f'a'\u5230'v'\u7684\u5b57\u6bcd\uff0c\u6bcf\u6b21\u8be2\u95ee\u8981\u6c42\u5728\u4e00\u4e2a\u5b50\u6811\u627e\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u8be5\u8def\u5f84\u5305\u542b\u7684\u5b57\u7b26\u6392\u5e8f\u540e\u6210\u4e3a\u56de\u6587\u4e32\u3002 \u56e0\u4e3a\u662f\u6392\u5217\u540e\u6210\u4e3a\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u4e86\u4e24\u6b21\u76f8\u5f53\u4e8e\u6ca1\u51fa\u73b0\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u6761\u8def\u5f84\u6ee1\u8db3 \u6700\u591a\u6709\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u5947\u6570\u6b21 \u3002 \u6b63\u5e38\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9 dfs\uff0c\u6bcf\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u5f3a\u884c\u679a\u4e3e\u6240\u6709\u5b57\u6bcd\u627e\u5230\u548c\u4ed6\u5f02\u6216\u540e\u7ed3\u679c\u4e3a 1 \u7684\u4e2a\u6570 < 1 \u7684\u8def\u5f84\uff0c\u518d\u53bb\u6700\u957f\u503c\uff0c\u8fd9\u6837 O(n^2\\log n) O(n^2\\log n) \u7684\uff0c\u53ef\u4ee5\u7528 dsu on tree \u4f18\u5316\u5230 O(n\\log^2n) O(n\\log^2n) \u3002\u5173\u4e8e\u5177\u4f53\u505a\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u6269\u5c55\u9605\u8bfb \u53ef\u4ee5\u7528 dsu \u4e71\u641e~~\u540a\u6253 std~~\u6c34\u5206\u7684\u9898 \u53ef\u4ee5\u6c34\u4e00\u4e9b\u6811\u5957\u6811\u7684\u90e8\u5206\u5206\uff08\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\uff09\uff0c\u8fd8\u53ef\u4ee5\u628a\u6811\u4e0a\u83ab\u961f\u7684 O(n\\sqrt{m}) O(n\\sqrt{m}) \u540a\u7740\u6253 \u7ec3\u4e60\u9898 \u00b6 CF600E Lomsat gelral \u9898\u610f\u7ffb\u8bd1\uff1a\u6811\u7684\u8282\u70b9\u6709\u989c\u8272\uff0c\u4e00\u79cd\u989c\u8272\u5360\u9886\u4e86\u4e00\u4e2a\u5b50\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ca1\u6709\u5176\u4ed6\u989c\u8272\u5728\u8fd9\u4e2a\u5b50\u6811\u4e2d\u51fa\u73b0\u5f97\u6bd4\u5b83\u591a\u3002\u6c42\u5360\u9886\u6bcf\u4e2a\u5b50\u6811\u7684\u6240\u6709\u989c\u8272\u4e4b\u548c\u3002 UOJ284 \u5feb\u4e50\u6e38\u620f\u9e21 \u53c2\u8003\u8d44\u6599 / \u6269\u5c55\u9605\u8bfb \u00b6 CF741D \u4f5c\u8005\u4ecb\u7ecd\u7684 dsu on tree \u8fd9\u4f4d\u4f5c\u8005\u7684\u9898\u89e3","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"misc/dsu-on-tree/#_1","text":"\u542f\u53d1\u5f0f\u7b97\u6cd5\u662f\u4ec0\u4e48\u5462\uff1f \u542f\u53d1\u5f0f\u7b97\u6cd5\u662f\u57fa\u4e8e\u4eba\u7c7b\u7684\u7ecf\u9a8c\u548c\u76f4\u89c2\u611f\u89c9\uff0c\u5bf9\u4e00\u4e9b\u7b97\u6cd5\u7684\u4f18\u5316\u3002 \u7ed9\u4e2a\u4f8b\u5b50\uff1f \u6700\u5e38\u89c1\u7684\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u6309\u79e9\u5408\u5e76\u4e86\uff0c\u6709\u5e26\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u4e2d\uff0c\u5408\u5e76\u7684\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 6 void merge ( int x , int y ) { int xx = find ( x ), yy = find ( y ); if ( size [ xx ] < size [ yy ]) swap ( xx , yy ); fa [ yy ] = xx ; size [ xx ] += size [ yy ]; } \u5728\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u5927\u5c0f\u4e0d\u4e00\u6837\u7684\u96c6\u5408\uff0c\u6211\u4eec\u5c06\u5927\u5c0f\u5c0f\u7684\u5e76\u5230\u5927\u7684\uff0c\u800c\u4e0d\u662f\u5927\u7684\u8fde\u63a5\u5c0f\u7684\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u96c6\u5408\u7684\u9ad8\u5ea6\uff08\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\uff0c\u800c\u6211\u4eec\u5c06\u96c6\u5408\u9ad8\u5ea6\u5c0f\u7684\u5e76\u5230\u9ad8\u5ea6\u5927\u7684\u663e\u7136\u6709\u52a9\u4e8e\u6211\u4eec\u627e\u5230\u7236\u4eb2 \u8ba9\u9ad8\u5ea6\u5c0f\u7684\u6811\u6210\u4e3a\u9ad8\u5ea6\u8f83\u5927\u7684\u6811\u7684\u5b50\u6811\uff0c\u8fd9\u4e2a\u4f18\u5316\u53ef\u4ee5\u79f0\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\u7b97\u6cd5\u3002","title":"\u5f15\u5165"},{"location":"misc/dsu-on-tree/#_2","text":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff08dsu on tree\uff09\u5bf9\u4e8e\u67d0\u4e9b\u6811\u4e0a\u79bb\u7ebf\u95ee\u9898\u53ef\u4ee5\u901f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u5927\u90e8\u5206\u7b97\u6cd5\u4e14\u66f4\u6613\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\u7684\u7b97\u6cd5\u3002 \u8003\u8651\u4e0b\u9762\u7684\u95ee\u9898\uff1a \u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u989c\u8272\uff0c\u8be2\u95ee\u4e00\u4e9b\u5b50\u6811\u7684\u989c\u8272\u6570\u91cf\uff08\u989c\u8272\u53ef\u91cd\u590d\uff09\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\u89e3\u51b3\u65b9\u5f0f\u5927\u591a\u662f\u8fd0\u7528\u5927\u91cf\u7684\u6570\u636e\u7ed3\u6784\uff08\u6811\u5957\u6811\u7b49\uff09\uff0c\u5982\u679c\u53ef\u4ee5\u79bb\u7ebf\uff0c\u8be2\u95ee\u7684\u91cf\u5de8\u5927\uff0c\u662f\u4e0d\u662f\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff1f \u6811\u4e0a\u83ab\u961f! \u4e0d\u884c\uff0c\u83ab\u961f\u5e26\u6839\u53f7\uff0c\u6211\u8981 log \u65e2\u7136\u652f\u6301\u79bb\u7ebf\uff0c\u8003\u8651\u9884\u5904\u7406\u540e O(1) O(1) \u8f93\u51fa\u7b54\u6848\u3002 \u76f4\u63a5\u66b4\u529b\u9884\u5904\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \uff0c\u5373\u5bf9\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u8fdb\u884c\u4e00\u6b21\u904d\u5386\uff0c\u6bcf\u6b21\u904d\u5386\u7684\u590d\u6742\u5ea6\u663e\u7136\u4e0e n n \u540c\u9636\uff0c\u6709 n n \u4e2a\u8282\u70b9\uff0c\u6545\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u662f\u5176\u5b50\u6811\u7684\u53e0\u52a0\uff0c\u8003\u8651\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u5904\u7406\u95ee\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u7684 size size \u548c\u5b83\u7684\u91cd\u513f\u5b50\uff0c\u91cd\u513f\u5b50\u540c\u6811\u94fe\u5256\u5206\u4e00\u6837\uff0c\u662f\u62e5\u6709\u8282\u70b9\u6700\u591a\u5b50\u6811\u7684\u513f\u5b50\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5 O(n) O(n) \u5b8c\u6210 \u6211\u4eec\u7528 check[i] \u8868\u793a\u989c\u8272 i i \u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0cans[i] \u8868\u793a\u4ed6\u7684\u989c\u8272\u4e2a\u6570 \u904d\u5386\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u6309\u4ee5\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u904d\u5386\uff1a \u5148\u904d\u5386\u5176\u975e\u91cd\u513f\u5b50\uff0c\u83b7\u53d6\u5b83\u7684 ans\uff0c\u4f46 \u4e0d\u4fdd\u7559\u904d\u5386\u540e\u5b83\u7684 check \uff1b \u904d\u5386\u5b83\u7684\u91cd\u513f\u5b50\uff0c \u4fdd\u7559\u5b83\u7684 check \uff1b \u518d\u6b21\u904d\u5386\u5176\u975e\u91cd\u513f\u5b50\u53ca\u5176\u7236\u4eb2\uff0c\u7528\u91cd\u513f\u5b50\u7684 check \u5bf9\u904d\u5386\u5230\u7684\u8282\u70b9\u8fdb\u884c\u8ba1\u7b97\uff0c\u83b7\u53d6\u6574\u68f5\u5b50\u6811\u7684 ans\uff1b \u4e0a\u56fe\u662f\u4e00\u4e2a\u4f8b\u5b50 \u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u904d\u5386\u4e86\u4e00\u6b21\u91cd\u5b50\u6811\uff0c\u4e24\u6b21\u975e\u91cd\u5b50\u6811\uff0c\u663e\u7136\u662f\u6700\u5212\u7b97\u7684\u3002 \u7ecf\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u6240\u6709 ans \u4e3a\u4ec0\u4e48\u4e0d\u5408\u5e76\u7b2c\u4e00\u6b65\u548c\u7b2c\u4e09\u6b65\u5462\uff1f\u56e0\u4e3a check \u6570\u7ec4\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\uff0c\u5426\u5219\u7a7a\u95f4\u4f1a\u592a\u5927\uff0c\u9700\u8981\u5728 O(n) O(n) \u7684\u7a7a\u95f4\u5185\u5b8c\u6210\u3002 \u663e\u7136\u82e5\u4e00\u4e2a\u8282\u70b9 u u \u88ab\u904d\u5386\u4e86 x x \u6b21\uff0c\u5219\u5176\u91cd\u513f\u5b50\u4f1a\u88ab\u904d\u5386 x x \u6b21\uff0c\u8f7b\u513f\u5b50\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u4f1a\u88ab\u904d\u5386 2x 2x \u6b21\u3002 \u6ce8\u610f\u9664\u4e86\u91cd\u513f\u5b50\uff0c\u6bcf\u6b21\u904d\u5386\u5b8c check check \u8981\u6e05\u96f6\u3002","title":"\u7b97\u6cd5\u5185\u5bb9"},{"location":"misc/dsu-on-tree/#_3","text":"\uff08\u5bf9\u4e8e\u4e0d\u5173\u5fc3\u590d\u6742\u5ea6\u8bc1\u660e\u7684\uff0c\u53ef\u4ee5\u8df3\u8fc7\u4e0d\u770b\uff09 \u6211\u4eec\u50cf\u6811\u94fe\u5256\u5206\u4e00\u6837\u5b9a\u4e49\u91cd\u8fb9\u548c\u8f7b\u8fb9\uff08\u8fde\u5411\u91cd\u513f\u5b50\u7684\u4e3a\u91cd\u8fb9\uff0c\u5176\u4f59\u4e3a\u8f7b\u8fb9\uff09\u5173\u4e8e\u91cd\u513f\u5b50\u548c\u91cd\u8fb9\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u89c1\u4e0b\u56fe\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6709 n n \u4e2a\u8282\u70b9\u7684\u6811\uff1a \u6839\u8282\u70b9\u5230\u6811\u4e0a\u4efb\u610f\u8282\u70b9\u7684\u8f7b\u8fb9\u6570\u4e0d\u8d85\u8fc7 \\log n \\log n \u6761\u3002\u6211\u4eec\u8bbe\u6839\u5230\u8be5\u8282\u70b9\u6709 x \u6761\u8f7b\u8fb9\u8be5\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a y y \uff0c\u663e\u7136\u8f7b\u8fb9\u8fde\u63a5\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u5c0f\u4e8e\u7236\u4eb2\u7684\u4e00\u534a\uff08\u82e5\u5927\u4e8e\u4e00\u534a\u5c31\u4e0d\u662f\u8f7b\u8fb9\u4e86\uff09\uff0c\u5219 y<n/2^x y<n/2^x \uff0c\u663e\u7136 n>2^x n>2^x \uff0c\u6240\u4ee5 x<\\log n x<\\log n \u3002 \u53c8\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u5176\u7236\u4eb2\u7684\u91cd\u513f\u5b50\uff0c\u5219\u4ed6\u7684\u5b50\u6811\u5fc5\u5b9a\u5728\u4ed6\u7684\u5144\u5f1f\u4e4b\u4e2d\u6700\u591a\uff0c\u6240\u4ee5\u4efb\u610f\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u91cd\u8fb9\u8fde\u63a5\u7684\u7236\u8282\u70b9\u5728\u8ba1\u7b97\u7b54\u6848\u662f\u5fc5\u5b9a\u4e0d\u4f1a\u904d\u5386\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u7684\u88ab\u904d\u5386\u7684\u6b21\u6570\u7b49\u4e8e\u4ed6\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u8f7b\u8fb9\u6811 +1 +1 \uff08\u4e4b\u6240\u4ee5\u8981 +1 +1 \u662f\u56e0\u4e3a\u4ed6\u672c\u8eab\u8981\u88ab\u904d\u5386\u5230\uff09\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u7684\u88ab\u904d\u5386\u6b21\u6570 =\\log n+1 =\\log n+1 , \u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5219\u4e3a O(n(\\log n+1))=O(n\\log n) O(n(\\log n+1))=O(n\\log n) \uff0c\u8f93\u51fa\u7b54\u6848\u82b1\u8d39 O(m) O(m) . \u56fe\u4e2d\u6807\u7ea2\u7684\u5373\u4e3a\u91cd\u8fb9\uff0c\u91cd\u8fb9\u8fde\u5411\u7684\u5b50\u8282\u70b9\u4e3a\u91cd\u513f\u5b50","title":"\u590d\u6742\u5ea6"},{"location":"misc/dsu-on-tree/#_4","text":"\u8fd9\u91cc\u662f\u9884\u5904\u7406\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 void dfs1 ( int u , int fa ) { size [ u ] = 1 ; for ( int i = head [ u ]; i ; i = tree [ i ]. next ) { int v = tree [ i ]. v ; if ( v != fa ) { dfs1 ( v , u ); size [ u ] += size [ v ]; if ( size [ v ] > size [ son [ u ]]) son [ u ] = v ; } } } \u4e0b\u9762\u662f\u6c42\u7b54\u6848\u7684\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 int dfs2 ( int u , int fa , bool keep , bool isson ) { int tmp = 0 ; for ( int i = head [ u ]; i ; i = tree [ i ]. next ) { int v = tree [ i ]. v ; if ( v != fa && v != son [ u ]) { dfs2 ( v , u , 0 , 0 ); } } if ( son [ u ]) tmp += dfs2 ( son [ u ], u , 1 , 1 ); for ( int i = head [ u ]; i ; i = tree [ i ]. next ) { int v = tree [ i ]. v ; if ( v != fa && v != son [ u ]) { tmp += dfs2 ( v , u , 1 , 0 ); } } if ( ! check [ color [ u ]]) { tmp ++ ; check [ color [ u ]] = 1 ; } if ( ! keep || isson ) ans [ u ] = tmp ; if ( ! keep ) memset ( check , 0 , sizeof ( check )), tmp = 0 ; return tmp ; } \u4ee3\u7801\u662f\u6211\u53e3\u80e1\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u7ecf\u8fc7\u6d4b\u8bc4\u4e0d\u4fdd\u8bc1\u6b63\u786e\u3002","title":"\u5927\u81f4\u4ee3\u7801"},{"location":"misc/dsu-on-tree/#_5","text":"\u67d0\u4e9b\u51fa\u9898\u4eba\u8bbe\u7f6e\u7684\u6b63\u89e3\u662f dsu on tree \u7684\u9898 \u5982 CF741D \u3002\u7ed9\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u662f'a'\u5230'v'\u7684\u5b57\u6bcd\uff0c\u6bcf\u6b21\u8be2\u95ee\u8981\u6c42\u5728\u4e00\u4e2a\u5b50\u6811\u627e\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u8be5\u8def\u5f84\u5305\u542b\u7684\u5b57\u7b26\u6392\u5e8f\u540e\u6210\u4e3a\u56de\u6587\u4e32\u3002 \u56e0\u4e3a\u662f\u6392\u5217\u540e\u6210\u4e3a\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u4e86\u4e24\u6b21\u76f8\u5f53\u4e8e\u6ca1\u51fa\u73b0\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u6761\u8def\u5f84\u6ee1\u8db3 \u6700\u591a\u6709\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u5947\u6570\u6b21 \u3002 \u6b63\u5e38\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9 dfs\uff0c\u6bcf\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u5f3a\u884c\u679a\u4e3e\u6240\u6709\u5b57\u6bcd\u627e\u5230\u548c\u4ed6\u5f02\u6216\u540e\u7ed3\u679c\u4e3a 1 \u7684\u4e2a\u6570 < 1 \u7684\u8def\u5f84\uff0c\u518d\u53bb\u6700\u957f\u503c\uff0c\u8fd9\u6837 O(n^2\\log n) O(n^2\\log n) \u7684\uff0c\u53ef\u4ee5\u7528 dsu on tree \u4f18\u5316\u5230 O(n\\log^2n) O(n\\log^2n) \u3002\u5173\u4e8e\u5177\u4f53\u505a\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u6269\u5c55\u9605\u8bfb \u53ef\u4ee5\u7528 dsu \u4e71\u641e~~\u540a\u6253 std~~\u6c34\u5206\u7684\u9898 \u53ef\u4ee5\u6c34\u4e00\u4e9b\u6811\u5957\u6811\u7684\u90e8\u5206\u5206\uff08\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\uff09\uff0c\u8fd8\u53ef\u4ee5\u628a\u6811\u4e0a\u83ab\u961f\u7684 O(n\\sqrt{m}) O(n\\sqrt{m}) \u540a\u7740\u6253","title":"\u8fd0\u7528"},{"location":"misc/dsu-on-tree/#_6","text":"CF600E Lomsat gelral \u9898\u610f\u7ffb\u8bd1\uff1a\u6811\u7684\u8282\u70b9\u6709\u989c\u8272\uff0c\u4e00\u79cd\u989c\u8272\u5360\u9886\u4e86\u4e00\u4e2a\u5b50\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ca1\u6709\u5176\u4ed6\u989c\u8272\u5728\u8fd9\u4e2a\u5b50\u6811\u4e2d\u51fa\u73b0\u5f97\u6bd4\u5b83\u591a\u3002\u6c42\u5360\u9886\u6bcf\u4e2a\u5b50\u6811\u7684\u6240\u6709\u989c\u8272\u4e4b\u548c\u3002 UOJ284 \u5feb\u4e50\u6e38\u620f\u9e21","title":"\u7ec3\u4e60\u9898"},{"location":"misc/dsu-on-tree/#_7","text":"CF741D \u4f5c\u8005\u4ecb\u7ecd\u7684 dsu on tree \u8fd9\u4f4d\u4f5c\u8005\u7684\u9898\u89e3","title":"\u53c2\u8003\u8d44\u6599 / \u6269\u5c55\u9605\u8bfb"},{"location":"misc/endianness/","text":"\u5b57\u8282\u987a\u5e8f\u662f\u8de8\u8d8a\u591a\u5b57\u8282\u7684\u7a0b\u5e8f\u5bf9\u8c61\u7684\u5b58\u50a8\u89c4\u5219\uff0c\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\u7684\u5b57\u8282\u7684\u6392\u5217\u65b9\u6cd5\u3002 \u5b57\u8282\u987a\u5e8f\u6709\u4e24\u79cd\uff0c\u5206\u4e3a\u5c0f\u7aef\u5e8f\uff08small endian\uff09\u548c\u5927\u7aef\u5e8f\uff08big endian\uff09\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e24\u79cd\u5b57\u8282\u987a\u5e8f\u6ca1\u6709\u5b70\u4f18\u5b70\u52a3\u4e4b\u5206\u3002\u8fd9\u4e24\u79cd\u987a\u5e8f\u7684\u540d\u5b57\uff08 \u5c0f\u7aef \u548c \u5927\u7aef \uff09\uff0c\u6b63\u662f\u51fa\u81ea \u300a\u683c\u5217\u4f5b\u6e38\u8bb0\u300b\u4e00\u4e66\uff0c\u4e66\u4e2d\u7684\u4e24\u4e2a\u6d3e\u522b\u4ea4\u6218\u7684\u539f\u56e0\u662f\u65e0\u6cd5\u5c31\u4ece\u54ea\u4e00\u7aef\u6253\u5f00\u9e21\u86cb\u8fbe\u6210\u4e00\u81f4\u3002\u5c31\u548c\u9e21\u86cb\u7684\u95ee\u9898\u4e00\u6837\uff0c\u9009\u62e9\u4f55\u79cd\u5b57\u8282\u987a\u5e8f\u6210\u4e86\u6ca1\u6709\u6280\u672f\u4e0a\u7406\u7531\u7684\u4e89\u8bba\u3002 \u5f53\u7136\uff0c\u5b57\u8282\u987a\u5e8f\u7684\u4e0d\u4e00\u81f4\u4f1a\u5bfc\u81f4\u4e8c\u8fdb\u5236\u6570\u636e\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u673a\u5668\u4e4b\u95f4\u8fdb\u884c\u4f20\u8f93\u65f6\u88ab\u53cd\u5e8f\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u4e86\u4e00\u5957\u6807\u51c6\uff0c\u4fdd\u8bc1\u53d1\u9001\u8fc7\u7a0b\u4e2d\u662f\u4f7f\u7528\u7ea6\u5b9a\u597d\u7684\u7f51\u7edc\u6807\u51c6\uff0c\u800c\u4e0d\u662f\u4e0d\u540c\u673a\u5668\u7684\u5185\u90e8\u8868\u793a\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u4ee5\u4e00\u4e2a\u4f4d\u4e8e 0x100 \u5904\uff0c\u7c7b\u578b\u4e3a int \uff0c\u5341\u516d\u8fdb\u5236\u503c\u4e3a 0x01234567 \u7684\u53d8\u91cf\u4e3a\u4f8b\u4ecb\u7ecd\u4e24\u79cd\u5b57\u8282\u987a\u5e8f\uff1a \uff08\u8fd9\u91cc 0x01 \u662f\u6700\u9ad8\u4f4d\u6709\u6548\u5b57\u8282\uff0c 0x67 \u662f\u6700\u4f4e\u4f4d\u6709\u6548\u5b57\u8282\uff09 \u5c0f\u7aef\u5e8f \u00b6 \u5c0f\u7aef\u5e8f\u662f\u6307\u673a\u5668\u9009\u62e9\u5728\u5185\u5b58\u4e2d\u6309\u7167\u4ece \u6700\u4f4e \u6709\u6548\u5b57\u8282\u5230 \u6700\u9ad8 \u6709\u6548\u5b57\u8282\u7684\u987a\u5e8f\u5b58\u50a8\u5bf9\u8c61\u3002 \u4e0a\u6587\u63d0\u5230\u7684\u53d8\u91cf\u5c31\u8868\u793a\u5982\u4e0b\uff1a .... 0x100 0x101 0x102 0x103 .... .... 67 45 23 01 .... \u5927\u7aef\u5e8f \u00b6 \u5927\u7aef\u5e8f\u662f\u6307\u673a\u5668\u9009\u62e9\u5728\u5185\u5b58\u4e2d\u6309\u7167\u4ece \u6700\u9ad8 \u6709\u6548\u5b57\u8282\u5230 \u6700\u4f4e \u6709\u6548\u5b57\u8282\u7684\u987a\u5e8f\u5b58\u50a8\u5bf9\u8c61\u3002 \u4e0a\u6587\u63d0\u5230\u7684\u53d8\u91cf\u5c31\u8868\u793a\u5982\u4e0b\uff1a .... 0x100 0x101 0x102 0x103 .... .... 01 23 45 67 .... \u60ef\u4f8b \u00b6 \u5c0f\u7aef\u5e8f\uff1ax86, ARM processors running Android, iOS, and Windows \u5927\u7aef\u5e8f\uff1aSun, PPC Mac, Internet","title":"\u5b57\u8282\u987a\u5e8f"},{"location":"misc/endianness/#_1","text":"\u5c0f\u7aef\u5e8f\u662f\u6307\u673a\u5668\u9009\u62e9\u5728\u5185\u5b58\u4e2d\u6309\u7167\u4ece \u6700\u4f4e \u6709\u6548\u5b57\u8282\u5230 \u6700\u9ad8 \u6709\u6548\u5b57\u8282\u7684\u987a\u5e8f\u5b58\u50a8\u5bf9\u8c61\u3002 \u4e0a\u6587\u63d0\u5230\u7684\u53d8\u91cf\u5c31\u8868\u793a\u5982\u4e0b\uff1a .... 0x100 0x101 0x102 0x103 .... .... 67 45 23 01 ....","title":"\u5c0f\u7aef\u5e8f"},{"location":"misc/endianness/#_2","text":"\u5927\u7aef\u5e8f\u662f\u6307\u673a\u5668\u9009\u62e9\u5728\u5185\u5b58\u4e2d\u6309\u7167\u4ece \u6700\u9ad8 \u6709\u6548\u5b57\u8282\u5230 \u6700\u4f4e \u6709\u6548\u5b57\u8282\u7684\u987a\u5e8f\u5b58\u50a8\u5bf9\u8c61\u3002 \u4e0a\u6587\u63d0\u5230\u7684\u53d8\u91cf\u5c31\u8868\u793a\u5982\u4e0b\uff1a .... 0x100 0x101 0x102 0x103 .... .... 01 23 45 67 ....","title":"\u5927\u7aef\u5e8f"},{"location":"misc/endianness/#_3","text":"\u5c0f\u7aef\u5e8f\uff1ax86, ARM processors running Android, iOS, and Windows \u5927\u7aef\u5e8f\uff1aSun, PPC Mac, Internet","title":"\u60ef\u4f8b"},{"location":"misc/fractional-programming/","text":"\u4f8b\u9898 luogu P4322 [JSOI2016] \u6700\u4f73\u56e2\u4f53 \u9898\u76ee\u5927\u610f\uff1a\u6709\u4e00\u68f5 n+1 n+1 \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6839\u4e3a 0 0 \u53f7\u7ed3\u70b9\u3002\u6bcf\u4e2a\u7ed3\u70b9 i i \u6709\u4e00\u4e2a\u4ef7\u503c p_i p_i \u548c\u8d39\u7528 s_i s_i \u3002\u4f60\u9700\u8981\u9009\u62e9 k k \u4e2a\u7ed3\u70b9 a_1,a_2,\\ldots,a_k a_1,a_2,\\ldots,a_k \uff08\u4e0d\u5305\u62ec 0 0 \u53f7\u7ed3\u70b9\uff09\uff0c\u4f7f\u5f97 \\frac{\\sum_{i=1}^k p_{a_i}}{\\sum_{i=1}^k s_{a_i}} \\frac{\\sum_{i=1}^k p_{a_i}}{\\sum_{i=1}^k s_{a_i}} \u6700\u5927\u3002\u4f60\u9700\u8981\u4fdd\u8bc1\u5bf9\u4e8e\u4f60\u9009\u62e9\u7684\u4e00\u4e2a\u6811\u4e0a\u7ed3\u70b9\uff0c\u5b83\u7684\u7236\u4eb2\u4e00\u5b9a\u88ab\u9009\u4e2d\u3002\u6c42\u51fa\u8fd9\u4e2a\u6700\u5927\u7684\u6bd4\u503c\u3002 \u5982\u679c\u6bcf\u4e2a\u70b9\u90fd\u53ea\u6709\u4e00\u4e2a\u4ef7\u503c\uff08\u8bbe\u4e3a v_i v_i \uff09\uff0c\u6211\u4eec\u8981\u505a\u7684\u53ea\u662f\u6700\u5927\u5316\u8fd9\u4e2a\u6700\u540e\u80fd\u5f97\u5230\u7684\u4ef7\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5f62\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u5b9a\u4e49 f(i,j) f(i,j) \u8868\u793a\u4ee5 i i \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u9009\u62e9 j j \u4e2a\u7ed3\u70b9\u7684\u6700\u5927\u4ef7\u503c\u3002\u7531\u4e8e\u8981\u6ee1\u8db3\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\uff0c\u5176\u7236\u4eb2\u4e5f\u4e00\u5b9a\u88ab\u9009\u62e9\uff0c\u5982\u679c j\\ge 1 j\\ge 1 \uff0c\u90a3\u4e48\u5f53\u524d\u7ed3\u70b9 i i \u4e00\u5b9a\u662f\u5df2\u7ecf\u88ab\u9009\u4e2d\u7684\u3002\u5229\u7528\u6811\u4e0a\u80cc\u5305\u8fdb\u884c\u5408\u5e76\u3002\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a f(i,j)=\\left\\{ \\begin{aligned} & 0, & j=0, \\\\ & \\max\\left\\{\\sum f(son,k)\\right\\}+v(i),\\quad\\text{where }\\sum k=j-1, & j\\neq 0 \\end{aligned} \\right . f(i,j)=\\left\\{ \\begin{aligned} & 0, & j=0, \\\\ & \\max\\left\\{\\sum f(son,k)\\right\\}+v(i),\\quad\\text{where }\\sum k=j-1, & j\\neq 0 \\end{aligned} \\right . \u5982\u679c \u5408\u5e76\u65b9\u5f0f\u5f97\u5f53 \uff0c\u5219\u53ef\u4ee5\u5728 O(n^2) O(n^2) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u72b6\u6001\u8f6c\u79fb\uff0c\u5177\u4f53\u7ec6\u8282\u53c2\u89c1\u4ee3\u7801\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u662f\u8ba9\u4e00\u4e2a\u5206\u5f0f\u7684\u503c\u6700\u5927\u5316\uff0c\u7136\u800c\u8fd9\u4e2a\u5206\u5f0f\u7684\u5206\u6bcd\u53c8\u4e0d\u786e\u5b9a\uff0c\u600e\u4e48\u529e\u5462\uff1f \u9996\u5148\u6211\u4eec\u660e\u786e\u4e00\u4e2a\u6027\u8d28\uff1a\u8bbe\u6700\u540e\u6700\u5927\u5316\u7684\u7b54\u6848\u4e3a ans ans \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e ans ans \u7684\u5b9e\u6570 a a \uff0c\u90fd\u6709 v_i=p_i-a\\times s_i v_i=p_i-a\\times s_i \uff0c\u8fd9\u6837\u7684 v v \u6570\u7ec4\u7b97\u51fa\u7684 f(0,k+1) f(0,k+1) \u7684\u503c\u90fd\u5927\u4e8e\u96f6\u3002\u8be5\u5f0f\u7b49\u4e8e\u96f6\u5f53\u4e14\u4ec5\u5f53 a=ans a=ans \u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u7684\u601d\u60f3\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a mid mid \uff0c\u4ee4 v_i=p_i-mid\\times s_i v_i=p_i-mid\\times s_i \uff0c \u7b97\u51fa f(0,k+1) f(0,k+1) \u7684\u503c\uff0c\u5982\u679c\u5927\u4e8e\u96f6\u5219\u9009\u62e9\u53f3\u533a\u95f4\uff0c\u53cd\u4e4b\u9009\u62e9\u5de6\u533a\u95f4\u3002\u6700\u540e\u5f53\u533a\u95f4 [l,r] [l,r] \u7684\u5927\u5c0f r-l r-l \u5728\u53ef\u4ee5\u5bb9\u8bb8\u7684\u8303\u56f4\u5185\u65f6\uff0c\u8f93\u51fa\u6700\u540e\u7684\u7b54\u6848\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2\\log ans) O(n^2\\log ans) \u3002 \u8fd9\u5c31\u662f\u5206\u6570\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // luogu-judger-enable-o2 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 2510 ; int k , n , rr , cur , h [ maxn ], nxt [ maxn * 2 ], p [ maxn * 2 ], siz [ maxn ]; double s [ maxn ], pp [ maxn ], l , r , mid , v [ maxn ], f [ maxn ][ maxn ]; void add_edge ( int x , int y ) { cur ++ ; nxt [ cur ] = h [ x ]; h [ x ] = cur ; p [ cur ] = y ; } void dfs ( int x , int fa ) { siz [ x ] = 1 ; f [ x ][ 0 ] = 0 ; f [ x ][ 1 ] = v [ x ]; for ( int i = h [ x ]; i != - 1 ; i = nxt [ i ]) if ( p [ i ] != fa ) { dfs ( p [ i ], x ); for ( int j = siz [ x ]; j >= 1 ; j -- ) for ( int k = 0 ; k <= siz [ p [ i ]]; k ++ ) f [ x ][ j + k ] = max ( f [ x ][ j + k ], f [ x ][ j ] + f [ p [ i ]][ k ]); siz [ x ] += siz [ p [ i ]]; } } int main () { memset ( h , - 1 , sizeof h ); scanf ( \"%d%d\" , & k , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lf%lf%d\" , s + i , pp + i , & rr ), add_edge ( rr , i ), add_edge ( i , rr ); r = 10000.0 ; while ( r - l > 1e-4 ) { mid = ( l + r ) * 0.5 ; for ( int i = 1 ; i <= n ; i ++ ) v [ i ] = pp [ i ] - mid * s [ i ]; for ( int i = 0 ; i < maxn ; i ++ ) for ( int j = 0 ; j < maxn ; j ++ ) f [ i ][ j ] = - 2e9 ; dfs ( 0 , - 1 ); if ( f [ 0 ][ k + 1 ] > 0 ) l = mid ; else r = mid ; } printf ( \"%.3lf \\n \" , l ); return 0 ; } \u4e60\u9898 \u00b6 luogu P3705 [SDOI2017]\u65b0\u751f\u821e\u4f1a luogu P3288 [SCOI2014]\u65b9\u4f2f\u4f2f\u8fd0\u6930\u5b50 luogu P3199 [HNOI2009]\u6700\u5c0f\u5708","title":"\u5206\u6570\u89c4\u5212"},{"location":"misc/fractional-programming/#_1","text":"luogu P3705 [SDOI2017]\u65b0\u751f\u821e\u4f1a luogu P3288 [SCOI2014]\u65b9\u4f2f\u4f2f\u8fd0\u6930\u5b50 luogu P3199 [HNOI2009]\u6700\u5c0f\u5708","title":"\u4e60\u9898"},{"location":"misc/hill-climbing/","text":"\u7b80\u4ecb \u00b6 \u722c\u5c71\u7b97\u6cd5\u662f\u4e00\u79cd\u5c40\u90e8\u62e9\u4f18\u7684\u65b9\u6cd5\uff0c\u91c7\u7528\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u662f\u5bf9\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u4e00\u79cd\u6539\u8fdb\uff0c\u5b83\u5229\u7528\u53cd\u9988\u4fe1\u606f\u5e2e\u52a9\u751f\u6210\u89e3\u7684\u51b3\u7b56\u3002 \u5b9e\u73b0 \u00b6 \u722c\u5c71\u7b97\u6cd5\u6bcf\u6b21\u5728\u5f53\u524d\u627e\u5230\u7684\u6700\u4f18\u65b9\u6848 x x \u9644\u8fd1\u5bfb\u627e\u4e00\u4e2a\u65b0\u65b9\u6848\uff08\u4e00\u822c\u968f\u673a\u5dee\u503c\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u65b0\u7684\u89e3 x' x' \u66f4\u4f18\uff0c\u90a3\u4e48\u8f6c\u79fb\u5230 x' x' \u5426\u5219\u4e0d\u53d8\u3002 \u8fd9\u79cd\u7b97\u6cd5\u5bf9\u4e8e\u5355\u5cf0\u51fd\u6570\u663e\u7136\u53ef\u884c\uff08\u4f60\u90fd\u77e5\u9053\u662f\u5355\u5cf0\u51fd\u6570\u4e86\u4e3a\u4ec0\u4e48\u4e0d\u4e09\u5206\u5462\uff09\u3002 \u4f46\u662f\u5bf9\u4e8e\u591a\u6570\u9700\u8981\u6c42\u89e3\u7684\u51fd\u6570\u4e2d\uff0c\u722c\u5c71\u7b97\u6cd5\u5f88\u5bb9\u6613\u8fdb\u5165\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u5982\u4e0b\u56fe\uff08\u6700\u4f18\u89e3\u4e3a \\color{green}{\\Uparrow} \\color{green}{\\Uparrow} \uff0c\u800c\u722c\u5c71\u7b97\u6cd5\u53ef\u80fd\u627e\u5230\u7684\u6700\u4f18\u89e3\u4e3a \\color{red}{\\Downarrow} \\color{red}{\\Downarrow} \uff09\u3002 \u4ee3\u7801 \u00b6 \u6b64\u5904\u4ee3\u7801\u4ee5 \u300cBZOJ 3680\u300d\u540a\u6253 XXX \uff08\u6c42 n n \u4e2a\u70b9\u7684\u5e26\u6743\u7c7b\u8d39\u9a6c\u70b9\uff09\u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <cmath> #include <cstdio> const int N = 10005 ; int n , x [ N ], y [ N ], w [ N ]; double ansx , ansy ; void hillclimb () { double t = 1000 ; while ( t > 1e-8 ) { double nowx = 0 , nowy = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { double dx = x [ i ] - ansx , dy = y [ i ] - ansy ; double dis = sqrt ( dx * dx + dy * dy ); nowx += ( x [ i ] - ansx ) * w [ i ] / dis ; nowy += ( y [ i ] - ansy ) * w [ i ] / dis ; } ansx += nowx * t , ansy += nowy * t ; if ( t > 0.5 ) t *= 0.5 ; else t *= 0.97 ; } } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & w [ i ]); ansx += x [ i ], ansy += y [ i ]; } ansx /= n , ansy /= n ; hillclimb (); printf ( \"%.3lf %.3lf \\n \" , ansx , ansy ); return 0 ; } \u52a3\u52bf \u00b6 \u5176\u5b9e\u722c\u5c71\u7b97\u6cd5\u7684\u52a3\u52bf\u4e0a\u6587\u5df2\u7ecf\u63d0\u53ca\uff1a\u5b83\u5bb9\u6613\u9677\u5165\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\u3002\u5f53\u76ee\u6807\u51fd\u6570\u4e0d\u662f\u5355\u5cf0\u51fd\u6570\u65f6\uff0c\u8fd9\u4e2a\u52a3\u52bf\u662f\u81f4\u547d\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8981\u5f15\u8fdb \u6a21\u62df\u9000\u706b \u3002","title":"\u722c\u5c71\u7b97\u6cd5"},{"location":"misc/hill-climbing/#_1","text":"\u722c\u5c71\u7b97\u6cd5\u662f\u4e00\u79cd\u5c40\u90e8\u62e9\u4f18\u7684\u65b9\u6cd5\uff0c\u91c7\u7528\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u662f\u5bf9\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u4e00\u79cd\u6539\u8fdb\uff0c\u5b83\u5229\u7528\u53cd\u9988\u4fe1\u606f\u5e2e\u52a9\u751f\u6210\u89e3\u7684\u51b3\u7b56\u3002","title":"\u7b80\u4ecb"},{"location":"misc/hill-climbing/#_2","text":"\u722c\u5c71\u7b97\u6cd5\u6bcf\u6b21\u5728\u5f53\u524d\u627e\u5230\u7684\u6700\u4f18\u65b9\u6848 x x \u9644\u8fd1\u5bfb\u627e\u4e00\u4e2a\u65b0\u65b9\u6848\uff08\u4e00\u822c\u968f\u673a\u5dee\u503c\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u65b0\u7684\u89e3 x' x' \u66f4\u4f18\uff0c\u90a3\u4e48\u8f6c\u79fb\u5230 x' x' \u5426\u5219\u4e0d\u53d8\u3002 \u8fd9\u79cd\u7b97\u6cd5\u5bf9\u4e8e\u5355\u5cf0\u51fd\u6570\u663e\u7136\u53ef\u884c\uff08\u4f60\u90fd\u77e5\u9053\u662f\u5355\u5cf0\u51fd\u6570\u4e86\u4e3a\u4ec0\u4e48\u4e0d\u4e09\u5206\u5462\uff09\u3002 \u4f46\u662f\u5bf9\u4e8e\u591a\u6570\u9700\u8981\u6c42\u89e3\u7684\u51fd\u6570\u4e2d\uff0c\u722c\u5c71\u7b97\u6cd5\u5f88\u5bb9\u6613\u8fdb\u5165\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u5982\u4e0b\u56fe\uff08\u6700\u4f18\u89e3\u4e3a \\color{green}{\\Uparrow} \\color{green}{\\Uparrow} \uff0c\u800c\u722c\u5c71\u7b97\u6cd5\u53ef\u80fd\u627e\u5230\u7684\u6700\u4f18\u89e3\u4e3a \\color{red}{\\Downarrow} \\color{red}{\\Downarrow} \uff09\u3002","title":"\u5b9e\u73b0"},{"location":"misc/hill-climbing/#_3","text":"\u6b64\u5904\u4ee3\u7801\u4ee5 \u300cBZOJ 3680\u300d\u540a\u6253 XXX \uff08\u6c42 n n \u4e2a\u70b9\u7684\u5e26\u6743\u7c7b\u8d39\u9a6c\u70b9\uff09\u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <cmath> #include <cstdio> const int N = 10005 ; int n , x [ N ], y [ N ], w [ N ]; double ansx , ansy ; void hillclimb () { double t = 1000 ; while ( t > 1e-8 ) { double nowx = 0 , nowy = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { double dx = x [ i ] - ansx , dy = y [ i ] - ansy ; double dis = sqrt ( dx * dx + dy * dy ); nowx += ( x [ i ] - ansx ) * w [ i ] / dis ; nowy += ( y [ i ] - ansy ) * w [ i ] / dis ; } ansx += nowx * t , ansy += nowy * t ; if ( t > 0.5 ) t *= 0.5 ; else t *= 0.97 ; } } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & w [ i ]); ansx += x [ i ], ansy += y [ i ]; } ansx /= n , ansy /= n ; hillclimb (); printf ( \"%.3lf %.3lf \\n \" , ansx , ansy ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"misc/hill-climbing/#_4","text":"\u5176\u5b9e\u722c\u5c71\u7b97\u6cd5\u7684\u52a3\u52bf\u4e0a\u6587\u5df2\u7ecf\u63d0\u53ca\uff1a\u5b83\u5bb9\u6613\u9677\u5165\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\u3002\u5f53\u76ee\u6807\u51fd\u6570\u4e0d\u662f\u5355\u5cf0\u51fd\u6570\u65f6\uff0c\u8fd9\u4e2a\u52a3\u52bf\u662f\u81f4\u547d\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8981\u5f15\u8fdb \u6a21\u62df\u9000\u706b \u3002","title":"\u52a3\u52bf"},{"location":"misc/io/","text":"\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c std::cin(std::cout) \u662f\u6781\u4e3a\u8fdf\u7f13\u7684\u8bfb\u5165\uff08\u8f93\u51fa\uff09\u65b9\u5f0f\uff0c\u800c scanf(printf) \u6bd4 std::cin(std::cout) \u5feb\u5f97\u591a\u3002 \u53ef\u662f\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u89e3\u51b3\u8bfb\u5165\u8f93\u51fa\u7f13\u6162\u7684\u95ee\u9898\u5462\uff1f \u5173\u95ed\u540c\u6b65 / \u89e3\u9664\u7ed1\u5b9a \u00b6 std::ios::sync_with_stdio(false) \u00b6 \u8fd9\u4e2a\u51fd\u6570\u662f\u4e00\u4e2a \u201c\u662f\u5426\u517c\u5bb9 stdio\u201d \u7684\u5f00\u5173\uff0cC++ \u4e3a\u4e86\u517c\u5bb9 C\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u5728\u4f7f\u7528\u4e86 printf \u548c std::cout \u7684\u65f6\u5019\u4e0d\u53d1\u751f\u6df7\u4e71\uff0c\u5c06\u8f93\u51fa\u6d41\u7ed1\u5230\u4e86\u4e00\u8d77\u3002 \u8fd9\u5176\u5b9e\u662f C++ \u4e3a\u4e86\u517c\u5bb9\u800c\u91c7\u53d6\u7684\u4fdd\u5b88\u63aa\u65bd\u3002\u6211\u4eec\u53ef\u4ee5\u5728 IO \u4e4b\u524d\u5c06 stdio \u89e3\u9664\u7ed1\u5b9a\uff0c\u8fd9\u6837\u505a\u4e86\u4e4b\u540e\u8981\u6ce8\u610f\u4e0d\u8981\u540c\u65f6\u6df7\u7528 std::cout \u548c printf \u4e4b\u7c7b tie \u00b6 tie \u662f\u5c06\u4e24\u4e2a stream \u7ed1\u5b9a\u7684\u51fd\u6570\uff0c\u7a7a\u53c2\u6570\u7684\u8bdd\u8fd4\u56de\u5f53\u524d\u7684\u8f93\u51fa\u6d41\u6307\u9488\u3002 \u5728\u9ed8\u8ba4\u7684\u60c5\u51b5\u4e0b std::cin \u7ed1\u5b9a\u7684\u662f std::cout \uff0c\u6bcf\u6b21\u6267\u884c << \u64cd\u4f5c\u7b26\u7684\u65f6\u5019\u90fd\u8981\u8c03\u7528 flush() \uff0c\u8fd9\u6837\u4f1a\u589e\u52a0 IO \u8d1f\u62c5\u3002\u53ef\u4ee5\u901a\u8fc7 std::cin.tie(0) \uff080 \u8868\u793a NULL\uff09\u6765\u89e3\u9664 std::cin \u4e0e std::cout \u7684\u7ed1\u5b9a\uff0c\u8fdb\u4e00\u6b65\u52a0\u5feb\u6267\u884c\u6548\u7387\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 std :: ios :: sync_with_stdio ( false ); std :: cin . tie ( 0 ); // \u5982\u679c\u7f16\u8bd1\u5f00\u542f\u4e86 C++11 \u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5efa\u8bae\u4f7f\u7528 std::cin.tie(nullptr); \u8bfb\u5165\u4f18\u5316 \u00b6 scanf \u548c printf \u4f9d\u7136\u6709\u4f18\u5316\u7684\u7a7a\u95f4\uff0c\u8fd9\u5c31\u662f\u672c\u7ae0\u6240\u4ecb\u7ecd\u7684\u5185\u5bb9\u2014\u2014\u8bfb\u5165\u548c\u8f93\u51fa\u4f18\u5316\u3002 \u6ce8\u610f\uff0c\u8bfb\u5165\u548c\u8f93\u51fa\u4f18\u5316\u5747\u9488\u5bf9\u6574\u6570\uff0c\u4e0d\u652f\u6301\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e \u539f\u7406 \u00b6 \u4f17\u6240\u5468\u77e5\uff0c getchar \u662f\u7528\u6765\u8bfb\u5165 char \u7c7b\u578b\uff0c\u4e14\u901f\u5ea6\u5f88\u5feb\uff0c\u7528 \u201c\u8bfb\u5165\u5b57\u7b26\u2014\u2014\u8f6c\u6362\u4e3a\u6574\u5f62\u201d \u6765\u4ee3\u66ff\u7f13\u6162\u7684\u8bfb\u5165 \u6bcf\u4e2a\u6574\u6570\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u2014\u2014\u7b26\u53f7\u548c\u6570\u5b57 \u6574\u6570\u7684 '+' \u901a\u5e38\u662f\u7701\u7565\u7684\uff0c\u4e14\u4e0d\u4f1a\u5bf9\u540e\u9762\u6570\u5b57\u6240\u4ee3\u8868\u7684\u503c\u4ea7\u751f\u5f71\u54cd\uff0c\u800c '-' \u4e0d\u53ef\u7701\u7565\uff0c\u56e0\u6b64\u8981\u8fdb\u884c\u5224\u5b9a 10 \u8fdb\u5236\u6574\u6570\u4e2d\u662f\u4e0d\u542b\u7a7a\u683c\u6216\u9664 0~9 \u548c\u6b63\u8d1f\u53f7\u5916\u7684\u5176\u4ed6\u5b57\u7b26\u7684\uff0c\u56e0\u6b64\u5728\u8bfb\u5165\u4e0d\u5e94\u5b58\u5728\u4e8e\u6574\u6570\u4e2d\u7684\u5b57\u7b26\uff08\u901a\u5e38\u4e3a\u7a7a\u683c\uff09\u65f6\uff0c\u5c31\u53ef\u4ee5\u5224\u5b9a\u5df2\u7ecf\u8bfb\u5165\u7ed3\u675f \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int read () { int x = 0 , w = 1 ; char ch = 0 ; while ( ch < '0' || ch > '9' ) { // ch \u4e0d\u662f\u6570\u5b57\u65f6 if ( ch == '-' ) w = - 1 ; // \u5224\u65ad\u662f\u5426\u4e3a\u8d1f ch = getchar (); // \u7ee7\u7eed\u8bfb\u5165 } while ( ch >= '0' && ch <= '9' ) { // ch \u662f\u6570\u5b57\u65f6 x = ( x << 3 ) + ( x << 1 ) + ch - '0' ; // \u5c06\u65b0\u8bfb\u5165\u7684\u6570\u5b57\u2019\u52a0\u2019\u5728 x \u7684\u540e\u9762 // x<<3==x*8 x<<1==x*2 \u6240\u4ee5 (x<<3)+(x<<1) \u76f8\u5f53\u4e8e x*10 // x \u662f int \u7c7b\u578b\uff0cchar \u7c7b\u578b\u7684 ch \u548c \u20190\u2019 \u4f1a\u88ab\u81ea\u52a8\u8f6c\u4e3a\u5176 ASCII // \u8868\u4e2d\u5e8f\u53f7\uff0c\u76f8\u5f53\u4e8e\u5c06 ch \u8f6c\u5316\u4e3a\u5bf9\u5e94\u6570\u5b57 ch = getchar (); // \u7ee7\u7eed\u8bfb\u5165 } return x * w ; // \u6570\u5b57 * \u6b63\u8d1f\u53f7 = \u5b9e\u9645\u6570\u503c } \u4e3e\u4f8b \u8bfb\u5165 num \u53ef\u5199\u4e3a num=read(); \u8f93\u51fa\u4f18\u5316 \u00b6 \u539f\u7406 \u00b6 \u540c\u6837\u662f\u4f17\u6240\u5468\u77e5\uff0c putchar \u662f\u8f93\u51fa\u5355\u4e2a\u5b57\u7b26 \u56e0\u6b64\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u8f6c\u5316\u4e3a\u5b57\u7b26\u8f93\u51fa\u4ee5\u52a0\u901f \u8981\u6ce8\u610f\u7684\u662f\uff0c\u8d1f\u53f7\u8981\u5355\u72ec\u5224\u65ad\u8f93\u51fa\uff0c\u5e76\u4e14\u6bcf\u6b21 %\uff08mod\uff09\u53d6\u51fa\u7684\u662f\u6570\u5b57\u672b\u4f4d\uff0c\u56e0\u6b64\u8981\u5012\u5e8f\u8f93\u51fa \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 int write ( int x ) { if ( x < 0 ) { // \u5224\u8d1f + \u8f93\u51fa\u8d1f\u53f7 + \u53d8\u539f\u6570\u4e3a\u6b63\u6570 x = - x ; putchar ( '-' ); } if ( x > 9 ) write ( x / 10 ); // \u9012\u5f52\uff0c\u5c06\u9664\u6700\u540e\u4e00\u4f4d\u5916\u7684\u5176\u4ed6\u90e8\u5206\u653e\u5230\u9012\u5f52\u4e2d\u8f93\u51fa putchar ( x % 10 + '0' ); // \u5df2\u7ecf\u8f93\u51fa\uff08\u9012\u5f52\uff09\u5b8c x \u672b\u4f4d\u524d\u7684\u6240\u6709\u6570\u5b57\uff0c\u8f93\u51fa\u672b\u4f4d } \u4f46\u662f\u9012\u5f52\u5b9e\u73b0\u5e38\u6570\u662f\u8f83\u5927\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u6808\u6765\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b 1 2 3 4 5 6 7 8 inline void write ( int x ) { static int sta [ 35 ]; int top = 0 ; do { sta [ top ++ ] = x % 10 , x /= 10 ; } while ( x ); while ( top ) putchar ( sta [ -- top ] + 48 ); // 48 \u662f '0' } \u4e3e\u4f8b \u8f93\u51fa num \u53ef\u5199\u4e3a write(num); \u66f4\u5feb\u7684\u8bfb\u5165 / \u8f93\u51fa\u4f18\u5316 \u00b6 \u901a\u8fc7 fread \u6216\u8005 mmap \u53ef\u4ee5\u5b9e\u73b0\u66f4\u5feb\u7684\u8bfb\u5165\u3002\u5176\u672c\u8d28\u4e3a\u4e00\u6b21\u6027\u8bfb\u5165\u4e00\u4e2a\u5de8\u5927\u7684\u7f13\u5b58\u533a\uff0c\u5982\u6b64\u6bd4\u4e00\u4e2a\u4e00\u4e2a\u5b57\u7b26\u8bfb\u5165\u8981\u5feb\u7684\u591a ( getchar , putchar \uff09\u3002 \u56e0\u4e3a\u786c\u76d8\u7684\u591a\u6b21\u8bfb\u5199\u901f\u5ea6\u662f\u8981\u6162\u4e8e\u5185\u5b58\u7684\uff0c\u5148\u4e00\u6b21\u6027\u8bfb\u5230\u5185\u5b58\u91cc\u5728\u8bfb\u5165\u8981\u5feb\u7684\u591a\u3002 \u66f4\u901a\u7528\u7684\u662f fread \uff0c\u56e0\u4e3a mmap \u4e0d\u80fd\u5728 Windows \u4f7f\u7528\u3002 fread \u7c7b\u4f3c\u4e8e scanf(\"%s\") \uff0c\u4e0d\u8fc7\u5b83\u66f4\u4e3a\u5feb\u901f\uff0c\u800c\u4e14\u53ef\u4ee5\u4e00\u6b21\u6027\u8bfb\u5165\u82e5\u5e72\u4e2a\u5b57\u7b26\uff08\u5305\u62ec\u7a7a\u683c\u6362\u884c\u7b49\u5236\u8868\u7b26\uff09\uff0c\u5982\u679c\u7f13\u5b58\u533a\u8db3\u591f\u5927\uff0c\u751a\u81f3\u53ef\u4ee5\u4e00\u6b21\u6027\u8bfb\u5165\u6574\u4e2a\u6587\u4ef6\u3002 \u5bf9\u4e8e\u8f93\u51fa\uff0c\u6211\u4eec\u8fd8\u6709\u5bf9\u5e94\u7684 fwrite \u51fd\u6570 1 2 3 4 std :: size_t fread ( void * buffer , std :: size_t size , std :: size_t count , std :: FILE * stream ); std :: size_t fwrite ( const void * buffer , std :: size_t size , std :: size_t count , std :: FILE * stream ); \u4f7f\u7528\u793a\u4f8b\uff1a fread(Buf, 1, MAXSIZE, stdin) \uff0c\u5982\u6b64\u4ece stdin \u6587\u4ef6\u6d41\u4e2d\u8bfb\u5165 MAXSIZE \u4e2a\u5927\u5c0f\u4e3a 1 \u7684\u5b57\u7b26\u5230 Buf \u4e2d\u3002 \u8bfb\u5165\u4e4b\u540e\u7684\u4f7f\u7528\u5c31\u8ddf\u666e\u901a\u7684\u8bfb\u5165\u4f18\u5316\u76f8\u4f3c\u4e86\uff0c\u53ea\u9700\u8981\u91cd\u5b9a\u4e49\u4e00\u4e0b getchar\u3002\u5b83\u539f\u6765\u662f\u4ece\u6587\u4ef6\u4e2d\u8bfb\u5165\u4e00\u4e2a char\uff0c\u73b0\u5728\u53d8\u6210\u4ece Buf \u4e2d\u8bfb\u5165\u4e00\u4e2a char\uff0c\u4e5f\u5c31\u662f\u5934\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\u3002 1 2 3 4 5 char buf [ 1 << 20 ], * p1 , * p2 ; #define gc() \\ (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 20, stdin), p1 == p2) \\ ? EOF \\ : *p1++) fwrite \u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u5148\u653e\u5165\u4e00\u4e2a OutBuf[MAXSIZE] \u4e2d\uff0c\u6700\u540e\u901a\u8fc7 fwrite \u4e00\u6b21\u6027\u5c06 OutBuf \u8f93\u51fa\u3002 \u53c2\u8003\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 namespace IO { const int MAXSIZE = 1 << 20 ; char buf [ MAXSIZE ], * p1 , * p2 ; #define gc() \\ (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) \\ ? EOF \\ : *p1++) inline int rd () { int x = 0 , f = 1 ; char c = nc (); while ( ! isdigit ( c )) { if ( c == '-' ) f = - 1 ; c = nc (); } while ( isdigit ( c )) x = ( x << 1 ) + ( x << 3 ) + ( c ^ 48 ), c = nc (); return x * f ; } char pbuf [ 1 << 20 ], * pp = pbuf ; inline void push ( const char & c ) { if ( pp - pbuf == 1 << 20 ) fwrite ( pbuf , 1 , 1 << 20 , stdout ), pp = pbuf ; * pp ++ = c ; } inline void write ( int x ) { static int sta [ 35 ]; int top = 0 ; do { sta [ top ++ ] = x % 10 , x /= 10 ; } while ( x ); while ( top ) push ( sta [ -- top ] + '0' ); } } // namespace IO \u53c2\u8003 \u00b6 http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html http://meme.biology.tohoku.ac.jp/students/iwasaki/cxx/speed.html","title":"\u8bfb\u5165\u3001\u8f93\u51fa\u4f18\u5316"},{"location":"misc/io/#_1","text":"","title":"\u5173\u95ed\u540c\u6b65 / \u89e3\u9664\u7ed1\u5b9a"},{"location":"misc/io/#stdiossync_with_stdiofalse","text":"\u8fd9\u4e2a\u51fd\u6570\u662f\u4e00\u4e2a \u201c\u662f\u5426\u517c\u5bb9 stdio\u201d \u7684\u5f00\u5173\uff0cC++ \u4e3a\u4e86\u517c\u5bb9 C\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u5728\u4f7f\u7528\u4e86 printf \u548c std::cout \u7684\u65f6\u5019\u4e0d\u53d1\u751f\u6df7\u4e71\uff0c\u5c06\u8f93\u51fa\u6d41\u7ed1\u5230\u4e86\u4e00\u8d77\u3002 \u8fd9\u5176\u5b9e\u662f C++ \u4e3a\u4e86\u517c\u5bb9\u800c\u91c7\u53d6\u7684\u4fdd\u5b88\u63aa\u65bd\u3002\u6211\u4eec\u53ef\u4ee5\u5728 IO \u4e4b\u524d\u5c06 stdio \u89e3\u9664\u7ed1\u5b9a\uff0c\u8fd9\u6837\u505a\u4e86\u4e4b\u540e\u8981\u6ce8\u610f\u4e0d\u8981\u540c\u65f6\u6df7\u7528 std::cout \u548c printf \u4e4b\u7c7b","title":"std::ios::sync_with_stdio(false)"},{"location":"misc/io/#tie","text":"tie \u662f\u5c06\u4e24\u4e2a stream \u7ed1\u5b9a\u7684\u51fd\u6570\uff0c\u7a7a\u53c2\u6570\u7684\u8bdd\u8fd4\u56de\u5f53\u524d\u7684\u8f93\u51fa\u6d41\u6307\u9488\u3002 \u5728\u9ed8\u8ba4\u7684\u60c5\u51b5\u4e0b std::cin \u7ed1\u5b9a\u7684\u662f std::cout \uff0c\u6bcf\u6b21\u6267\u884c << \u64cd\u4f5c\u7b26\u7684\u65f6\u5019\u90fd\u8981\u8c03\u7528 flush() \uff0c\u8fd9\u6837\u4f1a\u589e\u52a0 IO \u8d1f\u62c5\u3002\u53ef\u4ee5\u901a\u8fc7 std::cin.tie(0) \uff080 \u8868\u793a NULL\uff09\u6765\u89e3\u9664 std::cin \u4e0e std::cout \u7684\u7ed1\u5b9a\uff0c\u8fdb\u4e00\u6b65\u52a0\u5feb\u6267\u884c\u6548\u7387\u3002","title":"tie"},{"location":"misc/io/#_2","text":"1 2 3 std :: ios :: sync_with_stdio ( false ); std :: cin . tie ( 0 ); // \u5982\u679c\u7f16\u8bd1\u5f00\u542f\u4e86 C++11 \u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5efa\u8bae\u4f7f\u7528 std::cin.tie(nullptr);","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"misc/io/#_3","text":"scanf \u548c printf \u4f9d\u7136\u6709\u4f18\u5316\u7684\u7a7a\u95f4\uff0c\u8fd9\u5c31\u662f\u672c\u7ae0\u6240\u4ecb\u7ecd\u7684\u5185\u5bb9\u2014\u2014\u8bfb\u5165\u548c\u8f93\u51fa\u4f18\u5316\u3002 \u6ce8\u610f\uff0c\u8bfb\u5165\u548c\u8f93\u51fa\u4f18\u5316\u5747\u9488\u5bf9\u6574\u6570\uff0c\u4e0d\u652f\u6301\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e","title":"\u8bfb\u5165\u4f18\u5316"},{"location":"misc/io/#_4","text":"\u4f17\u6240\u5468\u77e5\uff0c getchar \u662f\u7528\u6765\u8bfb\u5165 char \u7c7b\u578b\uff0c\u4e14\u901f\u5ea6\u5f88\u5feb\uff0c\u7528 \u201c\u8bfb\u5165\u5b57\u7b26\u2014\u2014\u8f6c\u6362\u4e3a\u6574\u5f62\u201d \u6765\u4ee3\u66ff\u7f13\u6162\u7684\u8bfb\u5165 \u6bcf\u4e2a\u6574\u6570\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u2014\u2014\u7b26\u53f7\u548c\u6570\u5b57 \u6574\u6570\u7684 '+' \u901a\u5e38\u662f\u7701\u7565\u7684\uff0c\u4e14\u4e0d\u4f1a\u5bf9\u540e\u9762\u6570\u5b57\u6240\u4ee3\u8868\u7684\u503c\u4ea7\u751f\u5f71\u54cd\uff0c\u800c '-' \u4e0d\u53ef\u7701\u7565\uff0c\u56e0\u6b64\u8981\u8fdb\u884c\u5224\u5b9a 10 \u8fdb\u5236\u6574\u6570\u4e2d\u662f\u4e0d\u542b\u7a7a\u683c\u6216\u9664 0~9 \u548c\u6b63\u8d1f\u53f7\u5916\u7684\u5176\u4ed6\u5b57\u7b26\u7684\uff0c\u56e0\u6b64\u5728\u8bfb\u5165\u4e0d\u5e94\u5b58\u5728\u4e8e\u6574\u6570\u4e2d\u7684\u5b57\u7b26\uff08\u901a\u5e38\u4e3a\u7a7a\u683c\uff09\u65f6\uff0c\u5c31\u53ef\u4ee5\u5224\u5b9a\u5df2\u7ecf\u8bfb\u5165\u7ed3\u675f","title":"\u539f\u7406"},{"location":"misc/io/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int read () { int x = 0 , w = 1 ; char ch = 0 ; while ( ch < '0' || ch > '9' ) { // ch \u4e0d\u662f\u6570\u5b57\u65f6 if ( ch == '-' ) w = - 1 ; // \u5224\u65ad\u662f\u5426\u4e3a\u8d1f ch = getchar (); // \u7ee7\u7eed\u8bfb\u5165 } while ( ch >= '0' && ch <= '9' ) { // ch \u662f\u6570\u5b57\u65f6 x = ( x << 3 ) + ( x << 1 ) + ch - '0' ; // \u5c06\u65b0\u8bfb\u5165\u7684\u6570\u5b57\u2019\u52a0\u2019\u5728 x \u7684\u540e\u9762 // x<<3==x*8 x<<1==x*2 \u6240\u4ee5 (x<<3)+(x<<1) \u76f8\u5f53\u4e8e x*10 // x \u662f int \u7c7b\u578b\uff0cchar \u7c7b\u578b\u7684 ch \u548c \u20190\u2019 \u4f1a\u88ab\u81ea\u52a8\u8f6c\u4e3a\u5176 ASCII // \u8868\u4e2d\u5e8f\u53f7\uff0c\u76f8\u5f53\u4e8e\u5c06 ch \u8f6c\u5316\u4e3a\u5bf9\u5e94\u6570\u5b57 ch = getchar (); // \u7ee7\u7eed\u8bfb\u5165 } return x * w ; // \u6570\u5b57 * \u6b63\u8d1f\u53f7 = \u5b9e\u9645\u6570\u503c } \u4e3e\u4f8b \u8bfb\u5165 num \u53ef\u5199\u4e3a num=read();","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"misc/io/#_6","text":"","title":"\u8f93\u51fa\u4f18\u5316"},{"location":"misc/io/#_7","text":"\u540c\u6837\u662f\u4f17\u6240\u5468\u77e5\uff0c putchar \u662f\u8f93\u51fa\u5355\u4e2a\u5b57\u7b26 \u56e0\u6b64\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u8f6c\u5316\u4e3a\u5b57\u7b26\u8f93\u51fa\u4ee5\u52a0\u901f \u8981\u6ce8\u610f\u7684\u662f\uff0c\u8d1f\u53f7\u8981\u5355\u72ec\u5224\u65ad\u8f93\u51fa\uff0c\u5e76\u4e14\u6bcf\u6b21 %\uff08mod\uff09\u53d6\u51fa\u7684\u662f\u6570\u5b57\u672b\u4f4d\uff0c\u56e0\u6b64\u8981\u5012\u5e8f\u8f93\u51fa","title":"\u539f\u7406"},{"location":"misc/io/#_8","text":"1 2 3 4 5 6 7 8 int write ( int x ) { if ( x < 0 ) { // \u5224\u8d1f + \u8f93\u51fa\u8d1f\u53f7 + \u53d8\u539f\u6570\u4e3a\u6b63\u6570 x = - x ; putchar ( '-' ); } if ( x > 9 ) write ( x / 10 ); // \u9012\u5f52\uff0c\u5c06\u9664\u6700\u540e\u4e00\u4f4d\u5916\u7684\u5176\u4ed6\u90e8\u5206\u653e\u5230\u9012\u5f52\u4e2d\u8f93\u51fa putchar ( x % 10 + '0' ); // \u5df2\u7ecf\u8f93\u51fa\uff08\u9012\u5f52\uff09\u5b8c x \u672b\u4f4d\u524d\u7684\u6240\u6709\u6570\u5b57\uff0c\u8f93\u51fa\u672b\u4f4d } \u4f46\u662f\u9012\u5f52\u5b9e\u73b0\u5e38\u6570\u662f\u8f83\u5927\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u6808\u6765\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b 1 2 3 4 5 6 7 8 inline void write ( int x ) { static int sta [ 35 ]; int top = 0 ; do { sta [ top ++ ] = x % 10 , x /= 10 ; } while ( x ); while ( top ) putchar ( sta [ -- top ] + 48 ); // 48 \u662f '0' } \u4e3e\u4f8b \u8f93\u51fa num \u53ef\u5199\u4e3a write(num);","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"misc/io/#_9","text":"\u901a\u8fc7 fread \u6216\u8005 mmap \u53ef\u4ee5\u5b9e\u73b0\u66f4\u5feb\u7684\u8bfb\u5165\u3002\u5176\u672c\u8d28\u4e3a\u4e00\u6b21\u6027\u8bfb\u5165\u4e00\u4e2a\u5de8\u5927\u7684\u7f13\u5b58\u533a\uff0c\u5982\u6b64\u6bd4\u4e00\u4e2a\u4e00\u4e2a\u5b57\u7b26\u8bfb\u5165\u8981\u5feb\u7684\u591a ( getchar , putchar \uff09\u3002 \u56e0\u4e3a\u786c\u76d8\u7684\u591a\u6b21\u8bfb\u5199\u901f\u5ea6\u662f\u8981\u6162\u4e8e\u5185\u5b58\u7684\uff0c\u5148\u4e00\u6b21\u6027\u8bfb\u5230\u5185\u5b58\u91cc\u5728\u8bfb\u5165\u8981\u5feb\u7684\u591a\u3002 \u66f4\u901a\u7528\u7684\u662f fread \uff0c\u56e0\u4e3a mmap \u4e0d\u80fd\u5728 Windows \u4f7f\u7528\u3002 fread \u7c7b\u4f3c\u4e8e scanf(\"%s\") \uff0c\u4e0d\u8fc7\u5b83\u66f4\u4e3a\u5feb\u901f\uff0c\u800c\u4e14\u53ef\u4ee5\u4e00\u6b21\u6027\u8bfb\u5165\u82e5\u5e72\u4e2a\u5b57\u7b26\uff08\u5305\u62ec\u7a7a\u683c\u6362\u884c\u7b49\u5236\u8868\u7b26\uff09\uff0c\u5982\u679c\u7f13\u5b58\u533a\u8db3\u591f\u5927\uff0c\u751a\u81f3\u53ef\u4ee5\u4e00\u6b21\u6027\u8bfb\u5165\u6574\u4e2a\u6587\u4ef6\u3002 \u5bf9\u4e8e\u8f93\u51fa\uff0c\u6211\u4eec\u8fd8\u6709\u5bf9\u5e94\u7684 fwrite \u51fd\u6570 1 2 3 4 std :: size_t fread ( void * buffer , std :: size_t size , std :: size_t count , std :: FILE * stream ); std :: size_t fwrite ( const void * buffer , std :: size_t size , std :: size_t count , std :: FILE * stream ); \u4f7f\u7528\u793a\u4f8b\uff1a fread(Buf, 1, MAXSIZE, stdin) \uff0c\u5982\u6b64\u4ece stdin \u6587\u4ef6\u6d41\u4e2d\u8bfb\u5165 MAXSIZE \u4e2a\u5927\u5c0f\u4e3a 1 \u7684\u5b57\u7b26\u5230 Buf \u4e2d\u3002 \u8bfb\u5165\u4e4b\u540e\u7684\u4f7f\u7528\u5c31\u8ddf\u666e\u901a\u7684\u8bfb\u5165\u4f18\u5316\u76f8\u4f3c\u4e86\uff0c\u53ea\u9700\u8981\u91cd\u5b9a\u4e49\u4e00\u4e0b getchar\u3002\u5b83\u539f\u6765\u662f\u4ece\u6587\u4ef6\u4e2d\u8bfb\u5165\u4e00\u4e2a char\uff0c\u73b0\u5728\u53d8\u6210\u4ece Buf \u4e2d\u8bfb\u5165\u4e00\u4e2a char\uff0c\u4e5f\u5c31\u662f\u5934\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\u3002 1 2 3 4 5 char buf [ 1 << 20 ], * p1 , * p2 ; #define gc() \\ (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 20, stdin), p1 == p2) \\ ? EOF \\ : *p1++) fwrite \u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u5148\u653e\u5165\u4e00\u4e2a OutBuf[MAXSIZE] \u4e2d\uff0c\u6700\u540e\u901a\u8fc7 fwrite \u4e00\u6b21\u6027\u5c06 OutBuf \u8f93\u51fa\u3002 \u53c2\u8003\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 namespace IO { const int MAXSIZE = 1 << 20 ; char buf [ MAXSIZE ], * p1 , * p2 ; #define gc() \\ (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) \\ ? EOF \\ : *p1++) inline int rd () { int x = 0 , f = 1 ; char c = nc (); while ( ! isdigit ( c )) { if ( c == '-' ) f = - 1 ; c = nc (); } while ( isdigit ( c )) x = ( x << 1 ) + ( x << 3 ) + ( c ^ 48 ), c = nc (); return x * f ; } char pbuf [ 1 << 20 ], * pp = pbuf ; inline void push ( const char & c ) { if ( pp - pbuf == 1 << 20 ) fwrite ( pbuf , 1 , 1 << 20 , stdout ), pp = pbuf ; * pp ++ = c ; } inline void write ( int x ) { static int sta [ 35 ]; int top = 0 ; do { sta [ top ++ ] = x % 10 , x /= 10 ; } while ( x ); while ( top ) push ( sta [ -- top ] + '0' ); } } // namespace IO","title":"\u66f4\u5feb\u7684\u8bfb\u5165 / \u8f93\u51fa\u4f18\u5316"},{"location":"misc/io/#_10","text":"http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html http://meme.biology.tohoku.ac.jp/students/iwasaki/cxx/speed.html","title":"\u53c2\u8003"},{"location":"misc/magic/","text":"\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u53d1\u5c55\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4ec5\u4ea7\u751f\u4e86\u5f88\u591a\u4f18\u79c0\u7684\u4e2d\u6587\u8d44\u6599\uff0c\u4e5f\u4ea7\u751f\u4e86\u5f88\u591a\u7cbe\u826f\u7684\u82f1\u6587\u8d44\u6599\u3002\u6bd4\u5982\u8bf4\uff0c\u8fd1\u5e74\u6765\uff0c\u5f88\u591a\u65b0\u9c9c\u7684\u9ed1\u79d1\u6280\u5c31\u662f\u4ece\u56fd\u5916\u4ea4\u6d41\u5e73\u53f0\uff08\u5982 Codeforces\uff09\u4e0a\u5f15\u5165\u56fd\u5185 OI \u7ade\u8d5b\u7684\u3002 \u7531\u4e8e\u4f17\u6240\u5468\u77e5\u7684\u539f\u56e0\uff0c\u4e0d\u662f\u6240\u6709\u5883\u5916\u7f51\u7ad9\u5728\u5927\u9646\u6240\u6709\u5730\u533a\u90fd\u80fd\u591f\u6b63\u5e38\u8bbf\u95ee\u3002\u5bf9\u4e8e OIer \u800c\u8a00\uff0c\u8fdb\u4e00\u6b65\u5b66\u4e60\u7684\u9700\u6c42\u5f80\u5f80\u56e0\u6b64\u96be\u4ee5\u5f97\u5230\u6ee1\u8db3\u3002 \u6ce8\uff1a\u672c\u9879\u76ee\u5728\u7f16\u5199\u8fc7\u7a0b\u4e2d\u53d7\u5230 @GoogleHosts \u7684\u5927\u529b\u652f\u6301\uff0c\u5728\u6b64\u8868\u793a\u611f\u8c22\u3002 \u672c\u9875\u4ec5\u7528\u4e8e\u4ecb\u7ecd\uff0c\u7248\u6743\u5f52\u670d\u52a1\u63d0\u4f9b\u8005\u6240\u6709\u3002 Hosts \u00b6 @GoogleHosts \u81f4\u529b\u4e8e\u7ef4\u62a4 hosts \u6587\u4ef6\uff0c\u4f18\u5316\u4e2d\u56fd\u5927\u9646\u5bf9\u4f17\u591a\u7f51\u7ad9\u7684\u8bbf\u95ee\u3002 hosts \u6587\u4ef6\u7684\u4f5c\u7528\u662f\u5c06\u57df\u540d\u6307\u5411\u8bbf\u95ee\u901f\u5ea6\u66f4\u4f18\u79c0\u7684\u5bf9\u5e94 ip \u5730\u5740\uff0c\u53ef\u4ee5\u907f\u514d\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5e72\u6270\u3002 \u53e6\u5916\uff0c @GoogleHosts \u4e5f\u642d\u5efa\u4e86 \u516c\u76ca\u670d\u52a1 \uff0c\u5305\u542b \u9632\u6c61\u67d3 DNS\u3001Shadowsocks \u670d\u52a1\u548c Telegram \u4e13\u7528\u4ee3\u7406\u7b49\u3002 Shadowsocks \u00b6 Shadowsocks \u662f\u4e00\u4e2a\u5b89\u5168\u7684 socks5 \u4ee3\u7406\uff0c\u652f\u6301\u591a\u79cd\u5e73\u53f0\u3002 Windows \u00b6 \u4e0b\u8f7d\u5730\u5740\uff1a shadowsocks-win | Outline Windows Mac OS X \u00b6 \u4e0b\u8f7d\u5730\u5740\uff1a ShadowsocksX-NG | Outline macOS Linux \u00b6 \u81ea\u52a8\u5b89\u88c5\u811a\u672c\uff1a lrinQVQ/script \u4e3a\u4ec0\u4e48\u4e0d\u63a8\u8350\u4f7f\u7528 ssr \uff1f \u00b6 ssr \u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fdd\u53cd\u4e86 GPL \u534f\u8bae \uff0cGPL \u8981\u6c42\u518d\u5206\u53d1\u65f6\u5e94\u5f00\u653e\u6e90\u4ee3\u7801\uff0c\u800c ssr \u7684\u7ef4\u62a4\u8005\u5e76\u6ca1\u6709\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5408\u683c\u7684 OIer\uff0c \u9075\u5b88\u5f00\u6e90\u534f\u8bae \u662f\u6700\u8d77\u7801\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e76\u4e0d\u63d0\u5021\u4f7f\u7528 ssr\u3002 \u5f15\u7528 clowwindy \u7684\u4e00\u6bb5\u8457\u540d\u7684 \u8bc4\u8bba \u4f5c\u4e3a\u7ed3\u8bed\u3002 \u5173\u4e8e\u4e2d\u56fd\u7684\u4e92\u8054\u7f51 \u00b6 \uff08\u672c\u6bb5\u6587\u5b57\u8f6c\u8f7d\u81ea\u539f netsh.org\uff09 \u7f51\u7edc\u5ba1\u67e5\u5728\u5404\u4e2a\u56fd\u5bb6\u90fd\u666e\u904d\u5b58\u5728\u7740\uff0c\u5b83\u5e76\u4e0d\u4ec5\u5b58\u5728\u4e8e\u4e2d\u56fd\u3002\u5728\u5168\u7403\u7684\u5c40\u52bf\u5bf9\u4e2d\u56fd\u90fd\u4e0d\u5229\u7684\u5f53\u4e0b\uff0c\u5f53\u5c40\u4f1a\u8fc7\u6ee4\u6389\u5f71\u54cd\u3001\u5371\u5bb3\u5230\u4e2d\u56fd\u957f\u8fdc\u53d1\u5c55\u7684\u4fe1\u606f\uff0c\u6b64\u65f6\u56fd\u5bb6\u5b89\u5168\u7684\u610f\u4e49\u66f4\u52a0\u91cd\u5927\u3002 \u4e92\u8054\u7f51\u4e0a\u5b58\u5728\u7740\u5927\u91cf\u4e0d\u73b0\u5b9e\u7684\u3001\u4e0d\u5ba2\u89c2\u7684\uff0c\u751a\u81f3\u81ea\u76f8\u77db\u76fe\u7684\u62b9\u9ed1\u5f53\u5c40\u653f\u5e9c\u8a00\u8bba\uff0c\u5b83\u4eec\u80cc\u540e\u4e00\u822c\u6709\u897f\u65b9\u653f\u5e9c\u6216\u975e\u653f\u5e9c\u7ec4\u7ec7\u8d44\u91d1\u652f\u6301\u3002\u8fd9\u4e9b\u5a92\u4f53\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e00\u4e9b\u6e2f\u5a92\u3001\u5883\u5916\u7f51\u7ad9\u3002 \u6211\u4eec\u5e0c\u671b\u60a8\u80fd\u5728\u9047\u5230\u6b64\u7c7b\u8a00\u8bba\u548c\u89c1\u89e3\u65f6\uff0c\u4e0d\u8981\u4e0d\u52a0\u601d\u8003\u5730\u3001\u60c5\u7eea\u4e00\u5ea6\u88ab\u717d\u52a8\u800c\u4e0d\u80fd\u514b\u5236\u5730\u3001\u76f2\u76ee\u5730\u76f8\u4fe1\u8fd9\u4e9b\u7247\u9762\u6216\u8005\u6b6a\u66f2\u4e8b\u5b9e\u7684\u4e1c\u897f\uff0c\u800c\u662f\u8981\u4e8b\u5b9e\u6c42\u662f\u5730\u601d\u8003\uff0c\u8981\u6446\u8131\u60c5\u7eea\u7ed1\u67b6\u7684\u602a\u8bde\u601d\u7ef4\u53bb\u7406\u89e3\u3002 \u6211\u4eec\u9700\u8981\u4e86\u89e3\u5230\uff0c\u4e2d\u56fd\u7684\u53d1\u5c55\u603b\u57fa\u8c03\u662f \u201c\u7a33\u4e2d\u6c42\u8fdb\u201d\uff0c\u4e2d\u56fd\u793e\u4f1a\u7684\u6700\u6838\u5fc3\u95ee\u9898\u5c31\u662f\u7a33\u5b9a\u3002\u5931\u53bb\u7a33\u5b9a\u7684\u4e2d\u56fd\u5c06\u4f1a\u662f\u4e00\u76d8\u6563\u6c99\uff0c\u9762\u4e34\u5206\u88c2\u548c\u80a2\u89e3\u7684\u5371\u9669\u3002\u6211\u4eec\u5e0c\u671b\u60a8\u4e86\u89e3\u5f53\u4eca\u4e2d\u56fd\u53d1\u5c55\u7684\u6839\u672c\u4fdd\u8bc1\u662f\u4ec0\u4e48\uff0c\u53d1\u5c55\u7684\u8fc7\u7a0b\u4e2d\u54ea\u90e8\u5206\u662f\u4e3b\u65cb\u5f8b\uff0c\u54ea\u4e9b\u662f\u566a\u97f3\uff1b\u54ea\u4e9b\u662f\u8fdb\u53d6\u7684\uff0c\u54ea\u4e9b\u662f\u4f1a\u5f00\u5386\u53f2\u5012\u8f66\u7684\u3002\u6211\u4eec\u9700\u8981\u7ef4\u65b0\uff0c\u800c\u4e0d\u662f\u9769\u547d\u3002 \u6211\u4eec\u5e94\u8be5\u6e05\u9192\u548c\u5168\u9762\u5730\u8ba4\u8bc6\u95ee\u9898\uff0c\u504f\u4fe1\u897f\u65b9\u5a92\u4f53\u7684\u8a00\u8bba\u3001\u7f3a\u4e4f\u5bf9\u56fd\u5bb6\u7684\u4fe1\u4efb\u662f\u4e0d\u53ef\u53d6\u7684\u3002\u60a8\u7684\u6570\u636e\u5b89\u5168\u548c\u9690\u79c1\u5bf9\u60a8\u5c24\u4e3a\u91cd\u8981\u3002\u82e5\u8fd9\u4e9b\u4fe1\u606f\u4e0d\u5e94\u5f53\u88ab\u897f\u65b9\u638c\u63e1\u65f6\uff0c\u5b83\u5bf9\u56fd\u5bb6\u548c\u6c11\u65cf\u7684\u547d\u8fd0\u66f4\u4e3a\u91cd\u8981\u3002\u51fa\u4e8e\u6b64\u539f\u56e0\uff0c\u5f53\u5c40\u53ef\u80fd\u4f1a\u9650\u5236\u60a8\u7684\u884c\u4e3a\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e5f\u65e0\u6cd5\u5e72\u9884\u5f53\u5c40\u7684\u4efb\u4f55\u653f\u7b56\u548c\u51b3\u5b9a\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u5e0c\u671b\u60a8\u5728\u4f7f\u7528\u6b64\u670d\u52a1\u65f6\uff0c\u4e0d\u8981\u76f2\u76ee\u5730\u653b\u51fb\u5f53\u5c40\u7684\u505a\u6cd5\u3002 I believe you guys will make great stuff with Network Extensions.","title":"Magic"},{"location":"misc/magic/#hosts","text":"@GoogleHosts \u81f4\u529b\u4e8e\u7ef4\u62a4 hosts \u6587\u4ef6\uff0c\u4f18\u5316\u4e2d\u56fd\u5927\u9646\u5bf9\u4f17\u591a\u7f51\u7ad9\u7684\u8bbf\u95ee\u3002 hosts \u6587\u4ef6\u7684\u4f5c\u7528\u662f\u5c06\u57df\u540d\u6307\u5411\u8bbf\u95ee\u901f\u5ea6\u66f4\u4f18\u79c0\u7684\u5bf9\u5e94 ip \u5730\u5740\uff0c\u53ef\u4ee5\u907f\u514d\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5e72\u6270\u3002 \u53e6\u5916\uff0c @GoogleHosts \u4e5f\u642d\u5efa\u4e86 \u516c\u76ca\u670d\u52a1 \uff0c\u5305\u542b \u9632\u6c61\u67d3 DNS\u3001Shadowsocks \u670d\u52a1\u548c Telegram \u4e13\u7528\u4ee3\u7406\u7b49\u3002","title":"Hosts"},{"location":"misc/magic/#shadowsocks","text":"Shadowsocks \u662f\u4e00\u4e2a\u5b89\u5168\u7684 socks5 \u4ee3\u7406\uff0c\u652f\u6301\u591a\u79cd\u5e73\u53f0\u3002","title":"Shadowsocks"},{"location":"misc/magic/#windows","text":"\u4e0b\u8f7d\u5730\u5740\uff1a shadowsocks-win | Outline Windows","title":"Windows"},{"location":"misc/magic/#mac-os-x","text":"\u4e0b\u8f7d\u5730\u5740\uff1a ShadowsocksX-NG | Outline macOS","title":"Mac OS X"},{"location":"misc/magic/#linux","text":"\u81ea\u52a8\u5b89\u88c5\u811a\u672c\uff1a lrinQVQ/script","title":"Linux"},{"location":"misc/magic/#ssr","text":"ssr \u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fdd\u53cd\u4e86 GPL \u534f\u8bae \uff0cGPL \u8981\u6c42\u518d\u5206\u53d1\u65f6\u5e94\u5f00\u653e\u6e90\u4ee3\u7801\uff0c\u800c ssr \u7684\u7ef4\u62a4\u8005\u5e76\u6ca1\u6709\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5408\u683c\u7684 OIer\uff0c \u9075\u5b88\u5f00\u6e90\u534f\u8bae \u662f\u6700\u8d77\u7801\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e76\u4e0d\u63d0\u5021\u4f7f\u7528 ssr\u3002 \u5f15\u7528 clowwindy \u7684\u4e00\u6bb5\u8457\u540d\u7684 \u8bc4\u8bba \u4f5c\u4e3a\u7ed3\u8bed\u3002","title":"\u4e3a\u4ec0\u4e48\u4e0d\u63a8\u8350\u4f7f\u7528 ssr \uff1f"},{"location":"misc/magic/#_1","text":"\uff08\u672c\u6bb5\u6587\u5b57\u8f6c\u8f7d\u81ea\u539f netsh.org\uff09 \u7f51\u7edc\u5ba1\u67e5\u5728\u5404\u4e2a\u56fd\u5bb6\u90fd\u666e\u904d\u5b58\u5728\u7740\uff0c\u5b83\u5e76\u4e0d\u4ec5\u5b58\u5728\u4e8e\u4e2d\u56fd\u3002\u5728\u5168\u7403\u7684\u5c40\u52bf\u5bf9\u4e2d\u56fd\u90fd\u4e0d\u5229\u7684\u5f53\u4e0b\uff0c\u5f53\u5c40\u4f1a\u8fc7\u6ee4\u6389\u5f71\u54cd\u3001\u5371\u5bb3\u5230\u4e2d\u56fd\u957f\u8fdc\u53d1\u5c55\u7684\u4fe1\u606f\uff0c\u6b64\u65f6\u56fd\u5bb6\u5b89\u5168\u7684\u610f\u4e49\u66f4\u52a0\u91cd\u5927\u3002 \u4e92\u8054\u7f51\u4e0a\u5b58\u5728\u7740\u5927\u91cf\u4e0d\u73b0\u5b9e\u7684\u3001\u4e0d\u5ba2\u89c2\u7684\uff0c\u751a\u81f3\u81ea\u76f8\u77db\u76fe\u7684\u62b9\u9ed1\u5f53\u5c40\u653f\u5e9c\u8a00\u8bba\uff0c\u5b83\u4eec\u80cc\u540e\u4e00\u822c\u6709\u897f\u65b9\u653f\u5e9c\u6216\u975e\u653f\u5e9c\u7ec4\u7ec7\u8d44\u91d1\u652f\u6301\u3002\u8fd9\u4e9b\u5a92\u4f53\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e00\u4e9b\u6e2f\u5a92\u3001\u5883\u5916\u7f51\u7ad9\u3002 \u6211\u4eec\u5e0c\u671b\u60a8\u80fd\u5728\u9047\u5230\u6b64\u7c7b\u8a00\u8bba\u548c\u89c1\u89e3\u65f6\uff0c\u4e0d\u8981\u4e0d\u52a0\u601d\u8003\u5730\u3001\u60c5\u7eea\u4e00\u5ea6\u88ab\u717d\u52a8\u800c\u4e0d\u80fd\u514b\u5236\u5730\u3001\u76f2\u76ee\u5730\u76f8\u4fe1\u8fd9\u4e9b\u7247\u9762\u6216\u8005\u6b6a\u66f2\u4e8b\u5b9e\u7684\u4e1c\u897f\uff0c\u800c\u662f\u8981\u4e8b\u5b9e\u6c42\u662f\u5730\u601d\u8003\uff0c\u8981\u6446\u8131\u60c5\u7eea\u7ed1\u67b6\u7684\u602a\u8bde\u601d\u7ef4\u53bb\u7406\u89e3\u3002 \u6211\u4eec\u9700\u8981\u4e86\u89e3\u5230\uff0c\u4e2d\u56fd\u7684\u53d1\u5c55\u603b\u57fa\u8c03\u662f \u201c\u7a33\u4e2d\u6c42\u8fdb\u201d\uff0c\u4e2d\u56fd\u793e\u4f1a\u7684\u6700\u6838\u5fc3\u95ee\u9898\u5c31\u662f\u7a33\u5b9a\u3002\u5931\u53bb\u7a33\u5b9a\u7684\u4e2d\u56fd\u5c06\u4f1a\u662f\u4e00\u76d8\u6563\u6c99\uff0c\u9762\u4e34\u5206\u88c2\u548c\u80a2\u89e3\u7684\u5371\u9669\u3002\u6211\u4eec\u5e0c\u671b\u60a8\u4e86\u89e3\u5f53\u4eca\u4e2d\u56fd\u53d1\u5c55\u7684\u6839\u672c\u4fdd\u8bc1\u662f\u4ec0\u4e48\uff0c\u53d1\u5c55\u7684\u8fc7\u7a0b\u4e2d\u54ea\u90e8\u5206\u662f\u4e3b\u65cb\u5f8b\uff0c\u54ea\u4e9b\u662f\u566a\u97f3\uff1b\u54ea\u4e9b\u662f\u8fdb\u53d6\u7684\uff0c\u54ea\u4e9b\u662f\u4f1a\u5f00\u5386\u53f2\u5012\u8f66\u7684\u3002\u6211\u4eec\u9700\u8981\u7ef4\u65b0\uff0c\u800c\u4e0d\u662f\u9769\u547d\u3002 \u6211\u4eec\u5e94\u8be5\u6e05\u9192\u548c\u5168\u9762\u5730\u8ba4\u8bc6\u95ee\u9898\uff0c\u504f\u4fe1\u897f\u65b9\u5a92\u4f53\u7684\u8a00\u8bba\u3001\u7f3a\u4e4f\u5bf9\u56fd\u5bb6\u7684\u4fe1\u4efb\u662f\u4e0d\u53ef\u53d6\u7684\u3002\u60a8\u7684\u6570\u636e\u5b89\u5168\u548c\u9690\u79c1\u5bf9\u60a8\u5c24\u4e3a\u91cd\u8981\u3002\u82e5\u8fd9\u4e9b\u4fe1\u606f\u4e0d\u5e94\u5f53\u88ab\u897f\u65b9\u638c\u63e1\u65f6\uff0c\u5b83\u5bf9\u56fd\u5bb6\u548c\u6c11\u65cf\u7684\u547d\u8fd0\u66f4\u4e3a\u91cd\u8981\u3002\u51fa\u4e8e\u6b64\u539f\u56e0\uff0c\u5f53\u5c40\u53ef\u80fd\u4f1a\u9650\u5236\u60a8\u7684\u884c\u4e3a\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e5f\u65e0\u6cd5\u5e72\u9884\u5f53\u5c40\u7684\u4efb\u4f55\u653f\u7b56\u548c\u51b3\u5b9a\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u5e0c\u671b\u60a8\u5728\u4f7f\u7528\u6b64\u670d\u52a1\u65f6\uff0c\u4e0d\u8981\u76f2\u76ee\u5730\u653b\u51fb\u5f53\u5c40\u7684\u505a\u6cd5\u3002 I believe you guys will make great stuff with Network Extensions.","title":"\u5173\u4e8e\u4e2d\u56fd\u7684\u4e92\u8054\u7f51"},{"location":"misc/matrix-tree/","text":"Kirchhoff \u77e9\u9635\u6811\u5b9a\u7406\uff08\u7b80\u79f0\u77e9\u9635\u6811\u5b9a\u7406\uff09\u89e3\u51b3\u4e86\u4e00\u5f20\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570\u8ba1\u6570\u95ee\u9898\u3002 \u672c\u7bc7\u8bb0\u53f7\u58f0\u660e \u00b6 \u672c\u7bc7\u4e2d\u7684\u56fe\uff0c\u65e0\u8bba\u65e0\u5411\u8fd8\u662f\u6709\u5411\uff0c\u90fd\u5141\u8bb8\u91cd\u8fb9\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u81ea\u73af\u3002 \u65e0\u5411\u56fe\u60c5\u51b5 \u00b6 \u8bbe G G \u662f\u4e00\u4e2a\u6709 n n \u4e2a\u9876\u70b9\u7684\u65e0\u5411\u56fe\u3002\u5b9a\u4e49\u5ea6\u6570\u77e9\u9635 D(G) D(G) \u4e3a\uff1a _{ii}(G) = \\mathrm{deg}(i), D_{ij} = 0, i\\neq j _{ii}(G) = \\mathrm{deg}(i), D_{ij} = 0, i\\neq j \u8bbe \\#e(i,j) \\#e(i,j) \u4e3a\u70b9 i i \u4e0e\u70b9 j j \u76f8\u8fde\u7684\u8fb9\u6570\uff0c\u5e76\u5b9a\u4e49\u90bb\u63a5\u77e9\u9635 A A \u4e3a\uff1a A_{ij}(G)=\\#e(i,j), i\\neq j A_{ij}(G)=\\#e(i,j), i\\neq j \u5b9a\u4e49 Laplace \u77e9\u9635\uff08\u4ea6\u79f0 Kirchhoff \u77e9\u9635\uff09 L L \u4e3a\uff1a L(G) = D(G) - A(G) L(G) = D(G) - A(G) \u8bb0\u56fe G G \u7684\u6240\u6709\u751f\u6210\u6811\u4e2a\u6570\u4e3a t(G) t(G) \u3002 \u6709\u5411\u56fe\u60c5\u51b5 \u00b6 \u8bbe G G \u662f\u4e00\u4e2a\u6709 n n \u4e2a\u9876\u70b9\u7684\u6709\u5411\u56fe\u3002\u5b9a\u4e49\u51fa\u5ea6\u77e9\u9635 D^{out}(G) D^{out}(G) \u4e3a\uff1a D^{out}_{ii}(G) = \\mathrm{deg^{out}}(i), D^{out}_{ij} = 0, i\\neq j D^{out}_{ii}(G) = \\mathrm{deg^{out}}(i), D^{out}_{ij} = 0, i\\neq j \u7c7b\u4f3c\u5730\u5b9a\u7406\u5165\u5ea6\u77e9\u9635 D^{in}(G) D^{in}(G) \u8bbe \\#e(i,j) \\#e(i,j) \u4e3a\u70b9 i i \u6307\u5411\u70b9 j j \u7684\u6709\u5411\u8fb9\u6570\uff0c\u5e76\u5b9a\u4e49\u90bb\u63a5\u77e9\u9635 A A \u4e3a\uff1a A_{ij}(G)=\\#e(i,j), i\\neq j A_{ij}(G)=\\#e(i,j), i\\neq j \u5b9a\u4e49\u51fa\u5ea6 Laplace \u77e9\u9635 L^{out} L^{out} \u4e3a\uff1a L^{out}(G) = D^{out}(G) - A(G) L^{out}(G) = D^{out}(G) - A(G) \u7c7b\u4f3c\u5730\u5b9a\u4e49\u5165\u5ea6 Laplace \u77e9\u9635 L^{in} L^{in} \u3002 \u8bb0\u56fe G G \u7684\u4ee5 r r \u4e3a\u6839\u7684\u6240\u6709\u6839\u5411\u6811\u5f62\u56fe\u4e2a\u6570\u4e3a t^{root}(G,r) t^{root}(G,r) \u3002\u6240\u8c13\u6839\u5411\u6811\u5f62\u56fe\uff0c\u662f\u8bf4\u8fd9\u5f20\u56fe\u7684\u57fa\u56fe\u662f\u4e00\u68f5\u6811\uff0c\u6240\u6709\u7684\u8fb9\u5168\u90e8\u6307\u5411\u7236\u4eb2\u3002 \u8bb0\u56fe G G \u7684\u4ee5 r r \u4e3a\u6839\u7684\u6240\u6709\u53f6\u5411\u6811\u5f62\u56fe\u4e2a\u6570\u4e3a t^{leaf}(G,r) t^{leaf}(G,r) \u3002\u6240\u8c13\u53f6\u5411\u6811\u5f62\u56fe\uff0c\u662f\u8bf4\u8fd9\u5f20\u56fe\u7684\u57fa\u56fe\u662f\u4e00\u68f5\u6811\uff0c\u6240\u6709\u7684\u8fb9\u5168\u90e8\u6307\u5411\u513f\u5b50\u3002 \u5b9a\u7406\u53d9\u8ff0 \u00b6 \u77e9\u9635\u6811\u5b9a\u7406\u5177\u6709\u591a\u79cd\u5f62\u5f0f\u3002\u5176\u4e2d\u7528\u5f97\u8f83\u591a\u7684\u662f\u5b9a\u7406 1\u3001\u5b9a\u7406 3 \u4e0e\u5b9a\u7406 4\u3002 \u5b9a\u7406 1 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u65e0\u5411\u56fe\u884c\u5217\u5f0f\u5f62\u5f0f) \u5bf9\u4e8e\u4efb\u610f\u7684 i i \uff0c\u90fd\u6709 t(G) = \\det L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} t(G) = \\det L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} \u5176\u4e2d\u8bb0\u53f7 L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} \u8868\u793a\u77e9\u9635 L(G) L(G) \u7684\u7b2c 1,\\cdots,i-1,i+1,\\cdots,n 1,\\cdots,i-1,i+1,\\cdots,n \u884c\u4e0e\u7b2c 1,\\cdots,i-1,i+1,\\cdots,n 1,\\cdots,i-1,i+1,\\cdots,n \u5217\u6784\u6210\u7684\u5b50\u77e9\u9635\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65e0\u5411\u56fe\u7684 Laplace \u77e9\u9635\u5177\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff0c\u5b83\u7684\u6240\u6709 n-1 n-1 \u9636\u4e3b\u5b50\u5f0f\u90fd\u76f8\u7b49\u3002 \u5b9a\u7406 2 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u65e0\u5411\u56fe\u7279\u5f81\u503c\u5f62\u5f0f) \u8bbe \\lambda_1, \\lambda_2, \\cdots, \\lambda_{n-1} \\lambda_1, \\lambda_2, \\cdots, \\lambda_{n-1} \u4e3a L(G) L(G) \u7684 n - 1 n - 1 \u4e2a\u975e\u96f6\u7279\u5f81\u503c\uff0c\u90a3\u4e48\u6709 t(G) = \\frac{1}{n}\\lambda_1\\lambda_2\\cdots\\lambda_{n-1} t(G) = \\frac{1}{n}\\lambda_1\\lambda_2\\cdots\\lambda_{n-1} \u5b9a\u7406 3 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u6709\u5411\u56fe\u6839\u5411\u5f62\u5f0f) \u5bf9\u4e8e\u4efb\u610f\u7684 k k \uff0c\u90fd\u6709 t^{root}(G,k) = \\det L^{out}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} t^{root}(G,k) = \\det L^{out}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} \u56e0\u6b64\u5982\u679c\u8981\u7edf\u8ba1\u4e00\u5f20\u56fe\u6240\u6709\u7684\u6839\u5411\u6811\u5f62\u56fe\uff0c\u53ea\u8981\u679a\u4e3e\u6240\u6709\u7684\u6839 k k \u5e76\u5bf9 t^{root}(G,k) t^{root}(G,k) \u6c42\u548c\u5373\u53ef\u3002 \u5b9a\u7406 4 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u6709\u5411\u56fe\u53f6\u5411\u5f62\u5f0f) \u5bf9\u4e8e\u4efb\u610f\u7684 k k \uff0c\u90fd\u6709 t^{leaf}(G,k) = \\det L^{in}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} t^{leaf}(G,k) = \\det L^{in}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} \u56e0\u6b64\u5982\u679c\u8981\u7edf\u8ba1\u4e00\u5f20\u56fe\u6240\u6709\u7684\u53f6\u5411\u6811\u5f62\u56fe\uff0c\u53ea\u8981\u679a\u4e3e\u6240\u6709\u7684\u6839 k k \u5e76\u5bf9 t^{leaf}(G,k) t^{leaf}(G,k) \u6c42\u548c\u5373\u53ef\u3002 BEST \u5b9a\u7406 \u00b6 \u5b9a\u7406 5 (BEST \u5b9a\u7406) \u8bbe G G \u662f\u6709\u5411\u6b27\u62c9\u56fe\uff0c\u90a3\u4e48 G G \u7684\u4e0d\u540c\u6b27\u62c9\u56de\u8def\u603b\u6570 ec(G) ec(G) \u662f ec(G) = t^{root}(G,k)\\prod_{v\\in V}(\\deg (v) - 1)! ec(G) = t^{root}(G,k)\\prod_{v\\in V}(\\deg (v) - 1)! \u6ce8\u610f\uff0c\u5bf9\u6b27\u62c9\u56fe G G \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9 k, k' k, k' \uff0c\u90fd\u6709 t^{root}(G,k)=t^{root}(G,k') t^{root}(G,k)=t^{root}(G,k') \uff0c\u4e14\u6b27\u62c9\u56fe G G \u7684\u6240\u6709\u8282\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u76f8\u7b49\u3002 \u4f8b\u9898 \u00b6 \u4f8b\u9898 1 HEOI2015: \u5c0f Z \u7684\u623f\u95f4\uff0c\u8bf7\u53c2\u8003 https://www.lydsy.com/JudgeOnline/problem.php?id=4031 \u89e3 \u77e9\u9635\u6811\u5b9a\u7406\u7684\u88f8\u9898\u3002\u5c06\u6bcf\u4e2a\u7a7a\u623f\u95f4\u770b\u4f5c\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6839\u636e\u8f93\u5165\u7684\u4fe1\u606f\u5efa\u56fe\uff0c\u5f97\u5230 Laplace \u77e9\u9635\u540e\uff0c\u4efb\u610f\u5220\u6389 L \u7684\u7b2c i i \u884c\u7b2c i i \u5217\uff0c\u6c42\u8fd9\u4e2a\u5b50\u5f0f\u7684\u884c\u5217\u5f0f\u5373\u53ef\u3002\u6c42\u884c\u5217\u5f0f\u7684\u65b9\u6cd5\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u6210\u4e0a\u4e09\u89d2\u9635\u7136\u540e\u7b97\u5bf9\u89d2\u7ebf\u79ef\u3002\u53e6\u5916\u672c\u9898\u9700\u8981\u5728\u6a21 k k \u7684\u6574\u6570\u5b50\u73af \\mathbb{Z}_k \\mathbb{Z}_k \u4e0a\u8fdb\u884c\u9ad8\u65af\u6d88\u5143\uff0c\u91c7\u7528\u8f97\u8f6c\u76f8\u9664\u6cd5\u5373\u53ef\u3002 \u4f8b\u9898 2 FJOI2007: \u8f6e\u72b6\u75c5\u6bd2\u3002\u8bf7\u53c2\u8003 https://www.lydsy.com/JudgeOnline/problem.php?id=1002 \u89e3 \u672c\u9898\u7684\u89e3\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u7528\u77e9\u9635\u6811\u5b9a\u7406\u662f\u6700\u76f4\u63a5\u7684\u89e3\u6cd5\u3002\u5f53\u8f93\u5165\u4e3a n n \u65f6\uff0c\u5bb9\u6613\u5199\u51fa\u5176 n+1 n+1 \u9636\u7684 Laplace \u77e9\u9635\u4e3a\uff1a L_n = \\begin{bmatrix} n& -1& -1& -1& \\cdots& -1& -1\\\\ -1& 3& -1& 0& \\cdots& 0& -1\\\\ -1& -1& 3& -1& \\cdots& 0& 0\\\\ -1& 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ -1& 0& 0& 0& \\cdots& 3& -1\\\\ -1& -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n+1} L_n = \\begin{bmatrix} n& -1& -1& -1& \\cdots& -1& -1\\\\ -1& 3& -1& 0& \\cdots& 0& -1\\\\ -1& -1& 3& -1& \\cdots& 0& 0\\\\ -1& 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ -1& 0& 0& 0& \\cdots& 3& -1\\\\ -1& -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n+1} \u6c42\u51fa\u5b83\u7684 n n \u9636\u5b50\u5f0f\u7684\u884c\u5217\u5f0f\u5373\u53ef\uff0c\u5269\u4e0b\u7684\u53ea\u6709\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u4e86\u3002 \u4f8b\u9898 2+ \u5c06\u4f8b\u9898 2 \u7684\u6570\u636e\u52a0\u5f3a\uff0c\u8981\u6c42 n\\leq 100000 n\\leq 100000 \uff0c\u4f46\u662f\u7b54\u6848\u5bf9 1000007 \u53d6\u6a21\u3002\uff08\u672c\u9898\u6c42\u89e3\u9700\u8981\u4e00\u4e9b\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\uff09 \u89e3 \u63a8\u5bfc\u9012\u63a8\u5f0f\u540e\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u6c42\u5f97\u3002 \u63a8\u5bfc\u9012\u63a8\u5f0f\u7684\u8fc7\u7a0b\u3002\u8b66\u544a\uff1a\u8fc7\u7a0b\u5197\u6742 \u6ce8\u610f\u5230 L_n L_n \u5220\u6389\u7b2c 1 \u884c\u7b2c 1 \u5217\u4ee5\u540e\u5f97\u5230\u7684\u77e9\u9635\u5f88\u6709\u89c4\u5f8b\uff0c\u56e0\u6b64\u5176\u5b9e\u5c31\u662f\u5728\u6c42\u77e9\u9635 M_n = \\begin{bmatrix} 3& -1& 0& \\cdots& 0& -1\\\\ -1& 3& -1& \\cdots& 0& 0\\\\ 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& 0& \\cdots& 3& -1\\\\ -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n} M_n = \\begin{bmatrix} 3& -1& 0& \\cdots& 0& -1\\\\ -1& 3& -1& \\cdots& 0& 0\\\\ 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& 0& \\cdots& 3& -1\\\\ -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n} \u7684\u884c\u5217\u5f0f\u3002\u5bf9 M_n M_n \u7684\u884c\u5217\u5f0f\u6309\u7b2c\u4e00\u5217\u5c55\u5f00\uff0c\u5f97\u5230 \\det M_n = 3\\det \\begin{bmatrix} 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + (-1)^n \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ \\end{bmatrix}_{n-1} \\det M_n = 3\\det \\begin{bmatrix} 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + (-1)^n \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ \\end{bmatrix}_{n-1} \u4e0a\u8ff0\u4e09\u4e2a\u77e9\u9635\u7684\u884c\u5217\u5f0f\u8bb0\u4e3a d_{n-1}, a_{n-1}, b_{n-1} d_{n-1}, a_{n-1}, b_{n-1} \u3002\u6ce8\u610f\u5230 d_n d_n \u662f\u4e09\u5bf9\u89d2\u884c\u5217\u5f0f\uff0c\u91c7\u7528\u7c7b\u4f3c\u7684\u5c55\u5f00\u7684\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230 d_n d_n \u5177\u6709\u9012\u63a8\u516c\u5f0f d_n=3d_{n-1}-d_{n-2} d_n=3d_{n-1}-d_{n-2} \u3002\u7c7b\u4f3c\u5730\uff0c\u91c7\u7528\u5c55\u5f00\u7684\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230 a_{n-1}=-d_{n-2}-1 a_{n-1}=-d_{n-2}-1 \uff0c\u4ee5\u53ca (-1)^n b_{n-1}=-d_{n-2}-1 (-1)^n b_{n-1}=-d_{n-2}-1 \u3002\u5c06\u8fd9\u4e9b\u9012\u63a8\u516c\u5f0f\u4ee3\u5165\u4e0a\u5f0f\uff0c\u5f97\u5230 \\det M_n = 3d_{n-1}-2d_{n-2}-2 \\det M_n = 3d_{n-1}-2d_{n-2}-2 d_n = 3d_{n-1}-d_{n-2} d_n = 3d_{n-1}-d_{n-2} \u4e8e\u662f\u731c\u6d4b \\det M_n \\det M_n \u4e5f\u662f\u975e\u9f50\u6b21\u7684\u4e8c\u9636\u7ebf\u6027\u9012\u63a8\u3002\u91c7\u7528\u5f85\u5b9a\u7cfb\u6570\u6cd5\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u9012\u63a8\u516c\u5f0f\u4e3a \\det M_n = 3\\det M_{n-1} - \\det M_{n-2} + 2 \\det M_n = 3\\det M_{n-1} - \\det M_{n-2} + 2 \u6539\u5199\u6210 (\\det M_n+2) = 3(\\det M_{n-1}+2) - (\\det M_{n-2} + 2) (\\det M_n+2) = 3(\\det M_{n-1}+2) - (\\det M_{n-2} + 2) \u540e\uff0c\u91c7\u7528\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002 \u4f8b\u9898 3 BZOJ3659: WHICH DREAMED IT \u89e3 \u672c\u9898\u662f BEST \u5b9a\u7406\u7684\u76f4\u63a5\u5e94\u7528\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u9898\u76ee\u89c4\u5b9a \u201c\u4e24\u79cd\u5b8c\u6210\u4efb\u52a1\u7684\u65b9\u5f0f\u7b97\u4f5c\u4e0d\u540c\u5f53\u4e14\u4ec5\u5f53\u4f7f\u7528\u94a5\u5319\u7684\u987a\u5e8f\u4e0d\u540c\u201d\uff0c\u5bf9\u6bcf\u4e2a\u6b27\u62c9\u56de\u8def\uff0c1 \u53f7\u623f\u95f4\u53ef\u4ee5\u6cbf\u7740\u4efb\u610f\u4e00\u6761\u51fa\u8fb9\u51fa\u53d1\uff0c\u4ece\u800c\u7b54\u6848\u8fd8\u8981\u4e58\u4ee5 1 \u53f7\u623f\u95f4\u7684\u51fa\u5ea6\u3002 \u6ce8\u91ca \u00b6 \u6839\u5411\u6811\u5f62\u56fe\u5728\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e3a\u5185\u5411\u6811\u5f62\u56fe\uff0c\u4f46\u56e0\u4e3a\u8ba1\u7b97\u5185\u5411\u6811\u5f62\u56fe\u7528\u7684\u662f\u51fa\u5ea6\uff0c\u4e3a\u4e86\u4e0d\u5f15\u8d77 in \u548c out \u7684\u6df7\u6dc6\uff0c\u6240\u4ee5\u91c7\u7528\u4e86\u6839\u5411\u8fd9\u4e00\u8bf4\u6cd5\u3002","title":"\u77e9\u9635\u6811\u5b9a\u7406"},{"location":"misc/matrix-tree/#_1","text":"\u672c\u7bc7\u4e2d\u7684\u56fe\uff0c\u65e0\u8bba\u65e0\u5411\u8fd8\u662f\u6709\u5411\uff0c\u90fd\u5141\u8bb8\u91cd\u8fb9\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u81ea\u73af\u3002","title":"\u672c\u7bc7\u8bb0\u53f7\u58f0\u660e"},{"location":"misc/matrix-tree/#_2","text":"\u8bbe G G \u662f\u4e00\u4e2a\u6709 n n \u4e2a\u9876\u70b9\u7684\u65e0\u5411\u56fe\u3002\u5b9a\u4e49\u5ea6\u6570\u77e9\u9635 D(G) D(G) \u4e3a\uff1a _{ii}(G) = \\mathrm{deg}(i), D_{ij} = 0, i\\neq j _{ii}(G) = \\mathrm{deg}(i), D_{ij} = 0, i\\neq j \u8bbe \\#e(i,j) \\#e(i,j) \u4e3a\u70b9 i i \u4e0e\u70b9 j j \u76f8\u8fde\u7684\u8fb9\u6570\uff0c\u5e76\u5b9a\u4e49\u90bb\u63a5\u77e9\u9635 A A \u4e3a\uff1a A_{ij}(G)=\\#e(i,j), i\\neq j A_{ij}(G)=\\#e(i,j), i\\neq j \u5b9a\u4e49 Laplace \u77e9\u9635\uff08\u4ea6\u79f0 Kirchhoff \u77e9\u9635\uff09 L L \u4e3a\uff1a L(G) = D(G) - A(G) L(G) = D(G) - A(G) \u8bb0\u56fe G G \u7684\u6240\u6709\u751f\u6210\u6811\u4e2a\u6570\u4e3a t(G) t(G) \u3002","title":"\u65e0\u5411\u56fe\u60c5\u51b5"},{"location":"misc/matrix-tree/#_3","text":"\u8bbe G G \u662f\u4e00\u4e2a\u6709 n n \u4e2a\u9876\u70b9\u7684\u6709\u5411\u56fe\u3002\u5b9a\u4e49\u51fa\u5ea6\u77e9\u9635 D^{out}(G) D^{out}(G) \u4e3a\uff1a D^{out}_{ii}(G) = \\mathrm{deg^{out}}(i), D^{out}_{ij} = 0, i\\neq j D^{out}_{ii}(G) = \\mathrm{deg^{out}}(i), D^{out}_{ij} = 0, i\\neq j \u7c7b\u4f3c\u5730\u5b9a\u7406\u5165\u5ea6\u77e9\u9635 D^{in}(G) D^{in}(G) \u8bbe \\#e(i,j) \\#e(i,j) \u4e3a\u70b9 i i \u6307\u5411\u70b9 j j \u7684\u6709\u5411\u8fb9\u6570\uff0c\u5e76\u5b9a\u4e49\u90bb\u63a5\u77e9\u9635 A A \u4e3a\uff1a A_{ij}(G)=\\#e(i,j), i\\neq j A_{ij}(G)=\\#e(i,j), i\\neq j \u5b9a\u4e49\u51fa\u5ea6 Laplace \u77e9\u9635 L^{out} L^{out} \u4e3a\uff1a L^{out}(G) = D^{out}(G) - A(G) L^{out}(G) = D^{out}(G) - A(G) \u7c7b\u4f3c\u5730\u5b9a\u4e49\u5165\u5ea6 Laplace \u77e9\u9635 L^{in} L^{in} \u3002 \u8bb0\u56fe G G \u7684\u4ee5 r r \u4e3a\u6839\u7684\u6240\u6709\u6839\u5411\u6811\u5f62\u56fe\u4e2a\u6570\u4e3a t^{root}(G,r) t^{root}(G,r) \u3002\u6240\u8c13\u6839\u5411\u6811\u5f62\u56fe\uff0c\u662f\u8bf4\u8fd9\u5f20\u56fe\u7684\u57fa\u56fe\u662f\u4e00\u68f5\u6811\uff0c\u6240\u6709\u7684\u8fb9\u5168\u90e8\u6307\u5411\u7236\u4eb2\u3002 \u8bb0\u56fe G G \u7684\u4ee5 r r \u4e3a\u6839\u7684\u6240\u6709\u53f6\u5411\u6811\u5f62\u56fe\u4e2a\u6570\u4e3a t^{leaf}(G,r) t^{leaf}(G,r) \u3002\u6240\u8c13\u53f6\u5411\u6811\u5f62\u56fe\uff0c\u662f\u8bf4\u8fd9\u5f20\u56fe\u7684\u57fa\u56fe\u662f\u4e00\u68f5\u6811\uff0c\u6240\u6709\u7684\u8fb9\u5168\u90e8\u6307\u5411\u513f\u5b50\u3002","title":"\u6709\u5411\u56fe\u60c5\u51b5"},{"location":"misc/matrix-tree/#_4","text":"\u77e9\u9635\u6811\u5b9a\u7406\u5177\u6709\u591a\u79cd\u5f62\u5f0f\u3002\u5176\u4e2d\u7528\u5f97\u8f83\u591a\u7684\u662f\u5b9a\u7406 1\u3001\u5b9a\u7406 3 \u4e0e\u5b9a\u7406 4\u3002 \u5b9a\u7406 1 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u65e0\u5411\u56fe\u884c\u5217\u5f0f\u5f62\u5f0f) \u5bf9\u4e8e\u4efb\u610f\u7684 i i \uff0c\u90fd\u6709 t(G) = \\det L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} t(G) = \\det L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} \u5176\u4e2d\u8bb0\u53f7 L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} L(G)\\binom{1,2,\\cdots,i-1,i+1,\\cdots,n}{1,2,\\cdots,i-1,i+1,\\cdots,n} \u8868\u793a\u77e9\u9635 L(G) L(G) \u7684\u7b2c 1,\\cdots,i-1,i+1,\\cdots,n 1,\\cdots,i-1,i+1,\\cdots,n \u884c\u4e0e\u7b2c 1,\\cdots,i-1,i+1,\\cdots,n 1,\\cdots,i-1,i+1,\\cdots,n \u5217\u6784\u6210\u7684\u5b50\u77e9\u9635\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65e0\u5411\u56fe\u7684 Laplace \u77e9\u9635\u5177\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff0c\u5b83\u7684\u6240\u6709 n-1 n-1 \u9636\u4e3b\u5b50\u5f0f\u90fd\u76f8\u7b49\u3002 \u5b9a\u7406 2 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u65e0\u5411\u56fe\u7279\u5f81\u503c\u5f62\u5f0f) \u8bbe \\lambda_1, \\lambda_2, \\cdots, \\lambda_{n-1} \\lambda_1, \\lambda_2, \\cdots, \\lambda_{n-1} \u4e3a L(G) L(G) \u7684 n - 1 n - 1 \u4e2a\u975e\u96f6\u7279\u5f81\u503c\uff0c\u90a3\u4e48\u6709 t(G) = \\frac{1}{n}\\lambda_1\\lambda_2\\cdots\\lambda_{n-1} t(G) = \\frac{1}{n}\\lambda_1\\lambda_2\\cdots\\lambda_{n-1} \u5b9a\u7406 3 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u6709\u5411\u56fe\u6839\u5411\u5f62\u5f0f) \u5bf9\u4e8e\u4efb\u610f\u7684 k k \uff0c\u90fd\u6709 t^{root}(G,k) = \\det L^{out}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} t^{root}(G,k) = \\det L^{out}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} \u56e0\u6b64\u5982\u679c\u8981\u7edf\u8ba1\u4e00\u5f20\u56fe\u6240\u6709\u7684\u6839\u5411\u6811\u5f62\u56fe\uff0c\u53ea\u8981\u679a\u4e3e\u6240\u6709\u7684\u6839 k k \u5e76\u5bf9 t^{root}(G,k) t^{root}(G,k) \u6c42\u548c\u5373\u53ef\u3002 \u5b9a\u7406 4 (\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u6709\u5411\u56fe\u53f6\u5411\u5f62\u5f0f) \u5bf9\u4e8e\u4efb\u610f\u7684 k k \uff0c\u90fd\u6709 t^{leaf}(G,k) = \\det L^{in}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} t^{leaf}(G,k) = \\det L^{in}(G)\\binom{1,2,\\cdots,k-1,k+1,\\cdots,n}{1,2,\\cdots,k-1,k+1,\\cdots,n} \u56e0\u6b64\u5982\u679c\u8981\u7edf\u8ba1\u4e00\u5f20\u56fe\u6240\u6709\u7684\u53f6\u5411\u6811\u5f62\u56fe\uff0c\u53ea\u8981\u679a\u4e3e\u6240\u6709\u7684\u6839 k k \u5e76\u5bf9 t^{leaf}(G,k) t^{leaf}(G,k) \u6c42\u548c\u5373\u53ef\u3002","title":"\u5b9a\u7406\u53d9\u8ff0"},{"location":"misc/matrix-tree/#best","text":"\u5b9a\u7406 5 (BEST \u5b9a\u7406) \u8bbe G G \u662f\u6709\u5411\u6b27\u62c9\u56fe\uff0c\u90a3\u4e48 G G \u7684\u4e0d\u540c\u6b27\u62c9\u56de\u8def\u603b\u6570 ec(G) ec(G) \u662f ec(G) = t^{root}(G,k)\\prod_{v\\in V}(\\deg (v) - 1)! ec(G) = t^{root}(G,k)\\prod_{v\\in V}(\\deg (v) - 1)! \u6ce8\u610f\uff0c\u5bf9\u6b27\u62c9\u56fe G G \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9 k, k' k, k' \uff0c\u90fd\u6709 t^{root}(G,k)=t^{root}(G,k') t^{root}(G,k)=t^{root}(G,k') \uff0c\u4e14\u6b27\u62c9\u56fe G G \u7684\u6240\u6709\u8282\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u76f8\u7b49\u3002","title":"BEST \u5b9a\u7406"},{"location":"misc/matrix-tree/#_5","text":"\u4f8b\u9898 1 HEOI2015: \u5c0f Z \u7684\u623f\u95f4\uff0c\u8bf7\u53c2\u8003 https://www.lydsy.com/JudgeOnline/problem.php?id=4031 \u89e3 \u77e9\u9635\u6811\u5b9a\u7406\u7684\u88f8\u9898\u3002\u5c06\u6bcf\u4e2a\u7a7a\u623f\u95f4\u770b\u4f5c\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6839\u636e\u8f93\u5165\u7684\u4fe1\u606f\u5efa\u56fe\uff0c\u5f97\u5230 Laplace \u77e9\u9635\u540e\uff0c\u4efb\u610f\u5220\u6389 L \u7684\u7b2c i i \u884c\u7b2c i i \u5217\uff0c\u6c42\u8fd9\u4e2a\u5b50\u5f0f\u7684\u884c\u5217\u5f0f\u5373\u53ef\u3002\u6c42\u884c\u5217\u5f0f\u7684\u65b9\u6cd5\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u6210\u4e0a\u4e09\u89d2\u9635\u7136\u540e\u7b97\u5bf9\u89d2\u7ebf\u79ef\u3002\u53e6\u5916\u672c\u9898\u9700\u8981\u5728\u6a21 k k \u7684\u6574\u6570\u5b50\u73af \\mathbb{Z}_k \\mathbb{Z}_k \u4e0a\u8fdb\u884c\u9ad8\u65af\u6d88\u5143\uff0c\u91c7\u7528\u8f97\u8f6c\u76f8\u9664\u6cd5\u5373\u53ef\u3002 \u4f8b\u9898 2 FJOI2007: \u8f6e\u72b6\u75c5\u6bd2\u3002\u8bf7\u53c2\u8003 https://www.lydsy.com/JudgeOnline/problem.php?id=1002 \u89e3 \u672c\u9898\u7684\u89e3\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u7528\u77e9\u9635\u6811\u5b9a\u7406\u662f\u6700\u76f4\u63a5\u7684\u89e3\u6cd5\u3002\u5f53\u8f93\u5165\u4e3a n n \u65f6\uff0c\u5bb9\u6613\u5199\u51fa\u5176 n+1 n+1 \u9636\u7684 Laplace \u77e9\u9635\u4e3a\uff1a L_n = \\begin{bmatrix} n& -1& -1& -1& \\cdots& -1& -1\\\\ -1& 3& -1& 0& \\cdots& 0& -1\\\\ -1& -1& 3& -1& \\cdots& 0& 0\\\\ -1& 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ -1& 0& 0& 0& \\cdots& 3& -1\\\\ -1& -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n+1} L_n = \\begin{bmatrix} n& -1& -1& -1& \\cdots& -1& -1\\\\ -1& 3& -1& 0& \\cdots& 0& -1\\\\ -1& -1& 3& -1& \\cdots& 0& 0\\\\ -1& 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ -1& 0& 0& 0& \\cdots& 3& -1\\\\ -1& -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n+1} \u6c42\u51fa\u5b83\u7684 n n \u9636\u5b50\u5f0f\u7684\u884c\u5217\u5f0f\u5373\u53ef\uff0c\u5269\u4e0b\u7684\u53ea\u6709\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u4e86\u3002 \u4f8b\u9898 2+ \u5c06\u4f8b\u9898 2 \u7684\u6570\u636e\u52a0\u5f3a\uff0c\u8981\u6c42 n\\leq 100000 n\\leq 100000 \uff0c\u4f46\u662f\u7b54\u6848\u5bf9 1000007 \u53d6\u6a21\u3002\uff08\u672c\u9898\u6c42\u89e3\u9700\u8981\u4e00\u4e9b\u7ebf\u6027\u4ee3\u6570\u77e5\u8bc6\uff09 \u89e3 \u63a8\u5bfc\u9012\u63a8\u5f0f\u540e\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u6c42\u5f97\u3002 \u63a8\u5bfc\u9012\u63a8\u5f0f\u7684\u8fc7\u7a0b\u3002\u8b66\u544a\uff1a\u8fc7\u7a0b\u5197\u6742 \u6ce8\u610f\u5230 L_n L_n \u5220\u6389\u7b2c 1 \u884c\u7b2c 1 \u5217\u4ee5\u540e\u5f97\u5230\u7684\u77e9\u9635\u5f88\u6709\u89c4\u5f8b\uff0c\u56e0\u6b64\u5176\u5b9e\u5c31\u662f\u5728\u6c42\u77e9\u9635 M_n = \\begin{bmatrix} 3& -1& 0& \\cdots& 0& -1\\\\ -1& 3& -1& \\cdots& 0& 0\\\\ 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& 0& \\cdots& 3& -1\\\\ -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n} M_n = \\begin{bmatrix} 3& -1& 0& \\cdots& 0& -1\\\\ -1& 3& -1& \\cdots& 0& 0\\\\ 0& -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& 0& \\cdots& 3& -1\\\\ -1& 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n} \u7684\u884c\u5217\u5f0f\u3002\u5bf9 M_n M_n \u7684\u884c\u5217\u5f0f\u6309\u7b2c\u4e00\u5217\u5c55\u5f00\uff0c\u5f97\u5230 \\det M_n = 3\\det \\begin{bmatrix} 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + (-1)^n \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ \\end{bmatrix}_{n-1} \\det M_n = 3\\det \\begin{bmatrix} 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ 0& 0& \\cdots& -1& 3\\\\ \\end{bmatrix}_{n-1} + (-1)^n \\det\\begin{bmatrix} -1& 0& \\cdots& 0& -1\\\\ 3& -1& \\cdots& 0& 0\\\\ -1& 3& \\cdots& 0& 0\\\\ \\vdots& \\vdots& \\ddots& \\vdots& \\vdots\\\\ 0& 0& \\cdots& 3& -1\\\\ \\end{bmatrix}_{n-1} \u4e0a\u8ff0\u4e09\u4e2a\u77e9\u9635\u7684\u884c\u5217\u5f0f\u8bb0\u4e3a d_{n-1}, a_{n-1}, b_{n-1} d_{n-1}, a_{n-1}, b_{n-1} \u3002\u6ce8\u610f\u5230 d_n d_n \u662f\u4e09\u5bf9\u89d2\u884c\u5217\u5f0f\uff0c\u91c7\u7528\u7c7b\u4f3c\u7684\u5c55\u5f00\u7684\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230 d_n d_n \u5177\u6709\u9012\u63a8\u516c\u5f0f d_n=3d_{n-1}-d_{n-2} d_n=3d_{n-1}-d_{n-2} \u3002\u7c7b\u4f3c\u5730\uff0c\u91c7\u7528\u5c55\u5f00\u7684\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230 a_{n-1}=-d_{n-2}-1 a_{n-1}=-d_{n-2}-1 \uff0c\u4ee5\u53ca (-1)^n b_{n-1}=-d_{n-2}-1 (-1)^n b_{n-1}=-d_{n-2}-1 \u3002\u5c06\u8fd9\u4e9b\u9012\u63a8\u516c\u5f0f\u4ee3\u5165\u4e0a\u5f0f\uff0c\u5f97\u5230 \\det M_n = 3d_{n-1}-2d_{n-2}-2 \\det M_n = 3d_{n-1}-2d_{n-2}-2 d_n = 3d_{n-1}-d_{n-2} d_n = 3d_{n-1}-d_{n-2} \u4e8e\u662f\u731c\u6d4b \\det M_n \\det M_n \u4e5f\u662f\u975e\u9f50\u6b21\u7684\u4e8c\u9636\u7ebf\u6027\u9012\u63a8\u3002\u91c7\u7528\u5f85\u5b9a\u7cfb\u6570\u6cd5\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u9012\u63a8\u516c\u5f0f\u4e3a \\det M_n = 3\\det M_{n-1} - \\det M_{n-2} + 2 \\det M_n = 3\\det M_{n-1} - \\det M_{n-2} + 2 \u6539\u5199\u6210 (\\det M_n+2) = 3(\\det M_{n-1}+2) - (\\det M_{n-2} + 2) (\\det M_n+2) = 3(\\det M_{n-1}+2) - (\\det M_{n-2} + 2) \u540e\uff0c\u91c7\u7528\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002 \u4f8b\u9898 3 BZOJ3659: WHICH DREAMED IT \u89e3 \u672c\u9898\u662f BEST \u5b9a\u7406\u7684\u76f4\u63a5\u5e94\u7528\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u9898\u76ee\u89c4\u5b9a \u201c\u4e24\u79cd\u5b8c\u6210\u4efb\u52a1\u7684\u65b9\u5f0f\u7b97\u4f5c\u4e0d\u540c\u5f53\u4e14\u4ec5\u5f53\u4f7f\u7528\u94a5\u5319\u7684\u987a\u5e8f\u4e0d\u540c\u201d\uff0c\u5bf9\u6bcf\u4e2a\u6b27\u62c9\u56de\u8def\uff0c1 \u53f7\u623f\u95f4\u53ef\u4ee5\u6cbf\u7740\u4efb\u610f\u4e00\u6761\u51fa\u8fb9\u51fa\u53d1\uff0c\u4ece\u800c\u7b54\u6848\u8fd8\u8981\u4e58\u4ee5 1 \u53f7\u623f\u95f4\u7684\u51fa\u5ea6\u3002","title":"\u4f8b\u9898"},{"location":"misc/matrix-tree/#_6","text":"\u6839\u5411\u6811\u5f62\u56fe\u5728\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e3a\u5185\u5411\u6811\u5f62\u56fe\uff0c\u4f46\u56e0\u4e3a\u8ba1\u7b97\u5185\u5411\u6811\u5f62\u56fe\u7528\u7684\u662f\u51fa\u5ea6\uff0c\u4e3a\u4e86\u4e0d\u5f15\u8d77 in \u548c out \u7684\u6df7\u6dc6\uff0c\u6240\u4ee5\u91c7\u7528\u4e86\u6839\u5411\u8fd9\u4e00\u8bf4\u6cd5\u3002","title":"\u6ce8\u91ca"},{"location":"misc/mo-algo/","text":"\u666e\u901a\u83ab\u961f\u7b97\u6cd5 \u00b6 \uff08\u4e3b\u8981\u53c2\u8003\u4e86 https://blog.sengxian.com/algorithms/mo-s-algorithm \u3002\uff09 \u6982\u8ff0 \u00b6 \u83ab\u961f\u7b97\u6cd5\u662f\u7531\u83ab\u6d9b\u63d0\u51fa\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e00\u7c7b\u79bb\u7ebf\u533a\u95f4\u8be2\u95ee\u95ee\u9898\uff0c\u9002\u7528\u6027\u6781\u4e3a\u5e7f\u6cdb\u3002\u540c\u65f6\u5c06\u5176\u52a0\u4ee5\u6269\u5c55\uff0c\u4fbf\u80fd\u8f7b\u677e\u5904\u7406\u6811\u4e0a\u8def\u5f84\u8be2\u95ee\u4ee5\u53ca\u652f\u6301\u4fee\u6539\u64cd\u4f5c\u3002 \u5f62\u5f0f \u00b6 \u5047\u8bbe n=m n=m \uff0c\u90a3\u4e48\u5bf9\u4e8e\u5e8f\u5217\u4e0a\u7684\u533a\u95f4\u8be2\u95ee\u95ee\u9898\uff0c\u5982\u679c\u4ece [l,r] [l,r] \u7684\u7b54\u6848\u80fd\u591f O(1) O(1) \u6269\u5c55\u5230 [l-1,r],[l+1,r],[l,r+1],[l,r-1] [l-1,r],[l+1,r],[l,r+1],[l,r-1] \uff08\u5373\u4e0e [l,r] [l,r] \u76f8\u90bb\u7684\u533a\u95f4\uff09\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 O(n\\sqrt{n}) O(n\\sqrt{n}) \u7684\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u6240\u6709\u8be2\u95ee\u7684\u7b54\u6848\u3002 \u5b9e\u73b0 \u00b6 \u79bb\u7ebf\u540e\u6392\u5e8f\uff0c\u987a\u5e8f\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\uff0c\u66b4\u529b\u4ece\u4e0a\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u533a\u95f4\u7b54\u6848\uff08\u4e00\u6b65\u4e00\u6b65\u79fb\u52a8\u5373\u53ef\uff09\u3002 \u6392\u5e8f\u65b9\u6cd5 \u00b6 \u5bf9\u4e8e\u533a\u95f4 [l,r] [l,r] , \u4ee5 l l \u6240\u5728\u5757\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c r r \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002 \u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 inline void move ( int pos , int sign ) { // update nowAns } void solve () { BLOCK_SIZE = int ( ceil ( pow ( n , 0.5 ))); sort ( querys , querys + m ); for ( int i = 0 ; i < m ; ++ i ) { const query & q = querys [ i ]; while ( l > q . l ) move ( -- l , 1 ); while ( r < q . r ) move ( r ++ , 1 ); while ( l < q . l ) move ( l ++ , - 1 ); while ( r > q . r ) move ( -- r , - 1 ); ans [ q . id ] = nowAns ; } } \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u4ee5\u4e0b\u7684\u60c5\u51b5\u5728 n n \u548c m m \u540c\u9636\u7684\u524d\u63d0\u4e0b\u8ba8\u8bba\u3002 \u9996\u5148\u662f\u5206\u5757\u8fd9\u4e00\u6b65\uff0c\u8fd9\u4e00\u6b65\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6beb\u65e0\u7591\u95ee\u5730\u662f O(\\sqrt{n}\\cdot\\sqrt{n}\\log\\sqrt{n}+n\\log n)=O(n\\log n) O(\\sqrt{n}\\cdot\\sqrt{n}\\log\\sqrt{n}+n\\log n)=O(n\\log n) ; \u63a5\u7740\u5c31\u5230\u4e86\u83ab\u961f\u7b97\u6cd5\u7684\u7cbe\u9ad3\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u901a\u4fd7\u6613\u61c2\u7684\u521d\u4e2d\u65b9\u6cd5\u6765\u8bc1\u660e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n\\sqrt{n}) O(n\\sqrt{n}) \uff1b \u8bc1\uff1a\u4ee4\u6bcf\u4e00\u5757\u4e2d L L \u7684\u6700\u5927\u503c\u4e3a \\max_1,\\max_2,\\max_3, \\cdots , \\max_{\\lceil\\sqrt{n}\\rceil} \\max_1,\\max_2,\\max_3, \\cdots , \\max_{\\lceil\\sqrt{n}\\rceil} \u3002 \u7531\u7b2c\u4e00\u6b21\u6392\u5e8f\u53ef\u77e5\uff0c \\max_1 \\le \\max_2 \\le \\cdots \\le \\max_{\\lceil\\sqrt{n}\\rceil} \\max_1 \\le \\max_2 \\le \\cdots \\le \\max_{\\lceil\\sqrt{n}\\rceil} \u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u66b4\u529b\u6c42\u51fa\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 \u8003\u8651\u6700\u574f\u7684\u60c5\u51b5\uff0c\u5728\u6bcf\u4e00\u5757\u4e2d\uff0c R R \u7684\u6700\u5927\u503c\u5747\u4e3a n n \uff0c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u5747\u8981\u5c06 L L \u7531 \\max_{i - 1} \\max_{i - 1} \u4fee\u6539\u81f3 \\max_i \\max_i \u6216\u7531 \\max_i \\max_i \u4fee\u6539\u81f3 \\max_{i - 1} \\max_{i - 1} \u3002 \u8003\u8651 R R \uff1a\u56e0\u4e3a R R \u5728\u5757\u4e2d\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4fee\u6539\u5b8c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u5bf9\u4e8e\u6240\u6709\u5757\u5c31\u662f O(n\\sqrt{n}) O(n\\sqrt{n}) \u3002 \u91cd\u70b9\u5206\u6790 L L \uff1a\u56e0\u4e3a\u6bcf\u4e00\u6b21\u6539\u53d8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(\\max_i-\\max_{i-1}) O(\\max_i-\\max_{i-1}) \u7684\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4e2d\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt{n}\\cdot(\\max_i-\\max_{i-1})) O(\\sqrt{n}\\cdot(\\max_i-\\max_{i-1})) \u3002 \u5c06\u6bcf\u4e00\u5757 L L \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \u5bf9\u4e8e L L \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\begin{aligned} & O(\\sqrt{n}(\\max{}_1-1)+\\sqrt{n}(\\max{}_2-\\max{}_1)+\\sqrt{n}(\\max{}_3-\\max{}_2)+\\cdots+\\sqrt{n}(\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1))} \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_1-1+\\max{}_2-\\max{}_1+\\max{}_3-\\max{}_2+\\cdots+\\max{}_{\\lceil\\sqrt{n}\\rceil-1}-\\max{}_{\\lceil\\sqrt{n}\\rceil-2}+\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1)}) \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_{\\lceil\\sqrt{n}\\rceil-1}))\\\\ \\end{aligned} \\begin{aligned} & O(\\sqrt{n}(\\max{}_1-1)+\\sqrt{n}(\\max{}_2-\\max{}_1)+\\sqrt{n}(\\max{}_3-\\max{}_2)+\\cdots+\\sqrt{n}(\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1))} \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_1-1+\\max{}_2-\\max{}_1+\\max{}_3-\\max{}_2+\\cdots+\\max{}_{\\lceil\\sqrt{n}\\rceil-1}-\\max{}_{\\lceil\\sqrt{n}\\rceil-2}+\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1)}) \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_{\\lceil\\sqrt{n}\\rceil-1}))\\\\ \\end{aligned} (\u88c2\u9879\u6c42\u548c) \u7531\u9898\u53ef\u77e5 \\max_{\\lceil\\sqrt{n}\\rceil} \\max_{\\lceil\\sqrt{n}\\rceil} \u6700\u5927\u4e3a n n \uff0c\u6240\u4ee5 L L \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u4e3a O(n\\sqrt{n}) O(n\\sqrt{n}) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u83ab\u961f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\sqrt{n}) O(n\\sqrt{n}) \uff1b \u4f46\u662f\u5bf9\u4e8e m m \u7684\u5176\u4ed6\u53d6\u503c\uff0c\u5982 m<n m<n \uff0c\u5206\u5757\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u624d\u80fd\u53d8\u7684\u66f4\u4f18\u3002 \u600e\u4e48\u5206\u5757\u5462\uff1f \u6211\u4eec\u8bbe\u5757\u957f\u5ea6\u4e3a S S \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u591a\u4e2a\u5728\u540c\u4e00\u5757\u5185\u7684\u8be2\u95ee\uff0c\u632a\u52a8\u7684\u8ddd\u79bb\u5c31\u662f n n \uff0c\u4e00\u5171 \\displaystyle \\frac{n}{S} \\displaystyle \\frac{n}{S} \u4e2a\u5757\uff0c\u79fb\u52a8\u7684\u603b\u6b21\u6570\u5c31\u662f \\displaystyle \\frac{n^2}{S} \\displaystyle \\frac{n^2}{S} \uff0c\u79fb\u52a8\u53ef\u80fd\u8de8\u8d8a\u5757\uff0c\u6240\u4ee5\u8fd8\u8981\u52a0\u4e0a\u4e00\u4e2a mS mS \u7684\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6\u4e3a \\displaystyle O\\left(\\frac{n^2}{S}+mS\\right) \\displaystyle O\\left(\\frac{n^2}{S}+mS\\right) \uff0c\u6211\u4eec\u8981\u8ba9\u8fd9\u4e2a\u503c\u5c3d\u91cf\u5c0f\uff0c\u90a3\u4e48\u5c31\u8981\u5c06\u8fd9\u4e24\u4e2a\u9879\u5c3d\u91cf\u76f8\u7b49\uff0c\u53d1\u73b0 S S \u53d6 \\displaystyle \\frac{n}{\\sqrt{m}} \\displaystyle \\frac{n}{\\sqrt{m}} \u662f\u6700\u4f18\u7684\uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u4e3a \\displaystyle O\\left(\\frac{n^2}{\\displaystyle \\frac{n}{\\sqrt{m}}}+m\\left(\\frac{n}{\\sqrt{m}}\\right)\\right)=O(n\\sqrt{m}) \\displaystyle O\\left(\\frac{n^2}{\\displaystyle \\frac{n}{\\sqrt{m}}}+m\\left(\\frac{n}{\\sqrt{m}}\\right)\\right)=O(n\\sqrt{m}) \u3002 \u4f8b\u9898 & \u4ee3\u7801 \u00b6 \u5c0f Z \u7684\u889c\u5b50 \u601d\u8def\uff1a\u83ab\u961f\u7b97\u6cd5\u6a21\u677f\u9898\u3002 \u5bf9\u4e8e\u533a\u95f4 [l,r] [l,r] \uff0c\u4ee5 l l \u6240\u5728\u5757\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c r r \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002 \u7136\u540e\u4ece\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u8be2\u95ee\u5f00\u59cb\u8ba1\u7b97\u7b54\u6848\uff0c\u7b2c\u4e00\u4e2a\u8be2\u95ee\u901a\u8fc7\u76f4\u63a5\u66b4\u529b\u7b97\u51fa\uff0c\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u540e\u9762\u7684\u8be2\u95ee\u5728\u524d\u4e00\u4e2a\u8be2\u95ee\u7684\u57fa\u7840\u4e0a\u5f97\u5230\u7b54\u6848\u3002 \u5177\u4f53\u505a\u6cd5\uff1a \u5bf9\u4e8e\u533a\u95f4 [i,i] [i,i] \uff0c\u7531\u4e8e\u533a\u95f4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u80fd\u77e5\u9053\u7b54\u6848\u3002 \u7136\u540e\u4e00\u6b65\u4e00\u6b65\u4ece\u5f53\u524d\u533a\u95f4\uff08\u5df2\u77e5\u7b54\u6848\uff09\u5411\u4e0b\u4e00\u4e2a\u533a\u95f4\u9760\u8fd1\u3002 \u6211\u4eec\u8bbe col[i] col[i] \u8868\u793a\u5f53\u524d\u989c\u8272 i \u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c ans ans \u5f53\u524d\u5171\u6709\u591a\u5c11\u79cd\u53ef\u884c\u7684\u914d\u5bf9\u65b9\u6848\uff08\u6709\u591a\u5c11\u79cd\u53ef\u4ee5\u9009\u5230\u4e00\u53cc\u989c\u8272\u76f8\u540c\u7684\u889c\u5b50\uff09\uff0c\u8868\u793a\u7136\u540e\u6bcf\u6b21\u79fb\u52a8\u7684\u65f6\u5019\u66f4\u65b0\u7b54\u6848\u2014\u2014\u8bbe\u5f53\u524d\u989c\u8272\u4e3a k k \uff0c\u5982\u679c\u662f\u589e\u957f\u533a\u95f4\u5c31\u662f ans ans \u52a0\u4e0a C_{col[k]+1}^2-C_{col[k]}^2 C_{col[k]+1}^2-C_{col[k]}^2 \uff0c\u5982\u679c\u662f\u7f29\u77ed\u5c31\u662f ans ans \u51cf\u53bb C_{col[k]}^2-C_{col[k]-1}^2 C_{col[k]}^2-C_{col[k]-1}^2 \u3002\u8fd9\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u3002 \u800c\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u5c31\u662f \\displaystyle \\frac{ans}{C_{r-l+1}^2} \\displaystyle \\frac{ans}{C_{r-l+1}^2} \u3002 \u8fd9\u91cc\u6709\u4e2a\u4f18\u5316\uff1a \\displaystyle C_a^2=\\frac{a (a-1)}{2} \\displaystyle C_a^2=\\frac{a (a-1)}{2} \u3002 \u6240\u4ee5 \\displaystyle C_{a+1}^2-C_a^2=\\frac{(a+1) a}{2}-\\frac{a (a-1)}{2}=\\frac{a}{2}\\cdot (a+1-a+1)=\\frac{a}{2}\\cdot 2=a \\displaystyle C_{a+1}^2-C_a^2=\\frac{(a+1) a}{2}-\\frac{a (a-1)}{2}=\\frac{a}{2}\\cdot (a+1-a+1)=\\frac{a}{2}\\cdot 2=a \u3002 \u6240\u4ee5 C_{col[k]+1}^2-C_{col[k]}^2=col[k] C_{col[k]+1}^2-C_{col[k]}^2=col[k] \u3002 \u8fd9\u6837\u6211\u4eec\u5c11\u7b97\u4e86\u5f88\u591a\u4e1c\u897f\u5462\uff01 \u81f3\u5c11\u6211\u7684\u4ee3\u7801\u5728 BZOJ \u4e0a\u6d4b\u5feb\u4e86\u4e00\u500d\u3002 \u8fd8\u6709\uff0c\u7b97 C_a^2 C_a^2 \u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\uff0c a/2 \u53ef\u4ee5\u5199\u6210 a>>1 \u3002 \u7b97\u6cd5\u603b\u590d\u6742\u5ea6\uff1a O(n\\sqrt{n} ) O(n\\sqrt{n} ) \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d mot \u8868\u793a\u7b54\u6848\u7684\u5206\u6bcd (mother)\uff0c sub \u8868\u793a\u5206\u5b50\uff0c sqn \u8868\u793a\u5757\u7684\u5927\u5c0f\uff1a \\sqrt{n} \\sqrt{n} \uff0c arr \u662f\u8f93\u5165\u7684\u6570\u7ec4\uff0c node \u662f\u5b58\u50a8\u8be2\u95ee\u7684\u7ed3\u6784\u4f53\uff0c tab \u662f\u8be2\u95ee\u5e8f\u5217\uff08\u6392\u5e8f\u540e\u7684\uff09\uff0c col \u540c\u4e0a\u6240\u8ff0\u3002 \u6ce8\u610f\uff1a\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u79fb\u52a8\u533a\u95f4\u7684 4 \u4e2a for \u5faa\u73af\u7684\u4f4d\u7f6e\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u6539\u53d8\u5b83\u4eec\u4e4b\u95f4\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u4e0d\u7136\u4f1a WA\uff08\u56e0\u4e3a\u6709\u90a3\u4e2a ++l \u548c --r \uff09\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <bits/stdc++.h> #define bi(a) ((a - 1) / sqn + 1) using namespace std ; typedef long long LL ; template < typename tp > void read ( tp & dig ) { char c = getchar (); dig = 0 ; while ( ! isdigit ( c )) c = getchar (); while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); } struct node { LL l , r , i ; }; LL n , m , sqn , arr [ 50005 ], l , r , ans , col [ 50005 ], sub [ 50005 ], mot [ 50005 ]; vector < node > tab ; bool cmp ( node a , node b ) { if ( bi ( a . l ) == bi ( b . l )) return a . r < b . r ; return a . l < b . l ; } LL gcd ( LL a , LL b ) { return ! b ? a : gcd ( b , a % b ); } int main () { read ( n ), read ( m ), sqn = sqrt ( n ); for ( LL i = 1 ; i <= n ; i ++ ) read ( arr [ i ]); for ( LL i = 1 , a , b ; i <= m ; i ++ ) read ( a ), read ( b ), tab . push_back (( node ){ a , b , i }); sort ( tab . begin (), tab . end (), cmp ), l = r = tab [ 0 ]. l , col [ arr [ l ]] ++ ; for ( LL i = 0 , gcdnum ; i < tab . size (); i ++ ) { for (; l < tab [ i ]. l ; l ++ ) col [ arr [ l ]] -- , ans -= col [ arr [ l ]]; for ( -- l ; l >= tab [ i ]. l ; l -- ) ans += col [ arr [ l ]], col [ arr [ l ]] ++ ; for (; r > tab [ i ]. r ; r -- ) col [ arr [ r ]] -- , ans -= col [ arr [ r ]]; for ( ++ r ; r <= tab [ i ]. r ; r ++ ) ans += col [ arr [ r ]], col [ arr [ r ]] ++ ; sub [ tab [ i ]. i ] = ans , l = tab [ i ]. l , r = tab [ i ]. r ; mot [ tab [ i ]. i ] = (( r - l ) * ( r - l + 1 )) >> 1 ; } for ( LL i = 1 , gcdn ; i <= m ; i ++ ) gcdn = gcd ( sub [ i ], mot [ i ]), printf ( \"%lld/%lld \\n \" , sub [ i ] / gcdn , mot [ i ] / gcdn ); return 0 ; } \u5e26\u4fee\u6539 \u00b6 \u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u4f1a\u666e\u901a\u83ab\u961f\u7b97\u6cd5\u4e86\u3002 \u5982\u679c\u60a8\u8fd8\u4e0d\u4f1a\uff0c\u8bf7\u5148\u9605\u8bfb\u4e0a\u9762\u7684 \u201c\u666e\u901a\u83ab\u961f\u7b97\u6cd5\u201d \u7279\u70b9 \u00b6 \u666e\u901a\u83ab\u961f\u662f\u4e0d\u80fd\u5e26\u4fee\u6539\u7684 \u6211\u4eec\u53ef\u4ee5\u5f3a\u884c\u8ba9\u5b83\u53ef\u4ee5\u4fee\u6539\uff0c\u5c31\u50cf DP \u4e00\u6837\uff0c\u53ef\u4ee5\u5f3a\u884c\u52a0\u4e0a\u4e00\u7ef4 \u65f6\u95f4\u7ef4 , \u8868\u793a\u8fd9\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u3002 \u65f6\u95f4\u7ef4\u8868\u793a\u7ecf\u5386\u7684\u4fee\u6539\u6b21\u6570\u3002 \u5373\u628a\u8be2\u95ee [l,r] [l,r] \u53d8\u6210 [l,r,time] [l,r,time] \u90a3\u4e48\u6211\u4eec\u7684\u5750\u6807\u4e5f\u53ef\u4ee5\u5728\u65f6\u95f4\u7ef4\u4e0a\u79fb\u52a8\uff0c\u5373 [l,r,time] [l,r,time] \u591a\u4e86\u4e00\u7ef4\u53ef\u4ee5\u79fb\u52a8\u7684\u65b9\u5411\uff0c\u53ef\u4ee5\u53d8\u6210\uff1a [l-1,r,time] [l-1,r,time] [l+1,r,time] [l+1,r,time] [l,r-1,time] [l,r-1,time] [l,r+1,time] [l,r+1,time] [l,r,time-1] [l,r,time-1] [l,r,time+1] [l,r,time+1] \u8fd9\u6837\u7684\u8f6c\u79fb\u4e5f\u662f O(1) O(1) \u7684\uff0c\u4f46\u662f\u6211\u4eec\u6392\u5e8f\u53c8\u591a\u4e86\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u518d\u641e\u641e\u5c31\u884c\u4e86 \u53ef\u4ee5\u7528\u548c\u666e\u901a\u83ab\u961f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6392\u5e8f\u8f6c\u79fb\uff0c\u505a\u5230 O(n^{\\frac{5}{3}}) O(n^{\\frac{5}{3}}) \u8fd9\u4e00\u6b21\u6211\u4eec\u6392\u5e8f\u7684\u65b9\u5f0f\u662f\u4ee5 n^{\\frac{2}{3}} n^{\\frac{2}{3}} \u4e3a\u4e00\u5757\uff0c\u5206\u6210\u4e86 n^{\\frac{1}{3}} n^{\\frac{1}{3}} \u5757\uff0c\u7b2c\u4e00\u5173\u952e\u5b57\u662f\u5de6\u7aef\u70b9\u6240\u5728\u5757\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u662f\u53f3\u7aef\u70b9\u6240\u5728\u5757\uff0c\u7b2c\u4e09\u5173\u952e\u5b57\u662f\u65f6\u95f4\u3002 \u8fd8\u662f\u6765\u8bc1\u660e\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u9ed8\u8ba4\u5757\u5927\u5c0f\u4e3a \\sqrt{n} \\sqrt{n} \uff09\uff1a \u5de6\u53f3\u7aef\u70b9\u6240\u5728\u5757\u4e0d\u53d8\uff0c\u65f6\u95f4\u5728\u6392\u5e8f\u540e\u5355\u8c03\u5411\u53f3\u79fb\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f O(n) O(n) \u82e5\u5de6\u53f3\u7aef\u70b9\u6240\u5728\u5757\u6539\u53d8\uff0c\u65f6\u95f4\u4e00\u6b21\u6700\u591a\u4f1a\u79fb\u52a8 n \u4e2a\u683c\u5b50\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) O(n) \u5de6\u7aef\u70b9\u6240\u5728\u5757\u4e00\u5171\u6709 n^{\\frac{1}{3}} n^{\\frac{1}{3}} \u4e2d\uff0c\u53f3\u7aef\u70b9\u4e5f\u662f n^{\\frac{1}{3}} n^{\\frac{1}{3}} \u79cd\uff0c\u4e00\u5171 {n^{\\frac{1}{3}}}\\times{n^{\\frac{1}{3}}}=n^{\\frac{2}{3}} {n^{\\frac{1}{3}}}\\times{n^{\\frac{1}{3}}}=n^{\\frac{2}{3}} \u79cd\uff0c\u6bcf\u79cd\u4e58\u4e0a\u79fb\u52a8\u7684\u590d\u6742\u5ea6 O(n) O(n) \uff0c\u603b\u590d\u6742\u5ea6 O(n^{\\frac{5}{3}}) O(n^{\\frac{5}{3}}) \u4f8b\u9898 \u00b6 \u6570\u989c\u8272 BZOJ - 2120 \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0cM \u4e2a\u64cd\u4f5c\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a \u4fee\u6539\u5e8f\u5217\u4e0a\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u8be2\u95ee\u533a\u95f4 [l,r] [l,r] \u4e2d\u6570\u5b57\u7684\u79cd\u7c7b\u6570\uff08\u591a\u4e2a\u76f8\u540c\u7684\u6570\u5b57\u53ea\u7b97\u4e00\u4e2a\uff09 \u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u4e0d\u5e26\u64cd\u4f5c 1\uff08\u4fee\u6539\uff09\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u80fd\u8f7b\u677e\u7528\u666e\u901a\u83ab\u961f\u89e3\u51b3\u3002 \u4f46\u662f\u9898\u76ee\u8fd8\u5e26\u5355\u70b9\u4fee\u6539\uff0c\u6240\u4ee5\u7528 \u5e26\u4fee\u6539\u7684\u83ab\u961f \u3002 \u5148\u8003\u8651\u666e\u901a\u83ab\u961f\u7684\u505a\u6cd5\uff1a \u6bcf\u6b21\u6269\u5927\u533a\u95f4\u65f6\uff0c\u6bcf\u52a0\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u7edf\u8ba1\u5b83\u5df2\u7ecf\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5982\u679c\u52a0\u5165\u524d\u8fd9\u79cd\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u4e3a 0 0 \uff0c\u5219\u8bf4\u660e\u8fd9\u662f\u4e00\u79cd\u65b0\u7684\u6570\u5b57\uff0c\u7b54\u6848 +1 +1 \u3002\u7136\u540e\u8fd9\u79cd\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570 +1 +1 \u3002 \u6bcf\u6b21\u51cf\u5c0f\u533a\u95f4\u65f6\uff0c\u6bcf\u5220\u9664\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u7edf\u8ba1\u5b83\u5220\u9664\u540e\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5982\u679c\u5220\u9664\u540e\u8fd9\u79cd\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u4e3a 0 0 \uff0c\u5219\u8bf4\u660e\u8fd9\u79cd\u6570\u5b57\u5df2\u7ecf\u4ece\u5f53\u524d\u7684\u533a\u95f4\u5185\u5220\u5149\u4e86\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u533a\u95f4\u51cf\u5c11\u4e86\u4e00\u79cd\u989c\u8272\uff0c\u7b54\u6848 -1 -1 \u3002\u7136\u540e\u8fd9\u79cd\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570 -1 -1 \u3002 \u73b0\u5728\u518d\u6765\u8003\u8651\u4fee\u6539\uff1a \u5355\u70b9\u4fee\u6539\uff0c\u628a\u67d0\u4e00\u4f4d\u7684\u6570\u5b57\u4fee\u6539\u6389\u3002\u5047\u5982\u6211\u4eec\u662f\u4ece\u4e00\u4e2a\u7ecf\u5386\u4fee\u6539\u6b21\u6570\u4e3a i i \u7684\u8be2\u95ee\u8f6c\u79fb\u5230\u4e00\u4e2a\u7ecf\u5386\u4fee\u6539\u6b21\u6570\u4e3a j j \u7684\u8be2\u95ee\u4e0a\uff0c\u4e14 i<j i<j \u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a\u7b2c i+1 i+1 \u4e2a\u5230\u7b2c j j \u4e2a\u4fee\u6539\u5f3a\u884c\u52a0\u4e0a\u3002 \u5047\u5982 j<i j<i \u7684\u8bdd\uff0c\u5219\u9700\u8981\u628a\u7b2c i i \u4e2a\u5230\u7b2c j+1 j+1 \u4e2a\u4fee\u6539\u5f3a\u884c\u8fd8\u539f\u3002 \u600e\u4e48\u5f3a\u884c\u52a0\u4e0a\u4e00\u4e2a\u4fee\u6539\u5462\uff1f\u5047\u8bbe\u4e00\u4e2a\u4fee\u6539\u662f\u4fee\u6539\u7b2c pos pos \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u989c\u8272\uff0c\u539f\u672c pos pos \u4e0a\u7684\u989c\u8272\u4e3a a a \uff0c\u4fee\u6539\u540e\u989c\u8272\u4e3a b b \uff0c\u8fd8\u5047\u8bbe\u5f53\u524d\u83ab\u961f\u7684\u533a\u95f4\u6269\u5c55\u5230\u4e86 [l,r] [l,r] \u3002 \u52a0\u4e0a\u8fd9\u4e2a\u4fee\u6539\uff1a\u6211\u4eec\u9996\u5148\u5224\u65ad pos pos \u662f\u5426\u5728\u533a\u95f4 [l,r] [l,r] \u5185\u3002\u5982\u679c\u662f\u7684\u8bdd\uff0c\u6211\u4eec\u7b49\u4e8e\u662f\u4ece\u533a\u95f4\u4e2d\u5220\u6389\u989c\u8272 a a \uff0c\u52a0\u4e0a\u989c\u8272 b b \uff0c\u5e76\u4e14\u5f53\u524d\u989c\u8272\u5e8f\u5217\u7684\u7b2c pos pos \u9879\u7684\u989c\u8272\u6539\u6210 b b \u3002\u5982\u679c\u4e0d\u5728\u533a\u95f4 [l,r] [l,r] \u5185\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u989c\u8272\u5e8f\u5217\u7684\u7b2c pos pos \u9879\u4e3a b b \u3002 \u8fd8\u539f\u8fd9\u4e2a\u4fee\u6539\uff1a\u7b49\u4e8e\u52a0\u4e0a\u4e00\u4e2a\u4fee\u6539\u7b2c pos pos \u9879\u3001\u628a\u989c\u8272 b b \u6539\u6210\u989c\u8272 a a \u7684\u4fee\u6539\u3002 \u56e0\u6b64\u8fd9\u9053\u9898\u5c31\u8fd9\u6837\u7528\u5e26\u4fee\u6539\u83ab\u961f\u8f7b\u677e\u89e3\u51b3\u5566\uff01 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <bits/stdc++.h> #define SZ (10005) using namespace std ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); } int n , m , sqn , c [ SZ ], ct [ SZ ], c1 , c2 , mem [ SZ ][ 3 ], ans , tot [ 1000005 ], nal [ SZ ]; struct query { int l , r , i , c ; bool operator < ( const query another ) const { if ( l / sqn == another . l / sqn ) { if ( r / sqn == another . r / sqn ) return i < another . i ; return r < another . r ; } return l < another . l ; } } Q [ SZ ]; void add ( int a ) { if ( ! tot [ a ]) ans ++ ; tot [ a ] ++ ; } void del ( int a ) { tot [ a ] -- ; if ( ! tot [ a ]) ans -- ; } char opt [ 10 ]; int main () { IN ( n ), IN ( m ), sqn = pow ( n , ( double ) 2 / ( double ) 3 ); for ( int i = 1 ; i <= n ; i ++ ) IN ( c [ i ]), ct [ i ] = c [ i ]; for ( int i = 1 , a , b ; i <= m ; i ++ ) if ( scanf ( \"%s\" , opt ), IN ( a ), IN ( b ), opt [ 0 ] == 'Q' ) Q [ c1 ]. l = a , Q [ c1 ]. r = b , Q [ c1 ]. i = c1 , Q [ c1 ]. c = c2 , c1 ++ ; else mem [ c2 ][ 0 ] = a , mem [ c2 ][ 1 ] = ct [ a ], mem [ c2 ][ 2 ] = ct [ a ] = b , c2 ++ ; sort ( Q , Q + c1 ), add ( c [ 1 ]); int l = 1 , r = 1 , lst = 0 ; for ( int i = 0 ; i < c1 ; i ++ ) { for (; lst < Q [ i ]. c ; lst ++ ) { if ( l <= mem [ lst ][ 0 ] && mem [ lst ][ 0 ] <= r ) del ( mem [ lst ][ 1 ]), add ( mem [ lst ][ 2 ]); c [ mem [ lst ][ 0 ]] = mem [ lst ][ 2 ]; } for (; lst > Q [ i ]. c ; lst -- ) { if ( l <= mem [ lst - 1 ][ 0 ] && mem [ lst - 1 ][ 0 ] <= r ) del ( mem [ lst - 1 ][ 2 ]), add ( mem [ lst - 1 ][ 1 ]); c [ mem [ lst - 1 ][ 0 ]] = mem [ lst - 1 ][ 1 ]; } for ( ++ r ; r <= Q [ i ]. r ; r ++ ) add ( c [ r ]); for ( -- r ; r > Q [ i ]. r ; r -- ) del ( c [ r ]); for ( -- l ; l >= Q [ i ]. l ; l -- ) add ( c [ l ]); for ( ++ l ; l < Q [ i ]. l ; l ++ ) del ( c [ l ]); nal [ Q [ i ]. i ] = ans ; } for ( int i = 0 ; i < c1 ; i ++ ) printf ( \"%d \\n \" , nal [ i ]); return 0 ; } \u6811\u4e0a\u83ab\u961f \u00b6 \u83ab\u961f\u53ea\u80fd\u5904\u7406\u7ebf\u6027\u95ee\u9898\uff0c\u6211\u4eec\u8981\u628a\u6811\u5f3a\u884c\u538b\u6210\u5e8f\u5217 \u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u7684\u62ec\u53f7\u5e8f\u8dd1\u4e0b\u6765\uff0c\u628a\u62ec\u53f7\u5e8f\u5206\u5757\uff0c\u5728\u62ec\u53f7\u5e8f\u4e0a\u8dd1\u83ab\u961f \u5177\u4f53\u600e\u4e48\u505a\u5462\uff1f dfs \u4e00\u68f5\u6811\uff0c\u7136\u540e\u5982\u679c dfs \u5230 x \u70b9\uff0c\u5c31 push_back(x),dfs \u5b8c x \u70b9\uff0c\u5c31\u76f4\u63a5 push_back(-x)\uff0c\u7136\u540e\u6211\u4eec\u5728\u632a\u52a8\u6307\u9488\u7684\u65f6\u5019 \u65b0\u52a0\u5165\u7684\u503c\u662f x ---> add(x) \u65b0\u52a0\u5165\u7684\u503c\u662f - x ---> del(x) \u65b0\u5220\u9664\u7684\u503c\u662f x ---> del(x) \u65b0\u5220\u9664\u7684\u503c\u662f - x ---> add(x) \u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u628a\u4e00\u68f5\u6811\u5904\u7406\u6210\u4e86\u5e8f\u5217\u3002 \u4f8b\u9898\u662f [WC2013] \u7cd6\u679c\u516c\u56ed , \u8fd9\u9898\u662f\u5e26\u4fee\u6539\u6811\u4e0a\u83ab\u961f \u9898\u610f\u662f\u7ed9\u4f60\u4e00\u68f5\u6811, \u6bcf\u4e2a\u70b9\u6709\u989c\u8272, \u6bcf\u6b21\u8be2\u95ee \\sum_{c}val_c\\sum_{i=1}^{cnt_c}w_i \\sum_{c}val_c\\sum_{i=1}^{cnt_c}w_i val val \u8868\u793a\u8be5\u989c\u8272\u7684\u4ef7\u503c cnt cnt \u8868\u793a\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570 w w \u8868\u793a\u8be5\u989c\u8272\u51fa\u73b0 i i \u6b21\u540e\u7684\u4ef7\u503c \u5148\u628a\u6811\u53d8\u6210\u5e8f\u5217\uff0c\u7136\u540e\u6bcf\u6b21\u6dfb\u52a0 / \u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u7684\u5bf9\u7b54\u6848\u7684\u7684\u8d21\u732e\u662f\u53ef\u4ee5\u5728 O(1) O(1) \u65f6\u95f4\u5185\u83b7\u5f97\u7684\uff0c\u5373 val_c\\times w_{cnt_{c+1}} val_c\\times w_{cnt_{c+1}} \u53d1\u73b0\u56e0\u4e3a\u4ed6\u4f1a\u628a\u8d77\u70b9\u7684\u5b50\u6811\u4e5f\u626b\u4e86\u4e00\u904d\uff0c\u4ea7\u751f\u591a\u4f59\u7684\u8d21\u732e\uff0c\u600e\u4e48\u529e\u5462\uff1f \u56e0\u4e3a\u626b\u7684\u8fc7\u7a0b\u4e2d\u8d77\u70b9\u7684\u5b50\u6811\u91cc\u7684\u70b9\u80af\u5b9a\u4f1a\u88ab\u626b\u4e24\u6b21\uff0c\u4f46\u8d21\u732e\u4e3a 0 \u6240\u4ee5\u53ef\u4ee5\u5f00\u4e00\u4e2a vis vis \u6570\u7ec4\uff0c\u6bcf\u6b21\u626b\u5230\u70b9 x\uff0c\u5c31\u628a vis_x vis_x \u5f02\u6216\u4e0a 1 \u5982\u679c vis_x=0 vis_x=0 \uff0c\u90a3\u8fd9\u4e2a\u70b9\u7684\u8d21\u732e\u5c31\u53ef\u4ee5\u4e0d\u8ba1 \u6240\u4ee5\u53ef\u4ee5\u7528\u6811\u4e0a\u83ab\u961f\u6765\u6c42 \u4fee\u6539\u7684\u8bdd\uff0c\u52a0\u4e0a\u4e00\u7ef4\u65f6\u95f4\u7ef4\u5373\u53ef, \u53d8\u6210\u5e26\u4fee\u6539\u6811\u4e0a\u83ab\u961f \u7136\u540e\u56e0\u4e3a\u6240\u5305\u542b\u7684\u533a\u95f4\u5185\u53ef\u80fd\u6ca1\u6709 LCA\uff0c\u5bf9\u4e8e\u6ca1\u6709\u7684\u60c5\u51b5\u8981\u5c06\u591a\u4f59\u7684\u8d21\u732e\u5220\u9664\uff0c\u7136\u540e\u5c31\u5b8c\u4e8b\u4e86 code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 #include <algorithm> #include <cmath> #include <cstdio> #include <iostream> #define DEBUG printf(\"line:%d func:%s\\n\", __LINE__, __FUNCTION__); using namespace std ; const int maxn = 200010 ; int f [ maxn ], g [ maxn ], id [ maxn ], head [ maxn ], cnt , last [ maxn ], dep [ maxn ], fa [ maxn ][ 22 ], v [ maxn ], w [ maxn ]; int block , index , n , m , q ; int pos [ maxn ], col [ maxn ], app [ maxn ]; bool vis [ maxn ]; long long ans [ maxn ], cur ; struct edge { int to , nxt ; } e [ maxn ]; int cnt1 = 0 , cnt2 = 0 ; // \u65f6\u95f4\u6233 struct query { int l , r , t , id ; bool operator < ( const query & b ) const { return ( pos [ l ] < pos [ b . l ]) || ( pos [ l ] == pos [ b . l ] && pos [ r ] < pos [ b . r ]) || ( pos [ l ] == pos [ b . l ] && pos [ r ] == pos [ b . r ] && t < b . t ); } } a [ maxn ], b [ maxn ]; inline void addedge ( int x , int y ) { e [ ++ cnt ] = ( edge ){ y , head [ x ]}; head [ x ] = cnt ; } void dfs ( int x ) { id [ f [ x ] = ++ index ] = x ; for ( int i = head [ x ]; i ; i = e [ i ]. nxt ) { if ( e [ i ]. to != fa [ x ][ 0 ]) { fa [ e [ i ]. to ][ 0 ] = x ; dep [ e [ i ]. to ] = dep [ x ] + 1 ; dfs ( e [ i ]. to ); } } id [ g [ x ] = ++ index ] = x ; // \u62ec\u53f7\u5e8f } inline void swap ( int & x , int & y ) { int t ; t = x ; x = y ; y = t ; } inline int lca ( int x , int y ) { if ( dep [ x ] < dep [ y ]) swap ( x , y ); if ( dep [ x ] != dep [ y ]) { int dis = dep [ x ] - dep [ y ]; for ( int i = 20 ; i >= 0 ; i -- ) if ( dis >= ( 1 << i )) dis -= 1 << i , x = fa [ x ][ i ]; } // \u722c\u5230\u540c\u4e00\u9ad8\u5ea6 if ( x == y ) return x ; for ( int i = 20 ; i >= 0 ; i -- ) { if ( fa [ x ][ i ] != fa [ y ][ i ]) x = fa [ x ][ i ], y = fa [ y ][ i ]; } return fa [ x ][ 0 ]; } inline void add ( int x ) { if ( vis [ x ]) cur -= ( long long ) v [ col [ x ]] * w [ app [ col [ x ]] -- ]; else cur += ( long long ) v [ col [ x ]] * w [ ++ app [ col [ x ]]]; vis [ x ] ^= 1 ; } inline void modify ( int x , int t ) { if ( vis [ x ]) { add ( x ); col [ x ] = t ; add ( x ); } else col [ x ] = t ; } // \u5728\u65f6\u95f4\u7ef4\u4e0a\u79fb\u52a8 int main () { scanf ( \"%d%d%d\" , & n , & m , & q ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , & v [ i ]); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & w [ i ]); for ( int i = 1 ; i < n ; i ++ ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); addedge ( x , y ); addedge ( y , x ); } for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & last [ i ]); col [ i ] = last [ i ]; } dfs ( 1 ); for ( int j = 1 ; j <= 20 ; j ++ ) for ( int i = 1 ; i <= n ; i ++ ) fa [ i ][ j ] = fa [ fa [ i ][ j - 1 ]][ j - 1 ]; // \u9884\u5904\u7406\u7956\u5148 int block = pow ( index , 2.0 / 3 ); for ( int i = 1 ; i <= index ; i ++ ) { pos [ i ] = ( i - 1 ) / block ; } while ( q -- ) { int opt , x , y ; scanf ( \"%d%d%d\" , & opt , & x , & y ); if ( opt == 0 ) { b [ ++ cnt2 ]. l = x ; b [ cnt2 ]. r = last [ x ]; last [ x ] = b [ cnt2 ]. t = y ; } else { if ( f [ x ] > f [ y ]) swap ( x , y ); a [ ++ cnt1 ] = ( query ){ lca ( x , y ) == x ? f [ x ] : g [ x ], f [ y ], cnt2 , cnt1 }; } } sort ( a + 1 , a + cnt1 + 1 ); int L , R , T ; // \u6307\u9488\u5750\u6807 L = R = 0 ; T = 1 ; for ( int i = 1 ; i <= cnt1 ; i ++ ) { while ( T <= a [ i ]. t ) { modify ( b [ T ]. l , b [ T ]. t ); T ++ ; } while ( T > a [ i ]. t ) { modify ( b [ T ]. l , b [ T ]. r ); T -- ; } while ( L > a [ i ]. l ) { L -- ; add ( id [ L ]); } while ( L < a [ i ]. l ) { add ( id [ L ]); L ++ ; } while ( R > a [ i ]. r ) { add ( id [ R ]); R -- ; } while ( R < a [ i ]. r ) { R ++ ; add ( id [ R ]); } int x = id [ L ], y = id [ R ]; int llca = lca ( x , y ); if ( x != llca && y != llca ) { add ( llca ); ans [ a [ i ]. id ] = cur ; add ( llca ); } else ans [ a [ i ]. id ] = cur ; } for ( int i = 1 ; i <= cnt1 ; i ++ ) { printf ( \"%lld \\n \" , ans [ i ]); } return 0 ; }","title":"\u83ab\u961f\u7b97\u6cd5"},{"location":"misc/mo-algo/#_1","text":"\uff08\u4e3b\u8981\u53c2\u8003\u4e86 https://blog.sengxian.com/algorithms/mo-s-algorithm \u3002\uff09","title":"\u666e\u901a\u83ab\u961f\u7b97\u6cd5"},{"location":"misc/mo-algo/#_2","text":"\u83ab\u961f\u7b97\u6cd5\u662f\u7531\u83ab\u6d9b\u63d0\u51fa\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e00\u7c7b\u79bb\u7ebf\u533a\u95f4\u8be2\u95ee\u95ee\u9898\uff0c\u9002\u7528\u6027\u6781\u4e3a\u5e7f\u6cdb\u3002\u540c\u65f6\u5c06\u5176\u52a0\u4ee5\u6269\u5c55\uff0c\u4fbf\u80fd\u8f7b\u677e\u5904\u7406\u6811\u4e0a\u8def\u5f84\u8be2\u95ee\u4ee5\u53ca\u652f\u6301\u4fee\u6539\u64cd\u4f5c\u3002","title":"\u6982\u8ff0"},{"location":"misc/mo-algo/#_3","text":"\u5047\u8bbe n=m n=m \uff0c\u90a3\u4e48\u5bf9\u4e8e\u5e8f\u5217\u4e0a\u7684\u533a\u95f4\u8be2\u95ee\u95ee\u9898\uff0c\u5982\u679c\u4ece [l,r] [l,r] \u7684\u7b54\u6848\u80fd\u591f O(1) O(1) \u6269\u5c55\u5230 [l-1,r],[l+1,r],[l,r+1],[l,r-1] [l-1,r],[l+1,r],[l,r+1],[l,r-1] \uff08\u5373\u4e0e [l,r] [l,r] \u76f8\u90bb\u7684\u533a\u95f4\uff09\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 O(n\\sqrt{n}) O(n\\sqrt{n}) \u7684\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u6240\u6709\u8be2\u95ee\u7684\u7b54\u6848\u3002","title":"\u5f62\u5f0f"},{"location":"misc/mo-algo/#_4","text":"\u79bb\u7ebf\u540e\u6392\u5e8f\uff0c\u987a\u5e8f\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\uff0c\u66b4\u529b\u4ece\u4e0a\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u533a\u95f4\u7b54\u6848\uff08\u4e00\u6b65\u4e00\u6b65\u79fb\u52a8\u5373\u53ef\uff09\u3002","title":"\u5b9e\u73b0"},{"location":"misc/mo-algo/#_5","text":"\u5bf9\u4e8e\u533a\u95f4 [l,r] [l,r] , \u4ee5 l l \u6240\u5728\u5757\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c r r \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002","title":"\u6392\u5e8f\u65b9\u6cd5"},{"location":"misc/mo-algo/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 inline void move ( int pos , int sign ) { // update nowAns } void solve () { BLOCK_SIZE = int ( ceil ( pow ( n , 0.5 ))); sort ( querys , querys + m ); for ( int i = 0 ; i < m ; ++ i ) { const query & q = querys [ i ]; while ( l > q . l ) move ( -- l , 1 ); while ( r < q . r ) move ( r ++ , 1 ); while ( l < q . l ) move ( l ++ , - 1 ); while ( r > q . r ) move ( -- r , - 1 ); ans [ q . id ] = nowAns ; } }","title":"\u6a21\u677f"},{"location":"misc/mo-algo/#_7","text":"\u4ee5\u4e0b\u7684\u60c5\u51b5\u5728 n n \u548c m m \u540c\u9636\u7684\u524d\u63d0\u4e0b\u8ba8\u8bba\u3002 \u9996\u5148\u662f\u5206\u5757\u8fd9\u4e00\u6b65\uff0c\u8fd9\u4e00\u6b65\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6beb\u65e0\u7591\u95ee\u5730\u662f O(\\sqrt{n}\\cdot\\sqrt{n}\\log\\sqrt{n}+n\\log n)=O(n\\log n) O(\\sqrt{n}\\cdot\\sqrt{n}\\log\\sqrt{n}+n\\log n)=O(n\\log n) ; \u63a5\u7740\u5c31\u5230\u4e86\u83ab\u961f\u7b97\u6cd5\u7684\u7cbe\u9ad3\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u901a\u4fd7\u6613\u61c2\u7684\u521d\u4e2d\u65b9\u6cd5\u6765\u8bc1\u660e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n\\sqrt{n}) O(n\\sqrt{n}) \uff1b \u8bc1\uff1a\u4ee4\u6bcf\u4e00\u5757\u4e2d L L \u7684\u6700\u5927\u503c\u4e3a \\max_1,\\max_2,\\max_3, \\cdots , \\max_{\\lceil\\sqrt{n}\\rceil} \\max_1,\\max_2,\\max_3, \\cdots , \\max_{\\lceil\\sqrt{n}\\rceil} \u3002 \u7531\u7b2c\u4e00\u6b21\u6392\u5e8f\u53ef\u77e5\uff0c \\max_1 \\le \\max_2 \\le \\cdots \\le \\max_{\\lceil\\sqrt{n}\\rceil} \\max_1 \\le \\max_2 \\le \\cdots \\le \\max_{\\lceil\\sqrt{n}\\rceil} \u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u66b4\u529b\u6c42\u51fa\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 \u8003\u8651\u6700\u574f\u7684\u60c5\u51b5\uff0c\u5728\u6bcf\u4e00\u5757\u4e2d\uff0c R R \u7684\u6700\u5927\u503c\u5747\u4e3a n n \uff0c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u5747\u8981\u5c06 L L \u7531 \\max_{i - 1} \\max_{i - 1} \u4fee\u6539\u81f3 \\max_i \\max_i \u6216\u7531 \\max_i \\max_i \u4fee\u6539\u81f3 \\max_{i - 1} \\max_{i - 1} \u3002 \u8003\u8651 R R \uff1a\u56e0\u4e3a R R \u5728\u5757\u4e2d\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4fee\u6539\u5b8c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u5bf9\u4e8e\u6240\u6709\u5757\u5c31\u662f O(n\\sqrt{n}) O(n\\sqrt{n}) \u3002 \u91cd\u70b9\u5206\u6790 L L \uff1a\u56e0\u4e3a\u6bcf\u4e00\u6b21\u6539\u53d8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(\\max_i-\\max_{i-1}) O(\\max_i-\\max_{i-1}) \u7684\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4e2d\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt{n}\\cdot(\\max_i-\\max_{i-1})) O(\\sqrt{n}\\cdot(\\max_i-\\max_{i-1})) \u3002 \u5c06\u6bcf\u4e00\u5757 L L \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \u5bf9\u4e8e L L \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\begin{aligned} & O(\\sqrt{n}(\\max{}_1-1)+\\sqrt{n}(\\max{}_2-\\max{}_1)+\\sqrt{n}(\\max{}_3-\\max{}_2)+\\cdots+\\sqrt{n}(\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1))} \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_1-1+\\max{}_2-\\max{}_1+\\max{}_3-\\max{}_2+\\cdots+\\max{}_{\\lceil\\sqrt{n}\\rceil-1}-\\max{}_{\\lceil\\sqrt{n}\\rceil-2}+\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1)}) \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_{\\lceil\\sqrt{n}\\rceil-1}))\\\\ \\end{aligned} \\begin{aligned} & O(\\sqrt{n}(\\max{}_1-1)+\\sqrt{n}(\\max{}_2-\\max{}_1)+\\sqrt{n}(\\max{}_3-\\max{}_2)+\\cdots+\\sqrt{n}(\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1))} \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_1-1+\\max{}_2-\\max{}_1+\\max{}_3-\\max{}_2+\\cdots+\\max{}_{\\lceil\\sqrt{n}\\rceil-1}-\\max{}_{\\lceil\\sqrt{n}\\rceil-2}+\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1)}) \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_{\\lceil\\sqrt{n}\\rceil-1}))\\\\ \\end{aligned} (\u88c2\u9879\u6c42\u548c) \u7531\u9898\u53ef\u77e5 \\max_{\\lceil\\sqrt{n}\\rceil} \\max_{\\lceil\\sqrt{n}\\rceil} \u6700\u5927\u4e3a n n \uff0c\u6240\u4ee5 L L \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u4e3a O(n\\sqrt{n}) O(n\\sqrt{n}) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u83ab\u961f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\sqrt{n}) O(n\\sqrt{n}) \uff1b \u4f46\u662f\u5bf9\u4e8e m m \u7684\u5176\u4ed6\u53d6\u503c\uff0c\u5982 m<n m<n \uff0c\u5206\u5757\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u624d\u80fd\u53d8\u7684\u66f4\u4f18\u3002 \u600e\u4e48\u5206\u5757\u5462\uff1f \u6211\u4eec\u8bbe\u5757\u957f\u5ea6\u4e3a S S \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u591a\u4e2a\u5728\u540c\u4e00\u5757\u5185\u7684\u8be2\u95ee\uff0c\u632a\u52a8\u7684\u8ddd\u79bb\u5c31\u662f n n \uff0c\u4e00\u5171 \\displaystyle \\frac{n}{S} \\displaystyle \\frac{n}{S} \u4e2a\u5757\uff0c\u79fb\u52a8\u7684\u603b\u6b21\u6570\u5c31\u662f \\displaystyle \\frac{n^2}{S} \\displaystyle \\frac{n^2}{S} \uff0c\u79fb\u52a8\u53ef\u80fd\u8de8\u8d8a\u5757\uff0c\u6240\u4ee5\u8fd8\u8981\u52a0\u4e0a\u4e00\u4e2a mS mS \u7684\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6\u4e3a \\displaystyle O\\left(\\frac{n^2}{S}+mS\\right) \\displaystyle O\\left(\\frac{n^2}{S}+mS\\right) \uff0c\u6211\u4eec\u8981\u8ba9\u8fd9\u4e2a\u503c\u5c3d\u91cf\u5c0f\uff0c\u90a3\u4e48\u5c31\u8981\u5c06\u8fd9\u4e24\u4e2a\u9879\u5c3d\u91cf\u76f8\u7b49\uff0c\u53d1\u73b0 S S \u53d6 \\displaystyle \\frac{n}{\\sqrt{m}} \\displaystyle \\frac{n}{\\sqrt{m}} \u662f\u6700\u4f18\u7684\uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u4e3a \\displaystyle O\\left(\\frac{n^2}{\\displaystyle \\frac{n}{\\sqrt{m}}}+m\\left(\\frac{n}{\\sqrt{m}}\\right)\\right)=O(n\\sqrt{m}) \\displaystyle O\\left(\\frac{n^2}{\\displaystyle \\frac{n}{\\sqrt{m}}}+m\\left(\\frac{n}{\\sqrt{m}}\\right)\\right)=O(n\\sqrt{m}) \u3002","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"misc/mo-algo/#_8","text":"\u5c0f Z \u7684\u889c\u5b50 \u601d\u8def\uff1a\u83ab\u961f\u7b97\u6cd5\u6a21\u677f\u9898\u3002 \u5bf9\u4e8e\u533a\u95f4 [l,r] [l,r] \uff0c\u4ee5 l l \u6240\u5728\u5757\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c r r \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002 \u7136\u540e\u4ece\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u8be2\u95ee\u5f00\u59cb\u8ba1\u7b97\u7b54\u6848\uff0c\u7b2c\u4e00\u4e2a\u8be2\u95ee\u901a\u8fc7\u76f4\u63a5\u66b4\u529b\u7b97\u51fa\uff0c\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u540e\u9762\u7684\u8be2\u95ee\u5728\u524d\u4e00\u4e2a\u8be2\u95ee\u7684\u57fa\u7840\u4e0a\u5f97\u5230\u7b54\u6848\u3002 \u5177\u4f53\u505a\u6cd5\uff1a \u5bf9\u4e8e\u533a\u95f4 [i,i] [i,i] \uff0c\u7531\u4e8e\u533a\u95f4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u80fd\u77e5\u9053\u7b54\u6848\u3002 \u7136\u540e\u4e00\u6b65\u4e00\u6b65\u4ece\u5f53\u524d\u533a\u95f4\uff08\u5df2\u77e5\u7b54\u6848\uff09\u5411\u4e0b\u4e00\u4e2a\u533a\u95f4\u9760\u8fd1\u3002 \u6211\u4eec\u8bbe col[i] col[i] \u8868\u793a\u5f53\u524d\u989c\u8272 i \u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c ans ans \u5f53\u524d\u5171\u6709\u591a\u5c11\u79cd\u53ef\u884c\u7684\u914d\u5bf9\u65b9\u6848\uff08\u6709\u591a\u5c11\u79cd\u53ef\u4ee5\u9009\u5230\u4e00\u53cc\u989c\u8272\u76f8\u540c\u7684\u889c\u5b50\uff09\uff0c\u8868\u793a\u7136\u540e\u6bcf\u6b21\u79fb\u52a8\u7684\u65f6\u5019\u66f4\u65b0\u7b54\u6848\u2014\u2014\u8bbe\u5f53\u524d\u989c\u8272\u4e3a k k \uff0c\u5982\u679c\u662f\u589e\u957f\u533a\u95f4\u5c31\u662f ans ans \u52a0\u4e0a C_{col[k]+1}^2-C_{col[k]}^2 C_{col[k]+1}^2-C_{col[k]}^2 \uff0c\u5982\u679c\u662f\u7f29\u77ed\u5c31\u662f ans ans \u51cf\u53bb C_{col[k]}^2-C_{col[k]-1}^2 C_{col[k]}^2-C_{col[k]-1}^2 \u3002\u8fd9\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u3002 \u800c\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u5c31\u662f \\displaystyle \\frac{ans}{C_{r-l+1}^2} \\displaystyle \\frac{ans}{C_{r-l+1}^2} \u3002 \u8fd9\u91cc\u6709\u4e2a\u4f18\u5316\uff1a \\displaystyle C_a^2=\\frac{a (a-1)}{2} \\displaystyle C_a^2=\\frac{a (a-1)}{2} \u3002 \u6240\u4ee5 \\displaystyle C_{a+1}^2-C_a^2=\\frac{(a+1) a}{2}-\\frac{a (a-1)}{2}=\\frac{a}{2}\\cdot (a+1-a+1)=\\frac{a}{2}\\cdot 2=a \\displaystyle C_{a+1}^2-C_a^2=\\frac{(a+1) a}{2}-\\frac{a (a-1)}{2}=\\frac{a}{2}\\cdot (a+1-a+1)=\\frac{a}{2}\\cdot 2=a \u3002 \u6240\u4ee5 C_{col[k]+1}^2-C_{col[k]}^2=col[k] C_{col[k]+1}^2-C_{col[k]}^2=col[k] \u3002 \u8fd9\u6837\u6211\u4eec\u5c11\u7b97\u4e86\u5f88\u591a\u4e1c\u897f\u5462\uff01 \u81f3\u5c11\u6211\u7684\u4ee3\u7801\u5728 BZOJ \u4e0a\u6d4b\u5feb\u4e86\u4e00\u500d\u3002 \u8fd8\u6709\uff0c\u7b97 C_a^2 C_a^2 \u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\uff0c a/2 \u53ef\u4ee5\u5199\u6210 a>>1 \u3002 \u7b97\u6cd5\u603b\u590d\u6742\u5ea6\uff1a O(n\\sqrt{n} ) O(n\\sqrt{n} ) \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d mot \u8868\u793a\u7b54\u6848\u7684\u5206\u6bcd (mother)\uff0c sub \u8868\u793a\u5206\u5b50\uff0c sqn \u8868\u793a\u5757\u7684\u5927\u5c0f\uff1a \\sqrt{n} \\sqrt{n} \uff0c arr \u662f\u8f93\u5165\u7684\u6570\u7ec4\uff0c node \u662f\u5b58\u50a8\u8be2\u95ee\u7684\u7ed3\u6784\u4f53\uff0c tab \u662f\u8be2\u95ee\u5e8f\u5217\uff08\u6392\u5e8f\u540e\u7684\uff09\uff0c col \u540c\u4e0a\u6240\u8ff0\u3002 \u6ce8\u610f\uff1a\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u79fb\u52a8\u533a\u95f4\u7684 4 \u4e2a for \u5faa\u73af\u7684\u4f4d\u7f6e\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u6539\u53d8\u5b83\u4eec\u4e4b\u95f4\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u4e0d\u7136\u4f1a WA\uff08\u56e0\u4e3a\u6709\u90a3\u4e2a ++l \u548c --r \uff09\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <bits/stdc++.h> #define bi(a) ((a - 1) / sqn + 1) using namespace std ; typedef long long LL ; template < typename tp > void read ( tp & dig ) { char c = getchar (); dig = 0 ; while ( ! isdigit ( c )) c = getchar (); while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); } struct node { LL l , r , i ; }; LL n , m , sqn , arr [ 50005 ], l , r , ans , col [ 50005 ], sub [ 50005 ], mot [ 50005 ]; vector < node > tab ; bool cmp ( node a , node b ) { if ( bi ( a . l ) == bi ( b . l )) return a . r < b . r ; return a . l < b . l ; } LL gcd ( LL a , LL b ) { return ! b ? a : gcd ( b , a % b ); } int main () { read ( n ), read ( m ), sqn = sqrt ( n ); for ( LL i = 1 ; i <= n ; i ++ ) read ( arr [ i ]); for ( LL i = 1 , a , b ; i <= m ; i ++ ) read ( a ), read ( b ), tab . push_back (( node ){ a , b , i }); sort ( tab . begin (), tab . end (), cmp ), l = r = tab [ 0 ]. l , col [ arr [ l ]] ++ ; for ( LL i = 0 , gcdnum ; i < tab . size (); i ++ ) { for (; l < tab [ i ]. l ; l ++ ) col [ arr [ l ]] -- , ans -= col [ arr [ l ]]; for ( -- l ; l >= tab [ i ]. l ; l -- ) ans += col [ arr [ l ]], col [ arr [ l ]] ++ ; for (; r > tab [ i ]. r ; r -- ) col [ arr [ r ]] -- , ans -= col [ arr [ r ]]; for ( ++ r ; r <= tab [ i ]. r ; r ++ ) ans += col [ arr [ r ]], col [ arr [ r ]] ++ ; sub [ tab [ i ]. i ] = ans , l = tab [ i ]. l , r = tab [ i ]. r ; mot [ tab [ i ]. i ] = (( r - l ) * ( r - l + 1 )) >> 1 ; } for ( LL i = 1 , gcdn ; i <= m ; i ++ ) gcdn = gcd ( sub [ i ], mot [ i ]), printf ( \"%lld/%lld \\n \" , sub [ i ] / gcdn , mot [ i ] / gcdn ); return 0 ; }","title":"\u4f8b\u9898 &amp; \u4ee3\u7801"},{"location":"misc/mo-algo/#_9","text":"\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u4f1a\u666e\u901a\u83ab\u961f\u7b97\u6cd5\u4e86\u3002 \u5982\u679c\u60a8\u8fd8\u4e0d\u4f1a\uff0c\u8bf7\u5148\u9605\u8bfb\u4e0a\u9762\u7684 \u201c\u666e\u901a\u83ab\u961f\u7b97\u6cd5\u201d","title":"\u5e26\u4fee\u6539"},{"location":"misc/mo-algo/#_10","text":"\u666e\u901a\u83ab\u961f\u662f\u4e0d\u80fd\u5e26\u4fee\u6539\u7684 \u6211\u4eec\u53ef\u4ee5\u5f3a\u884c\u8ba9\u5b83\u53ef\u4ee5\u4fee\u6539\uff0c\u5c31\u50cf DP \u4e00\u6837\uff0c\u53ef\u4ee5\u5f3a\u884c\u52a0\u4e0a\u4e00\u7ef4 \u65f6\u95f4\u7ef4 , \u8868\u793a\u8fd9\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u3002 \u65f6\u95f4\u7ef4\u8868\u793a\u7ecf\u5386\u7684\u4fee\u6539\u6b21\u6570\u3002 \u5373\u628a\u8be2\u95ee [l,r] [l,r] \u53d8\u6210 [l,r,time] [l,r,time] \u90a3\u4e48\u6211\u4eec\u7684\u5750\u6807\u4e5f\u53ef\u4ee5\u5728\u65f6\u95f4\u7ef4\u4e0a\u79fb\u52a8\uff0c\u5373 [l,r,time] [l,r,time] \u591a\u4e86\u4e00\u7ef4\u53ef\u4ee5\u79fb\u52a8\u7684\u65b9\u5411\uff0c\u53ef\u4ee5\u53d8\u6210\uff1a [l-1,r,time] [l-1,r,time] [l+1,r,time] [l+1,r,time] [l,r-1,time] [l,r-1,time] [l,r+1,time] [l,r+1,time] [l,r,time-1] [l,r,time-1] [l,r,time+1] [l,r,time+1] \u8fd9\u6837\u7684\u8f6c\u79fb\u4e5f\u662f O(1) O(1) \u7684\uff0c\u4f46\u662f\u6211\u4eec\u6392\u5e8f\u53c8\u591a\u4e86\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u518d\u641e\u641e\u5c31\u884c\u4e86 \u53ef\u4ee5\u7528\u548c\u666e\u901a\u83ab\u961f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6392\u5e8f\u8f6c\u79fb\uff0c\u505a\u5230 O(n^{\\frac{5}{3}}) O(n^{\\frac{5}{3}}) \u8fd9\u4e00\u6b21\u6211\u4eec\u6392\u5e8f\u7684\u65b9\u5f0f\u662f\u4ee5 n^{\\frac{2}{3}} n^{\\frac{2}{3}} \u4e3a\u4e00\u5757\uff0c\u5206\u6210\u4e86 n^{\\frac{1}{3}} n^{\\frac{1}{3}} \u5757\uff0c\u7b2c\u4e00\u5173\u952e\u5b57\u662f\u5de6\u7aef\u70b9\u6240\u5728\u5757\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u662f\u53f3\u7aef\u70b9\u6240\u5728\u5757\uff0c\u7b2c\u4e09\u5173\u952e\u5b57\u662f\u65f6\u95f4\u3002 \u8fd8\u662f\u6765\u8bc1\u660e\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u9ed8\u8ba4\u5757\u5927\u5c0f\u4e3a \\sqrt{n} \\sqrt{n} \uff09\uff1a \u5de6\u53f3\u7aef\u70b9\u6240\u5728\u5757\u4e0d\u53d8\uff0c\u65f6\u95f4\u5728\u6392\u5e8f\u540e\u5355\u8c03\u5411\u53f3\u79fb\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f O(n) O(n) \u82e5\u5de6\u53f3\u7aef\u70b9\u6240\u5728\u5757\u6539\u53d8\uff0c\u65f6\u95f4\u4e00\u6b21\u6700\u591a\u4f1a\u79fb\u52a8 n \u4e2a\u683c\u5b50\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) O(n) \u5de6\u7aef\u70b9\u6240\u5728\u5757\u4e00\u5171\u6709 n^{\\frac{1}{3}} n^{\\frac{1}{3}} \u4e2d\uff0c\u53f3\u7aef\u70b9\u4e5f\u662f n^{\\frac{1}{3}} n^{\\frac{1}{3}} \u79cd\uff0c\u4e00\u5171 {n^{\\frac{1}{3}}}\\times{n^{\\frac{1}{3}}}=n^{\\frac{2}{3}} {n^{\\frac{1}{3}}}\\times{n^{\\frac{1}{3}}}=n^{\\frac{2}{3}} \u79cd\uff0c\u6bcf\u79cd\u4e58\u4e0a\u79fb\u52a8\u7684\u590d\u6742\u5ea6 O(n) O(n) \uff0c\u603b\u590d\u6742\u5ea6 O(n^{\\frac{5}{3}}) O(n^{\\frac{5}{3}})","title":"\u7279\u70b9"},{"location":"misc/mo-algo/#_11","text":"\u6570\u989c\u8272 BZOJ - 2120 \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0cM \u4e2a\u64cd\u4f5c\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a \u4fee\u6539\u5e8f\u5217\u4e0a\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 \u8be2\u95ee\u533a\u95f4 [l,r] [l,r] \u4e2d\u6570\u5b57\u7684\u79cd\u7c7b\u6570\uff08\u591a\u4e2a\u76f8\u540c\u7684\u6570\u5b57\u53ea\u7b97\u4e00\u4e2a\uff09 \u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u4e0d\u5e26\u64cd\u4f5c 1\uff08\u4fee\u6539\uff09\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u80fd\u8f7b\u677e\u7528\u666e\u901a\u83ab\u961f\u89e3\u51b3\u3002 \u4f46\u662f\u9898\u76ee\u8fd8\u5e26\u5355\u70b9\u4fee\u6539\uff0c\u6240\u4ee5\u7528 \u5e26\u4fee\u6539\u7684\u83ab\u961f \u3002 \u5148\u8003\u8651\u666e\u901a\u83ab\u961f\u7684\u505a\u6cd5\uff1a \u6bcf\u6b21\u6269\u5927\u533a\u95f4\u65f6\uff0c\u6bcf\u52a0\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u7edf\u8ba1\u5b83\u5df2\u7ecf\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5982\u679c\u52a0\u5165\u524d\u8fd9\u79cd\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u4e3a 0 0 \uff0c\u5219\u8bf4\u660e\u8fd9\u662f\u4e00\u79cd\u65b0\u7684\u6570\u5b57\uff0c\u7b54\u6848 +1 +1 \u3002\u7136\u540e\u8fd9\u79cd\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570 +1 +1 \u3002 \u6bcf\u6b21\u51cf\u5c0f\u533a\u95f4\u65f6\uff0c\u6bcf\u5220\u9664\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u7edf\u8ba1\u5b83\u5220\u9664\u540e\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5982\u679c\u5220\u9664\u540e\u8fd9\u79cd\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u4e3a 0 0 \uff0c\u5219\u8bf4\u660e\u8fd9\u79cd\u6570\u5b57\u5df2\u7ecf\u4ece\u5f53\u524d\u7684\u533a\u95f4\u5185\u5220\u5149\u4e86\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u533a\u95f4\u51cf\u5c11\u4e86\u4e00\u79cd\u989c\u8272\uff0c\u7b54\u6848 -1 -1 \u3002\u7136\u540e\u8fd9\u79cd\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570 -1 -1 \u3002 \u73b0\u5728\u518d\u6765\u8003\u8651\u4fee\u6539\uff1a \u5355\u70b9\u4fee\u6539\uff0c\u628a\u67d0\u4e00\u4f4d\u7684\u6570\u5b57\u4fee\u6539\u6389\u3002\u5047\u5982\u6211\u4eec\u662f\u4ece\u4e00\u4e2a\u7ecf\u5386\u4fee\u6539\u6b21\u6570\u4e3a i i \u7684\u8be2\u95ee\u8f6c\u79fb\u5230\u4e00\u4e2a\u7ecf\u5386\u4fee\u6539\u6b21\u6570\u4e3a j j \u7684\u8be2\u95ee\u4e0a\uff0c\u4e14 i<j i<j \u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a\u7b2c i+1 i+1 \u4e2a\u5230\u7b2c j j \u4e2a\u4fee\u6539\u5f3a\u884c\u52a0\u4e0a\u3002 \u5047\u5982 j<i j<i \u7684\u8bdd\uff0c\u5219\u9700\u8981\u628a\u7b2c i i \u4e2a\u5230\u7b2c j+1 j+1 \u4e2a\u4fee\u6539\u5f3a\u884c\u8fd8\u539f\u3002 \u600e\u4e48\u5f3a\u884c\u52a0\u4e0a\u4e00\u4e2a\u4fee\u6539\u5462\uff1f\u5047\u8bbe\u4e00\u4e2a\u4fee\u6539\u662f\u4fee\u6539\u7b2c pos pos \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u989c\u8272\uff0c\u539f\u672c pos pos \u4e0a\u7684\u989c\u8272\u4e3a a a \uff0c\u4fee\u6539\u540e\u989c\u8272\u4e3a b b \uff0c\u8fd8\u5047\u8bbe\u5f53\u524d\u83ab\u961f\u7684\u533a\u95f4\u6269\u5c55\u5230\u4e86 [l,r] [l,r] \u3002 \u52a0\u4e0a\u8fd9\u4e2a\u4fee\u6539\uff1a\u6211\u4eec\u9996\u5148\u5224\u65ad pos pos \u662f\u5426\u5728\u533a\u95f4 [l,r] [l,r] \u5185\u3002\u5982\u679c\u662f\u7684\u8bdd\uff0c\u6211\u4eec\u7b49\u4e8e\u662f\u4ece\u533a\u95f4\u4e2d\u5220\u6389\u989c\u8272 a a \uff0c\u52a0\u4e0a\u989c\u8272 b b \uff0c\u5e76\u4e14\u5f53\u524d\u989c\u8272\u5e8f\u5217\u7684\u7b2c pos pos \u9879\u7684\u989c\u8272\u6539\u6210 b b \u3002\u5982\u679c\u4e0d\u5728\u533a\u95f4 [l,r] [l,r] \u5185\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u989c\u8272\u5e8f\u5217\u7684\u7b2c pos pos \u9879\u4e3a b b \u3002 \u8fd8\u539f\u8fd9\u4e2a\u4fee\u6539\uff1a\u7b49\u4e8e\u52a0\u4e0a\u4e00\u4e2a\u4fee\u6539\u7b2c pos pos \u9879\u3001\u628a\u989c\u8272 b b \u6539\u6210\u989c\u8272 a a \u7684\u4fee\u6539\u3002 \u56e0\u6b64\u8fd9\u9053\u9898\u5c31\u8fd9\u6837\u7528\u5e26\u4fee\u6539\u83ab\u961f\u8f7b\u677e\u89e3\u51b3\u5566\uff01 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <bits/stdc++.h> #define SZ (10005) using namespace std ; template < typename _Tp > inline void IN ( _Tp & dig ) { char c ; dig = 0 ; while ( c = getchar (), ! isdigit ( c )) ; while ( isdigit ( c )) dig = dig * 10 + c - '0' , c = getchar (); } int n , m , sqn , c [ SZ ], ct [ SZ ], c1 , c2 , mem [ SZ ][ 3 ], ans , tot [ 1000005 ], nal [ SZ ]; struct query { int l , r , i , c ; bool operator < ( const query another ) const { if ( l / sqn == another . l / sqn ) { if ( r / sqn == another . r / sqn ) return i < another . i ; return r < another . r ; } return l < another . l ; } } Q [ SZ ]; void add ( int a ) { if ( ! tot [ a ]) ans ++ ; tot [ a ] ++ ; } void del ( int a ) { tot [ a ] -- ; if ( ! tot [ a ]) ans -- ; } char opt [ 10 ]; int main () { IN ( n ), IN ( m ), sqn = pow ( n , ( double ) 2 / ( double ) 3 ); for ( int i = 1 ; i <= n ; i ++ ) IN ( c [ i ]), ct [ i ] = c [ i ]; for ( int i = 1 , a , b ; i <= m ; i ++ ) if ( scanf ( \"%s\" , opt ), IN ( a ), IN ( b ), opt [ 0 ] == 'Q' ) Q [ c1 ]. l = a , Q [ c1 ]. r = b , Q [ c1 ]. i = c1 , Q [ c1 ]. c = c2 , c1 ++ ; else mem [ c2 ][ 0 ] = a , mem [ c2 ][ 1 ] = ct [ a ], mem [ c2 ][ 2 ] = ct [ a ] = b , c2 ++ ; sort ( Q , Q + c1 ), add ( c [ 1 ]); int l = 1 , r = 1 , lst = 0 ; for ( int i = 0 ; i < c1 ; i ++ ) { for (; lst < Q [ i ]. c ; lst ++ ) { if ( l <= mem [ lst ][ 0 ] && mem [ lst ][ 0 ] <= r ) del ( mem [ lst ][ 1 ]), add ( mem [ lst ][ 2 ]); c [ mem [ lst ][ 0 ]] = mem [ lst ][ 2 ]; } for (; lst > Q [ i ]. c ; lst -- ) { if ( l <= mem [ lst - 1 ][ 0 ] && mem [ lst - 1 ][ 0 ] <= r ) del ( mem [ lst - 1 ][ 2 ]), add ( mem [ lst - 1 ][ 1 ]); c [ mem [ lst - 1 ][ 0 ]] = mem [ lst - 1 ][ 1 ]; } for ( ++ r ; r <= Q [ i ]. r ; r ++ ) add ( c [ r ]); for ( -- r ; r > Q [ i ]. r ; r -- ) del ( c [ r ]); for ( -- l ; l >= Q [ i ]. l ; l -- ) add ( c [ l ]); for ( ++ l ; l < Q [ i ]. l ; l ++ ) del ( c [ l ]); nal [ Q [ i ]. i ] = ans ; } for ( int i = 0 ; i < c1 ; i ++ ) printf ( \"%d \\n \" , nal [ i ]); return 0 ; }","title":"\u4f8b\u9898"},{"location":"misc/mo-algo/#_12","text":"\u83ab\u961f\u53ea\u80fd\u5904\u7406\u7ebf\u6027\u95ee\u9898\uff0c\u6211\u4eec\u8981\u628a\u6811\u5f3a\u884c\u538b\u6210\u5e8f\u5217 \u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u7684\u62ec\u53f7\u5e8f\u8dd1\u4e0b\u6765\uff0c\u628a\u62ec\u53f7\u5e8f\u5206\u5757\uff0c\u5728\u62ec\u53f7\u5e8f\u4e0a\u8dd1\u83ab\u961f \u5177\u4f53\u600e\u4e48\u505a\u5462\uff1f dfs \u4e00\u68f5\u6811\uff0c\u7136\u540e\u5982\u679c dfs \u5230 x \u70b9\uff0c\u5c31 push_back(x),dfs \u5b8c x \u70b9\uff0c\u5c31\u76f4\u63a5 push_back(-x)\uff0c\u7136\u540e\u6211\u4eec\u5728\u632a\u52a8\u6307\u9488\u7684\u65f6\u5019 \u65b0\u52a0\u5165\u7684\u503c\u662f x ---> add(x) \u65b0\u52a0\u5165\u7684\u503c\u662f - x ---> del(x) \u65b0\u5220\u9664\u7684\u503c\u662f x ---> del(x) \u65b0\u5220\u9664\u7684\u503c\u662f - x ---> add(x) \u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u628a\u4e00\u68f5\u6811\u5904\u7406\u6210\u4e86\u5e8f\u5217\u3002 \u4f8b\u9898\u662f [WC2013] \u7cd6\u679c\u516c\u56ed , \u8fd9\u9898\u662f\u5e26\u4fee\u6539\u6811\u4e0a\u83ab\u961f \u9898\u610f\u662f\u7ed9\u4f60\u4e00\u68f5\u6811, \u6bcf\u4e2a\u70b9\u6709\u989c\u8272, \u6bcf\u6b21\u8be2\u95ee \\sum_{c}val_c\\sum_{i=1}^{cnt_c}w_i \\sum_{c}val_c\\sum_{i=1}^{cnt_c}w_i val val \u8868\u793a\u8be5\u989c\u8272\u7684\u4ef7\u503c cnt cnt \u8868\u793a\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570 w w \u8868\u793a\u8be5\u989c\u8272\u51fa\u73b0 i i \u6b21\u540e\u7684\u4ef7\u503c \u5148\u628a\u6811\u53d8\u6210\u5e8f\u5217\uff0c\u7136\u540e\u6bcf\u6b21\u6dfb\u52a0 / \u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u7684\u5bf9\u7b54\u6848\u7684\u7684\u8d21\u732e\u662f\u53ef\u4ee5\u5728 O(1) O(1) \u65f6\u95f4\u5185\u83b7\u5f97\u7684\uff0c\u5373 val_c\\times w_{cnt_{c+1}} val_c\\times w_{cnt_{c+1}} \u53d1\u73b0\u56e0\u4e3a\u4ed6\u4f1a\u628a\u8d77\u70b9\u7684\u5b50\u6811\u4e5f\u626b\u4e86\u4e00\u904d\uff0c\u4ea7\u751f\u591a\u4f59\u7684\u8d21\u732e\uff0c\u600e\u4e48\u529e\u5462\uff1f \u56e0\u4e3a\u626b\u7684\u8fc7\u7a0b\u4e2d\u8d77\u70b9\u7684\u5b50\u6811\u91cc\u7684\u70b9\u80af\u5b9a\u4f1a\u88ab\u626b\u4e24\u6b21\uff0c\u4f46\u8d21\u732e\u4e3a 0 \u6240\u4ee5\u53ef\u4ee5\u5f00\u4e00\u4e2a vis vis \u6570\u7ec4\uff0c\u6bcf\u6b21\u626b\u5230\u70b9 x\uff0c\u5c31\u628a vis_x vis_x \u5f02\u6216\u4e0a 1 \u5982\u679c vis_x=0 vis_x=0 \uff0c\u90a3\u8fd9\u4e2a\u70b9\u7684\u8d21\u732e\u5c31\u53ef\u4ee5\u4e0d\u8ba1 \u6240\u4ee5\u53ef\u4ee5\u7528\u6811\u4e0a\u83ab\u961f\u6765\u6c42 \u4fee\u6539\u7684\u8bdd\uff0c\u52a0\u4e0a\u4e00\u7ef4\u65f6\u95f4\u7ef4\u5373\u53ef, \u53d8\u6210\u5e26\u4fee\u6539\u6811\u4e0a\u83ab\u961f \u7136\u540e\u56e0\u4e3a\u6240\u5305\u542b\u7684\u533a\u95f4\u5185\u53ef\u80fd\u6ca1\u6709 LCA\uff0c\u5bf9\u4e8e\u6ca1\u6709\u7684\u60c5\u51b5\u8981\u5c06\u591a\u4f59\u7684\u8d21\u732e\u5220\u9664\uff0c\u7136\u540e\u5c31\u5b8c\u4e8b\u4e86 code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 #include <algorithm> #include <cmath> #include <cstdio> #include <iostream> #define DEBUG printf(\"line:%d func:%s\\n\", __LINE__, __FUNCTION__); using namespace std ; const int maxn = 200010 ; int f [ maxn ], g [ maxn ], id [ maxn ], head [ maxn ], cnt , last [ maxn ], dep [ maxn ], fa [ maxn ][ 22 ], v [ maxn ], w [ maxn ]; int block , index , n , m , q ; int pos [ maxn ], col [ maxn ], app [ maxn ]; bool vis [ maxn ]; long long ans [ maxn ], cur ; struct edge { int to , nxt ; } e [ maxn ]; int cnt1 = 0 , cnt2 = 0 ; // \u65f6\u95f4\u6233 struct query { int l , r , t , id ; bool operator < ( const query & b ) const { return ( pos [ l ] < pos [ b . l ]) || ( pos [ l ] == pos [ b . l ] && pos [ r ] < pos [ b . r ]) || ( pos [ l ] == pos [ b . l ] && pos [ r ] == pos [ b . r ] && t < b . t ); } } a [ maxn ], b [ maxn ]; inline void addedge ( int x , int y ) { e [ ++ cnt ] = ( edge ){ y , head [ x ]}; head [ x ] = cnt ; } void dfs ( int x ) { id [ f [ x ] = ++ index ] = x ; for ( int i = head [ x ]; i ; i = e [ i ]. nxt ) { if ( e [ i ]. to != fa [ x ][ 0 ]) { fa [ e [ i ]. to ][ 0 ] = x ; dep [ e [ i ]. to ] = dep [ x ] + 1 ; dfs ( e [ i ]. to ); } } id [ g [ x ] = ++ index ] = x ; // \u62ec\u53f7\u5e8f } inline void swap ( int & x , int & y ) { int t ; t = x ; x = y ; y = t ; } inline int lca ( int x , int y ) { if ( dep [ x ] < dep [ y ]) swap ( x , y ); if ( dep [ x ] != dep [ y ]) { int dis = dep [ x ] - dep [ y ]; for ( int i = 20 ; i >= 0 ; i -- ) if ( dis >= ( 1 << i )) dis -= 1 << i , x = fa [ x ][ i ]; } // \u722c\u5230\u540c\u4e00\u9ad8\u5ea6 if ( x == y ) return x ; for ( int i = 20 ; i >= 0 ; i -- ) { if ( fa [ x ][ i ] != fa [ y ][ i ]) x = fa [ x ][ i ], y = fa [ y ][ i ]; } return fa [ x ][ 0 ]; } inline void add ( int x ) { if ( vis [ x ]) cur -= ( long long ) v [ col [ x ]] * w [ app [ col [ x ]] -- ]; else cur += ( long long ) v [ col [ x ]] * w [ ++ app [ col [ x ]]]; vis [ x ] ^= 1 ; } inline void modify ( int x , int t ) { if ( vis [ x ]) { add ( x ); col [ x ] = t ; add ( x ); } else col [ x ] = t ; } // \u5728\u65f6\u95f4\u7ef4\u4e0a\u79fb\u52a8 int main () { scanf ( \"%d%d%d\" , & n , & m , & q ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , & v [ i ]); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & w [ i ]); for ( int i = 1 ; i < n ; i ++ ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); addedge ( x , y ); addedge ( y , x ); } for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & last [ i ]); col [ i ] = last [ i ]; } dfs ( 1 ); for ( int j = 1 ; j <= 20 ; j ++ ) for ( int i = 1 ; i <= n ; i ++ ) fa [ i ][ j ] = fa [ fa [ i ][ j - 1 ]][ j - 1 ]; // \u9884\u5904\u7406\u7956\u5148 int block = pow ( index , 2.0 / 3 ); for ( int i = 1 ; i <= index ; i ++ ) { pos [ i ] = ( i - 1 ) / block ; } while ( q -- ) { int opt , x , y ; scanf ( \"%d%d%d\" , & opt , & x , & y ); if ( opt == 0 ) { b [ ++ cnt2 ]. l = x ; b [ cnt2 ]. r = last [ x ]; last [ x ] = b [ cnt2 ]. t = y ; } else { if ( f [ x ] > f [ y ]) swap ( x , y ); a [ ++ cnt1 ] = ( query ){ lca ( x , y ) == x ? f [ x ] : g [ x ], f [ y ], cnt2 , cnt1 }; } } sort ( a + 1 , a + cnt1 + 1 ); int L , R , T ; // \u6307\u9488\u5750\u6807 L = R = 0 ; T = 1 ; for ( int i = 1 ; i <= cnt1 ; i ++ ) { while ( T <= a [ i ]. t ) { modify ( b [ T ]. l , b [ T ]. t ); T ++ ; } while ( T > a [ i ]. t ) { modify ( b [ T ]. l , b [ T ]. r ); T -- ; } while ( L > a [ i ]. l ) { L -- ; add ( id [ L ]); } while ( L < a [ i ]. l ) { add ( id [ L ]); L ++ ; } while ( R > a [ i ]. r ) { add ( id [ R ]); R -- ; } while ( R < a [ i ]. r ) { R ++ ; add ( id [ R ]); } int x = id [ L ], y = id [ R ]; int llca = lca ( x , y ); if ( x != llca && y != llca ) { add ( llca ); ans [ a [ i ]. id ] = cur ; add ( llca ); } else ans [ a [ i ]. id ] = cur ; } for ( int i = 1 ; i <= cnt1 ; i ++ ) { printf ( \"%lld \\n \" , ans [ i ]); } return 0 ; }","title":"\u6811\u4e0a\u83ab\u961f"},{"location":"misc/non-traditional/","text":"","title":"\u975e\u4f20\u7edf\u9898"},{"location":"misc/offline/","text":"","title":"\u79bb\u7ebf\u5904\u7406"},{"location":"misc/random-incremental/","text":"","title":"\u968f\u673a\u589e\u91cf\u6cd5"},{"location":"misc/random/","text":"","title":"\u968f\u673a\u5316"},{"location":"misc/simulated-annealing/","text":"\u7b80\u4ecb \u00b6 \u6a21\u62df\u9000\u706b\u662f\u4e00\u79cd\u968f\u673a\u5316\u7b97\u6cd5\u3002\u5f53\u4e00\u4e2a\u95ee\u9898\u7684\u65b9\u6848\u6570\u91cf\u6781\u5927\uff08\u751a\u81f3\u662f\u65e0\u7a77\u7684\uff09\u800c\u4e14\u4e0d\u662f\u4e00\u4e2a\u5355\u5cf0\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5e38\u4f7f\u7528\u6a21\u62df\u9000\u706b\u6c42\u89e3\u3002 \u5b9e\u73b0 \u00b6 \u6839\u636e \u722c\u5c71\u7b97\u6cd5 \u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5f53\u524d\u6700\u4f18\u89e3\u9644\u8fd1\u7684\u975e\u6700\u4f18\u89e3\uff0c\u722c\u5c71\u7b97\u6cd5\u76f4\u63a5\u820d\u53bb\u4e86\u8fd9\u4e2a\u89e3\u3002\u800c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u53bb\u63a5\u53d7\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3\u4ece\u800c\u8df3\u51fa\u8fd9\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u5373\u4e3a\u6a21\u62df\u9000\u706b\u7b97\u6cd5\u3002 \u4ec0\u4e48\u662f\u9000\u706b\uff1f \uff08\u9009\u81ea\u767e\u5ea6\u767e\u79d1\uff09 \u9000\u706b\u662f\u4e00\u79cd\u91d1\u5c5e\u70ed\u5904\u7406\u5de5\u827a\uff0c\u6307\u7684\u662f\u5c06\u91d1\u5c5e\u7f13\u6162\u52a0\u70ed\u5230\u4e00\u5b9a\u6e29\u5ea6\uff0c\u4fdd\u6301\u8db3\u591f\u65f6\u95f4\uff0c\u7136\u540e\u4ee5\u9002\u5b9c\u901f\u5ea6\u51b7\u5374\u3002\u76ee\u7684\u662f\u964d\u4f4e\u786c\u5ea6\uff0c\u6539\u5584\u5207\u524a\u52a0\u5de5\u6027\uff1b\u6d88\u9664\u6b8b\u4f59\u5e94\u529b\uff0c\u7a33\u5b9a\u5c3a\u5bf8\uff0c\u51cf\u5c11\u53d8\u5f62\u4e0e\u88c2\u7eb9\u503e\u5411\uff1b\u7ec6\u5316\u6676\u7c92\uff0c\u8c03\u6574\u7ec4\u7ec7\uff0c\u6d88\u9664\u7ec4\u7ec7\u7f3a\u9677\u3002\u51c6\u786e\u7684\u8bf4\uff0c\u9000\u706b\u662f\u4e00\u79cd\u5bf9\u6750\u6599\u7684\u70ed\u5904\u7406\u5de5\u827a\uff0c\u5305\u62ec\u91d1\u5c5e\u6750\u6599\u3001\u975e\u91d1\u5c5e\u6750\u6599\u3002\u800c\u4e14\u65b0\u6750\u6599\u7684\u9000\u706b\u76ee\u7684\u4e5f\u4e0e\u4f20\u7edf\u91d1\u5c5e\u9000\u706b\u5b58\u5728\u5f02\u540c\u3002 \u7531\u4e8e\u9000\u706b\u7684\u89c4\u5f8b\u5f15\u5165\u4e86\u66f4\u591a\u968f\u673a\u56e0\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5f97\u5230\u6700\u4f18\u89e3\u7684\u6982\u7387\u4f1a\u5927\u5927\u589e\u52a0\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u53bb\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5c06\u76ee\u6807\u51fd\u6570\u4f5c\u4e3a\u80fd\u91cf\u51fd\u6570\u3002 \u6a21\u62df\u9000\u706b\u7b97\u6cd5\u63cf\u8ff0 \u00b6 \u5148\u7528\u4e00\u53e5\u8bdd\u6982\u62ec\uff1a\u5982\u679c\u65b0\u72b6\u6001\u7684\u89e3\u66f4\u4f18\u5219\u4fee\u6539\u7b54\u6848\uff0c\u5426\u5219\u4ee5\u4e00\u5b9a\u6982\u7387\u63a5\u53d7\u65b0\u72b6\u6001\u3002 \u6211\u4eec\u5b9a\u4e49\u5f53\u524d\u6e29\u5ea6\u4e3a T T \uff0c\u65b0\u72b6\u6001\u4e0e\u5df2\u77e5\u72b6\u6001\uff08\u7531\u5df2\u77e5\u72b6\u6001\u901a\u8fc7\u968f\u673a\u7684\u65b9\u5f0f\u5f97\u5230\uff09\u4e4b\u95f4\u7684\u80fd\u91cf\uff08\u503c\uff09\u5dee\u4e3a \\Delta E \\Delta E \uff08 \\Delta E\\geqslant 0 \\Delta E\\geqslant 0 \uff09\uff0c\u5219\u53d1\u751f\u72b6\u6001\u8f6c\u79fb\uff08\u4fee\u6539\u6700\u4f18\u89e3\uff09\u7684\u6982\u7387\u4e3a P(\\Delta E)= \\begin{cases} 1&\\text{\u65b0\u72b6\u6001\u66f4\u4f18}\\\\ e^\\frac{-\\Delta E}{T}&\\text{\u65b0\u72b6\u6001\u66f4\u52a3} \\end{cases} P(\\Delta E)= \\begin{cases} 1&\\text{\u65b0\u72b6\u6001\u66f4\u4f18}\\\\ e^\\frac{-\\Delta E}{T}&\\text{\u65b0\u72b6\u6001\u66f4\u52a3} \\end{cases} \u6ce8\u610f \uff1a\u6211\u4eec\u6709\u65f6\u4e3a\u4e86\u4f7f\u5f97\u5230\u7684\u89e3\u66f4\u6709\u8d28\u91cf\uff0c\u4f1a\u5728\u6a21\u62df\u9000\u706b\u7ed3\u675f\u540e\uff0c\u4ee5\u5f53\u524d\u6e29\u5ea6\u5728\u5f97\u5230\u7684\u89e3\u9644\u8fd1\u591a\u6b21\u968f\u673a\u72b6\u6001\uff0c\u5c1d\u8bd5\u5f97\u5230\u66f4\u4f18\u7684\u89e3\uff08\u5176\u8fc7\u7a0b\u4e0e\u6a21\u62df\u9000\u706b\u76f8\u4f3c\uff09\u3002 \u5982\u4f55\u9000\u706b\uff08\u964d\u6e29\uff09\uff1f \u00b6 \u6a21\u62df\u9000\u706b\u65f6\u6211\u4eec\u6709\u4e09\u4e2a\u53c2\u6570\uff1a\u521d\u59cb\u6e29\u5ea6 T_0 T_0 \uff0c\u964d\u6e29\u7cfb\u6570 d d \uff0c\u7ec8\u6b62\u6e29\u5ea6 T_k T_k \u3002\u5176\u4e2d T_0 T_0 \u662f\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\uff0c d d \u662f\u4e00\u4e2a\u975e\u5e38\u63a5\u8fd1 1 1 \u4f46\u662f\u5c0f\u4e8e 1 1 \u7684\u6570\uff0c T_k T_k \u662f\u4e00\u4e2a\u63a5\u8fd1 0 0 \u7684\u6b63\u6570\u3002 \u9996\u5148\u8ba9\u6e29\u5ea6 T=T_0 T=T_0 \uff0c\u7136\u540e\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u8fdb\u884c\u4e00\u6b21\u8f6c\u79fb\u5c1d\u8bd5\uff0c\u518d\u8ba9 T=d\\cdot T T=d\\cdot T \u3002\u5f53 T<T_k T<T_k \u65f6\u6a21\u62df\u9000\u706b\u8fc7\u7a0b\u7ed3\u675f\uff0c\u5f53\u524d\u6700\u4f18\u89e3\u5373\u4e3a\u6700\u7ec8\u7684\u6700\u4f18\u89e3\u3002 \u5f15\u7528\u4e00\u5f20 Wiki - Simulated annealing \u7684\u56fe\u7247\uff08\u968f\u7740\u6e29\u5ea6\u7684\u964d\u4f4e\uff0c\u8df3\u8dc3\u8d8a\u6765\u8d8a\u4e0d\u968f\u673a\uff0c\u6700\u4f18\u89e3\u4e5f\u8d8a\u6765\u8d8a\u7a33\u5b9a\uff09\u3002 \u4ee3\u7801 \u00b6 \u6b64\u5904\u4ee3\u7801\u4ee5 \u300cBZOJ 3680\u300d\u540a\u6253 XXX \uff08\u6c42 n n \u4e2a\u70b9\u7684\u5e26\u6743\u7c7b\u8d39\u9a6c\u70b9\uff09\u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <cmath> #include <cstdio> #include <cstdlib> #include <ctime> const int N = 10005 ; int n , x [ N ], y [ N ], w [ N ]; double ansx , ansy , dis ; double Rand () { return ( double ) rand () / RAND_MAX ; } double calc ( double xx , double yy ) { double res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { double dx = x [ i ] - xx , dy = y [ i ] - yy ; res += sqrt ( dx * dx + dy * dy ) * w [ i ]; } if ( res < dis ) dis = res , ansx = xx , ansy = yy ; return res ; } void simulateAnneal () { double t = 100000 ; double nowx = ansx , nowy = ansy ; while ( t > 0.001 ) { double nxtx = nowx + t * ( Rand () * 2 - 1 ); double nxty = nowy + t * ( Rand () * 2 - 1 ); double delta = calc ( nxtx , nxty ) - calc ( nowx , nowy ); if ( exp ( - delta / t ) > Rand ()) nowx = nxtx , nowy = nxty ; t *= 0.97 ; } for ( int i = 1 ; i <= 1000 ; ++ i ) { double nxtx = ansx + t * ( Rand () * 2 - 1 ); double nxty = ansy + t * ( Rand () * 2 - 1 ); calc ( nxtx , nxty ); } } int main () { srand ( time ( 0 )); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & w [ i ]); ansx += x [ i ], ansy += y [ i ]; } ansx /= n , ansy /= n , dis = calc ( ansx , ansy ); simulateAnneal (); printf ( \"%.3lf %.3lf \\n \" , ansx , ansy ); return 0 ; } \u4e60\u9898 \u00b6 \u300cBZOJ 3680\u300d\u540a\u6253 XXX \u300cJSOI 2016\u300d\u70b8\u5f39\u653b\u51fb \u300cHAOI 2006\u300d\u5747\u5206\u6570\u636e","title":"\u6a21\u62df\u9000\u706b"},{"location":"misc/simulated-annealing/#_1","text":"\u6a21\u62df\u9000\u706b\u662f\u4e00\u79cd\u968f\u673a\u5316\u7b97\u6cd5\u3002\u5f53\u4e00\u4e2a\u95ee\u9898\u7684\u65b9\u6848\u6570\u91cf\u6781\u5927\uff08\u751a\u81f3\u662f\u65e0\u7a77\u7684\uff09\u800c\u4e14\u4e0d\u662f\u4e00\u4e2a\u5355\u5cf0\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5e38\u4f7f\u7528\u6a21\u62df\u9000\u706b\u6c42\u89e3\u3002","title":"\u7b80\u4ecb"},{"location":"misc/simulated-annealing/#_2","text":"\u6839\u636e \u722c\u5c71\u7b97\u6cd5 \u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5f53\u524d\u6700\u4f18\u89e3\u9644\u8fd1\u7684\u975e\u6700\u4f18\u89e3\uff0c\u722c\u5c71\u7b97\u6cd5\u76f4\u63a5\u820d\u53bb\u4e86\u8fd9\u4e2a\u89e3\u3002\u800c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u53bb\u63a5\u53d7\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3\u4ece\u800c\u8df3\u51fa\u8fd9\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u5373\u4e3a\u6a21\u62df\u9000\u706b\u7b97\u6cd5\u3002 \u4ec0\u4e48\u662f\u9000\u706b\uff1f \uff08\u9009\u81ea\u767e\u5ea6\u767e\u79d1\uff09 \u9000\u706b\u662f\u4e00\u79cd\u91d1\u5c5e\u70ed\u5904\u7406\u5de5\u827a\uff0c\u6307\u7684\u662f\u5c06\u91d1\u5c5e\u7f13\u6162\u52a0\u70ed\u5230\u4e00\u5b9a\u6e29\u5ea6\uff0c\u4fdd\u6301\u8db3\u591f\u65f6\u95f4\uff0c\u7136\u540e\u4ee5\u9002\u5b9c\u901f\u5ea6\u51b7\u5374\u3002\u76ee\u7684\u662f\u964d\u4f4e\u786c\u5ea6\uff0c\u6539\u5584\u5207\u524a\u52a0\u5de5\u6027\uff1b\u6d88\u9664\u6b8b\u4f59\u5e94\u529b\uff0c\u7a33\u5b9a\u5c3a\u5bf8\uff0c\u51cf\u5c11\u53d8\u5f62\u4e0e\u88c2\u7eb9\u503e\u5411\uff1b\u7ec6\u5316\u6676\u7c92\uff0c\u8c03\u6574\u7ec4\u7ec7\uff0c\u6d88\u9664\u7ec4\u7ec7\u7f3a\u9677\u3002\u51c6\u786e\u7684\u8bf4\uff0c\u9000\u706b\u662f\u4e00\u79cd\u5bf9\u6750\u6599\u7684\u70ed\u5904\u7406\u5de5\u827a\uff0c\u5305\u62ec\u91d1\u5c5e\u6750\u6599\u3001\u975e\u91d1\u5c5e\u6750\u6599\u3002\u800c\u4e14\u65b0\u6750\u6599\u7684\u9000\u706b\u76ee\u7684\u4e5f\u4e0e\u4f20\u7edf\u91d1\u5c5e\u9000\u706b\u5b58\u5728\u5f02\u540c\u3002 \u7531\u4e8e\u9000\u706b\u7684\u89c4\u5f8b\u5f15\u5165\u4e86\u66f4\u591a\u968f\u673a\u56e0\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5f97\u5230\u6700\u4f18\u89e3\u7684\u6982\u7387\u4f1a\u5927\u5927\u589e\u52a0\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u53bb\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5c06\u76ee\u6807\u51fd\u6570\u4f5c\u4e3a\u80fd\u91cf\u51fd\u6570\u3002","title":"\u5b9e\u73b0"},{"location":"misc/simulated-annealing/#_3","text":"\u5148\u7528\u4e00\u53e5\u8bdd\u6982\u62ec\uff1a\u5982\u679c\u65b0\u72b6\u6001\u7684\u89e3\u66f4\u4f18\u5219\u4fee\u6539\u7b54\u6848\uff0c\u5426\u5219\u4ee5\u4e00\u5b9a\u6982\u7387\u63a5\u53d7\u65b0\u72b6\u6001\u3002 \u6211\u4eec\u5b9a\u4e49\u5f53\u524d\u6e29\u5ea6\u4e3a T T \uff0c\u65b0\u72b6\u6001\u4e0e\u5df2\u77e5\u72b6\u6001\uff08\u7531\u5df2\u77e5\u72b6\u6001\u901a\u8fc7\u968f\u673a\u7684\u65b9\u5f0f\u5f97\u5230\uff09\u4e4b\u95f4\u7684\u80fd\u91cf\uff08\u503c\uff09\u5dee\u4e3a \\Delta E \\Delta E \uff08 \\Delta E\\geqslant 0 \\Delta E\\geqslant 0 \uff09\uff0c\u5219\u53d1\u751f\u72b6\u6001\u8f6c\u79fb\uff08\u4fee\u6539\u6700\u4f18\u89e3\uff09\u7684\u6982\u7387\u4e3a P(\\Delta E)= \\begin{cases} 1&\\text{\u65b0\u72b6\u6001\u66f4\u4f18}\\\\ e^\\frac{-\\Delta E}{T}&\\text{\u65b0\u72b6\u6001\u66f4\u52a3} \\end{cases} P(\\Delta E)= \\begin{cases} 1&\\text{\u65b0\u72b6\u6001\u66f4\u4f18}\\\\ e^\\frac{-\\Delta E}{T}&\\text{\u65b0\u72b6\u6001\u66f4\u52a3} \\end{cases} \u6ce8\u610f \uff1a\u6211\u4eec\u6709\u65f6\u4e3a\u4e86\u4f7f\u5f97\u5230\u7684\u89e3\u66f4\u6709\u8d28\u91cf\uff0c\u4f1a\u5728\u6a21\u62df\u9000\u706b\u7ed3\u675f\u540e\uff0c\u4ee5\u5f53\u524d\u6e29\u5ea6\u5728\u5f97\u5230\u7684\u89e3\u9644\u8fd1\u591a\u6b21\u968f\u673a\u72b6\u6001\uff0c\u5c1d\u8bd5\u5f97\u5230\u66f4\u4f18\u7684\u89e3\uff08\u5176\u8fc7\u7a0b\u4e0e\u6a21\u62df\u9000\u706b\u76f8\u4f3c\uff09\u3002","title":"\u6a21\u62df\u9000\u706b\u7b97\u6cd5\u63cf\u8ff0"},{"location":"misc/simulated-annealing/#_4","text":"\u6a21\u62df\u9000\u706b\u65f6\u6211\u4eec\u6709\u4e09\u4e2a\u53c2\u6570\uff1a\u521d\u59cb\u6e29\u5ea6 T_0 T_0 \uff0c\u964d\u6e29\u7cfb\u6570 d d \uff0c\u7ec8\u6b62\u6e29\u5ea6 T_k T_k \u3002\u5176\u4e2d T_0 T_0 \u662f\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\uff0c d d \u662f\u4e00\u4e2a\u975e\u5e38\u63a5\u8fd1 1 1 \u4f46\u662f\u5c0f\u4e8e 1 1 \u7684\u6570\uff0c T_k T_k \u662f\u4e00\u4e2a\u63a5\u8fd1 0 0 \u7684\u6b63\u6570\u3002 \u9996\u5148\u8ba9\u6e29\u5ea6 T=T_0 T=T_0 \uff0c\u7136\u540e\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u8fdb\u884c\u4e00\u6b21\u8f6c\u79fb\u5c1d\u8bd5\uff0c\u518d\u8ba9 T=d\\cdot T T=d\\cdot T \u3002\u5f53 T<T_k T<T_k \u65f6\u6a21\u62df\u9000\u706b\u8fc7\u7a0b\u7ed3\u675f\uff0c\u5f53\u524d\u6700\u4f18\u89e3\u5373\u4e3a\u6700\u7ec8\u7684\u6700\u4f18\u89e3\u3002 \u5f15\u7528\u4e00\u5f20 Wiki - Simulated annealing \u7684\u56fe\u7247\uff08\u968f\u7740\u6e29\u5ea6\u7684\u964d\u4f4e\uff0c\u8df3\u8dc3\u8d8a\u6765\u8d8a\u4e0d\u968f\u673a\uff0c\u6700\u4f18\u89e3\u4e5f\u8d8a\u6765\u8d8a\u7a33\u5b9a\uff09\u3002","title":"\u5982\u4f55\u9000\u706b\uff08\u964d\u6e29\uff09\uff1f"},{"location":"misc/simulated-annealing/#_5","text":"\u6b64\u5904\u4ee3\u7801\u4ee5 \u300cBZOJ 3680\u300d\u540a\u6253 XXX \uff08\u6c42 n n \u4e2a\u70b9\u7684\u5e26\u6743\u7c7b\u8d39\u9a6c\u70b9\uff09\u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <cmath> #include <cstdio> #include <cstdlib> #include <ctime> const int N = 10005 ; int n , x [ N ], y [ N ], w [ N ]; double ansx , ansy , dis ; double Rand () { return ( double ) rand () / RAND_MAX ; } double calc ( double xx , double yy ) { double res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { double dx = x [ i ] - xx , dy = y [ i ] - yy ; res += sqrt ( dx * dx + dy * dy ) * w [ i ]; } if ( res < dis ) dis = res , ansx = xx , ansy = yy ; return res ; } void simulateAnneal () { double t = 100000 ; double nowx = ansx , nowy = ansy ; while ( t > 0.001 ) { double nxtx = nowx + t * ( Rand () * 2 - 1 ); double nxty = nowy + t * ( Rand () * 2 - 1 ); double delta = calc ( nxtx , nxty ) - calc ( nowx , nowy ); if ( exp ( - delta / t ) > Rand ()) nowx = nxtx , nowy = nxty ; t *= 0.97 ; } for ( int i = 1 ; i <= 1000 ; ++ i ) { double nxtx = ansx + t * ( Rand () * 2 - 1 ); double nxty = ansy + t * ( Rand () * 2 - 1 ); calc ( nxtx , nxty ); } } int main () { srand ( time ( 0 )); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & w [ i ]); ansx += x [ i ], ansy += y [ i ]; } ansx /= n , ansy /= n , dis = calc ( ansx , ansy ); simulateAnneal (); printf ( \"%.3lf %.3lf \\n \" , ansx , ansy ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"misc/simulated-annealing/#_6","text":"\u300cBZOJ 3680\u300d\u540a\u6253 XXX \u300cJSOI 2016\u300d\u70b8\u5f39\u653b\u51fb \u300cHAOI 2006\u300d\u5747\u5206\u6570\u636e","title":"\u4e60\u9898"},{"location":"misc/zhu-liu-algorithm/","text":"","title":"\u6731\u5218\u7b97\u6cd5"},{"location":"search/","text":"\u641c\u7d22\u7684\u601d\u60f3\u6309\u7167\u5728\u72b6\u6001\u7a7a\u95f4\u4e2d\u5c1d\u8bd5\u7684\u987a\u5e8f\u5206\u4e3a\u591a\u79cd\u3002\u641c\u7d22\u770b\u8d77\u6765\u7b80\u5355\uff0c\u4f46\u662f\u5f80\u5f80\u662f\u5f88\u591a\u590d\u6742\u7684\u9898\u76ee\u4e2d\u5fc5\u4e0d\u53ef\u5c11\u7684\u6a21\u5757\u3002 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 (DFS) \u00b6 \u4e3b\u6761\u76ee\uff1a DFS \u4f18\u5148\u6df1\u5165\u904d\u5386\u9760\u524d\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u7528\u5806\u6808\u5b9e\u73b0\u3002 \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22 (BFS) \u00b6 \u4e3b\u6761\u76ee\uff1a BFS \u4f18\u5148\u6269\u5c55\u6d45\u5c42\u8282\u70b9\uff0c\u9010\u6e10\u6df1\u5165\uff0c\u53ef\u4ee5\u7528\u961f\u5217\u5b9e\u73b0\u3002 \u53cc\u5411\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22 \u00b6 \u4e3b\u6761\u76ee\uff1a \u53cc\u5411\u5e7f\u641c \u4ece\u72b6\u6001\u56fe\u4e0a\u8d77\u70b9\u548c\u7ec8\u70b9\u540c\u65f6\u5f00\u59cb\u8fdb\u884c\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5982\u679c\u53d1\u73b0\u76f8\u9047\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u8ba4\u4e3a\u662f\u83b7\u5f97\u4e86\u53ef\u884c\u89e3\u3002 A* \u641c\u7d22 \u00b6 \u4e3b\u6761\u76ee\uff1a A* IDA* \u641c\u7d22 \u00b6 \u4e3b\u6761\u76ee\uff1a IDA* \u526a\u679d \u00b6 \u641c\u7d22\u5f80\u5f80\u662f\u5728\u5e9e\u5927\u7684\u89e3\u7a7a\u95f4\u4e2d\u5c1d\u8bd5\u83b7\u5f97\u6700\u4f18\u89e3\uff0c\u8fd9\u65f6\u5019\u526a\u679d\u5c31\u663e\u5f97\u5341\u5206\u5fc5\u8981\u4e86\u3002\u526a\u679d\u987e\u540d\u601d\u4e49\uff0c\u662f\u8fd0\u7528\u5df2\u6709\u7684\u4fe1\u606f\uff0c\u5c3d\u65e9\u5730\u786e\u5b9a\u4e00\u79cd\u65b9\u6848\u662f\u5426\u53ef\u884c\uff0c\u5982\u679c\u5df2\u7ecf\u77e5\u9053\u65e0\u6cd5\u83b7\u5f97\u6700\u4f18\u89e3\u5c31\u53ca\u65f6\u9000\u56de\u3002\u8fd9\u6837\u7684\u64cd\u4f5c\u5bf9\u4e8e\u641c\u7d22\u6811\u6765\u8bf4\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u641c\u7d22\u6811\u4e0a\u526a\u6389\u4e00\u4e9b\u679d\u6748\u3002 \u526a\u679d\u601d\u8def\u6709\u5f88\u591a\u79cd\uff0c\u5927\u591a\u9700\u8981\u5bf9\u4e8e\u5177\u4f53\u95ee\u9898\u6765\u5206\u6790\uff0c\u5728\u6b64\u7b80\u8981\u4ecb\u7ecd\u51e0\u79cd\u5e38\u89c1\u7684\u526a\u679d\u601d\u8def\u3002 \u6781\u7aef\u6cd5 \u00b6 \u8003\u8651\u6781\u7aef\u60c5\u51b5\uff0c\u5982\u679c\u6700\u6781\u7aef\uff08\u6700\u7406\u60f3\uff09\u7684\u60c5\u51b5\u90fd\u65e0\u6cd5\u6ee1\u8db3\uff0c\u90a3\u4e48\u80af\u5b9a\u5b9e\u9645\u60c5\u51b5\u641c\u51fa\u6765\u7684\u7ed3\u679c\u4e0d\u4f1a\u66f4\u4f18\u4e86\u3002 \u8c03\u6574\u6cd5 \u00b6 \u901a\u8fc7\u5bf9\u5b50\u6811\u7684\u6bd4\u8f83\u526a\u6389\u91cd\u590d\u5b50\u6811\u548c\u660e\u663e\u4e0d\u662f\u6700\u6709 \u201c\u524d\u9014\u201d \u7684\u5b50\u6811\u3002 \u6570\u5b66\u65b9\u6cd5 \u00b6 \u6bd4\u5982\u5728\u56fe\u8bba\u4e2d\u501f\u52a9\u8fde\u901a\u5206\u91cf\uff0c\u6570\u8bba\u4e2d\u501f\u52a9\u6a21\u65b9\u7a0b\u7684\u5206\u6790\uff0c\u501f\u52a9\u4e0d\u7b49\u5f0f\u7684\u653e\u7f29\u6765\u4f30\u8ba1\u4e0b\u754c\u7b49\u7b49\u3002 meet-in-middle \u5206\u6cbb \u00b6 \u4e5f\u79f0\u6298\u534a\u641c\u7d22\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u5206\u6cbb\uff0c\u901a\u8fc7\u5c06\u679a\u4e3e\u91cf\u51cf\u5c11\u5230\u539f\u6765\u7684\u4e00\u534a\u548c\u7279\u6b8a\u7684\u5408\u5e76\u6280\u5de7\u4ee5\u4f7f\u60c5\u51b5\u6570\u51cf\u5c11\u5230\u539f\u6765\u7684 sqrt\uff0c\u590d\u6742\u5ea6\u4e5f\u5c31\u5f00\u4e86\u4e2a\u65b9\uff0c\u6298\u534a\u641c\u7d22\u4e5f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f18\u5316\uff0c\u5f80\u5f80\u80fd\u5728 OI \u7ade\u8d5b\u4e2d\u83b7\u5f97\u51fa\u4eba\u610f\u6599\u7684\u6548\u679c\uff08\u5c24\u5176\u5728\u9762\u5bf9\u6570\u636e\u6c34\u7684\u65f6\u5019\uff09 \u6240\u8c13 meet-in-middle , \u5c31\u662f\u8ba9 dfs \u7684\u72b6\u6001\u5728\u4e2d\u95f4\u7684\u65f6\u5019\u78b0\u9762\u3002\u6211\u4eec\u77e5\u9053, \u5982\u679c\u4e00\u4e2a\u66b4\u529b dfs \u6709 K K \u4e2a\u8f6c\u79fb, \u90a3\u4e48\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6 (\u5927\u591a\u6570\u60c5\u51b5) \u662f O(K^N) O(K^N) \u7684\u3002\u90a3\u6211\u4eec\u5c31\u60f3, \u5f53 N N \u5230\u8fbe\u4e00\u5b9a\u7a0b\u5ea6\u65f6, TLE \u4f1a\u53d8\u6210\u5fc5\u7136\u3002 \u4f8b\u9898 luogu P2962 [USACO09NOV]\u706f Lights \u6211\u4eec\u6b63\u5e38\u60f3, \u5982\u679c\u8fd9\u9053\u9898\u66b4\u529b dfs \u627e\u5f00\u5173\u706f\u7684\u72b6\u6001, \u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(2^{35}) O(2^{35}) , \u663e\u7136\u8d85\u65f6\u3002\u4e0d\u8fc7, \u5982\u679c\u6211\u4eec\u7528 meet-in-middle \u7684\u8bdd, \u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u53d8\u4e3a O(2^{18} \\times 2) O(2^{18} \\times 2) \u800c\u5df2\u3002 meet-in-middle \u5c31\u662f\u8ba9\u6211\u4eec\u5148\u627e\u4e00\u534a\u7684\u72b6\u6001, \u4e5f\u5c31\u662f 1 1 \u5230 mid mid ( N N \u7684\u4e00\u534a) \u7684\u72b6\u6001, \u518d\u627e\u5269\u4e0b\u7684\u72b6\u6001\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u628a\u524d\u534a\u6bb5\u7684\u72b6\u6001\u5168\u90e8\u5b58\u50a8\u5728 hash hash \u8868\u6216\u8005 map map \u91cc\u9762, \u7136\u540e\u5728\u627e\u540e\u534a\u6bb5\u7684\u72b6\u6001\u7684\u65f6\u5019, \u5148\u5224\u65ad\u540e\u534a\u6bb5\u662f\u4e0d\u662f\u90fd\u5408\u6cd5, \u5c31\u53ef\u4ee5\u5224\u65ad\u4e0a\u534a\u6bb5\u6709\u6ca1\u6709\u914d\u5bf9\u7684\u4e0a\u534a\u6bb5\u4f7f\u5f97\u6574\u6bb5\u5408\u6cd5\u3002","title":"\u641c\u7d22\u90e8\u5206\u7b80\u4ecb"},{"location":"search/#dfs","text":"\u4e3b\u6761\u76ee\uff1a DFS \u4f18\u5148\u6df1\u5165\u904d\u5386\u9760\u524d\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u7528\u5806\u6808\u5b9e\u73b0\u3002","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 (DFS)"},{"location":"search/#bfs","text":"\u4e3b\u6761\u76ee\uff1a BFS \u4f18\u5148\u6269\u5c55\u6d45\u5c42\u8282\u70b9\uff0c\u9010\u6e10\u6df1\u5165\uff0c\u53ef\u4ee5\u7528\u961f\u5217\u5b9e\u73b0\u3002","title":"\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22 (BFS)"},{"location":"search/#_1","text":"\u4e3b\u6761\u76ee\uff1a \u53cc\u5411\u5e7f\u641c \u4ece\u72b6\u6001\u56fe\u4e0a\u8d77\u70b9\u548c\u7ec8\u70b9\u540c\u65f6\u5f00\u59cb\u8fdb\u884c\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5982\u679c\u53d1\u73b0\u76f8\u9047\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u8ba4\u4e3a\u662f\u83b7\u5f97\u4e86\u53ef\u884c\u89e3\u3002","title":"\u53cc\u5411\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"search/#a42","text":"\u4e3b\u6761\u76ee\uff1a A*","title":"A* \u641c\u7d22"},{"location":"search/#ida42","text":"\u4e3b\u6761\u76ee\uff1a IDA*","title":"IDA* \u641c\u7d22"},{"location":"search/#_2","text":"\u641c\u7d22\u5f80\u5f80\u662f\u5728\u5e9e\u5927\u7684\u89e3\u7a7a\u95f4\u4e2d\u5c1d\u8bd5\u83b7\u5f97\u6700\u4f18\u89e3\uff0c\u8fd9\u65f6\u5019\u526a\u679d\u5c31\u663e\u5f97\u5341\u5206\u5fc5\u8981\u4e86\u3002\u526a\u679d\u987e\u540d\u601d\u4e49\uff0c\u662f\u8fd0\u7528\u5df2\u6709\u7684\u4fe1\u606f\uff0c\u5c3d\u65e9\u5730\u786e\u5b9a\u4e00\u79cd\u65b9\u6848\u662f\u5426\u53ef\u884c\uff0c\u5982\u679c\u5df2\u7ecf\u77e5\u9053\u65e0\u6cd5\u83b7\u5f97\u6700\u4f18\u89e3\u5c31\u53ca\u65f6\u9000\u56de\u3002\u8fd9\u6837\u7684\u64cd\u4f5c\u5bf9\u4e8e\u641c\u7d22\u6811\u6765\u8bf4\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u641c\u7d22\u6811\u4e0a\u526a\u6389\u4e00\u4e9b\u679d\u6748\u3002 \u526a\u679d\u601d\u8def\u6709\u5f88\u591a\u79cd\uff0c\u5927\u591a\u9700\u8981\u5bf9\u4e8e\u5177\u4f53\u95ee\u9898\u6765\u5206\u6790\uff0c\u5728\u6b64\u7b80\u8981\u4ecb\u7ecd\u51e0\u79cd\u5e38\u89c1\u7684\u526a\u679d\u601d\u8def\u3002","title":"\u526a\u679d"},{"location":"search/#_3","text":"\u8003\u8651\u6781\u7aef\u60c5\u51b5\uff0c\u5982\u679c\u6700\u6781\u7aef\uff08\u6700\u7406\u60f3\uff09\u7684\u60c5\u51b5\u90fd\u65e0\u6cd5\u6ee1\u8db3\uff0c\u90a3\u4e48\u80af\u5b9a\u5b9e\u9645\u60c5\u51b5\u641c\u51fa\u6765\u7684\u7ed3\u679c\u4e0d\u4f1a\u66f4\u4f18\u4e86\u3002","title":"\u6781\u7aef\u6cd5"},{"location":"search/#_4","text":"\u901a\u8fc7\u5bf9\u5b50\u6811\u7684\u6bd4\u8f83\u526a\u6389\u91cd\u590d\u5b50\u6811\u548c\u660e\u663e\u4e0d\u662f\u6700\u6709 \u201c\u524d\u9014\u201d \u7684\u5b50\u6811\u3002","title":"\u8c03\u6574\u6cd5"},{"location":"search/#_5","text":"\u6bd4\u5982\u5728\u56fe\u8bba\u4e2d\u501f\u52a9\u8fde\u901a\u5206\u91cf\uff0c\u6570\u8bba\u4e2d\u501f\u52a9\u6a21\u65b9\u7a0b\u7684\u5206\u6790\uff0c\u501f\u52a9\u4e0d\u7b49\u5f0f\u7684\u653e\u7f29\u6765\u4f30\u8ba1\u4e0b\u754c\u7b49\u7b49\u3002","title":"\u6570\u5b66\u65b9\u6cd5"},{"location":"search/#meet-in-middle","text":"\u4e5f\u79f0\u6298\u534a\u641c\u7d22\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u5206\u6cbb\uff0c\u901a\u8fc7\u5c06\u679a\u4e3e\u91cf\u51cf\u5c11\u5230\u539f\u6765\u7684\u4e00\u534a\u548c\u7279\u6b8a\u7684\u5408\u5e76\u6280\u5de7\u4ee5\u4f7f\u60c5\u51b5\u6570\u51cf\u5c11\u5230\u539f\u6765\u7684 sqrt\uff0c\u590d\u6742\u5ea6\u4e5f\u5c31\u5f00\u4e86\u4e2a\u65b9\uff0c\u6298\u534a\u641c\u7d22\u4e5f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f18\u5316\uff0c\u5f80\u5f80\u80fd\u5728 OI \u7ade\u8d5b\u4e2d\u83b7\u5f97\u51fa\u4eba\u610f\u6599\u7684\u6548\u679c\uff08\u5c24\u5176\u5728\u9762\u5bf9\u6570\u636e\u6c34\u7684\u65f6\u5019\uff09 \u6240\u8c13 meet-in-middle , \u5c31\u662f\u8ba9 dfs \u7684\u72b6\u6001\u5728\u4e2d\u95f4\u7684\u65f6\u5019\u78b0\u9762\u3002\u6211\u4eec\u77e5\u9053, \u5982\u679c\u4e00\u4e2a\u66b4\u529b dfs \u6709 K K \u4e2a\u8f6c\u79fb, \u90a3\u4e48\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6 (\u5927\u591a\u6570\u60c5\u51b5) \u662f O(K^N) O(K^N) \u7684\u3002\u90a3\u6211\u4eec\u5c31\u60f3, \u5f53 N N \u5230\u8fbe\u4e00\u5b9a\u7a0b\u5ea6\u65f6, TLE \u4f1a\u53d8\u6210\u5fc5\u7136\u3002 \u4f8b\u9898 luogu P2962 [USACO09NOV]\u706f Lights \u6211\u4eec\u6b63\u5e38\u60f3, \u5982\u679c\u8fd9\u9053\u9898\u66b4\u529b dfs \u627e\u5f00\u5173\u706f\u7684\u72b6\u6001, \u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(2^{35}) O(2^{35}) , \u663e\u7136\u8d85\u65f6\u3002\u4e0d\u8fc7, \u5982\u679c\u6211\u4eec\u7528 meet-in-middle \u7684\u8bdd, \u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u53d8\u4e3a O(2^{18} \\times 2) O(2^{18} \\times 2) \u800c\u5df2\u3002 meet-in-middle \u5c31\u662f\u8ba9\u6211\u4eec\u5148\u627e\u4e00\u534a\u7684\u72b6\u6001, \u4e5f\u5c31\u662f 1 1 \u5230 mid mid ( N N \u7684\u4e00\u534a) \u7684\u72b6\u6001, \u518d\u627e\u5269\u4e0b\u7684\u72b6\u6001\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u628a\u524d\u534a\u6bb5\u7684\u72b6\u6001\u5168\u90e8\u5b58\u50a8\u5728 hash hash \u8868\u6216\u8005 map map \u91cc\u9762, \u7136\u540e\u5728\u627e\u540e\u534a\u6bb5\u7684\u72b6\u6001\u7684\u65f6\u5019, \u5148\u5224\u65ad\u540e\u534a\u6bb5\u662f\u4e0d\u662f\u90fd\u5408\u6cd5, \u5c31\u53ef\u4ee5\u5224\u65ad\u4e0a\u534a\u6bb5\u6709\u6ca1\u6709\u914d\u5bf9\u7684\u4e0a\u534a\u6bb5\u4f7f\u5f97\u6574\u6bb5\u5408\u6cd5\u3002","title":"meet-in-middle \u5206\u6cbb"},{"location":"search/astar/","text":"A* \u7b97\u6cd5\u662f BFS \u7684\u4e00\u79cd\u6539\u8fdb\u3002 \u5b9a\u4e49\u8d77\u70b9 s s \uff0c\u7ec8\u70b9 t t \u3002 \u4ece\u8d77\u70b9\uff08\u521d\u59cb\u72b6\u6001\uff09\u5f00\u59cb\u7684\u8ddd\u79bb\u51fd\u6570 g(x) g(x) \u3002 \u5230\u7ec8\u70b9\uff08\u6700\u7ec8\u72b6\u6001\uff09\u7684\u8ddd\u79bb\u51fd\u6570 h(x), h*(x) h(x), h*(x) \u3002 \u5b9a\u4e49\u6bcf\u4e2a\u70b9\u7684\u4f30\u4ef7\u51fd\u6570 f(x)=g(x)+h(x) f(x)=g(x)+h(x) \u3002 A* \u7b97\u6cd5\u6bcf\u6b21\u4ece \u4f18\u5148\u961f\u5217 \u4e2d\u53d6\u51fa\u4e00\u4e2a f f \u6700\u5c0f\u7684\uff0c\u7136\u540e\u66f4\u65b0\u76f8\u90bb\u7684\u72b6\u6001\u3002 \u5982\u679c h\\leq h* h\\leq h* \uff0c\u5219 A* \u7b97\u6cd5\u80fd\u627e\u5230\u6700\u4f18\u89e3\u3002 \u4e0a\u8ff0\u6761\u4ef6\u4e0b\uff0c\u5982\u679c h h \u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u5219 A* \u7b97\u6cd5\u4e0d\u4f1a\u5c06\u91cd\u590d\u7ed3\u70b9\u52a0\u5165\u961f\u5217 \u3002 \u5176\u5b9e\u2026\u2026 h=0 h=0 \u65f6\u5c31\u662f DFS \u7b97\u6cd5\uff0c h=0 h=0 \u5e76\u4e14\u8fb9\u6743\u4e3a 1 1 \u65f6\u5c31\u662f BFS \u3002 \u4f8b\u9898 \u516b\u6570\u7801 \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u5728 3\\times 3 3\\times 3 \u7684\u68cb\u76d8\u4e0a\uff0c\u6446\u6709\u516b\u4e2a\u68cb\u5b50\uff0c\u6bcf\u4e2a\u68cb\u5b50\u4e0a\u6807\u6709 1 \u81f3 8 \u7684\u67d0\u4e00\u6570\u5b57\u3002\u68cb\u76d8\u4e2d\u7559\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u7a7a\u683c\u7528 0 \u6765\u8868\u793a\u3002\u7a7a\u683c\u5468\u56f4\u7684\u68cb\u5b50\u53ef\u4ee5\u79fb\u5230\u7a7a\u683c\u4e2d\uff0c\u8fd9\u6837\u539f\u6765\u7684\u4f4d\u7f6e\u5c31\u4f1a\u53d8\u6210\u7a7a\u683c\u3002\u7ed9\u51fa\u4e00\u79cd\u521d\u59cb\u5e03\u5c40\u548c\u76ee\u6807\u5e03\u5c40\uff08\u4e3a\u4e86\u4f7f\u9898\u76ee\u7b80\u5355, \u8bbe\u76ee\u6807\u72b6\u6001\u4e3a 1 2 3 123 804 765 \uff09\uff0c\u627e\u5230\u4e00\u79cd\u4ece\u521d\u59cb\u5e03\u5c40\u5230\u76ee\u6807\u5e03\u5c40\u6700\u5c11\u6b65\u9aa4\u7684\u79fb\u52a8\u65b9\u6cd5\u3002 h h \u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff0c\u4e0d\u5728\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u4e2a\u6570\u3002 \u5bb9\u6613\u53d1\u73b0 h h \u6ee1\u8db3\u4ee5\u4e0a\u4e24\u4e2a\u6027\u8d28\uff0c\u6b64\u9898\u53ef\u4ee5\u4f7f\u7528 A* \u7b97\u6cd5\u6c42\u89e3\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <algorithm> #include <cstdio> #include <cstring> #include <queue> #include <set> using namespace std ; const int dx [ 4 ] = { 1 , - 1 , 0 , 0 }, dy [ 4 ] = { 0 , 0 , 1 , - 1 }; int fx , fy ; char ch ; struct matrix { int a [ 5 ][ 5 ]; bool operator < ( matrix x ) const { for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) if ( a [ i ][ j ] != x . a [ i ][ j ]) return a [ i ][ j ] < x . a [ i ][ j ]; return false ; } } f , st ; int h ( matrix a ) { int ret = 0 ; for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) if ( a . a [ i ][ j ] != st . a [ i ][ j ]) ret ++ ; return ret ; } struct node { matrix a ; int t ; bool operator < ( node x ) const { return t + h ( a ) > x . t + h ( x . a ); } } x ; priority_queue < node > q ; set < matrix > s ; int main () { st . a [ 1 ][ 1 ] = 1 ; st . a [ 1 ][ 2 ] = 2 ; st . a [ 1 ][ 3 ] = 3 ; st . a [ 2 ][ 1 ] = 8 ; st . a [ 2 ][ 2 ] = 0 ; st . a [ 2 ][ 3 ] = 4 ; st . a [ 3 ][ 1 ] = 7 ; st . a [ 3 ][ 2 ] = 6 ; st . a [ 3 ][ 3 ] = 5 ; for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) { scanf ( \" %c\" , & ch ); f . a [ i ][ j ] = ch - '0' ; } q . push ({ f , 0 }); while ( ! q . empty ()) { x = q . top (); q . pop (); if ( ! h ( x . a )) { printf ( \"%d \\n \" , x . t ); return 0 ; } for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) if ( ! x . a . a [ i ][ j ]) fx = i , fy = j ; for ( int i = 0 ; i < 4 ; i ++ ) { int xx = fx + dx [ i ], yy = fy + dy [ i ]; if ( 1 <= xx && xx <= 3 && 1 <= yy && yy <= 3 ) { swap ( x . a . a [ fx ][ fy ], x . a . a [ xx ][ yy ]); if ( ! s . count ( x . a )) s . insert ( x . a ), q . push ({ x . a , x . t + 1 }); swap ( x . a . a [ fx ][ fy ], x . a . a [ xx ][ yy ]); } } } return 0 ; } \u4f8b\u9898 k \u77ed\u8def \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u6309\u987a\u5e8f\u6c42\u4e00\u4e2a\u6709\u5411\u56fe\u4e0a\u4ece\u7ed3\u70b9 s s \u5230\u7ed3\u70b9 t t \u7684\u6240\u6709\u8def\u5f84\u6700\u5c0f\u7684\u524d\u4efb\u610f\u591a\uff08\u4e0d\u59a8\u8bbe\u4e3a k k \uff09\u4e2a\u3002 \u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\u8f6c\u5316\u6210\u7528 A* \u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u6807\u51c6\u7a0b\u5f0f\u3002 \u521d\u59cb\u72b6\u6001\u4e3a\u5904\u4e8e\u7ed3\u70b9 s s \uff0c\u6700\u7ec8\u72b6\u6001\u4e3a\u5904\u4e8e\u7ed3\u70b9 t t \uff0c\u8ddd\u79bb\u51fd\u6570\u4e3a\u4ece s s \u5230\u5f53\u524d\u7ed3\u70b9\u5df2\u7ecf\u8d70\u8fc7\u7684\u8ddd\u79bb\uff0c\u4f30\u4ef7\u51fd\u6570\u4e3a\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u7ed3\u70b9 t t \u81f3\u5c11\u8981\u8d70\u8fc7\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u7ed3\u70b9\u5230\u7ed3\u70b9 t t \u7684\u6700\u77ed\u8def\u3002 \u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u5728\u9884\u5904\u7406\u7684\u65f6\u5019\u53cd\u5411\u5efa\u56fe\uff0c\u8ba1\u7b97\u51fa\u7ed3\u70b9 t t \u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u5c06\u521d\u59cb\u72b6\u6001\u585e\u5165\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u53d6\u51fa f(x)=g(x)+h(x) f(x)=g(x)+h(x) \u6700\u5c0f\u7684\u4e00\u9879\uff0c\u8ba1\u7b97\u51fa\u5176\u6240\u8fde\u7ed3\u70b9\u7684\u4fe1\u606f\u5e76\u5c06\u5176\u4e5f\u585e\u5165\u961f\u5217\u3002\u5f53\u4f60\u7b2c k k \u6b21\u8d70\u5230\u7ed3\u70b9 t t \u65f6\uff0c\u4e5f\u5c31\u7b97\u51fa\u4e86\u7ed3\u70b9 s s \u5230\u7ed3\u70b9 t t \u7684 k k \u77ed\u8def\u3002 \u7531\u4e8e\u8bbe\u8ba1\u7684\u8ddd\u79bb\u51fd\u6570\u548c\u4f30\u4ef7\u51fd\u6570\uff0c\u6bcf\u4e2a\u72b6\u6001\u9700\u8981\u5b58\u50a8\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u524d\u7ed3\u70b9 x x \u548c\u5df2\u7ecf\u8d70\u8fc7\u7684\u8ddd\u79bb v v \u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u4e00\u70b9\u5c0f\u4f18\u5316\uff1a\u7531\u4e8e\u53ea\u9700\u8981\u6c42\u51fa\u7b2c k k \u77ed\u8def\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u7b2c k+1 k+1 \u6b21\u6216\u4ee5\u4e0a\u8d70\u5230\u8be5\u7ed3\u70b9\u65f6\uff0c\u76f4\u63a5\u8df3\u8fc7\u8be5\u72b6\u6001\u3002\u56e0\u4e3a\u524d\u9762\u7684 k k \u6b21\u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u80af\u5b9a\u80fd\u56e0\u6b64\u6784\u9020\u51fa k k \u6761\u8def\u5f84\uff0c\u6240\u4ee5\u4e4b\u540e\u5728\u52a0\u8fb9\u66f4\u65e0\u5fc5\u8981\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <algorithm> #include <cstdio> #include <cstring> #include <queue> using namespace std ; const int maxn = 5010 ; const int maxm = 400010 ; const double inf = 2e9 ; int n , m , k , u , v , cur , h [ maxn ], nxt [ maxm ], p [ maxm ], cnt [ maxn ], ans ; int cur1 , h1 [ maxn ], nxt1 [ maxm ], p1 [ maxm ]; double e , ww , w [ maxm ], f [ maxn ]; double w1 [ maxm ]; bool tf [ maxn ]; void add_edge ( int x , int y , double z ) { cur ++ ; nxt [ cur ] = h [ x ]; h [ x ] = cur ; p [ cur ] = y ; w [ cur ] = z ; } void add_edge1 ( int x , int y , double z ) { cur1 ++ ; nxt1 [ cur1 ] = h1 [ x ]; h1 [ x ] = cur1 ; p1 [ cur1 ] = y ; w1 [ cur1 ] = z ; } struct node { int x ; double v ; bool operator < ( node a ) const { return v + f [ x ] > a . v + f [ a . x ]; } }; priority_queue < node > q ; struct node2 { int x ; double v ; bool operator < ( node2 a ) const { return v > a . v ; } } x ; priority_queue < node2 > Q ; int main () { scanf ( \"%d%d%lf\" , & n , & m , & e ); while ( m -- ) { scanf ( \"%d%d%lf\" , & u , & v , & ww ); add_edge ( u , v , ww ); add_edge1 ( v , u , ww ); } for ( int i = 1 ; i < n ; i ++ ) f [ i ] = inf ; Q . push ({ n , 0 }); while ( ! Q . empty ()) { x = Q . top (); Q . pop (); if ( tf [ x . x ]) continue ; tf [ x . x ] = true ; f [ x . x ] = x . v ; for ( int j = h1 [ x . x ]; j ; j = nxt1 [ j ]) Q . push ({ p1 [ j ], x . v + w1 [ j ]}); } k = ( int ) e / f [ 1 ]; q . push ({ 1 , 0 }); while ( ! q . empty ()) { node x = q . top (); q . pop (); cnt [ x . x ] ++ ; if ( x . x == n ) { e -= x . v ; if ( e < 0 ) { printf ( \"%d \\n \" , ans ); return 0 ; } ans ++ ; } for ( int j = h [ x . x ]; j ; j = nxt [ j ]) if ( cnt [ p [ j ]] <= k && x . v + w [ j ] <= e ) q . push ({ p [ j ], x . v + w [ j ]}); } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"A*"},{"location":"search/astar/#_1","text":"\u9898\u76ee\u5927\u610f\uff1a\u5728 3\\times 3 3\\times 3 \u7684\u68cb\u76d8\u4e0a\uff0c\u6446\u6709\u516b\u4e2a\u68cb\u5b50\uff0c\u6bcf\u4e2a\u68cb\u5b50\u4e0a\u6807\u6709 1 \u81f3 8 \u7684\u67d0\u4e00\u6570\u5b57\u3002\u68cb\u76d8\u4e2d\u7559\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u7a7a\u683c\u7528 0 \u6765\u8868\u793a\u3002\u7a7a\u683c\u5468\u56f4\u7684\u68cb\u5b50\u53ef\u4ee5\u79fb\u5230\u7a7a\u683c\u4e2d\uff0c\u8fd9\u6837\u539f\u6765\u7684\u4f4d\u7f6e\u5c31\u4f1a\u53d8\u6210\u7a7a\u683c\u3002\u7ed9\u51fa\u4e00\u79cd\u521d\u59cb\u5e03\u5c40\u548c\u76ee\u6807\u5e03\u5c40\uff08\u4e3a\u4e86\u4f7f\u9898\u76ee\u7b80\u5355, \u8bbe\u76ee\u6807\u72b6\u6001\u4e3a 1 2 3 123 804 765 \uff09\uff0c\u627e\u5230\u4e00\u79cd\u4ece\u521d\u59cb\u5e03\u5c40\u5230\u76ee\u6807\u5e03\u5c40\u6700\u5c11\u6b65\u9aa4\u7684\u79fb\u52a8\u65b9\u6cd5\u3002 h h \u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff0c\u4e0d\u5728\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u4e2a\u6570\u3002 \u5bb9\u6613\u53d1\u73b0 h h \u6ee1\u8db3\u4ee5\u4e0a\u4e24\u4e2a\u6027\u8d28\uff0c\u6b64\u9898\u53ef\u4ee5\u4f7f\u7528 A* \u7b97\u6cd5\u6c42\u89e3\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <algorithm> #include <cstdio> #include <cstring> #include <queue> #include <set> using namespace std ; const int dx [ 4 ] = { 1 , - 1 , 0 , 0 }, dy [ 4 ] = { 0 , 0 , 1 , - 1 }; int fx , fy ; char ch ; struct matrix { int a [ 5 ][ 5 ]; bool operator < ( matrix x ) const { for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) if ( a [ i ][ j ] != x . a [ i ][ j ]) return a [ i ][ j ] < x . a [ i ][ j ]; return false ; } } f , st ; int h ( matrix a ) { int ret = 0 ; for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) if ( a . a [ i ][ j ] != st . a [ i ][ j ]) ret ++ ; return ret ; } struct node { matrix a ; int t ; bool operator < ( node x ) const { return t + h ( a ) > x . t + h ( x . a ); } } x ; priority_queue < node > q ; set < matrix > s ; int main () { st . a [ 1 ][ 1 ] = 1 ; st . a [ 1 ][ 2 ] = 2 ; st . a [ 1 ][ 3 ] = 3 ; st . a [ 2 ][ 1 ] = 8 ; st . a [ 2 ][ 2 ] = 0 ; st . a [ 2 ][ 3 ] = 4 ; st . a [ 3 ][ 1 ] = 7 ; st . a [ 3 ][ 2 ] = 6 ; st . a [ 3 ][ 3 ] = 5 ; for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) { scanf ( \" %c\" , & ch ); f . a [ i ][ j ] = ch - '0' ; } q . push ({ f , 0 }); while ( ! q . empty ()) { x = q . top (); q . pop (); if ( ! h ( x . a )) { printf ( \"%d \\n \" , x . t ); return 0 ; } for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) if ( ! x . a . a [ i ][ j ]) fx = i , fy = j ; for ( int i = 0 ; i < 4 ; i ++ ) { int xx = fx + dx [ i ], yy = fy + dy [ i ]; if ( 1 <= xx && xx <= 3 && 1 <= yy && yy <= 3 ) { swap ( x . a . a [ fx ][ fy ], x . a . a [ xx ][ yy ]); if ( ! s . count ( x . a )) s . insert ( x . a ), q . push ({ x . a , x . t + 1 }); swap ( x . a . a [ fx ][ fy ], x . a . a [ xx ][ yy ]); } } } return 0 ; }","title":"\u4f8b\u9898 \u516b\u6570\u7801"},{"location":"search/astar/#k","text":"\u9898\u76ee\u5927\u610f\uff1a\u6309\u987a\u5e8f\u6c42\u4e00\u4e2a\u6709\u5411\u56fe\u4e0a\u4ece\u7ed3\u70b9 s s \u5230\u7ed3\u70b9 t t \u7684\u6240\u6709\u8def\u5f84\u6700\u5c0f\u7684\u524d\u4efb\u610f\u591a\uff08\u4e0d\u59a8\u8bbe\u4e3a k k \uff09\u4e2a\u3002 \u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\u8f6c\u5316\u6210\u7528 A* \u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u6807\u51c6\u7a0b\u5f0f\u3002 \u521d\u59cb\u72b6\u6001\u4e3a\u5904\u4e8e\u7ed3\u70b9 s s \uff0c\u6700\u7ec8\u72b6\u6001\u4e3a\u5904\u4e8e\u7ed3\u70b9 t t \uff0c\u8ddd\u79bb\u51fd\u6570\u4e3a\u4ece s s \u5230\u5f53\u524d\u7ed3\u70b9\u5df2\u7ecf\u8d70\u8fc7\u7684\u8ddd\u79bb\uff0c\u4f30\u4ef7\u51fd\u6570\u4e3a\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u7ed3\u70b9 t t \u81f3\u5c11\u8981\u8d70\u8fc7\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u7ed3\u70b9\u5230\u7ed3\u70b9 t t \u7684\u6700\u77ed\u8def\u3002 \u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u5728\u9884\u5904\u7406\u7684\u65f6\u5019\u53cd\u5411\u5efa\u56fe\uff0c\u8ba1\u7b97\u51fa\u7ed3\u70b9 t t \u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u5c06\u521d\u59cb\u72b6\u6001\u585e\u5165\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u53d6\u51fa f(x)=g(x)+h(x) f(x)=g(x)+h(x) \u6700\u5c0f\u7684\u4e00\u9879\uff0c\u8ba1\u7b97\u51fa\u5176\u6240\u8fde\u7ed3\u70b9\u7684\u4fe1\u606f\u5e76\u5c06\u5176\u4e5f\u585e\u5165\u961f\u5217\u3002\u5f53\u4f60\u7b2c k k \u6b21\u8d70\u5230\u7ed3\u70b9 t t \u65f6\uff0c\u4e5f\u5c31\u7b97\u51fa\u4e86\u7ed3\u70b9 s s \u5230\u7ed3\u70b9 t t \u7684 k k \u77ed\u8def\u3002 \u7531\u4e8e\u8bbe\u8ba1\u7684\u8ddd\u79bb\u51fd\u6570\u548c\u4f30\u4ef7\u51fd\u6570\uff0c\u6bcf\u4e2a\u72b6\u6001\u9700\u8981\u5b58\u50a8\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u524d\u7ed3\u70b9 x x \u548c\u5df2\u7ecf\u8d70\u8fc7\u7684\u8ddd\u79bb v v \u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u4e00\u70b9\u5c0f\u4f18\u5316\uff1a\u7531\u4e8e\u53ea\u9700\u8981\u6c42\u51fa\u7b2c k k \u77ed\u8def\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u7b2c k+1 k+1 \u6b21\u6216\u4ee5\u4e0a\u8d70\u5230\u8be5\u7ed3\u70b9\u65f6\uff0c\u76f4\u63a5\u8df3\u8fc7\u8be5\u72b6\u6001\u3002\u56e0\u4e3a\u524d\u9762\u7684 k k \u6b21\u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u80af\u5b9a\u80fd\u56e0\u6b64\u6784\u9020\u51fa k k \u6761\u8def\u5f84\uff0c\u6240\u4ee5\u4e4b\u540e\u5728\u52a0\u8fb9\u66f4\u65e0\u5fc5\u8981\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <algorithm> #include <cstdio> #include <cstring> #include <queue> using namespace std ; const int maxn = 5010 ; const int maxm = 400010 ; const double inf = 2e9 ; int n , m , k , u , v , cur , h [ maxn ], nxt [ maxm ], p [ maxm ], cnt [ maxn ], ans ; int cur1 , h1 [ maxn ], nxt1 [ maxm ], p1 [ maxm ]; double e , ww , w [ maxm ], f [ maxn ]; double w1 [ maxm ]; bool tf [ maxn ]; void add_edge ( int x , int y , double z ) { cur ++ ; nxt [ cur ] = h [ x ]; h [ x ] = cur ; p [ cur ] = y ; w [ cur ] = z ; } void add_edge1 ( int x , int y , double z ) { cur1 ++ ; nxt1 [ cur1 ] = h1 [ x ]; h1 [ x ] = cur1 ; p1 [ cur1 ] = y ; w1 [ cur1 ] = z ; } struct node { int x ; double v ; bool operator < ( node a ) const { return v + f [ x ] > a . v + f [ a . x ]; } }; priority_queue < node > q ; struct node2 { int x ; double v ; bool operator < ( node2 a ) const { return v > a . v ; } } x ; priority_queue < node2 > Q ; int main () { scanf ( \"%d%d%lf\" , & n , & m , & e ); while ( m -- ) { scanf ( \"%d%d%lf\" , & u , & v , & ww ); add_edge ( u , v , ww ); add_edge1 ( v , u , ww ); } for ( int i = 1 ; i < n ; i ++ ) f [ i ] = inf ; Q . push ({ n , 0 }); while ( ! Q . empty ()) { x = Q . top (); Q . pop (); if ( tf [ x . x ]) continue ; tf [ x . x ] = true ; f [ x . x ] = x . v ; for ( int j = h1 [ x . x ]; j ; j = nxt1 [ j ]) Q . push ({ p1 [ j ], x . v + w1 [ j ]}); } k = ( int ) e / f [ 1 ]; q . push ({ 1 , 0 }); while ( ! q . empty ()) { node x = q . top (); q . pop (); cnt [ x . x ] ++ ; if ( x . x == n ) { e -= x . v ; if ( e < 0 ) { printf ( \"%d \\n \" , ans ); return 0 ; } ans ++ ; } for ( int j = h [ x . x ]; j ; j = nxt [ j ]) if ( cnt [ p [ j ]] <= k && x . v + w [ j ] <= e ) q . push ({ p [ j ], x . v + w [ j ]}); } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"\u4f8b\u9898 k \u77ed\u8def"},{"location":"search/backtracking/","text":"","title":"\u56de\u6eaf\u6cd5"},{"location":"search/bfs/","text":"BFS \u5168\u79f0\u662f Breadth First Search \uff0c\u4e2d\u6587\u540d\u662f\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4e5f\u53eb\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u662f\u56fe\u4e0a\u6700\u57fa\u7840\u3001\u6700\u91cd\u8981\u7684\u641c\u7d22\u7b97\u6cd5\u4e4b\u4e00\u3002 \u6240\u8c13\u5bbd\u5ea6\u4f18\u5148\u3002\u5c31\u662f\u6bcf\u6b21\u90fd\u5c1d\u8bd5\u8bbf\u95ee\u540c\u4e00\u5c42\u7684\u8282\u70b9\u3002 \u5982\u679c\u540c\u4e00\u5c42\u90fd\u8bbf\u95ee\u5b8c\u4e86\uff0c\u518d\u8bbf\u95ee\u4e0b\u4e00\u5c42\u3002 \u8fd9\u6837\u505a\u7684\u7ed3\u679c\u662f\uff0cBFS \u7b97\u6cd5\u627e\u5230\u7684\u8def\u5f84\u662f\u4ece\u8d77\u70b9\u5f00\u59cb\u7684 \u6700\u77ed \u5408\u6cd5\u8def\u5f84\u3002\u6362\u8a00\u4e4b\uff0c\u8fd9\u6761\u8def\u6240\u5305\u542b\u7684\u8fb9\u6570\u6700\u5c0f\u3002 \u5728 BFS \u7ed3\u675f\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u901a\u8fc7\u4ece\u8d77\u70b9\u5230\u8be5\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8bbf\u95ee\u7684\u3002 \u7b97\u6cd5\u8fc7\u7a0b\u53ef\u4ee5\u770b\u505a\u662f\u56fe\u4e0a\u706b\u82d7\u4f20\u64ad\u7684\u8fc7\u7a0b\uff1a\u6700\u5f00\u59cb\u53ea\u6709\u8d77\u70b9\u7740\u706b\u4e86\uff0c\u5728\u6bcf\u4e00\u65f6\u523b\uff0c\u6709\u706b\u7684\u8282\u70b9\u90fd\u5411\u5b83\u76f8\u90bb\u7684\u6240\u6709\u8282\u70b9\u4f20\u64ad\u706b\u82d7\u3002 \u5b9e\u73b0 \u00b6 \u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 bfs(s) { q = new queue() q.push(s)), visited[s] = true while (!q.empty()) { u = q.pop() for each edge(u, v) { if (!visited[v]) { q.push(v) visited[v] = true } } } } C++\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void bfs ( int u ) { while ( ! Q . empty ()) Q . pop (); Q . push ( u ); vis [ u ] = 1 ; d [ u ] = 0 ; p [ u ] = - 1 ; while ( ! Q . empty ()) { u = Q . pop () { for ( int i = head [ u ]; i ; i = e [ i ]. x ) { if ( ! vis [ e [ i ]. t ]) { Q . push ( e [ i ]. t ); vis [ e [ i ]. t ] = 1 ; d [ e [ i ]. t ] = d [ u ] + 1 ; p [ e [ i ]. t ] = u ; } } } } } void restore ( int x ) { vector < int > res ; for ( int v = x ; v != - 1 ; v = p [ v ]) { res . push_back ( v ); } std :: reverse ( res . begin (), res . end ()); for ( int i = 0 ; i < res . size (); ++ i ) printf ( \"%d\" , res [ i ]); puts ( \"\" ); } \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u961f\u5217 Q \u6765\u8bb0\u5f55\u8981\u5904\u7406\u7684\u8282\u70b9\uff0c\u7136\u540e\u5f00\u4e00\u4e2a vis[] vis[] \u5e03\u5c14\u6570\u7ec4\u6765\u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\u3002 \u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u8d77\u70b9 s \u4ee5\u5916\u7684\u8282\u70b9\u7684 vis \u503c\u8bbe\u4e3a 0\uff0c\u610f\u601d\u662f\u6ca1\u6709\u8bbf\u95ee\u8fc7\u3002\u7136\u540e\u628a\u8d77\u70b9 s \u653e\u5165\u961f\u5217 Q \u4e2d\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u6bcf\u6b21\u4ece\u961f\u5217 Q \u4e2d\u53d6\u51fa\u961f\u9996\u7684\u70b9 u\uff0c\u628a u \u76f8\u90bb\u7684\u6240\u6709\u70b9 v \u6807\u8bb0\u4e3a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\u5e76\u653e\u5165\u961f\u5217 Q\u3002 \u76f4\u5230\u67d0\u4e00\u65f6\u523b\uff0c\u961f\u5217 Q \u4e3a\u7a7a\uff0c\u8fd9\u65f6 BFS \u7ed3\u675f\u3002 \u5728 BFS \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u3002\u6bd4\u5982\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0cd \u6570\u7ec4\u662f\u7528\u6765\u8bb0\u5f55\u67d0\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\uff08\u8981\u7ecf\u8fc7\u7684\u6700\u5c11\u8fb9\u6570\uff09\uff0cp \u6570\u7ec4\u662f\u8bb0\u5f55\u4ece\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u7684\u4e0a\u4e00\u4e2a\u70b9\u3002 \u6709\u4e86 d \u6570\u7ec4\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5f97\u5230\u8d77\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u3002 \u6709\u4e86 p \u6570\u7ec4\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fd8\u539f\u51fa\u8d77\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u4e0a\u9762\u7684 restore \u51fd\u6570\u5c31\u662f\u5728\u505a\u8fd9\u4ef6\u4e8b\uff1arestore(x) \u8f93\u51fa\u7684\u662f\u4ece\u8d77\u70b9\u5230 x \u8fd9\u4e2a\u70b9\u6240\u7ecf\u8fc7\u7684\u70b9\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n + m) O(n + m) \u7a7a\u95f4\u590d\u6742\u5ea6 O(n) O(n) \uff08vis \u6570\u7ec4\u548c\u961f\u5217\uff09 open-closed \u8868 \u00b6 \u5728\u5b9e\u73b0 BFS \u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u672a\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u653e\u5728\u4e00\u4e2a\u79f0\u4e3a open \u7684\u5bb9\u5668\u4e2d\uff0c\u800c\u628a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\u7684\u8282\u70b9\u653e\u5728 closed \u5bb9\u5668\u4e2d\u3002 \u5728\u6811 / \u56fe\u4e0a BFS \u00b6 \u5e94\u7528 \u00b6 \u5728\u4e00\u4e2a\u65e0\u6743\u56fe\u4e0a\u6c42\u4ece\u8d77\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002 \u5728 O(n+m) O(n+m) \u65f6\u95f4\u5185\u6c42\u51fa\u6240\u6709\u8fde\u901a\u5757\u3002\uff08\u6211\u4eec\u53ea\u9700\u8981\u4ece\u6bcf\u4e2a\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u5f00\u59cb\u505a BFS\uff0c\u663e\u7136\u6bcf\u6b21 BFS \u4f1a\u8d70\u5b8c\u4e00\u4e2a\u8fde\u901a\u5757\uff09 \u5982\u679c\u628a\u4e00\u4e2a\u6e38\u620f\u7684\u52a8\u4f5c\u770b\u505a\u662f\u72b6\u6001\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9\uff08\u4e00\u4e2a\u8f6c\u79fb\uff09\uff0c\u90a3\u4e48 BFS \u53ef\u4ee5\u7528\u6765\u627e\u5230\u5728\u6e38\u620f\u4e2d\u4ece\u4e00\u4e2a\u72b6\u6001\u5230\u8fbe\u53e6\u4e00\u4e2a\u72b6\u6001\u6240\u9700\u8981\u7684\u6700\u5c0f\u6b65\u9aa4\u3002 \u5728\u4e00\u4e2a\u8fb9\u6743\u4e3a 0 / 1 \u7684\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\u3002\uff08\u9700\u8981\u4fee\u6539\u5165\u961f\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u67d0\u6761\u8fb9\u6743\u503c\u4e3a 0\uff0c\u4e14\u53ef\u4ee5\u51cf\u5c0f\u8fb9\u7684\u7ec8\u70b9\u5230\u56fe\u7684\u8d77\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u628a\u8fb9\u7684\u8d77\u70b9\u52a0\u5230\u961f\u5217\u9996\u800c\u4e0d\u662f\u961f\u5217\u5c3e\uff09 \u5728\u4e00\u4e2a\u6709\u5411\u65e0\u6743\u56fe\u4e2d\u627e\u6700\u5c0f\u73af\u3002\uff08\u4ece\u6bcf\u4e2a\u70b9\u5f00\u59cb BFS\uff0c\u5728\u6211\u4eec\u5373\u5c06\u62b5\u8fbe\u4e00\u4e2a\u4e4b\u524d\u8bbf\u95ee\u8fc7\u7684\u70b9\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u5c31\u77e5\u9053\u9047\u5230\u4e86\u4e00\u4e2a\u73af\u3002\u56fe\u7684\u6700\u5c0f\u73af\u662f\u6bcf\u6b21 BFS \u5f97\u5230\u7684\u6700\u5c0f\u73af\u7684\u5e73\u5747\u503c\u3002\uff09 \u627e\u5230\u4e00\u5b9a\u5728 (a, b) (a, b) \u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u3002\uff08\u5206\u522b\u4ece a \u548c b \u8fdb\u884c BFS\uff0c\u5f97\u5230\u4e24\u4e2a d \u6570\u7ec4\u3002\u4e4b\u540e\u5bf9\u6bcf\u4e00\u6761\u8fb9 (u, v) (u, v) \uff0c\u5982\u679c d_a[u]+1+d_b[v]=d_a[b] d_a[u]+1+d_b[v]=d_a[b] \uff0c\u5219\u8bf4\u660e\u8be5\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\uff09 \u627e\u5230\u4e00\u5b9a\u5728 (a, b) (a, b) \u6700\u77ed\u8def\u4e0a\u7684\u70b9\u3002\uff08\u5206\u522b\u4ece a \u548c b \u8fdb\u884c BFS\uff0c\u5f97\u5230\u4e24\u4e2a d \u6570\u7ec4\u3002\u4e4b\u540e\u5bf9\u6bcf\u4e00\u4e2a\u70b9 v\uff0c\u5982\u679c d_a[u]+d_b[v]=d_a[b] d_a[u]+d_b[v]=d_a[b] \uff0c\u5219\u8bf4\u660e\u8be5\u70b9\u5728\u6700\u77ed\u8def\u4e0a\uff09 \u627e\u5230\u4e00\u6761\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u6700\u77ed\u8def\u3002\uff08\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6784\u9020\u4e00\u4e2a\u65b0\u56fe\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u65b0\u70b9\uff0c\u539f\u56fe\u7684\u8fb9 (u, v) (u, v) \u53d8\u6210 ((u, 0), (v, 1)) ((u, 0), (v, 1)) \u548c ((u, 1), (v, 0)) ((u, 1), (v, 0)) \u3002\u5bf9\u65b0\u56fe\u505a BFS\uff0c (s, 0) (s, 0) \u548c (t, 0) (t, 0) \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5373\u4e3a\u6240\u6c42\uff09 \u4f8b\u9898 \u00b6 LOJ#2317. \u300cNOIP2017\u300d\u5976\u916a \u53c2\u8003 \u00b6 https://cp-algorithms.com/graph/breadth-first-search.html \u53cc\u7aef\u961f\u5217 BFS \u00b6 \u5982\u679c\u4f60\u4e0d\u4e86\u89e3\u53cc\u7aef\u961f\u5217 deque \u7684\u8bdd\uff0c\u8bf7\u5230 STL-queue \u4e2d\u5b66\u4e60\u3002 \u53cc\u7aef\u961f\u5217 BFS \u53c8\u79f0 0-1 BFS \u9002\u7528\u8303\u56f4 \u00b6 \u8fb9\u6743\u503c\u4e3a\u53ef\u80fd\u6709\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\uff08\u7531\u4e8e BFS \u9002\u7528\u4e8e\u6743\u503c\u4e3a 1 \u7684\u56fe\uff0c\u6240\u4ee5\u4e00\u822c\u662f 0 or 1\uff09\uff0c\u6216\u8005\u80fd\u591f\u8f6c\u5316\u4e3a\u8fd9\u79cd\u8fb9\u6743\u503c\u7684\u6700\u77ed\u8def\u95ee\u9898\u3002 \u4f8b\u5982\u5728\u8d70\u8ff7\u5bab\u95ee\u9898\u4e2d\uff0c\u4f60\u53ef\u4ee5\u82b1 1 \u4e2a\u91d1\u5e01\u8d70 5 \u6b65\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u82b1\u91d1\u5e01\u8d70 1 \u6b65\uff0c\u8fd9\u5c31\u53ef\u4ee5\u7528 0-1 BFS \u89e3\u51b3\u3002 \u5b9e\u73b0 \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u628a\u6ca1\u6709\u6743\u503c\u7684\u8fb9\u6269\u5c55\u5230\u7684\u70b9\u653e\u5230\u961f\u9996\uff0c\u6709\u6743\u503c\u7684\u8fb9\u6269\u5c55\u5230\u7684\u70b9\u653e\u5230\u961f\u5c3e\u3002\u8fd9\u6837\u5373\u53ef\u4fdd\u8bc1\u5728\u6574\u4e2a\u961f\u5217\u4e2d\uff0c\u50cf\u666e\u901a BFS \u4e00\u6837\uff0c\u8d8a\u9760\u8fd1\u961f\u9996\uff0c\u6743\u503c\u8d8a\u5c0f\uff0c\u4e14\u6743\u503c\u96f6\u4e00\u4e4b\u95f4\u6709\u5206\u9694\u3002 \u4e0b\u9762\u662f\u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 while ( \u961f\u5217\u4e0d\u4e3a\u7a7a ) { int u = \u961f\u9996 ; \u5f39\u51fa\u961f\u9996 ; for ( \u679a\u4e3e u \u7684\u90bb\u5c45 ) { \u66f4\u65b0\u6570\u636e if (...) \u6dfb\u52a0\u5230\u961f\u9996 ; else \u6dfb\u52a0\u5230\u961f\u5c3e ; } } \u4f8b\u9898 \u00b6 Codeforces 173B \u00b6 \u4e00\u4e2a n \\times m n \\times m \u7684\u56fe\uff0c\u73b0\u5728\u6709\u4e00\u675f\u6fc0\u5149\u4ece\u5de6\u4e0a\u89d2\u5f80\u53f3\u8fb9\u5c04\u51fa\uff0c\u6bcf\u9047\u5230 '#'\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5149\u7ebf\u5f80\u56db\u4e2a\u65b9\u5411\u5c04\u51fa\uff0c\u6216\u8005\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u4e2a '#' \u5f80\u56db\u4e2a\u65b9\u5411\u5c04\u51fa\u624d\u80fd\u4f7f\u5149\u7ebf\u5728\u7b2c n n \u884c\u5f80\u53f3\u8fb9\u5c04\u51fa\u3002 \u6b64\u9898\u76ee\u6b63\u89e3\u4e0d\u662f 0-1 BFS \u4f46\u662f\u9002\u7528 0-1 BFS \u53ef\u4ee5\u4e0d\u9700\u8981\u601d\u8003\u8fc7\u7a0b\uff0c\u8d5b\u65f6\u8bb8\u591a\u5927\u4f6c\u90fd\u662f\u8fd9\u4e48\u505a\u7684\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u4e00\u4e2a\u65b9\u5411\u5c04\u51fa\u4e0d\u9700\u8981\u82b1\u8d39\uff080\uff09\uff0c\u800c\u5f80\u56db\u4e2a\u65b9\u5411\u5c04\u51fa\u9700\u8981\u82b1\u8d39\uff081\uff09\uff0c\u7136\u540e\u76f4\u63a5\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; #define INF (1 << 29) int n , m ; char grid [ 1001 ][ 1001 ]; int dist [ 1001 ][ 1001 ][ 4 ]; int vis [ 1001 ][ 1001 ][ 4 ]; int fx [] = { 1 , - 1 , 0 , 0 }; int fy [] = { 0 , 0 , 1 , - 1 }; deque < int > q ; void add_front ( int x , int y , int dir , int d ) { if ( d < dist [ x ][ y ][ dir ]) { dist [ x ][ y ][ dir ] = d ; q . push_front ( dir ); q . push_front ( y ); q . push_front ( x ); } } void add_back ( int x , int y , int dir , int d ) { if ( d < dist [ x ][ y ][ dir ]) { dist [ x ][ y ][ dir ] = d ; q . push_back ( x ); q . push_back ( y ); q . push_back ( dir ); } } int main () { cin >> n >> m ; for ( int i = 0 ; i < n ; i ++ ) cin >> grid [ i ]; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) for ( int k = 0 ; k < 4 ; k ++ ) dist [ i ][ j ][ k ] = INF ; add_front ( n - 1 , m - 1 , 3 , 0 ); while ( ! q . empty ()) { int x = q [ 0 ], y = q [ 1 ], dir = q [ 2 ]; q . pop_front (); q . pop_front (); q . pop_front (); if ( vis [ x ][ y ][ dir ]) continue ; vis [ x ][ y ][ dir ] = true ; int d = dist [ x ][ y ][ dir ]; int nx = x + fx [ dir ], ny = y + fy [ dir ]; if ( nx >= 0 && nx < n && ny >= 0 && ny < m ) add_front ( nx , ny , dir , d ); if ( grid [ x ][ y ] == '#' ) for ( int i = 0 ; i < 4 ; i ++ ) if ( i != dir ) add_back ( x , y , i , d + 1 ); } if ( dist [ 0 ][ 0 ][ 3 ] == INF ) cout << - 1 << endl ; else cout << dist [ 0 ][ 0 ][ 3 ] << endl ; return 0 ; } \u4f18\u5148\u961f\u5217 BFS \u00b6 \u4f18\u5148\u961f\u5217\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e8c\u53c9\u5806\uff0cSTL \u4e2d\u63d0\u4f9b\u4e86 std::priority_queue \uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528\u4f18\u5148\u961f\u5217\u3002 \u5728\u57fa\u4e8e\u4f18\u5148\u961f\u5217\u7684 BFS \u4e2d\uff0c\u6211\u4eec\u6bcf\u6b21\u4ece\u961f\u9996\u53d6\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684\u7ed3\u70b9\u8fdb\u884c\u8fdb\u4e00\u6b65\u641c\u7d22\u3002\u5bb9\u6613\u8bc1\u660e\u8fd9\u4e2a\u8d2a\u5fc3\u601d\u60f3\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u4ece\u8fd9\u4e2a\u7ed3\u70b9\u5f00\u59cb\u6269\u5c55\u7684\u641c\u7d22\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u66f4\u65b0\u539f\u6765\u90a3\u4e9b\u4ee3\u4ef7\u66f4\u9ad8\u7684\u7ed3\u70b9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u4f59\u90a3\u4e9b\u4ee3\u4ef7\u66f4\u9ad8\u7684\u7ed3\u70b9\uff0c\u6211\u4eec\u4e0d\u56de\u53bb\u8003\u8651\u66f4\u65b0\u5b83\u3002 \u5f53\u7136\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u53ef\u80fd\u4f1a\u88ab\u5165\u961f\u591a\u6b21\uff0c\u53ea\u662f\u6bcf\u6b21\u5165\u961f\u7684\u4ee3\u4ef7\u4e0d\u540c\u3002\u5f53\u8be5\u7ed3\u70b9\u7b2c\u4e00\u6b21\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\uff0c\u4ee5\u540e\u4fbf\u65e0\u9700\u518d\u5728\u8be5\u7ed3\u70b9\u8fdb\u884c\u641c\u7d22\uff0c\u76f4\u63a5\u5ffd\u7565\u5373\u53ef\u3002\u6240\u4ee5\uff0c\u4f18\u5148\u961f\u5217\u7684 BFS \u5f53\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u53ea\u4f1a\u88ab\u5904\u7406\u4e00\u6b21\u3002 \u76f8\u5bf9\u4e8e\u666e\u901a\u961f\u5217\u7684 BFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u591a\u4e86\u4e00\u4e2a \\log \\log \uff0c\u6bd5\u7adf\u8981\u7ef4\u62a4\u8fd9\u4e2a\u4f18\u5148\u961f\u5217\u561b\u3002\u4e0d\u8fc7\u666e\u901a BFS \u6709\u53ef\u80fd\u6bcf\u4e2a\u7ed3\u70b9\u5165\u961f\u3001\u51fa\u961f\u591a\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u8fbe\u5230 O(n^2) O(n^2) \uff0c\u4e0d\u662f O(n) O(n) \u3002\u6240\u4ee5\u4f18\u5148\u961f\u5217 BFS \u901a\u5e38\u8fd8\u662f\u5feb\u7684\u3002 \u8bf6\uff1f\u8fd9\u600e\u4e48\u542c\u8d77\u6765\u8fd9\u4e48\u50cf\u5806\u4f18\u5316\u7684 Dijkstra \u7b97\u6cd5\u5462\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u5806\u4f18\u5316 Dijkstra \u5c31\u662f\u4f18\u5148\u961f\u5217 BFS\u3002","title":"BFS"},{"location":"search/bfs/#_1","text":"\u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 bfs(s) { q = new queue() q.push(s)), visited[s] = true while (!q.empty()) { u = q.pop() for each edge(u, v) { if (!visited[v]) { q.push(v) visited[v] = true } } } } C++\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void bfs ( int u ) { while ( ! Q . empty ()) Q . pop (); Q . push ( u ); vis [ u ] = 1 ; d [ u ] = 0 ; p [ u ] = - 1 ; while ( ! Q . empty ()) { u = Q . pop () { for ( int i = head [ u ]; i ; i = e [ i ]. x ) { if ( ! vis [ e [ i ]. t ]) { Q . push ( e [ i ]. t ); vis [ e [ i ]. t ] = 1 ; d [ e [ i ]. t ] = d [ u ] + 1 ; p [ e [ i ]. t ] = u ; } } } } } void restore ( int x ) { vector < int > res ; for ( int v = x ; v != - 1 ; v = p [ v ]) { res . push_back ( v ); } std :: reverse ( res . begin (), res . end ()); for ( int i = 0 ; i < res . size (); ++ i ) printf ( \"%d\" , res [ i ]); puts ( \"\" ); } \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u961f\u5217 Q \u6765\u8bb0\u5f55\u8981\u5904\u7406\u7684\u8282\u70b9\uff0c\u7136\u540e\u5f00\u4e00\u4e2a vis[] vis[] \u5e03\u5c14\u6570\u7ec4\u6765\u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\u3002 \u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u8d77\u70b9 s \u4ee5\u5916\u7684\u8282\u70b9\u7684 vis \u503c\u8bbe\u4e3a 0\uff0c\u610f\u601d\u662f\u6ca1\u6709\u8bbf\u95ee\u8fc7\u3002\u7136\u540e\u628a\u8d77\u70b9 s \u653e\u5165\u961f\u5217 Q \u4e2d\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u6bcf\u6b21\u4ece\u961f\u5217 Q \u4e2d\u53d6\u51fa\u961f\u9996\u7684\u70b9 u\uff0c\u628a u \u76f8\u90bb\u7684\u6240\u6709\u70b9 v \u6807\u8bb0\u4e3a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\u5e76\u653e\u5165\u961f\u5217 Q\u3002 \u76f4\u5230\u67d0\u4e00\u65f6\u523b\uff0c\u961f\u5217 Q \u4e3a\u7a7a\uff0c\u8fd9\u65f6 BFS \u7ed3\u675f\u3002 \u5728 BFS \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u3002\u6bd4\u5982\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0cd \u6570\u7ec4\u662f\u7528\u6765\u8bb0\u5f55\u67d0\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\uff08\u8981\u7ecf\u8fc7\u7684\u6700\u5c11\u8fb9\u6570\uff09\uff0cp \u6570\u7ec4\u662f\u8bb0\u5f55\u4ece\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u7684\u4e0a\u4e00\u4e2a\u70b9\u3002 \u6709\u4e86 d \u6570\u7ec4\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5f97\u5230\u8d77\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u3002 \u6709\u4e86 p \u6570\u7ec4\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fd8\u539f\u51fa\u8d77\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u4e0a\u9762\u7684 restore \u51fd\u6570\u5c31\u662f\u5728\u505a\u8fd9\u4ef6\u4e8b\uff1arestore(x) \u8f93\u51fa\u7684\u662f\u4ece\u8d77\u70b9\u5230 x \u8fd9\u4e2a\u70b9\u6240\u7ecf\u8fc7\u7684\u70b9\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n + m) O(n + m) \u7a7a\u95f4\u590d\u6742\u5ea6 O(n) O(n) \uff08vis \u6570\u7ec4\u548c\u961f\u5217\uff09","title":"\u5b9e\u73b0"},{"location":"search/bfs/#open-closed","text":"\u5728\u5b9e\u73b0 BFS \u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u672a\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u653e\u5728\u4e00\u4e2a\u79f0\u4e3a open \u7684\u5bb9\u5668\u4e2d\uff0c\u800c\u628a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\u7684\u8282\u70b9\u653e\u5728 closed \u5bb9\u5668\u4e2d\u3002","title":"open-closed \u8868"},{"location":"search/bfs/#bfs","text":"","title":"\u5728\u6811 / \u56fe\u4e0a BFS"},{"location":"search/bfs/#_2","text":"\u5728\u4e00\u4e2a\u65e0\u6743\u56fe\u4e0a\u6c42\u4ece\u8d77\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002 \u5728 O(n+m) O(n+m) \u65f6\u95f4\u5185\u6c42\u51fa\u6240\u6709\u8fde\u901a\u5757\u3002\uff08\u6211\u4eec\u53ea\u9700\u8981\u4ece\u6bcf\u4e2a\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u5f00\u59cb\u505a BFS\uff0c\u663e\u7136\u6bcf\u6b21 BFS \u4f1a\u8d70\u5b8c\u4e00\u4e2a\u8fde\u901a\u5757\uff09 \u5982\u679c\u628a\u4e00\u4e2a\u6e38\u620f\u7684\u52a8\u4f5c\u770b\u505a\u662f\u72b6\u6001\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9\uff08\u4e00\u4e2a\u8f6c\u79fb\uff09\uff0c\u90a3\u4e48 BFS \u53ef\u4ee5\u7528\u6765\u627e\u5230\u5728\u6e38\u620f\u4e2d\u4ece\u4e00\u4e2a\u72b6\u6001\u5230\u8fbe\u53e6\u4e00\u4e2a\u72b6\u6001\u6240\u9700\u8981\u7684\u6700\u5c0f\u6b65\u9aa4\u3002 \u5728\u4e00\u4e2a\u8fb9\u6743\u4e3a 0 / 1 \u7684\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\u3002\uff08\u9700\u8981\u4fee\u6539\u5165\u961f\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u67d0\u6761\u8fb9\u6743\u503c\u4e3a 0\uff0c\u4e14\u53ef\u4ee5\u51cf\u5c0f\u8fb9\u7684\u7ec8\u70b9\u5230\u56fe\u7684\u8d77\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u628a\u8fb9\u7684\u8d77\u70b9\u52a0\u5230\u961f\u5217\u9996\u800c\u4e0d\u662f\u961f\u5217\u5c3e\uff09 \u5728\u4e00\u4e2a\u6709\u5411\u65e0\u6743\u56fe\u4e2d\u627e\u6700\u5c0f\u73af\u3002\uff08\u4ece\u6bcf\u4e2a\u70b9\u5f00\u59cb BFS\uff0c\u5728\u6211\u4eec\u5373\u5c06\u62b5\u8fbe\u4e00\u4e2a\u4e4b\u524d\u8bbf\u95ee\u8fc7\u7684\u70b9\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u5c31\u77e5\u9053\u9047\u5230\u4e86\u4e00\u4e2a\u73af\u3002\u56fe\u7684\u6700\u5c0f\u73af\u662f\u6bcf\u6b21 BFS \u5f97\u5230\u7684\u6700\u5c0f\u73af\u7684\u5e73\u5747\u503c\u3002\uff09 \u627e\u5230\u4e00\u5b9a\u5728 (a, b) (a, b) \u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u3002\uff08\u5206\u522b\u4ece a \u548c b \u8fdb\u884c BFS\uff0c\u5f97\u5230\u4e24\u4e2a d \u6570\u7ec4\u3002\u4e4b\u540e\u5bf9\u6bcf\u4e00\u6761\u8fb9 (u, v) (u, v) \uff0c\u5982\u679c d_a[u]+1+d_b[v]=d_a[b] d_a[u]+1+d_b[v]=d_a[b] \uff0c\u5219\u8bf4\u660e\u8be5\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\uff09 \u627e\u5230\u4e00\u5b9a\u5728 (a, b) (a, b) \u6700\u77ed\u8def\u4e0a\u7684\u70b9\u3002\uff08\u5206\u522b\u4ece a \u548c b \u8fdb\u884c BFS\uff0c\u5f97\u5230\u4e24\u4e2a d \u6570\u7ec4\u3002\u4e4b\u540e\u5bf9\u6bcf\u4e00\u4e2a\u70b9 v\uff0c\u5982\u679c d_a[u]+d_b[v]=d_a[b] d_a[u]+d_b[v]=d_a[b] \uff0c\u5219\u8bf4\u660e\u8be5\u70b9\u5728\u6700\u77ed\u8def\u4e0a\uff09 \u627e\u5230\u4e00\u6761\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u6700\u77ed\u8def\u3002\uff08\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6784\u9020\u4e00\u4e2a\u65b0\u56fe\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u65b0\u70b9\uff0c\u539f\u56fe\u7684\u8fb9 (u, v) (u, v) \u53d8\u6210 ((u, 0), (v, 1)) ((u, 0), (v, 1)) \u548c ((u, 1), (v, 0)) ((u, 1), (v, 0)) \u3002\u5bf9\u65b0\u56fe\u505a BFS\uff0c (s, 0) (s, 0) \u548c (t, 0) (t, 0) \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5373\u4e3a\u6240\u6c42\uff09","title":"\u5e94\u7528"},{"location":"search/bfs/#_3","text":"LOJ#2317. \u300cNOIP2017\u300d\u5976\u916a","title":"\u4f8b\u9898"},{"location":"search/bfs/#_4","text":"https://cp-algorithms.com/graph/breadth-first-search.html","title":"\u53c2\u8003"},{"location":"search/bfs/#bfs_1","text":"\u5982\u679c\u4f60\u4e0d\u4e86\u89e3\u53cc\u7aef\u961f\u5217 deque \u7684\u8bdd\uff0c\u8bf7\u5230 STL-queue \u4e2d\u5b66\u4e60\u3002 \u53cc\u7aef\u961f\u5217 BFS \u53c8\u79f0 0-1 BFS","title":"\u53cc\u7aef\u961f\u5217 BFS"},{"location":"search/bfs/#_5","text":"\u8fb9\u6743\u503c\u4e3a\u53ef\u80fd\u6709\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\uff08\u7531\u4e8e BFS \u9002\u7528\u4e8e\u6743\u503c\u4e3a 1 \u7684\u56fe\uff0c\u6240\u4ee5\u4e00\u822c\u662f 0 or 1\uff09\uff0c\u6216\u8005\u80fd\u591f\u8f6c\u5316\u4e3a\u8fd9\u79cd\u8fb9\u6743\u503c\u7684\u6700\u77ed\u8def\u95ee\u9898\u3002 \u4f8b\u5982\u5728\u8d70\u8ff7\u5bab\u95ee\u9898\u4e2d\uff0c\u4f60\u53ef\u4ee5\u82b1 1 \u4e2a\u91d1\u5e01\u8d70 5 \u6b65\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u82b1\u91d1\u5e01\u8d70 1 \u6b65\uff0c\u8fd9\u5c31\u53ef\u4ee5\u7528 0-1 BFS \u89e3\u51b3\u3002","title":"\u9002\u7528\u8303\u56f4"},{"location":"search/bfs/#_6","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u628a\u6ca1\u6709\u6743\u503c\u7684\u8fb9\u6269\u5c55\u5230\u7684\u70b9\u653e\u5230\u961f\u9996\uff0c\u6709\u6743\u503c\u7684\u8fb9\u6269\u5c55\u5230\u7684\u70b9\u653e\u5230\u961f\u5c3e\u3002\u8fd9\u6837\u5373\u53ef\u4fdd\u8bc1\u5728\u6574\u4e2a\u961f\u5217\u4e2d\uff0c\u50cf\u666e\u901a BFS \u4e00\u6837\uff0c\u8d8a\u9760\u8fd1\u961f\u9996\uff0c\u6743\u503c\u8d8a\u5c0f\uff0c\u4e14\u6743\u503c\u96f6\u4e00\u4e4b\u95f4\u6709\u5206\u9694\u3002 \u4e0b\u9762\u662f\u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 while ( \u961f\u5217\u4e0d\u4e3a\u7a7a ) { int u = \u961f\u9996 ; \u5f39\u51fa\u961f\u9996 ; for ( \u679a\u4e3e u \u7684\u90bb\u5c45 ) { \u66f4\u65b0\u6570\u636e if (...) \u6dfb\u52a0\u5230\u961f\u9996 ; else \u6dfb\u52a0\u5230\u961f\u5c3e ; } }","title":"\u5b9e\u73b0"},{"location":"search/bfs/#_7","text":"","title":"\u4f8b\u9898"},{"location":"search/bfs/#codeforces-173b","text":"\u4e00\u4e2a n \\times m n \\times m \u7684\u56fe\uff0c\u73b0\u5728\u6709\u4e00\u675f\u6fc0\u5149\u4ece\u5de6\u4e0a\u89d2\u5f80\u53f3\u8fb9\u5c04\u51fa\uff0c\u6bcf\u9047\u5230 '#'\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5149\u7ebf\u5f80\u56db\u4e2a\u65b9\u5411\u5c04\u51fa\uff0c\u6216\u8005\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u4e2a '#' \u5f80\u56db\u4e2a\u65b9\u5411\u5c04\u51fa\u624d\u80fd\u4f7f\u5149\u7ebf\u5728\u7b2c n n \u884c\u5f80\u53f3\u8fb9\u5c04\u51fa\u3002 \u6b64\u9898\u76ee\u6b63\u89e3\u4e0d\u662f 0-1 BFS \u4f46\u662f\u9002\u7528 0-1 BFS \u53ef\u4ee5\u4e0d\u9700\u8981\u601d\u8003\u8fc7\u7a0b\uff0c\u8d5b\u65f6\u8bb8\u591a\u5927\u4f6c\u90fd\u662f\u8fd9\u4e48\u505a\u7684\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u4e00\u4e2a\u65b9\u5411\u5c04\u51fa\u4e0d\u9700\u8981\u82b1\u8d39\uff080\uff09\uff0c\u800c\u5f80\u56db\u4e2a\u65b9\u5411\u5c04\u51fa\u9700\u8981\u82b1\u8d39\uff081\uff09\uff0c\u7136\u540e\u76f4\u63a5\u6765\u5c31\u53ef\u4ee5\u4e86\u3002","title":"Codeforces 173B"},{"location":"search/bfs/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; #define INF (1 << 29) int n , m ; char grid [ 1001 ][ 1001 ]; int dist [ 1001 ][ 1001 ][ 4 ]; int vis [ 1001 ][ 1001 ][ 4 ]; int fx [] = { 1 , - 1 , 0 , 0 }; int fy [] = { 0 , 0 , 1 , - 1 }; deque < int > q ; void add_front ( int x , int y , int dir , int d ) { if ( d < dist [ x ][ y ][ dir ]) { dist [ x ][ y ][ dir ] = d ; q . push_front ( dir ); q . push_front ( y ); q . push_front ( x ); } } void add_back ( int x , int y , int dir , int d ) { if ( d < dist [ x ][ y ][ dir ]) { dist [ x ][ y ][ dir ] = d ; q . push_back ( x ); q . push_back ( y ); q . push_back ( dir ); } } int main () { cin >> n >> m ; for ( int i = 0 ; i < n ; i ++ ) cin >> grid [ i ]; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) for ( int k = 0 ; k < 4 ; k ++ ) dist [ i ][ j ][ k ] = INF ; add_front ( n - 1 , m - 1 , 3 , 0 ); while ( ! q . empty ()) { int x = q [ 0 ], y = q [ 1 ], dir = q [ 2 ]; q . pop_front (); q . pop_front (); q . pop_front (); if ( vis [ x ][ y ][ dir ]) continue ; vis [ x ][ y ][ dir ] = true ; int d = dist [ x ][ y ][ dir ]; int nx = x + fx [ dir ], ny = y + fy [ dir ]; if ( nx >= 0 && nx < n && ny >= 0 && ny < m ) add_front ( nx , ny , dir , d ); if ( grid [ x ][ y ] == '#' ) for ( int i = 0 ; i < 4 ; i ++ ) if ( i != dir ) add_back ( x , y , i , d + 1 ); } if ( dist [ 0 ][ 0 ][ 3 ] == INF ) cout << - 1 << endl ; else cout << dist [ 0 ][ 0 ][ 3 ] << endl ; return 0 ; }","title":"Code"},{"location":"search/bfs/#bfs_2","text":"\u4f18\u5148\u961f\u5217\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e8c\u53c9\u5806\uff0cSTL \u4e2d\u63d0\u4f9b\u4e86 std::priority_queue \uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528\u4f18\u5148\u961f\u5217\u3002 \u5728\u57fa\u4e8e\u4f18\u5148\u961f\u5217\u7684 BFS \u4e2d\uff0c\u6211\u4eec\u6bcf\u6b21\u4ece\u961f\u9996\u53d6\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684\u7ed3\u70b9\u8fdb\u884c\u8fdb\u4e00\u6b65\u641c\u7d22\u3002\u5bb9\u6613\u8bc1\u660e\u8fd9\u4e2a\u8d2a\u5fc3\u601d\u60f3\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u4ece\u8fd9\u4e2a\u7ed3\u70b9\u5f00\u59cb\u6269\u5c55\u7684\u641c\u7d22\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u66f4\u65b0\u539f\u6765\u90a3\u4e9b\u4ee3\u4ef7\u66f4\u9ad8\u7684\u7ed3\u70b9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u4f59\u90a3\u4e9b\u4ee3\u4ef7\u66f4\u9ad8\u7684\u7ed3\u70b9\uff0c\u6211\u4eec\u4e0d\u56de\u53bb\u8003\u8651\u66f4\u65b0\u5b83\u3002 \u5f53\u7136\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u53ef\u80fd\u4f1a\u88ab\u5165\u961f\u591a\u6b21\uff0c\u53ea\u662f\u6bcf\u6b21\u5165\u961f\u7684\u4ee3\u4ef7\u4e0d\u540c\u3002\u5f53\u8be5\u7ed3\u70b9\u7b2c\u4e00\u6b21\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\uff0c\u4ee5\u540e\u4fbf\u65e0\u9700\u518d\u5728\u8be5\u7ed3\u70b9\u8fdb\u884c\u641c\u7d22\uff0c\u76f4\u63a5\u5ffd\u7565\u5373\u53ef\u3002\u6240\u4ee5\uff0c\u4f18\u5148\u961f\u5217\u7684 BFS \u5f53\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u53ea\u4f1a\u88ab\u5904\u7406\u4e00\u6b21\u3002 \u76f8\u5bf9\u4e8e\u666e\u901a\u961f\u5217\u7684 BFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u591a\u4e86\u4e00\u4e2a \\log \\log \uff0c\u6bd5\u7adf\u8981\u7ef4\u62a4\u8fd9\u4e2a\u4f18\u5148\u961f\u5217\u561b\u3002\u4e0d\u8fc7\u666e\u901a BFS \u6709\u53ef\u80fd\u6bcf\u4e2a\u7ed3\u70b9\u5165\u961f\u3001\u51fa\u961f\u591a\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u8fbe\u5230 O(n^2) O(n^2) \uff0c\u4e0d\u662f O(n) O(n) \u3002\u6240\u4ee5\u4f18\u5148\u961f\u5217 BFS \u901a\u5e38\u8fd8\u662f\u5feb\u7684\u3002 \u8bf6\uff1f\u8fd9\u600e\u4e48\u542c\u8d77\u6765\u8fd9\u4e48\u50cf\u5806\u4f18\u5316\u7684 Dijkstra \u7b97\u6cd5\u5462\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u5806\u4f18\u5316 Dijkstra \u5c31\u662f\u4f18\u5148\u961f\u5217 BFS\u3002","title":"\u4f18\u5148\u961f\u5217 BFS"},{"location":"search/dbfs/","text":"\u4ece\u72b6\u6001\u56fe\u4e0a\u8d77\u70b9\u548c\u7ec8\u70b9\u540c\u65f6\u5f00\u59cb\u8fdb\u884c\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5982\u679c\u53d1\u73b0\u76f8\u9047\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u8ba4\u4e3a\u662f\u83b7\u5f97\u4e86\u53ef\u884c\u89e3\u3002","title":"\u53cc\u5411 BFS"},{"location":"search/dfs/","text":"DFS \u5168\u79f0\u662f Depth First Search \u3002 \u662f\u4e00\u79cd\u56fe\u7684\u904d\u5386\u7b97\u6cd5\u3002 \u6240\u8c13\u6df1\u5ea6\u4f18\u5148\u3002\u5c31\u662f\u8bf4\u6bcf\u6b21\u90fd\u5c1d\u8bd5\u5411\u66f4\u6df1\u7684\u8282\u70b9\u8d70\u3002 \u5982\u679c\u6ca1\u6709\u66f4\u6df1\u7684\u8282\u70b9\u4e86\uff0c\u5c31\u56de\u5230\u4e0a\u4e00\u5c42\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7ee7\u7eed\u521a\u624d\u7684\u8fc7\u7a0b\u3002 \u4e0a\u9762\u7684\u89e3\u91ca\u592a\u8fc7\u9ad8\u6df1\uff0c\u6211\u4eec\u53ef\u4ee5\u611f\u6027\u5730\u7406\u89e3\u4e00\u4e0b\u5b83\uff0c\u5728\u8f83\u4e3a\u521d\u7ea7\u7684\u5e94\u7528\uff08\u975e\u56fe\u8bba\uff09\u4e2d\uff0c\u641c\u7d22\u5c31\u662f\u4e00\u4e2a\u66b4\u529b\u679a\u4e3e\uff0c \u5982\u8fd9\u4e2a\u4f8b\u5b50\uff1a \u628a\u6b63\u6574\u6570 n \u5206\u89e3\u4e3a 3 \u4e2a\u4e0d\u540c\u7684\u6570\uff0c\u5982 6=1+2+3 \u6392\u5728\u540e\u9762\u7684\u6570\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e\u524d\u9762\u7684\u6570 \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u641c\u7d22\uff0c\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f \u5f53\u7136\u662f 3 \u91cd\u5faa\u73af \u4f2a\u4ee3\u7801\u5982\u4e0b 1 2 3 4 for i=1..n for j=i..n for k=1..n if (i+j+k=n) printf(\"%d=%d+%d+%d\",n,i,j,k); \u90a3\u5982\u679c\u662f\u5206\u89e3\u6210\u56db\u4e2a\u6574\u6570\u5462\uff1f \u518d\u52a0\u4e00\u91cd\u5faa\u73af\uff1f \u90a3\u5206\u89e3\u6210\u5c0f\u4e8e\u7b49\u4e8e m \u4e2a\u6574\u6570\u5462\uff1f if \u4e00\u5927\u5806\uff0c\u5199 m \u4e2a\uff1f \u8fd9\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230\u641c\u7d22\u4e86\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u62bd\u8c61\u6210\u56fe\uff0c\u5c31\u662f\u628a\u80fd\u5206\u89e3\u7684\u6570\u90fd\u7b97\u4f5c\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u6309\u987a\u5e8f\u628a\u4ed6\u4eec\u8fde\u8d77\u6765\u3002 \u6a21\u677f \u00b6 \u4e0d\u7ba1\u662f\u56fe\u8fd8\u662f\u5176\u5b83\uff0c\u90fd\u662f\u8fd9\u6837 \u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 dfs(n) { if (\u78b0\u5230\u8fb9\u754c) //\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5206\u89e3\u5b8c\u5c31\u662f\u57fa\u672c\u60c5\u51b5 \u8fd4\u56de \u503c\uff0c\u5e76\u9000\u51fa for i=\u53ef\u4ee5\u7ee7\u7eed\u641c\u4e0b\u53bb\u7684\u60c5\u51b5 if(\u53ef\u4ee5){ \u6807\u8bb0\u4e3a\u4e0d\u53ef\u4ee5 dfs(i);//\u7ee7\u7eed\u5f80\u4e0b\u641c \u6807\u56de\u53ef\u4ee5 } } \u6709\u4e9b\u60c5\u51b5\u4e0d\u9700\u8981\u6807\u8bb0\uff0c\u8bf7\u81ea\u884c\u5224\u65ad\u3002 \u5b9e\u73b0\uff08\u5bf9\u4e8e\u56fe\u6765\u8bf4\uff09 \u00b6 \u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 dfs(u) { visited[u] = true for each edge(u, v) { if (!visited[v]) { dfs(v) } } } C++\uff1a 1 2 3 4 5 6 7 8 9 void dfs ( int u ) { vis [ u ] = 1 ; for ( int i = head [ u ]; i ; i = e [ i ]. x ) { // \u8fd9\u91cc\u7528\u5230\u7684\u662f\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5b58\u56fe if ( ! vis [ e [ i ]. t ]) { dfs ( v ); } } } \u65f6\u95f4\u590d\u6742\u5ea6 O(n + m) O(n + m) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 O(n) O(n) \u3002 \uff08vis \u6570\u7ec4\u548c\u9012\u5f52\u6808\uff09 \u5728\u6811 / \u56fe\u4e0a DFS \u00b6 \u4e3b\u6761\u76ee\uff1a \u5728\u6811 / \u56fe\u4e0a DFS","title":"DFS"},{"location":"search/dfs/#_1","text":"\u4e0d\u7ba1\u662f\u56fe\u8fd8\u662f\u5176\u5b83\uff0c\u90fd\u662f\u8fd9\u6837 \u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 dfs(n) { if (\u78b0\u5230\u8fb9\u754c) //\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5206\u89e3\u5b8c\u5c31\u662f\u57fa\u672c\u60c5\u51b5 \u8fd4\u56de \u503c\uff0c\u5e76\u9000\u51fa for i=\u53ef\u4ee5\u7ee7\u7eed\u641c\u4e0b\u53bb\u7684\u60c5\u51b5 if(\u53ef\u4ee5){ \u6807\u8bb0\u4e3a\u4e0d\u53ef\u4ee5 dfs(i);//\u7ee7\u7eed\u5f80\u4e0b\u641c \u6807\u56de\u53ef\u4ee5 } } \u6709\u4e9b\u60c5\u51b5\u4e0d\u9700\u8981\u6807\u8bb0\uff0c\u8bf7\u81ea\u884c\u5224\u65ad\u3002","title":"\u6a21\u677f"},{"location":"search/dfs/#_2","text":"\u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 dfs(u) { visited[u] = true for each edge(u, v) { if (!visited[v]) { dfs(v) } } } C++\uff1a 1 2 3 4 5 6 7 8 9 void dfs ( int u ) { vis [ u ] = 1 ; for ( int i = head [ u ]; i ; i = e [ i ]. x ) { // \u8fd9\u91cc\u7528\u5230\u7684\u662f\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5b58\u56fe if ( ! vis [ e [ i ]. t ]) { dfs ( v ); } } } \u65f6\u95f4\u590d\u6742\u5ea6 O(n + m) O(n + m) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 O(n) O(n) \u3002 \uff08vis \u6570\u7ec4\u548c\u9012\u5f52\u6808\uff09","title":"\u5b9e\u73b0\uff08\u5bf9\u4e8e\u56fe\u6765\u8bf4\uff09"},{"location":"search/dfs/#dfs","text":"\u4e3b\u6761\u76ee\uff1a \u5728\u6811 / \u56fe\u4e0a DFS","title":"\u5728\u6811 / \u56fe\u4e0a DFS"},{"location":"search/dlx/","text":"","title":"Dancing Links"},{"location":"search/heuristic/","text":"","title":"\u542f\u53d1\u5f0f\u641c\u7d22"},{"location":"search/idastar/","text":"\u5b66\u4e60 IDA* \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u5b66\u5b8c\u4e86 A* \u7b97\u6cd5\u548c \u8fed\u4ee3\u52a0\u6df1\u641c\u7d22 \u3002 IDA* \u7b80\u4ecb \u00b6 IDA*\uff0c\u5373\u91c7\u7528\u8fed\u4ee3\u52a0\u6df1\u7684 A* \u7b97\u6cd5\u3002\u76f8\u5bf9\u4e8e A* \u7b97\u6cd5\uff0c\u7531\u4e8e IDA* \u6539\u6210\u4e86\u6df1\u5ea6\u4f18\u5148\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5 IDA* \u66f4\u5b9e\u7528\uff1a \u4e0d\u9700\u8981\u5224\u91cd\uff0c\u4e0d\u9700\u8981\u6392\u5e8f\uff1b \u7a7a\u95f4\u9700\u6c42\u51cf\u5c11\u3002 \u5927\u81f4\u6846\u67b6 \uff08\u4f2a\u4ee3\u7801\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Procedure IDA_STAR(StartState) Begin PathLimit := H(StartState) - 1; Succes := False; Repeat inc(PathLimit); StartState.g = 0; Push(OpenStack , StartState); Repeat CurrentState := Pop(OpenStack); If Solution(CurrentState) then Success = True Elseif PathLimit >= CurrentState.g + H(CurrentState) then For each Child(CurrentState) do Push(OpenStack , Child(CurrentState)); until Successor empty(OpenStack); until Success or ResourceLimtsReached; end; \u4f18\u70b9 \u00b6 \u7a7a\u95f4\u5f00\u9500\u5c0f\uff0c\u6bcf\u4e2a\u6df1\u5ea6\u4e0b\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4e0d\u8fc7\u6df1\u5ea6\u6709\u9650\u5236\uff0c\u800c DFS \u7684\u7a7a\u95f4\u6d88\u8017\u5c0f\u662f\u4f17\u6240\u5468\u77e5\u7684\uff1b \u5229\u4e8e\u6df1\u5ea6\u526a\u679d\u3002 \u7f3a\u70b9 \u00b6 \u91cd\u590d\u641c\u7d22\uff1a\u56de\u6eaf\u8fc7\u7a0b\u4e2d\u6bcf\u6b21 depth \u53d8\u5927\u90fd\u8981\u518d\u6b21\u4ece\u5934\u641c\u7d22\u3002 \u5176\u5b9e\uff0c\u524d\u4e00\u6b21\u641c\u7d22\u8ddf\u540e\u4e00\u6b21\u76f8\u5dee\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002 \u4f8b\u9898 \u00b6 \u57c3\u53ca\u5206\u6570 \u9898\u76ee\u63cf\u8ff0 \u5728\u53e4\u57c3\u53ca\uff0c\u4eba\u4eec\u4f7f\u7528\u5355\u4f4d\u5206\u6570\u7684\u548c\uff08\u5373 \\frac{1}{a} \\frac{1}{a} \uff0c a a \u662f\u81ea\u7136\u6570\uff09\u8868\u793a\u4e00\u5207\u6709\u7406\u6570\u3002\u4f8b\u5982\uff0c \\frac{2}{3}=\\frac{1}{2}+\\frac{1}{6} \\frac{2}{3}=\\frac{1}{2}+\\frac{1}{6} \uff0c\u4f46\u4e0d\u5141\u8bb8 \\frac{2}{3}=\\frac{1}{3}+\\frac{1}{3} \\frac{2}{3}=\\frac{1}{3}+\\frac{1}{3} \uff0c\u56e0\u4e3a\u5728\u52a0\u6570\u4e2d\u4e0d\u5141\u8bb8\u6709\u76f8\u540c\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5206\u6570 \\frac{a}{b} \\frac{a}{b} \uff0c\u8868\u793a\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u5176\u4e2d\u52a0\u6570\u5c11\u7684\u6bd4\u52a0\u6570\u591a\u7684\u597d\uff0c\u5982\u679c\u52a0\u6570\u4e2a\u6570\u76f8\u540c\uff0c\u5219\u6700\u5c0f\u7684\u5206\u6570\u8d8a\u5927\u8d8a\u597d\u3002 \u4f8b\u5982\uff0c \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{6}+\\frac{1}{18} \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{6}+\\frac{1}{18} \u662f\u6700\u4f18\u65b9\u6848\u3002 \u8f93\u5165\u6574\u6570 a,b a,b \uff08 0<a<b<500 0<a<b<500 \uff09\uff0c\u8bd5\u7f16\u7a0b\u8ba1\u7b97\u6700\u4f73\u8868\u8fbe\u5f0f\u3002 \u8f93\u5165\u6837\u4f8b\uff1a 1 495 499 \u8f93\u51fa\u6837\u4f8b\uff1a 1 Case 1: 495/499=1/2+1/5+1/6+1/8+1/3992+1/14970 \u5206\u6790 \u8fd9\u9053\u9898\u76ee\u7406\u8bba\u4e0a\u53ef\u4ee5\u7528\u56de\u6eaf\u6cd5\u6c42\u89e3\uff0c\u4f46\u662f \u89e3\u7b54\u6811 \u4f1a\u975e\u5e38 \u201c\u6050\u6016\u201d\u2014\u4e0d\u4ec5\u6df1\u5ea6\u6ca1\u6709\u660e\u663e\u7684\u4e0a\u754c\uff0c\u800c\u4e14\u52a0\u6570\u7684\u9009\u62e9\u7406\u8bba\u4e0a\u4e5f\u662f\u65e0\u9650\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u7528\u5bbd\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u8fde\u4e00\u5c42\u90fd\u6269\u5c55\u4e0d\u5b8c\uff0c\u56e0\u4e3a\u6bcf\u4e00\u5c42\u90fd\u662f \u65e0\u9650\u5927 \u7684\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u91c7\u7528\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22\uff1a\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6df1\u5ea6\u4e0a\u9650 maxd maxd \uff0c\u6bcf\u6b21\u6267\u884c\u53ea\u8003\u8651\u6df1\u5ea6\u4e0d\u8d85\u8fc7 maxd maxd \u7684\u8282\u70b9\u3002\u8fd9\u6837\uff0c\u53ea\u8981\u89e3\u7684\u6df1\u5ea6\u4f18\u5148\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u5728\u6709\u9650\u65f6\u95f4\u5185\u679a\u4e3e\u5230\u3002 \u6df1\u5ea6\u4e0a\u9650 maxd maxd \u8fd8\u53ef\u4ee5\u7528\u6765 \u526a\u679d \u3002 \u6309\u7167\u5206\u6bcd\u9012\u589e\u7684\u987a\u5e8f\u6765\u8fdb\u884c\u6269\u5c55\uff0c\u5982\u679c\u6269\u5c55\u5230 i \u5c42\u65f6\uff0c\u524d i i \u4e2a\u5206\u6570\u4e4b\u548c\u4e3a \\frac{c}{d} \\frac{c}{d} \uff0c\u800c\u7b2c i i \u4e2a\u5206\u6570\u4e3a \\frac{1}{e} \\frac{1}{e} \uff0c\u5219\u63a5\u4e0b\u6765\u81f3\u5c11\u8fd8\u9700\u8981 \\frac{\\frac{a}{b}-\\frac{c}{d}}{\\frac{1}{e}} \\frac{\\frac{a}{b}-\\frac{c}{d}}{\\frac{1}{e}} \u4e2a\u5206\u6570\uff0c\u603b\u548c\u624d\u80fd\u8fbe\u5230 \\frac{a}{b} \\frac{a}{b} \u3002 \u4f8b\u5982\uff0c\u5f53\u524d\u641c\u7d22\u5230 \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{100}+\\cdots \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{100}+\\cdots \uff0c\u5219\u540e\u9762\u7684\u5206\u6570\u6bcf\u4e2a\u6700\u5927\u4e3a \\frac{1}{101} \\frac{1}{101} \uff0c\u81f3\u5c11\u9700\u8981 \\frac{\\frac{19}{45}-\\frac{1}{5}}{\\frac{1}{101}}=23 \\frac{\\frac{19}{45}-\\frac{1}{5}}{\\frac{1}{101}}=23 \u9879\u603b\u548c\u624d\u80fd\u8fbe\u5230 \\frac{19}{45} \\frac{19}{45} \uff0c\u56e0\u6b64\u524d 22 22 \u6b21\u8fed\u4ee3\u662f\u6839\u672c\u4e0d\u4f1a\u8003\u8651\u8fd9\u68f5\u5b50\u6811\u7684\u3002\u8fd9\u91cc\u7684\u5173\u952e\u5728\u4e8e\uff1a\u53ef\u4ee5\u4f30\u8ba1\u81f3\u5c11\u8fd8\u8981\u591a\u5c11\u6b65\u624d\u80fd\u51fa\u89e3\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u4f30\u8ba1\u90fd\u662f\u4e50\u89c2\u7684\uff0c\u56e0\u4e3a\u7528\u4e86 \u81f3\u5c11 \u8fd9\u4e2a\u8bcd\u3002 \u8bf4\u5f97\u5b66\u672f\u4e00\u70b9\uff0c\u8bbe\u6df1\u5ea6\u4e0a\u9650\u4e3a maxd maxd \uff0c\u5f53\u524d\u7ed3\u70b9 n n \u7684\u6df1\u5ea6\u4e3a g(n) g(n) \uff0c\u4e50\u89c2\u4f30\u4ef7\u51fd\u6570\u4e3a h(n) h(n) \uff0c\u5219\u5f53 g(n)+h(n)>maxd g(n)+h(n)>maxd \u65f6\u5e94\u8be5\u526a\u679d\u3002 \u8fd9\u6837\u7684\u7b97\u6cd5\u5c31\u662f IDA*\u3002 \u5f53\u7136\uff0c\u5728\u5b9e\u6218\u4e2d\u4e0d\u9700\u8981\u4e25\u683c\u5730\u5728\u4ee3\u7801\u91cc\u5199\u51fa g(n) g(n) \u548c h(n) h(n) \uff0c\u53ea\u9700\u8981\u50cf\u521a\u624d\u90a3\u6837\u8bbe\u8ba1\u51fa\u4e50\u89c2\u4f30\u4ef7\u51fd\u6570\uff0c\u60f3\u6e05\u695a\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e0d\u53ef\u80fd\u5728\u5f53\u524d\u7684\u6df1\u5ea6\u9650\u5236\u4e0b\u51fa\u89e3\u5373\u53ef\u3002 \u5982\u679c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u4e50\u89c2\u4f30\u4ef7\u51fd\u6570\uff0c\u9884\u6d4b\u4ece\u5f53\u524d\u7ed3\u70b9\u81f3\u5c11\u8fd8\u9700\u8981\u6269\u5c55\u51e0\u5c42\u7ed3\u70b9\u624d\u6709\u53ef\u80fd\u5f97\u5230\u89e3\uff0c\u5219\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22\u53d8\u6210\u4e86 IDA* \u7b97\u6cd5\u3002 \u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // \u57c3\u53ca\u5206\u6570\u95ee\u9898 #include <algorithm> #include <cassert> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; int a , b , maxd ; typedef long long LL ; LL gcd ( LL a , LL b ) { return b == 0 ? a : gcd ( b , a % b ); } // \u8fd4\u56de\u6ee1\u8db31/c <= a/b\u7684\u6700\u5c0fc inline int get_first ( LL a , LL b ) { return b / a + 1 ; } const int maxn = 100 + 5 ; LL v [ maxn ], ans [ maxn ]; // \u5982\u679c\u5f53\u524d\u89e3v\u6bd4\u76ee\u524d\u6700\u4f18\u89e3ans\u66f4\u4f18\uff0c\u66f4\u65b0ans bool better ( int d ) { for ( int i = d ; i >= 0 ; i -- ) if ( v [ i ] != ans [ i ]) { return ans [ i ] == - 1 || v [ i ] < ans [ i ]; } return false ; } // \u5f53\u524d\u6df1\u5ea6\u4e3ad\uff0c\u5206\u6bcd\u4e0d\u80fd\u5c0f\u4e8efrom\uff0c\u5206\u6570\u4e4b\u548c\u6070\u597d\u4e3aaa/bb bool dfs ( int d , int from , LL aa , LL bb ) { if ( d == maxd ) { if ( bb % aa ) return false ; // aa/bb\u5fc5\u987b\u662f\u57c3\u53ca\u5206\u6570 v [ d ] = bb / aa ; if ( better ( d )) memcpy ( ans , v , sizeof ( LL ) * ( d + 1 )); return true ; } bool ok = false ; from = max ( from , get_first ( aa , bb )); // \u679a\u4e3e\u7684\u8d77\u70b9 for ( int i = from ;; i ++ ) { // \u526a\u679d\uff1a\u5982\u679c\u5269\u4e0b\u7684maxd+1-d\u4e2a\u5206\u6570\u5168\u90e8\u90fd\u662f1/i\uff0c\u52a0\u8d77\u6765\u4ecd\u7136\u4e0d\u8d85\u8fc7aa/bb\uff0c\u5219\u65e0\u89e3 if ( bb * ( maxd + 1 - d ) <= i * aa ) break ; v [ d ] = i ; // \u8ba1\u7b97aa/bb - 1/i\uff0c\u8bbe\u7ed3\u679c\u4e3aa2/b2 LL b2 = bb * i ; LL a2 = aa * i - bb ; LL g = gcd ( a2 , b2 ); // \u4ee5\u4fbf\u7ea6\u5206 if ( dfs ( d + 1 , i + 1 , a2 / g , b2 / g )) ok = true ; } return ok ; } int main () { int kase = 0 ; while ( cin >> a >> b ) { int ok = 0 ; for ( maxd = 1 ; maxd <= 100 ; maxd ++ ) { memset ( ans , - 1 , sizeof ( ans )); if ( dfs ( 0 , get_first ( a , b ), a , b )) { ok = 1 ; break ; } } cout << \"Case \" << ++ kase << \": \" ; if ( ok ) { cout << a << \"/\" << b << \"=\" ; for ( int i = 0 ; i < maxd ; i ++ ) cout << \"1/\" << ans [ i ] << \"+\" ; cout << \"1/\" << ans [ maxd ] << \" \\n \" ; } else cout << \"No solution. \\n \" ; } return 0 ; } \u7ec3\u4e60\u9898 \u00b6 \u65cb\u8f6c\u6e38\u620f UVa1343","title":"IDA*"},{"location":"search/idastar/#ida42","text":"IDA*\uff0c\u5373\u91c7\u7528\u8fed\u4ee3\u52a0\u6df1\u7684 A* \u7b97\u6cd5\u3002\u76f8\u5bf9\u4e8e A* \u7b97\u6cd5\uff0c\u7531\u4e8e IDA* \u6539\u6210\u4e86\u6df1\u5ea6\u4f18\u5148\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5 IDA* \u66f4\u5b9e\u7528\uff1a \u4e0d\u9700\u8981\u5224\u91cd\uff0c\u4e0d\u9700\u8981\u6392\u5e8f\uff1b \u7a7a\u95f4\u9700\u6c42\u51cf\u5c11\u3002 \u5927\u81f4\u6846\u67b6 \uff08\u4f2a\u4ee3\u7801\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Procedure IDA_STAR(StartState) Begin PathLimit := H(StartState) - 1; Succes := False; Repeat inc(PathLimit); StartState.g = 0; Push(OpenStack , StartState); Repeat CurrentState := Pop(OpenStack); If Solution(CurrentState) then Success = True Elseif PathLimit >= CurrentState.g + H(CurrentState) then For each Child(CurrentState) do Push(OpenStack , Child(CurrentState)); until Successor empty(OpenStack); until Success or ResourceLimtsReached; end;","title":"IDA* \u7b80\u4ecb"},{"location":"search/idastar/#_1","text":"\u7a7a\u95f4\u5f00\u9500\u5c0f\uff0c\u6bcf\u4e2a\u6df1\u5ea6\u4e0b\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4e0d\u8fc7\u6df1\u5ea6\u6709\u9650\u5236\uff0c\u800c DFS \u7684\u7a7a\u95f4\u6d88\u8017\u5c0f\u662f\u4f17\u6240\u5468\u77e5\u7684\uff1b \u5229\u4e8e\u6df1\u5ea6\u526a\u679d\u3002","title":"\u4f18\u70b9"},{"location":"search/idastar/#_2","text":"\u91cd\u590d\u641c\u7d22\uff1a\u56de\u6eaf\u8fc7\u7a0b\u4e2d\u6bcf\u6b21 depth \u53d8\u5927\u90fd\u8981\u518d\u6b21\u4ece\u5934\u641c\u7d22\u3002 \u5176\u5b9e\uff0c\u524d\u4e00\u6b21\u641c\u7d22\u8ddf\u540e\u4e00\u6b21\u76f8\u5dee\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002","title":"\u7f3a\u70b9"},{"location":"search/idastar/#_3","text":"\u57c3\u53ca\u5206\u6570 \u9898\u76ee\u63cf\u8ff0 \u5728\u53e4\u57c3\u53ca\uff0c\u4eba\u4eec\u4f7f\u7528\u5355\u4f4d\u5206\u6570\u7684\u548c\uff08\u5373 \\frac{1}{a} \\frac{1}{a} \uff0c a a \u662f\u81ea\u7136\u6570\uff09\u8868\u793a\u4e00\u5207\u6709\u7406\u6570\u3002\u4f8b\u5982\uff0c \\frac{2}{3}=\\frac{1}{2}+\\frac{1}{6} \\frac{2}{3}=\\frac{1}{2}+\\frac{1}{6} \uff0c\u4f46\u4e0d\u5141\u8bb8 \\frac{2}{3}=\\frac{1}{3}+\\frac{1}{3} \\frac{2}{3}=\\frac{1}{3}+\\frac{1}{3} \uff0c\u56e0\u4e3a\u5728\u52a0\u6570\u4e2d\u4e0d\u5141\u8bb8\u6709\u76f8\u540c\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5206\u6570 \\frac{a}{b} \\frac{a}{b} \uff0c\u8868\u793a\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u5176\u4e2d\u52a0\u6570\u5c11\u7684\u6bd4\u52a0\u6570\u591a\u7684\u597d\uff0c\u5982\u679c\u52a0\u6570\u4e2a\u6570\u76f8\u540c\uff0c\u5219\u6700\u5c0f\u7684\u5206\u6570\u8d8a\u5927\u8d8a\u597d\u3002 \u4f8b\u5982\uff0c \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{6}+\\frac{1}{18} \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{6}+\\frac{1}{18} \u662f\u6700\u4f18\u65b9\u6848\u3002 \u8f93\u5165\u6574\u6570 a,b a,b \uff08 0<a<b<500 0<a<b<500 \uff09\uff0c\u8bd5\u7f16\u7a0b\u8ba1\u7b97\u6700\u4f73\u8868\u8fbe\u5f0f\u3002 \u8f93\u5165\u6837\u4f8b\uff1a 1 495 499 \u8f93\u51fa\u6837\u4f8b\uff1a 1 Case 1: 495/499=1/2+1/5+1/6+1/8+1/3992+1/14970 \u5206\u6790 \u8fd9\u9053\u9898\u76ee\u7406\u8bba\u4e0a\u53ef\u4ee5\u7528\u56de\u6eaf\u6cd5\u6c42\u89e3\uff0c\u4f46\u662f \u89e3\u7b54\u6811 \u4f1a\u975e\u5e38 \u201c\u6050\u6016\u201d\u2014\u4e0d\u4ec5\u6df1\u5ea6\u6ca1\u6709\u660e\u663e\u7684\u4e0a\u754c\uff0c\u800c\u4e14\u52a0\u6570\u7684\u9009\u62e9\u7406\u8bba\u4e0a\u4e5f\u662f\u65e0\u9650\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u7528\u5bbd\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u8fde\u4e00\u5c42\u90fd\u6269\u5c55\u4e0d\u5b8c\uff0c\u56e0\u4e3a\u6bcf\u4e00\u5c42\u90fd\u662f \u65e0\u9650\u5927 \u7684\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u91c7\u7528\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22\uff1a\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6df1\u5ea6\u4e0a\u9650 maxd maxd \uff0c\u6bcf\u6b21\u6267\u884c\u53ea\u8003\u8651\u6df1\u5ea6\u4e0d\u8d85\u8fc7 maxd maxd \u7684\u8282\u70b9\u3002\u8fd9\u6837\uff0c\u53ea\u8981\u89e3\u7684\u6df1\u5ea6\u4f18\u5148\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u5728\u6709\u9650\u65f6\u95f4\u5185\u679a\u4e3e\u5230\u3002 \u6df1\u5ea6\u4e0a\u9650 maxd maxd \u8fd8\u53ef\u4ee5\u7528\u6765 \u526a\u679d \u3002 \u6309\u7167\u5206\u6bcd\u9012\u589e\u7684\u987a\u5e8f\u6765\u8fdb\u884c\u6269\u5c55\uff0c\u5982\u679c\u6269\u5c55\u5230 i \u5c42\u65f6\uff0c\u524d i i \u4e2a\u5206\u6570\u4e4b\u548c\u4e3a \\frac{c}{d} \\frac{c}{d} \uff0c\u800c\u7b2c i i \u4e2a\u5206\u6570\u4e3a \\frac{1}{e} \\frac{1}{e} \uff0c\u5219\u63a5\u4e0b\u6765\u81f3\u5c11\u8fd8\u9700\u8981 \\frac{\\frac{a}{b}-\\frac{c}{d}}{\\frac{1}{e}} \\frac{\\frac{a}{b}-\\frac{c}{d}}{\\frac{1}{e}} \u4e2a\u5206\u6570\uff0c\u603b\u548c\u624d\u80fd\u8fbe\u5230 \\frac{a}{b} \\frac{a}{b} \u3002 \u4f8b\u5982\uff0c\u5f53\u524d\u641c\u7d22\u5230 \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{100}+\\cdots \\frac{19}{45}=\\frac{1}{5}+\\frac{1}{100}+\\cdots \uff0c\u5219\u540e\u9762\u7684\u5206\u6570\u6bcf\u4e2a\u6700\u5927\u4e3a \\frac{1}{101} \\frac{1}{101} \uff0c\u81f3\u5c11\u9700\u8981 \\frac{\\frac{19}{45}-\\frac{1}{5}}{\\frac{1}{101}}=23 \\frac{\\frac{19}{45}-\\frac{1}{5}}{\\frac{1}{101}}=23 \u9879\u603b\u548c\u624d\u80fd\u8fbe\u5230 \\frac{19}{45} \\frac{19}{45} \uff0c\u56e0\u6b64\u524d 22 22 \u6b21\u8fed\u4ee3\u662f\u6839\u672c\u4e0d\u4f1a\u8003\u8651\u8fd9\u68f5\u5b50\u6811\u7684\u3002\u8fd9\u91cc\u7684\u5173\u952e\u5728\u4e8e\uff1a\u53ef\u4ee5\u4f30\u8ba1\u81f3\u5c11\u8fd8\u8981\u591a\u5c11\u6b65\u624d\u80fd\u51fa\u89e3\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u4f30\u8ba1\u90fd\u662f\u4e50\u89c2\u7684\uff0c\u56e0\u4e3a\u7528\u4e86 \u81f3\u5c11 \u8fd9\u4e2a\u8bcd\u3002 \u8bf4\u5f97\u5b66\u672f\u4e00\u70b9\uff0c\u8bbe\u6df1\u5ea6\u4e0a\u9650\u4e3a maxd maxd \uff0c\u5f53\u524d\u7ed3\u70b9 n n \u7684\u6df1\u5ea6\u4e3a g(n) g(n) \uff0c\u4e50\u89c2\u4f30\u4ef7\u51fd\u6570\u4e3a h(n) h(n) \uff0c\u5219\u5f53 g(n)+h(n)>maxd g(n)+h(n)>maxd \u65f6\u5e94\u8be5\u526a\u679d\u3002 \u8fd9\u6837\u7684\u7b97\u6cd5\u5c31\u662f IDA*\u3002 \u5f53\u7136\uff0c\u5728\u5b9e\u6218\u4e2d\u4e0d\u9700\u8981\u4e25\u683c\u5730\u5728\u4ee3\u7801\u91cc\u5199\u51fa g(n) g(n) \u548c h(n) h(n) \uff0c\u53ea\u9700\u8981\u50cf\u521a\u624d\u90a3\u6837\u8bbe\u8ba1\u51fa\u4e50\u89c2\u4f30\u4ef7\u51fd\u6570\uff0c\u60f3\u6e05\u695a\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e0d\u53ef\u80fd\u5728\u5f53\u524d\u7684\u6df1\u5ea6\u9650\u5236\u4e0b\u51fa\u89e3\u5373\u53ef\u3002 \u5982\u679c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u4e50\u89c2\u4f30\u4ef7\u51fd\u6570\uff0c\u9884\u6d4b\u4ece\u5f53\u524d\u7ed3\u70b9\u81f3\u5c11\u8fd8\u9700\u8981\u6269\u5c55\u51e0\u5c42\u7ed3\u70b9\u624d\u6709\u53ef\u80fd\u5f97\u5230\u89e3\uff0c\u5219\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22\u53d8\u6210\u4e86 IDA* \u7b97\u6cd5\u3002 \u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // \u57c3\u53ca\u5206\u6570\u95ee\u9898 #include <algorithm> #include <cassert> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; int a , b , maxd ; typedef long long LL ; LL gcd ( LL a , LL b ) { return b == 0 ? a : gcd ( b , a % b ); } // \u8fd4\u56de\u6ee1\u8db31/c <= a/b\u7684\u6700\u5c0fc inline int get_first ( LL a , LL b ) { return b / a + 1 ; } const int maxn = 100 + 5 ; LL v [ maxn ], ans [ maxn ]; // \u5982\u679c\u5f53\u524d\u89e3v\u6bd4\u76ee\u524d\u6700\u4f18\u89e3ans\u66f4\u4f18\uff0c\u66f4\u65b0ans bool better ( int d ) { for ( int i = d ; i >= 0 ; i -- ) if ( v [ i ] != ans [ i ]) { return ans [ i ] == - 1 || v [ i ] < ans [ i ]; } return false ; } // \u5f53\u524d\u6df1\u5ea6\u4e3ad\uff0c\u5206\u6bcd\u4e0d\u80fd\u5c0f\u4e8efrom\uff0c\u5206\u6570\u4e4b\u548c\u6070\u597d\u4e3aaa/bb bool dfs ( int d , int from , LL aa , LL bb ) { if ( d == maxd ) { if ( bb % aa ) return false ; // aa/bb\u5fc5\u987b\u662f\u57c3\u53ca\u5206\u6570 v [ d ] = bb / aa ; if ( better ( d )) memcpy ( ans , v , sizeof ( LL ) * ( d + 1 )); return true ; } bool ok = false ; from = max ( from , get_first ( aa , bb )); // \u679a\u4e3e\u7684\u8d77\u70b9 for ( int i = from ;; i ++ ) { // \u526a\u679d\uff1a\u5982\u679c\u5269\u4e0b\u7684maxd+1-d\u4e2a\u5206\u6570\u5168\u90e8\u90fd\u662f1/i\uff0c\u52a0\u8d77\u6765\u4ecd\u7136\u4e0d\u8d85\u8fc7aa/bb\uff0c\u5219\u65e0\u89e3 if ( bb * ( maxd + 1 - d ) <= i * aa ) break ; v [ d ] = i ; // \u8ba1\u7b97aa/bb - 1/i\uff0c\u8bbe\u7ed3\u679c\u4e3aa2/b2 LL b2 = bb * i ; LL a2 = aa * i - bb ; LL g = gcd ( a2 , b2 ); // \u4ee5\u4fbf\u7ea6\u5206 if ( dfs ( d + 1 , i + 1 , a2 / g , b2 / g )) ok = true ; } return ok ; } int main () { int kase = 0 ; while ( cin >> a >> b ) { int ok = 0 ; for ( maxd = 1 ; maxd <= 100 ; maxd ++ ) { memset ( ans , - 1 , sizeof ( ans )); if ( dfs ( 0 , get_first ( a , b ), a , b )) { ok = 1 ; break ; } } cout << \"Case \" << ++ kase << \": \" ; if ( ok ) { cout << a << \"/\" << b << \"=\" ; for ( int i = 0 ; i < maxd ; i ++ ) cout << \"1/\" << ans [ i ] << \"+\" ; cout << \"1/\" << ans [ maxd ] << \" \\n \" ; } else cout << \"No solution. \\n \" ; } return 0 ; }","title":"\u4f8b\u9898"},{"location":"search/idastar/#_4","text":"\u65cb\u8f6c\u6e38\u620f UVa1343","title":"\u7ec3\u4e60\u9898"},{"location":"search/iterative/","text":"\u7b80\u4ecb \u00b6 \u8fed\u4ee3\u52a0\u6df1\u662f\u4e00\u79cd \u6bcf\u6b21\u9650\u5236\u641c\u7d22\u6df1\u5ea6\u7684 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u5b83\u7684\u672c\u8d28\u8fd8\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u53ea\u4e0d\u8fc7\u5728\u641c\u7d22\u7684\u540c\u65f6\u5e26\u4e0a\u4e86\u4e00\u4e2a\u6df1\u5ea6 d d \uff0c\u5f53 d d \u8fbe\u5230\u8bbe\u5b9a\u7684\u6df1\u5ea6\u65f6\u5c31\u8fd4\u56de\uff0c\u4e00\u822c\u7528\u4e8e\u627e\u6700\u4f18\u89e3\u3002\u5982\u679c\u4e00\u6b21\u641c\u7d22\u6ca1\u6709\u627e\u5230\u5408\u6cd5\u7684\u89e3\uff0c\u5c31\u8ba9\u8bbe\u5b9a\u7684\u6df1\u5ea6 +1 +1 \uff0c\u91cd\u65b0\u4ece\u6839\u5f00\u59cb\u3002 \u65e2\u7136\u662f\u4e3a\u4e86\u627e\u6700\u4f18\u89e3\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528 BFS \u5462\uff1f\u6211\u4eec\u77e5\u9053 BFS \u7684\u57fa\u7840\u662f\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5f88\u5927\uff0c\u5f53\u72b6\u6001\u6bd4\u8f83\u591a\u6216\u8005\u5355\u4e2a\u72b6\u6001\u6bd4\u8f83\u5927\u65f6\uff0c\u4f7f\u7528\u961f\u5217\u7684 BFS \u5c31\u663e\u51fa\u4e86\u52a3\u52bf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fed\u4ee3\u52a0\u6df1\u5c31\u7c7b\u4f3c\u4e8e\u7528 DFS \u65b9\u5f0f\u5b9e\u73b0\u7684 BFS\uff0c\u5b83\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u76f8\u5bf9\u8f83\u5c0f\u3002 \u5f53\u641c\u7d22\u6811\u7684\u5206\u652f\u6bd4\u8f83\u591a\u65f6\uff0c\u6bcf\u589e\u52a0\u4e00\u5c42\u7684\u641c\u7d22\u590d\u6742\u5ea6\u4f1a\u51fa\u73b0\u6307\u6570\u7ea7\u7206\u70b8\u5f0f\u589e\u957f\uff0c\u8fd9\u65f6\u524d\u9762\u91cd\u590d\u8fdb\u884c\u7684\u90e8\u5206\u6240\u5e26\u6765\u7684\u590d\u6742\u5ea6\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fed\u4ee3\u52a0\u6df1\u662f\u53ef\u4ee5\u8fd1\u4f3c\u770b\u6210 BFS \u7684\u3002 \u6b65\u9aa4 \u00b6 \u9996\u5148\u8bbe\u5b9a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6df1\u5ea6\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u8fdb\u884c DFS\u3002\u6bcf\u8fdb\u5165\u4e00\u6b21 DFS\uff0c\u5c06\u5f53\u524d\u6df1\u5ea6 d++ d++ \uff0c\u5f53\u53d1\u73b0 d d \u5927\u4e8e\u8bbe\u5b9a\u7684\u6df1\u5ea6\u5c31\u8fd4\u56de\u3002\u5982\u679c\u5728\u641c\u7d22\u7684\u9014\u4e2d\u53d1\u73b0\u4e86\u7b54\u6848\u5c31\u53ef\u4ee5\u56de\u6eaf\uff0c\u540c\u65f6\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8bb0\u5f55\u8def\u5f84\u3002\u5982\u679c\u6ca1\u6709\u53d1\u73b0\u7b54\u6848\uff0c\u5c31\u8fd4\u56de\u5230\u51fd\u6570\u5165\u53e3\uff0c\u589e\u52a0\u8bbe\u5b9a\u6df1\u5ea6\uff0c\u7ee7\u7eed\u641c\u7d22\u3002 \u4ee3\u7801\u7ed3\u6784 \u00b6 1 2 3 4 5 6 7 IDDFS(u,d) if d>\u8bbe\u5b9a\u6df1\u5ea6 return else for each edge (u,v) IDDFS(v,d+1) return \u6ce8\u610f\u4e8b\u9879 \u00b6 \u5728\u5927\u591a\u6570\u7684\u9898\u76ee\u4e2d\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u8fd8\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\uff0c\u800c\u4e14\u5bb9\u6613\u5224\u91cd\u3002\u5f53\u53d1\u73b0\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5728\u7a7a\u95f4\u4e0a\u4e0d\u591f\u4f18\u79c0\uff0c\u800c\u4e14\u8981\u627e\u6700\u4f18\u89e3\u7684\u95ee\u9898\u65f6\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u8fed\u4ee3\u52a0\u6df1\u3002","title":"\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22"},{"location":"search/iterative/#_1","text":"\u8fed\u4ee3\u52a0\u6df1\u662f\u4e00\u79cd \u6bcf\u6b21\u9650\u5236\u641c\u7d22\u6df1\u5ea6\u7684 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u5b83\u7684\u672c\u8d28\u8fd8\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u53ea\u4e0d\u8fc7\u5728\u641c\u7d22\u7684\u540c\u65f6\u5e26\u4e0a\u4e86\u4e00\u4e2a\u6df1\u5ea6 d d \uff0c\u5f53 d d \u8fbe\u5230\u8bbe\u5b9a\u7684\u6df1\u5ea6\u65f6\u5c31\u8fd4\u56de\uff0c\u4e00\u822c\u7528\u4e8e\u627e\u6700\u4f18\u89e3\u3002\u5982\u679c\u4e00\u6b21\u641c\u7d22\u6ca1\u6709\u627e\u5230\u5408\u6cd5\u7684\u89e3\uff0c\u5c31\u8ba9\u8bbe\u5b9a\u7684\u6df1\u5ea6 +1 +1 \uff0c\u91cd\u65b0\u4ece\u6839\u5f00\u59cb\u3002 \u65e2\u7136\u662f\u4e3a\u4e86\u627e\u6700\u4f18\u89e3\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528 BFS \u5462\uff1f\u6211\u4eec\u77e5\u9053 BFS \u7684\u57fa\u7840\u662f\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5f88\u5927\uff0c\u5f53\u72b6\u6001\u6bd4\u8f83\u591a\u6216\u8005\u5355\u4e2a\u72b6\u6001\u6bd4\u8f83\u5927\u65f6\uff0c\u4f7f\u7528\u961f\u5217\u7684 BFS \u5c31\u663e\u51fa\u4e86\u52a3\u52bf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fed\u4ee3\u52a0\u6df1\u5c31\u7c7b\u4f3c\u4e8e\u7528 DFS \u65b9\u5f0f\u5b9e\u73b0\u7684 BFS\uff0c\u5b83\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u76f8\u5bf9\u8f83\u5c0f\u3002 \u5f53\u641c\u7d22\u6811\u7684\u5206\u652f\u6bd4\u8f83\u591a\u65f6\uff0c\u6bcf\u589e\u52a0\u4e00\u5c42\u7684\u641c\u7d22\u590d\u6742\u5ea6\u4f1a\u51fa\u73b0\u6307\u6570\u7ea7\u7206\u70b8\u5f0f\u589e\u957f\uff0c\u8fd9\u65f6\u524d\u9762\u91cd\u590d\u8fdb\u884c\u7684\u90e8\u5206\u6240\u5e26\u6765\u7684\u590d\u6742\u5ea6\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fed\u4ee3\u52a0\u6df1\u662f\u53ef\u4ee5\u8fd1\u4f3c\u770b\u6210 BFS \u7684\u3002","title":"\u7b80\u4ecb"},{"location":"search/iterative/#_2","text":"\u9996\u5148\u8bbe\u5b9a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6df1\u5ea6\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u8fdb\u884c DFS\u3002\u6bcf\u8fdb\u5165\u4e00\u6b21 DFS\uff0c\u5c06\u5f53\u524d\u6df1\u5ea6 d++ d++ \uff0c\u5f53\u53d1\u73b0 d d \u5927\u4e8e\u8bbe\u5b9a\u7684\u6df1\u5ea6\u5c31\u8fd4\u56de\u3002\u5982\u679c\u5728\u641c\u7d22\u7684\u9014\u4e2d\u53d1\u73b0\u4e86\u7b54\u6848\u5c31\u53ef\u4ee5\u56de\u6eaf\uff0c\u540c\u65f6\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8bb0\u5f55\u8def\u5f84\u3002\u5982\u679c\u6ca1\u6709\u53d1\u73b0\u7b54\u6848\uff0c\u5c31\u8fd4\u56de\u5230\u51fd\u6570\u5165\u53e3\uff0c\u589e\u52a0\u8bbe\u5b9a\u6df1\u5ea6\uff0c\u7ee7\u7eed\u641c\u7d22\u3002","title":"\u6b65\u9aa4"},{"location":"search/iterative/#_3","text":"1 2 3 4 5 6 7 IDDFS(u,d) if d>\u8bbe\u5b9a\u6df1\u5ea6 return else for each edge (u,v) IDDFS(v,d+1) return","title":"\u4ee3\u7801\u7ed3\u6784"},{"location":"search/iterative/#_4","text":"\u5728\u5927\u591a\u6570\u7684\u9898\u76ee\u4e2d\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u8fd8\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\uff0c\u800c\u4e14\u5bb9\u6613\u5224\u91cd\u3002\u5f53\u53d1\u73b0\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5728\u7a7a\u95f4\u4e0a\u4e0d\u591f\u4f18\u79c0\uff0c\u800c\u4e14\u8981\u627e\u6700\u4f18\u89e3\u7684\u95ee\u9898\u65f6\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u8fed\u4ee3\u52a0\u6df1\u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"search/optimization/","text":"\u524d\u8a00 \u00b6 dfs\uff08\u5373 \u6df1\u641c\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u7b97\u6cd5\uff0c\u5927\u90e8\u5206\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u7528 dfs \u89e3\u51b3\uff0c\u4f46\u662f\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90fd\u662f\u9a97\u5206\u7b97\u6cd5\uff0c\u5f88\u5c11\u4f1a\u6709\u7206\u641c\u4e3a\u6b63\u89e3\u7684\u9898\u76ee\u3002\u56e0\u4e3a dfs \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7279\u522b\u9ad8\u3002\uff08\u6ca1\u5b66\u8fc7 dfs \u7684\u8bf7\u81ea\u884c\u8865\u4e0a\u8fd9\u4e00\u8bfe\uff09 \u65e2\u7136\u4e0d\u80fd\u6210\u4e3a\u6b63\u89e3\uff0c\u90a3\u5c31\u591a\u9a97\u4e00\u70b9\u5206\u5427\u3002\u90a3\u4e48\u8fd9\u4e00\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u5b9e\u7528\u7684\u4f18\u5316\u7b97\u6cd5\uff08\u4fd7\u79f0 \u201c\u526a\u679d\u201d\uff09\u3002 \u5148\u6765\u4e00\u6bb5\u6df1\u641c\u6a21\u677f\uff0c\u4e4b\u540e\u7684\u6a21\u677f\u5c06\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 1 2 3 4 5 6 7 8 9 10 int ans = \u6700\u574f\u60c5\u51b5 , now ; // now\u4e3a\u5f53\u524d\u7b54\u6848 void dfs ( \u4f20\u5165\u6570\u503c ) { if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } } \u5176\u4e2d\u7684 ans \u53ef\u4ee5\u662f\u89e3\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18\u5c31\u53d8\u6210\u4e86\u8f93\u51fa\u89e3. \u4f18\u5316\u4e0e\u526a\u679d \u00b6 \u6700\u5e38\u7528\u7684\u526a\u679d\u6709 3 \u79cd\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\u3001\u6700\u4f18\u6027\u526a\u679d\u3001\u53ef\u884c\u6027\u526a\u679d\u3002 \u8bb0\u5fc6\u5316\u641c\u7d22 \u00b6 \u56e0\u4e3a\u5728\u641c\u7d22\u4e2d\uff0c\u76f8\u540c\u7684\u4f20\u5165\u503c\u5f80\u5f80\u4f1a\u5e26\u6765\u76f8\u540c\u7684\u89e3\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u8bb0\u5fc6\uff0c\u8be6\u89c1 \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002 \u6a21\u677f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int g [ MAXN ]; //\u5b9a\u4e49\u8bb0\u5fc6\u5316\u6570\u7ec4 int ans = \u6700\u574f\u60c5\u51b5 , now ; void dfs f ( \u4f20\u5165\u6570\u503c ) { if ( g [ \u89c4\u6a21 ] != \u65e0\u6548\u6570\u503c ) return ; //\u6216\u8bb0\u5f55\u89e3\uff0c\u89c6\u60c5\u51b5\u800c\u5b9a if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; //\u8f93\u51fa\u89e3\uff0c\u89c6\u60c5\u51b5\u800c\u5b9a for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } } int main () { ... memset ( g , \u65e0\u6548\u6570\u503c , sizeof ( g )); //\u521d\u59cb\u5316\u8bb0\u5fc6\u5316\u6570\u7ec4 ... } \u6700\u4f18\u6027\u526a\u679d \u00b6 \u5728\u641c\u7d22\u4e2d\u5bfc\u81f4\u8fd0\u884c\u6162\u7684\u539f\u56e0\u8fd8\u6709\u4e00\u79cd\uff0c\u5c31\u662f\u5728\u5f53\u524d\u89e3\u5df2\u7ecf\u6bd4\u5df2\u6709\u89e3\u5dee\u65f6\u4ecd\u7136\u5728\u641c\u7d22\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u89e3\u662f\u5426\u5df2\u7ecf\u5dee\u4e8e\u5df2\u6709\u89e3\u3002 \u6a21\u677f\uff1a 1 2 3 4 5 6 7 8 9 10 11 int ans = \u6700\u574f\u60c5\u51b5 , now ; void dfs ( \u4f20\u5165\u6570\u503c ) { if ( now\u6bd4ans\u7684\u7b54\u6848\u8fd8\u8981\u5dee ) return ; if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } } \u53ef\u884c\u6027\u526a\u679d \u00b6 \u6a21\u677f\uff1a \u5728\u641c\u7d22\u4e2d\u5982\u679c\u5f53\u524d\u89e3\u5df2\u7ecf\u4e0d\u53ef\u7528\u4e86\u8fd8\u8fd0\u884c\uff0c\u4e5f\u662f\u5728\u641c\u7d22\u4e2d\u5bfc\u81f4\u8fd0\u884c\u6162\u7684\u539f\u56e0\u3002 1 2 3 4 5 6 7 8 9 10 11 int ans = \u6700\u574f\u60c5\u51b5 , now ; void dfs ( \u4f20\u5165\u6570\u503c ) { if ( \u5f53\u524d\u89e3\u5df2\u4e0d\u53ef\u7528 ) return ; if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } }","title":"\u4f18\u5316"},{"location":"search/optimization/#_1","text":"dfs\uff08\u5373 \u6df1\u641c\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u7b97\u6cd5\uff0c\u5927\u90e8\u5206\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u7528 dfs \u89e3\u51b3\uff0c\u4f46\u662f\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90fd\u662f\u9a97\u5206\u7b97\u6cd5\uff0c\u5f88\u5c11\u4f1a\u6709\u7206\u641c\u4e3a\u6b63\u89e3\u7684\u9898\u76ee\u3002\u56e0\u4e3a dfs \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7279\u522b\u9ad8\u3002\uff08\u6ca1\u5b66\u8fc7 dfs \u7684\u8bf7\u81ea\u884c\u8865\u4e0a\u8fd9\u4e00\u8bfe\uff09 \u65e2\u7136\u4e0d\u80fd\u6210\u4e3a\u6b63\u89e3\uff0c\u90a3\u5c31\u591a\u9a97\u4e00\u70b9\u5206\u5427\u3002\u90a3\u4e48\u8fd9\u4e00\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u5b9e\u7528\u7684\u4f18\u5316\u7b97\u6cd5\uff08\u4fd7\u79f0 \u201c\u526a\u679d\u201d\uff09\u3002 \u5148\u6765\u4e00\u6bb5\u6df1\u641c\u6a21\u677f\uff0c\u4e4b\u540e\u7684\u6a21\u677f\u5c06\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 1 2 3 4 5 6 7 8 9 10 int ans = \u6700\u574f\u60c5\u51b5 , now ; // now\u4e3a\u5f53\u524d\u7b54\u6848 void dfs ( \u4f20\u5165\u6570\u503c ) { if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } } \u5176\u4e2d\u7684 ans \u53ef\u4ee5\u662f\u89e3\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18\u5c31\u53d8\u6210\u4e86\u8f93\u51fa\u89e3.","title":"\u524d\u8a00"},{"location":"search/optimization/#_2","text":"\u6700\u5e38\u7528\u7684\u526a\u679d\u6709 3 \u79cd\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\u3001\u6700\u4f18\u6027\u526a\u679d\u3001\u53ef\u884c\u6027\u526a\u679d\u3002","title":"\u4f18\u5316\u4e0e\u526a\u679d"},{"location":"search/optimization/#_3","text":"\u56e0\u4e3a\u5728\u641c\u7d22\u4e2d\uff0c\u76f8\u540c\u7684\u4f20\u5165\u503c\u5f80\u5f80\u4f1a\u5e26\u6765\u76f8\u540c\u7684\u89e3\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u8bb0\u5fc6\uff0c\u8be6\u89c1 \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002 \u6a21\u677f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int g [ MAXN ]; //\u5b9a\u4e49\u8bb0\u5fc6\u5316\u6570\u7ec4 int ans = \u6700\u574f\u60c5\u51b5 , now ; void dfs f ( \u4f20\u5165\u6570\u503c ) { if ( g [ \u89c4\u6a21 ] != \u65e0\u6548\u6570\u503c ) return ; //\u6216\u8bb0\u5f55\u89e3\uff0c\u89c6\u60c5\u51b5\u800c\u5b9a if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; //\u8f93\u51fa\u89e3\uff0c\u89c6\u60c5\u51b5\u800c\u5b9a for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } } int main () { ... memset ( g , \u65e0\u6548\u6570\u503c , sizeof ( g )); //\u521d\u59cb\u5316\u8bb0\u5fc6\u5316\u6570\u7ec4 ... }","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"search/optimization/#_4","text":"\u5728\u641c\u7d22\u4e2d\u5bfc\u81f4\u8fd0\u884c\u6162\u7684\u539f\u56e0\u8fd8\u6709\u4e00\u79cd\uff0c\u5c31\u662f\u5728\u5f53\u524d\u89e3\u5df2\u7ecf\u6bd4\u5df2\u6709\u89e3\u5dee\u65f6\u4ecd\u7136\u5728\u641c\u7d22\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u89e3\u662f\u5426\u5df2\u7ecf\u5dee\u4e8e\u5df2\u6709\u89e3\u3002 \u6a21\u677f\uff1a 1 2 3 4 5 6 7 8 9 10 11 int ans = \u6700\u574f\u60c5\u51b5 , now ; void dfs ( \u4f20\u5165\u6570\u503c ) { if ( now\u6bd4ans\u7684\u7b54\u6848\u8fd8\u8981\u5dee ) return ; if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } }","title":"\u6700\u4f18\u6027\u526a\u679d"},{"location":"search/optimization/#_5","text":"\u6a21\u677f\uff1a \u5728\u641c\u7d22\u4e2d\u5982\u679c\u5f53\u524d\u89e3\u5df2\u7ecf\u4e0d\u53ef\u7528\u4e86\u8fd8\u8fd0\u884c\uff0c\u4e5f\u662f\u5728\u641c\u7d22\u4e2d\u5bfc\u81f4\u8fd0\u884c\u6162\u7684\u539f\u56e0\u3002 1 2 3 4 5 6 7 8 9 10 11 int ans = \u6700\u574f\u60c5\u51b5 , now ; void dfs ( \u4f20\u5165\u6570\u503c ) { if ( \u5f53\u524d\u89e3\u5df2\u4e0d\u53ef\u7528 ) return ; if ( \u5230\u8fbe\u76ee\u7684\u5730 ) ans = \u4ece\u5f53\u524d\u89e3\u4e0e\u5df2\u6709\u89e3\u4e2d\u9009\u6700\u4f18 ; for ( \u904d\u5386\u6240\u6709\u53ef\u80fd\u6027 ) if ( \u53ef\u884c ) { \u8fdb\u884c\u64cd\u4f5c ; dfs ( \u7f29\u5c0f\u89c4\u6a21 ); \u64a4\u56de\u64cd\u4f5c ; } }","title":"\u53ef\u884c\u6027\u526a\u679d"},{"location":"string/","text":"\u5b57\u7b26\u4e32\u662f\u5565\uff1f \u00b6 \u5b57\u7b26\u4e32\u53ef\u4ee5\u770b\u4f5c\u662f\u5b57\u7b26\u5e8f\u5217\u3002 \u5b57\u7b26\u96c6 \u00b6 \u5b57\u7b26\u96c6\u662f\u7b26\u53f7\u548c\u6587\u5b57\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u5728 OI \u4e2d\uff0c\u5904\u7406\u5b57\u7b26\u4e32\u65f6\u8ba1\u7b97\u590d\u6742\u5ea6\u5f80\u5f80\u8981\u8003\u8651\u5230\u5b57\u7b26\u96c6\u5927\u5c0f\u5e26\u6765\u7684\u5e38\u6570\u5f71\u54cd\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5982\u679c\u4e00\u9053\u9898\u53ea\u5305\u542b'A' ~ 'Z' \u610f\u5473\u7740\u5b57\u7b26\u96c6\u5927\u5c0f\u662f 26 \u3002 \u5982\u679c\u518d\u52a0\u4e0a '0' \uff5e '9' \u5b57\u7b26\u96c6\u5927\u5c0f\u5c31\u53d8\u6210\u4e86 36 \u8ba1\u7b97\u590d\u6742\u5ea6\u65f6\uff0c\u5b57\u7b26\u96c6\u5927\u5c0f\u5e26\u6765\u7684\u5e38\u6570\u5f80\u5f80\u8981\u7528 \\alpha \\alpha \u8868\u793a\u3002 \u5982\u4f55\u5b58\u5b57\u7b26\u4e32 \u00b6 \u53ef\u4ee5\u5f00\u4e00\u4e2a char \u6570\u7ec4 , \u5982 char a[100] \u4e5f\u53ef\u4ee5\u7528 vector \u5982 vector<char> v \u540c\u65f6 STL \u4e2d\u4e5f\u63d0\u4f9b\u4e86\u5b57\u7b26\u4e32\u5bb9\u5668 std :: string \u53e6\u5916\uff0c\u5728 C / C++ \u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff0c\u6bd4\u5982 char *buf = \"XD\" \u3002 \u5b57\u7b26\u4e32\u5b58\u50a8\u7684\u4f4d\u7f6e \u00b6 \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff1a\u5b83\u4eec\u7684\u503c\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u786e\u5b9a\uff0c\u4fdd\u5b58\u5728\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .rodata \u6bb5\u5185\u3002 \u8c03\u7528 objdump -s -j .rodata \u6587\u4ef6\u540d \u53ef\u4ee5\u67e5\u770b .rodata \u6bb5\u7684\u5177\u4f53\u5185\u5bb9\u3002 \u5b57\u7b26\u6570\u7ec4\u3001 vector \u3001 string \uff1a\u5c40\u90e8\u53d8\u91cf\u4fdd\u5b58\u5728\u6808\u4e2d\uff0c\u5168\u5c40\u53d8\u91cf\u82e5\u521d\u59cb\u5316\u4e86\u4fdd\u5b58\u5728\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .data \u6bb5\u5185\uff0c\u82e5\u672a\u521d\u59cb\u5316\u4fdd\u5b58\u5728 .bss \u6bb5\u3002","title":"\u5b57\u7b26\u4e32\u90e8\u5206\u7b80\u4ecb"},{"location":"string/#_1","text":"\u5b57\u7b26\u4e32\u53ef\u4ee5\u770b\u4f5c\u662f\u5b57\u7b26\u5e8f\u5217\u3002","title":"\u5b57\u7b26\u4e32\u662f\u5565\uff1f"},{"location":"string/#_2","text":"\u5b57\u7b26\u96c6\u662f\u7b26\u53f7\u548c\u6587\u5b57\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u5728 OI \u4e2d\uff0c\u5904\u7406\u5b57\u7b26\u4e32\u65f6\u8ba1\u7b97\u590d\u6742\u5ea6\u5f80\u5f80\u8981\u8003\u8651\u5230\u5b57\u7b26\u96c6\u5927\u5c0f\u5e26\u6765\u7684\u5e38\u6570\u5f71\u54cd\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5982\u679c\u4e00\u9053\u9898\u53ea\u5305\u542b'A' ~ 'Z' \u610f\u5473\u7740\u5b57\u7b26\u96c6\u5927\u5c0f\u662f 26 \u3002 \u5982\u679c\u518d\u52a0\u4e0a '0' \uff5e '9' \u5b57\u7b26\u96c6\u5927\u5c0f\u5c31\u53d8\u6210\u4e86 36 \u8ba1\u7b97\u590d\u6742\u5ea6\u65f6\uff0c\u5b57\u7b26\u96c6\u5927\u5c0f\u5e26\u6765\u7684\u5e38\u6570\u5f80\u5f80\u8981\u7528 \\alpha \\alpha \u8868\u793a\u3002","title":"\u5b57\u7b26\u96c6"},{"location":"string/#_3","text":"\u53ef\u4ee5\u5f00\u4e00\u4e2a char \u6570\u7ec4 , \u5982 char a[100] \u4e5f\u53ef\u4ee5\u7528 vector \u5982 vector<char> v \u540c\u65f6 STL \u4e2d\u4e5f\u63d0\u4f9b\u4e86\u5b57\u7b26\u4e32\u5bb9\u5668 std :: string \u53e6\u5916\uff0c\u5728 C / C++ \u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff0c\u6bd4\u5982 char *buf = \"XD\" \u3002","title":"\u5982\u4f55\u5b58\u5b57\u7b26\u4e32"},{"location":"string/#_4","text":"\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff1a\u5b83\u4eec\u7684\u503c\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u786e\u5b9a\uff0c\u4fdd\u5b58\u5728\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .rodata \u6bb5\u5185\u3002 \u8c03\u7528 objdump -s -j .rodata \u6587\u4ef6\u540d \u53ef\u4ee5\u67e5\u770b .rodata \u6bb5\u7684\u5177\u4f53\u5185\u5bb9\u3002 \u5b57\u7b26\u6570\u7ec4\u3001 vector \u3001 string \uff1a\u5c40\u90e8\u53d8\u91cf\u4fdd\u5b58\u5728\u6808\u4e2d\uff0c\u5168\u5c40\u53d8\u91cf\u82e5\u521d\u59cb\u5316\u4e86\u4fdd\u5b58\u5728\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .data \u6bb5\u5185\uff0c\u82e5\u672a\u521d\u59cb\u5316\u4fdd\u5b58\u5728 .bss \u6bb5\u3002","title":"\u5b57\u7b26\u4e32\u5b58\u50a8\u7684\u4f4d\u7f6e"},{"location":"string/ac-automaton/","text":"KMP \u81ea\u52a8\u673a \u00b6 \u4e3a\u4e86\u4ecb\u7ecd AC \u81ea\u52a8\u673a\u8fd9\u79cd\u795e\u5947\u7684\u7b97\u6cd5\uff0c\u5148\u4ecb\u7ecd\u81ea\u52a8\u673a\u548c KMP \u81ea\u52a8\u673a \u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a (DFA)\uff1a\u5b57\u7b26\u96c6\uff0c\u6709\u9650\u72b6\u6001\u63a7\u5236\uff0c\u521d\u59cb\u72b6\u6001\uff0c\u63a5\u53d7\u72b6\u6001 KMP \u81ea\u52a8\u673a\uff1a\u4e00\u4e2a\u4e0d\u65ad\u8bfb\u5165\u5f85\u5339\u914d\u4e32\uff0c\u6bcf\u6b21\u5339\u914d\u65f6\u8d70\u5230\u63a5\u53d7\u72b6\u6001\u7684 DFA \u5171\u6709 m m \u4e2a\u72b6\u6001\uff0c\u7b2c i i \u4e2a\u72b6\u6001\u8868\u793a\u5df2\u7ecf\u5339\u914d\u4e86\u524d i i \u4e2a\u5b57\u7b26 trans[i][x] = \\begin{cases} i + 1, & \\text{if $b[i] = x$} \\\\[2ex] trans[next[i]][x], & \\text{else} \\end{cases} trans[i][x] = \\begin{cases} i + 1, & \\text{if $b[i] = x$} \\\\[2ex] trans[next[i]][x], & \\text{else} \\end{cases} \uff08\u7ea6\u5b9a next[0]=0 next[0]=0 \uff09 \u6211\u4eec\u53d1\u73b0 trans[i] trans[i] \u53ea\u4f9d\u8d56\u4e8e\u4e4b\u524d\u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ddf KMP \u4e00\u8d77\u6c42\u51fa\u6765 \u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(m|\u2211|) O(m|\u2211|) \u4e00\u4e9b\u7ec6\u8282\uff1a\u8d70\u5230\u63a5\u53d7\u72b6\u6001\u4e4b\u540e\u7acb\u5373\u8f6c\u79fb\u5230\u8be5\u72b6\u6001\u7684 next next AC \u7b97\u6cd5\u5c31\u662f Trie \u4e0a\u7684\u81ea\u52a8\u673a \u00b6 \u6ce8\u610f\u5728 BFS \u7684\u540c\u65f6\u6c42\u51fa trans trans \u5373\u53ef \u53ef\u4ee5\u89e3\u51b3\u591a\u4e32\u5339\u914d\u95ee\u9898 \u6ce8\u610f\u7ec6\u8282\uff1a O(n+\u5339\u914d\u6b21\u6570) O(n+\u5339\u914d\u6b21\u6570) \u8fd8\u662f O(n) O(n) \u524d\u8005\u80fd\u627e\u5230\u6bcf\u6b21\u5339\u914d\uff0c\u540e\u8005\u53ea\u80fd\u6c42\u51fa\u5339\u914d\u6b21\u6570\uff08\u901a\u8fc7\u5408\u5e76\u63a5\u53d7\u72b6\u6001\uff09 AC \u81ea\u52a8\u673a\u7684\u5b9e\u73b0 \u00b6","title":"AC \u81ea\u52a8\u673a"},{"location":"string/ac-automaton/#kmp","text":"\u4e3a\u4e86\u4ecb\u7ecd AC \u81ea\u52a8\u673a\u8fd9\u79cd\u795e\u5947\u7684\u7b97\u6cd5\uff0c\u5148\u4ecb\u7ecd\u81ea\u52a8\u673a\u548c KMP \u81ea\u52a8\u673a \u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a (DFA)\uff1a\u5b57\u7b26\u96c6\uff0c\u6709\u9650\u72b6\u6001\u63a7\u5236\uff0c\u521d\u59cb\u72b6\u6001\uff0c\u63a5\u53d7\u72b6\u6001 KMP \u81ea\u52a8\u673a\uff1a\u4e00\u4e2a\u4e0d\u65ad\u8bfb\u5165\u5f85\u5339\u914d\u4e32\uff0c\u6bcf\u6b21\u5339\u914d\u65f6\u8d70\u5230\u63a5\u53d7\u72b6\u6001\u7684 DFA \u5171\u6709 m m \u4e2a\u72b6\u6001\uff0c\u7b2c i i \u4e2a\u72b6\u6001\u8868\u793a\u5df2\u7ecf\u5339\u914d\u4e86\u524d i i \u4e2a\u5b57\u7b26 trans[i][x] = \\begin{cases} i + 1, & \\text{if $b[i] = x$} \\\\[2ex] trans[next[i]][x], & \\text{else} \\end{cases} trans[i][x] = \\begin{cases} i + 1, & \\text{if $b[i] = x$} \\\\[2ex] trans[next[i]][x], & \\text{else} \\end{cases} \uff08\u7ea6\u5b9a next[0]=0 next[0]=0 \uff09 \u6211\u4eec\u53d1\u73b0 trans[i] trans[i] \u53ea\u4f9d\u8d56\u4e8e\u4e4b\u524d\u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ddf KMP \u4e00\u8d77\u6c42\u51fa\u6765 \u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(m|\u2211|) O(m|\u2211|) \u4e00\u4e9b\u7ec6\u8282\uff1a\u8d70\u5230\u63a5\u53d7\u72b6\u6001\u4e4b\u540e\u7acb\u5373\u8f6c\u79fb\u5230\u8be5\u72b6\u6001\u7684 next next","title":"KMP \u81ea\u52a8\u673a"},{"location":"string/ac-automaton/#ac-trie","text":"\u6ce8\u610f\u5728 BFS \u7684\u540c\u65f6\u6c42\u51fa trans trans \u5373\u53ef \u53ef\u4ee5\u89e3\u51b3\u591a\u4e32\u5339\u914d\u95ee\u9898 \u6ce8\u610f\u7ec6\u8282\uff1a O(n+\u5339\u914d\u6b21\u6570) O(n+\u5339\u914d\u6b21\u6570) \u8fd8\u662f O(n) O(n) \u524d\u8005\u80fd\u627e\u5230\u6bcf\u6b21\u5339\u914d\uff0c\u540e\u8005\u53ea\u80fd\u6c42\u51fa\u5339\u914d\u6b21\u6570\uff08\u901a\u8fc7\u5408\u5e76\u63a5\u53d7\u72b6\u6001\uff09","title":"AC \u7b97\u6cd5\u5c31\u662f Trie \u4e0a\u7684\u81ea\u52a8\u673a"},{"location":"string/ac-automaton/#ac","text":"","title":"AC \u81ea\u52a8\u673a\u7684\u5b9e\u73b0"},{"location":"string/hash/","text":"\u5728\u4ecb\u7ecd Hash \u7b97\u6cd5\u4e4b\u524d\uff0c\u9996\u5148\u4f60\u9700\u8981\u4e86\u89e3\u5173\u4e8e \u5b57\u7b26\u4e32\u5339\u914d \u7684\u4e8b\u60c5\u3002 Hash \u7684\u601d\u60f3 \u00b6 Hash \u7684\u6838\u5fc3\u601d\u60f3\u5728\u4e8e\uff0c\u66b4\u529b\u7b97\u6cd5\u4e2d\uff0c\u5355\u6b21\u6bd4\u8f83\u7684\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u5e94\u5f53\u5982\u4f55\u624d\u80fd\u7f29\u77ed\u4e00\u4e9b\u5462\uff1f \u5982\u679c\u8981\u6c42\u6bcf\u6b21\u53ea\u80fd\u6bd4\u8f83 O(1) O(1) \u4e2a\u5b57\u7b26\uff0c\u5e94\u8be5\u600e\u6837\u64cd\u4f5c\u5462\uff1f \u662f\u6bd4\u8f83\u7b2c\u4e00\u4e2a\uff1f\u6700\u540e\u4e00\u4e2a\uff1f\u968f\u4fbf\u9009\u4e00\u4e2a\uff1f\u6c42\u6240\u6709\u5b57\u7b26\u7684\u548c\uff1f \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u628a string \u6620\u5c04\u6210 int \u7684\u51fd\u6570 f f \uff0c\u8fd9\u4e2a f f \u79f0\u4e3a\u662f Hash \u51fd\u6570\u3002 \u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u51fd\u6570 f f \u53ef\u4ee5\u65b9\u4fbf\u5730\u5e2e\u6211\u4eec\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u5728 Hash \u51fd\u6570\u503c\u4e0d\u4e00\u6837\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e00\u5b9a\u4e0d\u4e00\u6837\u3002 \u53e6\u5916\uff0c\u53cd\u8fc7\u6765\u4e0d\u9700\u8981\u6210\u7acb\u3002\u6211\u4eec\u628a\u8fd9\u79cd\u6761\u4ef6\u79f0\u4e3a\u662f\u5355\u4fa7\u9519\u8bef\u3002 \u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u662f\u4ec0\u4e48\uff1f \u65f6\u95f4\u590d\u6742\u5ea6\u548c Hash \u7684\u51c6\u786e\u7387\u3002 \u901a\u5e38\u6211\u4eec\u91c7\u7528\u7684\u662f\u591a\u9879\u5f0f Hash \u7684\u65b9\u6cd5\uff0c\u5373 \\operatorname{f}(s) = \\sum s[i] \\times b^i \\pmod M \\operatorname{f}(s) = \\sum s[i] \\times b^i \\pmod M \u8fd9\u91cc\u9762\u7684 b b \u548c M M \u9700\u8981\u9009\u53d6\u5f97\u8db3\u591f\u5408\u9002\u624d\u884c\uff0c\u4ee5\u4f7f\u5f97 Hash \u7684\u51b2\u7a81\u5c3d\u91cf\u5747\u5300\u3002 \u5982\u679c b b \u548c M M \u4e92\u8d28\uff0c\u5728\u8f93\u5165\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a Hash \u51fd\u6570\u5728 [0,M) [0,M) \u4e0a\u6bcf\u4e2a\u503c\u6982\u7387\u76f8\u7b49 \u6b64\u65f6\u9519\u8bef\u7387\u4e3a \\frac1M \\frac1M \uff08\u5355\u6b21\u6bd4\u8f83\uff09 \u5728\u8f93\u5165\u4e0d\u662f\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u6548\u679c\u4e5f\u5f88\u597d\u3002 Hash \u7684\u5b9e\u73b0 \u00b6 \u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 match_pre(int n) { exp[0] = 1; for (i = 1; i < n; i++) { exp[i] = exp[i - 1] * b % M; } } match(char *a, char *b, int n, int m) { // match \u51fd\u6570\u8fd4\u56de\uff1a\u957f\u5ea6\u4e3a m \u7684\u4e32 b \u5728\u957f\u5ea6\u4e3a n \u7684\u4e32 a \u4e2d\u7684\u5339\u914d\u4f4d\u7f6e // hash(a, m) \u51fd\u6570\u7528\u6765\u83b7\u5f97\u67d0\u4e2a\u5b57\u7b26\u4e32\u524d m \u4e2a\u5b57\u7b26\u7684\u90e8\u5206\u7684 hash \u503c ans = new vector(); int ha = hash(a, m); int hb = hash(b, m); for (i = 0; i < n - m + 1; i++) { if ((ha - hb * exp[i]) % M == 0) { ans.push_back(i); } ha = (ha - a[i] * exp[i] + a[i + m] * exp[i + m]) % M; } return ans; } \u901a\u8fc7\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u6b21\u76f4\u63a5\u8ba1\u7b97 Hash \u662f O(\u4e32\u957f) O(\u4e32\u957f) \u7684 Hash \u7684\u5206\u6790\u4e0e\u6539\u8fdb \u00b6 \u6539\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u6216\u8005\u9519\u8bef\u7387 \u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5df2\u7ecf\u662f O(n+m) O(n+m) \u6211\u4eec\u6765\u5206\u6790\u9519\u8bef\u7387 \u7531\u4e8e n >> m n >> m \uff0c\u8981\u8fdb\u884c\u7ea6 n n \u6b21\u6bd4\u8f83\uff0c\u6bcf\u6b21\u9519\u8bef\u7387 \\frac1{M} \\frac1{M} \uff0c\u90a3\u4e48\u603b\u9519\u8bef\u7387\u662f\uff1f \u5148\u8865\u5145\u4e00\u4e9b\u968f\u673a\u6570\u5b66\u7684\u77e5\u8bc6\uff08\u975e\u4e25\u683c\u5730\uff09 \u73b0\u5728\u8003\u8651\u8fd9 n n \u6b21\u6bd4\u8f83\uff0c\u5982\u679c\u770b\u6210\u72ec\u7acb\u7684\uff0c\u603b\u9519\u8bef\u7387 1-(1-1/M)^n 1-(1-1/M)^n \u5f53 M >> n M >> n \u65f6\uff0c\u603b\u9519\u8bef\u7387\u63a5\u8fd1\u4e8e \\frac{n}{M} \\frac{n}{M} \u5f53 M = n M = n \u65f6\uff0c\u63a5\u8fd1\u4e8e 1-\\frac{1}{e} (\u22480.63) 1-\\frac{1}{e} (\u22480.63) \u5982\u679c\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u5c31\u662f\u5168\u90e8\u52a0\u8d77\u6765\uff0c\u7b49\u4e8e \\frac{n}{M} \\frac{n}{M} \u8981\u6539\u8fdb\u9519\u8bef\u7387\uff0c\u53ef\u4ee5\u589e\u52a0 M M \u9009\u53d6\u4e00\u4e2a\u5927\u7684 M M \uff0c\u6216\u8005\u4e24\u4e2a\u4e92\u8d28\u7684\u5c0f\u7684 M M \u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u5355\u6b21\u9519\u8bef\u7387\u5e73\u65b9 Hash \u7684\u5e94\u7528 \u00b6 \u4e0d\u53ea\u662f\u5b57\u7b26\u4e32\u4e2d\uff0c\u5728\u5176\u4ed6\u60c5\u51b5\u4e5f\u53ef\u4ee5\u7528\u3002 \u5047\u8bbe\u6709\u4e2a\u7a0b\u5e8f\u8981\u5bf9 10^{18} 10^{18} \u5927\u5c0f\u7684\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u53ea\u6709 10^6 10^6 \u4e2a\u5143\u7d20\u88ab\u8bbf\u95ee\u5230 \u7531\u4e8e\u5b58\u4e0d\u4e0b\uff0c\u6211\u4eec\u5728\u6bcf\u6b21\u64cd\u4f5c\u65f6\uff0c\u5bf9\u4e0b\u6807\u53d6 Hash \u503c\uff08\u6bd4\u5982\uff0c\u76f4\u63a5 \\bmod M \\bmod M \uff09\uff0c\u7136\u540e\u5728 M M \u5927\u5c0f\u7684\u6570\u7ec4\u5185\u64cd\u4f5c \u5982\u679c\u51b2\u7a81\u4e86\u600e\u4e48\u529e\uff1f \u65b9\u6848 1\uff1a\u5c1d\u8bd5\u627e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e0b\u4e0b\u4e2a\u4f4d\u7f6e\uff08\u4f18\u70b9\uff1a\u901f\u5ea6\u5feb\uff1b\u7f3a\u70b9\uff1a\u5220\u9664\u9ebb\u70e6\uff09 \u65b9\u6848 2\uff1a\u5728\u6570\u7ec4\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u76f4\u63a5\u6302\u4e00\u4e2a\u94fe\u8868","title":"\u54c8\u5e0c"},{"location":"string/hash/#hash","text":"Hash \u7684\u6838\u5fc3\u601d\u60f3\u5728\u4e8e\uff0c\u66b4\u529b\u7b97\u6cd5\u4e2d\uff0c\u5355\u6b21\u6bd4\u8f83\u7684\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u5e94\u5f53\u5982\u4f55\u624d\u80fd\u7f29\u77ed\u4e00\u4e9b\u5462\uff1f \u5982\u679c\u8981\u6c42\u6bcf\u6b21\u53ea\u80fd\u6bd4\u8f83 O(1) O(1) \u4e2a\u5b57\u7b26\uff0c\u5e94\u8be5\u600e\u6837\u64cd\u4f5c\u5462\uff1f \u662f\u6bd4\u8f83\u7b2c\u4e00\u4e2a\uff1f\u6700\u540e\u4e00\u4e2a\uff1f\u968f\u4fbf\u9009\u4e00\u4e2a\uff1f\u6c42\u6240\u6709\u5b57\u7b26\u7684\u548c\uff1f \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u628a string \u6620\u5c04\u6210 int \u7684\u51fd\u6570 f f \uff0c\u8fd9\u4e2a f f \u79f0\u4e3a\u662f Hash \u51fd\u6570\u3002 \u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u51fd\u6570 f f \u53ef\u4ee5\u65b9\u4fbf\u5730\u5e2e\u6211\u4eec\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u5728 Hash \u51fd\u6570\u503c\u4e0d\u4e00\u6837\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e00\u5b9a\u4e0d\u4e00\u6837\u3002 \u53e6\u5916\uff0c\u53cd\u8fc7\u6765\u4e0d\u9700\u8981\u6210\u7acb\u3002\u6211\u4eec\u628a\u8fd9\u79cd\u6761\u4ef6\u79f0\u4e3a\u662f\u5355\u4fa7\u9519\u8bef\u3002 \u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u662f\u4ec0\u4e48\uff1f \u65f6\u95f4\u590d\u6742\u5ea6\u548c Hash \u7684\u51c6\u786e\u7387\u3002 \u901a\u5e38\u6211\u4eec\u91c7\u7528\u7684\u662f\u591a\u9879\u5f0f Hash \u7684\u65b9\u6cd5\uff0c\u5373 \\operatorname{f}(s) = \\sum s[i] \\times b^i \\pmod M \\operatorname{f}(s) = \\sum s[i] \\times b^i \\pmod M \u8fd9\u91cc\u9762\u7684 b b \u548c M M \u9700\u8981\u9009\u53d6\u5f97\u8db3\u591f\u5408\u9002\u624d\u884c\uff0c\u4ee5\u4f7f\u5f97 Hash \u7684\u51b2\u7a81\u5c3d\u91cf\u5747\u5300\u3002 \u5982\u679c b b \u548c M M \u4e92\u8d28\uff0c\u5728\u8f93\u5165\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a Hash \u51fd\u6570\u5728 [0,M) [0,M) \u4e0a\u6bcf\u4e2a\u503c\u6982\u7387\u76f8\u7b49 \u6b64\u65f6\u9519\u8bef\u7387\u4e3a \\frac1M \\frac1M \uff08\u5355\u6b21\u6bd4\u8f83\uff09 \u5728\u8f93\u5165\u4e0d\u662f\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u6548\u679c\u4e5f\u5f88\u597d\u3002","title":"Hash \u7684\u601d\u60f3"},{"location":"string/hash/#hash_1","text":"\u4f2a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 match_pre(int n) { exp[0] = 1; for (i = 1; i < n; i++) { exp[i] = exp[i - 1] * b % M; } } match(char *a, char *b, int n, int m) { // match \u51fd\u6570\u8fd4\u56de\uff1a\u957f\u5ea6\u4e3a m \u7684\u4e32 b \u5728\u957f\u5ea6\u4e3a n \u7684\u4e32 a \u4e2d\u7684\u5339\u914d\u4f4d\u7f6e // hash(a, m) \u51fd\u6570\u7528\u6765\u83b7\u5f97\u67d0\u4e2a\u5b57\u7b26\u4e32\u524d m \u4e2a\u5b57\u7b26\u7684\u90e8\u5206\u7684 hash \u503c ans = new vector(); int ha = hash(a, m); int hb = hash(b, m); for (i = 0; i < n - m + 1; i++) { if ((ha - hb * exp[i]) % M == 0) { ans.push_back(i); } ha = (ha - a[i] * exp[i] + a[i + m] * exp[i + m]) % M; } return ans; } \u901a\u8fc7\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u6b21\u76f4\u63a5\u8ba1\u7b97 Hash \u662f O(\u4e32\u957f) O(\u4e32\u957f) \u7684","title":"Hash \u7684\u5b9e\u73b0"},{"location":"string/hash/#hash_2","text":"\u6539\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u6216\u8005\u9519\u8bef\u7387 \u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5df2\u7ecf\u662f O(n+m) O(n+m) \u6211\u4eec\u6765\u5206\u6790\u9519\u8bef\u7387 \u7531\u4e8e n >> m n >> m \uff0c\u8981\u8fdb\u884c\u7ea6 n n \u6b21\u6bd4\u8f83\uff0c\u6bcf\u6b21\u9519\u8bef\u7387 \\frac1{M} \\frac1{M} \uff0c\u90a3\u4e48\u603b\u9519\u8bef\u7387\u662f\uff1f \u5148\u8865\u5145\u4e00\u4e9b\u968f\u673a\u6570\u5b66\u7684\u77e5\u8bc6\uff08\u975e\u4e25\u683c\u5730\uff09 \u73b0\u5728\u8003\u8651\u8fd9 n n \u6b21\u6bd4\u8f83\uff0c\u5982\u679c\u770b\u6210\u72ec\u7acb\u7684\uff0c\u603b\u9519\u8bef\u7387 1-(1-1/M)^n 1-(1-1/M)^n \u5f53 M >> n M >> n \u65f6\uff0c\u603b\u9519\u8bef\u7387\u63a5\u8fd1\u4e8e \\frac{n}{M} \\frac{n}{M} \u5f53 M = n M = n \u65f6\uff0c\u63a5\u8fd1\u4e8e 1-\\frac{1}{e} (\u22480.63) 1-\\frac{1}{e} (\u22480.63) \u5982\u679c\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u5c31\u662f\u5168\u90e8\u52a0\u8d77\u6765\uff0c\u7b49\u4e8e \\frac{n}{M} \\frac{n}{M} \u8981\u6539\u8fdb\u9519\u8bef\u7387\uff0c\u53ef\u4ee5\u589e\u52a0 M M \u9009\u53d6\u4e00\u4e2a\u5927\u7684 M M \uff0c\u6216\u8005\u4e24\u4e2a\u4e92\u8d28\u7684\u5c0f\u7684 M M \u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u5355\u6b21\u9519\u8bef\u7387\u5e73\u65b9","title":"Hash \u7684\u5206\u6790\u4e0e\u6539\u8fdb"},{"location":"string/hash/#hash_3","text":"\u4e0d\u53ea\u662f\u5b57\u7b26\u4e32\u4e2d\uff0c\u5728\u5176\u4ed6\u60c5\u51b5\u4e5f\u53ef\u4ee5\u7528\u3002 \u5047\u8bbe\u6709\u4e2a\u7a0b\u5e8f\u8981\u5bf9 10^{18} 10^{18} \u5927\u5c0f\u7684\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u53ea\u6709 10^6 10^6 \u4e2a\u5143\u7d20\u88ab\u8bbf\u95ee\u5230 \u7531\u4e8e\u5b58\u4e0d\u4e0b\uff0c\u6211\u4eec\u5728\u6bcf\u6b21\u64cd\u4f5c\u65f6\uff0c\u5bf9\u4e0b\u6807\u53d6 Hash \u503c\uff08\u6bd4\u5982\uff0c\u76f4\u63a5 \\bmod M \\bmod M \uff09\uff0c\u7136\u540e\u5728 M M \u5927\u5c0f\u7684\u6570\u7ec4\u5185\u64cd\u4f5c \u5982\u679c\u51b2\u7a81\u4e86\u600e\u4e48\u529e\uff1f \u65b9\u6848 1\uff1a\u5c1d\u8bd5\u627e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e0b\u4e0b\u4e2a\u4f4d\u7f6e\uff08\u4f18\u70b9\uff1a\u901f\u5ea6\u5feb\uff1b\u7f3a\u70b9\uff1a\u5220\u9664\u9ebb\u70e6\uff09 \u65b9\u6848 2\uff1a\u5728\u6570\u7ec4\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u76f4\u63a5\u6302\u4e00\u4e2a\u94fe\u8868","title":"Hash \u7684\u5e94\u7528"},{"location":"string/lib-func/","text":"C / C++ \u6807\u51c6\u5e93\u4e2d\u7684\u5b57\u7b26\u4e32 \u00b6 C \u6807\u51c6\u5e93 \u00b6 C \u6807\u51c6\u5e93\u662f\u5728\u5bf9\u5b57\u7b26\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c strlen \u00b6 int strlen(const char *str) \uff1a\u8fd4\u56de\u4ece str[0] \u5f00\u59cb\u76f4\u5230 '\\0' \u7684\u5b57\u7b26\u6570\u3002\u6ce8\u610f\uff0c\u672a\u5f00\u542f O2 \u4f18\u5316\u65f6\uff0c\u8be5\u64cd\u4f5c\u5199\u5728\u5faa\u73af\u6761\u4ef6\u4e2d\u590d\u6742\u5ea6\u662f \\Theta(N) \\Theta(N) \u7684\u3002 printf \u00b6 printf(\"%s\", s) \uff1a\u7528 %s \u6765\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u5b57\u7b26\u6570\u7ec4\uff09\u3002 scanf \u00b6 scanf(\"%s\", s) \uff1a\u7528 %s \u6765\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u5b57\u7b26\u6570\u7ec4\uff09\u3002 sscanf \u00b6 sscanf(const char *__source, const char *__format, ...) \uff1a\u4ece\u5b57\u7b26\u4e32 __source \u91cc\u8bfb\u53d6\u53d8\u91cf\uff0c\u6bd4\u5982 sscanf(str,\"%d\",&a) \u3002 sprintf \u00b6 sprintf(char *__stream, const char *__format, ...) \uff1a\u5c06 __format \u5b57\u7b26\u4e32\u91cc\u7684\u5185\u5bb9\u8f93\u51fa\u5230 __stream \u4e2d\uff0c\u6bd4\u5982 sprintf(str,\"%d\",i) \u3002 strcmp \u00b6 int strcmp(const char *str1, const char *str2) \uff1a\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83 str1 str2 \u82e5 str1 \u5b57\u5178\u5e8f\u5c0f\u8fd4\u56de\u8d1f\u503c\uff0c \u4e00\u6837\u8fd4\u56de 0 \uff0c\u5927\u8fd4\u56de\u6b63\u503c \u8bf7\u6ce8\u610f\uff0c\u4e0d\u8981\u7b80\u5355\u7684\u8ba4\u4e3a\u53ea\u6709 0, 1, -1 \u4e09\u79cd\uff0c\u5728\u4e0d\u540c\u5e73\u53f0\u4e0b\u7684\u8fd4\u56de\u503c\u90fd\u9075\u5faa\u6b63\u8d1f\uff0c\u4f46\u5e76\u975e\u90fd\u662f 0, 1, -1 strcpy \u00b6 char *strcpy(char *str, const char *src) : \u628a src \u4e2d\u7684\u5b57\u7b26\u590d\u5236\u5230 str \u4e2d\uff0c str src \u5747\u4e3a\u5b57\u7b26\u6570\u7ec4\u5934\u6307\u9488\uff0c \u8fd4\u56de\u503c\u4e3a str \u5305\u542b\u7a7a\u7ec8\u6b62\u7b26\u53f7 '\\0' \u3002 strncpy \u00b6 char *strncpy(char *str, const char *src, int cnt) \uff1a\u590d\u5236\u81f3\u591a cnt \u4e2a\u5b57\u7b26\u5230 str \u4e2d\uff0c\u82e5 src \u7ec8\u6b62\u800c\u6570\u91cf\u672a\u8fbe cnt \u5219\u5199\u5165\u7a7a\u5b57\u7b26\u5230 str \u76f4\u81f3\u5199\u5165\u603b\u5171 cnt \u4e2a\u5b57\u7b26\u3002 strcat \u00b6 char *strcat(char *str1, const char *str2) : \u5c06 str2 \u63a5\u5230 str1 \u7684\u7ed3\u5c3e\uff0c\u7528 *str2 \u66ff\u6362 str1 \u672b\u5c3e\u7684 '\\0' \u8fd4\u56de str1 \u3002 strstr \u00b6 strchr \u00b6 strrchr \u00b6 C++ \u6807\u51c6\u5e93 \u00b6 C++ \u6807\u51c6\u5e93\u662f\u5728\u5bf9\u5b57\u7b26\u4e32\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u5bf9\u5b57\u7b26\u6570\u7ec4\u7684\u517c\u5bb9\u3002 std::string \u00b6 \u8d4b\u503c\u8fd0\u7b97\u7b26 = \u53f3\u4fa7\u53ef\u4ee5\u662f const string / string / const char* / char* \u3002 \u8bbf\u95ee\u8fd0\u7b97\u7b26 [cur] \u8fd4\u56de cur \u4f4d\u7f6e\u7684\u5f15\u7528\u3002 \u8bbf\u95ee\u51fd\u6570 data() / c_str() \u8fd4\u56de\u4e00\u4e2a const char* \u6307\u9488, \u5185\u5bb9\u4e0e\u8be5 string \u76f8\u540c\u3002 \u5bb9\u91cf\u51fd\u6570 size() \u8fd4\u56de\u5b57\u7b26\u4e32\u5b57\u7b26\u4e2a\u6570\u3002 \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\u5982 find() \u627e\u5230\u5e76\u8fd4\u56de\u67d0\u5b57\u7b26\u4f4d\u7f6e\u3002 std :: string \u91cd\u8f7d\u4e86\u6bd4\u8f83\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u590d\u6742\u5ea6\u662f \\Theta(N) \\Theta(N) \u7684\u3002","title":"\u6807\u51c6\u5e93"},{"location":"string/lib-func/#c-c","text":"","title":"C / C++ \u6807\u51c6\u5e93\u4e2d\u7684\u5b57\u7b26\u4e32"},{"location":"string/lib-func/#c","text":"C \u6807\u51c6\u5e93\u662f\u5728\u5bf9\u5b57\u7b26\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c","title":"C \u6807\u51c6\u5e93"},{"location":"string/lib-func/#strlen","text":"int strlen(const char *str) \uff1a\u8fd4\u56de\u4ece str[0] \u5f00\u59cb\u76f4\u5230 '\\0' \u7684\u5b57\u7b26\u6570\u3002\u6ce8\u610f\uff0c\u672a\u5f00\u542f O2 \u4f18\u5316\u65f6\uff0c\u8be5\u64cd\u4f5c\u5199\u5728\u5faa\u73af\u6761\u4ef6\u4e2d\u590d\u6742\u5ea6\u662f \\Theta(N) \\Theta(N) \u7684\u3002","title":"strlen"},{"location":"string/lib-func/#printf","text":"printf(\"%s\", s) \uff1a\u7528 %s \u6765\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u5b57\u7b26\u6570\u7ec4\uff09\u3002","title":"printf"},{"location":"string/lib-func/#scanf","text":"scanf(\"%s\", s) \uff1a\u7528 %s \u6765\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u5b57\u7b26\u6570\u7ec4\uff09\u3002","title":"scanf"},{"location":"string/lib-func/#sscanf","text":"sscanf(const char *__source, const char *__format, ...) \uff1a\u4ece\u5b57\u7b26\u4e32 __source \u91cc\u8bfb\u53d6\u53d8\u91cf\uff0c\u6bd4\u5982 sscanf(str,\"%d\",&a) \u3002","title":"sscanf"},{"location":"string/lib-func/#sprintf","text":"sprintf(char *__stream, const char *__format, ...) \uff1a\u5c06 __format \u5b57\u7b26\u4e32\u91cc\u7684\u5185\u5bb9\u8f93\u51fa\u5230 __stream \u4e2d\uff0c\u6bd4\u5982 sprintf(str,\"%d\",i) \u3002","title":"sprintf"},{"location":"string/lib-func/#strcmp","text":"int strcmp(const char *str1, const char *str2) \uff1a\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83 str1 str2 \u82e5 str1 \u5b57\u5178\u5e8f\u5c0f\u8fd4\u56de\u8d1f\u503c\uff0c \u4e00\u6837\u8fd4\u56de 0 \uff0c\u5927\u8fd4\u56de\u6b63\u503c \u8bf7\u6ce8\u610f\uff0c\u4e0d\u8981\u7b80\u5355\u7684\u8ba4\u4e3a\u53ea\u6709 0, 1, -1 \u4e09\u79cd\uff0c\u5728\u4e0d\u540c\u5e73\u53f0\u4e0b\u7684\u8fd4\u56de\u503c\u90fd\u9075\u5faa\u6b63\u8d1f\uff0c\u4f46\u5e76\u975e\u90fd\u662f 0, 1, -1","title":"strcmp"},{"location":"string/lib-func/#strcpy","text":"char *strcpy(char *str, const char *src) : \u628a src \u4e2d\u7684\u5b57\u7b26\u590d\u5236\u5230 str \u4e2d\uff0c str src \u5747\u4e3a\u5b57\u7b26\u6570\u7ec4\u5934\u6307\u9488\uff0c \u8fd4\u56de\u503c\u4e3a str \u5305\u542b\u7a7a\u7ec8\u6b62\u7b26\u53f7 '\\0' \u3002","title":"strcpy"},{"location":"string/lib-func/#strncpy","text":"char *strncpy(char *str, const char *src, int cnt) \uff1a\u590d\u5236\u81f3\u591a cnt \u4e2a\u5b57\u7b26\u5230 str \u4e2d\uff0c\u82e5 src \u7ec8\u6b62\u800c\u6570\u91cf\u672a\u8fbe cnt \u5219\u5199\u5165\u7a7a\u5b57\u7b26\u5230 str \u76f4\u81f3\u5199\u5165\u603b\u5171 cnt \u4e2a\u5b57\u7b26\u3002","title":"strncpy"},{"location":"string/lib-func/#strcat","text":"char *strcat(char *str1, const char *str2) : \u5c06 str2 \u63a5\u5230 str1 \u7684\u7ed3\u5c3e\uff0c\u7528 *str2 \u66ff\u6362 str1 \u672b\u5c3e\u7684 '\\0' \u8fd4\u56de str1 \u3002","title":"strcat"},{"location":"string/lib-func/#strstr","text":"","title":"strstr"},{"location":"string/lib-func/#strchr","text":"","title":"strchr"},{"location":"string/lib-func/#strrchr","text":"","title":"strrchr"},{"location":"string/lib-func/#c_1","text":"C++ \u6807\u51c6\u5e93\u662f\u5728\u5bf9\u5b57\u7b26\u4e32\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u5bf9\u5b57\u7b26\u6570\u7ec4\u7684\u517c\u5bb9\u3002","title":"C++ \u6807\u51c6\u5e93"},{"location":"string/lib-func/#stdstring","text":"\u8d4b\u503c\u8fd0\u7b97\u7b26 = \u53f3\u4fa7\u53ef\u4ee5\u662f const string / string / const char* / char* \u3002 \u8bbf\u95ee\u8fd0\u7b97\u7b26 [cur] \u8fd4\u56de cur \u4f4d\u7f6e\u7684\u5f15\u7528\u3002 \u8bbf\u95ee\u51fd\u6570 data() / c_str() \u8fd4\u56de\u4e00\u4e2a const char* \u6307\u9488, \u5185\u5bb9\u4e0e\u8be5 string \u76f8\u540c\u3002 \u5bb9\u91cf\u51fd\u6570 size() \u8fd4\u56de\u5b57\u7b26\u4e32\u5b57\u7b26\u4e2a\u6570\u3002 \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\u5982 find() \u627e\u5230\u5e76\u8fd4\u56de\u67d0\u5b57\u7b26\u4f4d\u7f6e\u3002 std :: string \u91cd\u8f7d\u4e86\u6bd4\u8f83\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u590d\u6742\u5ea6\u662f \\Theta(N) \\Theta(N) \u7684\u3002","title":"std::string"},{"location":"string/manacher/","text":"\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u8bf7\u627e\u5230\u6240\u6709\u5bf9 (i, j) (i, j) \u4f7f\u5f97\u5b50\u4e32 s[i \\dots j] s[i \\dots j] \u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u3002\u5f53 t = t_{\\text{rev}} t = t_{\\text{rev}} \u65f6\uff0c\u5b57\u7b26\u4e32 t t \u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff08 t_{\\text{rev}} t_{\\text{rev}} \u662f t t \u7684\u53cd\u8f6c\u5b57\u7b26\u4e32\uff09\u3002 \u66f4\u8fdb\u4e00\u6b65\u7684\u63cf\u8ff0 \u00b6 \u663e\u7136\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u53ef\u80fd\u6709 O(n^2) O(n^2) \u4e2a\u56de\u6587\u4e32\uff0c\u56e0\u6b64\u4f3c\u4e4e\u4e00\u773c\u770b\u8fc7\u53bb\u8be5\u95ee\u9898\u5e76\u6ca1\u6709\u7ebf\u6027\u7b97\u6cd5\u3002 \u4f46\u662f\u5173\u4e8e\u56de\u6587\u4e32\u7684\u4fe1\u606f\u53ef\u7528 \u4e00\u79cd\u66f4\u7d27\u51d1\u7684\u65b9\u5f0f \u8868\u8fbe\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e i = 0 \\dots n - 1 i = 0 \\dots n - 1 \uff0c\u6211\u4eec\u627e\u51fa\u503c d_1[i] d_1[i] \u548c d_2[i] d_2[i] \u3002\u4e8c\u8005\u5206\u522b\u8868\u793a\u4ee5\u4f4d\u7f6e i i \u4e3a\u4e2d\u5fc3\u7684\u957f\u5ea6\u4e3a\u5947\u6570\u548c\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u4e2a\u6570\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5b57\u7b26\u4e32 s = \\mathtt{abababc} s = \\mathtt{abababc} \u4ee5 s[3] = b s[3] = b \u4e3a\u4e2d\u5fc3\u6709\u4e09\u4e2a\u5947\u6570\u957f\u5ea6\u7684\u56de\u6587\u4e32\uff0c\u4e5f\u5373 d_1[3] = 3 d_1[3] = 3 \uff1a a\\ \\overbrace{b\\ a\\ \\underset{s_3}{b}\\ a\\ b}^{d_1[3]=3}\\ c a\\ \\overbrace{b\\ a\\ \\underset{s_3}{b}\\ a\\ b}^{d_1[3]=3}\\ c \u5b57\u7b26\u4e32 s = \\mathtt{cbaabd} s = \\mathtt{cbaabd} \u4ee5 s[3] = a s[3] = a \u4e3a\u4e2d\u5fc3\u6709\u4e24\u4e2a\u5076\u6570\u957f\u5ea6\u7684\u56de\u6587\u4e32\uff0c\u4e5f\u5373 d_2[3] = 2 d_2[3] = 2 \uff1a c\\ \\overbrace{b\\ a\\ \\underset{s_3}{a}\\ b}^{d_2[3]=2}\\ d c\\ \\overbrace{b\\ a\\ \\underset{s_3}{a}\\ b}^{d_2[3]=2}\\ d \u56e0\u6b64\u5173\u952e\u601d\u8def\u662f\uff0c\u5982\u679c\u4ee5\u67d0\u4e2a\u4f4d\u7f6e i i \u4e3a\u4e2d\u5fc3\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a l l \u7684\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4ee5 i i \u4e3a\u4e2d\u5fc3\u7684\u957f\u5ea6\u4e3a l - 2 l - 2 \uff0c l - 4 l - 4 \uff0c\u7b49\u7b49\u7684\u56de\u6587\u4e32\u3002\u6240\u4ee5 d_1[i] d_1[i] \u548c d_2[i] d_2[i] \u4e24\u4e2a\u6570\u7ec4\u5df2\u7ecf\u8db3\u591f\u8868\u793a\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b50\u56de\u6587\u4e32\u7684\u4fe1\u606f\u3002 \u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e8b\u5b9e\u662f\uff0c\u5b58\u5728\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u5e76\u4e14\u8db3\u591f\u7b80\u5355\u7684\u7b97\u6cd5\u8ba1\u7b97\u4e0a\u8ff0\u4e24\u4e2a \u201c\u56de\u6587\u6027\u8d28\u6570\u7ec4\u201d d_1[] d_1[] \u548c d_2[] d_2[] \u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6211\u4eec\u5c06\u8be6\u7ec6\u7684\u63cf\u8ff0\u8be5\u7b97\u6cd5\u3002 \u89e3\u6cd5 \u00b6 \u603b\u7684\u6765\u8bf4\uff0c\u8be5\u95ee\u9898\u5177\u6709\u591a\u79cd\u89e3\u6cd5\uff1a\u5e94\u7528\u5b57\u7b26\u4e32\u54c8\u5e0c\uff0c\u8be5\u95ee\u9898\u53ef\u5728 O(n \\log n) O(n \\log n) \u65f6\u95f4\u5185\u89e3\u51b3\uff0c\u800c\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\u548c\u5feb\u901f LCA \u8be5\u95ee\u9898\u53ef\u5728 O(n) O(n) \u65f6\u95f4\u5185\u89e3\u51b3\u3002 \u4f46\u662f\u8fd9\u91cc\u63cf\u8ff0\u7684\u7b97\u6cd5 \u538b\u5012\u6027 \u7684\u7b80\u5355\uff0c\u5e76\u4e14\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0a\u5177\u6709\u66f4\u5c0f\u7684\u5e38\u6570\u3002\u8be5\u7b97\u6cd5\u7531 Glenn K. Manacher \u5728 1975 \u5e74\u63d0\u51fa\u3002 \u6734\u7d20\u7b97\u6cd5 \u00b6 \u4e3a\u4e86\u907f\u514d\u5728\u4e4b\u540e\u7684\u53d9\u8ff0\u4e2d\u51fa\u73b0\u6b67\u4e49\uff0c\u8fd9\u91cc\u6211\u4eec\u6307\u51fa\u4ec0\u4e48\u662f \u201c\u6734\u7d20\u7b97\u6cd5\u201d\u3002 \u8be5\u7b97\u6cd5\u901a\u8fc7\u4e0b\u8ff0\u65b9\u5f0f\u5de5\u4f5c\uff1a\u5bf9\u6bcf\u4e2a\u4e2d\u5fc3\u4f4d\u7f6e i i \uff0c\u5728\u6bd4\u8f83\u4e00\u5bf9\u5bf9\u5e94\u5b57\u7b26\u540e\uff0c\u53ea\u8981\u53ef\u80fd\uff0c\u8be5\u7b97\u6cd5\u4fbf\u5c1d\u8bd5\u5c06\u7b54\u6848\u52a0 1 1 \u3002 \u8be5\u7b97\u6cd5\u662f\u6bd4\u8f83\u6162\u7684\uff1a\u5b83\u53ea\u80fd\u5728 O(n^2) O(n^2) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u7b54\u6848\u3002 \u8be5\u6734\u7d20\u7b97\u6cd5\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 vector < int > d1 ( n ), d2 ( n ); for ( int i = 0 ; i < n ; i ++ ) { d1 [ i ] = 1 ; while ( 0 <= i - d1 [ i ] && i + d1 [ i ] < n && s [ i - d1 [ i ]] == s [ i + d1 [ i ]]) { d1 [ i ] ++ ; } d2 [ i ] = 0 ; while ( 0 <= i - d2 [ i ] - 1 && i + d2 [ i ] < n && s [ i - d2 [ i ] - 1 ] == s [ i + d2 [ i ]]) { d2 [ i ] ++ ; } } Manacher \u7b97\u6cd5 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5c06\u53ea\u63cf\u8ff0\u7b97\u6cd5\u4e2d\u5bfb\u627e\u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u56de\u6587\u4e32\u7684\u60c5\u51b5\uff0c\u5373\u53ea\u8ba1\u7b97 d_1[] d_1[] \uff1b\u5bfb\u627e\u6240\u6709\u5076\u6570\u957f\u5ea6\u5b50\u56de\u6587\u4e32\u7684\u7b97\u6cd5\uff08\u5373\u8ba1\u7b97\u6570\u7ec4 d_2[] d_2[] \uff09\u5c06\u53ea\u9700\u5bf9\u5947\u6570\u60c5\u51b5\u4e0b\u7684\u7b97\u6cd5\u8fdb\u884c\u4e00\u4e9b\u5c0f\u4fee\u6539\u3002 \u4e3a\u4e86\u5feb\u901f\u8ba1\u7b97\uff0c\u6211\u4eec\u7ef4\u62a4\u5df2\u627e\u5230\u7684\u5b50\u56de\u6587\u4e32\u7684\u6700\u9760\u53f3\u7684 \u8fb9\u754c (l, r) (l, r) \uff08\u5373\u5177\u6709\u6700\u5927 r r \u503c\u7684\u56de\u6587\u4e32\uff09\u3002\u521d\u59cb\u65f6\uff0c\u6211\u4eec\u7f6e l = 0 l = 0 \u548c r = -1 r = -1 \u3002 \u73b0\u5728\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u4e0b\u4e00\u4e2a i i \u8ba1\u7b97 d_1[i] d_1[i] \uff0c\u800c\u4e4b\u524d\u6240\u6709 d_1[] d_1[] \u4e2d\u7684\u503c\u5df2\u8ba1\u7b97\u5b8c\u6bd5\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u4e0b\u5217\u65b9\u5f0f\u8ba1\u7b97\uff1a \u5982\u679c i i \u4f4d\u4e8e\u5f53\u524d\u5b50\u56de\u6587\u4e32\u4e4b\u5916\uff0c\u5373 i > r i > r \uff0c\u90a3\u4e48\u6211\u4eec\u8c03\u7528\u6734\u7d20\u7b97\u6cd5\u3002 \u56e0\u6b64\u6211\u4eec\u5c06\u8fde\u7eed\u7684\u589e\u52a0 d_1[i] d_1[i] \uff0c\u540c\u65f6\u5728\u6bcf\u4e00\u6b65\u4e2d\u68c0\u67e5\u5f53\u524d\u7684\u5b50\u4e32 [i - d_1[i] \\dots i + d_1[i]] [i - d_1[i] \\dots i + d_1[i]] \u662f\u5426\u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u3002\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u7b2c\u4e00\u5904\u5bf9\u5e94\u5b57\u7b26\u4e0d\u540c\uff0c\u53c8\u6216\u8005\u78b0\u5230\u4e86 s s \u7684\u8fb9\u754c\uff0c\u5219\u7b97\u6cd5\u505c\u6b62\u3002\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u5747\u5df2\u8ba1\u7b97\u5b8c d_1[i] d_1[i] \u3002\u6b64\u540e\uff0c\u4ecd\u9700\u8bb0\u5f97\u66f4\u65b0 (l, r) (l, r) \u3002 \u73b0\u5728\u8003\u8651 i \\le r i \\le r \u7684\u60c5\u51b5\u3002\u6211\u4eec\u5c06\u5c1d\u8bd5\u4ece\u5df2\u8ba1\u7b97\u8fc7\u7684 d_1[] d_1[] \u7684\u503c\u4e2d\u83b7\u53d6\u4e00\u4e9b\u4fe1\u606f\u3002\u9996\u5148\u5728\u5b50\u56de\u6587\u4e32 (l, r) (l, r) \u4e2d\u53cd\u8f6c\u4f4d\u7f6e i i \uff0c\u5373\u6211\u4eec\u5f97\u5230 j = l + (r - i) j = l + (r - i) \u3002\u73b0\u5728\u6765\u8003\u5bdf\u503c d_1[j] d_1[j] \u3002\u56e0\u4e3a\u4f4d\u7f6e j j \u540c\u4f4d\u7f6e i i \u5bf9\u79f0\uff0c\u6211\u4eec \u51e0\u4e4e\u603b\u662f \u53ef\u4ee5\u7f6e d_1[i] = d_1[j] d_1[i] = d_1[j] \u3002\u8be5\u60f3\u6cd5\u7684\u56fe\u793a\u5982\u4e0b\uff08\u53ef\u8ba4\u4e3a\u4ee5 j j \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u88ab \u201c\u62f7\u8d1d\u201d \u81f3\u4ee5 i i \u4e3a\u4e2d\u5fc3\u7684\u4f4d\u7f6e\u4e0a\uff09\uff1a \\ldots\\ \\overbrace{ s_l\\ \\ldots\\ \\underbrace{ s_{j-d_1[j]+1}\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-d_1[j]+1}\\ \\ldots\\ s_i\\ \\ldots\\ s_{i+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ s_r }^\\text{palindrome}\\ \\ldots \\ldots\\ \\overbrace{ s_l\\ \\ldots\\ \\underbrace{ s_{j-d_1[j]+1}\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-d_1[j]+1}\\ \\ldots\\ s_i\\ \\ldots\\ s_{i+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ s_r }^\\text{palindrome}\\ \\ldots \u7136\u800c\u6709\u4e00\u4e2a \u68d8\u624b\u7684\u60c5\u51b5 \u9700\u8981\u88ab\u6b63\u786e\u5904\u7406\uff1a\u5f53 \u201c\u5185\u90e8\u201d \u7684\u56de\u6587\u4e32\u5230\u8fbe \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u7684\u8fb9\u754c\u65f6\uff0c\u5373 j - d_1[j] + 1 \\le l j - d_1[j] + 1 \\le l \uff08\u6216\u8005\u7b49\u4ef7\u7684\u8bf4\uff0c i + d_1[j] - 1 \\ge r i + d_1[j] - 1 \\ge r \uff09\u3002\u56e0\u4e3a\u5728 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u8303\u56f4\u4ee5\u5916\u7684\u5bf9\u79f0\u6027\u6ca1\u6709\u4fdd\u8bc1\uff0c\u56e0\u6b64\u76f4\u63a5\u7f6e d_1[i] = d_1[j] d_1[i] = d_1[j] \u5c06\u662f\u4e0d\u6b63\u786e\u7684\uff1a\u6211\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u6765\u65ad\u8a00\u5728\u4f4d\u7f6e i i \u7684\u56de\u6587\u4e32\u5177\u6709\u540c\u6837\u7684\u957f\u5ea6\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u6b63\u786e\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5e94\u8be5 \u201c\u622a\u65ad\u201d \u56de\u6587\u4e32\u7684\u957f\u5ea6\uff0c\u5373\u7f6e d_1[i] = r - i d_1[i] = r - i \u3002\u4e4b\u540e\u6211\u4eec\u5c06\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\u4ee5\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u589e\u52a0 d_1[i] d_1[i] \u7684\u503c\u3002 \u8be5\u79cd\u60c5\u51b5\u7684\u56fe\u793a\u5982\u4e0b\uff08\u4ee5 j j \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5df2\u7ecf\u88ab\u622a\u65ad\u4ee5\u843d\u5728 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u5185\uff09\uff1a \\ldots\\ \\overbrace{ \\underbrace{ s_l\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+(j-l)} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-(r-i)}\\ \\ldots\\ s_i\\ \\ldots\\ s_r }_\\text{palindrome} }^\\text{palindrome}\\ \\underbrace{ \\ldots \\ldots \\ldots \\ldots \\ldots }_\\text{try moving here} \\ldots\\ \\overbrace{ \\underbrace{ s_l\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+(j-l)} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-(r-i)}\\ \\ldots\\ s_i\\ \\ldots\\ s_r }_\\text{palindrome} }^\\text{palindrome}\\ \\underbrace{ \\ldots \\ldots \\ldots \\ldots \\ldots }_\\text{try moving here} \u8be5\u56fe\u793a\u663e\u793a\u51fa\uff0c\u5c3d\u7ba1\u4ee5 j j \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u53ef\u80fd\u66f4\u957f\uff0c\u4ee5\u81f4\u4e8e\u8d85\u51fa \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\uff0c\u4f46\u5728\u4f4d\u7f6e i i \uff0c\u6211\u4eec\u53ea\u80fd\u5229\u7528\u5176\u5b8c\u5168\u843d\u5728 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u5185\u7684\u90e8\u5206\u3002\u7136\u800c\u4f4d\u7f6e i i \u7684\u7b54\u6848\u53ef\u80fd\u6bd4\u8fd9\u4e2a\u503c\u66f4\u5927\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\u6765\u5c1d\u8bd5\u5c06\u5176\u6269\u5c55\u81f3 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u4e4b\u5916\uff0c\u4e5f\u5373\u6807\u8bc6\u4e3a \"try moving here\" \u7684\u533a\u57df\u3002 \u6700\u540e\uff0c\u4ecd\u6709\u5fc5\u8981\u63d0\u9192\u7684\u662f\uff0c\u6211\u4eec\u5e94\u5f53\u8bb0\u5f97\u5728\u8ba1\u7b97\u5b8c\u6bcf\u4e2a d_1[i] d_1[i] \u540e\u66f4\u65b0\u503c (l, r) (l, r) \u3002 \u540c\u65f6\uff0c\u518d\u8ba9\u6211\u4eec\u91cd\u590d\u4e00\u904d\uff1a\u8ba1\u7b97\u5076\u6570\u957f\u5ea6\u56de\u6587\u4e32\u6570\u7ec4 d_2[] d_2[] \u7684\u7b97\u6cd5\u540c\u4e0a\u8ff0\u8ba1\u7b97\u5947\u6570\u957f\u5ea6\u56de\u6587\u4e32\u6570\u7ec4 d_1[] d_1[] \u7684\u7b97\u6cd5\u5341\u5206\u7c7b\u4f3c\u3002 Manacher \u7b97\u6cd5\u7684\u590d\u6742\u5ea6 \u00b6 \u56e0\u4e3a\u5728\u8ba1\u7b97\u4e00\u4e2a\u7279\u5b9a\u4f4d\u7f6e\u7684\u7b54\u6848\u65f6\u6211\u4eec\u603b\u4f1a\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\uff0c\u6240\u4ee5\u4e00\u773c\u770b\u53bb\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u7684\u4e8b\u5b9e\u5e76\u4e0d\u663e\u7136\u3002 \u7136\u800c\u66f4\u4ed4\u7ec6\u7684\u5206\u6790\u663e\u793a\u51fa\u8be5\u7b97\u6cd5\u5177\u6709\u7ebf\u6027\u590d\u6742\u5ea6\u3002\u6b64\u5904\u6211\u4eec\u9700\u8981\u6307\u51fa\uff0c \u8ba1\u7b97 Z \u51fd\u6570\u7684\u7b97\u6cd5 \u548c\u8be5\u7b97\u6cd5\u8f83\u4e3a\u7c7b\u4f3c\uff0c\u5e76\u540c\u6837\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5b9e\u9645\u4e0a\uff0c\u6ce8\u610f\u5230\u6734\u7d20\u7b97\u6cd5\u7684\u6bcf\u6b21\u8fed\u4ee3\u5747\u4f1a\u4f7f r r \u589e\u52a0 1 1 \uff0c\u4ee5\u53ca r r \u5728\u7b97\u6cd5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ece\u4e0d\u51cf\u5c0f\u3002\u8fd9\u4e24\u4e2a\u89c2\u5bdf\u544a\u8bc9\u6211\u4eec\u6734\u7d20\u7b97\u6cd5\u603b\u5171\u4f1a\u8fdb\u884c O(n) O(n) \u6b21\u8fed\u4ee3\u3002 Manacher \u7b97\u6cd5\u7684\u53e6\u4e00\u90e8\u5206\u663e\u7136\u4e5f\u662f\u7ebf\u6027\u7684\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 Manacher \u7b97\u6cd5\u7684\u5b9e\u73b0 \u00b6 \u5206\u7c7b\u8ba8\u8bba \u00b6 \u4e3a\u4e86\u8ba1\u7b97 d_1[] d_1[] \uff0c\u6211\u4eec\u6709\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 vector < int > d1 ( n ); for ( int i = 0 , l = 0 , r = - 1 ; i < n ; i ++ ) { int k = ( i > r ) ? 1 : min ( d1 [ l + r - i ], r - i ); while ( 0 <= i - k && i + k < n && s [ i - k ] == s [ i + k ]) { k ++ ; } d1 [ i ] = k -- ; if ( i + k > r ) { l = i - k ; r = i + k ; } } \u8ba1\u7b97 d_2[] d_2[] \u7684\u4ee3\u7801\u5341\u5206\u7c7b\u4f3c\uff0c\u4f46\u662f\u5728\u7b97\u672f\u8868\u8fbe\u5f0f\u4e0a\u6709\u4e9b\u8bb8\u4e0d\u540c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 vector < int > d2 ( n ); for ( int i = 0 , l = 0 , r = - 1 ; i < n ; i ++ ) { int k = ( i > r ) ? 0 : min ( d2 [ l + r - i + 1 ], r - i + 1 ); while ( 0 <= i - k - 1 && i + k < n && s [ i - k - 1 ] == s [ i + k ]) { k ++ ; } d2 [ i ] = k -- ; if ( i + k > r ) { l = i - k - 1 ; r = i + k ; } } \u7edf\u4e00\u5904\u7406 \u00b6 \u867d\u7136\u5728\u8bb2\u89e3\u8fc7\u7a0b\u53ca\u4e0a\u8ff0\u5b9e\u73b0\u4e2d\u6211\u4eec\u5c06 d_1[] d_1[] \u548c d_2[] d_2[] \u7684\u8ba1\u7b97\u5206\u5f00\u8003\u8651\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u6280\u5de7\u5c06\u4e8c\u8005\u7684\u8ba1\u7b97\u7edf\u4e00\u4e3a d_1[] d_1[] \u7684\u8ba1\u7b97\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5728\u5176 n + 1 n + 1 \u4e2a\u7a7a\u4e2d\u63d2\u5165\u5206\u9694\u7b26 \\# \\# \uff0c\u4ece\u800c\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2n + 1 2n + 1 \u7684\u5b57\u7b26\u4e32 s' s' \u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 s = \\mathtt{abababc} s = \\mathtt{abababc} \uff0c\u5176\u5bf9\u5e94\u7684 s' = \\mathtt{\\#a\\#b\\#a\\#b\\#a\\#b\\#c\\#} s' = \\mathtt{\\#a\\#b\\#a\\#b\\#a\\#b\\#c\\#} \u3002 \u5bf9\u4e8e\u5b57\u6bcd\u95f4\u7684 \\# \\# \uff0c\u5176\u5b9e\u9645\u610f\u4e49\u4e3a s s \u4e2d\u5bf9\u5e94\u7684 \u201c\u7a7a\u201d\u3002\u800c\u4e24\u7aef\u7684 \\# \\# \u5219\u662f\u4e3a\u4e86\u5b9e\u73b0\u7684\u65b9\u4fbf\u3002 \u6ce8\u610f\u5230\uff0c\u5728\u5bf9 s' s' \u8ba1\u7b97 d_1[] d_1[] \u540e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e i i \uff0c d_1[i] d_1[i] \u6240\u63cf\u8ff0\u7684\u6700\u957f\u7684\u5b50\u56de\u6587\u4e32\u5fc5\u5b9a\u4ee5 \\# \\# \u7ed3\u5c3e\uff08\u82e5\u4ee5\u5b57\u6bcd\u7ed3\u5c3e\uff0c\u7531\u4e8e\u5b57\u6bcd\u4e24\u4fa7\u5fc5\u5b9a\u5404\u6709\u4e00\u4e2a \\# \\# \uff0c\u56e0\u6b64\u53ef\u5411\u5916\u6269\u5c55\u4e00\u4e2a\u5f97\u5230\u4e00\u4e2a\u66f4\u957f\u7684\uff09\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e s s \u4e2d\u4e00\u4e2a\u4ee5\u5b57\u6bcd\u4e3a\u4e2d\u5fc3\u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3a m + 1 m + 1 \uff0c\u5219\u5176\u5728 s' s' \u4e2d\u5bf9\u5e94\u4e00\u4e2a\u4ee5\u76f8\u5e94\u5b57\u6bcd\u4e3a\u4e2d\u5fc3\uff0c\u957f\u5ea6\u4e3a 2m + 3 2m + 3 \u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff1b\u800c\u5bf9\u4e8e s s \u4e2d\u4e00\u4e2a\u4ee5\u7a7a\u4e3a\u4e2d\u5fc3\u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3a m m \uff0c\u5219\u5176\u5728 s' s' \u4e2d\u5bf9\u5e94\u4e00\u4e2a\u4ee5\u76f8\u5e94\u8868\u793a\u7a7a\u7684 \\# \\# \u4e3a\u4e2d\u5fc3\uff0c\u957f\u5ea6\u4e3a 2m + 1 2m + 1 \u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff08\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u4e0b\u7684 m m \u5747\u4e3a\u5076\u6570\uff0c\u4f46\u8be5\u6027\u8d28\u6210\u7acb\u4e0e\u5426\u5e76\u4e0d\u5f71\u54cd\u7ed3\u8bba\uff09\u3002\u7efc\u5408\u4ee5\u4e0a\u89c2\u5bdf\u53ca\u5c11\u8bb8\u8ba1\u7b97\u540e\u6613\u5f97\uff0c\u5728 s' s' \u4e2d\uff0c d_1[i] d_1[i] \u8868\u793a\u5728 s\u200b s\u200b \u4e2d\u4ee5\u5bf9\u5e94\u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\u7684 \u603b\u957f\u5ea6\u52a0\u4e00 \u3002 \u4e0a\u8ff0\u7ed3\u8bba\u5efa\u7acb\u4e86 s' s' \u7684 d_1[] d_1[] \u540c s s \u7684 d_1[] d_1[] \u548c d_2[] d_2[] \u95f4\u7684\u5173\u7cfb\u3002 \u7531\u4e8e\u8be5\u7edf\u4e00\u5904\u7406\u672c\u8d28\u4e0a\u5373\u6c42 s' s' \u7684 d_1[] d_1[] \uff0c\u56e0\u6b64\u5728\u5f97\u5230 s' s' \u540e\uff0c\u4ee3\u7801\u540c\u4e0a\u8282\u8ba1\u7b97 d_1[] d_1[] \u7684\u4e00\u6837\u3002 \u7ec3\u4e60\u9898\u76ee \u00b6 UVA #11475 \"Extend to Palindrome\" P4555 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u6700\u957f\u53cc\u56de\u6587\u4e32 \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u0432 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Finding all sub-palindromes in O(N) O(N) \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002","title":"Manacher"},{"location":"string/manacher/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u8bf7\u627e\u5230\u6240\u6709\u5bf9 (i, j) (i, j) \u4f7f\u5f97\u5b50\u4e32 s[i \\dots j] s[i \\dots j] \u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u3002\u5f53 t = t_{\\text{rev}} t = t_{\\text{rev}} \u65f6\uff0c\u5b57\u7b26\u4e32 t t \u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff08 t_{\\text{rev}} t_{\\text{rev}} \u662f t t \u7684\u53cd\u8f6c\u5b57\u7b26\u4e32\uff09\u3002","title":"\u63cf\u8ff0"},{"location":"string/manacher/#_2","text":"\u663e\u7136\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u53ef\u80fd\u6709 O(n^2) O(n^2) \u4e2a\u56de\u6587\u4e32\uff0c\u56e0\u6b64\u4f3c\u4e4e\u4e00\u773c\u770b\u8fc7\u53bb\u8be5\u95ee\u9898\u5e76\u6ca1\u6709\u7ebf\u6027\u7b97\u6cd5\u3002 \u4f46\u662f\u5173\u4e8e\u56de\u6587\u4e32\u7684\u4fe1\u606f\u53ef\u7528 \u4e00\u79cd\u66f4\u7d27\u51d1\u7684\u65b9\u5f0f \u8868\u8fbe\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e i = 0 \\dots n - 1 i = 0 \\dots n - 1 \uff0c\u6211\u4eec\u627e\u51fa\u503c d_1[i] d_1[i] \u548c d_2[i] d_2[i] \u3002\u4e8c\u8005\u5206\u522b\u8868\u793a\u4ee5\u4f4d\u7f6e i i \u4e3a\u4e2d\u5fc3\u7684\u957f\u5ea6\u4e3a\u5947\u6570\u548c\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u4e2a\u6570\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5b57\u7b26\u4e32 s = \\mathtt{abababc} s = \\mathtt{abababc} \u4ee5 s[3] = b s[3] = b \u4e3a\u4e2d\u5fc3\u6709\u4e09\u4e2a\u5947\u6570\u957f\u5ea6\u7684\u56de\u6587\u4e32\uff0c\u4e5f\u5373 d_1[3] = 3 d_1[3] = 3 \uff1a a\\ \\overbrace{b\\ a\\ \\underset{s_3}{b}\\ a\\ b}^{d_1[3]=3}\\ c a\\ \\overbrace{b\\ a\\ \\underset{s_3}{b}\\ a\\ b}^{d_1[3]=3}\\ c \u5b57\u7b26\u4e32 s = \\mathtt{cbaabd} s = \\mathtt{cbaabd} \u4ee5 s[3] = a s[3] = a \u4e3a\u4e2d\u5fc3\u6709\u4e24\u4e2a\u5076\u6570\u957f\u5ea6\u7684\u56de\u6587\u4e32\uff0c\u4e5f\u5373 d_2[3] = 2 d_2[3] = 2 \uff1a c\\ \\overbrace{b\\ a\\ \\underset{s_3}{a}\\ b}^{d_2[3]=2}\\ d c\\ \\overbrace{b\\ a\\ \\underset{s_3}{a}\\ b}^{d_2[3]=2}\\ d \u56e0\u6b64\u5173\u952e\u601d\u8def\u662f\uff0c\u5982\u679c\u4ee5\u67d0\u4e2a\u4f4d\u7f6e i i \u4e3a\u4e2d\u5fc3\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a l l \u7684\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4ee5 i i \u4e3a\u4e2d\u5fc3\u7684\u957f\u5ea6\u4e3a l - 2 l - 2 \uff0c l - 4 l - 4 \uff0c\u7b49\u7b49\u7684\u56de\u6587\u4e32\u3002\u6240\u4ee5 d_1[i] d_1[i] \u548c d_2[i] d_2[i] \u4e24\u4e2a\u6570\u7ec4\u5df2\u7ecf\u8db3\u591f\u8868\u793a\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b50\u56de\u6587\u4e32\u7684\u4fe1\u606f\u3002 \u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e8b\u5b9e\u662f\uff0c\u5b58\u5728\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u5e76\u4e14\u8db3\u591f\u7b80\u5355\u7684\u7b97\u6cd5\u8ba1\u7b97\u4e0a\u8ff0\u4e24\u4e2a \u201c\u56de\u6587\u6027\u8d28\u6570\u7ec4\u201d d_1[] d_1[] \u548c d_2[] d_2[] \u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6211\u4eec\u5c06\u8be6\u7ec6\u7684\u63cf\u8ff0\u8be5\u7b97\u6cd5\u3002","title":"\u66f4\u8fdb\u4e00\u6b65\u7684\u63cf\u8ff0"},{"location":"string/manacher/#_3","text":"\u603b\u7684\u6765\u8bf4\uff0c\u8be5\u95ee\u9898\u5177\u6709\u591a\u79cd\u89e3\u6cd5\uff1a\u5e94\u7528\u5b57\u7b26\u4e32\u54c8\u5e0c\uff0c\u8be5\u95ee\u9898\u53ef\u5728 O(n \\log n) O(n \\log n) \u65f6\u95f4\u5185\u89e3\u51b3\uff0c\u800c\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\u548c\u5feb\u901f LCA \u8be5\u95ee\u9898\u53ef\u5728 O(n) O(n) \u65f6\u95f4\u5185\u89e3\u51b3\u3002 \u4f46\u662f\u8fd9\u91cc\u63cf\u8ff0\u7684\u7b97\u6cd5 \u538b\u5012\u6027 \u7684\u7b80\u5355\uff0c\u5e76\u4e14\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0a\u5177\u6709\u66f4\u5c0f\u7684\u5e38\u6570\u3002\u8be5\u7b97\u6cd5\u7531 Glenn K. Manacher \u5728 1975 \u5e74\u63d0\u51fa\u3002","title":"\u89e3\u6cd5"},{"location":"string/manacher/#_4","text":"\u4e3a\u4e86\u907f\u514d\u5728\u4e4b\u540e\u7684\u53d9\u8ff0\u4e2d\u51fa\u73b0\u6b67\u4e49\uff0c\u8fd9\u91cc\u6211\u4eec\u6307\u51fa\u4ec0\u4e48\u662f \u201c\u6734\u7d20\u7b97\u6cd5\u201d\u3002 \u8be5\u7b97\u6cd5\u901a\u8fc7\u4e0b\u8ff0\u65b9\u5f0f\u5de5\u4f5c\uff1a\u5bf9\u6bcf\u4e2a\u4e2d\u5fc3\u4f4d\u7f6e i i \uff0c\u5728\u6bd4\u8f83\u4e00\u5bf9\u5bf9\u5e94\u5b57\u7b26\u540e\uff0c\u53ea\u8981\u53ef\u80fd\uff0c\u8be5\u7b97\u6cd5\u4fbf\u5c1d\u8bd5\u5c06\u7b54\u6848\u52a0 1 1 \u3002 \u8be5\u7b97\u6cd5\u662f\u6bd4\u8f83\u6162\u7684\uff1a\u5b83\u53ea\u80fd\u5728 O(n^2) O(n^2) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u7b54\u6848\u3002 \u8be5\u6734\u7d20\u7b97\u6cd5\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 vector < int > d1 ( n ), d2 ( n ); for ( int i = 0 ; i < n ; i ++ ) { d1 [ i ] = 1 ; while ( 0 <= i - d1 [ i ] && i + d1 [ i ] < n && s [ i - d1 [ i ]] == s [ i + d1 [ i ]]) { d1 [ i ] ++ ; } d2 [ i ] = 0 ; while ( 0 <= i - d2 [ i ] - 1 && i + d2 [ i ] < n && s [ i - d2 [ i ] - 1 ] == s [ i + d2 [ i ]]) { d2 [ i ] ++ ; } }","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"string/manacher/#manacher","text":"\u8fd9\u91cc\u6211\u4eec\u5c06\u53ea\u63cf\u8ff0\u7b97\u6cd5\u4e2d\u5bfb\u627e\u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u56de\u6587\u4e32\u7684\u60c5\u51b5\uff0c\u5373\u53ea\u8ba1\u7b97 d_1[] d_1[] \uff1b\u5bfb\u627e\u6240\u6709\u5076\u6570\u957f\u5ea6\u5b50\u56de\u6587\u4e32\u7684\u7b97\u6cd5\uff08\u5373\u8ba1\u7b97\u6570\u7ec4 d_2[] d_2[] \uff09\u5c06\u53ea\u9700\u5bf9\u5947\u6570\u60c5\u51b5\u4e0b\u7684\u7b97\u6cd5\u8fdb\u884c\u4e00\u4e9b\u5c0f\u4fee\u6539\u3002 \u4e3a\u4e86\u5feb\u901f\u8ba1\u7b97\uff0c\u6211\u4eec\u7ef4\u62a4\u5df2\u627e\u5230\u7684\u5b50\u56de\u6587\u4e32\u7684\u6700\u9760\u53f3\u7684 \u8fb9\u754c (l, r) (l, r) \uff08\u5373\u5177\u6709\u6700\u5927 r r \u503c\u7684\u56de\u6587\u4e32\uff09\u3002\u521d\u59cb\u65f6\uff0c\u6211\u4eec\u7f6e l = 0 l = 0 \u548c r = -1 r = -1 \u3002 \u73b0\u5728\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u4e0b\u4e00\u4e2a i i \u8ba1\u7b97 d_1[i] d_1[i] \uff0c\u800c\u4e4b\u524d\u6240\u6709 d_1[] d_1[] \u4e2d\u7684\u503c\u5df2\u8ba1\u7b97\u5b8c\u6bd5\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u4e0b\u5217\u65b9\u5f0f\u8ba1\u7b97\uff1a \u5982\u679c i i \u4f4d\u4e8e\u5f53\u524d\u5b50\u56de\u6587\u4e32\u4e4b\u5916\uff0c\u5373 i > r i > r \uff0c\u90a3\u4e48\u6211\u4eec\u8c03\u7528\u6734\u7d20\u7b97\u6cd5\u3002 \u56e0\u6b64\u6211\u4eec\u5c06\u8fde\u7eed\u7684\u589e\u52a0 d_1[i] d_1[i] \uff0c\u540c\u65f6\u5728\u6bcf\u4e00\u6b65\u4e2d\u68c0\u67e5\u5f53\u524d\u7684\u5b50\u4e32 [i - d_1[i] \\dots i + d_1[i]] [i - d_1[i] \\dots i + d_1[i]] \u662f\u5426\u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u3002\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u7b2c\u4e00\u5904\u5bf9\u5e94\u5b57\u7b26\u4e0d\u540c\uff0c\u53c8\u6216\u8005\u78b0\u5230\u4e86 s s \u7684\u8fb9\u754c\uff0c\u5219\u7b97\u6cd5\u505c\u6b62\u3002\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u5747\u5df2\u8ba1\u7b97\u5b8c d_1[i] d_1[i] \u3002\u6b64\u540e\uff0c\u4ecd\u9700\u8bb0\u5f97\u66f4\u65b0 (l, r) (l, r) \u3002 \u73b0\u5728\u8003\u8651 i \\le r i \\le r \u7684\u60c5\u51b5\u3002\u6211\u4eec\u5c06\u5c1d\u8bd5\u4ece\u5df2\u8ba1\u7b97\u8fc7\u7684 d_1[] d_1[] \u7684\u503c\u4e2d\u83b7\u53d6\u4e00\u4e9b\u4fe1\u606f\u3002\u9996\u5148\u5728\u5b50\u56de\u6587\u4e32 (l, r) (l, r) \u4e2d\u53cd\u8f6c\u4f4d\u7f6e i i \uff0c\u5373\u6211\u4eec\u5f97\u5230 j = l + (r - i) j = l + (r - i) \u3002\u73b0\u5728\u6765\u8003\u5bdf\u503c d_1[j] d_1[j] \u3002\u56e0\u4e3a\u4f4d\u7f6e j j \u540c\u4f4d\u7f6e i i \u5bf9\u79f0\uff0c\u6211\u4eec \u51e0\u4e4e\u603b\u662f \u53ef\u4ee5\u7f6e d_1[i] = d_1[j] d_1[i] = d_1[j] \u3002\u8be5\u60f3\u6cd5\u7684\u56fe\u793a\u5982\u4e0b\uff08\u53ef\u8ba4\u4e3a\u4ee5 j j \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u88ab \u201c\u62f7\u8d1d\u201d \u81f3\u4ee5 i i \u4e3a\u4e2d\u5fc3\u7684\u4f4d\u7f6e\u4e0a\uff09\uff1a \\ldots\\ \\overbrace{ s_l\\ \\ldots\\ \\underbrace{ s_{j-d_1[j]+1}\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-d_1[j]+1}\\ \\ldots\\ s_i\\ \\ldots\\ s_{i+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ s_r }^\\text{palindrome}\\ \\ldots \\ldots\\ \\overbrace{ s_l\\ \\ldots\\ \\underbrace{ s_{j-d_1[j]+1}\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-d_1[j]+1}\\ \\ldots\\ s_i\\ \\ldots\\ s_{i+d_1[j]-1} }_\\text{palindrome}\\ \\ldots\\ s_r }^\\text{palindrome}\\ \\ldots \u7136\u800c\u6709\u4e00\u4e2a \u68d8\u624b\u7684\u60c5\u51b5 \u9700\u8981\u88ab\u6b63\u786e\u5904\u7406\uff1a\u5f53 \u201c\u5185\u90e8\u201d \u7684\u56de\u6587\u4e32\u5230\u8fbe \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u7684\u8fb9\u754c\u65f6\uff0c\u5373 j - d_1[j] + 1 \\le l j - d_1[j] + 1 \\le l \uff08\u6216\u8005\u7b49\u4ef7\u7684\u8bf4\uff0c i + d_1[j] - 1 \\ge r i + d_1[j] - 1 \\ge r \uff09\u3002\u56e0\u4e3a\u5728 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u8303\u56f4\u4ee5\u5916\u7684\u5bf9\u79f0\u6027\u6ca1\u6709\u4fdd\u8bc1\uff0c\u56e0\u6b64\u76f4\u63a5\u7f6e d_1[i] = d_1[j] d_1[i] = d_1[j] \u5c06\u662f\u4e0d\u6b63\u786e\u7684\uff1a\u6211\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u6765\u65ad\u8a00\u5728\u4f4d\u7f6e i i \u7684\u56de\u6587\u4e32\u5177\u6709\u540c\u6837\u7684\u957f\u5ea6\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u6b63\u786e\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5e94\u8be5 \u201c\u622a\u65ad\u201d \u56de\u6587\u4e32\u7684\u957f\u5ea6\uff0c\u5373\u7f6e d_1[i] = r - i d_1[i] = r - i \u3002\u4e4b\u540e\u6211\u4eec\u5c06\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\u4ee5\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u589e\u52a0 d_1[i] d_1[i] \u7684\u503c\u3002 \u8be5\u79cd\u60c5\u51b5\u7684\u56fe\u793a\u5982\u4e0b\uff08\u4ee5 j j \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5df2\u7ecf\u88ab\u622a\u65ad\u4ee5\u843d\u5728 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u5185\uff09\uff1a \\ldots\\ \\overbrace{ \\underbrace{ s_l\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+(j-l)} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-(r-i)}\\ \\ldots\\ s_i\\ \\ldots\\ s_r }_\\text{palindrome} }^\\text{palindrome}\\ \\underbrace{ \\ldots \\ldots \\ldots \\ldots \\ldots }_\\text{try moving here} \\ldots\\ \\overbrace{ \\underbrace{ s_l\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+(j-l)} }_\\text{palindrome}\\ \\ldots\\ \\underbrace{ s_{i-(r-i)}\\ \\ldots\\ s_i\\ \\ldots\\ s_r }_\\text{palindrome} }^\\text{palindrome}\\ \\underbrace{ \\ldots \\ldots \\ldots \\ldots \\ldots }_\\text{try moving here} \u8be5\u56fe\u793a\u663e\u793a\u51fa\uff0c\u5c3d\u7ba1\u4ee5 j j \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u53ef\u80fd\u66f4\u957f\uff0c\u4ee5\u81f4\u4e8e\u8d85\u51fa \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\uff0c\u4f46\u5728\u4f4d\u7f6e i i \uff0c\u6211\u4eec\u53ea\u80fd\u5229\u7528\u5176\u5b8c\u5168\u843d\u5728 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u5185\u7684\u90e8\u5206\u3002\u7136\u800c\u4f4d\u7f6e i i \u7684\u7b54\u6848\u53ef\u80fd\u6bd4\u8fd9\u4e2a\u503c\u66f4\u5927\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\u6765\u5c1d\u8bd5\u5c06\u5176\u6269\u5c55\u81f3 \u201c\u5916\u90e8\u201d \u56de\u6587\u4e32\u4e4b\u5916\uff0c\u4e5f\u5373\u6807\u8bc6\u4e3a \"try moving here\" \u7684\u533a\u57df\u3002 \u6700\u540e\uff0c\u4ecd\u6709\u5fc5\u8981\u63d0\u9192\u7684\u662f\uff0c\u6211\u4eec\u5e94\u5f53\u8bb0\u5f97\u5728\u8ba1\u7b97\u5b8c\u6bcf\u4e2a d_1[i] d_1[i] \u540e\u66f4\u65b0\u503c (l, r) (l, r) \u3002 \u540c\u65f6\uff0c\u518d\u8ba9\u6211\u4eec\u91cd\u590d\u4e00\u904d\uff1a\u8ba1\u7b97\u5076\u6570\u957f\u5ea6\u56de\u6587\u4e32\u6570\u7ec4 d_2[] d_2[] \u7684\u7b97\u6cd5\u540c\u4e0a\u8ff0\u8ba1\u7b97\u5947\u6570\u957f\u5ea6\u56de\u6587\u4e32\u6570\u7ec4 d_1[] d_1[] \u7684\u7b97\u6cd5\u5341\u5206\u7c7b\u4f3c\u3002","title":"Manacher \u7b97\u6cd5"},{"location":"string/manacher/#manacher_1","text":"\u56e0\u4e3a\u5728\u8ba1\u7b97\u4e00\u4e2a\u7279\u5b9a\u4f4d\u7f6e\u7684\u7b54\u6848\u65f6\u6211\u4eec\u603b\u4f1a\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\uff0c\u6240\u4ee5\u4e00\u773c\u770b\u53bb\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u7684\u4e8b\u5b9e\u5e76\u4e0d\u663e\u7136\u3002 \u7136\u800c\u66f4\u4ed4\u7ec6\u7684\u5206\u6790\u663e\u793a\u51fa\u8be5\u7b97\u6cd5\u5177\u6709\u7ebf\u6027\u590d\u6742\u5ea6\u3002\u6b64\u5904\u6211\u4eec\u9700\u8981\u6307\u51fa\uff0c \u8ba1\u7b97 Z \u51fd\u6570\u7684\u7b97\u6cd5 \u548c\u8be5\u7b97\u6cd5\u8f83\u4e3a\u7c7b\u4f3c\uff0c\u5e76\u540c\u6837\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5b9e\u9645\u4e0a\uff0c\u6ce8\u610f\u5230\u6734\u7d20\u7b97\u6cd5\u7684\u6bcf\u6b21\u8fed\u4ee3\u5747\u4f1a\u4f7f r r \u589e\u52a0 1 1 \uff0c\u4ee5\u53ca r r \u5728\u7b97\u6cd5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ece\u4e0d\u51cf\u5c0f\u3002\u8fd9\u4e24\u4e2a\u89c2\u5bdf\u544a\u8bc9\u6211\u4eec\u6734\u7d20\u7b97\u6cd5\u603b\u5171\u4f1a\u8fdb\u884c O(n) O(n) \u6b21\u8fed\u4ee3\u3002 Manacher \u7b97\u6cd5\u7684\u53e6\u4e00\u90e8\u5206\u663e\u7136\u4e5f\u662f\u7ebf\u6027\u7684\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002","title":"Manacher \u7b97\u6cd5\u7684\u590d\u6742\u5ea6"},{"location":"string/manacher/#manacher_2","text":"","title":"Manacher \u7b97\u6cd5\u7684\u5b9e\u73b0"},{"location":"string/manacher/#_5","text":"\u4e3a\u4e86\u8ba1\u7b97 d_1[] d_1[] \uff0c\u6211\u4eec\u6709\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 vector < int > d1 ( n ); for ( int i = 0 , l = 0 , r = - 1 ; i < n ; i ++ ) { int k = ( i > r ) ? 1 : min ( d1 [ l + r - i ], r - i ); while ( 0 <= i - k && i + k < n && s [ i - k ] == s [ i + k ]) { k ++ ; } d1 [ i ] = k -- ; if ( i + k > r ) { l = i - k ; r = i + k ; } } \u8ba1\u7b97 d_2[] d_2[] \u7684\u4ee3\u7801\u5341\u5206\u7c7b\u4f3c\uff0c\u4f46\u662f\u5728\u7b97\u672f\u8868\u8fbe\u5f0f\u4e0a\u6709\u4e9b\u8bb8\u4e0d\u540c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 vector < int > d2 ( n ); for ( int i = 0 , l = 0 , r = - 1 ; i < n ; i ++ ) { int k = ( i > r ) ? 0 : min ( d2 [ l + r - i + 1 ], r - i + 1 ); while ( 0 <= i - k - 1 && i + k < n && s [ i - k - 1 ] == s [ i + k ]) { k ++ ; } d2 [ i ] = k -- ; if ( i + k > r ) { l = i - k - 1 ; r = i + k ; } }","title":"\u5206\u7c7b\u8ba8\u8bba"},{"location":"string/manacher/#_6","text":"\u867d\u7136\u5728\u8bb2\u89e3\u8fc7\u7a0b\u53ca\u4e0a\u8ff0\u5b9e\u73b0\u4e2d\u6211\u4eec\u5c06 d_1[] d_1[] \u548c d_2[] d_2[] \u7684\u8ba1\u7b97\u5206\u5f00\u8003\u8651\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u6280\u5de7\u5c06\u4e8c\u8005\u7684\u8ba1\u7b97\u7edf\u4e00\u4e3a d_1[] d_1[] \u7684\u8ba1\u7b97\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5728\u5176 n + 1 n + 1 \u4e2a\u7a7a\u4e2d\u63d2\u5165\u5206\u9694\u7b26 \\# \\# \uff0c\u4ece\u800c\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2n + 1 2n + 1 \u7684\u5b57\u7b26\u4e32 s' s' \u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 s = \\mathtt{abababc} s = \\mathtt{abababc} \uff0c\u5176\u5bf9\u5e94\u7684 s' = \\mathtt{\\#a\\#b\\#a\\#b\\#a\\#b\\#c\\#} s' = \\mathtt{\\#a\\#b\\#a\\#b\\#a\\#b\\#c\\#} \u3002 \u5bf9\u4e8e\u5b57\u6bcd\u95f4\u7684 \\# \\# \uff0c\u5176\u5b9e\u9645\u610f\u4e49\u4e3a s s \u4e2d\u5bf9\u5e94\u7684 \u201c\u7a7a\u201d\u3002\u800c\u4e24\u7aef\u7684 \\# \\# \u5219\u662f\u4e3a\u4e86\u5b9e\u73b0\u7684\u65b9\u4fbf\u3002 \u6ce8\u610f\u5230\uff0c\u5728\u5bf9 s' s' \u8ba1\u7b97 d_1[] d_1[] \u540e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e i i \uff0c d_1[i] d_1[i] \u6240\u63cf\u8ff0\u7684\u6700\u957f\u7684\u5b50\u56de\u6587\u4e32\u5fc5\u5b9a\u4ee5 \\# \\# \u7ed3\u5c3e\uff08\u82e5\u4ee5\u5b57\u6bcd\u7ed3\u5c3e\uff0c\u7531\u4e8e\u5b57\u6bcd\u4e24\u4fa7\u5fc5\u5b9a\u5404\u6709\u4e00\u4e2a \\# \\# \uff0c\u56e0\u6b64\u53ef\u5411\u5916\u6269\u5c55\u4e00\u4e2a\u5f97\u5230\u4e00\u4e2a\u66f4\u957f\u7684\uff09\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e s s \u4e2d\u4e00\u4e2a\u4ee5\u5b57\u6bcd\u4e3a\u4e2d\u5fc3\u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3a m + 1 m + 1 \uff0c\u5219\u5176\u5728 s' s' \u4e2d\u5bf9\u5e94\u4e00\u4e2a\u4ee5\u76f8\u5e94\u5b57\u6bcd\u4e3a\u4e2d\u5fc3\uff0c\u957f\u5ea6\u4e3a 2m + 3 2m + 3 \u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff1b\u800c\u5bf9\u4e8e s s \u4e2d\u4e00\u4e2a\u4ee5\u7a7a\u4e3a\u4e2d\u5fc3\u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3a m m \uff0c\u5219\u5176\u5728 s' s' \u4e2d\u5bf9\u5e94\u4e00\u4e2a\u4ee5\u76f8\u5e94\u8868\u793a\u7a7a\u7684 \\# \\# \u4e3a\u4e2d\u5fc3\uff0c\u957f\u5ea6\u4e3a 2m + 1 2m + 1 \u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\uff08\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u4e0b\u7684 m m \u5747\u4e3a\u5076\u6570\uff0c\u4f46\u8be5\u6027\u8d28\u6210\u7acb\u4e0e\u5426\u5e76\u4e0d\u5f71\u54cd\u7ed3\u8bba\uff09\u3002\u7efc\u5408\u4ee5\u4e0a\u89c2\u5bdf\u53ca\u5c11\u8bb8\u8ba1\u7b97\u540e\u6613\u5f97\uff0c\u5728 s' s' \u4e2d\uff0c d_1[i] d_1[i] \u8868\u793a\u5728 s\u200b s\u200b \u4e2d\u4ee5\u5bf9\u5e94\u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\u7684\u6781\u5927\u5b50\u56de\u6587\u4e32\u7684 \u603b\u957f\u5ea6\u52a0\u4e00 \u3002 \u4e0a\u8ff0\u7ed3\u8bba\u5efa\u7acb\u4e86 s' s' \u7684 d_1[] d_1[] \u540c s s \u7684 d_1[] d_1[] \u548c d_2[] d_2[] \u95f4\u7684\u5173\u7cfb\u3002 \u7531\u4e8e\u8be5\u7edf\u4e00\u5904\u7406\u672c\u8d28\u4e0a\u5373\u6c42 s' s' \u7684 d_1[] d_1[] \uff0c\u56e0\u6b64\u5728\u5f97\u5230 s' s' \u540e\uff0c\u4ee3\u7801\u540c\u4e0a\u8282\u8ba1\u7b97 d_1[] d_1[] \u7684\u4e00\u6837\u3002","title":"\u7edf\u4e00\u5904\u7406"},{"location":"string/manacher/#_7","text":"UVA #11475 \"Extend to Palindrome\" P4555 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u6700\u957f\u53cc\u56de\u6587\u4e32 \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u0432 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Finding all sub-palindromes in O(N) O(N) \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002","title":"\u7ec3\u4e60\u9898\u76ee"},{"location":"string/match/","text":"\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898 \u00b6 \u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\u5206\u4e3a\u597d\u591a\u7c7b\uff1a \u5355\u4e32\u5339\u914d \u00b6 \u4e00\u4e2a\u6a21\u5f0f\u4e32 (pattern)\uff0c\u4e00\u4e2a\u5f85\u5339\u914d\u4e32\uff0c\u627e\u51fa\u524d\u8005\u5728\u540e\u8005\u4e2d\u7684\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e \u591a\u4e32\u5339\u914d \u00b6 \u591a\u4e2a\u6a21\u5f0f\u4e32\uff0c\u4e00\u4e2a\u5f85\u5339\u914d\u4e32\uff08\u591a\u4e2a\u5f85\u5339\u914d\u4e32\u8fd8\u7528\u8bf4\uff0c\u76f4\u63a5\u8fde\u8d77\u6765\uff09 \u76f4\u63a5\u5f53\u505a\u5355\u4e32\u5339\u914d\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u6548\u7387\u4e0d\u591f\u9ad8 \u5339\u914d\u4e00\u4e2a\u4e32\u7684\u4efb\u610f\u540e\u7f00 \u00b6 \u5339\u914d\u591a\u4e2a\u4e32\u7684\u4efb\u610f\u540e\u7f00 \u00b6 \u66b4\u529b\u505a\u6cd5 \u00b6 \u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u5c1d\u8bd5\u5bf9\u6a21\u5f0f\u4e32\u548c\u5f85\u5339\u914d\u4e32\u8fdb\u884c\u6bd4\u5bf9 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 5 6 7 8 9 10 match(char *a, char *b, int n, int m) { ans = new vector(); for (i = 0; i < n - m + 1; i++) { for (j = 0; j < m; j++) { if (a[i + j] != b[j]) break; } if (j == m) ans.push_back(i); } return ans; } \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nm) O(nm) \u7684\uff0c \u6700\u597d\u662f O(n) O(n) \u7684\u3002 \u5982\u679c\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u5927\u4e8e 1 \uff08\u6709\u81f3\u5c11\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\uff09\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \u7684\u3002 Hash \u7684\u65b9\u6cd5 \u00b6 \u53c2\u89c1 Hash KMP \u7b97\u6cd5 \u00b6 \u53c2\u89c1 KMP","title":"\u5b57\u7b26\u4e32\u5339\u914d"},{"location":"string/match/#_1","text":"\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\u5206\u4e3a\u597d\u591a\u7c7b\uff1a","title":"\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898"},{"location":"string/match/#_2","text":"\u4e00\u4e2a\u6a21\u5f0f\u4e32 (pattern)\uff0c\u4e00\u4e2a\u5f85\u5339\u914d\u4e32\uff0c\u627e\u51fa\u524d\u8005\u5728\u540e\u8005\u4e2d\u7684\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e","title":"\u5355\u4e32\u5339\u914d"},{"location":"string/match/#_3","text":"\u591a\u4e2a\u6a21\u5f0f\u4e32\uff0c\u4e00\u4e2a\u5f85\u5339\u914d\u4e32\uff08\u591a\u4e2a\u5f85\u5339\u914d\u4e32\u8fd8\u7528\u8bf4\uff0c\u76f4\u63a5\u8fde\u8d77\u6765\uff09 \u76f4\u63a5\u5f53\u505a\u5355\u4e32\u5339\u914d\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u6548\u7387\u4e0d\u591f\u9ad8","title":"\u591a\u4e32\u5339\u914d"},{"location":"string/match/#_4","text":"","title":"\u5339\u914d\u4e00\u4e2a\u4e32\u7684\u4efb\u610f\u540e\u7f00"},{"location":"string/match/#_5","text":"","title":"\u5339\u914d\u591a\u4e2a\u4e32\u7684\u4efb\u610f\u540e\u7f00"},{"location":"string/match/#_6","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u5c1d\u8bd5\u5bf9\u6a21\u5f0f\u4e32\u548c\u5f85\u5339\u914d\u4e32\u8fdb\u884c\u6bd4\u5bf9 \uff08\u4f2a\u4ee3\u7801\uff09 1 2 3 4 5 6 7 8 9 10 match(char *a, char *b, int n, int m) { ans = new vector(); for (i = 0; i < n - m + 1; i++) { for (j = 0; j < m; j++) { if (a[i + j] != b[j]) break; } if (j == m) ans.push_back(i); } return ans; } \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nm) O(nm) \u7684\uff0c \u6700\u597d\u662f O(n) O(n) \u7684\u3002 \u5982\u679c\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u5927\u4e8e 1 \uff08\u6709\u81f3\u5c11\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\uff09\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \u7684\u3002","title":"\u66b4\u529b\u505a\u6cd5"},{"location":"string/match/#hash","text":"\u53c2\u89c1 Hash","title":"Hash \u7684\u65b9\u6cd5"},{"location":"string/match/#kmp","text":"\u53c2\u89c1 KMP","title":"KMP \u7b97\u6cd5"},{"location":"string/minimal-string/","text":"","title":"\u6700\u5c0f\u8868\u793a\u6cd5"},{"location":"string/palindrome-tree/","text":"","title":"\u56de\u6587\u6811"},{"location":"string/pam/","text":"","title":"\u56de\u6587\u81ea\u52a8\u673a"},{"location":"string/prefix-function/","text":"\u524d\u7f00\u51fd\u6570\u5b9a\u4e49 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5176 \u524d\u7f00\u51fd\u6570 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4 \\pi \\pi \u3002\u5176\u4e2d \\pi[i] \\pi[i] \u4e3a\u65e2\u662f\u5b50\u4e32 s[0\\dots i] s[0\\dots i] \u7684\u524d\u7f00\u540c\u65f6\u4e5f\u662f\u8be5\u5b50\u4e32\u7684\u540e\u7f00\u7684\u6700\u957f\u771f\u524d\u7f00\uff08proper prefix\uff09\u957f\u5ea6\u3002\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u771f\u524d\u7f00\u662f\u5176\u524d\u7f00\u4f46\u4e0d\u7b49\u4e8e\u8be5\u5b57\u7b26\u4e32\u81ea\u8eab\u3002\u6839\u636e\u5b9a\u4e49\uff0c \\pi[0] = 0 \\pi[0] = 0 \u3002 \u524d\u7f00\u51fd\u6570\u7684\u5b9a\u4e49\u53ef\u7528\u6570\u5b66\u8bed\u8a00\u63cf\u8ff0\u5982\u4e0b\uff1a \\pi[i] = \\max_{k = 0 \\dots i}\\{k: s[0 \\dots k - 1] = s[i - (k - 1) \\dots i]\\} \\pi[i] = \\max_{k = 0 \\dots i}\\{k: s[0 \\dots k - 1] = s[i - (k - 1) \\dots i]\\} \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5b57\u7b26\u4e32 abcabcd \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0, 0, 0, 1, 2, 3, 0] [0, 0, 0, 1, 2, 3, 0] \uff0c\u5b57\u7b26\u4e32 aabaaab \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0, 1, 0, 1, 2, 2, 3] [0, 1, 0, 1, 2, 2, 3] \u3002 \u6734\u7d20\u7b97\u6cd5 \u00b6 \u4e00\u4e2a\u76f4\u63a5\u6309\u7167\u5b9a\u4e49\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u7b97\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 vector < int > prefix_function ( string s ) { int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 0 ; i < n ; i ++ ) for ( int k = 0 ; k <= i ; k ++ ) if ( s . substr ( 0 , k ) == s . substr ( i - k + 1 , k )) pi [ i ] = k ; return pi ; } \u663e\u89c1\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3) \uff0c\u5177\u6709\u5f88\u5927\u7684\u6539\u8fdb\u7a7a\u95f4\u3002 \u9ad8\u6548\u7b97\u6cd5 \u00b6 \u8be5\u7b97\u6cd5\u7531 Knuth \u548c Pratt \u5728 1977 \u5e74\u63d0\u51fa\uff0c\u540c\u5e74 Morris \u4e5f\u72ec\u7acb\u7684\u63d0\u51fa\u8be5\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u88ab\u7528\u4f5c\u4e00\u4e2a\u5b50\u4e32\u641c\u7d22\u7b97\u6cd5\u7684\u6838\u5fc3\u51fd\u6570\u3002 \u7b2c\u4e00\u4e2a\u4f18\u5316 \u00b6 \u7b2c\u4e00\u4e2a\u91cd\u8981\u7684\u89c2\u5bdf\u662f\u76f8\u90bb\u7684\u524d\u7f00\u51fd\u6570\u503c\u81f3\u591a\u589e\u52a0 1 1 \u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u4e0d\u7136\uff0c\u5373 \\pi[i + 1] > \\pi[i] + 1 \\pi[i + 1] > \\pi[i] + 1 \uff0c\u8003\u5bdf\u957f\u5ea6\u4e3a \\pi[i + 1] \\pi[i + 1] \u7684 s[0 \\dots i + 1] s[0 \\dots i + 1] \u7684\u540e\u7f00\u53ef\u5f15\u51fa\u77db\u76fe\u3002\u8be5\u540e\u7f00\u53bb\u6389\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a \\pi[i + 1] - 1 \\pi[i + 1] - 1 \u7684 s[0 \\dots i] s[0 \\dots i] \u7684\u540e\u7f00\u3002\u8be5\u540e\u7f00\u6bd4 \\pi[i] \\pi[i] \u63cf\u8ff0\u7684\u540e\u7f00\u66f4\u4f18\uff0c\u540c\u5176\u5b9a\u4e49\u77db\u76fe\u3002 \u4e0b\u8ff0\u56fe\u4f8b\u5c55\u793a\u4e86\u8fd9\u4e2a\u77db\u76fe\u3002\u5047\u5b9a\u4f4d\u4e8e\u4f4d\u7f6e i i \u548c i + 1 i + 1 \u7684\u65e2\u662f\u540e\u7f00\u540c\u65f6\u4e5f\u662f\u524d\u7f00\u7684\u6700\u957f\u771f\u540e\u7f00\u7684\u957f\u5ea6\u5206\u522b\u4e3a 2 2 \u548c 4 4 \u3002\u5219\u5b57\u7b26\u4e32 s_0 s_1 s_2 s_3 s_0 s_1 s_2 s_3 \u4e0e\u5b57\u7b26\u4e32 s_{i - 2} s_{i - 1} s_i s_{i + 1} s_{i - 2} s_{i - 1} s_i s_{i + 1} \u76f8\u540c\uff0c\u8fd9\u610f\u5473\u7740 s_0 s_1 s_2 s_0 s_1 s_2 \u4e0e\u5b57\u7b26\u4e32 s_{i - 2} s_{i - 1} s_i s_{i - 2} s_{i - 1} s_i \u76f8\u540c\uff0c\u56e0\u6b64 \\pi[i] \\pi[i] \u81f3\u5c11\u4e3a 3 3 \u3002 \\underbrace{\\overbrace{s_0 ~ s_1}^{\\pi[i] = 2} ~ s_2 ~ s_3}_{\\pi[i+1] = 4} ~ \\dots ~ \\underbrace{s_{i-2} ~ \\overbrace{s_{i-1} ~ s_{i}}^{\\pi[i] = 2} ~ s_{i+1}}_{\\pi[i+1] = 4} \\underbrace{\\overbrace{s_0 ~ s_1}^{\\pi[i] = 2} ~ s_2 ~ s_3}_{\\pi[i+1] = 4} ~ \\dots ~ \\underbrace{s_{i-2} ~ \\overbrace{s_{i-1} ~ s_{i}}^{\\pi[i] = 2} ~ s_{i+1}}_{\\pi[i+1] = 4} \u6240\u4ee5\u5f53\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u524d\u7f00\u51fd\u6570\u7684\u503c\u8981\u4e48\u589e\u52a0\u4e00\uff0c\u8981\u4e48\u7ef4\u6301\u4e0d\u53d8\uff0c\u8981\u4e48\u51cf\u5c11\u3002\u5b9e\u9645\u4e0a\uff0c\u8be5\u4e8b\u5b9e\u5df2\u7ecf\u5141\u8bb8\u6211\u4eec\u5c06\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u5c11\u81f3 O(n^2) O(n^2) \u3002\u56e0\u4e3a\u6bcf\u6b65\u4e2d\u524d\u7f00\u51fd\u6570\u81f3\u591a\u589e\u52a0 1 1 \uff0c\u56e0\u6b64\u5728\u603b\u7684\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u524d\u7f00\u51fd\u6570\u81f3\u591a\u589e\u52a0 n n \uff0c\u540c\u65f6\u4e5f\u81f3\u591a\u51cf\u5c0f n n \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ec5\u9700\u8981\u8fdb\u884c O(n) O(n) \u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u7b2c\u4e8c\u4e2a\u4f18\u5316 \u00b6 \u8ba9\u6211\u4eec\u8d70\u7684\u66f4\u8fdc\u4e00\u70b9\uff1a\u5c1d\u8bd5\u6446\u8131\u6389\u5b57\u7b26\u4e32\u6bd4\u8f83\u3002\u4e3a\u4e86\u8fbe\u6210\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u7528\u5230\u5148\u524d\u8ba1\u7b97\u7684\u6240\u6709\u4fe1\u606f\u3002 \u73b0\u5728\u8003\u8651\u8ba1\u7b97\u4f4d\u7f6e i + 1 i + 1 \u7684\u524d\u7f00\u51fd\u6570 \\pi \\pi \u7684\u503c\u3002\u5982\u679c s[i + 1] = s[\\pi[i]] s[i + 1] = s[\\pi[i]] \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u65ad\u8a00 \\pi[i + 1] = \\pi[i] + 1 \\pi[i + 1] = \\pi[i] + 1 \uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4f4d\u4e8e\u4f4d\u7f6e i i \u7684\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u540e\u7f00\u540c\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u524d\u7f00\u76f8\u7b49\u3002\u53c2\u7167\u4e0b\u8ff0\u56fe\u4f8b\uff1a \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]} ~ \\overbrace{s_3}^{s_3 = s_{i+1}}}_{\\pi[i+1] = \\pi[i] + 1} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_{i}}^{\\pi[i]} ~ \\overbrace{s_{i+1}}^{s_3 = s_i + 1}}_{\\pi[i+1] = \\pi[i] + 1} \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]} ~ \\overbrace{s_3}^{s_3 = s_{i+1}}}_{\\pi[i+1] = \\pi[i] + 1} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_{i}}^{\\pi[i]} ~ \\overbrace{s_{i+1}}^{s_3 = s_i + 1}}_{\\pi[i+1] = \\pi[i] + 1} \u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5373 s[i + 1] \\neq s[\\pi[i]] s[i + 1] \\neq s[\\pi[i]] \uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5c1d\u8bd5\u66f4\u77ed\u7684\u5b57\u7b26\u4e32\u3002\u4e3a\u4e86\u52a0\u901f\uff0c\u6211\u4eec\u5e0c\u671b\u76f4\u63a5\u79fb\u52a8\u5230\u6700\u957f\u7684\u957f\u5ea6 j < \\pi[i] j < \\pi[i] \uff0c\u4f7f\u5f97\u5728\u4f4d\u7f6e i i \u7684\u524d\u7f00\u6027\u8d28\u4ecd\u5f97\u4ee5\u4fdd\u6301\uff0c\u4e5f\u5373 s[0 \\dots j - 1] = s[i - j + 1 \\dots i] s[0 \\dots j - 1] = s[i - j + 1 \\dots i] \uff1a \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u8fd9\u6837\u7684\u957f\u5ea6 j j \uff0c\u90a3\u4e48\u6211\u4eec\u4ec5\u9700\u8981\u518d\u6b21\u6bd4\u8f83 s[i + 1] s[i + 1] \u548c s[j] s[j] \u3002\u5982\u679c\u4ed6\u4eec\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u4eec\u7f6e \\pi[i + 1] = j + 1 \\pi[i + 1] = j + 1 \u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5c0f\u4e8e j j \u7684\u6700\u5927\u503c\u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u5f97\u4ee5\u4fdd\u6301\uff0c\u5982\u6b64\u53cd\u590d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u6301\u7eed\uff0c\u76f4\u5230 j = 0 j = 0 \u3002\u5982\u679c s[i + 1] = s[0] s[i + 1] = s[0] \uff0c\u90a3\u4e48\u6211\u4eec\u7f6e \\pi[i + 1] = 1 \\pi[i + 1] = 1 \uff0c\u5426\u5219 \\pi[i + 1] = 0 \\pi[i + 1] = 0 \u3002 \u6240\u4ee5\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u7684\u4e00\u4e2a\u5927\u6982\u96cf\u5f62\u3002\u73b0\u5728\u4ec5\u5269\u7684\u95ee\u9898\u662f\u5bf9\u4e8e j j \uff0c\u5982\u4f55\u5feb\u901f\u627e\u5230\u8fd9\u6837\u7684\u957f\u5ea6\u3002\u8ba9\u6211\u4eec\u91cd\u65b0\u53d9\u8ff0\u4e00\u904d\uff1a\u5bf9\u4e8e\u5f53\u524d\u5728\u4f4d\u7f6e i i \u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u5f97\u4ee5\u4fdd\u6301\u7684\u957f\u5ea6 j j \uff0c\u4e5f\u5373 s[0 \\dots j - 1] = s[i - j + 1 \\dots i] s[0 \\dots j - 1] = s[i - j + 1 \\dots i] \uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u6700\u5927\u7684 k < j k < j \uff0c\u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u4ecd\u5f97\u4ee5\u4fdd\u6301\u3002 \\overbrace{\\underbrace{s_0 ~ s_1}_k ~ s_2 ~ s_3}^j ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_k}^j ~s_{i+1} \\overbrace{\\underbrace{s_0 ~ s_1}_k ~ s_2 ~ s_3}^j ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_k}^j ~s_{i+1} \u4e0a\u56fe\u663e\u793a\u51fa k k \u5fc5\u5b9a\u4e3a \\pi[j - 1] \\pi[j - 1] \uff0c\u800c\u8be5\u503c\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\u3002 \u6700\u7ec8\u7b97\u6cd5 \u00b6 \u6240\u4ee5\u6700\u7ec8\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u5e76\u4e14\u53ea\u8fdb\u884c O(n) O(n) \u6b21\u64cd\u4f5c\u7684\u7b97\u6cd5\u3002 \u4ee5\u4e0b\u662f\u6700\u7ec8\u7684\u6d41\u7a0b\uff1a \u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u4ee5 i = 1 i = 1 \u5230 i = n - 1 i = n - 1 \u7684\u987a\u5e8f\u8ba1\u7b97\u524d\u7f00\u51fd\u6570 \\pi[i] \\pi[i] \u7684\u503c\uff08 \\pi[0] \\pi[0] \u88ab\u8d4b\u503c\u4e3a 0 0 \uff09\u3002 \u4e3a\u4e86\u8ba1\u7b97\u5f53\u524d\u7684\u524d\u7f00\u51fd\u6570\u503c \\pi[i] \\pi[i] \uff0c\u6211\u4eec\u4ee4\u53d8\u91cf j j \u8868\u793a\u53f3\u7aef\u70b9\u4f4d\u4e8e i - 1 i - 1 \u7684\u6700\u597d\u7684\u540e\u7f00\u7684\u957f\u5ea6\u3002\u521d\u59cb\u65f6 j = \\pi[i - 1] j = \\pi[i - 1] \u3002 \u901a\u8fc7\u6bd4\u8f83 s[j] s[j] \u548c s[i] s[i] \u6765\u68c0\u67e5\u957f\u5ea6\u4e3a j + 1 j + 1 \u7684\u540e\u7f00\u662f\u5426\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u524d\u7f00\u3002\u5982\u679c\u4e8c\u8005\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u4eec\u7f6e \\pi[i] = j + 1 \\pi[i] = j + 1 \uff0c\u5426\u5219\u6211\u4eec\u51cf\u5c11 j j \u81f3 \\pi[j - 1] \\pi[j - 1] \u5e76\u4e14\u91cd\u590d\u8be5\u8fc7\u7a0b\u3002 \u5982\u679c j = 0 j = 0 \u5e76\u4e14\u4ecd\u6ca1\u6709\u4efb\u4f55\u4e00\u6b21\u5339\u914d\uff0c\u5219\u7f6e \\pi[i] = 0 \\pi[i] = 0 \u5e76\u79fb\u81f3\u4e0b\u4e00\u4e2a\u4e0b\u6807 i + 1 i + 1 \u3002 \u5b9e\u73b0 \u00b6 \u8be5\u7b97\u6cd5\u7684\u5b9e\u73b0\u51fa\u4eba\u610f\u6599\u7684\u77ed\u4e14\u76f4\u89c2\u3002 1 2 3 4 5 6 7 8 9 10 11 vector < int > prefix_function ( string s ) { int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ) { int j = pi [ i - 1 ]; while ( j > 0 && s [ i ] != s [ j ]) j = pi [ j - 1 ]; if ( s [ i ] == s [ j ]) j ++ ; pi [ i ] = j ; } return pi ; } \u8fd9\u662f\u4e00\u4e2a \u5728\u7ebf \u7b97\u6cd5\uff0c\u5373\u5176\u5f53\u6570\u636e\u5230\u8fbe\u65f6\u5904\u7406\u5b83\u2014\u2014\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4f60\u53ef\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u7b26\u7684\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7acb\u5373\u5904\u7406\u5b83\u4eec\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002\u8be5\u7b97\u6cd5\u4ecd\u7136\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32\u672c\u8eab\u4ee5\u53ca\u5148\u524d\u8ba1\u7b97\u8fc7\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u4f46\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u9884\u5148\u77e5\u9053\u8be5\u5b57\u7b26\u4e32\u524d\u7f00\u51fd\u6570\u7684\u6700\u5927\u53ef\u80fd\u53d6\u503c M M \uff0c\u90a3\u4e48\u6211\u4eec\u4ec5\u9700\u8981\u5b58\u50a8\u8be5\u5b57\u7b26\u4e32\u7684\u524d M + 1 M + 1 \u4e2a\u5b57\u7b26\u4ee5\u53ca\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u5e94\u7528 \u00b6 \u5728\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5b50\u4e32\uff1aKnuth-Morris-Pratt \u7b97\u6cd5 \u00b6 \u8be5\u4efb\u52a1\u662f\u524d\u7f00\u51fd\u6570\u7684\u4e00\u4e2a\u5178\u578b\u5e94\u7528\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c t t \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5c1d\u8bd5\u627e\u5230\u5e76\u5c55\u793a s s \u5728 t t \u4e2d\u7684\u6240\u6709\u51fa\u73b0\uff08occurrence\uff09\u3002 \u4e3a\u4e86\u7b80\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u7528 n n \u8868\u793a\u5b57\u7b26\u4e32 s s \u7684\u957f\u5ea6\uff0c\u7528 m m \u8868\u793a\u6587\u672c t t \u7684\u957f\u5ea6\u3002 \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \uff0c\u5176\u4e2d \\# \\# \u4e3a\u4e00\u4e2a\u65e2\u4e0d\u51fa\u73b0\u5728 s s \u4e2d\u4e5f\u4e0d\u51fa\u73b0\u5728 t t \u4e2d\u7684\u5206\u9694\u7b26\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u51fd\u6570\u3002\u73b0\u5728\u8003\u8651\u8be5\u524d\u7f00\u51fd\u6570\u9664\u53bb\u6700\u5f00\u59cb n + 1 n + 1 \u4e2a\u503c\uff08\u5373\u5c5e\u4e8e\u5b57\u7b26\u4e32 s s \u548c\u5206\u9694\u7b26\u7684\u51fd\u6570\u503c\uff09\u540e\u5176\u4f59\u51fd\u6570\u503c\u7684\u610f\u4e49\u3002\u6839\u636e\u5b9a\u4e49\uff0c \\pi[i] \\pi[i] \u4e3a\u53f3\u7aef\u70b9\u5728 i i \u4e14\u540c\u65f6\u4e3a\u4e00\u4e2a\u524d\u7f00\u7684\u6700\u957f\u771f\u5b50\u4e32\u7684\u957f\u5ea6\uff0c\u5177\u4f53\u5230\u6211\u4eec\u7684\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u503c\u4e3a\u4e0e s s \u7684\u524d\u7f00\u76f8\u540c\u4e14\u53f3\u7aef\u70b9\u4f4d\u4e8e i i \u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002\u7531\u4e8e\u5206\u9694\u7b26\u7684\u5b58\u5728\uff0c\u8be5\u957f\u5ea6\u4e0d\u53ef\u80fd\u8d85\u8fc7 n n \u3002\u800c\u5982\u679c\u7b49\u5f0f \\pi[i] = n \\pi[i] = n \u6210\u7acb\uff0c\u5219\u610f\u5473\u7740 s s \u5b8c\u6574\u51fa\u73b0\u5728\u8be5\u4f4d\u7f6e\uff08\u5373\u5176\u53f3\u7aef\u70b9\u4f4d\u4e8e\u4f4d\u7f6e i i \uff09\u3002\u6ce8\u610f\u8be5\u4f4d\u7f6e\u7684\u4e0b\u6807\u662f\u5bf9\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u800c\u8a00\u7684\u3002 \u56e0\u6b64\u5982\u679c\u5728\u67d0\u4e00\u4f4d\u7f6e i i \u6709 \\pi[i] = n \\pi[i] = n \u6210\u7acb\uff0c\u5219\u5b57\u7b26\u4e32 s s \u5728\u5b57\u7b26\u4e32 t t \u7684 i - (n - 1) - (n + 1) = i - 2n i - (n - 1) - (n + 1) = i - 2n \u5904\u51fa\u73b0\u3002 \u6b63\u5982\u5728\u524d\u7f00\u51fd\u6570\u7684\u8ba1\u7b97\u4e2d\u5df2\u7ecf\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u524d\u7f00\u51fd\u6570\u7684\u503c\u6c38\u8fdc\u4e0d\u8d85\u8fc7\u4e00\u7279\u5b9a\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u9700\u8981\u5b58\u50a8\u6574\u4e2a\u5b57\u7b26\u4e32\u4ee5\u53ca\u6574\u4e2a\u524d\u7f00\u51fd\u6570\uff0c\u800c\u53ea\u9700\u8981\u4e8c\u8005\u5f00\u5934\u7684\u4e00\u90e8\u5206\u3002\u5728\u6211\u4eec\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd9\u610f\u5473\u7740\u53ea\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 s + \\# s + \\# \u4ee5\u53ca\u76f8\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u8bfb\u5165\u5b57\u7b26\u4e32 t t \u7684\u4e00\u4e2a\u5b57\u7b26\u5e76\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u56e0\u6b64 Knuth-Morris-Pratt \u7b97\u6cd5\uff08\u7b80\u79f0 KMP \u7b97\u6cd5\uff09\u7528 O(n + m) O(n + m) \u7684\u65f6\u95f4\u4ee5\u53ca O(n) O(n) \u7684\u5185\u5b58\u89e3\u51b3\u4e86\u8be5\u95ee\u9898\u3002 \u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00\u7684\u51fa\u73b0\u6b21\u6570 \u00b6 \u5728\u8be5\u8282\u6211\u4eec\u5c06\u540c\u65f6\u8ba8\u8bba\u4e24\u4e2a\u95ee\u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5728\u95ee\u9898\u7684\u7b2c\u4e00\u4e2a\u53d8\u79cd\u4e2d\u6211\u4eec\u5e0c\u671b\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00 s[0 \\dots i] s[0 \\dots i] \u5728\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5728\u95ee\u9898\u7684\u7b2c\u4e8c\u4e2a\u53d8\u79cd\u4e2d\u6211\u4eec\u5e0c\u671b\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00 s[0 \\dots i] s[0 \\dots i] \u5728\u53e6\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32 t t \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u9996\u5148\u8ba9\u6211\u4eec\u6765\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\u3002\u8003\u8651\u4f4d\u7f6e i i \u7684\u524d\u7f00\u51fd\u6570\u503c \\pi[i] \\pi[i] \u3002\u6839\u636e\u5b9a\u4e49\uff0c\u5176\u610f\u5473\u7740\u5b57\u7b26\u4e32 s s \u4e00\u4e2a\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u524d\u7f00\u5728\u4f4d\u7f6e i i \u51fa\u73b0\u5e76\u4ee5 i i \u4e3a\u53f3\u7aef\u70b9\uff0c\u540c\u65f6\u4e0d\u5b58\u5728\u4e00\u4e2a\u66f4\u957f\u7684\u524d\u7f00\u6ee1\u8db3\u524d\u8ff0\u5b9a\u4e49\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u66f4\u77ed\u7684\u524d\u7f00\u53ef\u80fd\u4ee5\u8be5\u4f4d\u7f6e\u4e3a\u53f3\u7aef\u70b9\u3002\u5bb9\u6613\u770b\u51fa\uff0c\u6211\u4eec\u9047\u5230\u4e86\u5728\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u65f6\u5df2\u7ecf\u56de\u7b54\u8fc7\u7684\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a j j \u7684\u524d\u7f00\uff0c\u540c\u65f6\u5176\u4e5f\u662f\u4e00\u4e2a\u53f3\u7aef\u70b9\u4f4d\u4e8e i i \u7684\u540e\u7f00\uff0c\u4e0b\u4e00\u4e2a\u66f4\u5c0f\u7684\u524d\u7f00\u957f\u5ea6 k < j k < j \u662f\u591a\u5c11\uff1f\u8be5\u957f\u5ea6\u7684\u524d\u7f00\u9700\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u53f3\u7aef\u70b9\u4e3a i i \u7684\u540e\u7f00\u3002\u56e0\u6b64\u4ee5\u4f4d\u7f6e i i \u4e3a\u53f3\u7aef\u70b9\uff0c\u6709\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u524d\u7f00\uff0c\u6709\u957f\u5ea6\u4e3a \\pi[\\pi[i] - 1] \\pi[\\pi[i] - 1] \u7684\u524d\u7f00\uff0c\u6709\u957f\u5ea6\u4e3a \\pi[\\pi[\\pi[i] - 1] - 1] \\pi[\\pi[\\pi[i] - 1] - 1] \u7684\u524d\u7f00\uff0c\u7b49\u7b49\uff0c\u76f4\u5230\u957f\u5ea6\u53d8\u4e3a 0 0 \u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u8ff0\u65b9\u5f0f\u8ba1\u7b97\u7b54\u6848\u3002 1 2 3 4 vector < int > ans ( n + 1 ); for ( int i = 0 ; i < n ; i ++ ) ans [ pi [ i ]] ++ ; for ( int i = n - 1 ; i > 0 ; i -- ) ans [ pi [ i - 1 ]] += ans [ i ]; for ( int i = 0 ; i <= n ; i ++ ) ans [ i ] ++ ; \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6211\u4eec\u9996\u5148\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00\u51fd\u6570\u503c\u5728\u6570\u7ec4 \\pi \\pi \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u6700\u540e\u7b54\u6848\uff1a\u5982\u679c\u6211\u4eec\u77e5\u9053\u957f\u5ea6\u4e3a i i \u7684\u524d\u7f00\u51fa\u73b0\u4e86\u6070\u597d \\text{ans}[i] \\text{ans}[i] \u6b21\uff0c\u90a3\u4e48\u8be5\u503c\u5fc5\u987b\u88ab\u53e0\u52a0\u81f3\u5176\u6700\u957f\u7684\u65e2\u662f\u540e\u7f00\u4e5f\u662f\u524d\u7f00\u7684\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u4e2d\u3002\u5728\u6700\u540e\uff0c\u4e3a\u4e86\u7edf\u8ba1\u539f\u59cb\u7684\u524d\u7f00\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u7ed3\u679c\u52a0 1 1 \u3002 \u73b0\u5728\u8003\u8651\u7b2c\u4e8c\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u5e94\u7528\u6765\u81ea Knuth-Morris-Pratt \u7684\u6280\u5de7\uff1a\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u5e76\u8ba1\u7b97\u5176\u524d\u7f00\u51fd\u6570\u3002\u4e0e\u7b2c\u4e00\u4e2a\u95ee\u9898\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u4e0e\u5b57\u7b26\u4e32 t t \u76f8\u5173\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u5373 i \\ge n + 1 i \\ge n + 1 \u7684 \\pi[i] \\pi[i] \u3002\u6709\u4e86\u8fd9\u4e9b\u503c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u6837\u5e94\u7528\u5728\u7b2c\u4e00\u4e2a\u95ee\u9898\u4e2d\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u8be5\u95ee\u9898\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5e0c\u671b\u8ba1\u7b97\u5176\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u3002 \u6211\u4eec\u5c06\u8fed\u4ee3\u7684\u89e3\u51b3\u8be5\u95ee\u9898\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u77e5\u9053\u4e86\u5f53\u524d\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8981\u627e\u51fa\u4e00\u79cd\u5728 s s \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u540e\u91cd\u65b0\u8ba1\u7b97\u8be5\u6570\u76ee\u7684\u65b9\u6cd5\u3002 \u4ee4 k k \u4e3a\u5f53\u524d s s \u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u3002\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26 c c \u81f3 s s \u3002\u663e\u7136\uff0c\u4f1a\u6709\u4e00\u4e9b\u65b0\u7684\u5b50\u4e32\u4ee5\u5b57\u7b26 c c \u7ed3\u5c3e\u3002\u6211\u4eec\u5e0c\u671b\u5bf9\u8fd9\u4e9b\u4ee5\u8be5\u5b57\u7b26\u7ed3\u5c3e\u4e14\u6211\u4eec\u4e4b\u524d\u672a\u66fe\u9047\u5230\u7684\u5b50\u4e32\u8ba1\u6570\u3002 \u6784\u9020\u5b57\u7b26\u4e32 t = s + c t = s + c \u5e76\u5c06\u5176\u53cd\u8f6c\u5f97\u5230\u5b57\u7b26\u4e32 t^{\\sim} t^{\\sim} \u3002\u73b0\u5728\u6211\u4eec\u7684\u4efb\u52a1\u53d8\u4e3a\u8ba1\u7b97\u6709\u591a\u5c11 t^{\\sim} t^{\\sim} \u7684\u524d\u7f00\u672a\u5728 t^{\\sim} t^{\\sim} \u7684\u5176\u4f59\u4efb\u4f55\u5730\u65b9\u51fa\u73b0\u3002\u5982\u679c\u6211\u4eec\u8ba1\u7b97\u4e86 t^{\\sim} t^{\\sim} \u7684\u524d\u7f00\u51fd\u6570\u6700\u5927\u503c \\pi_{\\max} \\pi_{\\max} \uff0c\u90a3\u4e48\u6700\u957f\u7684\u51fa\u73b0\u5728 s s \u4e2d\u7684\u524d\u7f00\u5176\u957f\u5ea6\u4e3a \\pi_{\\max} \\pi_{\\max} \u3002\u81ea\u7136\u7684\uff0c\u6240\u6709\u66f4\u77ed\u7684\u524d\u7f00\u4e5f\u51fa\u73b0\u4e86\u3002 \u56e0\u6b64\uff0c\u5f53\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u5b57\u7b26\u540e\u65b0\u51fa\u73b0\u7684\u5b50\u4e32\u6570\u76ee\u4e3a |s| + 1 - \\pi_{\\max} |s| + 1 - \\pi_{\\max} \u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(n) O(n) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u65b0\u5b50\u4e32\u7684\u6570\u76ee\uff0c\u6545\u6700\u7ec8\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u91cd\u65b0\u8ba1\u7b97\u5728\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u4ece\u5c3e\u6216\u8005\u5934\u79fb\u9664\u4e00\u4e2a\u5b57\u7b26\u65f6\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\u3002 \u5b57\u7b26\u4e32\u538b\u7f29 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u5176\u6700\u77ed\u7684 \u201c\u538b\u7f29\u201d \u8868\u793a\uff0c\u4e5f\u5373\u6211\u4eec\u5e0c\u671b\u5bfb\u627e\u4e00\u4e2a\u6700\u77ed\u7684\u5b57\u7b26\u4e32 t t \uff0c\u4f7f\u5f97 s s \u53ef\u4ee5\u88ab t t \u7684\u4e00\u4efd\u6216\u591a\u4efd\u62f7\u8d1d\u7684\u62fc\u63a5\u8868\u793a\u3002 \u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230 t t \u7684\u957f\u5ea6\u5373\u53ef\u3002\u77e5\u9053\u4e86\u8be5\u957f\u5ea6\uff0c\u8be5\u95ee\u9898\u7684\u7b54\u6848\u5373\u4e3a\u957f\u5ea6\u4e3a\u8be5\u503c\u7684 s s \u7684\u524d\u7f00\u3002 \u8ba9\u6211\u4eec\u8ba1\u7b97 s s \u7684\u524d\u7f00\u51fd\u6570\u3002\u901a\u8fc7\u4f7f\u7528\u8be5\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u503c \\pi[n - 1] \\pi[n - 1] \uff0c\u6211\u4eec\u5b9a\u4e49\u503c k = n - \\pi[n - 1] k = n - \\pi[n - 1] \u3002\u6211\u4eec\u5c06\u8bc1\u660e\uff0c\u5982\u679c k k \u6574\u9664 n n \uff0c\u90a3\u4e48 k k \u5c31\u662f\u7b54\u6848\uff0c\u5426\u5219\u4e0d\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7684\u538b\u7f29\uff0c\u6545\u7b54\u6848\u4e3a n n \u3002 \u5047\u5b9a n n \u53ef\u88ab k k \u6574\u9664\u3002\u90a3\u4e48\u5b57\u7b26\u4e32\u53ef\u88ab\u5212\u5206\u4e3a\u957f\u5ea6\u4e3a k k \u7684\u82e5\u5e72\u5757\u3002\u6839\u636e\u524d\u7f00\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a n - k n - k \u7684\u524d\u7f00\u7b49\u4e8e\u5176\u540e\u7f00\u3002\u4f46\u662f\u8fd9\u610f\u5473\u7740\u6700\u540e\u4e00\u4e2a\u5757\u540c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5757\u76f8\u7b49\uff0c\u5e76\u4e14\u5012\u6570\u7b2c\u4e8c\u4e2a\u5757\u540c\u5012\u6570\u7b2c\u4e09\u4e2a\u5757\u76f8\u7b49\uff0c\u7b49\u7b49\u3002\u4f5c\u4e3a\u5176\u7ed3\u679c\uff0c\u6240\u6709\u5757\u90fd\u662f\u76f8\u7b49\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32 s s \u538b\u7f29\u81f3\u957f\u5ea6 k k \u3002 \u8bda\u7136\uff0c\u6211\u4eec\u4ecd\u9700\u8bc1\u660e\u8be5\u503c\u4e3a\u6700\u4f18\u89e3\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u6bd4 k k \u66f4\u5c0f\u7684\u538b\u7f29\u8868\u793a\uff0c\u90a3\u4e48\u524d\u7f00\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u503c \\pi[n - 1] \\pi[n - 1] \u5fc5\u5b9a\u6bd4 n - k n - k \u8981\u5927\u3002\u56e0\u6b64 k k \u5c31\u662f\u7b54\u6848\u3002 \u73b0\u5728\u5047\u8bbe n n \u4e0d\u53ef\u4ee5\u88ab k k \u6574\u9664\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\u8fd9\u610f\u5473\u7740\u7b54\u6848\u4e3a n n 1 \u3002\u5047\u8bbe\u5176\u6700\u5c0f\u538b\u7f29\u8868\u793a r r \u7684\u957f\u5ea6\u4e3a p p \uff08 p p \u6574\u9664 n n \uff09\uff0c\u5b57\u7b26\u4e32 s s \u88ab\u5212\u5206\u4e3a n / p \\ge 2 n / p \\ge 2 \u5757\u3002\u90a3\u4e48\u524d\u7f00\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u503c \\pi[n - 1] \\pi[n - 1] \u5fc5\u5b9a\u5927\u4e8e n - p n - p \uff08\u5982\u679c\u7b49\u4e8e\u5219 n n \u53ef\u88ab k k \u6574\u9664\uff09\uff0c\u4e5f\u5373\u5176\u6240\u8868\u793a\u7684\u540e\u7f00\u5c06\u90e8\u5206\u7684\u8986\u76d6\u7b2c\u4e00\u4e2a\u5757\u3002\u73b0\u5728\u8003\u8651\u5b57\u7b26\u4e32\u7684\u7b2c\u4e8c\u4e2a\u5757\u3002\u8be5\u5757\u6709\u4e24\u79cd\u89e3\u91ca\uff1a\u7b2c\u4e00\u79cd\u4e3a r_0 r_1 \\dots r_{p - 1} r_0 r_1 \\dots r_{p - 1} \uff0c\u53e6\u4e00\u79cd\u4e3a r_{p - k} r_{p - k + 1} \\dots r_{p - 1} r_0 r_1 \\dots r_{p - k - 1} r_{p - k} r_{p - k + 1} \\dots r_{p - 1} r_0 r_1 \\dots r_{p - k - 1} \u3002\u7531\u4e8e\u4e24\u79cd\u89e3\u91ca\u5bf9\u5e94\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u53ef\u5f97\u5230 p p \u4e2a\u65b9\u7a0b\u7ec4\u6210\u7684\u65b9\u7a0b\u7ec4\uff0c\u8be5\u65b9\u7a0b\u7ec4\u53ef\u7b80\u5199\u4e3a r_{(i + k) \\bmod p} = r_{i \\bmod p} r_{(i + k) \\bmod p} = r_{i \\bmod p} \uff0c\u5176\u4e2d \\cdot \\bmod p \\cdot \\bmod p \u8868\u793a\u6a21 p p \u610f\u4e49\u4e0b\u7684\u6700\u5c0f\u975e\u8d1f\u5269\u4f59\u3002 \\begin{gathered} \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 r_5}^p \\\\ r_0 ~ r_1 ~ r_2 ~ r_3 ~ \\underbrace{\\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ r_0 ~ r_1}_{\\pi[11] = 8} \\end{gathered} \\begin{gathered} \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 r_5}^p \\\\ r_0 ~ r_1 ~ r_2 ~ r_3 ~ \\underbrace{\\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ r_0 ~ r_1}_{\\pi[11] = 8} \\end{gathered} \u6839\u636e\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4 x x \u548c y y \u4f7f\u5f97 xk + yp = \\gcd(k, p) xk + yp = \\gcd(k, p) \u3002\u901a\u8fc7\u4e0e\u7b49\u5f0f pk - kp = 0 pk - kp = 0 \u9002\u5f53\u53e0\u52a0\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4 x' > 0 x' > 0 \u548c y' < 0 y' < 0 \u4f7f\u5f97 x'k + y'p = \\gcd(k, p) x'k + y'p = \\gcd(k, p) \u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u4e0d\u65ad\u5e94\u7528\u524d\u8ff0\u65b9\u7a0b\u7ec4\u4e2d\u7684\u65b9\u7a0b\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u65b9\u7a0b\u7ec4 r_{(i + \\gcd(k, p)) \\bmod p} = r_{i \\bmod p} r_{(i + \\gcd(k, p)) \\bmod p} = r_{i \\bmod p} \u3002 \u7531\u4e8e \\gcd(k, p) \\gcd(k, p) \u6574\u9664 p p \uff0c\u8fd9\u610f\u5473\u7740 \\gcd(k, p) \\gcd(k, p) \u662f r r \u7684\u4e00\u4e2a\u5468\u671f\u3002\u53c8\u56e0\u4e3a \\pi[n - 1] > n - p \\pi[n - 1] > n - p \uff0c\u6545\u6709 n - \\pi[n - 1] = k < p n - \\pi[n - 1] = k < p \uff0c\u6240\u4ee5 \\gcd(k, p) \\gcd(k, p) \u662f\u4e00\u4e2a\u6bd4 p p \u66f4\u5c0f\u7684 r r \u7684\u5468\u671f\u3002\u56e0\u6b64\u5b57\u7b26\u4e32 s s \u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a \\gcd(k, p) < p \\gcd(k, p) < p \u7684\u538b\u7f29\u8868\u793a\uff0c\u540c p p \u7684\u6700\u5c0f\u6027\u77db\u76fe\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u5c0f\u4e8e n n \u7684\u538b\u7f29\u8868\u793a\uff0c\u56e0\u6b64\u7b54\u6848\u4e3a n n \u3002 \u6839\u636e\u524d\u7f00\u51fd\u6570\u6784\u5efa\u4e00\u4e2a\u81ea\u52a8\u673a \u00b6 \u8ba9\u6211\u4eec\u91cd\u65b0\u56de\u5230\u901a\u8fc7\u4e00\u4e2a\u5206\u9694\u7b26\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b0\u5b57\u7b26\u4e32\u3002\u5bf9\u4e8e\u5b57\u7b26\u4e32 s s \u548c t t \u6211\u4eec\u8ba1\u7b97 s + \\# + t s + \\# + t \u7684\u524d\u7f00\u51fd\u6570\u3002\u663e\u7136\uff0c\u56e0\u4e3a \\# \\# \u662f\u4e00\u4e2a\u5206\u9694\u7b26\uff0c\u524d\u7f00\u51fd\u6570\u503c\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7 |s| |s| \u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 s + \\# s + \\# \u548c\u5176\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u52a8\u6001\u8ba1\u7b97\u5bf9\u4e8e\u4e4b\u540e\u6240\u6709\u5b57\u7b26\u7684\u524d\u7f00\u51fd\u6570\u503c\uff1a \\underbrace{s_0 ~ s_1 ~ \\dots ~ s_{n-1} ~ \\#}_{\\text{need to store}} ~ \\underbrace{t_0 ~ t_1 ~ \\dots ~ t_{m-1}}_{\\text{do not need to store}} \\underbrace{s_0 ~ s_1 ~ \\dots ~ s_{n-1} ~ \\#}_{\\text{need to store}} ~ \\underbrace{t_0 ~ t_1 ~ \\dots ~ t_{m-1}}_{\\text{do not need to store}} \u5b9e\u9645\u4e0a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u77e5\u9053 t t \u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26 c c \u4ee5\u53ca\u4e4b\u524d\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\u4fbf\u8db3\u4ee5\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u800c\u4e0d\u9700\u8981\u7528\u5230\u4efb\u4f55\u5176\u5b83 t t \u7684\u5b57\u7b26\u548c\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a \u81ea\u52a8\u673a \uff08\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff09\uff1a\u5176\u72b6\u6001\u4e3a\u5f53\u524d\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u800c\u4ece\u4e00\u4e2a\u72b6\u6001\u5230\u53e6\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\u5219\u7531\u4e0b\u4e00\u4e2a\u5b57\u7b26\u786e\u5b9a\u3002 \u56e0\u6b64\uff0c\u5373\u4f7f\u6ca1\u6709\u5b57\u7b26\u4e32 t t \uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5e94\u7528\u6784\u9020\u8f6c\u79fb\u8868\u7684\u7b97\u6cd5\u6784\u9020\u4e00\u4e2a\u8f6c\u79fb\u8868 ( \\text { old } \\pi , c ) \\rightarrow \\text { new } _ { - } \\pi ( \\text { old } \\pi , c ) \\rightarrow \\text { new } _ { - } \\pi \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void compute_automaton ( string s , vector < vector < int >>& aut ) { s += '#' ; int n = s . size (); vector < int > pi = prefix_function ( s ); aut . assign ( n , vector < int > ( 26 )); for ( int i = 0 ; i < n ; i ++ ) { for ( int c = 0 ; c < 26 ; c ++ ) { int j = i ; while ( j > 0 && 'a' + c != s [ j ]) j = pi [ j - 1 ]; if ( 'a' + c == s [ j ]) j ++ ; aut [ i ][ c ] = j ; } } } \u7136\u800c\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\uff0c\u5bf9\u4e8e\u5c0f\u5199\u5b57\u6bcd\u8868\uff0c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2 26) O(n^2 26) \u3002\u6ce8\u610f\u5230\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6765\u5229\u7528\u8868\u4e2d\u5df2\u8ba1\u7b97\u8fc7\u7684\u90e8\u5206\u3002\u53ea\u8981\u6211\u4eec\u4ece\u503c j j \u53d8\u5316\u5230 \\pi[j - 1] \\pi[j - 1] \uff0c\u90a3\u4e48\u6211\u4eec\u5b9e\u9645\u4e0a\u5728\u8bf4\u8f6c\u79fb (j, c) (j, c) \u6240\u5230\u8fbe\u7684\u72b6\u6001\u540c\u8f6c\u79fb (\\pi[j - 1], c) (\\pi[j - 1], c) \u4e00\u6837\uff0c\u4f46\u8be5\u7b54\u6848\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u7cbe\u786e\u8ba1\u7b97\u8fc7\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void compute_automaton ( string s , vector < vector < int >>& aut ) { s += '#' ; int n = s . size (); vector < int > pi = prefix_function ( s ); aut . assign ( n , vector < int > ( 26 )); for ( int i = 0 ; i < n ; i ++ ) { for ( int c = 0 ; c < 26 ; c ++ ) { if ( i > 0 && 'a' + c != s [ i ]) aut [ i ][ c ] = aut [ pi [ i - 1 ]][ c ]; else aut [ i ][ c ] = i + ( 'a' + c == s [ i ]); } } } \u6700\u7ec8\u6211\u4eec\u53ef\u5728 O(n 26) O(n 26) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6784\u9020\u8be5\u81ea\u52a8\u673a\u3002 \u8be5\u81ea\u52a8\u673a\u5728\u4ec0\u4e48\u65f6\u5019\u6709\u7528\u5462\uff1f\u9996\u5148\uff0c\u8bb0\u5f97\u5927\u90e8\u5206\u65f6\u5019\u6211\u4eec\u4e3a\u4e86\u4e00\u4e2a\u76ee\u7684\u4f7f\u7528\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u7684\u524d\u7f00\u51fd\u6570\uff1a\u5bfb\u627e\u5b57\u7b26\u4e32 s s \u5728\u5b57\u7b26\u4e32 t t \u4e2d\u7684\u6240\u6709\u51fa\u73b0\u3002 \u56e0\u6b64\u4f7f\u7528\u8be5\u81ea\u52a8\u673a\u7684\u6700\u76f4\u63a5\u7684\u597d\u5904\u662f \u52a0\u901f\u8ba1\u7b97\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u7684\u524d\u7f00\u51fd\u6570 \u3002 \u901a\u8fc7\u6784\u5efa s + \\# s + \\# \u7684\u81ea\u52a8\u673a\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 s s \u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002\u6240\u6709\u8f6c\u79fb\u5df2\u7ecf\u5728\u8868\u4e2d\u8ba1\u7b97\u8fc7\u4e86\u3002 \u4f46\u9664\u6b64\u4ee5\u5916\uff0c\u8fd8\u6709\u7b2c\u4e8c\u4e2a\u4e0d\u90a3\u4e48\u76f4\u63a5\u7684\u5e94\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32 t t \u662f \u67d0\u4e9b\u901a\u8fc7\u4e00\u4e9b\u89c4\u5219\u6784\u9020\u7684\u5de8\u578b\u5b57\u7b26\u4e32 \u65f6\uff0c\u4f7f\u7528\u8be5\u81ea\u52a8\u673a\u52a0\u901f\u8ba1\u7b97\u3002Gray \u5b57\u7b26\u4e32\uff0c\u6216\u8005\u4e00\u4e2a\u7531\u4e00\u4e9b\u77ed\u7684\u8f93\u5165\u4e32\u7684\u9012\u5f52\u7ec4\u5408\u6240\u6784\u9020\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u8fd9\u79cd\u4f8b\u5b50\u3002 \u51fa\u4e8e\u5b8c\u6574\u6027\u8003\u8651\uff0c\u6211\u4eec\u6765\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6570 k \\le 10^5 k \\le 10^5 \uff0c\u4ee5\u53ca\u4e00\u4e2a\u957f\u5ea6 \\le 10^5 \\le 10^5 \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97 s s \u5728\u7b2c k k \u4e2a Gray \u5b57\u7b26\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u56de\u60f3\u8d77 Gray \u5b57\u7b26\u4e32\u4ee5\u4e0b\u8ff0\u65b9\u5f0f\u5b9a\u4e49\uff1a \\begin{aligned} g_1 &= \\mathtt{a}\\\\ g_2 &= \\mathtt{aba}\\\\ g_3 &= \\mathtt{abacaba}\\\\ g_4 &= \\mathtt{abacabadabacaba} \\end{aligned} \\begin{aligned} g_1 &= \\mathtt{a}\\\\ g_2 &= \\mathtt{aba}\\\\ g_3 &= \\mathtt{abacaba}\\\\ g_4 &= \\mathtt{abacabadabacaba} \\end{aligned} \u7531\u4e8e\u5176\u5929\u6587\u6570\u5b57\u822c\u7684\u957f\u5ea6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5373\u4f7f\u6784\u9020\u5b57\u7b26\u4e32 t t \u90fd\u662f\u4e0d\u53ef\u80fd\u7684\uff1a\u7b2c k k \u4e2a Gray \u5b57\u7b26\u4e32\u6709 2^k - 1 2^k - 1 \u4e2a\u5b57\u7b26\u3002\u7136\u800c\u6211\u4eec\u53ef\u4ee5\u5728\u4ec5\u4ec5\u77e5\u9053\u5f00\u5934\u82e5\u5e72\u524d\u7f00\u51fd\u6570\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u6548\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u9664\u4e86\u81ea\u52a8\u673a\u4e4b\u5916\uff0c\u6211\u4eec\u540c\u65f6\u9700\u8981\u8ba1\u7b97\u503c G[i][j] G[i][j] \uff1a\u5728\u4ece\u72b6\u6001 j j \u5f00\u59cb\u5904\u7406 g_i g_i \u540e\u7684\u81ea\u52a8\u673a\u7684\u72b6\u6001\uff0c\u4ee5\u53ca\u503c K[i][j] K[i][j] \uff1a\u5f53\u4ece\u72b6\u6001 j j \u5f00\u59cb\u5904\u7406 g_i g_i \u540e\uff0c s s \u5728 g_i g_i \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5b9e\u9645\u4e0a K[i][j] K[i][j] \u4e3a\u5728\u6267\u884c\u64cd\u4f5c\u65f6\u524d\u7f00\u51fd\u6570\u53d6\u503c\u4e3a |s| |s| \u7684\u6b21\u6570\u3002\u6613\u5f97\u95ee\u9898\u7684\u7b54\u6848\u4e3a K[k][0] K[k][0] \u3002 \u6211\u4eec\u8be5\u5982\u4f55\u8ba1\u7b97\u8fd9\u4e9b\u503c\u5462\uff1f\u9996\u5148\u6839\u636e\u5b9a\u4e49\uff0c\u521d\u59cb\u6761\u4ef6\u4e3a G[0][j] = j G[0][j] = j \u4ee5\u53ca K[0][j] = 0 K[0][j] = 0 \u3002\u4e4b\u540e\u6240\u6709\u503c\u53ef\u4ee5\u901a\u8fc7\u5148\u524d\u7684\u503c\u4ee5\u53ca\u4f7f\u7528\u81ea\u52a8\u673a\u8ba1\u7b97\u5f97\u5230\u3002\u4e3a\u4e86\u5bf9\u67d0\u4e2a i i \u8ba1\u7b97\u76f8\u5e94\u503c\uff0c\u56de\u60f3\u8d77\u5b57\u7b26\u4e32 g_i g_i \u7531 g_{i - 1} g_{i - 1} \uff0c\u5b57\u6bcd\u8868\u4e2d\u7b2c i i \u4e2a\u5b57\u7b26\uff0c\u4ee5\u53ca g_{i - 1} g_{i - 1} \u4e09\u8005\u62fc\u63a5\u800c\u6210\u3002\u56e0\u6b64\u81ea\u52a8\u673a\u4f1a\u9014\u5f84\u4e0b\u5217\u72b6\u6001\uff1a \\begin{gathered} \\text{mid} = \\text{aut}[G[i - 1][j]][i] \\\\ G[i][j] = G[i - 1][\\text{mid}] \\end{gathered} \\begin{gathered} \\text{mid} = \\text{aut}[G[i - 1][j]][i] \\\\ G[i][j] = G[i - 1][\\text{mid}] \\end{gathered} K[i][j] K[i][j] \u7684\u503c\u540c\u6837\u53ef\u88ab\u7b80\u5355\u8ba1\u7b97\u3002 K[i][j] = K[i - 1][j] + [\\text{mid} == |s|] + K[i - 1][\\text{mid}] K[i][j] = K[i - 1][j] + [\\text{mid} == |s|] + K[i - 1][\\text{mid}] \u5176\u4e2d [\\cdot] [\\cdot] \u5f53\u5176\u4e2d\u8868\u8fbe\u5f0f\u53d6\u503c\u4e3a\u771f\u65f6\u503c\u4e3a 1 1 \uff0c\u5426\u5219\u4e3a 0 0 \u3002\u7efc\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u89e3\u51b3\u5173\u4e8e Gray \u5b57\u7b26\u4e32\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u4e00\u5927\u7c7b\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5e94\u7528\u540c\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u4e0b\u5217\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \u4ee5\u53ca\u4e00\u4e9b\u6a21\u5f0f t_i t_i \uff0c\u5176\u4e2d\u6bcf\u4e2a\u6a21\u5f0f\u4ee5\u4e0b\u5217\u65b9\u5f0f\u7ed9\u51fa\uff1a\u8be5\u6a21\u5f0f\u7531\u666e\u901a\u5b57\u7b26\u7ec4\u6210\uff0c\u5f53\u4e2d\u53ef\u80fd\u4ee5 t_{k}^{\\text{cnt}} t_{k}^{\\text{cnt}} \u7684\u5f62\u5f0f\u9012\u5f52\u63d2\u5165\u5148\u524d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5373\u5728\u8be5\u4f4d\u7f6e\u6211\u4eec\u5fc5\u987b\u63d2\u5165\u5b57\u7b26\u4e32 t_k t_k \\text{cnt} \\text{cnt} \u6b21\u3002\u4ee5\u4e0b\u662f\u8fd9\u4e9b\u6a21\u5f0f\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a \\begin{aligned} t_1 &= \\mathtt{abdeca} \\\\ t_2 &= \\mathtt{abc} + t_1^{30} + \\mathtt{abd} \\\\ t_3 &= t_2^{50} + t_1^{100} \\\\ t_4 &= t_2^{10} + t_3^{100} \\end{aligned} \\begin{aligned} t_1 &= \\mathtt{abdeca} \\\\ t_2 &= \\mathtt{abc} + t_1^{30} + \\mathtt{abd} \\\\ t_3 &= t_2^{50} + t_1^{100} \\\\ t_4 &= t_2^{10} + t_3^{100} \\end{aligned} \u9012\u5f52\u4ee3\u5165\u4f1a\u4f7f\u5b57\u7b26\u4e32\u957f\u5ea6\u7206\u70b8\u5f0f\u589e\u957f\uff0c\u4ed6\u4eec\u7684\u957f\u5ea6\u751a\u81f3\u53ef\u4ee5\u8fbe\u5230 100^{100} 100^{100} \u7684\u6570\u91cf\u7ea7\u3002\u800c\u6211\u4eec\u5fc5\u987b\u627e\u5230\u5b57\u7b26\u4e32 s s \u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u8be5\u95ee\u9898\u540c\u6837\u53ef\u901a\u8fc7\u6784\u9020\u524d\u7f00\u51fd\u6570\u7684\u81ea\u52a8\u673a\u89e3\u51b3\u3002\u540c\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u5229\u7528\u5148\u524d\u8ba1\u7b97\u8fc7\u7684\u7ed3\u679c\u5bf9\u6bcf\u4e2a\u6a21\u5f0f\u8ba1\u7b97\u5176\u8f6c\u79fb\u7136\u540e\u76f8\u5e94\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002 \u7ec3\u4e60\u9898\u76ee \u00b6 UVA # 455 \"Periodic Strings\" UVA # 11022 \"String Factoring\" UVA # 11452 \"Dancing the Cheeky-Cheeky\" UVA 12604 - Caesar Cipher UVA 12467 - Secret Word UVA 11019 - Matrix Matcher SPOJ - Pattern Find Codeforces - Anthem of Berland Codeforces - MUH and Cube Walls \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 \u041f\u0440\u0435\u0444\u0438\u043a\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u041a\u043d\u0443\u0442\u0430-\u041c\u043e\u0440\u0440\u0438\u0441\u0430-\u041f\u0440\u0430\u0442\u0442\u0430 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Prefix function. Knuth\u2013Morris\u2013Pratt algorithm \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002 \u5728\u4fc4\u6587\u7248\u53ca\u82f1\u6587\u7248\u4e2d\u8be5\u90e8\u5206\u8bc1\u660e\u5747\u7591\u4f3c\u6709\u8bef\u3002\u672c\u6587\u7ae0\u4e2d\u7684\u8be5\u90e8\u5206\u8bc1\u660e\u7531\u4f5c\u8005\u81ea\u884c\u6dfb\u52a0\u3002 \u21a9","title":"\u524d\u7f00\u51fd\u6570\u4e0e KMP \u7b97\u6cd5"},{"location":"string/prefix-function/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5176 \u524d\u7f00\u51fd\u6570 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4 \\pi \\pi \u3002\u5176\u4e2d \\pi[i] \\pi[i] \u4e3a\u65e2\u662f\u5b50\u4e32 s[0\\dots i] s[0\\dots i] \u7684\u524d\u7f00\u540c\u65f6\u4e5f\u662f\u8be5\u5b50\u4e32\u7684\u540e\u7f00\u7684\u6700\u957f\u771f\u524d\u7f00\uff08proper prefix\uff09\u957f\u5ea6\u3002\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u771f\u524d\u7f00\u662f\u5176\u524d\u7f00\u4f46\u4e0d\u7b49\u4e8e\u8be5\u5b57\u7b26\u4e32\u81ea\u8eab\u3002\u6839\u636e\u5b9a\u4e49\uff0c \\pi[0] = 0 \\pi[0] = 0 \u3002 \u524d\u7f00\u51fd\u6570\u7684\u5b9a\u4e49\u53ef\u7528\u6570\u5b66\u8bed\u8a00\u63cf\u8ff0\u5982\u4e0b\uff1a \\pi[i] = \\max_{k = 0 \\dots i}\\{k: s[0 \\dots k - 1] = s[i - (k - 1) \\dots i]\\} \\pi[i] = \\max_{k = 0 \\dots i}\\{k: s[0 \\dots k - 1] = s[i - (k - 1) \\dots i]\\} \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5b57\u7b26\u4e32 abcabcd \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0, 0, 0, 1, 2, 3, 0] [0, 0, 0, 1, 2, 3, 0] \uff0c\u5b57\u7b26\u4e32 aabaaab \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0, 1, 0, 1, 2, 2, 3] [0, 1, 0, 1, 2, 2, 3] \u3002","title":"\u524d\u7f00\u51fd\u6570\u5b9a\u4e49"},{"location":"string/prefix-function/#_2","text":"\u4e00\u4e2a\u76f4\u63a5\u6309\u7167\u5b9a\u4e49\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u7b97\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 vector < int > prefix_function ( string s ) { int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 0 ; i < n ; i ++ ) for ( int k = 0 ; k <= i ; k ++ ) if ( s . substr ( 0 , k ) == s . substr ( i - k + 1 , k )) pi [ i ] = k ; return pi ; } \u663e\u89c1\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3) \uff0c\u5177\u6709\u5f88\u5927\u7684\u6539\u8fdb\u7a7a\u95f4\u3002","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"string/prefix-function/#_3","text":"\u8be5\u7b97\u6cd5\u7531 Knuth \u548c Pratt \u5728 1977 \u5e74\u63d0\u51fa\uff0c\u540c\u5e74 Morris \u4e5f\u72ec\u7acb\u7684\u63d0\u51fa\u8be5\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u88ab\u7528\u4f5c\u4e00\u4e2a\u5b50\u4e32\u641c\u7d22\u7b97\u6cd5\u7684\u6838\u5fc3\u51fd\u6570\u3002","title":"\u9ad8\u6548\u7b97\u6cd5"},{"location":"string/prefix-function/#_4","text":"\u7b2c\u4e00\u4e2a\u91cd\u8981\u7684\u89c2\u5bdf\u662f\u76f8\u90bb\u7684\u524d\u7f00\u51fd\u6570\u503c\u81f3\u591a\u589e\u52a0 1 1 \u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u4e0d\u7136\uff0c\u5373 \\pi[i + 1] > \\pi[i] + 1 \\pi[i + 1] > \\pi[i] + 1 \uff0c\u8003\u5bdf\u957f\u5ea6\u4e3a \\pi[i + 1] \\pi[i + 1] \u7684 s[0 \\dots i + 1] s[0 \\dots i + 1] \u7684\u540e\u7f00\u53ef\u5f15\u51fa\u77db\u76fe\u3002\u8be5\u540e\u7f00\u53bb\u6389\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a \\pi[i + 1] - 1 \\pi[i + 1] - 1 \u7684 s[0 \\dots i] s[0 \\dots i] \u7684\u540e\u7f00\u3002\u8be5\u540e\u7f00\u6bd4 \\pi[i] \\pi[i] \u63cf\u8ff0\u7684\u540e\u7f00\u66f4\u4f18\uff0c\u540c\u5176\u5b9a\u4e49\u77db\u76fe\u3002 \u4e0b\u8ff0\u56fe\u4f8b\u5c55\u793a\u4e86\u8fd9\u4e2a\u77db\u76fe\u3002\u5047\u5b9a\u4f4d\u4e8e\u4f4d\u7f6e i i \u548c i + 1 i + 1 \u7684\u65e2\u662f\u540e\u7f00\u540c\u65f6\u4e5f\u662f\u524d\u7f00\u7684\u6700\u957f\u771f\u540e\u7f00\u7684\u957f\u5ea6\u5206\u522b\u4e3a 2 2 \u548c 4 4 \u3002\u5219\u5b57\u7b26\u4e32 s_0 s_1 s_2 s_3 s_0 s_1 s_2 s_3 \u4e0e\u5b57\u7b26\u4e32 s_{i - 2} s_{i - 1} s_i s_{i + 1} s_{i - 2} s_{i - 1} s_i s_{i + 1} \u76f8\u540c\uff0c\u8fd9\u610f\u5473\u7740 s_0 s_1 s_2 s_0 s_1 s_2 \u4e0e\u5b57\u7b26\u4e32 s_{i - 2} s_{i - 1} s_i s_{i - 2} s_{i - 1} s_i \u76f8\u540c\uff0c\u56e0\u6b64 \\pi[i] \\pi[i] \u81f3\u5c11\u4e3a 3 3 \u3002 \\underbrace{\\overbrace{s_0 ~ s_1}^{\\pi[i] = 2} ~ s_2 ~ s_3}_{\\pi[i+1] = 4} ~ \\dots ~ \\underbrace{s_{i-2} ~ \\overbrace{s_{i-1} ~ s_{i}}^{\\pi[i] = 2} ~ s_{i+1}}_{\\pi[i+1] = 4} \\underbrace{\\overbrace{s_0 ~ s_1}^{\\pi[i] = 2} ~ s_2 ~ s_3}_{\\pi[i+1] = 4} ~ \\dots ~ \\underbrace{s_{i-2} ~ \\overbrace{s_{i-1} ~ s_{i}}^{\\pi[i] = 2} ~ s_{i+1}}_{\\pi[i+1] = 4} \u6240\u4ee5\u5f53\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u524d\u7f00\u51fd\u6570\u7684\u503c\u8981\u4e48\u589e\u52a0\u4e00\uff0c\u8981\u4e48\u7ef4\u6301\u4e0d\u53d8\uff0c\u8981\u4e48\u51cf\u5c11\u3002\u5b9e\u9645\u4e0a\uff0c\u8be5\u4e8b\u5b9e\u5df2\u7ecf\u5141\u8bb8\u6211\u4eec\u5c06\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u5c11\u81f3 O(n^2) O(n^2) \u3002\u56e0\u4e3a\u6bcf\u6b65\u4e2d\u524d\u7f00\u51fd\u6570\u81f3\u591a\u589e\u52a0 1 1 \uff0c\u56e0\u6b64\u5728\u603b\u7684\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u524d\u7f00\u51fd\u6570\u81f3\u591a\u589e\u52a0 n n \uff0c\u540c\u65f6\u4e5f\u81f3\u591a\u51cf\u5c0f n n \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ec5\u9700\u8981\u8fdb\u884c O(n) O(n) \u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002","title":"\u7b2c\u4e00\u4e2a\u4f18\u5316"},{"location":"string/prefix-function/#_5","text":"\u8ba9\u6211\u4eec\u8d70\u7684\u66f4\u8fdc\u4e00\u70b9\uff1a\u5c1d\u8bd5\u6446\u8131\u6389\u5b57\u7b26\u4e32\u6bd4\u8f83\u3002\u4e3a\u4e86\u8fbe\u6210\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u7528\u5230\u5148\u524d\u8ba1\u7b97\u7684\u6240\u6709\u4fe1\u606f\u3002 \u73b0\u5728\u8003\u8651\u8ba1\u7b97\u4f4d\u7f6e i + 1 i + 1 \u7684\u524d\u7f00\u51fd\u6570 \\pi \\pi \u7684\u503c\u3002\u5982\u679c s[i + 1] = s[\\pi[i]] s[i + 1] = s[\\pi[i]] \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u65ad\u8a00 \\pi[i + 1] = \\pi[i] + 1 \\pi[i + 1] = \\pi[i] + 1 \uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4f4d\u4e8e\u4f4d\u7f6e i i \u7684\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u540e\u7f00\u540c\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u524d\u7f00\u76f8\u7b49\u3002\u53c2\u7167\u4e0b\u8ff0\u56fe\u4f8b\uff1a \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]} ~ \\overbrace{s_3}^{s_3 = s_{i+1}}}_{\\pi[i+1] = \\pi[i] + 1} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_{i}}^{\\pi[i]} ~ \\overbrace{s_{i+1}}^{s_3 = s_i + 1}}_{\\pi[i+1] = \\pi[i] + 1} \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]} ~ \\overbrace{s_3}^{s_3 = s_{i+1}}}_{\\pi[i+1] = \\pi[i] + 1} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_{i}}^{\\pi[i]} ~ \\overbrace{s_{i+1}}^{s_3 = s_i + 1}}_{\\pi[i+1] = \\pi[i] + 1} \u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5373 s[i + 1] \\neq s[\\pi[i]] s[i + 1] \\neq s[\\pi[i]] \uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5c1d\u8bd5\u66f4\u77ed\u7684\u5b57\u7b26\u4e32\u3002\u4e3a\u4e86\u52a0\u901f\uff0c\u6211\u4eec\u5e0c\u671b\u76f4\u63a5\u79fb\u52a8\u5230\u6700\u957f\u7684\u957f\u5ea6 j < \\pi[i] j < \\pi[i] \uff0c\u4f7f\u5f97\u5728\u4f4d\u7f6e i i \u7684\u524d\u7f00\u6027\u8d28\u4ecd\u5f97\u4ee5\u4fdd\u6301\uff0c\u4e5f\u5373 s[0 \\dots j - 1] = s[i - j + 1 \\dots i] s[0 \\dots j - 1] = s[i - j + 1 \\dots i] \uff1a \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u8fd9\u6837\u7684\u957f\u5ea6 j j \uff0c\u90a3\u4e48\u6211\u4eec\u4ec5\u9700\u8981\u518d\u6b21\u6bd4\u8f83 s[i + 1] s[i + 1] \u548c s[j] s[j] \u3002\u5982\u679c\u4ed6\u4eec\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u4eec\u7f6e \\pi[i + 1] = j + 1 \\pi[i + 1] = j + 1 \u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5c0f\u4e8e j j \u7684\u6700\u5927\u503c\u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u5f97\u4ee5\u4fdd\u6301\uff0c\u5982\u6b64\u53cd\u590d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u6301\u7eed\uff0c\u76f4\u5230 j = 0 j = 0 \u3002\u5982\u679c s[i + 1] = s[0] s[i + 1] = s[0] \uff0c\u90a3\u4e48\u6211\u4eec\u7f6e \\pi[i + 1] = 1 \\pi[i + 1] = 1 \uff0c\u5426\u5219 \\pi[i + 1] = 0 \\pi[i + 1] = 0 \u3002 \u6240\u4ee5\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u7684\u4e00\u4e2a\u5927\u6982\u96cf\u5f62\u3002\u73b0\u5728\u4ec5\u5269\u7684\u95ee\u9898\u662f\u5bf9\u4e8e j j \uff0c\u5982\u4f55\u5feb\u901f\u627e\u5230\u8fd9\u6837\u7684\u957f\u5ea6\u3002\u8ba9\u6211\u4eec\u91cd\u65b0\u53d9\u8ff0\u4e00\u904d\uff1a\u5bf9\u4e8e\u5f53\u524d\u5728\u4f4d\u7f6e i i \u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u5f97\u4ee5\u4fdd\u6301\u7684\u957f\u5ea6 j j \uff0c\u4e5f\u5373 s[0 \\dots j - 1] = s[i - j + 1 \\dots i] s[0 \\dots j - 1] = s[i - j + 1 \\dots i] \uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u6700\u5927\u7684 k < j k < j \uff0c\u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u4ecd\u5f97\u4ee5\u4fdd\u6301\u3002 \\overbrace{\\underbrace{s_0 ~ s_1}_k ~ s_2 ~ s_3}^j ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_k}^j ~s_{i+1} \\overbrace{\\underbrace{s_0 ~ s_1}_k ~ s_2 ~ s_3}^j ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_k}^j ~s_{i+1} \u4e0a\u56fe\u663e\u793a\u51fa k k \u5fc5\u5b9a\u4e3a \\pi[j - 1] \\pi[j - 1] \uff0c\u800c\u8be5\u503c\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\u3002","title":"\u7b2c\u4e8c\u4e2a\u4f18\u5316"},{"location":"string/prefix-function/#_6","text":"\u6240\u4ee5\u6700\u7ec8\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u5e76\u4e14\u53ea\u8fdb\u884c O(n) O(n) \u6b21\u64cd\u4f5c\u7684\u7b97\u6cd5\u3002 \u4ee5\u4e0b\u662f\u6700\u7ec8\u7684\u6d41\u7a0b\uff1a \u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u4ee5 i = 1 i = 1 \u5230 i = n - 1 i = n - 1 \u7684\u987a\u5e8f\u8ba1\u7b97\u524d\u7f00\u51fd\u6570 \\pi[i] \\pi[i] \u7684\u503c\uff08 \\pi[0] \\pi[0] \u88ab\u8d4b\u503c\u4e3a 0 0 \uff09\u3002 \u4e3a\u4e86\u8ba1\u7b97\u5f53\u524d\u7684\u524d\u7f00\u51fd\u6570\u503c \\pi[i] \\pi[i] \uff0c\u6211\u4eec\u4ee4\u53d8\u91cf j j \u8868\u793a\u53f3\u7aef\u70b9\u4f4d\u4e8e i - 1 i - 1 \u7684\u6700\u597d\u7684\u540e\u7f00\u7684\u957f\u5ea6\u3002\u521d\u59cb\u65f6 j = \\pi[i - 1] j = \\pi[i - 1] \u3002 \u901a\u8fc7\u6bd4\u8f83 s[j] s[j] \u548c s[i] s[i] \u6765\u68c0\u67e5\u957f\u5ea6\u4e3a j + 1 j + 1 \u7684\u540e\u7f00\u662f\u5426\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u524d\u7f00\u3002\u5982\u679c\u4e8c\u8005\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u4eec\u7f6e \\pi[i] = j + 1 \\pi[i] = j + 1 \uff0c\u5426\u5219\u6211\u4eec\u51cf\u5c11 j j \u81f3 \\pi[j - 1] \\pi[j - 1] \u5e76\u4e14\u91cd\u590d\u8be5\u8fc7\u7a0b\u3002 \u5982\u679c j = 0 j = 0 \u5e76\u4e14\u4ecd\u6ca1\u6709\u4efb\u4f55\u4e00\u6b21\u5339\u914d\uff0c\u5219\u7f6e \\pi[i] = 0 \\pi[i] = 0 \u5e76\u79fb\u81f3\u4e0b\u4e00\u4e2a\u4e0b\u6807 i + 1 i + 1 \u3002","title":"\u6700\u7ec8\u7b97\u6cd5"},{"location":"string/prefix-function/#_7","text":"\u8be5\u7b97\u6cd5\u7684\u5b9e\u73b0\u51fa\u4eba\u610f\u6599\u7684\u77ed\u4e14\u76f4\u89c2\u3002 1 2 3 4 5 6 7 8 9 10 11 vector < int > prefix_function ( string s ) { int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ) { int j = pi [ i - 1 ]; while ( j > 0 && s [ i ] != s [ j ]) j = pi [ j - 1 ]; if ( s [ i ] == s [ j ]) j ++ ; pi [ i ] = j ; } return pi ; } \u8fd9\u662f\u4e00\u4e2a \u5728\u7ebf \u7b97\u6cd5\uff0c\u5373\u5176\u5f53\u6570\u636e\u5230\u8fbe\u65f6\u5904\u7406\u5b83\u2014\u2014\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4f60\u53ef\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u7b26\u7684\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7acb\u5373\u5904\u7406\u5b83\u4eec\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002\u8be5\u7b97\u6cd5\u4ecd\u7136\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32\u672c\u8eab\u4ee5\u53ca\u5148\u524d\u8ba1\u7b97\u8fc7\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u4f46\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u9884\u5148\u77e5\u9053\u8be5\u5b57\u7b26\u4e32\u524d\u7f00\u51fd\u6570\u7684\u6700\u5927\u53ef\u80fd\u53d6\u503c M M \uff0c\u90a3\u4e48\u6211\u4eec\u4ec5\u9700\u8981\u5b58\u50a8\u8be5\u5b57\u7b26\u4e32\u7684\u524d M + 1 M + 1 \u4e2a\u5b57\u7b26\u4ee5\u53ca\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002","title":"\u5b9e\u73b0"},{"location":"string/prefix-function/#_8","text":"","title":"\u5e94\u7528"},{"location":"string/prefix-function/#knuth-morris-pratt","text":"\u8be5\u4efb\u52a1\u662f\u524d\u7f00\u51fd\u6570\u7684\u4e00\u4e2a\u5178\u578b\u5e94\u7528\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c t t \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5c1d\u8bd5\u627e\u5230\u5e76\u5c55\u793a s s \u5728 t t \u4e2d\u7684\u6240\u6709\u51fa\u73b0\uff08occurrence\uff09\u3002 \u4e3a\u4e86\u7b80\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u7528 n n \u8868\u793a\u5b57\u7b26\u4e32 s s \u7684\u957f\u5ea6\uff0c\u7528 m m \u8868\u793a\u6587\u672c t t \u7684\u957f\u5ea6\u3002 \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \uff0c\u5176\u4e2d \\# \\# \u4e3a\u4e00\u4e2a\u65e2\u4e0d\u51fa\u73b0\u5728 s s \u4e2d\u4e5f\u4e0d\u51fa\u73b0\u5728 t t \u4e2d\u7684\u5206\u9694\u7b26\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u51fd\u6570\u3002\u73b0\u5728\u8003\u8651\u8be5\u524d\u7f00\u51fd\u6570\u9664\u53bb\u6700\u5f00\u59cb n + 1 n + 1 \u4e2a\u503c\uff08\u5373\u5c5e\u4e8e\u5b57\u7b26\u4e32 s s \u548c\u5206\u9694\u7b26\u7684\u51fd\u6570\u503c\uff09\u540e\u5176\u4f59\u51fd\u6570\u503c\u7684\u610f\u4e49\u3002\u6839\u636e\u5b9a\u4e49\uff0c \\pi[i] \\pi[i] \u4e3a\u53f3\u7aef\u70b9\u5728 i i \u4e14\u540c\u65f6\u4e3a\u4e00\u4e2a\u524d\u7f00\u7684\u6700\u957f\u771f\u5b50\u4e32\u7684\u957f\u5ea6\uff0c\u5177\u4f53\u5230\u6211\u4eec\u7684\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u503c\u4e3a\u4e0e s s \u7684\u524d\u7f00\u76f8\u540c\u4e14\u53f3\u7aef\u70b9\u4f4d\u4e8e i i \u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002\u7531\u4e8e\u5206\u9694\u7b26\u7684\u5b58\u5728\uff0c\u8be5\u957f\u5ea6\u4e0d\u53ef\u80fd\u8d85\u8fc7 n n \u3002\u800c\u5982\u679c\u7b49\u5f0f \\pi[i] = n \\pi[i] = n \u6210\u7acb\uff0c\u5219\u610f\u5473\u7740 s s \u5b8c\u6574\u51fa\u73b0\u5728\u8be5\u4f4d\u7f6e\uff08\u5373\u5176\u53f3\u7aef\u70b9\u4f4d\u4e8e\u4f4d\u7f6e i i \uff09\u3002\u6ce8\u610f\u8be5\u4f4d\u7f6e\u7684\u4e0b\u6807\u662f\u5bf9\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u800c\u8a00\u7684\u3002 \u56e0\u6b64\u5982\u679c\u5728\u67d0\u4e00\u4f4d\u7f6e i i \u6709 \\pi[i] = n \\pi[i] = n \u6210\u7acb\uff0c\u5219\u5b57\u7b26\u4e32 s s \u5728\u5b57\u7b26\u4e32 t t \u7684 i - (n - 1) - (n + 1) = i - 2n i - (n - 1) - (n + 1) = i - 2n \u5904\u51fa\u73b0\u3002 \u6b63\u5982\u5728\u524d\u7f00\u51fd\u6570\u7684\u8ba1\u7b97\u4e2d\u5df2\u7ecf\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u524d\u7f00\u51fd\u6570\u7684\u503c\u6c38\u8fdc\u4e0d\u8d85\u8fc7\u4e00\u7279\u5b9a\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u9700\u8981\u5b58\u50a8\u6574\u4e2a\u5b57\u7b26\u4e32\u4ee5\u53ca\u6574\u4e2a\u524d\u7f00\u51fd\u6570\uff0c\u800c\u53ea\u9700\u8981\u4e8c\u8005\u5f00\u5934\u7684\u4e00\u90e8\u5206\u3002\u5728\u6211\u4eec\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd9\u610f\u5473\u7740\u53ea\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 s + \\# s + \\# \u4ee5\u53ca\u76f8\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u8bfb\u5165\u5b57\u7b26\u4e32 t t \u7684\u4e00\u4e2a\u5b57\u7b26\u5e76\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u56e0\u6b64 Knuth-Morris-Pratt \u7b97\u6cd5\uff08\u7b80\u79f0 KMP \u7b97\u6cd5\uff09\u7528 O(n + m) O(n + m) \u7684\u65f6\u95f4\u4ee5\u53ca O(n) O(n) \u7684\u5185\u5b58\u89e3\u51b3\u4e86\u8be5\u95ee\u9898\u3002","title":"\u5728\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5b50\u4e32\uff1aKnuth-Morris-Pratt \u7b97\u6cd5"},{"location":"string/prefix-function/#_9","text":"\u5728\u8be5\u8282\u6211\u4eec\u5c06\u540c\u65f6\u8ba8\u8bba\u4e24\u4e2a\u95ee\u9898\u3002\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5728\u95ee\u9898\u7684\u7b2c\u4e00\u4e2a\u53d8\u79cd\u4e2d\u6211\u4eec\u5e0c\u671b\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00 s[0 \\dots i] s[0 \\dots i] \u5728\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5728\u95ee\u9898\u7684\u7b2c\u4e8c\u4e2a\u53d8\u79cd\u4e2d\u6211\u4eec\u5e0c\u671b\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00 s[0 \\dots i] s[0 \\dots i] \u5728\u53e6\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32 t t \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u9996\u5148\u8ba9\u6211\u4eec\u6765\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\u3002\u8003\u8651\u4f4d\u7f6e i i \u7684\u524d\u7f00\u51fd\u6570\u503c \\pi[i] \\pi[i] \u3002\u6839\u636e\u5b9a\u4e49\uff0c\u5176\u610f\u5473\u7740\u5b57\u7b26\u4e32 s s \u4e00\u4e2a\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u524d\u7f00\u5728\u4f4d\u7f6e i i \u51fa\u73b0\u5e76\u4ee5 i i \u4e3a\u53f3\u7aef\u70b9\uff0c\u540c\u65f6\u4e0d\u5b58\u5728\u4e00\u4e2a\u66f4\u957f\u7684\u524d\u7f00\u6ee1\u8db3\u524d\u8ff0\u5b9a\u4e49\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u66f4\u77ed\u7684\u524d\u7f00\u53ef\u80fd\u4ee5\u8be5\u4f4d\u7f6e\u4e3a\u53f3\u7aef\u70b9\u3002\u5bb9\u6613\u770b\u51fa\uff0c\u6211\u4eec\u9047\u5230\u4e86\u5728\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u65f6\u5df2\u7ecf\u56de\u7b54\u8fc7\u7684\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a j j \u7684\u524d\u7f00\uff0c\u540c\u65f6\u5176\u4e5f\u662f\u4e00\u4e2a\u53f3\u7aef\u70b9\u4f4d\u4e8e i i \u7684\u540e\u7f00\uff0c\u4e0b\u4e00\u4e2a\u66f4\u5c0f\u7684\u524d\u7f00\u957f\u5ea6 k < j k < j \u662f\u591a\u5c11\uff1f\u8be5\u957f\u5ea6\u7684\u524d\u7f00\u9700\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u53f3\u7aef\u70b9\u4e3a i i \u7684\u540e\u7f00\u3002\u56e0\u6b64\u4ee5\u4f4d\u7f6e i i \u4e3a\u53f3\u7aef\u70b9\uff0c\u6709\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \u7684\u524d\u7f00\uff0c\u6709\u957f\u5ea6\u4e3a \\pi[\\pi[i] - 1] \\pi[\\pi[i] - 1] \u7684\u524d\u7f00\uff0c\u6709\u957f\u5ea6\u4e3a \\pi[\\pi[\\pi[i] - 1] - 1] \\pi[\\pi[\\pi[i] - 1] - 1] \u7684\u524d\u7f00\uff0c\u7b49\u7b49\uff0c\u76f4\u5230\u957f\u5ea6\u53d8\u4e3a 0 0 \u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u8ff0\u65b9\u5f0f\u8ba1\u7b97\u7b54\u6848\u3002 1 2 3 4 vector < int > ans ( n + 1 ); for ( int i = 0 ; i < n ; i ++ ) ans [ pi [ i ]] ++ ; for ( int i = n - 1 ; i > 0 ; i -- ) ans [ pi [ i - 1 ]] += ans [ i ]; for ( int i = 0 ; i <= n ; i ++ ) ans [ i ] ++ ; \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6211\u4eec\u9996\u5148\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00\u51fd\u6570\u503c\u5728\u6570\u7ec4 \\pi \\pi \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u6700\u540e\u7b54\u6848\uff1a\u5982\u679c\u6211\u4eec\u77e5\u9053\u957f\u5ea6\u4e3a i i \u7684\u524d\u7f00\u51fa\u73b0\u4e86\u6070\u597d \\text{ans}[i] \\text{ans}[i] \u6b21\uff0c\u90a3\u4e48\u8be5\u503c\u5fc5\u987b\u88ab\u53e0\u52a0\u81f3\u5176\u6700\u957f\u7684\u65e2\u662f\u540e\u7f00\u4e5f\u662f\u524d\u7f00\u7684\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u4e2d\u3002\u5728\u6700\u540e\uff0c\u4e3a\u4e86\u7edf\u8ba1\u539f\u59cb\u7684\u524d\u7f00\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u7ed3\u679c\u52a0 1 1 \u3002 \u73b0\u5728\u8003\u8651\u7b2c\u4e8c\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u5e94\u7528\u6765\u81ea Knuth-Morris-Pratt \u7684\u6280\u5de7\uff1a\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u5e76\u8ba1\u7b97\u5176\u524d\u7f00\u51fd\u6570\u3002\u4e0e\u7b2c\u4e00\u4e2a\u95ee\u9898\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u4e0e\u5b57\u7b26\u4e32 t t \u76f8\u5173\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u5373 i \\ge n + 1 i \\ge n + 1 \u7684 \\pi[i] \\pi[i] \u3002\u6709\u4e86\u8fd9\u4e9b\u503c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u6837\u5e94\u7528\u5728\u7b2c\u4e00\u4e2a\u95ee\u9898\u4e2d\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u8be5\u95ee\u9898\u3002","title":"\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00\u7684\u51fa\u73b0\u6b21\u6570"},{"location":"string/prefix-function/#_10","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5e0c\u671b\u8ba1\u7b97\u5176\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u3002 \u6211\u4eec\u5c06\u8fed\u4ee3\u7684\u89e3\u51b3\u8be5\u95ee\u9898\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u77e5\u9053\u4e86\u5f53\u524d\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8981\u627e\u51fa\u4e00\u79cd\u5728 s s \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u540e\u91cd\u65b0\u8ba1\u7b97\u8be5\u6570\u76ee\u7684\u65b9\u6cd5\u3002 \u4ee4 k k \u4e3a\u5f53\u524d s s \u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u3002\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26 c c \u81f3 s s \u3002\u663e\u7136\uff0c\u4f1a\u6709\u4e00\u4e9b\u65b0\u7684\u5b50\u4e32\u4ee5\u5b57\u7b26 c c \u7ed3\u5c3e\u3002\u6211\u4eec\u5e0c\u671b\u5bf9\u8fd9\u4e9b\u4ee5\u8be5\u5b57\u7b26\u7ed3\u5c3e\u4e14\u6211\u4eec\u4e4b\u524d\u672a\u66fe\u9047\u5230\u7684\u5b50\u4e32\u8ba1\u6570\u3002 \u6784\u9020\u5b57\u7b26\u4e32 t = s + c t = s + c \u5e76\u5c06\u5176\u53cd\u8f6c\u5f97\u5230\u5b57\u7b26\u4e32 t^{\\sim} t^{\\sim} \u3002\u73b0\u5728\u6211\u4eec\u7684\u4efb\u52a1\u53d8\u4e3a\u8ba1\u7b97\u6709\u591a\u5c11 t^{\\sim} t^{\\sim} \u7684\u524d\u7f00\u672a\u5728 t^{\\sim} t^{\\sim} \u7684\u5176\u4f59\u4efb\u4f55\u5730\u65b9\u51fa\u73b0\u3002\u5982\u679c\u6211\u4eec\u8ba1\u7b97\u4e86 t^{\\sim} t^{\\sim} \u7684\u524d\u7f00\u51fd\u6570\u6700\u5927\u503c \\pi_{\\max} \\pi_{\\max} \uff0c\u90a3\u4e48\u6700\u957f\u7684\u51fa\u73b0\u5728 s s \u4e2d\u7684\u524d\u7f00\u5176\u957f\u5ea6\u4e3a \\pi_{\\max} \\pi_{\\max} \u3002\u81ea\u7136\u7684\uff0c\u6240\u6709\u66f4\u77ed\u7684\u524d\u7f00\u4e5f\u51fa\u73b0\u4e86\u3002 \u56e0\u6b64\uff0c\u5f53\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u5b57\u7b26\u540e\u65b0\u51fa\u73b0\u7684\u5b50\u4e32\u6570\u76ee\u4e3a |s| + 1 - \\pi_{\\max} |s| + 1 - \\pi_{\\max} \u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(n) O(n) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u65b0\u5b50\u4e32\u7684\u6570\u76ee\uff0c\u6545\u6700\u7ec8\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u91cd\u65b0\u8ba1\u7b97\u5728\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u4ece\u5c3e\u6216\u8005\u5934\u79fb\u9664\u4e00\u4e2a\u5b57\u7b26\u65f6\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\u3002","title":"\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee"},{"location":"string/prefix-function/#_11","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u5176\u6700\u77ed\u7684 \u201c\u538b\u7f29\u201d \u8868\u793a\uff0c\u4e5f\u5373\u6211\u4eec\u5e0c\u671b\u5bfb\u627e\u4e00\u4e2a\u6700\u77ed\u7684\u5b57\u7b26\u4e32 t t \uff0c\u4f7f\u5f97 s s \u53ef\u4ee5\u88ab t t \u7684\u4e00\u4efd\u6216\u591a\u4efd\u62f7\u8d1d\u7684\u62fc\u63a5\u8868\u793a\u3002 \u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230 t t \u7684\u957f\u5ea6\u5373\u53ef\u3002\u77e5\u9053\u4e86\u8be5\u957f\u5ea6\uff0c\u8be5\u95ee\u9898\u7684\u7b54\u6848\u5373\u4e3a\u957f\u5ea6\u4e3a\u8be5\u503c\u7684 s s \u7684\u524d\u7f00\u3002 \u8ba9\u6211\u4eec\u8ba1\u7b97 s s \u7684\u524d\u7f00\u51fd\u6570\u3002\u901a\u8fc7\u4f7f\u7528\u8be5\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u503c \\pi[n - 1] \\pi[n - 1] \uff0c\u6211\u4eec\u5b9a\u4e49\u503c k = n - \\pi[n - 1] k = n - \\pi[n - 1] \u3002\u6211\u4eec\u5c06\u8bc1\u660e\uff0c\u5982\u679c k k \u6574\u9664 n n \uff0c\u90a3\u4e48 k k \u5c31\u662f\u7b54\u6848\uff0c\u5426\u5219\u4e0d\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7684\u538b\u7f29\uff0c\u6545\u7b54\u6848\u4e3a n n \u3002 \u5047\u5b9a n n \u53ef\u88ab k k \u6574\u9664\u3002\u90a3\u4e48\u5b57\u7b26\u4e32\u53ef\u88ab\u5212\u5206\u4e3a\u957f\u5ea6\u4e3a k k \u7684\u82e5\u5e72\u5757\u3002\u6839\u636e\u524d\u7f00\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a n - k n - k \u7684\u524d\u7f00\u7b49\u4e8e\u5176\u540e\u7f00\u3002\u4f46\u662f\u8fd9\u610f\u5473\u7740\u6700\u540e\u4e00\u4e2a\u5757\u540c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5757\u76f8\u7b49\uff0c\u5e76\u4e14\u5012\u6570\u7b2c\u4e8c\u4e2a\u5757\u540c\u5012\u6570\u7b2c\u4e09\u4e2a\u5757\u76f8\u7b49\uff0c\u7b49\u7b49\u3002\u4f5c\u4e3a\u5176\u7ed3\u679c\uff0c\u6240\u6709\u5757\u90fd\u662f\u76f8\u7b49\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32 s s \u538b\u7f29\u81f3\u957f\u5ea6 k k \u3002 \u8bda\u7136\uff0c\u6211\u4eec\u4ecd\u9700\u8bc1\u660e\u8be5\u503c\u4e3a\u6700\u4f18\u89e3\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u6bd4 k k \u66f4\u5c0f\u7684\u538b\u7f29\u8868\u793a\uff0c\u90a3\u4e48\u524d\u7f00\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u503c \\pi[n - 1] \\pi[n - 1] \u5fc5\u5b9a\u6bd4 n - k n - k \u8981\u5927\u3002\u56e0\u6b64 k k \u5c31\u662f\u7b54\u6848\u3002 \u73b0\u5728\u5047\u8bbe n n \u4e0d\u53ef\u4ee5\u88ab k k \u6574\u9664\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\u8fd9\u610f\u5473\u7740\u7b54\u6848\u4e3a n n 1 \u3002\u5047\u8bbe\u5176\u6700\u5c0f\u538b\u7f29\u8868\u793a r r \u7684\u957f\u5ea6\u4e3a p p \uff08 p p \u6574\u9664 n n \uff09\uff0c\u5b57\u7b26\u4e32 s s \u88ab\u5212\u5206\u4e3a n / p \\ge 2 n / p \\ge 2 \u5757\u3002\u90a3\u4e48\u524d\u7f00\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u503c \\pi[n - 1] \\pi[n - 1] \u5fc5\u5b9a\u5927\u4e8e n - p n - p \uff08\u5982\u679c\u7b49\u4e8e\u5219 n n \u53ef\u88ab k k \u6574\u9664\uff09\uff0c\u4e5f\u5373\u5176\u6240\u8868\u793a\u7684\u540e\u7f00\u5c06\u90e8\u5206\u7684\u8986\u76d6\u7b2c\u4e00\u4e2a\u5757\u3002\u73b0\u5728\u8003\u8651\u5b57\u7b26\u4e32\u7684\u7b2c\u4e8c\u4e2a\u5757\u3002\u8be5\u5757\u6709\u4e24\u79cd\u89e3\u91ca\uff1a\u7b2c\u4e00\u79cd\u4e3a r_0 r_1 \\dots r_{p - 1} r_0 r_1 \\dots r_{p - 1} \uff0c\u53e6\u4e00\u79cd\u4e3a r_{p - k} r_{p - k + 1} \\dots r_{p - 1} r_0 r_1 \\dots r_{p - k - 1} r_{p - k} r_{p - k + 1} \\dots r_{p - 1} r_0 r_1 \\dots r_{p - k - 1} \u3002\u7531\u4e8e\u4e24\u79cd\u89e3\u91ca\u5bf9\u5e94\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u53ef\u5f97\u5230 p p \u4e2a\u65b9\u7a0b\u7ec4\u6210\u7684\u65b9\u7a0b\u7ec4\uff0c\u8be5\u65b9\u7a0b\u7ec4\u53ef\u7b80\u5199\u4e3a r_{(i + k) \\bmod p} = r_{i \\bmod p} r_{(i + k) \\bmod p} = r_{i \\bmod p} \uff0c\u5176\u4e2d \\cdot \\bmod p \\cdot \\bmod p \u8868\u793a\u6a21 p p \u610f\u4e49\u4e0b\u7684\u6700\u5c0f\u975e\u8d1f\u5269\u4f59\u3002 \\begin{gathered} \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 r_5}^p \\\\ r_0 ~ r_1 ~ r_2 ~ r_3 ~ \\underbrace{\\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ r_0 ~ r_1}_{\\pi[11] = 8} \\end{gathered} \\begin{gathered} \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ \\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 r_5}^p \\\\ r_0 ~ r_1 ~ r_2 ~ r_3 ~ \\underbrace{\\overbrace{r_0 ~ r_1 ~ r_2 ~ r_3 ~ r_4 ~ r_5}^p ~ r_0 ~ r_1}_{\\pi[11] = 8} \\end{gathered} \u6839\u636e\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4 x x \u548c y y \u4f7f\u5f97 xk + yp = \\gcd(k, p) xk + yp = \\gcd(k, p) \u3002\u901a\u8fc7\u4e0e\u7b49\u5f0f pk - kp = 0 pk - kp = 0 \u9002\u5f53\u53e0\u52a0\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4 x' > 0 x' > 0 \u548c y' < 0 y' < 0 \u4f7f\u5f97 x'k + y'p = \\gcd(k, p) x'k + y'p = \\gcd(k, p) \u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u4e0d\u65ad\u5e94\u7528\u524d\u8ff0\u65b9\u7a0b\u7ec4\u4e2d\u7684\u65b9\u7a0b\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u65b9\u7a0b\u7ec4 r_{(i + \\gcd(k, p)) \\bmod p} = r_{i \\bmod p} r_{(i + \\gcd(k, p)) \\bmod p} = r_{i \\bmod p} \u3002 \u7531\u4e8e \\gcd(k, p) \\gcd(k, p) \u6574\u9664 p p \uff0c\u8fd9\u610f\u5473\u7740 \\gcd(k, p) \\gcd(k, p) \u662f r r \u7684\u4e00\u4e2a\u5468\u671f\u3002\u53c8\u56e0\u4e3a \\pi[n - 1] > n - p \\pi[n - 1] > n - p \uff0c\u6545\u6709 n - \\pi[n - 1] = k < p n - \\pi[n - 1] = k < p \uff0c\u6240\u4ee5 \\gcd(k, p) \\gcd(k, p) \u662f\u4e00\u4e2a\u6bd4 p p \u66f4\u5c0f\u7684 r r \u7684\u5468\u671f\u3002\u56e0\u6b64\u5b57\u7b26\u4e32 s s \u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a \\gcd(k, p) < p \\gcd(k, p) < p \u7684\u538b\u7f29\u8868\u793a\uff0c\u540c p p \u7684\u6700\u5c0f\u6027\u77db\u76fe\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u5c0f\u4e8e n n \u7684\u538b\u7f29\u8868\u793a\uff0c\u56e0\u6b64\u7b54\u6848\u4e3a n n \u3002","title":"\u5b57\u7b26\u4e32\u538b\u7f29"},{"location":"string/prefix-function/#_12","text":"\u8ba9\u6211\u4eec\u91cd\u65b0\u56de\u5230\u901a\u8fc7\u4e00\u4e2a\u5206\u9694\u7b26\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b0\u5b57\u7b26\u4e32\u3002\u5bf9\u4e8e\u5b57\u7b26\u4e32 s s \u548c t t \u6211\u4eec\u8ba1\u7b97 s + \\# + t s + \\# + t \u7684\u524d\u7f00\u51fd\u6570\u3002\u663e\u7136\uff0c\u56e0\u4e3a \\# \\# \u662f\u4e00\u4e2a\u5206\u9694\u7b26\uff0c\u524d\u7f00\u51fd\u6570\u503c\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7 |s| |s| \u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 s + \\# s + \\# \u548c\u5176\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u52a8\u6001\u8ba1\u7b97\u5bf9\u4e8e\u4e4b\u540e\u6240\u6709\u5b57\u7b26\u7684\u524d\u7f00\u51fd\u6570\u503c\uff1a \\underbrace{s_0 ~ s_1 ~ \\dots ~ s_{n-1} ~ \\#}_{\\text{need to store}} ~ \\underbrace{t_0 ~ t_1 ~ \\dots ~ t_{m-1}}_{\\text{do not need to store}} \\underbrace{s_0 ~ s_1 ~ \\dots ~ s_{n-1} ~ \\#}_{\\text{need to store}} ~ \\underbrace{t_0 ~ t_1 ~ \\dots ~ t_{m-1}}_{\\text{do not need to store}} \u5b9e\u9645\u4e0a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u77e5\u9053 t t \u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26 c c \u4ee5\u53ca\u4e4b\u524d\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\u4fbf\u8db3\u4ee5\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u800c\u4e0d\u9700\u8981\u7528\u5230\u4efb\u4f55\u5176\u5b83 t t \u7684\u5b57\u7b26\u548c\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a \u81ea\u52a8\u673a \uff08\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff09\uff1a\u5176\u72b6\u6001\u4e3a\u5f53\u524d\u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u800c\u4ece\u4e00\u4e2a\u72b6\u6001\u5230\u53e6\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\u5219\u7531\u4e0b\u4e00\u4e2a\u5b57\u7b26\u786e\u5b9a\u3002 \u56e0\u6b64\uff0c\u5373\u4f7f\u6ca1\u6709\u5b57\u7b26\u4e32 t t \uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5e94\u7528\u6784\u9020\u8f6c\u79fb\u8868\u7684\u7b97\u6cd5\u6784\u9020\u4e00\u4e2a\u8f6c\u79fb\u8868 ( \\text { old } \\pi , c ) \\rightarrow \\text { new } _ { - } \\pi ( \\text { old } \\pi , c ) \\rightarrow \\text { new } _ { - } \\pi \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void compute_automaton ( string s , vector < vector < int >>& aut ) { s += '#' ; int n = s . size (); vector < int > pi = prefix_function ( s ); aut . assign ( n , vector < int > ( 26 )); for ( int i = 0 ; i < n ; i ++ ) { for ( int c = 0 ; c < 26 ; c ++ ) { int j = i ; while ( j > 0 && 'a' + c != s [ j ]) j = pi [ j - 1 ]; if ( 'a' + c == s [ j ]) j ++ ; aut [ i ][ c ] = j ; } } } \u7136\u800c\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\uff0c\u5bf9\u4e8e\u5c0f\u5199\u5b57\u6bcd\u8868\uff0c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2 26) O(n^2 26) \u3002\u6ce8\u610f\u5230\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6765\u5229\u7528\u8868\u4e2d\u5df2\u8ba1\u7b97\u8fc7\u7684\u90e8\u5206\u3002\u53ea\u8981\u6211\u4eec\u4ece\u503c j j \u53d8\u5316\u5230 \\pi[j - 1] \\pi[j - 1] \uff0c\u90a3\u4e48\u6211\u4eec\u5b9e\u9645\u4e0a\u5728\u8bf4\u8f6c\u79fb (j, c) (j, c) \u6240\u5230\u8fbe\u7684\u72b6\u6001\u540c\u8f6c\u79fb (\\pi[j - 1], c) (\\pi[j - 1], c) \u4e00\u6837\uff0c\u4f46\u8be5\u7b54\u6848\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u7cbe\u786e\u8ba1\u7b97\u8fc7\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void compute_automaton ( string s , vector < vector < int >>& aut ) { s += '#' ; int n = s . size (); vector < int > pi = prefix_function ( s ); aut . assign ( n , vector < int > ( 26 )); for ( int i = 0 ; i < n ; i ++ ) { for ( int c = 0 ; c < 26 ; c ++ ) { if ( i > 0 && 'a' + c != s [ i ]) aut [ i ][ c ] = aut [ pi [ i - 1 ]][ c ]; else aut [ i ][ c ] = i + ( 'a' + c == s [ i ]); } } } \u6700\u7ec8\u6211\u4eec\u53ef\u5728 O(n 26) O(n 26) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6784\u9020\u8be5\u81ea\u52a8\u673a\u3002 \u8be5\u81ea\u52a8\u673a\u5728\u4ec0\u4e48\u65f6\u5019\u6709\u7528\u5462\uff1f\u9996\u5148\uff0c\u8bb0\u5f97\u5927\u90e8\u5206\u65f6\u5019\u6211\u4eec\u4e3a\u4e86\u4e00\u4e2a\u76ee\u7684\u4f7f\u7528\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u7684\u524d\u7f00\u51fd\u6570\uff1a\u5bfb\u627e\u5b57\u7b26\u4e32 s s \u5728\u5b57\u7b26\u4e32 t t \u4e2d\u7684\u6240\u6709\u51fa\u73b0\u3002 \u56e0\u6b64\u4f7f\u7528\u8be5\u81ea\u52a8\u673a\u7684\u6700\u76f4\u63a5\u7684\u597d\u5904\u662f \u52a0\u901f\u8ba1\u7b97\u5b57\u7b26\u4e32 s + \\# + t s + \\# + t \u7684\u524d\u7f00\u51fd\u6570 \u3002 \u901a\u8fc7\u6784\u5efa s + \\# s + \\# \u7684\u81ea\u52a8\u673a\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 s s \u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002\u6240\u6709\u8f6c\u79fb\u5df2\u7ecf\u5728\u8868\u4e2d\u8ba1\u7b97\u8fc7\u4e86\u3002 \u4f46\u9664\u6b64\u4ee5\u5916\uff0c\u8fd8\u6709\u7b2c\u4e8c\u4e2a\u4e0d\u90a3\u4e48\u76f4\u63a5\u7684\u5e94\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32 t t \u662f \u67d0\u4e9b\u901a\u8fc7\u4e00\u4e9b\u89c4\u5219\u6784\u9020\u7684\u5de8\u578b\u5b57\u7b26\u4e32 \u65f6\uff0c\u4f7f\u7528\u8be5\u81ea\u52a8\u673a\u52a0\u901f\u8ba1\u7b97\u3002Gray \u5b57\u7b26\u4e32\uff0c\u6216\u8005\u4e00\u4e2a\u7531\u4e00\u4e9b\u77ed\u7684\u8f93\u5165\u4e32\u7684\u9012\u5f52\u7ec4\u5408\u6240\u6784\u9020\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u8fd9\u79cd\u4f8b\u5b50\u3002 \u51fa\u4e8e\u5b8c\u6574\u6027\u8003\u8651\uff0c\u6211\u4eec\u6765\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6570 k \\le 10^5 k \\le 10^5 \uff0c\u4ee5\u53ca\u4e00\u4e2a\u957f\u5ea6 \\le 10^5 \\le 10^5 \u7684\u5b57\u7b26\u4e32 s s \uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97 s s \u5728\u7b2c k k \u4e2a Gray \u5b57\u7b26\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u56de\u60f3\u8d77 Gray \u5b57\u7b26\u4e32\u4ee5\u4e0b\u8ff0\u65b9\u5f0f\u5b9a\u4e49\uff1a \\begin{aligned} g_1 &= \\mathtt{a}\\\\ g_2 &= \\mathtt{aba}\\\\ g_3 &= \\mathtt{abacaba}\\\\ g_4 &= \\mathtt{abacabadabacaba} \\end{aligned} \\begin{aligned} g_1 &= \\mathtt{a}\\\\ g_2 &= \\mathtt{aba}\\\\ g_3 &= \\mathtt{abacaba}\\\\ g_4 &= \\mathtt{abacabadabacaba} \\end{aligned} \u7531\u4e8e\u5176\u5929\u6587\u6570\u5b57\u822c\u7684\u957f\u5ea6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5373\u4f7f\u6784\u9020\u5b57\u7b26\u4e32 t t \u90fd\u662f\u4e0d\u53ef\u80fd\u7684\uff1a\u7b2c k k \u4e2a Gray \u5b57\u7b26\u4e32\u6709 2^k - 1 2^k - 1 \u4e2a\u5b57\u7b26\u3002\u7136\u800c\u6211\u4eec\u53ef\u4ee5\u5728\u4ec5\u4ec5\u77e5\u9053\u5f00\u5934\u82e5\u5e72\u524d\u7f00\u51fd\u6570\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u6548\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u9664\u4e86\u81ea\u52a8\u673a\u4e4b\u5916\uff0c\u6211\u4eec\u540c\u65f6\u9700\u8981\u8ba1\u7b97\u503c G[i][j] G[i][j] \uff1a\u5728\u4ece\u72b6\u6001 j j \u5f00\u59cb\u5904\u7406 g_i g_i \u540e\u7684\u81ea\u52a8\u673a\u7684\u72b6\u6001\uff0c\u4ee5\u53ca\u503c K[i][j] K[i][j] \uff1a\u5f53\u4ece\u72b6\u6001 j j \u5f00\u59cb\u5904\u7406 g_i g_i \u540e\uff0c s s \u5728 g_i g_i \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5b9e\u9645\u4e0a K[i][j] K[i][j] \u4e3a\u5728\u6267\u884c\u64cd\u4f5c\u65f6\u524d\u7f00\u51fd\u6570\u53d6\u503c\u4e3a |s| |s| \u7684\u6b21\u6570\u3002\u6613\u5f97\u95ee\u9898\u7684\u7b54\u6848\u4e3a K[k][0] K[k][0] \u3002 \u6211\u4eec\u8be5\u5982\u4f55\u8ba1\u7b97\u8fd9\u4e9b\u503c\u5462\uff1f\u9996\u5148\u6839\u636e\u5b9a\u4e49\uff0c\u521d\u59cb\u6761\u4ef6\u4e3a G[0][j] = j G[0][j] = j \u4ee5\u53ca K[0][j] = 0 K[0][j] = 0 \u3002\u4e4b\u540e\u6240\u6709\u503c\u53ef\u4ee5\u901a\u8fc7\u5148\u524d\u7684\u503c\u4ee5\u53ca\u4f7f\u7528\u81ea\u52a8\u673a\u8ba1\u7b97\u5f97\u5230\u3002\u4e3a\u4e86\u5bf9\u67d0\u4e2a i i \u8ba1\u7b97\u76f8\u5e94\u503c\uff0c\u56de\u60f3\u8d77\u5b57\u7b26\u4e32 g_i g_i \u7531 g_{i - 1} g_{i - 1} \uff0c\u5b57\u6bcd\u8868\u4e2d\u7b2c i i \u4e2a\u5b57\u7b26\uff0c\u4ee5\u53ca g_{i - 1} g_{i - 1} \u4e09\u8005\u62fc\u63a5\u800c\u6210\u3002\u56e0\u6b64\u81ea\u52a8\u673a\u4f1a\u9014\u5f84\u4e0b\u5217\u72b6\u6001\uff1a \\begin{gathered} \\text{mid} = \\text{aut}[G[i - 1][j]][i] \\\\ G[i][j] = G[i - 1][\\text{mid}] \\end{gathered} \\begin{gathered} \\text{mid} = \\text{aut}[G[i - 1][j]][i] \\\\ G[i][j] = G[i - 1][\\text{mid}] \\end{gathered} K[i][j] K[i][j] \u7684\u503c\u540c\u6837\u53ef\u88ab\u7b80\u5355\u8ba1\u7b97\u3002 K[i][j] = K[i - 1][j] + [\\text{mid} == |s|] + K[i - 1][\\text{mid}] K[i][j] = K[i - 1][j] + [\\text{mid} == |s|] + K[i - 1][\\text{mid}] \u5176\u4e2d [\\cdot] [\\cdot] \u5f53\u5176\u4e2d\u8868\u8fbe\u5f0f\u53d6\u503c\u4e3a\u771f\u65f6\u503c\u4e3a 1 1 \uff0c\u5426\u5219\u4e3a 0 0 \u3002\u7efc\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u89e3\u51b3\u5173\u4e8e Gray \u5b57\u7b26\u4e32\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u4e00\u5927\u7c7b\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5e94\u7528\u540c\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u4e0b\u5217\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \u4ee5\u53ca\u4e00\u4e9b\u6a21\u5f0f t_i t_i \uff0c\u5176\u4e2d\u6bcf\u4e2a\u6a21\u5f0f\u4ee5\u4e0b\u5217\u65b9\u5f0f\u7ed9\u51fa\uff1a\u8be5\u6a21\u5f0f\u7531\u666e\u901a\u5b57\u7b26\u7ec4\u6210\uff0c\u5f53\u4e2d\u53ef\u80fd\u4ee5 t_{k}^{\\text{cnt}} t_{k}^{\\text{cnt}} \u7684\u5f62\u5f0f\u9012\u5f52\u63d2\u5165\u5148\u524d\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5373\u5728\u8be5\u4f4d\u7f6e\u6211\u4eec\u5fc5\u987b\u63d2\u5165\u5b57\u7b26\u4e32 t_k t_k \\text{cnt} \\text{cnt} \u6b21\u3002\u4ee5\u4e0b\u662f\u8fd9\u4e9b\u6a21\u5f0f\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a \\begin{aligned} t_1 &= \\mathtt{abdeca} \\\\ t_2 &= \\mathtt{abc} + t_1^{30} + \\mathtt{abd} \\\\ t_3 &= t_2^{50} + t_1^{100} \\\\ t_4 &= t_2^{10} + t_3^{100} \\end{aligned} \\begin{aligned} t_1 &= \\mathtt{abdeca} \\\\ t_2 &= \\mathtt{abc} + t_1^{30} + \\mathtt{abd} \\\\ t_3 &= t_2^{50} + t_1^{100} \\\\ t_4 &= t_2^{10} + t_3^{100} \\end{aligned} \u9012\u5f52\u4ee3\u5165\u4f1a\u4f7f\u5b57\u7b26\u4e32\u957f\u5ea6\u7206\u70b8\u5f0f\u589e\u957f\uff0c\u4ed6\u4eec\u7684\u957f\u5ea6\u751a\u81f3\u53ef\u4ee5\u8fbe\u5230 100^{100} 100^{100} \u7684\u6570\u91cf\u7ea7\u3002\u800c\u6211\u4eec\u5fc5\u987b\u627e\u5230\u5b57\u7b26\u4e32 s s \u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u8be5\u95ee\u9898\u540c\u6837\u53ef\u901a\u8fc7\u6784\u9020\u524d\u7f00\u51fd\u6570\u7684\u81ea\u52a8\u673a\u89e3\u51b3\u3002\u540c\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u5229\u7528\u5148\u524d\u8ba1\u7b97\u8fc7\u7684\u7ed3\u679c\u5bf9\u6bcf\u4e2a\u6a21\u5f0f\u8ba1\u7b97\u5176\u8f6c\u79fb\u7136\u540e\u76f8\u5e94\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002","title":"\u6839\u636e\u524d\u7f00\u51fd\u6570\u6784\u5efa\u4e00\u4e2a\u81ea\u52a8\u673a"},{"location":"string/prefix-function/#_13","text":"UVA # 455 \"Periodic Strings\" UVA # 11022 \"String Factoring\" UVA # 11452 \"Dancing the Cheeky-Cheeky\" UVA 12604 - Caesar Cipher UVA 12467 - Secret Word UVA 11019 - Matrix Matcher SPOJ - Pattern Find Codeforces - Anthem of Berland Codeforces - MUH and Cube Walls \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 \u041f\u0440\u0435\u0444\u0438\u043a\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u041a\u043d\u0443\u0442\u0430-\u041c\u043e\u0440\u0440\u0438\u0441\u0430-\u041f\u0440\u0430\u0442\u0442\u0430 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Prefix function. Knuth\u2013Morris\u2013Pratt algorithm \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002 \u5728\u4fc4\u6587\u7248\u53ca\u82f1\u6587\u7248\u4e2d\u8be5\u90e8\u5206\u8bc1\u660e\u5747\u7591\u4f3c\u6709\u8bef\u3002\u672c\u6587\u7ae0\u4e2d\u7684\u8be5\u90e8\u5206\u8bc1\u660e\u7531\u4f5c\u8005\u81ea\u884c\u6dfb\u52a0\u3002 \u21a9","title":"\u7ec3\u4e60\u9898\u76ee"},{"location":"string/sa/","text":"\u524d\u8a00 \u00b6 \u540e\u7f00\u6570\u7ec4\u548c\u540e\u7f00\u6811 \u00b6 \u5728\u5b57\u7b26\u4e32\u5904\u7406\u5f53\u4e2d\uff0c\u540e\u7f00\u6811\u548c\u540e\u7f00\u6570\u7ec4\u90fd\u662f\u975e\u5e38\u6709\u529b\u7684\u5de5\u5177\u3002\u5176\u5b9e\u540e\u7f00\u6570\u7ec4\u662f\u540e\u7f00\u6811\u7684\u4e00\u4e2a\u975e\u5e38\u7cbe\u5de7\u7684\u66ff\u4ee3\u54c1\uff0c\u5b83\u6bd4\u540e\u7f00\u6811\u5bb9\u6613\u7f16\u7a0b\u5b9e\u73b0\uff0c\u80fd\u591f\u5b9e\u73b0\u540e\u7f00\u6811\u7684\u5f88\u591a\u529f\u80fd\u800c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u592a\u900a\u8272\uff0c\u5e76\u4e14\uff0c\u5b83\u6bd4\u540e\u7f00\u6811\u6240\u5360\u7528\u7684\u7a7a\u95f4\u5c0f\u5f88\u591a\u3002\u53ef\u4ee5\u8bf4\uff0c\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u540e\u7f00\u6570\u7ec4\u6bd4\u540e\u7f00\u6811\u8981\u66f4\u4e3a\u5b9e\u7528\u3002\u2014\u2014\u767e\u5ea6\u767e\u79d1 \u5404\u79cd\u5b9a\u4e49 \u00b6 \u5b50\u4e32 \uff1a \u5c31\u662f\u5b50\u4e32 [\u6342\u8138] \u540e\u7f00 \uff1a \u5c31\u662f\u4ece i i \u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u5230\u8be5\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u7684\u4e00\u4e2a\u5b50\u4e32 \u5b57\u7b26\u4e32\u5927\u5c0f \uff1a a a \u548c b b \u8fd9\u4e24\u4e2a\u4e32\uff0c\u4ece\u5934\u5f00\u59cb\u9010\u4e2a\u5b57\u7b26\u6309\u7167 ASSIC \u7801\u8fdb\u884c\u6bd4\u8f83 \u540e\u7f00\u6570\u7ec4 \uff1a sa[i] sa[i] \u4ee3\u8868\u8be5\u5b57\u7b26\u4e32\u7684 len len \u4e2a\u540e\u7f00\u4e2d\uff0c\u6392\u540d\u4e3a i i \u7684\u540e\u7f00\u662f\u7b2c sa[i] sa[i] \u4e2a\u540e\u7f00 \u540d\u8bcd\u6570\u7ec4 \uff1a rank[i] rank[i] \u4ee3\u8868\u7b2c i i \u4e2a\u540e\u7f00\u6392\u540d\u4e3a rank[i] rank[i] \u4e00\u4e9b\u6784\u9020\u65b9\u6cd5 \u00b6 \u6700\u7b80\u5355\u7684\u66b4\u529b \u00b6 \u628a\u6240\u6709\u7684\u540e\u7f00\u62c6\u51fa\u6765\uff0c\u7136\u540e sort \u601d\u60f3\u8f83\u4e3a\u7b80\u5355\uff0c\u53ef\u81ea\u884c\u5c1d\u8bd5\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; int rank [ 123 ], sa [ 123 ]; struct Str { string s ; int wei ; friend bool operator < ( Str a1 , Str a2 ) { return a1 . s < a2 . s ; } } k [ 123 ]; int main () { string s ; cin >> s ; int len = s . size () - 1 ; for ( int i = 0 ; i <= len ; i ++ ) { k [ i ]. wei = i ; for ( int j = i ; j <= len ; j ++ ) k [ i ]. s = k [ i ]. s + s [ j ]; } sort ( k , k + len + 1 ); for ( int i = 0 ; i <= len ; i ++ ) { rank [ k [ i ]. wei ] = i ; sa [ i ] = k [ i ]. wei ; } exit ( 0 ); } \u500d\u589e \u00b6 \u8fd9\u4e2a\u5c31\u662f\u4e00\u822c\u4eba\u5199\u540e\u7f00\u6570\u7ec4\u7528\u7684\u65b9\u6cd5 \u590d\u6742\u5ea6\u662f O(nlogn) O(nlogn) \u524d\u63d0\u662f\u4f60\u8981\u5148\u4f1a \u57fa\u6570\u6392\u5e8f \u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u5b57\u7b26\u4e32 aabaaaab \u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u7684\u540e\u7f00\u5217\u4e3e\u51fa\u6765\uff1a \u7136\u540e\u7528\u57fa\u6570\u6392\u5e8f\u7684\u65b9\u5f0f\uff0c\u6309\u7167\u6bcf\u4e2a\u540e\u7f00\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8fdb\u884c\u6392\u5e8f\uff0c\u5448\u73b0\u8fd9\u6837\u5b50\u7684\u6548\u679c\uff1a \u63a5\u7740\u6211\u4eec\u4ee5\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4e3a\u5173\u952e\u5b57\uff0c\u5728\u9996\u5b57\u6bcd\u6709\u5e8f\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u628a\u9996\u5b57\u6bcd\u76f8\u540c\u7684\u540e\u7f00\u62ff\u51fa\u6765\u5355\u770b \u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u9996\u5b57\u6bcd\u76f8\u540c\u7684\u540e\u7f00\uff0c\u9996\u5b57\u6bcd\u662f\u5bf9\u6392\u5e8f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u8fdb\u884c\u57fa\u6570\u6392\u5e8f\uff0c\u540c\u6837\uff0c\u5bf9\u4e8e\u9996\u5b57\u6bcd\u4e0d\u540c\u7684\u540e\u7f00\uff0c\u7531\u4e8e\u6309\u7167\u9996\u5b57\u6bcd\u6392\u5e8f\u65f6\uff0c\u4ed6\u4eec\u7684\u76f8\u5bf9\u5927\u5c0f\u5df2\u7ecf\u786e\u5b9a\uff0c\u5f53\u6309\u7167\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u6392\u5e8f\u65f6\uff0c\u4e0d\u4f1a\u51fa\u73b0 \u539f\u6765 a>b\uff0c\u73b0\u5728 b>a \u7684\u73b0\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u770b\u6210\u4e00\u76f4\u5728\u505a\u533a\u57df\u5185\u7684\u6392\u5e8f\uff0c\u8fd9\u4e4b\u540e\u53d8\u6210\u8fd9\u6837\uff1a \u7b2c\u4e09\u5b57\u6bcd\u540c\u7406........ \u8fd9\u6837\u5b50\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u662f\u590d\u6742\u5ea6\u8fd8\u662f\u6ca1\u6709\u5230\u8fbe\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4 \u6240\u4ee5\u6211\u4eec\u5f15\u5165 \u500d\u589e \u5f53\u6211\u4eec\u6309\u7167\u6bcf\u4e2a\u540e\u7f00\u7684\u524d 2^k 2^k \u4e2a\u5b57\u6bcd\u8fdb\u884c\u5b8c\u6392\u5e8f\u540e\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u540e\u7f00\u7684\u524d 2^{k+1} 2^{k+1} \u770b\u505a\u524d\u540e\u4e24\u4e2a 2^k 2^k , \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u524d\u540e\u4e24\u4e2a 2^k 2^k \u4f5c\u4e3a\u4e4b\u524d\u8bf4\u7684 \u9996\u5b57\u6bcd \u548c \u7b2c\u4e8c\u4e2a\u5b57\u6bcd \u4e86\uff0c\u7136\u540e\u8fdb\u884c\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u5c31\u53ef\u4ee5\u5728 O(nlogn) O(nlogn) \u7684\u590d\u6742\u5ea6\u5185\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <bits/stdc++.h> using namespace std ; int n ; int sa [ 150 ], x [ 150 ], c [ 150 ], y [ 150 ]; char a [ 150 ]; inline void SA () { int m = 128 ; for ( int i = 0 ; i <= m ; i ++ ) c [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) c [ x [ i ]] ++ ; for ( int i = 1 ; i <= m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n ; i ; i -- ) sa [ c [ x [ i ]] -- ] = i ; for ( int k = 1 , p ; k <= n ; k <<= 1 ) { p = 0 ; for ( int i = n ; i > n - k ; i -- ) y [ ++ p ] = i ; for ( int i = 1 ; i <= n ; i ++ ) if ( sa [ i ] > k ) y [ ++ p ] = sa [ i ] - k ; for ( int i = 0 ; i <= m ; i ++ ) c [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) c [ x [ i ]] ++ ; for ( int i = 1 ; i <= m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n ; i ; i -- ) sa [ c [ x [ y [ i ]]] -- ] = y [ i ]; p = y [ sa [ 1 ]] = 1 ; for ( int i = 2 , a , b ; i <= n ; i ++ ) { a = sa [ i ] + k > n ? - 1 : x [ sa [ i ] + k ]; b = sa [ i - 1 ] + k > n ? - 1 : x [ sa [ i - 1 ] + k ]; y [ sa [ i ]] = ( x [ sa [ i ]] == x [ sa [ i - 1 ]]) && ( a == b ) ? p : ++ p ; } swap ( x , y ); m = p ; } } int main () { scanf ( \"%s\" , a + 1 ); n = strlen ( a + 1 ); for ( int i = 1 ; i <= n ; i ++ ) x [ i ] = a [ i ]; SA (); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d\" , sa [ i ]); exit ( 0 ); } \u4ee3\u7801\u91cc x[i] x[i] \u5c31\u662f rank[i] rank[i] y[i] y[i] \uff1a\u5047\u8bbe y[i]=a\\ ,\\ y[i+1]=b y[i]=a\\ ,\\ y[i+1]=b \u90a3\u4e48\u5728\u539f\u4e32\u4e2d \u4ece a+2^k a+2^k \u5f00\u59cb\u7684 2^k 2^k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32 \u5c0f\u4e8e\u7b49\u4e8e \u4ece b+2^k b+2^k \u5f00\u59cb\u7684 2^k 2^k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32 \u6700\u597d\u7406\u89e3\u8fd9\u4e2a\u4ee3\u7801\u65f6\uff0c\u6bcf\u4e00\u6b65\u90fd\u7ed3\u5408\u8fd9\u57fa\u6570\u6392\u5e8f\u6765\u8003\u8651","title":"\u540e\u7f00\u6570\u7ec4 (SA)"},{"location":"string/sa/#_1","text":"","title":"\u524d\u8a00"},{"location":"string/sa/#_2","text":"\u5728\u5b57\u7b26\u4e32\u5904\u7406\u5f53\u4e2d\uff0c\u540e\u7f00\u6811\u548c\u540e\u7f00\u6570\u7ec4\u90fd\u662f\u975e\u5e38\u6709\u529b\u7684\u5de5\u5177\u3002\u5176\u5b9e\u540e\u7f00\u6570\u7ec4\u662f\u540e\u7f00\u6811\u7684\u4e00\u4e2a\u975e\u5e38\u7cbe\u5de7\u7684\u66ff\u4ee3\u54c1\uff0c\u5b83\u6bd4\u540e\u7f00\u6811\u5bb9\u6613\u7f16\u7a0b\u5b9e\u73b0\uff0c\u80fd\u591f\u5b9e\u73b0\u540e\u7f00\u6811\u7684\u5f88\u591a\u529f\u80fd\u800c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u592a\u900a\u8272\uff0c\u5e76\u4e14\uff0c\u5b83\u6bd4\u540e\u7f00\u6811\u6240\u5360\u7528\u7684\u7a7a\u95f4\u5c0f\u5f88\u591a\u3002\u53ef\u4ee5\u8bf4\uff0c\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u540e\u7f00\u6570\u7ec4\u6bd4\u540e\u7f00\u6811\u8981\u66f4\u4e3a\u5b9e\u7528\u3002\u2014\u2014\u767e\u5ea6\u767e\u79d1","title":"\u540e\u7f00\u6570\u7ec4\u548c\u540e\u7f00\u6811"},{"location":"string/sa/#_3","text":"\u5b50\u4e32 \uff1a \u5c31\u662f\u5b50\u4e32 [\u6342\u8138] \u540e\u7f00 \uff1a \u5c31\u662f\u4ece i i \u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u5230\u8be5\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u7684\u4e00\u4e2a\u5b50\u4e32 \u5b57\u7b26\u4e32\u5927\u5c0f \uff1a a a \u548c b b \u8fd9\u4e24\u4e2a\u4e32\uff0c\u4ece\u5934\u5f00\u59cb\u9010\u4e2a\u5b57\u7b26\u6309\u7167 ASSIC \u7801\u8fdb\u884c\u6bd4\u8f83 \u540e\u7f00\u6570\u7ec4 \uff1a sa[i] sa[i] \u4ee3\u8868\u8be5\u5b57\u7b26\u4e32\u7684 len len \u4e2a\u540e\u7f00\u4e2d\uff0c\u6392\u540d\u4e3a i i \u7684\u540e\u7f00\u662f\u7b2c sa[i] sa[i] \u4e2a\u540e\u7f00 \u540d\u8bcd\u6570\u7ec4 \uff1a rank[i] rank[i] \u4ee3\u8868\u7b2c i i \u4e2a\u540e\u7f00\u6392\u540d\u4e3a rank[i] rank[i]","title":"\u5404\u79cd\u5b9a\u4e49"},{"location":"string/sa/#_4","text":"","title":"\u4e00\u4e9b\u6784\u9020\u65b9\u6cd5"},{"location":"string/sa/#_5","text":"\u628a\u6240\u6709\u7684\u540e\u7f00\u62c6\u51fa\u6765\uff0c\u7136\u540e sort \u601d\u60f3\u8f83\u4e3a\u7b80\u5355\uff0c\u53ef\u81ea\u884c\u5c1d\u8bd5\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; int rank [ 123 ], sa [ 123 ]; struct Str { string s ; int wei ; friend bool operator < ( Str a1 , Str a2 ) { return a1 . s < a2 . s ; } } k [ 123 ]; int main () { string s ; cin >> s ; int len = s . size () - 1 ; for ( int i = 0 ; i <= len ; i ++ ) { k [ i ]. wei = i ; for ( int j = i ; j <= len ; j ++ ) k [ i ]. s = k [ i ]. s + s [ j ]; } sort ( k , k + len + 1 ); for ( int i = 0 ; i <= len ; i ++ ) { rank [ k [ i ]. wei ] = i ; sa [ i ] = k [ i ]. wei ; } exit ( 0 ); }","title":"\u6700\u7b80\u5355\u7684\u66b4\u529b"},{"location":"string/sa/#_6","text":"\u8fd9\u4e2a\u5c31\u662f\u4e00\u822c\u4eba\u5199\u540e\u7f00\u6570\u7ec4\u7528\u7684\u65b9\u6cd5 \u590d\u6742\u5ea6\u662f O(nlogn) O(nlogn) \u524d\u63d0\u662f\u4f60\u8981\u5148\u4f1a \u57fa\u6570\u6392\u5e8f \u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u5b57\u7b26\u4e32 aabaaaab \u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u7684\u540e\u7f00\u5217\u4e3e\u51fa\u6765\uff1a \u7136\u540e\u7528\u57fa\u6570\u6392\u5e8f\u7684\u65b9\u5f0f\uff0c\u6309\u7167\u6bcf\u4e2a\u540e\u7f00\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8fdb\u884c\u6392\u5e8f\uff0c\u5448\u73b0\u8fd9\u6837\u5b50\u7684\u6548\u679c\uff1a \u63a5\u7740\u6211\u4eec\u4ee5\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4e3a\u5173\u952e\u5b57\uff0c\u5728\u9996\u5b57\u6bcd\u6709\u5e8f\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u628a\u9996\u5b57\u6bcd\u76f8\u540c\u7684\u540e\u7f00\u62ff\u51fa\u6765\u5355\u770b \u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u9996\u5b57\u6bcd\u76f8\u540c\u7684\u540e\u7f00\uff0c\u9996\u5b57\u6bcd\u662f\u5bf9\u6392\u5e8f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u8fdb\u884c\u57fa\u6570\u6392\u5e8f\uff0c\u540c\u6837\uff0c\u5bf9\u4e8e\u9996\u5b57\u6bcd\u4e0d\u540c\u7684\u540e\u7f00\uff0c\u7531\u4e8e\u6309\u7167\u9996\u5b57\u6bcd\u6392\u5e8f\u65f6\uff0c\u4ed6\u4eec\u7684\u76f8\u5bf9\u5927\u5c0f\u5df2\u7ecf\u786e\u5b9a\uff0c\u5f53\u6309\u7167\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u6392\u5e8f\u65f6\uff0c\u4e0d\u4f1a\u51fa\u73b0 \u539f\u6765 a>b\uff0c\u73b0\u5728 b>a \u7684\u73b0\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u770b\u6210\u4e00\u76f4\u5728\u505a\u533a\u57df\u5185\u7684\u6392\u5e8f\uff0c\u8fd9\u4e4b\u540e\u53d8\u6210\u8fd9\u6837\uff1a \u7b2c\u4e09\u5b57\u6bcd\u540c\u7406........ \u8fd9\u6837\u5b50\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u662f\u590d\u6742\u5ea6\u8fd8\u662f\u6ca1\u6709\u5230\u8fbe\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4 \u6240\u4ee5\u6211\u4eec\u5f15\u5165 \u500d\u589e \u5f53\u6211\u4eec\u6309\u7167\u6bcf\u4e2a\u540e\u7f00\u7684\u524d 2^k 2^k \u4e2a\u5b57\u6bcd\u8fdb\u884c\u5b8c\u6392\u5e8f\u540e\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u540e\u7f00\u7684\u524d 2^{k+1} 2^{k+1} \u770b\u505a\u524d\u540e\u4e24\u4e2a 2^k 2^k , \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u524d\u540e\u4e24\u4e2a 2^k 2^k \u4f5c\u4e3a\u4e4b\u524d\u8bf4\u7684 \u9996\u5b57\u6bcd \u548c \u7b2c\u4e8c\u4e2a\u5b57\u6bcd \u4e86\uff0c\u7136\u540e\u8fdb\u884c\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u5c31\u53ef\u4ee5\u5728 O(nlogn) O(nlogn) \u7684\u590d\u6742\u5ea6\u5185\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <bits/stdc++.h> using namespace std ; int n ; int sa [ 150 ], x [ 150 ], c [ 150 ], y [ 150 ]; char a [ 150 ]; inline void SA () { int m = 128 ; for ( int i = 0 ; i <= m ; i ++ ) c [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) c [ x [ i ]] ++ ; for ( int i = 1 ; i <= m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n ; i ; i -- ) sa [ c [ x [ i ]] -- ] = i ; for ( int k = 1 , p ; k <= n ; k <<= 1 ) { p = 0 ; for ( int i = n ; i > n - k ; i -- ) y [ ++ p ] = i ; for ( int i = 1 ; i <= n ; i ++ ) if ( sa [ i ] > k ) y [ ++ p ] = sa [ i ] - k ; for ( int i = 0 ; i <= m ; i ++ ) c [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) c [ x [ i ]] ++ ; for ( int i = 1 ; i <= m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n ; i ; i -- ) sa [ c [ x [ y [ i ]]] -- ] = y [ i ]; p = y [ sa [ 1 ]] = 1 ; for ( int i = 2 , a , b ; i <= n ; i ++ ) { a = sa [ i ] + k > n ? - 1 : x [ sa [ i ] + k ]; b = sa [ i - 1 ] + k > n ? - 1 : x [ sa [ i - 1 ] + k ]; y [ sa [ i ]] = ( x [ sa [ i ]] == x [ sa [ i - 1 ]]) && ( a == b ) ? p : ++ p ; } swap ( x , y ); m = p ; } } int main () { scanf ( \"%s\" , a + 1 ); n = strlen ( a + 1 ); for ( int i = 1 ; i <= n ; i ++ ) x [ i ] = a [ i ]; SA (); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d\" , sa [ i ]); exit ( 0 ); } \u4ee3\u7801\u91cc x[i] x[i] \u5c31\u662f rank[i] rank[i] y[i] y[i] \uff1a\u5047\u8bbe y[i]=a\\ ,\\ y[i+1]=b y[i]=a\\ ,\\ y[i+1]=b \u90a3\u4e48\u5728\u539f\u4e32\u4e2d \u4ece a+2^k a+2^k \u5f00\u59cb\u7684 2^k 2^k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32 \u5c0f\u4e8e\u7b49\u4e8e \u4ece b+2^k b+2^k \u5f00\u59cb\u7684 2^k 2^k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32 \u6700\u597d\u7406\u89e3\u8fd9\u4e2a\u4ee3\u7801\u65f6\uff0c\u6bcf\u4e00\u6b65\u90fd\u7ed3\u5408\u8fd9\u57fa\u6570\u6392\u5e8f\u6765\u8003\u8651","title":"\u500d\u589e"},{"location":"string/sam/","text":"\u540e\u7f00\u81ea\u52a8\u673a \u662f\u4e00\u4e2a\u80fd\u89e3\u51b3\u8bb8\u591a\u5b57\u7b26\u4e32\u76f8\u5173\u95ee\u9898\u7684\u6709\u529b\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5b57\u7b26\u4e32\u95ee\u9898\uff1a \u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u641c\u7d22\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e\u3002 \u8ba1\u7b97\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5b50\u4e32\u3002 \u4ee5\u4e0a\u95ee\u9898\u90fd\u53ef\u4ee5\u5728\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u901a\u8fc7\u540e\u7f00\u81ea\u52a8\u673a\u6765\u5b9e\u73b0\u3002 \u76f4\u89c2\u4e0a\uff0c\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684 \u6240\u6709\u5b50\u4e32 \u7684\u538b\u7f29\u5f62\u5f0f\u3002\u503c\u5f97\u6ce8\u610f\u7684\u4e8b\u5b9e\u662f\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u5c06\u6240\u6709\u7684\u8fd9\u4e9b\u4fe1\u606f\u4ee5\u9ad8\u5ea6\u538b\u7f29\u7684\u5f62\u5f0f\u50a8\u5b58\u3002\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3a O(n) O(n) \u3002\u6b64\u5916\uff0c\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3a O(n) O(n) \uff08\u8fd9\u91cc\u6211\u4eec\u5c06\u5b57\u7b26\u96c6\u7684\u5927\u5c0f k k \u770b\u4f5c\u5e38\u6570\uff0c\u5426\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a O(n\\log k) O(n\\log k) \uff09\u3002 \u540e\u7f00\u81ea\u52a8\u673a\u7684\u5b9a\u4e49 \u00b6 \u7ed9\u5b9a\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\u81ea\u52a8\u673a\u662f\u4e00\u4e2a\u63a5\u53d7\u6240\u6709\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\u7684\u6700\u5c0f DFA \uff08\u786e\u5b9a\u6027\u6709\u9650\u81ea\u52a8\u673a\u6216\u786e\u5b9a\u6027\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff09\u3002 \u6362\u53e5\u8bdd\u8bf4\uff1a \u540e\u7f00\u81ea\u52a8\u673a\u662f\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002\u9876\u70b9\u88ab\u79f0\u4f5c \u72b6\u6001 \uff0c\u8fb9\u88ab\u79f0\u4f5c\u72b6\u6001\u95f4\u7684 \u8f6c\u79fb \u3002 \u4e00\u4e2a\u72b6\u6001 t_0 t_0 \u4e3a \u521d\u59cb\u72b6\u6001 \uff0c\u5b83\u5fc5\u5b9a\u4e3a\u8fd9\u5f20\u56fe\u7684\u6e90\u70b9\uff08\u5176\u5b83\u5404\u70b9\u5747\u4e0e t_0 t_0 \u8054\u901a\uff09\u3002 \u6bcf\u4e2a \u8f6c\u79fb \u90fd\u6807\u6709\u4e00\u4e9b\u5b57\u6bcd\u3002\u4ece\u4e00\u4e2a\u9876\u70b9\u51fa\u53d1\u7684\u6240\u6709\u8f6c\u79fb\u5747 \u4e0d\u540c \u3002 \u4e00\u4e2a\u6216\u591a\u4e2a\u72b6\u6001\u4e3a \u7ec8\u6b62\u72b6\u6001 \u3002\u5982\u679c\u6211\u4eec\u4ece\u521d\u59cb\u72b6\u6001 t_0 t_0 \u51fa\u53d1\uff0c\u6700\u7ec8\u8f6c\u79fb\u5230\u4e86\u4e00\u4e2a\u7ec8\u6b62\u72b6\u6001\uff0c\u5219\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8f6c\u79fb\u8fde\u63a5\u8d77\u6765\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32 s s \u7684\u4e00\u4e2a\u540e\u7f00\u3002 s s \u7684\u6bcf\u4e2a\u540e\u7f00\u5747\u53ef\u7528\u4e00\u6761\u4ece t_0 t_0 \u5230\u4e00\u4e2a\u7ec8\u6b62\u72b6\u6001\u7684\u8def\u5f84\u6784\u6210\u3002 \u540e\u7f00\u81ea\u52a8\u673a\u662f\u6240\u6709\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u81ea\u52a8\u673a\u4e2d\u9876\u70b9\u6570\u6700\u5c11\u7684\u4e00\u4e2a\u3002 \u5b50\u4e32\u7684\u6027\u8d28 \u00b6 \u540e\u7f00\u81ea\u52a8\u673a\u6700\u7b80\u5355\u548c\u6700\u91cd\u8981\u7684\u6027\u8d28\u662f\uff0c\u5b83\u5305\u542b\u5173\u4e8e\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u5b50\u4e32\u7684\u4fe1\u606f\u3002\u4efb\u610f\u4ece\u521d\u59cb\u72b6\u6001 t_0 t_0 \u5f00\u59cb\u7684\u8def\u5f84\uff0c\u5982\u679c\u6211\u4eec\u5c06\u8f6c\u79fb\u8def\u5f84\u4e0a\u7684\u6807\u53f7\u5199\u4e0b\u6765\uff0c\u90fd\u4f1a\u5f62\u6210 s s \u7684\u4e00\u4e2a \u5b50\u4e32 \u3002\u53cd\u4e4b\u6bcf\u4e2a s s \u7684\u5b50\u4e32\u5bf9\u5e94\u4e8e\u4ece t_0 t_0 \u5f00\u59cb\u7684\u67d0\u6761\u8def\u5f84\u3002 \u4e3a\u4e86\u7b80\u5316\u8868\u8fbe\uff0c\u6211\u4eec\u5c06\u4f1a\u8bf4\u5b50\u4e32 \u5bf9\u5e94\u4e8e \u4e00\u6761\u8def\u5f84\uff08\u4ece t_0 t_0 \u5f00\u59cb\u4e14\u4e00\u4e9b\u6807\u53f7\u6784\u6210\u8fd9\u4e2a\u5b50\u4e32\uff09\u3002\u53cd\u8fc7\u6765\u6211\u4eec\u8bf4\u4efb\u610f\u4e00\u6761\u8def\u5f84 \u5bf9\u5e94\u4e8e \u5b83\u7684\u6807\u53f7\u6784\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u4e00\u6761\u6216\u591a\u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u4e00\u4e2a\u72b6\u6001\uff0c\u56e0\u6b64\u6211\u4eec\u8bf4\u4e00\u4e2a\u72b6\u6001\u5bf9\u5e94\u4e8e\u5b57\u7b26\u4e32\u7684\u96c6\u5408\uff0c\u8fd9\u4e5f\u5bf9\u5e94\u4e8e\u90a3\u4e9b\u8def\u5f84\u3002 \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684\u5b9e\u4f8b \u00b6 \u6211\u4eec\u5c06\u4f1a\u5728\u8fd9\u91cc\u5c55\u793a\u4e00\u4e9b\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u6211\u4eec\u7528\u84dd\u8272\u8868\u793a\u521d\u59cb\u72b6\u6001\uff0c\u7528\u7eff\u8272\u8868\u793a\u7ec8\u6b62\u72b6\u6001\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``\" s=``\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``a\\!\" s=``a\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``aa\\!\" s=``aa\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``ab\\!\" s=``ab\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``abb\\!\" s=``abb\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``abbb\\!\" s=``abbb\\!\" \uff1a \u5728\u7ebf\u6027\u65f6\u95f4\u5185\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a \u00b6 \u5728\u6211\u4eec\u63cf\u8ff0\u7ebf\u6027\u65f6\u95f4\u5185\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u51e0\u4e2a\u5bf9\u7406\u89e3\u6784\u9020\u8fc7\u7a0b\u975e\u5e38\u91cd\u8981\u7684\u65b0\u6982\u5ff5\u5e76\u7b80\u5355\u8bc1\u660e\u3002 \u7ed3\u675f\u4f4d\u7f6e endpos \u00b6 \u8003\u8651\u5b57\u7b26\u4e32 s s \u7684\u4efb\u610f\u975e\u7a7a\u5b50\u4e32 t t \uff0c\u6211\u4eec\u8bb0 endpos(t) endpos(t) \u4e3a\u5728\u5b57\u7b26\u4e32 s s \u4e2d t t \u7684\u6240\u6709\u7ed3\u675f\u4f4d\u7f6e\uff08\u5047\u8bbe\u5bf9\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u7f16\u53f7\u4ece\u96f6\u5f00\u59cb\uff09\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 ``abcbc\\!\" ``abcbc\\!\" \uff0c\u6211\u4eec\u6709 endpos(``bc\\!\")=2,\\,4 endpos(``bc\\!\")=2,\\,4 \u3002 \u5f53\u4e24\u4e2a\u5b50\u4e32 t_1 t_1 \u4e0e t_2 t_2 \u7684\u672b\u5c3e\u96c6\u5408\u76f8\u7b49\u65f6\u6211\u4eec\u79f0\u5b83\u4eec\u662f endpos endpos \u7b49\u4ef7\u7684\uff1a\u5373 endpos(t_1)=endpos(t_2) endpos(t_1)=endpos(t_2) \u3002\u8fd9\u6837\u6240\u6709\u5b57\u7b26\u4e32 s s \u7684\u975e\u7a7a\u5b50\u4e32\u90fd\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u7684 endpos endpos \u96c6\u5408\u88ab\u5206\u4e3a\u51e0\u4e2a \u7b49\u4ef7\u7c7b \u3002 \u663e\u7136\uff0c\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a endpos endpos \u76f8\u540c\u7684\u5b50\u4e32\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u72b6\u6001\u6570\u7b49\u4e8e\u6240\u6709\u5b50\u4e32\u7684\u7b49\u4ef7\u7c7b\u7684\u4e2a\u6570\uff0c\u52a0\u4e0a\u521d\u59cb\u72b6\u6001\u3002\u540e\u7f00\u81ea\u52a8\u673a\u7684\u72b6\u6001\u4e2a\u6570\u7b49\u4ef7\u4e8e endpos endpos \u76f8\u540c\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u4e32\u3002 \u6211\u4eec\u7a0d\u540e\u5c06\u4f1a\u7528\u8fd9\u4e2a\u5047\u8bbe\u4ecb\u7ecd\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684\u7b97\u6cd5\u3002\u5728\u90a3\u65f6\u6211\u4eec\u5c06\u4f1a\u53d1\u73b0\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u9700\u8981\u6ee1\u8db3\u7684\u6240\u6709\u6027\u8d28\uff0c\u9664\u4e86\u6700\u5c0f\u6027\u4ee5\u5916\u90fd\u6ee1\u8db3\u4e86\u3002\u7531 Nerode \u5b9a\u7406\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u6700\u5c0f\u6027\uff08\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u4f1a\u8bc1\u660e\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6700\u5c0f\u6027\uff09\u3002 \u7531 endpos endpos \u7684\u503c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u91cd\u8981\u7ed3\u8bba\uff1a \u5f15\u7406 1\uff1a \u5f53\u4e14\u4ec5\u5f53\u5b57\u7b26\u4e32 u u \u4ee5 w w \u7684\u4e00\u4e2a\u540e\u7f00\u7684\u5f62\u5f0f\u51fa\u73b0\u5728\u5b57\u7b26\u4e32 s s \u4e2d\u65f6\uff0c\u4e24\u4e2a\u975e\u7a7a\u5b50\u4e32 u u \u548c w w \uff08\u5047\u8bbe length(u)\\le length(w) length(u)\\le length(w) \uff09\u662f endpos endpos \u7b49\u4ef7\u7684\u3002 \u5f15\u7406\u663e\u7136\u6210\u7acb\u3002\u5982\u679c u u \u548c v v \u7684 endpos endpos \u76f8\u540c\uff0c\u5219 u u \u662f w w \u7684\u4e00\u4e2a\u540e\u7f00\uff0c\u4e14\u53ea\u4ee5 s s \u4e2d\u7684\u4e00\u4e2a w w \u7684\u540e\u7f00\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u4e14\u6839\u636e\u5b9a\u4e49\uff0c\u5982\u679c u u \u4e3a w w \u7684\u4e00\u4e2a\u540e\u7f00\uff0c\u4e14\u53ea\u4ee5\u540e\u7f00\u7684\u5f62\u5f0f\u5728 s s \u4e2d\u51fa\u73b0\u65f6\uff0c\u4e24\u4e2a\u5b50\u4e32\u7684 endpos endpos \u503c\u76f8\u7b49\u3002 \u5f15\u7406 2\uff1a \u8003\u8651\u4e24\u4e2a\u975e\u7a7a\u5b50\u4e32 u u \u548c w w \uff08\u5047\u8bbe length(u)\\le length(w) length(u)\\le length(w) \uff09\u3002\u5219\u5b83\u4eec\u7684 endpos endpos \u6784\u6210\u7684\u96c6\u5408\u8981\u4e48\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u8981\u4e48 endpos(w) endpos(w) \u662f endpos(u) endpos(u) \u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u5e76\u4e14\u8fd9\u4f9d\u8d56\u4e8e u u \u662f\u5426\u4e3a w w \u7684\u4e00\u4e2a\u540e\u7f00\u3002\u5373\uff1a \\begin{cases} endpos(w)\\subseteq endpos(u)&\\text{\u82e5 $u$ \u4e3a $w$ \u7684\u4e00\u4e2a\u540e\u7f00}\\\\ endpos(w)\\cap endpos(u)=\\emptyset&\\text{\u53e6\u4e00\u79cd\u60c5\u51b5}\\\\ \\end{cases} \\begin{cases} endpos(w)\\subseteq endpos(u)&\\text{\u82e5 $u$ \u4e3a $w$ \u7684\u4e00\u4e2a\u540e\u7f00}\\\\ endpos(w)\\cap endpos(u)=\\emptyset&\\text{\u53e6\u4e00\u79cd\u60c5\u51b5}\\\\ \\end{cases} \u8bc1\u660e\uff1a\u5982\u679c\u96c6\u5408 endpos(u) endpos(u) \u4e0e endpos(w) endpos(w) \u6709\u81f3\u5c11\u4e00\u4e2a\u516c\u5171\u5143\u7d20\uff0c\u90a3\u4e48\u7531\u4e8e\u5b57\u7b26\u4e32 u u \u4e0e w w \u90fd\u5728\u4e00\u4e2a\u4f4d\u7f6e\u7ed3\u675f\uff0c\u5373 u u \u662f w w \u7684\u4e00\u4e2a\u540e\u7f00\u3002\u4f46\u662f\u5982\u679c\u5982\u6b64\u5728\u6bcf\u6b21 w w \u51fa\u73b0\u7684\u4f4d\u7f6e\u5b50\u4e32 u u \u4e5f\u4f1a\u51fa\u73b0\uff0c\u8fd9\u610f\u5473\u7740 endpos(w) endpos(w) \u662f endpos(u) endpos(u) \u7684\u4e00\u4e2a\u5b50\u96c6\u3002 \u5f15\u7406 3\uff1a \u8003\u8651\u4e00\u4e2a endpos endpos \u7b49\u4ef7\u7c7b\u3002\u5c06\u7c7b\u4e2d\u7684\u6240\u6709\u5b50\u4e32\u6309\u957f\u5ea6\u975e\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u5373\u6bcf\u4e2a\u5b50\u4e32\u90fd\u4f1a\u6bd4\u5b83\u524d\u4e00\u4e2a\u5b50\u4e32\u77ed\uff0c\u4e0e\u6b64\u540c\u65f6\u6bcf\u4e2a\u5b50\u4e32\u4e5f\u662f\u5b83\u524d\u4e00\u4e2a\u5b50\u4e32\u7684\u4e00\u4e2a\u540e\u7f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u540c\u4e00\u7b49\u4ef7\u7c7b\u4e2d\u7684\u6240\u6709\u5b50\u4e32\u5747\u4e92\u4e3a\u540e\u7f00\uff0c\u4e14\u5b50\u4e32\u7684\u957f\u5ea6\u6070\u597d\u8986\u76d6\u6574\u4e2a\u533a\u95f4 [x,\\,y] [x,\\,y] \u3002 \u8bc1\u660e\uff1a\u56fa\u5b9a\u4e00\u4e9b endpos endpos \u7b49\u4ef7\u7c7b\u3002\u5982\u679c\u7b49\u4ef7\u7c7b\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u4e32\uff0c\u5f15\u7406\u663e\u7136\u6210\u7acb\u3002\u73b0\u5728\u6211\u4eec\u6765\u8ba8\u8bba\u5b50\u4e32\u5143\u7d20\u4e2a\u6570\u5927\u4e8e 1 1 \u7684\u7b49\u4ef7\u7c7b\u3002 \u7531\u5f15\u7406 1\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684 endpos endpos \u7b49\u4ef7\u5b57\u7b26\u4e32\u4e2d\u8f83\u77ed\u7684\u4e00\u4e2a\u603b\u662f\u8f83\u957f\u7684\u4e00\u4e2a\u7684\u771f\u540e\u7f00\u3002\u56e0\u6b64\uff0c\u7b49\u4ef7\u7c7b\u4e2d\u4e0d\u53ef\u80fd\u6709\u4e24\u4e2a\u7b49\u957f\u7684\u5b57\u7b26\u4e32\u3002 \u8bb0 w w \u4e3a\u7b49\u4ef7\u7c7b\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u7c7b\u4f3c\u5730\uff0c\u8bb0 u u \u4e3a\u7b49\u4ef7\u7c7b\u4e2d\u6700\u77ed\u7684\u5b57\u7b26\u4e32\u3002\u7531\u5f15\u7406 1\uff0c\u5b57\u7b26\u4e32 u u \u662f\u5b57\u7b26\u4e32 w w \u7684\u771f\u540e\u7f00\u3002\u73b0\u5728\u8003\u8651\u957f\u5ea6\u5728\u533a\u95f4 [length(u),\\,length(w)] [length(u),\\,length(w)] \u4e2d\u7684 w w \u7684\u4efb\u610f\u540e\u7f00\u3002\u5bb9\u6613\u770b\u51fa\uff0c\u8fd9\u4e2a\u540e\u7f00\u4e5f\u5728\u540c\u4e00\u7b49\u4ef7\u7c7b\u4e2d\u3002\u56e0\u4e3a\u8fd9\u4e2a\u540e\u7f00\u53ea\u80fd\u5728\u5b57\u7b26\u4e32 s s \u4e2d\u4ee5 w w \u7684\u4e00\u4e2a\u540e\u7f00\u7684\u5f62\u5f0f\u5b58\u5728\uff08\u4e5f\u56e0\u4e3a\u8f83\u77ed\u7684\u540e\u7f00 u u \u5728 s s \u4e2d\u53ea\u4ee5 w w \u7684\u540e\u7f00\u7684\u5f62\u5f0f\u5b58\u5728\uff09\u3002\u56e0\u6b64\uff0c\u7531\u5f15\u7406 1\uff0c\u8fd9\u4e2a\u540e\u7f00\u4e0e\u5b57\u7b26\u4e32 w w endpos endpos \u7b49\u4ef7\u3002 \u540e\u7f00\u94fe\u63a5 link \u00b6 \u8003\u8651\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u4e00\u4e9b\u72b6\u6001\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u72b6\u6001 v v \u5bf9\u5e94\u4e8e\u5177\u6709\u76f8\u540c endpos endpos \u7684\u7b49\u4ef7\u7c7b\u3002\u6211\u4eec\u5982\u679c\u5b9a\u4e49 w w \u4e3a\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\uff0c\u5219\u6240\u6709\u5176\u5b83\u7684\u5b57\u7b26\u4e32\u90fd\u662f w w \u7684\u540e\u7f00\u3002 \u6211\u4eec\u8fd8\u77e5\u9053\u5b57\u7b26\u4e32 w w \u7684\u524d\u51e0\u4e2a\u540e\u7f00\uff08\u5982\u679c\u6211\u4eec\u7528\u957f\u5ea6\u964d\u5e8f\u8003\u8651\u8fd9\u4e9b\u540e\u7f00\uff09\u5728\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u5168\u90e8\u88ab\u5305\u542b\uff0c\u4e14\u6240\u6709\u5176\u5b83\u540e\u7f00\uff08\u81f3\u5c11\u4e00\u4e2a\u2014\u7a7a\u540e\u7f00\uff09\u5728\u5176\u5b83\u7684\u7b49\u4ef7\u7c7b\u4e2d\u3002\u6211\u4eec\u8bb0 t t \u4e3a\u6700\u5927\u7684\u8fd9\u6837\u7684\u540e\u7f00\uff0c\u7136\u540e\u7528\u540e\u7f00\u94fe\u63a5\u8fde\u5230 t t \u4e0a\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a \u540e\u7f00\u94fe\u63a5 link(v) link(v) \u8fde\u63a5\u5230\u5bf9\u5e94\u4e8e w w \u7684\u6700\u957f\u540e\u7f00\u7684\u53e6\u4e00\u4e2a endpos endpos \u7b49\u4ef7\u7c7b\u7684\u72b6\u6001\u3002 \u4ee5\u4e0b\u6211\u4eec\u5047\u8bbe\u521d\u59cb\u72b6\u6001 t_0 t_0 \u5bf9\u5e94\u4e8e\u5b83\u81ea\u5df1\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\uff08\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff09\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u89c4\u5b9a endpos(t)=\\{-1,\\,0,\\,\\ldots,\\,length(s)-1\\} endpos(t)=\\{-1,\\,0,\\,\\ldots,\\,length(s)-1\\} \u3002 \u5f15\u7406 4\uff1a \u6240\u6709\u540e\u7f00\u94fe\u63a5\u6784\u6210\u4e00\u68f5\u6839\u8282\u70b9\u4e3a t_0 t_0 \u7684\u6811\u3002 \u8bc1\u660e\uff1a\u8003\u8651\u4efb\u610f\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u540e\u7f00\u94fe\u63a5 link(v) link(v) \u8fde\u63a5\u5230\u7684\u72b6\u6001\u5bf9\u5e94\u4e8e\u4e25\u683c\u66f4\u77ed\u7684\u5b57\u7b26\u4e32\uff08\u6839\u636e\u540e\u7f00\u94fe\u63a5\u7684\u5b9a\u4e49\u548c\u5f15\u7406 3\uff09\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u5728\u540e\u7f00\u94fe\u63a5\u4e0a\u79fb\u52a8\uff0c\u6211\u4eec\u65e9\u665a\u4f1a\u5230\u8fbe\u5bf9\u5e94\u7a7a\u4e32\u7684\u521d\u59cb\u72b6\u6001 t_0 t_0 \u3002 \u5f15\u7406 5\uff1a \u5982\u679c\u6211\u4eec\u4f7f\u7528\u96c6\u5408 endpos endpos \u6784\u9020\u4e00\u68f5\u6811\uff08\u6240\u6709\u5b50\u8282\u70b9\u7684\u96c6\u5408\u4e3a\u7236\u8282\u70b9\u7684\u5b50\u96c6\uff09\uff0c\u5219\u8fd9\u4e2a\u7ed3\u6784\u7531\u540e\u7f00\u94fe\u63a5\u8fde\u63a5\u8d77\u6765\u3002 \u8bc1\u660e\uff1a\u7531\u5f15\u7406 2\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 endpos endpos \u96c6\u5408\u6784\u9020\u4e00\u68f5\u6811\uff08\u56e0\u4e3a\u4e24\u4e2a\u96c6\u5408\u8981\u4e48\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\u8981\u4e48\u4e92\u4e3a\u5b50\u96c6\uff09\u3002 \u6211\u4eec\u73b0\u5728\u8003\u8651\u4efb\u610f\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\u548c\u5b83\u7684\u540e\u7f00\u94fe\u63a5 link(v) link(v) \uff0c\u7531\u540e\u7f00\u94fe\u63a5\u548c\u5f15\u7406 2\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 endpos(v)\\subseteq endpos(link(v)) endpos(v)\\subseteq endpos(link(v)) \uff0c\u8fd9\u4e0e\u524d\u9762\u7684\u5f15\u7406\u8bc1\u660e\u4e86\u4ee5\u4e0b\u65ad\u8a00\u6210\u7acb\uff1a\u540e\u7f00\u94fe\u63a5\u6784\u6210\u7684\u6811\u672c\u8d28\u4e0a\u662f endpos endpos \u96c6\u5408\u6784\u6210\u7684\u4e00\u68f5\u6811\u3002 \u4ee5\u4e0b\u662f\u5bf9\u4e8e\u5b57\u7b26\u4e32 ``abcbc\\!\" ``abcbc\\!\" \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u65f6\u4ea7\u751f\u7684\u540e\u7f00\u94fe\u63a5\u6811\u7684\u4e00\u4e2a \u4f8b\u5b50 \uff0c\u8282\u70b9\u88ab\u6807\u8bb0\u4e3a\u5bf9\u5e94\u7b49\u4ef7\u7c7b\u4e2d\u6700\u957f\u7684\u5b50\u4e32\u3002 \u5c0f\u7ed3 \u00b6 \u5728\u5b66\u4e60\u7b97\u6cd5\u672c\u8eab\u524d\uff0c\u6211\u4eec\u5bf9\u4e4b\u524d\u5b66\u8fc7\u7684\u77e5\u8bc6\u8fdb\u884c\u4e00\u4e0b\u603b\u7ed3\uff0c\u5e76\u5f15\u5165\u4e00\u4e9b\u8f85\u52a9\u8bb0\u53f7\u3002 s s \u7684\u5b50\u4e32\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u7ed3\u675f\u7684\u4f4d\u7f6e endpos endpos \u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u7b49\u4ef7\u7c7b\uff1b \u540e\u7f00\u81ea\u52a8\u673a\u7531\u521d\u59cb\u72b6\u6001 t_0 t_0 \u548c\u4e0e\u6bcf\u4e00\u4e2a endpos endpos \u7b49\u4ef7\u7c7b\u5bf9\u5e94\u7684\u6bcf\u4e2a\u72b6\u6001\u7ec4\u6210\uff1b \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u72b6\u6001 v v \uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u4e32\u4e0e\u4e4b\u5339\u914d\u3002\u6211\u4eec\u8bb0 longest(v) longest(v) \u4e3a\u5176\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bb0 len(v) len(v) \u4e3a\u5b83\u7684\u957f\u5ea6\u3002\u7c7b\u4f3c\u5730\uff0c\u8bb0 shortest(v) shortest(v) \u4e3a\u6700\u77ed\u7684\u5b50\u4e32\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a minlen(v) minlen(v) \u3002\u90a3\u4e48\u6240\u6709\u5bf9\u5e94\u8fd9\u4e2a\u72b6\u6001\u7684\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662f\u5b57\u7b26\u4e32 longest(v) longest(v) \u7684\u4e0d\u540c\u7684\u540e\u7f00\uff0c\u4e14\u6240\u6709\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6070\u597d\u8986\u76d6\u533a\u95f4 [minlength(v),\\,len(v)] [minlength(v),\\,len(v)] \u4e2d\u7684\u6bcf\u4e00\u4e2a\u6574\u6570\u3002 \u5bf9\u4e8e\u4efb\u610f\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\uff0c\u5b9a\u4e49\u540e\u7f00\u94fe\u63a5\u4e3a\u8fde\u63a5\u5230\u5bf9\u5e94\u5b57\u7b26\u4e32 longest(v) longest(v) \u7684\u957f\u5ea6\u4e3a minlen(v)-1 minlen(v)-1 \u7684\u540e\u7f00\u7684\u4e00\u6761\u8fb9\u3002\u4ece\u6839\u8282\u70b9 t_0 t_0 \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u53ef\u4ee5\u5f62\u6210\u4e00\u68f5\u6811\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u8fd9\u68f5\u6811\u5f62\u6210\u4e86 endpos endpos \u96c6\u5408\u95f4\u7684\u5305\u542b\u5173\u7cfb\u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\u4f7f\u7528\u540e\u7f00\u94fe\u63a5 link(v) link(v) \u89e3\u91ca minlen(v) minlen(v) \u5982\u4e0b\uff1a minlen(v)=len(link(v))+1. minlen(v)=len(link(v))+1. \u5982\u679c\u6211\u4eec\u4ece\u4efb\u610f\u72b6\u6001 v_0 v_0 \u5f00\u59cb\u987a\u7740\u540e\u7f00\u94fe\u63a5\u904d\u5386\uff0c\u65e9\u665a\u90fd\u4f1a\u5230\u8fbe\u521d\u59cb\u72b6\u6001 t_0 t_0 \u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4 [minlen(v_i),\\,len(v_i)] [minlen(v_i),\\,len(v_i)] \u7684\u5e8f\u5217\uff0c\u4e14\u5b83\u4eec\u7684\u5e76\u96c6\u5f62\u6210\u4e86\u8fde\u7eed\u7684\u533a\u95f4 [0,\\,len(v_0)] [0,\\,len(v_0)] \u3002 \u7b97\u6cd5 \u00b6 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u7b97\u6cd5\u672c\u8eab\u4e86\u3002\u8fd9\u4e2a\u7b97\u6cd5\u662f \u5728\u7ebf \u7b97\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u9010\u4e2a\u52a0\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u6b65\u4e2d\u5bf9\u5e94\u5730\u7ef4\u62a4\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u7ebf\u6027\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u5c06\u53ea\u4fdd\u5b58 len len \u548c link link \u7684\u503c\u548c\u6bcf\u4e2a\u72b6\u6001\u7684\u4e00\u4e2a\u8f6c\u79fb\u5217\u8868\uff0c\u6211\u4eec\u4e0d\u4f1a\u6807\u8bb0\u7ec8\u6b62\u72b6\u6001\uff08\u4f46\u662f\u6211\u4eec\u7a0d\u540e\u4f1a\u5c55\u793a\u5728\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u540e\u5982\u4f55\u5206\u914d\u8fd9\u4e9b\u6807\u8bb0\uff09\u3002 \u4e00\u5f00\u59cb\u540e\u7f00\u81ea\u52a8\u673a\u53ea\u5305\u542b\u4e00\u4e2a\u72b6\u6001 t_0 t_0 \uff0c\u7f16\u53f7\u4e3a 0 0 \uff08\u5176\u5b83\u72b6\u6001\u7684\u7f16\u53f7\u4e3a 1,\\,2,\\,\\ldots 1,\\,2,\\,\\ldots \uff09\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5206\u914d\u7ed9\u5b83 len=0 len=0 \u548c link=-1 link=-1 \uff08 -1 -1 \u8868\u793a\u4e00\u4e2a\u865a\u62df\u7684\u4e0d\u5b58\u5728\u7684\u72b6\u6001\uff09\u3002 \u73b0\u5728\u6574\u4e2a\u4efb\u52a1\u8f6c\u5316\u4e3a\u5b9e\u73b0\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 c c \u7684\u8fc7\u7a0b\u3002\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a \u4ee4 last last \u4e3a\u5bf9\u5e94\u6dfb\u52a0\u5b57\u7b26 c c \u4e4b\u524d\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\uff08\u4e00\u5f00\u59cb\u6211\u4eec\u8bbe\u7f6e last=0 last=0 \u4e14\u6211\u4eec\u4f1a\u5728\u7b97\u6cd5\u7684\u6700\u540e\u4e00\u6b65\u5bf9\u5e94\u5730\u66f4\u65b0 last last \uff09\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u72b6\u6001 cur cur \uff0c\u5e76\u5c06 len(cur) len(cur) \u8d4b\u503c\u4e3a len(last)+1 len(last)+1 \uff0c\u5728\u8fd9\u65f6 link(cur) link(cur) \u7684\u503c\u8fd8\u672a\u77e5\u3002 \u73b0\u5728\u6211\u4eec\u6309\u4ee5\u4e0b\u6d41\u7a0b\u8fdb\u884c\uff1a\u6211\u4eec\u4ece\u72b6\u6001 last last \u5f00\u59cb\u3002\u5982\u679c\u8fd8\u6ca1\u6709\u5230\u5b57\u7b26 c c \u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u5c31\u6dfb\u52a0\u4e00\u4e2a\u5230\u72b6\u6001 cur cur \u7684\u8f6c\u79fb\uff0c\u904d\u5386\u540e\u7f00\u94fe\u63a5\u3002\u5982\u679c\u5728\u67d0\u4e2a\u70b9\u5df2\u7ecf\u5b58\u5728\u5230\u5b57\u7b26 c c \u7684\u540e\u7f00\u94fe\u63a5\uff0c\u6211\u4eec\u5c31\u505c\u4e0b\u6765\uff0c\u5e76\u5c06\u8fd9\u4e2a\u72b6\u6001\u6807\u8bb0\u4e3a p p \u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u6837\u7684\u72b6\u6001 p p \uff0c\u6211\u4eec\u5c31\u5230\u8fbe\u4e86\u865a\u62df\u72b6\u6001 -1 -1 \uff0c\u6211\u4eec\u5c06 link(cur) link(cur) \u8d4b\u503c\u4e3a 0 0 \u5e76\u9000\u51fa\u3002 \u5047\u8bbe\u73b0\u5728\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u72b6\u6001 p p \uff0c\u5176\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b57\u7b26 c c \uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u5230\u7684\u72b6\u6001\u6807\u8bb0\u4e3a q q \u3002 \u73b0\u5728\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\u4e24\u79cd\u72b6\u6001\uff0c\u8981\u4e48 len(p) + 1 = len(q) len(p) + 1 = len(q) \uff0c\u8981\u4e48\u4e0d\u662f\u3002 \u5982\u679c len(p)+1=len(q) len(p)+1=len(q) \uff0c\u6211\u4eec\u53ea\u8981\u5c06 link(cur) link(cur) \u8d4b\u503c\u4e3a q q \u5e76\u9000\u51fa\u3002 \u5426\u5219\u5c31\u4f1a\u6709\u4e9b\u590d\u6742\u3002\u9700\u8981 \u590d\u5236 \u72b6\u6001 q q \uff1a\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u72b6\u6001 clone clone \uff0c\u590d\u5236 q q \u7684\u9664\u4e86 len len \u7684\u503c\u4ee5\u5916\u7684\u6240\u6709\u4fe1\u606f\uff08\u540e\u7f00\u94fe\u63a5\u548c\u8f6c\u79fb\uff09\u3002\u6211\u4eec\u5c06 len(clone) len(clone) \u8d4b\u503c\u4e3a len(p)+1 len(p)+1 \u3002 \u590d\u5236\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u540e\u7f00\u94fe\u63a5\u4ece cur cur \u6307\u5411 clone clone \uff0c\u4e5f\u4ece q q \u6307\u5411 clone clone \u3002 \u6700\u7ec8\u6211\u4eec\u9700\u8981\u4f7f\u7528\u540e\u7f00\u94fe\u63a5\u4ece\u72b6\u6001 p p \u8fd4\u56de\uff0c\u56e0\u4e3a\u5b58\u5728\u4e00\u6761\u901a\u8fc7 c c \u5230\u72b6\u6001 q q \u7684\u8f6c\u79fb\uff0c\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u91cd\u5b9a\u5411\u6240\u6709\u72b6\u6001\u5230\u72b6\u6001 clone clone \u3002 \u4ee5\u4e0a\u4e09\u79cd\u60c5\u51b5\uff0c\u5728\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b\u4e4b\u540e\uff0c\u6211\u4eec\u5c06 last last \u7684\u503c\u66f4\u65b0\u4e3a\u72b6\u6001 cur cur \u3002 \u5982\u679c\u6211\u4eec\u8fd8\u60f3\u77e5\u9053\u54ea\u4e9b\u72b6\u6001\u662f \u7ec8\u6b62\u72b6\u6001 \u800c\u54ea\u4e9b\u4e0d\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e3a\u5b57\u7b26\u4e32 s s \u6784\u9020\u5b8c\u5b8c\u6574\u7684\u540e\u7f00\u81ea\u52a8\u673a\u540e\u627e\u5230\u6240\u6709\u7684\u7ec8\u6b62\u72b6\u6001\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4ece\u5bf9\u5e94\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u72b6\u6001\uff08\u5b58\u50a8\u5728\u53d8\u91cf last last \u4e2d\uff09\uff0c\u904d\u5386\u5b83\u7684\u540e\u7f00\u94fe\u63a5\uff0c\u76f4\u5230\u5230\u8fbe\u521d\u59cb\u72b6\u6001\u3002\u6211\u4eec\u5c06\u6240\u6709\u904d\u5386\u5230\u7684\u8282\u70b9\u90fd\u6807\u8bb0\u4e3a\u7ec8\u6b62\u8282\u70b9\u3002\u5bb9\u6613\u7406\u89e3\u8fd9\u6837\u505a\u6211\u4eec\u4f1a\u7cbe\u786e\u5730\u6807\u8bb0\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u540e\u7f00\uff0c\u8fd9\u4e9b\u72b6\u6001\u6070\u597d\u662f\u7ec8\u6b62\u72b6\u6001\u3002 \u5728\u4e0b\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u89c2\u5bdf\u7b97\u6cd5\u6bcf\u4e00\u6b65\u7684\u7ec6\u8282\uff0c\u5e76\u8bc1\u660e\u5b83\u7684 \u6b63\u786e\u6027 \u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ea\u6ce8\u610f\u5230\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u4e3a s s \u7684\u6bcf\u4e2a\u5b57\u7b26\u521b\u5efa\u4e00\u4e2a\u6216\u4e24\u4e2a\u65b0\u72b6\u6001\u6240\u4ee5\u540e\u7f00\u81ea\u52a8\u673a\u53ea\u5305\u542b \u7ebf\u6027\u4e2a \u72b6\u6001\u3002 \u8f6c\u79fb\u4e2a\u6570\u662f\u7ebf\u6027\u89c4\u6a21\u7684\uff0c\u4ee5\u53ca\u603b\u4f53\u4e0a\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u7ebf\u6027\u89c4\u6a21\u7684\uff0c\u8fd9\u4e24\u70b9\u8fd8\u4e0d\u90a3\u4e48\u6e05 \u695a\u3002 \u6b63\u786e\u6027\u8bc1\u660e \u00b6 \u82e5\u4e00\u4e2a\u8f6c\u79fb (p,\\,q) (p,\\,q) \u6ee1\u8db3 len(p)+1=len(q) len(p)+1=len(q) \u5219\u6211\u4eec\u79f0\u8fd9\u4e2a\u8f6c\u79fb\u662f \u8fde\u7eed\u7684 \u3002\u5426\u5219\uff0c\u5373\u5f53 len(p)+1<len(q) len(p)+1<len(q) \u65f6\uff0c\u8fd9\u4e2a\u8f6c\u79fb\u88ab\u79f0\u4e3a \u4e0d\u8fde\u7eed\u7684 \u3002 \u4ece\u7b97\u6cd5\u63cf\u8ff0\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u8fde\u7eed\u7684\u548c\u975e\u8fde\u7eed\u7684\u8f6c\u79fb\u662f\u7b97\u6cd5\u7684\u4e0d\u540c\u60c5\u51b5\u3002\u8fde\u7eed\u7684\u8f6c\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u4e0d\u4f1a\u518d\u6539\u53d8\u4e86\u3002\u4e0e\u6b64\u76f8\u53cd\uff0c\u5f53\u5411\u5b57\u7b26\u4e32\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u65f6\uff0c\u975e\u8fde\u7eed\u7684\u8f6c\u79fb\u53ef\u80fd\u4f1a\u6539\u53d8\uff08\u8f6c\u79fb\u8fb9\u7684\u7aef\u70b9\u53ef\u80fd\u4f1a\u6539\u53d8\uff09\u3002 \u4e3a\u4e86\u907f\u514d\u5f15\u8d77\u6b67\u4e49\uff0c\u6211\u4eec\u8bb0\u5411\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u63d2\u5165\u5f53\u524d\u5b57\u7b26 c c \u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u4e3a s s \u3002 \u7b97\u6cd5\u4ece\u521b\u5efa\u4e00\u4e2a\u65b0\u72b6\u6001 cur cur \u5f00\u59cb\uff0c\u5bf9\u5e94\u4e8e\u6574\u4e2a\u5b57\u7b26\u4e32 s+c s+c \u3002\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u7684\u539f\u56e0\u5f88\u6e05\u695a\u3002\u4e0e\u6b64\u540c\u65f6\u6211\u4eec\u4e5f\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u548c\u4e00\u4e2a\u65b0\u7684\u7b49\u4ef7\u7c7b\u3002 \u5728\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u4ece\u5bf9\u5e94\u4e8e\u6574\u4e2a\u5b57\u7b26\u4e32 s s \u7684\u72b6\u6001\u901a\u8fc7\u540e\u7f00\u94fe\u63a5\u8fdb\u884c\u904d\u5386\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u72b6\u6001\uff0c\u6211\u4eec\u5c1d\u8bd5\u6dfb\u52a0\u4e00\u4e2a\u4ece\u5b57\u7b26 c c \u5230\u65b0\u72b6\u6001 cur cur \u7684\u8f6c\u79fb\u3002\u7136\u800c\u6211\u6211\u4eec\u53ea\u80fd\u6dfb\u52a0\u4e0e\u539f\u6765\u5df2\u5b58\u5728\u7684\u8f6c\u79fb\u4e0d\u51b2\u7a81\u7684\u8f6c\u79fb\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u627e\u5230\u5df2\u5b58\u5728\u7684 c c \u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u505c\u6b62\u3002 \u6700\u7b80\u5355\u7684\u60c5\u51b5\u662f\u6211\u4eec\u5230\u8fbe\u4e86\u865a\u62df\u72b6\u6001 -1 -1 \uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e3a\u6240\u6709 s s \u7684\u540e\u7f00\u6dfb\u52a0\u4e86 c c \u7684\u8f6c\u79fb\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5b57\u7b26 c c \u4ece\u672a\u5728\u5b57\u7b26\u4e32 s s \u4e2d\u51fa\u73b0\u8fc7\u3002\u56e0\u6b64 cur cur \u7684\u540e\u7f00\u94fe\u63a5\u4e3a\u72b6\u6001 0 0 \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u627e\u5230\u4e86\u73b0\u6709\u7684\u8f6c\u79fb (p,\\,q) (p,\\,q) \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c1d\u8bd5\u5411\u81ea\u52a8\u673a\u5185\u6dfb\u52a0\u4e00\u4e2a \u5df2\u7ecf\u5b58\u5728\u7684 \u5b57\u7b26\u4e32 x+c x+c \uff08\u5176\u4e2d x x \u4e3a s s \u7684\u4e00\u4e2a\u540e\u7f00\uff0c\u4e14\u5b57\u7b26\u4e32 x+c x+c \u5df2\u7ecf\u4f5c\u4e3a s s \u7684\u4e00\u4e2a\u5b50\u4e32\u51fa\u73b0\u8fc7\u4e86\uff09\u3002\u56e0\u4e3a\u6211\u4eec\u5047\u8bbe\u5b57\u7b26\u4e32 s s \u7684\u81ea\u52a8\u673a\u7684\u6784\u9020\u662f\u6b63\u786e\u7684\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u5728\u8fd9\u91cc\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8f6c\u79fb\u3002 \u7136\u800c\uff0c\u6709\u4e00\u4e2a\u96be\u70b9\u3002\u4ece\u72b6\u6001 cur cur \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u5e94\u8be5\u8fde\u63a5\u5230\u54ea\u4e2a\u72b6\u6001\u5462\uff1f\u6211\u4eec\u8981\u628a\u540e\u7f00\u94fe\u63a5\u8fde\u5230\u4e00\u4e2a\u72b6\u6001\u4e0a\uff0c\u4e14\u5176\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u6070\u597d\u662f x+c x+c \uff0c\u5373\u8fd9\u4e2a\u72b6\u6001\u7684 len len \u5e94\u8be5\u662f len(p)+1 len(p)+1 \u3002\u7136\u800c\u8fd8\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u72b6\u6001\uff0c\u5373 len(q)>len(p)+1 len(q)>len(p)+1 \u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u901a\u8fc7\u62c6\u5f00\u72b6\u6001 q q \u6765\u521b\u5efa\u4e00\u4e2a\u8fd9\u6837\u7684\u72b6\u6001\u3002 \u5982\u679c\u8f6c\u79fb (p,\\,q) (p,\\,q) \u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48 len(q)=len(p)+1 len(q)=len(p)+1 \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e00\u5207\u90fd\u5f88\u7b80\u5355\u3002\u6211\u4eec\u53ea\u9700\u8981\u5c06 cur cur \u7684\u540e\u7f00\u94fe\u63a5\u6307\u5411\u72b6\u6001 q q \u3002 \u5426\u5219\u8f6c\u79fb\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u5373 len(q)>len(p)+1 len(q)>len(p)+1 \uff0c\u8fd9\u610f\u5473\u7740\u72b6\u6001 q q \u4e0d\u53ea\u5bf9\u5e94\u4e8e\u957f\u5ea6\u4e3a len(p)+1 len(p)+1 \u7684\u540e\u7f00 s+c s+c \uff0c\u8fd8\u5bf9\u5e94\u4e8e s s \u7684\u66f4\u957f\u7684\u5b50\u4e32\u3002\u9664\u4e86\u5c06\u72b6\u6001 q q \u62c6\u6210\u4e24\u4e2a\u5b50\u72b6\u6001\u4ee5\u5916\u6211\u4eec\u522b\u65e0\u4ed6\u6cd5\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5b50\u72b6\u6001\u7684\u957f\u5ea6\u5c31\u662f len(p)+1 len(p)+1 \u4e86\u3002 \u6211\u4eec\u5982\u4f55\u62c6\u5f00\u4e00\u4e2a\u72b6\u6001\u5462\uff1f\u6211\u4eec \u590d\u5236 \u72b6\u6001 q q \uff0c\u4ea7\u751f\u4e00\u4e2a\u72b6\u6001 clone clone \uff0c\u6211\u4eec\u5c06 len(clone) len(clone) \u8d4b\u503c\u4e3a len(p)+1 len(p)+1 \u3002\u7531\u4e8e\u6211\u4eec\u4e0d\u60f3\u6539\u53d8\u904d\u5386\u5230 q q \u7684\u8def\u5f84\uff0c\u6211\u4eec\u5c06 q q \u7684\u6240\u6709\u8f6c\u79fb\u590d\u5236\u5230 clone clone \u3002\u6211\u4eec\u4e5f\u5c06\u4ece clone clone \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u8bbe\u7f6e\u4e3a q q \u7684\u540e\u7f00\u94fe\u63a5\u7684\u76ee\u6807\uff0c\u5e76\u8bbe\u7f6e q q \u7684\u540e\u7f00\u94fe\u63a5\u4e3a clone clone \u3002 \u5728\u62c6\u5f00\u72b6\u6001\u540e\uff0c\u6211\u4eec\u5c06\u4ece cur cur \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u8bbe\u7f6e\u4e3a clone clone \u3002 \u6700\u540e\u4e00\u6b65\u6211\u4eec\u5c06\u4e00\u4e9b\u5230 q q \u8f6c\u79fb\u91cd\u5b9a\u5411\u5230 clone clone \u3002\u6211\u4eec\u9700\u8981\u4fee\u6539\u54ea\u4e9b\u8f6c\u79fb\u5462\uff1f\u53ea\u91cd\u5b9a\u5411\u76f8\u5f53\u4e8e\u6240\u6709\u5b57\u7b26\u4e32 w+c w+c \uff08\u5176\u4e2d w w \u662f p p \u7684\u6700\u957f\u5b57\u7b26\u4e32\uff09\u7684\u540e\u7f00\u5c31\u591f\u4e86\u3002\u5373\uff0c\u6211\u4eec\u9700\u8981\u7ee7\u7eed\u6cbf\u7740\u540e\u7f00\u94fe\u63a5\u904d\u5386\uff0c\u4ece\u9876\u70b9 p p \u76f4\u5230\u865a\u62df\u72b6\u6001 -1 -1 \u6216\u8005\u662f\u8f6c\u79fb\u5230\u4e0d\u662f\u72b6\u6001 q q \u7684\u4e00\u4e2a\u8f6c\u79fb\u3002 \u5bf9\u64cd\u4f5c\u6b21\u6570\u4e3a\u7ebf\u6027\u7684\u8bc1\u660e \u00b6 \u9996\u5148\u6211\u4eec\u5047\u8bbe\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a \u5e38\u6570 \u3002\u5982\u679c\u5b57\u7b26\u96c6\u5927\u5c0f\u4e0d\u662f\u5e38\u6570\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e0d\u662f\u7ebf\u6027\u7684\u3002\u4ece\u4e00\u4e2a\u9876\u70b9\u51fa\u53d1\u7684\u8f6c\u79fb\u5b58\u50a8\u5728\u652f\u6301\u5feb\u901f\u67e5\u8be2\u548c\u63d2\u5165\u7684\u5e73\u8861\u6811\u4e2d\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u8bb0 k k \u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\uff0c\u5219\u7b97\u6cd5\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log k) O(n\\log k) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u7136\u800c\u5982\u679c\u5b57\u7b26\u96c6\u8db3\u591f\u5c0f\uff0c\u53ef\u4ee5\u4e0d\u5199\u5e73\u8861\u6811\uff0c\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u5c06\u6bcf\u4e2a\u9876\u70b9\u7684\u8f6c\u79fb\u5b58\u50a8\u4e3a\u957f\u5ea6\u4e3a k k \u7684\u6570\u7ec4\uff08\u7528\u4e8e\u5feb\u901f\u67e5\u8be2\uff09\u548c\u94fe\u8868\uff08\u7528\u4e8e\u5feb\u901f\u904d\u5386\u6240\u6709\u53ef\u7528\u5173\u952e\u5b57\uff09\u3002\u8fd9\u6837\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(nk) O(nk) \u3002 \u6240\u4ee5\u6211\u4eec\u5c06\u8ba4\u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u4e3a\u5e38\u6570\uff0c\u5373\u6bcf\u6b21\u5bf9\u4e00\u4e2a\u5b57\u7b26\u641c\u7d22\u8f6c\u79fb\u3001\u6dfb\u52a0\u8f6c\u79fb\u3001\u67e5\u627e\u4e0b\u4e00\u4e2a\u8f6c\u79fb\u2014\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(1) O(1) \u3002 \u5982\u679c\u6211\u4eec\u8003\u8651\u7b97\u6cd5\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u7b97\u6cd5\u4e2d\u6709\u4e09\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u660e\u663e\u662f\u7ebf\u6027\u7684\uff1a \u7b2c\u4e00\u5904\u662f\u904d\u5386\u6240\u6709\u72b6\u6001 last last \u7684\u540e\u7f00\u94fe\u63a5\uff0c\u6dfb\u52a0\u5b57\u7b26 c c \u7684\u8f6c\u79fb\u3002 \u7b2c\u4e8c\u5904\u662f\u5f53\u72b6\u6001 q q \u88ab\u590d\u5236\u5230\u4e00\u4e2a\u65b0\u7684\u72b6\u6001 clone clone \u65f6\u590d\u5236\u8f6c\u79fb\u7684\u8fc7\u7a0b\u3002 \u7b2c\u4e09\u5904\u662f\u4fee\u6539\u6307\u5411 q q \u7684\u8f6c\u79fb\uff0c\u5c06\u5b83\u4eec\u91cd\u5b9a\u5411\u5230 clone clone \u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u4f7f\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7684\u5927\u5c0f\uff08\u72b6\u6001\u6570\u548c\u8f6c\u79fb\u6570\uff09\u4e3a \u7ebf\u6027\u7684 \u7684\u4e8b\u5b9e\uff08\u5bf9\u72b6\u6001\u6570\u662f\u7ebf\u6027\u7684\u7684\u8bc1\u660e\u5c31\u662f\u7b97\u6cd5\u672c\u8eab\uff0c\u5bf9\u72b6\u6001\u6570\u4e3a\u7ebf\u6027\u7684\u7684\u8bc1\u660e\u5c06\u5728\u7a0d\u540e\u5b9e\u73b0\u7b97\u6cd5\u540e\u7ed9\u51fa\uff09\u3002 \u56e0\u6b64\u4e0a\u8ff0 \u7b2c\u4e00\u5904\u548c\u7b2c\u4e8c\u5904 \u7684\u603b\u590d\u6742\u5ea6\u663e\u7136\u4e3a\u7ebf\u6027\u7684\uff0c\u56e0\u4e3a\u5355\u6b21\u64cd\u4f5c\u5747\u644a\u53ea\u4e3a\u81ea\u52a8\u673a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u8f6c\u79fb\u3002 \u8fd8\u9700\u4e3a \u7b2c\u4e09\u5904 \u4f30\u8ba1\u603b\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u5c06\u6700\u521d\u6307\u5411 q q \u7684\u8f6c\u79fb\u91cd\u5b9a\u5411\u5230 clone clone \u3002\u6211\u4eec\u8bb0 v=longest(p) v=longest(p) \uff0c\u8fd9\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\uff0c\u6bcf\u6b21\u8fed\u4ee3\u957f\u5ea6\u90fd\u9012\u51cf\u2014\u56e0\u4e3a\u4f5c\u4e3a\u5b57\u7b26\u4e32 s s \u7684\u4f4d\u7f6e\u968f\u7740\u6bcf\u6b21\u8fed\u4ee3\u90fd\u5355\u8c03\u4e0a\u5347\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5728\u5faa\u73af\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e4b\u524d\uff0c\u76f8\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 v v \u5728\u8ddd\u79bb last last \u7684\u6df1\u5ea6\u4e3a k k (k\\ge2) (k\\ge2) \u7684\u4f4d\u7f6e\u4e0a\uff08\u6df1\u5ea6\u8bb0\u4e3a\u540e\u7f00\u94fe\u63a5\u7684\u6570\u91cf\uff09\uff0c\u90a3\u4e48\u5728\u6700\u540e\u4e00\u6b21\u8fed\u4ee3\u540e\uff0c\u5b57\u7b26\u4e32 v+c v+c \u5c06\u4f1a\u6210\u4e3a\u8def\u5f84\u4e0a\u7b2c\u4e8c\u4e2a\u4ece cur cur \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\uff08\u5b83\u5c06\u4f1a\u6210\u4e3a\u65b0\u7684 last last \u7684\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u5faa\u73af\u4e2d\u7684\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u4f7f\u4f5c\u4e3a\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u7684\u5b57\u7b26\u4e32 longest(link(link(last)) longest(link(link(last)) \u7684\u4f4d\u7f6e\u5355\u8c03\u9012\u589e\u3002\u56e0\u6b64\u8fd9\u4e2a\u5faa\u73af\u6700\u591a\u4e0d\u4f1a\u6267\u884c\u8d85\u8fc7 n n \u6b21\u8fed\u4ee3\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u9700\u8981\u8bc1\u660e\u7684\u3002 \u5b9e\u73b0 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u63cf\u8ff0\u4e00\u79cd\u5b58\u50a8\u4e00\u4e2a\u8f6c\u79fb\u7684\u5168\u90e8\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u52a0\u5165\u4e00\u4e2a\u7ec8\u6b62\u6807\u8bb0\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e9b\u5176\u5b83\u4fe1\u606f\u3002\u6211\u4eec\u5c06\u4f1a\u7528\u4e00\u4e2a map \u5b58\u50a8\u8f6c\u79fb\u7684\u5217\u8868\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u603b\u8ba1 O(n) O(n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u548c O(n\\log k) O(n\\log k) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5904\u7406\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 1 2 3 4 struct state { int len , link ; map < char , int > next ; }; \u540e\u7f00\u81ea\u52a8\u673a\u672c\u8eab\u5c06\u4f1a\u5b58\u50a8\u5728\u4e00\u4e2a state \u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u3002\u6211\u4eec\u8bb0\u5f55\u5f53\u524d\u81ea\u52a8\u673a\u7684\u5927\u5c0f sz \u548c\u53d8\u91cf last \uff0c\u5f53\u524d\u6574\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u72b6\u6001\u3002 1 2 3 const int MAXLEN = 100000 ; state st [ MAXLEN * 2 ]; int sz , last ; \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u521d\u59cb\u5316\u540e\u7f00\u81ea\u52a8\u673a\uff08\u521b\u5efa\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u72b6\u6001\u7684\u540e\u7f00\u81ea\u52a8\u673a\uff09\u3002 1 2 3 4 5 6 void sa_init () { st [ 0 ]. len = 0 ; st [ 0 ]. link = - 1 ; sz ++ ; last = 0 ; } \u6700\u7ec8\u6211\u4eec\u7ed9\u51fa\u4e3b\u51fd\u6570\u7684\u5b9e\u73b0\u2014\u7ed9\u5f53\u524d\u884c\u672b\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5bf9\u5e94\u5730\u91cd\u5efa\u81ea\u52a8\u673a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void sa_extend ( char c ) { int cur = sz ++ ; st [ cur ]. len = st [ last ]. len + 1 ; int p = last ; while ( p != - 1 && ! st [ p ]. next . count ( c )) { st [ p ]. next [ c ] = cur ; p = st [ p ]. link ; } if ( p == - 1 ) { st [ cur ]. link = 0 ; } else { int q = st [ p ]. next [ c ]; if ( st [ p ]. len + 1 == st [ q ]. len ) { st [ cur ]. link = q ; } else { int clone = sz ++ ; st [ clone ]. len = st [ p ]. len + 1 ; st [ clone ]. next = st [ q ]. next ; st [ clone ]. link = st [ q ]. link ; while ( p != - 1 && st [ p ]. next [ c ] == q ) { st [ p ]. next [ c ] = clone ; p = st [ p ]. link ; } st [ q ]. link = st [ cur ]. link = clone ; } } last = cur ; } \u6b63\u5982\u4e4b\u524d\u63d0\u5230\u7684\u4e00\u6837\uff0c\u5982\u679c\u4f60\u7528\u5185\u5b58\u6362\u65f6\u95f4\uff08\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(nk) O(nk) \uff0c\u5176\u4e2d k k \u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 O(n) O(n) \u7684\u65f6\u95f4\u5185\u6784\u9020\u5b57\u7b26\u96c6\u5927\u5c0f k k \u4efb\u610f\u7684\u540e\u7f00\u81ea\u52a8\u673a\u3002\u4f46\u662f\u8fd9\u6837\u4f60\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u72b6\u6001\u50a8\u5b58\u4e00\u4e2a\u5927\u5c0f\u4e3a k k \u7684\u6570\u7ec4\uff08\u7528\u4e8e\u5feb\u901f\u8df3\u8f6c\u5230\u8f6c\u79fb\u7684\u5b57\u7b26\uff09\uff0c\u548c\u53e6\u5916\u4e00\u4e2a\u6240\u6709\u8f6c\u79fb\u7684\u94fe\u8868\uff08\u7528\u4e8e\u5feb\u901f\u5728\u8f6c\u79fb\u4e2d\u8fed\u4ee3\uff09\u3002 \u66f4\u591a\u7684\u6027\u8d28 \u00b6 \u72b6\u6001\u6570 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5b83\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u72b6\u6001\u6570 \u4e0d\u4f1a\u8d85\u8fc7 2n-1 2n-1 \uff08\u5047\u8bbe n\\ge2 n\\ge2 \uff09\u3002 \u5bf9\u4e0a\u8ff0\u7ed3\u8bba\u7684\u8bc1\u660e\u5c31\u662f\u7b97\u6cd5\u672c\u8eab\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u81ea\u52a8\u673a\u542b\u6709\u4e00\u4e2a\u72b6\u6001\uff0c\u7b2c\u4e00\u6b21\u548c\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u53ea\u4f1a\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5269\u4f59\u7684 n-2 n-2 \u6b65\u4e2d\u6bcf\u6b65\u4f1a\u521b\u5efa\u81f3\u591a 2 2 \u4e2a\u72b6\u6001\u3002 \u7136\u800c\u6211\u4eec\u4e5f\u80fd\u5728 \u4e0d\u77e5\u9053\u8fd9\u4e2a\u7b97\u6cd5 \u7684\u60c5\u51b5\u4e0b \u5c55\u793a \u8fd9\u4e2a\u4f30\u8ba1\u503c\u3002\u6211\u4eec\u56de\u5fc6\u4e00\u4e0b\u72b6\u6001\u6570\u7b49\u4e8e\u4e0d\u540c\u7684 endpos endpos \u96c6\u5408\u4e2a\u6570\u3002\u53e6\u5916\u8fd9\u4e9b endpos endpos \u96c6\u5408\u5f62\u6210\u4e86\u4e00\u68f5\u6811\uff08\u7956\u5148\u8282\u70b9\u7684\u96c6\u5408\u5305\u542b\u4e86\u5b83\u6240\u6709\u5b69\u5b50\u8282\u70b9\u7684\u96c6\u5408\uff09\u3002\u8003\u8651\u5c06\u8fd9\u68f5\u6811\u7a0d\u5fae\u53d8\u5f62\u4e00\u4e0b\uff1a\u53ea\u8981\u5b83\u6709\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u5185\u90e8\u9876\u70b9\uff08\u8fd9\u610f\u5473\u7740\u8be5\u5b50\u8282\u70b9\u7684\u96c6\u5408\u81f3\u5c11\u9057\u6f0f\u4e86\u5b83\u7684\u7236\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u542b\u6709\u8fd9\u4e2a\u9057\u6f0f\u4f4d\u7f6e\u7684\u96c6\u5408\u3002\u6700\u540e\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u68f5\u6bcf\u4e00\u4e2a\u5185\u90e8\u9876\u70b9\u7684\u5ea6\u6570\u5927\u4e8e\u4e00\u7684\u6811\uff0c\u5e76\u4e14\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 n n \u3002\u56e0\u6b64\u8fd9\u6837\u7684\u6811\u91cc\u6709\u4e0d\u8d85\u8fc7 2n-1 2n-1 \u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u786e\u5b9a\u7684 n n \uff0c\u72b6\u6001\u6570\u7684\u4e0a\u754c\u662f\u786e\u5b9a\u7684\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u662f\uff1a ``abbb\\ldots bbb\\!\" ``abbb\\ldots bbb\\!\" \u4ece\u7b2c\u4e09\u6b21\u8fed\u4ee3\u540e\u7684\u6bcf\u6b21\u8fed\u4ee3\uff0c\u7b97\u6cd5\u90fd\u4f1a\u62c6\u5f00\u4e00\u4e2a\u72b6\u6001\uff0c\u6700\u7ec8\u4ea7\u751f\u6070\u597d 2n-1 2n-1 \u4e2a\u72b6\u6001\u3002 \u8f6c\u79fb\u6570 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5b83\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u8f6c\u79fb\u6570 \u4e0d\u4f1a\u8d85\u8fc7 3n-4 3n-4 \uff08\u5047\u8bbe n\\ge 3 n\\ge 3 \uff09\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a \u6211\u4eec\u9996\u5148\u4f30\u8ba1\u8fde\u7eed\u7684\u8f6c\u79fb\u7684\u6570\u91cf\u3002\u8003\u8651\u81ea\u52a8\u673a\u4e2d\u4ece\u72b6\u6001 t_0 t_0 \u5f00\u59cb\u7684\u6700\u957f\u8def\u5f84\u7684\u751f\u6210\u6811\u3002\u751f\u6210\u6811\u7684\u9aa8\u67b6\u53ea\u5305\u542b\u8fde\u7eed\u7684\u8fb9\uff0c\u56e0\u6b64\u6570\u91cf\u5c11\u4e8e\u72b6\u6001\u6570\uff0c\u5373\uff0c\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 2n-2 2n-2 \u3002 \u73b0\u5728\u6211\u4eec\u6765\u4f30\u8ba1\u975e\u8fde\u7eed\u7684\u8f6c\u79fb\u7684\u6570\u91cf\u3002\u4ee4\u5f53\u524d\u975e\u8fde\u7eed\u8f6c\u79fb\u4e3a (p,\\,q) (p,\\,q) \uff0c\u5176\u5b57\u7b26\u4e3a c c \u3002\u6211\u4eec\u53d6\u5b83\u7684\u5bf9\u5e94\u5b57\u7b26\u4e32 u+c+w u+c+w \uff0c\u5176\u4e2d\u5b57\u7b26\u4e32 u u \u5bf9\u5e94\u4e8e\u521d\u59cb\u72b6\u6001\u5230 p p \u7684\u6700\u957f\u8def\u5f84\uff0c w w \u5bf9\u5e94\u4e8e\u4ece p p \u5230\u4efb\u610f\u7ec8\u6b62\u72b6\u6001\u7684\u6700\u957f\u8def\u5f84\u3002\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u5b8c\u6574\u7684\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u5f62\u5982 u+c+w u+c+w \u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u540c\u7684\uff08\u56e0\u4e3a\u5b57\u7b26\u4e32 u u \u548c w w \u4ec5\u7531\u5b8c\u6574\u7684\u8f6c\u79fb\u7ec4\u6210\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u7531\u7ec8\u6b62\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u6bcf\u4e2a\u5f62\u5982 u+c+w u+c+w \u7684\u5b57\u7b26\u4e32\u90fd\u662f\u6574\u4e2a\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\u3002\u56e0\u4e3a s s \u53ea\u6709 n n \u4e2a\u975e\u7a7a\u540e\u7f00\uff0c\u4e14\u5f62\u5982 u+c+w u+c+w \u7684\u5b57\u7b26\u4e32\u90fd\u4e0d\u5305\u542b s s \uff08\u56e0\u4e3a\u6574\u4e2a\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b8c\u6574\u7684\u8f6c\u79fb\uff09\uff0c\u6240\u4ee5\u975e\u5b8c\u6574\u7684\u8f6c\u79fb\u7684\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc7 n-1 n-1 \u3002 \u5c06\u4ee5\u4e0a\u4e24\u4e2a\u4f30\u8ba1\u503c\u7ed3\u5408\u8d77\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c 3n-3 3n-3 \u3002\u7136\u800c\uff0c\u6700\u5927\u7684\u72b6\u6001\u6570\u53ea\u80fd\u5728\u6d4b\u8bd5\u6570\u636e ``abbb\\ldots bbb\\!\" ``abbb\\ldots bbb\\!\" \u4e2d\u4ea7\u751f\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\u8f6c\u79fb\u6570\u91cf\u663e\u7136\u5c11\u4e8e 3n-3 3n-3 \uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u66f4\u4e3a\u7d27\u786e\u7684\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8f6c\u79fb\u6570\u7684\u4e0a\u754c\uff1a 3n-4 3n-4 \u3002 \u4e0a\u754c\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32 ``abbb\\ldots bbbc\\!\" ``abbb\\ldots bbbc\\!\" \u8fbe\u5230\u3002 \u5e94\u7528 \u00b6 \u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4e00\u4e9b\u53ef\u4ee5\u7528\u540e\u7f00\u81ea\u52a8\u673a\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u7b80\u5355\uff0c\u6211\u4eec\u5047\u8bbe\u5b57\u7b26\u96c6\u7684\u5927\u5c0f k k \u4e3a\u5e38\u6570\uff0c\u5141\u8bb8\u6211\u4eec\u8ba4\u4e3a\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26\u548c\u904d\u5386\u7684\u590d\u6742\u5ea6\u4e3a\u5e38\u6570\u3002 \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u51fa\u73b0 \u00b6 \u7ed9\u4e00\u4e2a\u6587\u672c\u4e32 T T \u548c\u591a\u4e2a\u6a21\u5f0f\u4e32 P P \uff0c\u6211\u4eec\u8981\u68c0\u67e5\u5b57\u7b26\u4e32 P P \u662f\u5426\u4f5c\u4e3a T T \u7684\u4e00\u4e2a\u5b50\u4e32\u51fa\u73b0\u3002 \u6211\u4eec\u5728 O(length(T)) O(length(T)) \u7684\u65f6\u95f4\u5185\u4e3a\u6587\u672c\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002\u4e3a\u4e86\u68c0\u67e5\u6a21\u5f0f\u4e32 T T \u662f\u5426\u5728 T T \u4e2d\u51fa\u73b0\uff0c\u6211\u4eec\u6cbf\u8f6c\u79fb\uff08\u8fb9\uff09\u4ece t_0 t_0 \u5f00\u59cb\u6839\u636e P P \u7684\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u3002\u5982\u679c\u5728\u67d0\u4e2a\u70b9\u65e0\u6cd5\u8f6c\u79fb\u4e0b\u53bb\uff0c\u5219\u6a21\u5f0f\u4e32 P P \u4e0d\u662f T T \u7684\u4e00\u4e2a\u5b50\u4e32\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u8fd9\u6837\u5904\u7406\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32 P P \uff0c\u90a3\u4e48\u6a21\u5f0f\u4e32\u5728 T T \u4e2d\u51fa\u73b0\u8fc7\u3002\u56e0\u6b64 \u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32 P P \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(P)) O(length(P)) \u3002\u6b64\u5916\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u627e\u5230\u4e86\u6a21\u5f0f\u4e32 P P \u5728\u6587\u672c\u4e32\u4e2d\u51fa\u73b0\u7684\u6700\u5927\u524d\u7f00\u957f\u5ea6\u3002 \u4e0d\u540c\u5b50\u4e32\u4e2a\u6570 \u00b6 \u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \uff0c\u8ba1\u7b97\u4e0d\u540c\u5b50\u4e32\u7684\u4e2a\u6570\u3002 \u4e3a\u5b57\u7b26\u4e32 S S \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u6bcf\u4e2a S S \u7684\u5b50\u4e32\u90fd\u76f8\u5f53\u4e8e\u81ea\u52a8\u673a\u4e2d\u7684\u4e00\u4e9b\u8def\u5f84\u3002\u56e0\u6b64\u4e0d\u540c\u5b50\u4e32\u7684\u4e2a\u6570\u7b49\u4e8e\u81ea\u52a8\u673a\u4e2d\u4ee5 t_0 t_0 \u4e3a\u8d77\u70b9\u7684\u4e0d\u540c\u8def\u5f84\u7684\u6761\u6570\u3002 \u8003\u8651\u5230\u540e\u7f00\u81ea\u52a8\u673a\u4e3a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e0d\u540c\u8def\u5f84\u7684\u6761\u6570\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u3002 \u5373\uff0c\u4ee4 d[v] d[v] \u4e3a\u4ece\u72b6\u6001 v v \u5f00\u59cb\u7684\u8def\u5f84\u6570\u91cf\uff08\u5305\u62ec\u957f\u5ea6\u4e3a\u96f6\u7684\u8def\u5f84\uff09\uff0c\u5219\u6211\u4eec\u6709\u5982\u4e0b\u9012\u63a8\u65b9\u7a0b\u5f0f\uff1a d[v]=1+\\sum_{w:(v,\\,w,\\,c)\\in SA}d[w] d[v]=1+\\sum_{w:(v,\\,w,\\,c)\\in SA}d[w] \u5373\uff0c d[v] d[v] \u53ef\u4ee5\u8868\u793a\u4e3a\u6240\u6709 v v \u7684\u8f6c\u79fb\u7684\u672b\u7aef\u7684\u548c\u3002 \u6240\u4ee5\u4e0d\u540c\u5b50\u4e32\u7684\u4e2a\u6570\u4e3a d[t_0]-1 d[t_0]-1 \uff08\u56e0\u4e3a\u8981\u53bb\u6389\u7a7a\u5b50\u4e32\uff09\u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a O(length(S)) O(length(S)) \u3002 \u6240\u6709\u4e0d\u540c\u5b50\u4e32\u7684\u603b\u957f\u5ea6 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \uff0c\u8ba1\u7b97\u6240\u6709\u4e0d\u540c\u5b50\u4e32\u7684\u603b\u957f\u5ea6\u3002 \u672c\u9898\u505a\u6cd5\u4e0e\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u53ea\u662f\u73b0\u5728\u6211\u4eec\u9700\u8981\u8003\u8651\u5206\u4e24\u90e8\u5206\u8fdb\u884c\u52a8\u6001\u89c4\u5212\uff1a\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u91cf d[v] d[v] \u548c\u5b83\u4eec\u7684\u603b\u957f\u5ea6 ans[v] ans[v] \u3002 \u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u9898\u4e2d\u4ecb\u7ecd\u4e86\u5982\u4f55\u8ba1\u7b97 d[v] d[v] \u3002 ans[v] ans[v] \u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u901a\u8fc7\u4ee5\u4e0b\u9012\u63a8\u5f0f\u8ba1\u7b97\uff1a ans[v]=\\sum_{w:(v,\\,w,\\,c)\\in DAWG}d[w]+ans[w] ans[v]=\\sum_{w:(v,\\,w,\\,c)\\in DAWG}d[w]+ans[w] \u6211\u4eec\u53d6\u6bcf\u4e2a\u90bb\u63a5\u9876\u70b9 w w \u7684\u7b54\u6848\uff0c\u5e76\u52a0\u4e0a d[w] d[w] \uff08\u56e0\u4e3a\u4ece\u72b6\u6001 v v \u51fa\u53d1\u7684\u5b50\u4e32\u90fd\u589e\u52a0\u4e86\u4e00\u4e2a\u5b57\u7b26\uff09\u3002 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(length(S)) O(length(S)) \u3002 \u5b57\u5178\u5e8f\u7b2c k \u5927\u5b50\u4e32 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \u3002\u591a\u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u5b9a\u4e00\u4e2a\u6570 K_i K_i \uff0c\u67e5\u8be2\u6240\u6709\u5b50\u4e32\u4e2d\u8bcd\u5178\u5e8f\u7b2c k k \u5927\u7684\u5b50\u4e32\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u601d\u8def\u57fa\u4e8e\u524d\u4e24\u4e2a\u95ee\u9898\u7684\u601d\u8def\u3002\u5b57\u5178\u5e8f\u7b2c k k \u5927\u7684\u5b50\u4e32\u5bf9\u5e94\u4e8e\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u5b57\u5178\u5e8f\u7b2c k k \u5927\u7684\u8def\u5f84\u3002\u56e0\u6b64\u5728\u8ba1\u7b97\u6bcf\u4e2a\u72b6\u6001\u7684\u8def\u5f84\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ece\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6839\u5f00\u59cb\u627e\u5230\u7b2c k k \u5927\u7684\u8def\u5f84\u3002 \u9884\u5904\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(S)) O(length(S)) \uff0c\u5355\u6b21\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4e3a O(length(ans)\\cdot k) O(length(ans)\\cdot k) \uff08\u5176\u4e2d ans ans \u662f\u67e5\u8be2\u7684\u7b54\u6848\uff0c k k \u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\uff09\u3002 \u6700\u5c0f\u5faa\u73af\u79fb\u4f4d \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \u3002\u627e\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5faa\u73af\u79fb\u4f4d\u3002 \u6211\u4eec\u4e3a\u5b57\u7b26\u4e32 S+S S+S \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002\u5219\u540e\u7f00\u81ea\u52a8\u673a\u672c\u8eab\u5c06\u5305\u542b\u5b57\u7b26\u4e32 S S \u7684\u6240\u6709\u5faa\u73af\u79fb\u4f4d\u4f5c\u4e3a\u8def\u5f84\u3002 \u6240\u4ee5\u95ee\u9898\u7b80\u5316\u4e3a\u5bfb\u627e\u6700\u5c0f\u7684\u957f\u5ea6\u4e3a length(S) length(S) \u7684\u8def\u5f84\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5e73\u51e1\u7684\u65b9\u6cd5\u505a\u5230\uff1a\u6211\u4eec\u4ece\u521d\u59cb\u72b6\u6001\u5f00\u59cb\uff0c\u8d2a\u5fc3\u5730\u8bbf\u95ee\u6700\u5c0f\u7684\u5b57\u7b26\u5373\u53ef\u3002 \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(S)) O(length(S)) \u3002 \u51fa\u73b0\u6b21\u6570 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6587\u672c\u4e32 T T \uff0c\u6709\u591a\u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u4e00\u4e2a\u6a21\u5f0f\u4e32 P P \uff0c\u56de\u7b54\u6a21\u5f0f\u4e32 P P \u5728\u5b57\u7b26\u4e32 T T \u4e2d\u4f5c\u4e3a\u5b50\u4e32\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002 \u6211\u4eec\u4e3a\u6587\u672c\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u505a\u4ee5\u4e0b\u7684\u9884\u5904\u7406\uff1a\u5bf9\u4e8e\u81ea\u52a8\u673a\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001 v v \uff0c\u9884\u5904\u7406\u503c\u7b49\u4e8e endpos(v) endpos(v) \u8fd9\u4e2a\u96c6\u5408\u5927\u5c0f\u7684 cnt[v] cnt[v] \u3002\u4e8b\u5b9e\u4e0a\u5bf9\u5e94\u4e8e\u540c\u4e00\u72b6\u6001 v v \u7684\u6240\u6709\u5b50\u4e32\u5728\u6587\u672c\u4e32 T T \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u540c\uff0c\u8fd9\u76f8\u5f53\u4e8e\u96c6\u5408 endpos endpos \u4e2d\u7684\u4f4d\u7f6e\u6570\u3002 \u7136\u800c\u6211\u4eec\u4e0d\u80fd\u660e\u786e\u7684\u6784\u9020\u96c6\u5408 endpos endpos \uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8003\u8651\u5b83\u4eec\u7684\u5927\u5c0f cnt cnt \u3002 \u4e3a\u4e86\u8ba1\u7b97\u8fd9\u4e9b\u503c\uff0c\u6211\u4eec\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\uff0c\u5982\u679c\u5b83\u4e0d\u662f\u901a\u8fc7\u590d\u5236\u521b\u5efa\u7684\uff08\u4e14\u5b83\u4e0d\u662f\u521d\u59cb\u72b6\u6001 t_0 t_0 \uff09\uff0c\u6211\u4eec\u7528 cnt=1 cnt=1 \u521d\u59cb\u5316\u5b83\u3002\u7136\u540e\u6211\u4eec\u6309\u5b83\u4eec\u7684\u957f\u5ea6 len len \u964d\u5e8f\u904d\u5386\u6240\u6709\u72b6\u6001\uff0c\u5e76\u5c06\u5f53\u524d\u7684 cnt[v] cnt[v] \u7684\u503c\u52a0\u5230\u540e\u7f00\u94fe\u63a5\u4e0a\uff0c\u5373\uff1a cnt[link(v)]+=cnt[v] cnt[link(v)]+=cnt[v] \u8fd9\u6837\u505a\u6bcf\u4e2a\u72b6\u6001\u7684\u7b54\u6848\u90fd\u662f\u6b63\u786e\u7684\u3002 \u4e3a\u4ec0\u4e48\u8fd9\u662f\u6b63\u786e\u7684\uff1f\u901a\u8fc7\u590d\u5236\u83b7\u5f97\u7684\u72b6\u6001\uff0c\u6070\u597d\u662f length(T) length(T) \uff0c\u5e76\u4e14\u5b83\u4eec\u4e2d\u7684\u524d i i \u4e2a\u5728\u6211\u4eec\u63d2\u5165\u524d i i \u4e2a\u5b57\u7b26\u65f6\u4ea7\u751f\u3002\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u8fd9\u6837\u7684\u72b6\u6001\uff0c\u6211\u4eec\u5728\u5b83\u88ab\u5904\u7406\u65f6\u8ba1\u7b97\u5b83\u4eec\u6240\u5bf9\u5e94\u7684\u4f4d\u7f6e\u7684\u6570\u91cf\u3002\u56e0\u6b64\u6211\u4eec\u521d\u59cb\u5c06\u8fd9\u4e9b\u72b6\u6001\u7684 cnt cnt \u7684\u503c\u8d4b\u4e3a 1 1 \uff0c\u5176\u5b83\u72b6\u6001\u7684 cnt cnt \u503c\u8d4b\u4e3a 0 0 \u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a v v \u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a cnt[link(v)]+=cnt[v] cnt[link(v)]+=cnt[v] \u3002\u5176\u80cc\u540e\u7684\u542b\u4e49\u662f\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 v v \u51fa\u73b0\u4e86 cnt[v] cnt[v] \u6b21\uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u540e\u7f00\u4e5f\u5728\u5b8c\u5168\u76f8\u540c\u7684\u5730\u65b9\u7ed3\u675f\uff0c\u5373\u4e5f\u51fa\u73b0\u4e86 cnt[v] cnt[v] \u6b21\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u91cd\u590d\u8ba1\u6570\uff08\u5373\u628a\u67d0\u4e9b\u4f4d\u7f6e\u6570\u4e86\u4e24\u6b21\uff09\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u53ea\u5c06\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e\u6dfb\u52a0\u5230 \u4e00\u4e2a \u5176\u5b83\u7684\u72b6\u6001\u4e0a\uff0c\u6240\u4ee5\u4e00\u4e2a\u72b6\u6001\u4e0d\u53ef\u80fd\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u5c06\u5176\u4f4d\u7f6e\u91cd\u590d\u5730\u6307\u5411\u53e6\u4e00\u4e2a\u72b6\u6001\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(length(T)) O(length(T)) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u6240\u6709\u72b6\u6001\u7684 cnt cnt \u7684\u503c\u3002 \u6700\u540e\u56de\u7b54\u8be2\u95ee\u53ea\u9700\u8981\u67e5\u627e\u67e5\u627e\u503c cnt[t] cnt[t] \uff0c\u5176\u4e2d t t \u4e3a\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u72b6\u6001\u5c31\u662f\u72b6\u6001\u5bf9\u5e94\u7684\u6a21\u5f0f\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7b54\u6848\u5c31\u4e3a 0 0 \u3002\u5355\u6b21\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(P)) O(length(P)) \u3002 \u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\u4e32 T T \uff0c\u591a\u7ec4\u67e5\u8be2\u3002\u6bcf\u6b21\u67e5\u8be2\u5b57\u7b26\u4e32 P P \u5728\u5b57\u7b26\u4e32 T T \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08 P P \u7684\u5f00\u5934\u4f4d\u7f6e\uff09\u3002 \u6211\u4eec\u518d\u6784\u9020\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u3002\u6211\u4eec\u5bf9\u81ea\u52a8\u673a\u4e2d\u7684\u6240\u6709\u72b6\u6001\u9884\u5904\u7406\u4f4d\u7f6e firstpos firstpos \u3002\u5373\uff0c\u5bf9\u6bcf\u4e2a\u72b6\u6001 v v \u6211\u4eec\u60f3\u8981\u627e\u5230\u7b2c\u4e00\u6b21\u51fa\u73b0\u8fd9\u4e2a\u72b6\u6001\u7684\u672b\u7aef\u7684\u4f4d\u7f6e firstpos[v] firstpos[v] \u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u5148\u627e\u5230\u6bcf\u4e2a\u96c6\u5408 endpos endpos \u4e2d\u7684\u6700\u5c0f\u7684\u5143\u7d20\uff08\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u663e\u5f0f\u5730\u7ef4\u62a4\u6240\u6709 endpos endpos \u96c6\u5408\uff09\u3002 \u4e3a\u4e86\u7ef4\u62a4 firstpos firstpos \u8fd9\u4e9b\u4f4d\u7f6e\uff0c\u6211\u4eec\u5c06\u539f\u51fd\u6570\u6269\u5c55\u4e3a sa_extend() \u3002\u5f53\u6211\u4eec\u521b\u5efa\u65b0\u72b6\u6001 cur cur \u65f6\uff0c\u6211\u4eec\u4ee4\uff1a firstpos(cur)=len(cur)-1 firstpos(cur)=len(cur)-1 \uff1b\u5f53\u6211\u4eec\u5c06\u9876\u70b9 q q \u590d\u5236\u5230 clone clone \u65f6\uff0c\u6211\u4eec\u4ee4\uff1a firstpos(clone)=firstpos(q) firstpos(clone)=firstpos(q) \uff08\u56e0\u4e3a\u503c\u7684\u552f\u4e00\u5176\u5b83\u9009\u9879 firstpos(cur) firstpos(cur) \u80af\u5b9a\u592a\u5927\u4e86\uff09\u3002 \u90a3\u4e48\u67e5\u8be2\u7684\u7b54\u6848\u5c31\u662f firstpos(t)-length(P)+1 firstpos(t)-length(P)+1 \uff0c\u5176\u4e2d t t \u4e3a\u5bf9\u5e94\u5b57\u7b26\u4e32 P P \u7684\u72b6\u6001\u3002\u5355\u6b21\u67e5\u8be2\u53ea\u9700\u8981 O(length(P)) O(length(P)) \u7684\u65f6\u95f4\u3002 \u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e \u00b6 \u95ee\u9898\u540c\u4e0a\uff0c\u8fd9\u4e00\u6b21\u9700\u8981\u67e5\u8be2\u6587\u672c\u4e32 T T \u4e2d\u6a21\u5f0f\u4e32\u51fa\u73b0\u7684\u6240\u6709\u4f4d\u7f6e\u3002 \u6211\u4eec\u8fd8\u662f\u4e3a\u6587\u672c\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002\u4e0e\u4e0a\u4e00\u4e2a\u95ee\u9898\u76f8\u4f3c\u5730\uff0c\u6211\u4eec\u4e3a\u6240\u6709\u72b6\u6001\u8ba1\u7b97\u4f4d\u7f6e firstpos firstpos \u3002 \u5982\u679c t t \u4e3a\u5bf9\u5e94\u4e8e\u6a21\u5f0f\u4e32 T T \u7684\u72b6\u6001\uff0c\u663e\u7136 firstpos(t) firstpos(t) \u4e3a\u7b54\u6848\u7684\u4e00\u90e8\u5206\u3002\u9700\u8981\u67e5\u627e\u7684\u5176\u5b83\u4f4d\u7f6e\u600e\u4e48\u529e\uff1f\u6211\u4eec\u4f7f\u7528\u4e86\u542b\u6709\u5b57\u7b26\u4e32 P P \u7684\u81ea\u52a8\u673a\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u54ea\u4e9b\u72b6\u6001\u7eb3\u5165\u81ea\u52a8\u673a\u5462\uff1f\u6240\u6709\u5bf9\u5e94\u4e8e\u4ee5 P P \u4e3a\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u7684\u72b6\u6001\u3002\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u8981\u627e\u5230\u6240\u6709\u53ef\u4ee5\u901a\u8fc7\u540e\u7f00\u94fe\u63a5\u5230\u8fbe\u72b6\u6001 t t \u7684\u72b6\u6001\u3002 \u56e0\u6b64\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u72b6\u6001\u4fdd\u5b58\u4e00\u4e2a\u6307\u5411\u5b83\u7684\u540e\u7f00\u5f15\u7528\u5217\u8868\u3002\u67e5\u8be2\u7684\u7b54\u6848\u5c31\u5305\u542b\u4e86\u5bf9\u4e8e\u6bcf\u4e2a\u6211\u4eec\u80fd\u4ece\u72b6\u6001 t t \u53ea\u4f7f\u7528\u540e\u7f00\u5f15\u7528\u8fdb\u884c DFS \u6216 BFS \u7684\u6240\u6709\u72b6\u6001\u7684 firstpos firstpos \u503c\u3002 \u8fd9\u79cd\u53d8\u901a\u65b9\u6848\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(answer(P)) O(answer(P)) \uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u4f1a\u91cd\u590d\u8bbf\u95ee\u4e00\u4e2a\u72b6\u6001\uff08\u56e0\u4e3a\u5bf9\u4e8e\u4ec5\u6709\u4e00\u4e2a\u540e\u7f00\u94fe\u63a5\u6307\u5411\u4e00\u4e2a\u72b6\u6001\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u4e24\u6761\u4e0d\u540c\u7684\u8def\u5f84\u6307\u5411\u540c\u4e00\u72b6\u6001\uff09\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e24\u4e2a\u53ef\u80fd\u6709\u76f8\u540c endpos endpos \u503c\u7684\u4e0d\u540c\u72b6\u6001\u3002\u5982\u679c\u4e00\u4e2a\u72b6\u6001\u662f\u7531\u53e6\u4e00\u4e2a\u590d\u5236\u800c\u6765\u7684\uff0c\u5219\u8fd9\u79cd\u60c5\u51b5\u4f1a\u53d1\u751f\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u5bf9\u590d\u6742\u5ea6\u5206\u6790\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u72b6\u6001\u81f3\u591a\u88ab\u590d\u5236\u4e00\u6b21\u3002 \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u4ece\u88ab\u590d\u5236\u7684\u8282\u70b9\u8f93\u51fa\u4f4d\u7f6e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u53bb\u9664\u91cd\u590d\u7684\u4f4d\u7f6e\u3002\u4e8b\u5b9e\u4e0a\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\uff0c\u5982\u679c\u7ecf\u8fc7\u88ab\u590d\u5236\u72b6\u6001\u53ef\u4ee5\u5230\u8fbe\uff0c\u5219\u7ecf\u8fc7\u539f\u72b6\u6001\u4e5f\u53ef\u4ee5\u5230\u8fbe\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u6bcf\u4e2a\u72b6\u6001\u8bb0\u5f55\u6807\u8bb0 is_clone \uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u5730\u5ffd\u7565\u6389\u88ab\u590d\u5236\u7684\u72b6\u6001\uff0c\u53ea\u8f93\u51fa\u5176\u5b83\u6240\u6709\u72b6\u6001\u7684 firstpos firstpos \u7684\u503c\u3002 \u4ee5\u4e0b\u662f\u5b9e\u73b0\u7684\u6846\u67b6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct state { ... bool is_clone ; int first_pos ; vector < int > inv_link ; }; // \u5728\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u540e for ( int v = 1 ; v < sz ; v ++ ) { st [ st [ v ]. link ]. inv_link . push_back ( v ); } // \u8f93\u51fa\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e void output_all_occurrences ( int v , int P_length ) { if ( ! st [ v ]. is_clone ) cout << st [ v ]. first_pos - P_length + 1 << endl ; for ( int u : st [ v ]. inv_link ) output_all_occurrences ( u , P_length ); } \u6700\u77ed\u7684\u6ca1\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u4e32 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \u548c\u4e00\u4e2a\u7279\u5b9a\u7684\u5b57\u7b26\u96c6\uff0c\u6211\u4eec\u8981\u627e\u4e00\u4e2a\u957f\u5ea6\u6700\u77ed\u7684\u6ca1\u6709\u5728 S S \u4e2d\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u5728\u5b57\u7b26\u4e32 S S \u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u505a\u52a8\u6001\u89c4\u5212\u3002 \u4ee4 d[v] d[v] \u4e3a\u8282\u70b9 v v \u7684\u7b54\u6848\uff0c\u5373\uff0c\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\u5b50\u4e32\u7684\u4e00\u90e8\u5206\uff0c\u5f53\u524d\u5728\u72b6\u6001 v v \uff0c\u60f3\u627e\u5230\u4e0d\u8fde\u7eed\u7684\u8f6c\u79fb\u9700\u8981\u6dfb\u52a0\u7684\u6700\u5c0f\u5b57\u7b26\u6570\u91cf\u3002\u8ba1\u7b97 d[v] d[v] \u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u4e0d\u5b58\u5728\u4f7f\u7528\u5b57\u7b26\u96c6\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5b57\u7b26\u7684\u8f6c\u79fb\uff0c\u5219 d[v]=1 d[v]=1 \u3002\u5426\u5219\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u591f\u7684\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u6240\u6709\u8f6c\u79fb\u4e2d\u7684\u6700\u5c0f\u503c\uff1a d[v]=1+\\min_{w(v,\\,w,\\,c)\\in SA}d[w] d[v]=1+\\min_{w(v,\\,w,\\,c)\\in SA}d[w] \u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f d[t_0] d[t_0] \uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u8fc7\u7684\u6570\u7ec4 d[] d[] \u9006\u63a8\u56de\u53bb\u3002 \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 S S \u548c T T \uff0c\u6c42\u51fa\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c\u516c\u5171\u5b50\u4e32\u5b9a\u4e49\u4e3a\u5728 S S \u548c T T \u4e2d\u90fd\u4f5c\u4e3a\u5b50\u4e32\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u4e32 X X \u3002 \u6211\u4eec\u4e3a\u5b57\u7b26\u4e32 S S \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u6211\u4eec\u73b0\u5728\u5904\u7406\u5b57\u7b26\u4e32 T T \uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u524d\u7f00\u90fd\u5728 S S \u4e2d\u5bfb\u627e\u8fd9\u4e2a\u524d\u7f00\u7684\u6700\u957f\u540e\u7f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32 T T \u4e2d\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u60f3\u8981\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7ed3\u675f\u7684 S S \u548c T T \u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\uff0c \u5f53\u524d\u72b6\u6001 v v \u548c \u5f53\u524d\u957f\u5ea6 l l \u3002\u8fd9\u4e24\u4e2a\u53d8\u91cf\u63cf\u8ff0\u5f53\u524d\u5339\u914d\u7684\u90e8\u5206\uff1a\u5b83\u7684\u957f\u5ea6\u548c\u5b83\u4eec\u5bf9\u5e94\u7684\u72b6\u6001\u3002 \u4e00\u5f00\u59cb v=t_0 v=t_0 \u4e14 l=0 l=0 \uff0c\u5373\uff0c\u5339\u914d\u4e3a\u7a7a\u4e32\u3002 \u73b0\u5728\u6211\u4eec\u6765\u63cf\u8ff0\u5982\u4f55\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 T[i] T[i] \u5e76\u4e3a\u5176\u91cd\u65b0\u8ba1\u7b97\u7b54\u6848\uff1a \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4ece v v \u5230\u5b57\u7b26 T[i] T[i] \u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8f6c\u79fb\u5e76\u8ba9 l l \u81ea\u589e\u4e00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u9700\u8981\u7f29\u77ed\u5f53\u524d\u5339\u914d\u7684\u90e8\u5206\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u540e\u7f00\u94fe\u63a5\u8fdb\u884c\u8f6c\u79fb\uff1a v=link(v) v=link(v) \u4e0e\u6b64\u540c\u65f6\uff0c\u9700\u8981\u7f29\u77ed\u5f53\u524d\u957f\u5ea6\u3002\u663e\u7136\u6211\u4eec\u9700\u8981\u5c06 l l \u8d4b\u503c\u4e3a len(v) len(v) \uff0c\u56e0\u4e3a\u7ecf\u8fc7\u8fd9\u4e2a\u540e\u7f00\u94fe\u63a5\u540e\u6211\u4eec\u5230\u8fbe\u7684\u72b6\u6001\u6240\u5bf9\u5e94\u7684\u6700\u957f\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u5b50\u4e32\u3002 \u5982\u679c\u4ecd\u7136\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e00\u5b57\u7b26\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u7ee7\u7eed\u91cd\u590d\u7ecf\u8fc7\u540e\u7f00\u94fe\u63a5\u5e76\u51cf\u5c0f l l \uff0c\u76f4\u5230\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u8f6c\u79fb\u6216\u5230\u8fbe\u865a\u62df\u72b6\u6001 -1 -1 \uff08\u8fd9\u610f\u5473\u7740\u5b57\u7b26 T[i] T[i] \u6839\u672c\u6ca1\u6709\u5728 S S \u4e2d\u51fa\u73b0\u8fc7\uff0c\u6240\u4ee5\u6211\u4eec\u8bbe\u7f6e v=l=0 v=l=0 \uff09\u3002 \u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u6240\u6709 l l \u7684\u6700\u5927\u503c\u3002 \u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(T)) O(length(T)) \uff0c\u56e0\u4e3a\u6bcf\u6b21\u79fb\u52a8\u6211\u4eec\u8981\u4e48\u53ef\u4ee5\u4f7f l l \u589e\u52a0\u4e00\uff0c\u8981\u4e48\u53ef\u4ee5\u5728\u540e\u7f00\u94fe\u63a5\u95f4\u79fb\u52a8\u51e0\u6b21\uff0c\u6bcf\u6b21\u90fd\u51cf\u5c0f l l \u7684\u503c\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 string lcs ( string S , string T ) { sa_init (); for ( int i = 0 ; i < S . size (); i ++ ) sa_extend ( S [ i ]); int v = 0 , l = 0 , best = 0 , bestpos = 0 ; for ( int i = 0 ; i < T . size (); i ++ ) { while ( v && ! st [ v ]. next . count ( T [ i ])) { v = st [ v ]. link ; l = st [ v ]. length ; } if ( st [ v ]. next . count ( T [ i ])) { v = st [ v ]. next [ T [ i ]]; l ++ ; } if ( l > best ) { best = l ; bestpos = i ; } } return t . substr ( bestpos - best + 1 , best ); } \u591a\u4e2a\u5b57\u7b26\u4e32\u95f4\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32 \u00b6 \u7ed9\u5b9a k k \u4e2a\u5b57\u7b26\u4e32 S_i S_i \u3002\u6211\u4eec\u9700\u8981\u627e\u5230\u5b83\u4eec\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c\u5373\u4f5c\u4e3a\u5b50\u4e32\u51fa\u73b0\u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4e32 X X \u3002 \u6211\u4eec\u5c06\u6240\u6709\u7684\u5b50\u4e32\u8fde\u63a5\u6210\u4e00\u4e2a\u8f83\u957f\u7684\u5b57\u7b26\u4e32 T T \uff0c\u4ee5\u7279\u6b8a\u5b57\u7b26 D_i D_i \u5206\u5f00\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff08\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\uff1a T=S_1+D_1+S_2+D_2+\\cdots+S_k+D_k. T=S_1+D_1+S_2+D_2+\\cdots+S_k+D_k. \u7136\u540e\u4e3a\u5b57\u7b26\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u5728\u81ea\u52a8\u673a\u4e2d\u627e\u5230\u5b58\u5728\u4e8e\u6240\u6709\u5b57\u7b26\u4e32 S_i S_i \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6dfb\u52a0\u7684\u7279\u6b8a\u5b57\u7b26\u5b8c\u6210\u3002\u6ce8\u610f\u5982\u679c S_j S_j \u5305\u542b\u4e86\u4e00\u4e2a\u5b50\u4e32\uff0c\u5219\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u5b58\u5728\u4e00\u6761\u4ece\u5305\u542b\u5b57\u7b26 D_j D_j \u7684\u5b50\u4e32\u800c\u4e0d\u5305\u542b\u4ee5\u5176\u5b83\u5b57\u7b26 D_1,\\,\\ldots,\\,D_{j-1},\\,D_{j+1},\\,\\ldots,\\,D_k D_1,\\,\\ldots,\\,D_{j-1},\\,D_{j+1},\\,\\ldots,\\,D_k \u5f00\u59cb\u7684\u8def\u5f84\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u53ef\u8fbe\u6027\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u5bf9\u4e8e\u81ea\u52a8\u673a\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u548c\u6bcf\u4e2a\u5b57\u7b26 D_i D_i \u662f\u5426\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u6761\u8def\u5f84\u3002\u8fd9\u53ef\u4ee5\u5bb9\u6613\u5730\u901a\u8fc7 DFS \u6216 BFS \u4e0e\u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u72b6\u6001 v v \u7684\u5b57\u7b26\u4e32 longest(v) longest(v) \u4e2d\u5b58\u5728\u6240\u6709\u7279\u6b8a\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u4f8b\u9898 \u00b6 SPOJ #7258 SUBLEX HihoCoder #1441 : \u540e\u7f00\u81ea\u52a8\u673a\u4e00 \u00b7 \u57fa\u672c\u6982\u5ff5 \u76f8\u5173\u8d44\u6599 \u00b6 \u6211\u4eec\u5148\u7ed9\u51fa\u4e0e\u540e\u7f00\u81ea\u52a8\u673a\u6709\u5173\u7684\u6700\u521d\u7684\u4e00\u4e9b\u6587\u732e\uff1a A. Blumer, J. Blumer, A. Ehrenfeucht, D. Haussler, R. McConnell. Linear Size Finite Automata for the Set of All Subwords of a Word. An Outline of Results [1983] A. Blumer, J. Blumer, A. Ehrenfeucht, D. Haussler. The Smallest Automaton Recognizing the Subwords of a Text [1984] Maxime Crochemore. Optimal Factor Transducers [1985] Maxime Crochemore. Transducers and Repetitions [1986] A. Nerode. Linear automaton transformations [1958] \u53e6\u5916\uff0c\u5728\u66f4\u65b0\u7684\u4e00\u4e9b\u8d44\u6e90\u91cc\uff0c\u5728\u5f88\u591a\u5173\u4e8e\u5b57\u7b26\u4e32\u7b97\u6cd5\u7684\u4e66\u4e2d\uff0c\u90fd\u80fd\u627e\u5230\u8fd9\u4e2a\u4e3b\u9898\uff1a Maxime Crochemore, Rytter Wowjcieh. Jewels of Stringology [2002] Bill Smyth. Computing Patterns in Strings [2003] Bill Smith. Methods and algorithms of calculations on lines [2006] \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u8d44\u6599\uff1a \u300a\u540e\u7f00\u81ea\u52a8\u673a\u300b\uff0c\u9648\u7acb\u6770\u3002 \u300a\u540e\u7f00\u81ea\u52a8\u673a\u5728\u5b57\u5178\u6811\u4e0a\u7684\u62d3\u5c55\u300b\uff0c\u5218\u7814\u7ece\u3002 \u300a\u540e\u7f00\u81ea\u52a8\u673a\u53ca\u5176\u5e94\u7528\u300b\uff0c\u5f20\u5929\u626c\u3002 https://www.cnblogs.com/zinthos/p/3899679.html https://codeforces.com/blog/entry/20861 https://zhuanlan.zhihu.com/p/25948077 \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 \u0421\u0443\u0444\u0444\u0438\u043a\u0441\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Suffix Automaton \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002","title":"\u540e\u7f00\u81ea\u52a8\u673a (SAM)"},{"location":"string/sam/#_1","text":"\u7ed9\u5b9a\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\u81ea\u52a8\u673a\u662f\u4e00\u4e2a\u63a5\u53d7\u6240\u6709\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\u7684\u6700\u5c0f DFA \uff08\u786e\u5b9a\u6027\u6709\u9650\u81ea\u52a8\u673a\u6216\u786e\u5b9a\u6027\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff09\u3002 \u6362\u53e5\u8bdd\u8bf4\uff1a \u540e\u7f00\u81ea\u52a8\u673a\u662f\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002\u9876\u70b9\u88ab\u79f0\u4f5c \u72b6\u6001 \uff0c\u8fb9\u88ab\u79f0\u4f5c\u72b6\u6001\u95f4\u7684 \u8f6c\u79fb \u3002 \u4e00\u4e2a\u72b6\u6001 t_0 t_0 \u4e3a \u521d\u59cb\u72b6\u6001 \uff0c\u5b83\u5fc5\u5b9a\u4e3a\u8fd9\u5f20\u56fe\u7684\u6e90\u70b9\uff08\u5176\u5b83\u5404\u70b9\u5747\u4e0e t_0 t_0 \u8054\u901a\uff09\u3002 \u6bcf\u4e2a \u8f6c\u79fb \u90fd\u6807\u6709\u4e00\u4e9b\u5b57\u6bcd\u3002\u4ece\u4e00\u4e2a\u9876\u70b9\u51fa\u53d1\u7684\u6240\u6709\u8f6c\u79fb\u5747 \u4e0d\u540c \u3002 \u4e00\u4e2a\u6216\u591a\u4e2a\u72b6\u6001\u4e3a \u7ec8\u6b62\u72b6\u6001 \u3002\u5982\u679c\u6211\u4eec\u4ece\u521d\u59cb\u72b6\u6001 t_0 t_0 \u51fa\u53d1\uff0c\u6700\u7ec8\u8f6c\u79fb\u5230\u4e86\u4e00\u4e2a\u7ec8\u6b62\u72b6\u6001\uff0c\u5219\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8f6c\u79fb\u8fde\u63a5\u8d77\u6765\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32 s s \u7684\u4e00\u4e2a\u540e\u7f00\u3002 s s \u7684\u6bcf\u4e2a\u540e\u7f00\u5747\u53ef\u7528\u4e00\u6761\u4ece t_0 t_0 \u5230\u4e00\u4e2a\u7ec8\u6b62\u72b6\u6001\u7684\u8def\u5f84\u6784\u6210\u3002 \u540e\u7f00\u81ea\u52a8\u673a\u662f\u6240\u6709\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u81ea\u52a8\u673a\u4e2d\u9876\u70b9\u6570\u6700\u5c11\u7684\u4e00\u4e2a\u3002","title":"\u540e\u7f00\u81ea\u52a8\u673a\u7684\u5b9a\u4e49"},{"location":"string/sam/#_2","text":"\u540e\u7f00\u81ea\u52a8\u673a\u6700\u7b80\u5355\u548c\u6700\u91cd\u8981\u7684\u6027\u8d28\u662f\uff0c\u5b83\u5305\u542b\u5173\u4e8e\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u5b50\u4e32\u7684\u4fe1\u606f\u3002\u4efb\u610f\u4ece\u521d\u59cb\u72b6\u6001 t_0 t_0 \u5f00\u59cb\u7684\u8def\u5f84\uff0c\u5982\u679c\u6211\u4eec\u5c06\u8f6c\u79fb\u8def\u5f84\u4e0a\u7684\u6807\u53f7\u5199\u4e0b\u6765\uff0c\u90fd\u4f1a\u5f62\u6210 s s \u7684\u4e00\u4e2a \u5b50\u4e32 \u3002\u53cd\u4e4b\u6bcf\u4e2a s s \u7684\u5b50\u4e32\u5bf9\u5e94\u4e8e\u4ece t_0 t_0 \u5f00\u59cb\u7684\u67d0\u6761\u8def\u5f84\u3002 \u4e3a\u4e86\u7b80\u5316\u8868\u8fbe\uff0c\u6211\u4eec\u5c06\u4f1a\u8bf4\u5b50\u4e32 \u5bf9\u5e94\u4e8e \u4e00\u6761\u8def\u5f84\uff08\u4ece t_0 t_0 \u5f00\u59cb\u4e14\u4e00\u4e9b\u6807\u53f7\u6784\u6210\u8fd9\u4e2a\u5b50\u4e32\uff09\u3002\u53cd\u8fc7\u6765\u6211\u4eec\u8bf4\u4efb\u610f\u4e00\u6761\u8def\u5f84 \u5bf9\u5e94\u4e8e \u5b83\u7684\u6807\u53f7\u6784\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u4e00\u6761\u6216\u591a\u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u4e00\u4e2a\u72b6\u6001\uff0c\u56e0\u6b64\u6211\u4eec\u8bf4\u4e00\u4e2a\u72b6\u6001\u5bf9\u5e94\u4e8e\u5b57\u7b26\u4e32\u7684\u96c6\u5408\uff0c\u8fd9\u4e5f\u5bf9\u5e94\u4e8e\u90a3\u4e9b\u8def\u5f84\u3002","title":"\u5b50\u4e32\u7684\u6027\u8d28"},{"location":"string/sam/#_3","text":"\u6211\u4eec\u5c06\u4f1a\u5728\u8fd9\u91cc\u5c55\u793a\u4e00\u4e9b\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u6211\u4eec\u7528\u84dd\u8272\u8868\u793a\u521d\u59cb\u72b6\u6001\uff0c\u7528\u7eff\u8272\u8868\u793a\u7ec8\u6b62\u72b6\u6001\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``\" s=``\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``a\\!\" s=``a\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``aa\\!\" s=``aa\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``ab\\!\" s=``ab\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``abb\\!\" s=``abb\\!\" \uff1a \u5bf9\u4e8e\u5b57\u7b26\u4e32 s=``abbb\\!\" s=``abbb\\!\" \uff1a","title":"\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684\u5b9e\u4f8b"},{"location":"string/sam/#_4","text":"\u5728\u6211\u4eec\u63cf\u8ff0\u7ebf\u6027\u65f6\u95f4\u5185\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u51e0\u4e2a\u5bf9\u7406\u89e3\u6784\u9020\u8fc7\u7a0b\u975e\u5e38\u91cd\u8981\u7684\u65b0\u6982\u5ff5\u5e76\u7b80\u5355\u8bc1\u660e\u3002","title":"\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a"},{"location":"string/sam/#endpos","text":"\u8003\u8651\u5b57\u7b26\u4e32 s s \u7684\u4efb\u610f\u975e\u7a7a\u5b50\u4e32 t t \uff0c\u6211\u4eec\u8bb0 endpos(t) endpos(t) \u4e3a\u5728\u5b57\u7b26\u4e32 s s \u4e2d t t \u7684\u6240\u6709\u7ed3\u675f\u4f4d\u7f6e\uff08\u5047\u8bbe\u5bf9\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u7f16\u53f7\u4ece\u96f6\u5f00\u59cb\uff09\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 ``abcbc\\!\" ``abcbc\\!\" \uff0c\u6211\u4eec\u6709 endpos(``bc\\!\")=2,\\,4 endpos(``bc\\!\")=2,\\,4 \u3002 \u5f53\u4e24\u4e2a\u5b50\u4e32 t_1 t_1 \u4e0e t_2 t_2 \u7684\u672b\u5c3e\u96c6\u5408\u76f8\u7b49\u65f6\u6211\u4eec\u79f0\u5b83\u4eec\u662f endpos endpos \u7b49\u4ef7\u7684\uff1a\u5373 endpos(t_1)=endpos(t_2) endpos(t_1)=endpos(t_2) \u3002\u8fd9\u6837\u6240\u6709\u5b57\u7b26\u4e32 s s \u7684\u975e\u7a7a\u5b50\u4e32\u90fd\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u7684 endpos endpos \u96c6\u5408\u88ab\u5206\u4e3a\u51e0\u4e2a \u7b49\u4ef7\u7c7b \u3002 \u663e\u7136\uff0c\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a endpos endpos \u76f8\u540c\u7684\u5b50\u4e32\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u72b6\u6001\u6570\u7b49\u4e8e\u6240\u6709\u5b50\u4e32\u7684\u7b49\u4ef7\u7c7b\u7684\u4e2a\u6570\uff0c\u52a0\u4e0a\u521d\u59cb\u72b6\u6001\u3002\u540e\u7f00\u81ea\u52a8\u673a\u7684\u72b6\u6001\u4e2a\u6570\u7b49\u4ef7\u4e8e endpos endpos \u76f8\u540c\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u4e32\u3002 \u6211\u4eec\u7a0d\u540e\u5c06\u4f1a\u7528\u8fd9\u4e2a\u5047\u8bbe\u4ecb\u7ecd\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684\u7b97\u6cd5\u3002\u5728\u90a3\u65f6\u6211\u4eec\u5c06\u4f1a\u53d1\u73b0\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u9700\u8981\u6ee1\u8db3\u7684\u6240\u6709\u6027\u8d28\uff0c\u9664\u4e86\u6700\u5c0f\u6027\u4ee5\u5916\u90fd\u6ee1\u8db3\u4e86\u3002\u7531 Nerode \u5b9a\u7406\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u6700\u5c0f\u6027\uff08\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u4f1a\u8bc1\u660e\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6700\u5c0f\u6027\uff09\u3002 \u7531 endpos endpos \u7684\u503c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u91cd\u8981\u7ed3\u8bba\uff1a \u5f15\u7406 1\uff1a \u5f53\u4e14\u4ec5\u5f53\u5b57\u7b26\u4e32 u u \u4ee5 w w \u7684\u4e00\u4e2a\u540e\u7f00\u7684\u5f62\u5f0f\u51fa\u73b0\u5728\u5b57\u7b26\u4e32 s s \u4e2d\u65f6\uff0c\u4e24\u4e2a\u975e\u7a7a\u5b50\u4e32 u u \u548c w w \uff08\u5047\u8bbe length(u)\\le length(w) length(u)\\le length(w) \uff09\u662f endpos endpos \u7b49\u4ef7\u7684\u3002 \u5f15\u7406\u663e\u7136\u6210\u7acb\u3002\u5982\u679c u u \u548c v v \u7684 endpos endpos \u76f8\u540c\uff0c\u5219 u u \u662f w w \u7684\u4e00\u4e2a\u540e\u7f00\uff0c\u4e14\u53ea\u4ee5 s s \u4e2d\u7684\u4e00\u4e2a w w \u7684\u540e\u7f00\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u4e14\u6839\u636e\u5b9a\u4e49\uff0c\u5982\u679c u u \u4e3a w w \u7684\u4e00\u4e2a\u540e\u7f00\uff0c\u4e14\u53ea\u4ee5\u540e\u7f00\u7684\u5f62\u5f0f\u5728 s s \u4e2d\u51fa\u73b0\u65f6\uff0c\u4e24\u4e2a\u5b50\u4e32\u7684 endpos endpos \u503c\u76f8\u7b49\u3002 \u5f15\u7406 2\uff1a \u8003\u8651\u4e24\u4e2a\u975e\u7a7a\u5b50\u4e32 u u \u548c w w \uff08\u5047\u8bbe length(u)\\le length(w) length(u)\\le length(w) \uff09\u3002\u5219\u5b83\u4eec\u7684 endpos endpos \u6784\u6210\u7684\u96c6\u5408\u8981\u4e48\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u8981\u4e48 endpos(w) endpos(w) \u662f endpos(u) endpos(u) \u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u5e76\u4e14\u8fd9\u4f9d\u8d56\u4e8e u u \u662f\u5426\u4e3a w w \u7684\u4e00\u4e2a\u540e\u7f00\u3002\u5373\uff1a \\begin{cases} endpos(w)\\subseteq endpos(u)&\\text{\u82e5 $u$ \u4e3a $w$ \u7684\u4e00\u4e2a\u540e\u7f00}\\\\ endpos(w)\\cap endpos(u)=\\emptyset&\\text{\u53e6\u4e00\u79cd\u60c5\u51b5}\\\\ \\end{cases} \\begin{cases} endpos(w)\\subseteq endpos(u)&\\text{\u82e5 $u$ \u4e3a $w$ \u7684\u4e00\u4e2a\u540e\u7f00}\\\\ endpos(w)\\cap endpos(u)=\\emptyset&\\text{\u53e6\u4e00\u79cd\u60c5\u51b5}\\\\ \\end{cases} \u8bc1\u660e\uff1a\u5982\u679c\u96c6\u5408 endpos(u) endpos(u) \u4e0e endpos(w) endpos(w) \u6709\u81f3\u5c11\u4e00\u4e2a\u516c\u5171\u5143\u7d20\uff0c\u90a3\u4e48\u7531\u4e8e\u5b57\u7b26\u4e32 u u \u4e0e w w \u90fd\u5728\u4e00\u4e2a\u4f4d\u7f6e\u7ed3\u675f\uff0c\u5373 u u \u662f w w \u7684\u4e00\u4e2a\u540e\u7f00\u3002\u4f46\u662f\u5982\u679c\u5982\u6b64\u5728\u6bcf\u6b21 w w \u51fa\u73b0\u7684\u4f4d\u7f6e\u5b50\u4e32 u u \u4e5f\u4f1a\u51fa\u73b0\uff0c\u8fd9\u610f\u5473\u7740 endpos(w) endpos(w) \u662f endpos(u) endpos(u) \u7684\u4e00\u4e2a\u5b50\u96c6\u3002 \u5f15\u7406 3\uff1a \u8003\u8651\u4e00\u4e2a endpos endpos \u7b49\u4ef7\u7c7b\u3002\u5c06\u7c7b\u4e2d\u7684\u6240\u6709\u5b50\u4e32\u6309\u957f\u5ea6\u975e\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u5373\u6bcf\u4e2a\u5b50\u4e32\u90fd\u4f1a\u6bd4\u5b83\u524d\u4e00\u4e2a\u5b50\u4e32\u77ed\uff0c\u4e0e\u6b64\u540c\u65f6\u6bcf\u4e2a\u5b50\u4e32\u4e5f\u662f\u5b83\u524d\u4e00\u4e2a\u5b50\u4e32\u7684\u4e00\u4e2a\u540e\u7f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u540c\u4e00\u7b49\u4ef7\u7c7b\u4e2d\u7684\u6240\u6709\u5b50\u4e32\u5747\u4e92\u4e3a\u540e\u7f00\uff0c\u4e14\u5b50\u4e32\u7684\u957f\u5ea6\u6070\u597d\u8986\u76d6\u6574\u4e2a\u533a\u95f4 [x,\\,y] [x,\\,y] \u3002 \u8bc1\u660e\uff1a\u56fa\u5b9a\u4e00\u4e9b endpos endpos \u7b49\u4ef7\u7c7b\u3002\u5982\u679c\u7b49\u4ef7\u7c7b\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u4e32\uff0c\u5f15\u7406\u663e\u7136\u6210\u7acb\u3002\u73b0\u5728\u6211\u4eec\u6765\u8ba8\u8bba\u5b50\u4e32\u5143\u7d20\u4e2a\u6570\u5927\u4e8e 1 1 \u7684\u7b49\u4ef7\u7c7b\u3002 \u7531\u5f15\u7406 1\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684 endpos endpos \u7b49\u4ef7\u5b57\u7b26\u4e32\u4e2d\u8f83\u77ed\u7684\u4e00\u4e2a\u603b\u662f\u8f83\u957f\u7684\u4e00\u4e2a\u7684\u771f\u540e\u7f00\u3002\u56e0\u6b64\uff0c\u7b49\u4ef7\u7c7b\u4e2d\u4e0d\u53ef\u80fd\u6709\u4e24\u4e2a\u7b49\u957f\u7684\u5b57\u7b26\u4e32\u3002 \u8bb0 w w \u4e3a\u7b49\u4ef7\u7c7b\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u7c7b\u4f3c\u5730\uff0c\u8bb0 u u \u4e3a\u7b49\u4ef7\u7c7b\u4e2d\u6700\u77ed\u7684\u5b57\u7b26\u4e32\u3002\u7531\u5f15\u7406 1\uff0c\u5b57\u7b26\u4e32 u u \u662f\u5b57\u7b26\u4e32 w w \u7684\u771f\u540e\u7f00\u3002\u73b0\u5728\u8003\u8651\u957f\u5ea6\u5728\u533a\u95f4 [length(u),\\,length(w)] [length(u),\\,length(w)] \u4e2d\u7684 w w \u7684\u4efb\u610f\u540e\u7f00\u3002\u5bb9\u6613\u770b\u51fa\uff0c\u8fd9\u4e2a\u540e\u7f00\u4e5f\u5728\u540c\u4e00\u7b49\u4ef7\u7c7b\u4e2d\u3002\u56e0\u4e3a\u8fd9\u4e2a\u540e\u7f00\u53ea\u80fd\u5728\u5b57\u7b26\u4e32 s s \u4e2d\u4ee5 w w \u7684\u4e00\u4e2a\u540e\u7f00\u7684\u5f62\u5f0f\u5b58\u5728\uff08\u4e5f\u56e0\u4e3a\u8f83\u77ed\u7684\u540e\u7f00 u u \u5728 s s \u4e2d\u53ea\u4ee5 w w \u7684\u540e\u7f00\u7684\u5f62\u5f0f\u5b58\u5728\uff09\u3002\u56e0\u6b64\uff0c\u7531\u5f15\u7406 1\uff0c\u8fd9\u4e2a\u540e\u7f00\u4e0e\u5b57\u7b26\u4e32 w w endpos endpos \u7b49\u4ef7\u3002","title":"\u7ed3\u675f\u4f4d\u7f6e endpos"},{"location":"string/sam/#link","text":"\u8003\u8651\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u4e00\u4e9b\u72b6\u6001\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u72b6\u6001 v v \u5bf9\u5e94\u4e8e\u5177\u6709\u76f8\u540c endpos endpos \u7684\u7b49\u4ef7\u7c7b\u3002\u6211\u4eec\u5982\u679c\u5b9a\u4e49 w w \u4e3a\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\uff0c\u5219\u6240\u6709\u5176\u5b83\u7684\u5b57\u7b26\u4e32\u90fd\u662f w w \u7684\u540e\u7f00\u3002 \u6211\u4eec\u8fd8\u77e5\u9053\u5b57\u7b26\u4e32 w w \u7684\u524d\u51e0\u4e2a\u540e\u7f00\uff08\u5982\u679c\u6211\u4eec\u7528\u957f\u5ea6\u964d\u5e8f\u8003\u8651\u8fd9\u4e9b\u540e\u7f00\uff09\u5728\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u5168\u90e8\u88ab\u5305\u542b\uff0c\u4e14\u6240\u6709\u5176\u5b83\u540e\u7f00\uff08\u81f3\u5c11\u4e00\u4e2a\u2014\u7a7a\u540e\u7f00\uff09\u5728\u5176\u5b83\u7684\u7b49\u4ef7\u7c7b\u4e2d\u3002\u6211\u4eec\u8bb0 t t \u4e3a\u6700\u5927\u7684\u8fd9\u6837\u7684\u540e\u7f00\uff0c\u7136\u540e\u7528\u540e\u7f00\u94fe\u63a5\u8fde\u5230 t t \u4e0a\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a \u540e\u7f00\u94fe\u63a5 link(v) link(v) \u8fde\u63a5\u5230\u5bf9\u5e94\u4e8e w w \u7684\u6700\u957f\u540e\u7f00\u7684\u53e6\u4e00\u4e2a endpos endpos \u7b49\u4ef7\u7c7b\u7684\u72b6\u6001\u3002 \u4ee5\u4e0b\u6211\u4eec\u5047\u8bbe\u521d\u59cb\u72b6\u6001 t_0 t_0 \u5bf9\u5e94\u4e8e\u5b83\u81ea\u5df1\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\uff08\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff09\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u89c4\u5b9a endpos(t)=\\{-1,\\,0,\\,\\ldots,\\,length(s)-1\\} endpos(t)=\\{-1,\\,0,\\,\\ldots,\\,length(s)-1\\} \u3002 \u5f15\u7406 4\uff1a \u6240\u6709\u540e\u7f00\u94fe\u63a5\u6784\u6210\u4e00\u68f5\u6839\u8282\u70b9\u4e3a t_0 t_0 \u7684\u6811\u3002 \u8bc1\u660e\uff1a\u8003\u8651\u4efb\u610f\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u540e\u7f00\u94fe\u63a5 link(v) link(v) \u8fde\u63a5\u5230\u7684\u72b6\u6001\u5bf9\u5e94\u4e8e\u4e25\u683c\u66f4\u77ed\u7684\u5b57\u7b26\u4e32\uff08\u6839\u636e\u540e\u7f00\u94fe\u63a5\u7684\u5b9a\u4e49\u548c\u5f15\u7406 3\uff09\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u5728\u540e\u7f00\u94fe\u63a5\u4e0a\u79fb\u52a8\uff0c\u6211\u4eec\u65e9\u665a\u4f1a\u5230\u8fbe\u5bf9\u5e94\u7a7a\u4e32\u7684\u521d\u59cb\u72b6\u6001 t_0 t_0 \u3002 \u5f15\u7406 5\uff1a \u5982\u679c\u6211\u4eec\u4f7f\u7528\u96c6\u5408 endpos endpos \u6784\u9020\u4e00\u68f5\u6811\uff08\u6240\u6709\u5b50\u8282\u70b9\u7684\u96c6\u5408\u4e3a\u7236\u8282\u70b9\u7684\u5b50\u96c6\uff09\uff0c\u5219\u8fd9\u4e2a\u7ed3\u6784\u7531\u540e\u7f00\u94fe\u63a5\u8fde\u63a5\u8d77\u6765\u3002 \u8bc1\u660e\uff1a\u7531\u5f15\u7406 2\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 endpos endpos \u96c6\u5408\u6784\u9020\u4e00\u68f5\u6811\uff08\u56e0\u4e3a\u4e24\u4e2a\u96c6\u5408\u8981\u4e48\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\u8981\u4e48\u4e92\u4e3a\u5b50\u96c6\uff09\u3002 \u6211\u4eec\u73b0\u5728\u8003\u8651\u4efb\u610f\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\u548c\u5b83\u7684\u540e\u7f00\u94fe\u63a5 link(v) link(v) \uff0c\u7531\u540e\u7f00\u94fe\u63a5\u548c\u5f15\u7406 2\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 endpos(v)\\subseteq endpos(link(v)) endpos(v)\\subseteq endpos(link(v)) \uff0c\u8fd9\u4e0e\u524d\u9762\u7684\u5f15\u7406\u8bc1\u660e\u4e86\u4ee5\u4e0b\u65ad\u8a00\u6210\u7acb\uff1a\u540e\u7f00\u94fe\u63a5\u6784\u6210\u7684\u6811\u672c\u8d28\u4e0a\u662f endpos endpos \u96c6\u5408\u6784\u6210\u7684\u4e00\u68f5\u6811\u3002 \u4ee5\u4e0b\u662f\u5bf9\u4e8e\u5b57\u7b26\u4e32 ``abcbc\\!\" ``abcbc\\!\" \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u65f6\u4ea7\u751f\u7684\u540e\u7f00\u94fe\u63a5\u6811\u7684\u4e00\u4e2a \u4f8b\u5b50 \uff0c\u8282\u70b9\u88ab\u6807\u8bb0\u4e3a\u5bf9\u5e94\u7b49\u4ef7\u7c7b\u4e2d\u6700\u957f\u7684\u5b50\u4e32\u3002","title":"\u540e\u7f00\u94fe\u63a5 link"},{"location":"string/sam/#_5","text":"\u5728\u5b66\u4e60\u7b97\u6cd5\u672c\u8eab\u524d\uff0c\u6211\u4eec\u5bf9\u4e4b\u524d\u5b66\u8fc7\u7684\u77e5\u8bc6\u8fdb\u884c\u4e00\u4e0b\u603b\u7ed3\uff0c\u5e76\u5f15\u5165\u4e00\u4e9b\u8f85\u52a9\u8bb0\u53f7\u3002 s s \u7684\u5b50\u4e32\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u7ed3\u675f\u7684\u4f4d\u7f6e endpos endpos \u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u7b49\u4ef7\u7c7b\uff1b \u540e\u7f00\u81ea\u52a8\u673a\u7531\u521d\u59cb\u72b6\u6001 t_0 t_0 \u548c\u4e0e\u6bcf\u4e00\u4e2a endpos endpos \u7b49\u4ef7\u7c7b\u5bf9\u5e94\u7684\u6bcf\u4e2a\u72b6\u6001\u7ec4\u6210\uff1b \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u72b6\u6001 v v \uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u4e32\u4e0e\u4e4b\u5339\u914d\u3002\u6211\u4eec\u8bb0 longest(v) longest(v) \u4e3a\u5176\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bb0 len(v) len(v) \u4e3a\u5b83\u7684\u957f\u5ea6\u3002\u7c7b\u4f3c\u5730\uff0c\u8bb0 shortest(v) shortest(v) \u4e3a\u6700\u77ed\u7684\u5b50\u4e32\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a minlen(v) minlen(v) \u3002\u90a3\u4e48\u6240\u6709\u5bf9\u5e94\u8fd9\u4e2a\u72b6\u6001\u7684\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662f\u5b57\u7b26\u4e32 longest(v) longest(v) \u7684\u4e0d\u540c\u7684\u540e\u7f00\uff0c\u4e14\u6240\u6709\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6070\u597d\u8986\u76d6\u533a\u95f4 [minlength(v),\\,len(v)] [minlength(v),\\,len(v)] \u4e2d\u7684\u6bcf\u4e00\u4e2a\u6574\u6570\u3002 \u5bf9\u4e8e\u4efb\u610f\u6ee1\u8db3 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\uff0c\u5b9a\u4e49\u540e\u7f00\u94fe\u63a5\u4e3a\u8fde\u63a5\u5230\u5bf9\u5e94\u5b57\u7b26\u4e32 longest(v) longest(v) \u7684\u957f\u5ea6\u4e3a minlen(v)-1 minlen(v)-1 \u7684\u540e\u7f00\u7684\u4e00\u6761\u8fb9\u3002\u4ece\u6839\u8282\u70b9 t_0 t_0 \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u53ef\u4ee5\u5f62\u6210\u4e00\u68f5\u6811\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u8fd9\u68f5\u6811\u5f62\u6210\u4e86 endpos endpos \u96c6\u5408\u95f4\u7684\u5305\u542b\u5173\u7cfb\u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9 v\\ne t_0 v\\ne t_0 \u7684\u72b6\u6001\u4f7f\u7528\u540e\u7f00\u94fe\u63a5 link(v) link(v) \u89e3\u91ca minlen(v) minlen(v) \u5982\u4e0b\uff1a minlen(v)=len(link(v))+1. minlen(v)=len(link(v))+1. \u5982\u679c\u6211\u4eec\u4ece\u4efb\u610f\u72b6\u6001 v_0 v_0 \u5f00\u59cb\u987a\u7740\u540e\u7f00\u94fe\u63a5\u904d\u5386\uff0c\u65e9\u665a\u90fd\u4f1a\u5230\u8fbe\u521d\u59cb\u72b6\u6001 t_0 t_0 \u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4 [minlen(v_i),\\,len(v_i)] [minlen(v_i),\\,len(v_i)] \u7684\u5e8f\u5217\uff0c\u4e14\u5b83\u4eec\u7684\u5e76\u96c6\u5f62\u6210\u4e86\u8fde\u7eed\u7684\u533a\u95f4 [0,\\,len(v_0)] [0,\\,len(v_0)] \u3002","title":"\u5c0f\u7ed3"},{"location":"string/sam/#_6","text":"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u7b97\u6cd5\u672c\u8eab\u4e86\u3002\u8fd9\u4e2a\u7b97\u6cd5\u662f \u5728\u7ebf \u7b97\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u9010\u4e2a\u52a0\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u6b65\u4e2d\u5bf9\u5e94\u5730\u7ef4\u62a4\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u7ebf\u6027\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u5c06\u53ea\u4fdd\u5b58 len len \u548c link link \u7684\u503c\u548c\u6bcf\u4e2a\u72b6\u6001\u7684\u4e00\u4e2a\u8f6c\u79fb\u5217\u8868\uff0c\u6211\u4eec\u4e0d\u4f1a\u6807\u8bb0\u7ec8\u6b62\u72b6\u6001\uff08\u4f46\u662f\u6211\u4eec\u7a0d\u540e\u4f1a\u5c55\u793a\u5728\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u540e\u5982\u4f55\u5206\u914d\u8fd9\u4e9b\u6807\u8bb0\uff09\u3002 \u4e00\u5f00\u59cb\u540e\u7f00\u81ea\u52a8\u673a\u53ea\u5305\u542b\u4e00\u4e2a\u72b6\u6001 t_0 t_0 \uff0c\u7f16\u53f7\u4e3a 0 0 \uff08\u5176\u5b83\u72b6\u6001\u7684\u7f16\u53f7\u4e3a 1,\\,2,\\,\\ldots 1,\\,2,\\,\\ldots \uff09\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5206\u914d\u7ed9\u5b83 len=0 len=0 \u548c link=-1 link=-1 \uff08 -1 -1 \u8868\u793a\u4e00\u4e2a\u865a\u62df\u7684\u4e0d\u5b58\u5728\u7684\u72b6\u6001\uff09\u3002 \u73b0\u5728\u6574\u4e2a\u4efb\u52a1\u8f6c\u5316\u4e3a\u5b9e\u73b0\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 c c \u7684\u8fc7\u7a0b\u3002\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a \u4ee4 last last \u4e3a\u5bf9\u5e94\u6dfb\u52a0\u5b57\u7b26 c c \u4e4b\u524d\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\uff08\u4e00\u5f00\u59cb\u6211\u4eec\u8bbe\u7f6e last=0 last=0 \u4e14\u6211\u4eec\u4f1a\u5728\u7b97\u6cd5\u7684\u6700\u540e\u4e00\u6b65\u5bf9\u5e94\u5730\u66f4\u65b0 last last \uff09\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u72b6\u6001 cur cur \uff0c\u5e76\u5c06 len(cur) len(cur) \u8d4b\u503c\u4e3a len(last)+1 len(last)+1 \uff0c\u5728\u8fd9\u65f6 link(cur) link(cur) \u7684\u503c\u8fd8\u672a\u77e5\u3002 \u73b0\u5728\u6211\u4eec\u6309\u4ee5\u4e0b\u6d41\u7a0b\u8fdb\u884c\uff1a\u6211\u4eec\u4ece\u72b6\u6001 last last \u5f00\u59cb\u3002\u5982\u679c\u8fd8\u6ca1\u6709\u5230\u5b57\u7b26 c c \u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u5c31\u6dfb\u52a0\u4e00\u4e2a\u5230\u72b6\u6001 cur cur \u7684\u8f6c\u79fb\uff0c\u904d\u5386\u540e\u7f00\u94fe\u63a5\u3002\u5982\u679c\u5728\u67d0\u4e2a\u70b9\u5df2\u7ecf\u5b58\u5728\u5230\u5b57\u7b26 c c \u7684\u540e\u7f00\u94fe\u63a5\uff0c\u6211\u4eec\u5c31\u505c\u4e0b\u6765\uff0c\u5e76\u5c06\u8fd9\u4e2a\u72b6\u6001\u6807\u8bb0\u4e3a p p \u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u6837\u7684\u72b6\u6001 p p \uff0c\u6211\u4eec\u5c31\u5230\u8fbe\u4e86\u865a\u62df\u72b6\u6001 -1 -1 \uff0c\u6211\u4eec\u5c06 link(cur) link(cur) \u8d4b\u503c\u4e3a 0 0 \u5e76\u9000\u51fa\u3002 \u5047\u8bbe\u73b0\u5728\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u72b6\u6001 p p \uff0c\u5176\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b57\u7b26 c c \uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u5230\u7684\u72b6\u6001\u6807\u8bb0\u4e3a q q \u3002 \u73b0\u5728\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\u4e24\u79cd\u72b6\u6001\uff0c\u8981\u4e48 len(p) + 1 = len(q) len(p) + 1 = len(q) \uff0c\u8981\u4e48\u4e0d\u662f\u3002 \u5982\u679c len(p)+1=len(q) len(p)+1=len(q) \uff0c\u6211\u4eec\u53ea\u8981\u5c06 link(cur) link(cur) \u8d4b\u503c\u4e3a q q \u5e76\u9000\u51fa\u3002 \u5426\u5219\u5c31\u4f1a\u6709\u4e9b\u590d\u6742\u3002\u9700\u8981 \u590d\u5236 \u72b6\u6001 q q \uff1a\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u72b6\u6001 clone clone \uff0c\u590d\u5236 q q \u7684\u9664\u4e86 len len \u7684\u503c\u4ee5\u5916\u7684\u6240\u6709\u4fe1\u606f\uff08\u540e\u7f00\u94fe\u63a5\u548c\u8f6c\u79fb\uff09\u3002\u6211\u4eec\u5c06 len(clone) len(clone) \u8d4b\u503c\u4e3a len(p)+1 len(p)+1 \u3002 \u590d\u5236\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u540e\u7f00\u94fe\u63a5\u4ece cur cur \u6307\u5411 clone clone \uff0c\u4e5f\u4ece q q \u6307\u5411 clone clone \u3002 \u6700\u7ec8\u6211\u4eec\u9700\u8981\u4f7f\u7528\u540e\u7f00\u94fe\u63a5\u4ece\u72b6\u6001 p p \u8fd4\u56de\uff0c\u56e0\u4e3a\u5b58\u5728\u4e00\u6761\u901a\u8fc7 c c \u5230\u72b6\u6001 q q \u7684\u8f6c\u79fb\uff0c\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u91cd\u5b9a\u5411\u6240\u6709\u72b6\u6001\u5230\u72b6\u6001 clone clone \u3002 \u4ee5\u4e0a\u4e09\u79cd\u60c5\u51b5\uff0c\u5728\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b\u4e4b\u540e\uff0c\u6211\u4eec\u5c06 last last \u7684\u503c\u66f4\u65b0\u4e3a\u72b6\u6001 cur cur \u3002 \u5982\u679c\u6211\u4eec\u8fd8\u60f3\u77e5\u9053\u54ea\u4e9b\u72b6\u6001\u662f \u7ec8\u6b62\u72b6\u6001 \u800c\u54ea\u4e9b\u4e0d\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e3a\u5b57\u7b26\u4e32 s s \u6784\u9020\u5b8c\u5b8c\u6574\u7684\u540e\u7f00\u81ea\u52a8\u673a\u540e\u627e\u5230\u6240\u6709\u7684\u7ec8\u6b62\u72b6\u6001\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4ece\u5bf9\u5e94\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u72b6\u6001\uff08\u5b58\u50a8\u5728\u53d8\u91cf last last \u4e2d\uff09\uff0c\u904d\u5386\u5b83\u7684\u540e\u7f00\u94fe\u63a5\uff0c\u76f4\u5230\u5230\u8fbe\u521d\u59cb\u72b6\u6001\u3002\u6211\u4eec\u5c06\u6240\u6709\u904d\u5386\u5230\u7684\u8282\u70b9\u90fd\u6807\u8bb0\u4e3a\u7ec8\u6b62\u8282\u70b9\u3002\u5bb9\u6613\u7406\u89e3\u8fd9\u6837\u505a\u6211\u4eec\u4f1a\u7cbe\u786e\u5730\u6807\u8bb0\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u540e\u7f00\uff0c\u8fd9\u4e9b\u72b6\u6001\u6070\u597d\u662f\u7ec8\u6b62\u72b6\u6001\u3002 \u5728\u4e0b\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u89c2\u5bdf\u7b97\u6cd5\u6bcf\u4e00\u6b65\u7684\u7ec6\u8282\uff0c\u5e76\u8bc1\u660e\u5b83\u7684 \u6b63\u786e\u6027 \u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ea\u6ce8\u610f\u5230\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u4e3a s s \u7684\u6bcf\u4e2a\u5b57\u7b26\u521b\u5efa\u4e00\u4e2a\u6216\u4e24\u4e2a\u65b0\u72b6\u6001\u6240\u4ee5\u540e\u7f00\u81ea\u52a8\u673a\u53ea\u5305\u542b \u7ebf\u6027\u4e2a \u72b6\u6001\u3002 \u8f6c\u79fb\u4e2a\u6570\u662f\u7ebf\u6027\u89c4\u6a21\u7684\uff0c\u4ee5\u53ca\u603b\u4f53\u4e0a\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u7ebf\u6027\u89c4\u6a21\u7684\uff0c\u8fd9\u4e24\u70b9\u8fd8\u4e0d\u90a3\u4e48\u6e05 \u695a\u3002","title":"\u7b97\u6cd5"},{"location":"string/sam/#_7","text":"\u82e5\u4e00\u4e2a\u8f6c\u79fb (p,\\,q) (p,\\,q) \u6ee1\u8db3 len(p)+1=len(q) len(p)+1=len(q) \u5219\u6211\u4eec\u79f0\u8fd9\u4e2a\u8f6c\u79fb\u662f \u8fde\u7eed\u7684 \u3002\u5426\u5219\uff0c\u5373\u5f53 len(p)+1<len(q) len(p)+1<len(q) \u65f6\uff0c\u8fd9\u4e2a\u8f6c\u79fb\u88ab\u79f0\u4e3a \u4e0d\u8fde\u7eed\u7684 \u3002 \u4ece\u7b97\u6cd5\u63cf\u8ff0\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u8fde\u7eed\u7684\u548c\u975e\u8fde\u7eed\u7684\u8f6c\u79fb\u662f\u7b97\u6cd5\u7684\u4e0d\u540c\u60c5\u51b5\u3002\u8fde\u7eed\u7684\u8f6c\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u4e0d\u4f1a\u518d\u6539\u53d8\u4e86\u3002\u4e0e\u6b64\u76f8\u53cd\uff0c\u5f53\u5411\u5b57\u7b26\u4e32\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u65f6\uff0c\u975e\u8fde\u7eed\u7684\u8f6c\u79fb\u53ef\u80fd\u4f1a\u6539\u53d8\uff08\u8f6c\u79fb\u8fb9\u7684\u7aef\u70b9\u53ef\u80fd\u4f1a\u6539\u53d8\uff09\u3002 \u4e3a\u4e86\u907f\u514d\u5f15\u8d77\u6b67\u4e49\uff0c\u6211\u4eec\u8bb0\u5411\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u63d2\u5165\u5f53\u524d\u5b57\u7b26 c c \u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u4e3a s s \u3002 \u7b97\u6cd5\u4ece\u521b\u5efa\u4e00\u4e2a\u65b0\u72b6\u6001 cur cur \u5f00\u59cb\uff0c\u5bf9\u5e94\u4e8e\u6574\u4e2a\u5b57\u7b26\u4e32 s+c s+c \u3002\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u7684\u539f\u56e0\u5f88\u6e05\u695a\u3002\u4e0e\u6b64\u540c\u65f6\u6211\u4eec\u4e5f\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u548c\u4e00\u4e2a\u65b0\u7684\u7b49\u4ef7\u7c7b\u3002 \u5728\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u4ece\u5bf9\u5e94\u4e8e\u6574\u4e2a\u5b57\u7b26\u4e32 s s \u7684\u72b6\u6001\u901a\u8fc7\u540e\u7f00\u94fe\u63a5\u8fdb\u884c\u904d\u5386\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u72b6\u6001\uff0c\u6211\u4eec\u5c1d\u8bd5\u6dfb\u52a0\u4e00\u4e2a\u4ece\u5b57\u7b26 c c \u5230\u65b0\u72b6\u6001 cur cur \u7684\u8f6c\u79fb\u3002\u7136\u800c\u6211\u6211\u4eec\u53ea\u80fd\u6dfb\u52a0\u4e0e\u539f\u6765\u5df2\u5b58\u5728\u7684\u8f6c\u79fb\u4e0d\u51b2\u7a81\u7684\u8f6c\u79fb\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u627e\u5230\u5df2\u5b58\u5728\u7684 c c \u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u505c\u6b62\u3002 \u6700\u7b80\u5355\u7684\u60c5\u51b5\u662f\u6211\u4eec\u5230\u8fbe\u4e86\u865a\u62df\u72b6\u6001 -1 -1 \uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e3a\u6240\u6709 s s \u7684\u540e\u7f00\u6dfb\u52a0\u4e86 c c \u7684\u8f6c\u79fb\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5b57\u7b26 c c \u4ece\u672a\u5728\u5b57\u7b26\u4e32 s s \u4e2d\u51fa\u73b0\u8fc7\u3002\u56e0\u6b64 cur cur \u7684\u540e\u7f00\u94fe\u63a5\u4e3a\u72b6\u6001 0 0 \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u627e\u5230\u4e86\u73b0\u6709\u7684\u8f6c\u79fb (p,\\,q) (p,\\,q) \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c1d\u8bd5\u5411\u81ea\u52a8\u673a\u5185\u6dfb\u52a0\u4e00\u4e2a \u5df2\u7ecf\u5b58\u5728\u7684 \u5b57\u7b26\u4e32 x+c x+c \uff08\u5176\u4e2d x x \u4e3a s s \u7684\u4e00\u4e2a\u540e\u7f00\uff0c\u4e14\u5b57\u7b26\u4e32 x+c x+c \u5df2\u7ecf\u4f5c\u4e3a s s \u7684\u4e00\u4e2a\u5b50\u4e32\u51fa\u73b0\u8fc7\u4e86\uff09\u3002\u56e0\u4e3a\u6211\u4eec\u5047\u8bbe\u5b57\u7b26\u4e32 s s \u7684\u81ea\u52a8\u673a\u7684\u6784\u9020\u662f\u6b63\u786e\u7684\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u5728\u8fd9\u91cc\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8f6c\u79fb\u3002 \u7136\u800c\uff0c\u6709\u4e00\u4e2a\u96be\u70b9\u3002\u4ece\u72b6\u6001 cur cur \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u5e94\u8be5\u8fde\u63a5\u5230\u54ea\u4e2a\u72b6\u6001\u5462\uff1f\u6211\u4eec\u8981\u628a\u540e\u7f00\u94fe\u63a5\u8fde\u5230\u4e00\u4e2a\u72b6\u6001\u4e0a\uff0c\u4e14\u5176\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u6070\u597d\u662f x+c x+c \uff0c\u5373\u8fd9\u4e2a\u72b6\u6001\u7684 len len \u5e94\u8be5\u662f len(p)+1 len(p)+1 \u3002\u7136\u800c\u8fd8\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u72b6\u6001\uff0c\u5373 len(q)>len(p)+1 len(q)>len(p)+1 \u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u901a\u8fc7\u62c6\u5f00\u72b6\u6001 q q \u6765\u521b\u5efa\u4e00\u4e2a\u8fd9\u6837\u7684\u72b6\u6001\u3002 \u5982\u679c\u8f6c\u79fb (p,\\,q) (p,\\,q) \u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48 len(q)=len(p)+1 len(q)=len(p)+1 \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e00\u5207\u90fd\u5f88\u7b80\u5355\u3002\u6211\u4eec\u53ea\u9700\u8981\u5c06 cur cur \u7684\u540e\u7f00\u94fe\u63a5\u6307\u5411\u72b6\u6001 q q \u3002 \u5426\u5219\u8f6c\u79fb\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u5373 len(q)>len(p)+1 len(q)>len(p)+1 \uff0c\u8fd9\u610f\u5473\u7740\u72b6\u6001 q q \u4e0d\u53ea\u5bf9\u5e94\u4e8e\u957f\u5ea6\u4e3a len(p)+1 len(p)+1 \u7684\u540e\u7f00 s+c s+c \uff0c\u8fd8\u5bf9\u5e94\u4e8e s s \u7684\u66f4\u957f\u7684\u5b50\u4e32\u3002\u9664\u4e86\u5c06\u72b6\u6001 q q \u62c6\u6210\u4e24\u4e2a\u5b50\u72b6\u6001\u4ee5\u5916\u6211\u4eec\u522b\u65e0\u4ed6\u6cd5\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5b50\u72b6\u6001\u7684\u957f\u5ea6\u5c31\u662f len(p)+1 len(p)+1 \u4e86\u3002 \u6211\u4eec\u5982\u4f55\u62c6\u5f00\u4e00\u4e2a\u72b6\u6001\u5462\uff1f\u6211\u4eec \u590d\u5236 \u72b6\u6001 q q \uff0c\u4ea7\u751f\u4e00\u4e2a\u72b6\u6001 clone clone \uff0c\u6211\u4eec\u5c06 len(clone) len(clone) \u8d4b\u503c\u4e3a len(p)+1 len(p)+1 \u3002\u7531\u4e8e\u6211\u4eec\u4e0d\u60f3\u6539\u53d8\u904d\u5386\u5230 q q \u7684\u8def\u5f84\uff0c\u6211\u4eec\u5c06 q q \u7684\u6240\u6709\u8f6c\u79fb\u590d\u5236\u5230 clone clone \u3002\u6211\u4eec\u4e5f\u5c06\u4ece clone clone \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u8bbe\u7f6e\u4e3a q q \u7684\u540e\u7f00\u94fe\u63a5\u7684\u76ee\u6807\uff0c\u5e76\u8bbe\u7f6e q q \u7684\u540e\u7f00\u94fe\u63a5\u4e3a clone clone \u3002 \u5728\u62c6\u5f00\u72b6\u6001\u540e\uff0c\u6211\u4eec\u5c06\u4ece cur cur \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\u8bbe\u7f6e\u4e3a clone clone \u3002 \u6700\u540e\u4e00\u6b65\u6211\u4eec\u5c06\u4e00\u4e9b\u5230 q q \u8f6c\u79fb\u91cd\u5b9a\u5411\u5230 clone clone \u3002\u6211\u4eec\u9700\u8981\u4fee\u6539\u54ea\u4e9b\u8f6c\u79fb\u5462\uff1f\u53ea\u91cd\u5b9a\u5411\u76f8\u5f53\u4e8e\u6240\u6709\u5b57\u7b26\u4e32 w+c w+c \uff08\u5176\u4e2d w w \u662f p p \u7684\u6700\u957f\u5b57\u7b26\u4e32\uff09\u7684\u540e\u7f00\u5c31\u591f\u4e86\u3002\u5373\uff0c\u6211\u4eec\u9700\u8981\u7ee7\u7eed\u6cbf\u7740\u540e\u7f00\u94fe\u63a5\u904d\u5386\uff0c\u4ece\u9876\u70b9 p p \u76f4\u5230\u865a\u62df\u72b6\u6001 -1 -1 \u6216\u8005\u662f\u8f6c\u79fb\u5230\u4e0d\u662f\u72b6\u6001 q q \u7684\u4e00\u4e2a\u8f6c\u79fb\u3002","title":"\u6b63\u786e\u6027\u8bc1\u660e"},{"location":"string/sam/#_8","text":"\u9996\u5148\u6211\u4eec\u5047\u8bbe\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a \u5e38\u6570 \u3002\u5982\u679c\u5b57\u7b26\u96c6\u5927\u5c0f\u4e0d\u662f\u5e38\u6570\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e0d\u662f\u7ebf\u6027\u7684\u3002\u4ece\u4e00\u4e2a\u9876\u70b9\u51fa\u53d1\u7684\u8f6c\u79fb\u5b58\u50a8\u5728\u652f\u6301\u5feb\u901f\u67e5\u8be2\u548c\u63d2\u5165\u7684\u5e73\u8861\u6811\u4e2d\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u8bb0 k k \u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\uff0c\u5219\u7b97\u6cd5\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log k) O(n\\log k) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u7136\u800c\u5982\u679c\u5b57\u7b26\u96c6\u8db3\u591f\u5c0f\uff0c\u53ef\u4ee5\u4e0d\u5199\u5e73\u8861\u6811\uff0c\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u5c06\u6bcf\u4e2a\u9876\u70b9\u7684\u8f6c\u79fb\u5b58\u50a8\u4e3a\u957f\u5ea6\u4e3a k k \u7684\u6570\u7ec4\uff08\u7528\u4e8e\u5feb\u901f\u67e5\u8be2\uff09\u548c\u94fe\u8868\uff08\u7528\u4e8e\u5feb\u901f\u904d\u5386\u6240\u6709\u53ef\u7528\u5173\u952e\u5b57\uff09\u3002\u8fd9\u6837\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(nk) O(nk) \u3002 \u6240\u4ee5\u6211\u4eec\u5c06\u8ba4\u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u4e3a\u5e38\u6570\uff0c\u5373\u6bcf\u6b21\u5bf9\u4e00\u4e2a\u5b57\u7b26\u641c\u7d22\u8f6c\u79fb\u3001\u6dfb\u52a0\u8f6c\u79fb\u3001\u67e5\u627e\u4e0b\u4e00\u4e2a\u8f6c\u79fb\u2014\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(1) O(1) \u3002 \u5982\u679c\u6211\u4eec\u8003\u8651\u7b97\u6cd5\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u7b97\u6cd5\u4e2d\u6709\u4e09\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u660e\u663e\u662f\u7ebf\u6027\u7684\uff1a \u7b2c\u4e00\u5904\u662f\u904d\u5386\u6240\u6709\u72b6\u6001 last last \u7684\u540e\u7f00\u94fe\u63a5\uff0c\u6dfb\u52a0\u5b57\u7b26 c c \u7684\u8f6c\u79fb\u3002 \u7b2c\u4e8c\u5904\u662f\u5f53\u72b6\u6001 q q \u88ab\u590d\u5236\u5230\u4e00\u4e2a\u65b0\u7684\u72b6\u6001 clone clone \u65f6\u590d\u5236\u8f6c\u79fb\u7684\u8fc7\u7a0b\u3002 \u7b2c\u4e09\u5904\u662f\u4fee\u6539\u6307\u5411 q q \u7684\u8f6c\u79fb\uff0c\u5c06\u5b83\u4eec\u91cd\u5b9a\u5411\u5230 clone clone \u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u4f7f\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7684\u5927\u5c0f\uff08\u72b6\u6001\u6570\u548c\u8f6c\u79fb\u6570\uff09\u4e3a \u7ebf\u6027\u7684 \u7684\u4e8b\u5b9e\uff08\u5bf9\u72b6\u6001\u6570\u662f\u7ebf\u6027\u7684\u7684\u8bc1\u660e\u5c31\u662f\u7b97\u6cd5\u672c\u8eab\uff0c\u5bf9\u72b6\u6001\u6570\u4e3a\u7ebf\u6027\u7684\u7684\u8bc1\u660e\u5c06\u5728\u7a0d\u540e\u5b9e\u73b0\u7b97\u6cd5\u540e\u7ed9\u51fa\uff09\u3002 \u56e0\u6b64\u4e0a\u8ff0 \u7b2c\u4e00\u5904\u548c\u7b2c\u4e8c\u5904 \u7684\u603b\u590d\u6742\u5ea6\u663e\u7136\u4e3a\u7ebf\u6027\u7684\uff0c\u56e0\u4e3a\u5355\u6b21\u64cd\u4f5c\u5747\u644a\u53ea\u4e3a\u81ea\u52a8\u673a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u8f6c\u79fb\u3002 \u8fd8\u9700\u4e3a \u7b2c\u4e09\u5904 \u4f30\u8ba1\u603b\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u5c06\u6700\u521d\u6307\u5411 q q \u7684\u8f6c\u79fb\u91cd\u5b9a\u5411\u5230 clone clone \u3002\u6211\u4eec\u8bb0 v=longest(p) v=longest(p) \uff0c\u8fd9\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\uff0c\u6bcf\u6b21\u8fed\u4ee3\u957f\u5ea6\u90fd\u9012\u51cf\u2014\u56e0\u4e3a\u4f5c\u4e3a\u5b57\u7b26\u4e32 s s \u7684\u4f4d\u7f6e\u968f\u7740\u6bcf\u6b21\u8fed\u4ee3\u90fd\u5355\u8c03\u4e0a\u5347\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5728\u5faa\u73af\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e4b\u524d\uff0c\u76f8\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 v v \u5728\u8ddd\u79bb last last \u7684\u6df1\u5ea6\u4e3a k k (k\\ge2) (k\\ge2) \u7684\u4f4d\u7f6e\u4e0a\uff08\u6df1\u5ea6\u8bb0\u4e3a\u540e\u7f00\u94fe\u63a5\u7684\u6570\u91cf\uff09\uff0c\u90a3\u4e48\u5728\u6700\u540e\u4e00\u6b21\u8fed\u4ee3\u540e\uff0c\u5b57\u7b26\u4e32 v+c v+c \u5c06\u4f1a\u6210\u4e3a\u8def\u5f84\u4e0a\u7b2c\u4e8c\u4e2a\u4ece cur cur \u51fa\u53d1\u7684\u540e\u7f00\u94fe\u63a5\uff08\u5b83\u5c06\u4f1a\u6210\u4e3a\u65b0\u7684 last last \u7684\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u5faa\u73af\u4e2d\u7684\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u4f7f\u4f5c\u4e3a\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u7684\u5b57\u7b26\u4e32 longest(link(link(last)) longest(link(link(last)) \u7684\u4f4d\u7f6e\u5355\u8c03\u9012\u589e\u3002\u56e0\u6b64\u8fd9\u4e2a\u5faa\u73af\u6700\u591a\u4e0d\u4f1a\u6267\u884c\u8d85\u8fc7 n n \u6b21\u8fed\u4ee3\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u9700\u8981\u8bc1\u660e\u7684\u3002","title":"\u5bf9\u64cd\u4f5c\u6b21\u6570\u4e3a\u7ebf\u6027\u7684\u8bc1\u660e"},{"location":"string/sam/#_9","text":"\u9996\u5148\uff0c\u6211\u4eec\u63cf\u8ff0\u4e00\u79cd\u5b58\u50a8\u4e00\u4e2a\u8f6c\u79fb\u7684\u5168\u90e8\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u52a0\u5165\u4e00\u4e2a\u7ec8\u6b62\u6807\u8bb0\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e9b\u5176\u5b83\u4fe1\u606f\u3002\u6211\u4eec\u5c06\u4f1a\u7528\u4e00\u4e2a map \u5b58\u50a8\u8f6c\u79fb\u7684\u5217\u8868\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u603b\u8ba1 O(n) O(n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u548c O(n\\log k) O(n\\log k) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5904\u7406\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 1 2 3 4 struct state { int len , link ; map < char , int > next ; }; \u540e\u7f00\u81ea\u52a8\u673a\u672c\u8eab\u5c06\u4f1a\u5b58\u50a8\u5728\u4e00\u4e2a state \u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u3002\u6211\u4eec\u8bb0\u5f55\u5f53\u524d\u81ea\u52a8\u673a\u7684\u5927\u5c0f sz \u548c\u53d8\u91cf last \uff0c\u5f53\u524d\u6574\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u72b6\u6001\u3002 1 2 3 const int MAXLEN = 100000 ; state st [ MAXLEN * 2 ]; int sz , last ; \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u521d\u59cb\u5316\u540e\u7f00\u81ea\u52a8\u673a\uff08\u521b\u5efa\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u72b6\u6001\u7684\u540e\u7f00\u81ea\u52a8\u673a\uff09\u3002 1 2 3 4 5 6 void sa_init () { st [ 0 ]. len = 0 ; st [ 0 ]. link = - 1 ; sz ++ ; last = 0 ; } \u6700\u7ec8\u6211\u4eec\u7ed9\u51fa\u4e3b\u51fd\u6570\u7684\u5b9e\u73b0\u2014\u7ed9\u5f53\u524d\u884c\u672b\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5bf9\u5e94\u5730\u91cd\u5efa\u81ea\u52a8\u673a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void sa_extend ( char c ) { int cur = sz ++ ; st [ cur ]. len = st [ last ]. len + 1 ; int p = last ; while ( p != - 1 && ! st [ p ]. next . count ( c )) { st [ p ]. next [ c ] = cur ; p = st [ p ]. link ; } if ( p == - 1 ) { st [ cur ]. link = 0 ; } else { int q = st [ p ]. next [ c ]; if ( st [ p ]. len + 1 == st [ q ]. len ) { st [ cur ]. link = q ; } else { int clone = sz ++ ; st [ clone ]. len = st [ p ]. len + 1 ; st [ clone ]. next = st [ q ]. next ; st [ clone ]. link = st [ q ]. link ; while ( p != - 1 && st [ p ]. next [ c ] == q ) { st [ p ]. next [ c ] = clone ; p = st [ p ]. link ; } st [ q ]. link = st [ cur ]. link = clone ; } } last = cur ; } \u6b63\u5982\u4e4b\u524d\u63d0\u5230\u7684\u4e00\u6837\uff0c\u5982\u679c\u4f60\u7528\u5185\u5b58\u6362\u65f6\u95f4\uff08\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(nk) O(nk) \uff0c\u5176\u4e2d k k \u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 O(n) O(n) \u7684\u65f6\u95f4\u5185\u6784\u9020\u5b57\u7b26\u96c6\u5927\u5c0f k k \u4efb\u610f\u7684\u540e\u7f00\u81ea\u52a8\u673a\u3002\u4f46\u662f\u8fd9\u6837\u4f60\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u72b6\u6001\u50a8\u5b58\u4e00\u4e2a\u5927\u5c0f\u4e3a k k \u7684\u6570\u7ec4\uff08\u7528\u4e8e\u5feb\u901f\u8df3\u8f6c\u5230\u8f6c\u79fb\u7684\u5b57\u7b26\uff09\uff0c\u548c\u53e6\u5916\u4e00\u4e2a\u6240\u6709\u8f6c\u79fb\u7684\u94fe\u8868\uff08\u7528\u4e8e\u5feb\u901f\u5728\u8f6c\u79fb\u4e2d\u8fed\u4ee3\uff09\u3002","title":"\u5b9e\u73b0"},{"location":"string/sam/#_10","text":"","title":"\u66f4\u591a\u7684\u6027\u8d28"},{"location":"string/sam/#_11","text":"\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5b83\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u72b6\u6001\u6570 \u4e0d\u4f1a\u8d85\u8fc7 2n-1 2n-1 \uff08\u5047\u8bbe n\\ge2 n\\ge2 \uff09\u3002 \u5bf9\u4e0a\u8ff0\u7ed3\u8bba\u7684\u8bc1\u660e\u5c31\u662f\u7b97\u6cd5\u672c\u8eab\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u81ea\u52a8\u673a\u542b\u6709\u4e00\u4e2a\u72b6\u6001\uff0c\u7b2c\u4e00\u6b21\u548c\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u53ea\u4f1a\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5269\u4f59\u7684 n-2 n-2 \u6b65\u4e2d\u6bcf\u6b65\u4f1a\u521b\u5efa\u81f3\u591a 2 2 \u4e2a\u72b6\u6001\u3002 \u7136\u800c\u6211\u4eec\u4e5f\u80fd\u5728 \u4e0d\u77e5\u9053\u8fd9\u4e2a\u7b97\u6cd5 \u7684\u60c5\u51b5\u4e0b \u5c55\u793a \u8fd9\u4e2a\u4f30\u8ba1\u503c\u3002\u6211\u4eec\u56de\u5fc6\u4e00\u4e0b\u72b6\u6001\u6570\u7b49\u4e8e\u4e0d\u540c\u7684 endpos endpos \u96c6\u5408\u4e2a\u6570\u3002\u53e6\u5916\u8fd9\u4e9b endpos endpos \u96c6\u5408\u5f62\u6210\u4e86\u4e00\u68f5\u6811\uff08\u7956\u5148\u8282\u70b9\u7684\u96c6\u5408\u5305\u542b\u4e86\u5b83\u6240\u6709\u5b69\u5b50\u8282\u70b9\u7684\u96c6\u5408\uff09\u3002\u8003\u8651\u5c06\u8fd9\u68f5\u6811\u7a0d\u5fae\u53d8\u5f62\u4e00\u4e0b\uff1a\u53ea\u8981\u5b83\u6709\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u5185\u90e8\u9876\u70b9\uff08\u8fd9\u610f\u5473\u7740\u8be5\u5b50\u8282\u70b9\u7684\u96c6\u5408\u81f3\u5c11\u9057\u6f0f\u4e86\u5b83\u7684\u7236\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u542b\u6709\u8fd9\u4e2a\u9057\u6f0f\u4f4d\u7f6e\u7684\u96c6\u5408\u3002\u6700\u540e\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u68f5\u6bcf\u4e00\u4e2a\u5185\u90e8\u9876\u70b9\u7684\u5ea6\u6570\u5927\u4e8e\u4e00\u7684\u6811\uff0c\u5e76\u4e14\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 n n \u3002\u56e0\u6b64\u8fd9\u6837\u7684\u6811\u91cc\u6709\u4e0d\u8d85\u8fc7 2n-1 2n-1 \u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u786e\u5b9a\u7684 n n \uff0c\u72b6\u6001\u6570\u7684\u4e0a\u754c\u662f\u786e\u5b9a\u7684\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u662f\uff1a ``abbb\\ldots bbb\\!\" ``abbb\\ldots bbb\\!\" \u4ece\u7b2c\u4e09\u6b21\u8fed\u4ee3\u540e\u7684\u6bcf\u6b21\u8fed\u4ee3\uff0c\u7b97\u6cd5\u90fd\u4f1a\u62c6\u5f00\u4e00\u4e2a\u72b6\u6001\uff0c\u6700\u7ec8\u4ea7\u751f\u6070\u597d 2n-1 2n-1 \u4e2a\u72b6\u6001\u3002","title":"\u72b6\u6001\u6570"},{"location":"string/sam/#_12","text":"\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5b83\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u8f6c\u79fb\u6570 \u4e0d\u4f1a\u8d85\u8fc7 3n-4 3n-4 \uff08\u5047\u8bbe n\\ge 3 n\\ge 3 \uff09\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a \u6211\u4eec\u9996\u5148\u4f30\u8ba1\u8fde\u7eed\u7684\u8f6c\u79fb\u7684\u6570\u91cf\u3002\u8003\u8651\u81ea\u52a8\u673a\u4e2d\u4ece\u72b6\u6001 t_0 t_0 \u5f00\u59cb\u7684\u6700\u957f\u8def\u5f84\u7684\u751f\u6210\u6811\u3002\u751f\u6210\u6811\u7684\u9aa8\u67b6\u53ea\u5305\u542b\u8fde\u7eed\u7684\u8fb9\uff0c\u56e0\u6b64\u6570\u91cf\u5c11\u4e8e\u72b6\u6001\u6570\uff0c\u5373\uff0c\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 2n-2 2n-2 \u3002 \u73b0\u5728\u6211\u4eec\u6765\u4f30\u8ba1\u975e\u8fde\u7eed\u7684\u8f6c\u79fb\u7684\u6570\u91cf\u3002\u4ee4\u5f53\u524d\u975e\u8fde\u7eed\u8f6c\u79fb\u4e3a (p,\\,q) (p,\\,q) \uff0c\u5176\u5b57\u7b26\u4e3a c c \u3002\u6211\u4eec\u53d6\u5b83\u7684\u5bf9\u5e94\u5b57\u7b26\u4e32 u+c+w u+c+w \uff0c\u5176\u4e2d\u5b57\u7b26\u4e32 u u \u5bf9\u5e94\u4e8e\u521d\u59cb\u72b6\u6001\u5230 p p \u7684\u6700\u957f\u8def\u5f84\uff0c w w \u5bf9\u5e94\u4e8e\u4ece p p \u5230\u4efb\u610f\u7ec8\u6b62\u72b6\u6001\u7684\u6700\u957f\u8def\u5f84\u3002\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u5b8c\u6574\u7684\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u5f62\u5982 u+c+w u+c+w \u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u540c\u7684\uff08\u56e0\u4e3a\u5b57\u7b26\u4e32 u u \u548c w w \u4ec5\u7531\u5b8c\u6574\u7684\u8f6c\u79fb\u7ec4\u6210\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u7531\u7ec8\u6b62\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u6bcf\u4e2a\u5f62\u5982 u+c+w u+c+w \u7684\u5b57\u7b26\u4e32\u90fd\u662f\u6574\u4e2a\u5b57\u7b26\u4e32 s s \u7684\u540e\u7f00\u3002\u56e0\u4e3a s s \u53ea\u6709 n n \u4e2a\u975e\u7a7a\u540e\u7f00\uff0c\u4e14\u5f62\u5982 u+c+w u+c+w \u7684\u5b57\u7b26\u4e32\u90fd\u4e0d\u5305\u542b s s \uff08\u56e0\u4e3a\u6574\u4e2a\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b8c\u6574\u7684\u8f6c\u79fb\uff09\uff0c\u6240\u4ee5\u975e\u5b8c\u6574\u7684\u8f6c\u79fb\u7684\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc7 n-1 n-1 \u3002 \u5c06\u4ee5\u4e0a\u4e24\u4e2a\u4f30\u8ba1\u503c\u7ed3\u5408\u8d77\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0a\u754c 3n-3 3n-3 \u3002\u7136\u800c\uff0c\u6700\u5927\u7684\u72b6\u6001\u6570\u53ea\u80fd\u5728\u6d4b\u8bd5\u6570\u636e ``abbb\\ldots bbb\\!\" ``abbb\\ldots bbb\\!\" \u4e2d\u4ea7\u751f\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\u8f6c\u79fb\u6570\u91cf\u663e\u7136\u5c11\u4e8e 3n-3 3n-3 \uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u66f4\u4e3a\u7d27\u786e\u7684\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8f6c\u79fb\u6570\u7684\u4e0a\u754c\uff1a 3n-4 3n-4 \u3002 \u4e0a\u754c\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32 ``abbb\\ldots bbbc\\!\" ``abbb\\ldots bbbc\\!\" \u8fbe\u5230\u3002","title":"\u8f6c\u79fb\u6570"},{"location":"string/sam/#_13","text":"\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4e00\u4e9b\u53ef\u4ee5\u7528\u540e\u7f00\u81ea\u52a8\u673a\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u7b80\u5355\uff0c\u6211\u4eec\u5047\u8bbe\u5b57\u7b26\u96c6\u7684\u5927\u5c0f k k \u4e3a\u5e38\u6570\uff0c\u5141\u8bb8\u6211\u4eec\u8ba4\u4e3a\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26\u548c\u904d\u5386\u7684\u590d\u6742\u5ea6\u4e3a\u5e38\u6570\u3002","title":"\u5e94\u7528"},{"location":"string/sam/#_14","text":"\u7ed9\u4e00\u4e2a\u6587\u672c\u4e32 T T \u548c\u591a\u4e2a\u6a21\u5f0f\u4e32 P P \uff0c\u6211\u4eec\u8981\u68c0\u67e5\u5b57\u7b26\u4e32 P P \u662f\u5426\u4f5c\u4e3a T T \u7684\u4e00\u4e2a\u5b50\u4e32\u51fa\u73b0\u3002 \u6211\u4eec\u5728 O(length(T)) O(length(T)) \u7684\u65f6\u95f4\u5185\u4e3a\u6587\u672c\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002\u4e3a\u4e86\u68c0\u67e5\u6a21\u5f0f\u4e32 T T \u662f\u5426\u5728 T T \u4e2d\u51fa\u73b0\uff0c\u6211\u4eec\u6cbf\u8f6c\u79fb\uff08\u8fb9\uff09\u4ece t_0 t_0 \u5f00\u59cb\u6839\u636e P P \u7684\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u3002\u5982\u679c\u5728\u67d0\u4e2a\u70b9\u65e0\u6cd5\u8f6c\u79fb\u4e0b\u53bb\uff0c\u5219\u6a21\u5f0f\u4e32 P P \u4e0d\u662f T T \u7684\u4e00\u4e2a\u5b50\u4e32\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u8fd9\u6837\u5904\u7406\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32 P P \uff0c\u90a3\u4e48\u6a21\u5f0f\u4e32\u5728 T T \u4e2d\u51fa\u73b0\u8fc7\u3002\u56e0\u6b64 \u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32 P P \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(P)) O(length(P)) \u3002\u6b64\u5916\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u627e\u5230\u4e86\u6a21\u5f0f\u4e32 P P \u5728\u6587\u672c\u4e32\u4e2d\u51fa\u73b0\u7684\u6700\u5927\u524d\u7f00\u957f\u5ea6\u3002","title":"\u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u51fa\u73b0"},{"location":"string/sam/#_15","text":"\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \uff0c\u8ba1\u7b97\u4e0d\u540c\u5b50\u4e32\u7684\u4e2a\u6570\u3002 \u4e3a\u5b57\u7b26\u4e32 S S \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u6bcf\u4e2a S S \u7684\u5b50\u4e32\u90fd\u76f8\u5f53\u4e8e\u81ea\u52a8\u673a\u4e2d\u7684\u4e00\u4e9b\u8def\u5f84\u3002\u56e0\u6b64\u4e0d\u540c\u5b50\u4e32\u7684\u4e2a\u6570\u7b49\u4e8e\u81ea\u52a8\u673a\u4e2d\u4ee5 t_0 t_0 \u4e3a\u8d77\u70b9\u7684\u4e0d\u540c\u8def\u5f84\u7684\u6761\u6570\u3002 \u8003\u8651\u5230\u540e\u7f00\u81ea\u52a8\u673a\u4e3a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e0d\u540c\u8def\u5f84\u7684\u6761\u6570\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u3002 \u5373\uff0c\u4ee4 d[v] d[v] \u4e3a\u4ece\u72b6\u6001 v v \u5f00\u59cb\u7684\u8def\u5f84\u6570\u91cf\uff08\u5305\u62ec\u957f\u5ea6\u4e3a\u96f6\u7684\u8def\u5f84\uff09\uff0c\u5219\u6211\u4eec\u6709\u5982\u4e0b\u9012\u63a8\u65b9\u7a0b\u5f0f\uff1a d[v]=1+\\sum_{w:(v,\\,w,\\,c)\\in SA}d[w] d[v]=1+\\sum_{w:(v,\\,w,\\,c)\\in SA}d[w] \u5373\uff0c d[v] d[v] \u53ef\u4ee5\u8868\u793a\u4e3a\u6240\u6709 v v \u7684\u8f6c\u79fb\u7684\u672b\u7aef\u7684\u548c\u3002 \u6240\u4ee5\u4e0d\u540c\u5b50\u4e32\u7684\u4e2a\u6570\u4e3a d[t_0]-1 d[t_0]-1 \uff08\u56e0\u4e3a\u8981\u53bb\u6389\u7a7a\u5b50\u4e32\uff09\u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a O(length(S)) O(length(S)) \u3002","title":"\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570"},{"location":"string/sam/#_16","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \uff0c\u8ba1\u7b97\u6240\u6709\u4e0d\u540c\u5b50\u4e32\u7684\u603b\u957f\u5ea6\u3002 \u672c\u9898\u505a\u6cd5\u4e0e\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u53ea\u662f\u73b0\u5728\u6211\u4eec\u9700\u8981\u8003\u8651\u5206\u4e24\u90e8\u5206\u8fdb\u884c\u52a8\u6001\u89c4\u5212\uff1a\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u91cf d[v] d[v] \u548c\u5b83\u4eec\u7684\u603b\u957f\u5ea6 ans[v] ans[v] \u3002 \u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u9898\u4e2d\u4ecb\u7ecd\u4e86\u5982\u4f55\u8ba1\u7b97 d[v] d[v] \u3002 ans[v] ans[v] \u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u901a\u8fc7\u4ee5\u4e0b\u9012\u63a8\u5f0f\u8ba1\u7b97\uff1a ans[v]=\\sum_{w:(v,\\,w,\\,c)\\in DAWG}d[w]+ans[w] ans[v]=\\sum_{w:(v,\\,w,\\,c)\\in DAWG}d[w]+ans[w] \u6211\u4eec\u53d6\u6bcf\u4e2a\u90bb\u63a5\u9876\u70b9 w w \u7684\u7b54\u6848\uff0c\u5e76\u52a0\u4e0a d[w] d[w] \uff08\u56e0\u4e3a\u4ece\u72b6\u6001 v v \u51fa\u53d1\u7684\u5b50\u4e32\u90fd\u589e\u52a0\u4e86\u4e00\u4e2a\u5b57\u7b26\uff09\u3002 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(length(S)) O(length(S)) \u3002","title":"\u6240\u6709\u4e0d\u540c\u5b50\u4e32\u7684\u603b\u957f\u5ea6"},{"location":"string/sam/#k","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \u3002\u591a\u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u5b9a\u4e00\u4e2a\u6570 K_i K_i \uff0c\u67e5\u8be2\u6240\u6709\u5b50\u4e32\u4e2d\u8bcd\u5178\u5e8f\u7b2c k k \u5927\u7684\u5b50\u4e32\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u601d\u8def\u57fa\u4e8e\u524d\u4e24\u4e2a\u95ee\u9898\u7684\u601d\u8def\u3002\u5b57\u5178\u5e8f\u7b2c k k \u5927\u7684\u5b50\u4e32\u5bf9\u5e94\u4e8e\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u5b57\u5178\u5e8f\u7b2c k k \u5927\u7684\u8def\u5f84\u3002\u56e0\u6b64\u5728\u8ba1\u7b97\u6bcf\u4e2a\u72b6\u6001\u7684\u8def\u5f84\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ece\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6839\u5f00\u59cb\u627e\u5230\u7b2c k k \u5927\u7684\u8def\u5f84\u3002 \u9884\u5904\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(S)) O(length(S)) \uff0c\u5355\u6b21\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4e3a O(length(ans)\\cdot k) O(length(ans)\\cdot k) \uff08\u5176\u4e2d ans ans \u662f\u67e5\u8be2\u7684\u7b54\u6848\uff0c k k \u4e3a\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\uff09\u3002","title":"\u5b57\u5178\u5e8f\u7b2c k \u5927\u5b50\u4e32"},{"location":"string/sam/#_17","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \u3002\u627e\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5faa\u73af\u79fb\u4f4d\u3002 \u6211\u4eec\u4e3a\u5b57\u7b26\u4e32 S+S S+S \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002\u5219\u540e\u7f00\u81ea\u52a8\u673a\u672c\u8eab\u5c06\u5305\u542b\u5b57\u7b26\u4e32 S S \u7684\u6240\u6709\u5faa\u73af\u79fb\u4f4d\u4f5c\u4e3a\u8def\u5f84\u3002 \u6240\u4ee5\u95ee\u9898\u7b80\u5316\u4e3a\u5bfb\u627e\u6700\u5c0f\u7684\u957f\u5ea6\u4e3a length(S) length(S) \u7684\u8def\u5f84\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5e73\u51e1\u7684\u65b9\u6cd5\u505a\u5230\uff1a\u6211\u4eec\u4ece\u521d\u59cb\u72b6\u6001\u5f00\u59cb\uff0c\u8d2a\u5fc3\u5730\u8bbf\u95ee\u6700\u5c0f\u7684\u5b57\u7b26\u5373\u53ef\u3002 \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(S)) O(length(S)) \u3002","title":"\u6700\u5c0f\u5faa\u73af\u79fb\u4f4d"},{"location":"string/sam/#_18","text":"\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6587\u672c\u4e32 T T \uff0c\u6709\u591a\u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u4e00\u4e2a\u6a21\u5f0f\u4e32 P P \uff0c\u56de\u7b54\u6a21\u5f0f\u4e32 P P \u5728\u5b57\u7b26\u4e32 T T \u4e2d\u4f5c\u4e3a\u5b50\u4e32\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002 \u6211\u4eec\u4e3a\u6587\u672c\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u505a\u4ee5\u4e0b\u7684\u9884\u5904\u7406\uff1a\u5bf9\u4e8e\u81ea\u52a8\u673a\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001 v v \uff0c\u9884\u5904\u7406\u503c\u7b49\u4e8e endpos(v) endpos(v) \u8fd9\u4e2a\u96c6\u5408\u5927\u5c0f\u7684 cnt[v] cnt[v] \u3002\u4e8b\u5b9e\u4e0a\u5bf9\u5e94\u4e8e\u540c\u4e00\u72b6\u6001 v v \u7684\u6240\u6709\u5b50\u4e32\u5728\u6587\u672c\u4e32 T T \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u540c\uff0c\u8fd9\u76f8\u5f53\u4e8e\u96c6\u5408 endpos endpos \u4e2d\u7684\u4f4d\u7f6e\u6570\u3002 \u7136\u800c\u6211\u4eec\u4e0d\u80fd\u660e\u786e\u7684\u6784\u9020\u96c6\u5408 endpos endpos \uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8003\u8651\u5b83\u4eec\u7684\u5927\u5c0f cnt cnt \u3002 \u4e3a\u4e86\u8ba1\u7b97\u8fd9\u4e9b\u503c\uff0c\u6211\u4eec\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\uff0c\u5982\u679c\u5b83\u4e0d\u662f\u901a\u8fc7\u590d\u5236\u521b\u5efa\u7684\uff08\u4e14\u5b83\u4e0d\u662f\u521d\u59cb\u72b6\u6001 t_0 t_0 \uff09\uff0c\u6211\u4eec\u7528 cnt=1 cnt=1 \u521d\u59cb\u5316\u5b83\u3002\u7136\u540e\u6211\u4eec\u6309\u5b83\u4eec\u7684\u957f\u5ea6 len len \u964d\u5e8f\u904d\u5386\u6240\u6709\u72b6\u6001\uff0c\u5e76\u5c06\u5f53\u524d\u7684 cnt[v] cnt[v] \u7684\u503c\u52a0\u5230\u540e\u7f00\u94fe\u63a5\u4e0a\uff0c\u5373\uff1a cnt[link(v)]+=cnt[v] cnt[link(v)]+=cnt[v] \u8fd9\u6837\u505a\u6bcf\u4e2a\u72b6\u6001\u7684\u7b54\u6848\u90fd\u662f\u6b63\u786e\u7684\u3002 \u4e3a\u4ec0\u4e48\u8fd9\u662f\u6b63\u786e\u7684\uff1f\u901a\u8fc7\u590d\u5236\u83b7\u5f97\u7684\u72b6\u6001\uff0c\u6070\u597d\u662f length(T) length(T) \uff0c\u5e76\u4e14\u5b83\u4eec\u4e2d\u7684\u524d i i \u4e2a\u5728\u6211\u4eec\u63d2\u5165\u524d i i \u4e2a\u5b57\u7b26\u65f6\u4ea7\u751f\u3002\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u8fd9\u6837\u7684\u72b6\u6001\uff0c\u6211\u4eec\u5728\u5b83\u88ab\u5904\u7406\u65f6\u8ba1\u7b97\u5b83\u4eec\u6240\u5bf9\u5e94\u7684\u4f4d\u7f6e\u7684\u6570\u91cf\u3002\u56e0\u6b64\u6211\u4eec\u521d\u59cb\u5c06\u8fd9\u4e9b\u72b6\u6001\u7684 cnt cnt \u7684\u503c\u8d4b\u4e3a 1 1 \uff0c\u5176\u5b83\u72b6\u6001\u7684 cnt cnt \u503c\u8d4b\u4e3a 0 0 \u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a v v \u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a cnt[link(v)]+=cnt[v] cnt[link(v)]+=cnt[v] \u3002\u5176\u80cc\u540e\u7684\u542b\u4e49\u662f\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 v v \u51fa\u73b0\u4e86 cnt[v] cnt[v] \u6b21\uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u540e\u7f00\u4e5f\u5728\u5b8c\u5168\u76f8\u540c\u7684\u5730\u65b9\u7ed3\u675f\uff0c\u5373\u4e5f\u51fa\u73b0\u4e86 cnt[v] cnt[v] \u6b21\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u91cd\u590d\u8ba1\u6570\uff08\u5373\u628a\u67d0\u4e9b\u4f4d\u7f6e\u6570\u4e86\u4e24\u6b21\uff09\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u53ea\u5c06\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e\u6dfb\u52a0\u5230 \u4e00\u4e2a \u5176\u5b83\u7684\u72b6\u6001\u4e0a\uff0c\u6240\u4ee5\u4e00\u4e2a\u72b6\u6001\u4e0d\u53ef\u80fd\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u5c06\u5176\u4f4d\u7f6e\u91cd\u590d\u5730\u6307\u5411\u53e6\u4e00\u4e2a\u72b6\u6001\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(length(T)) O(length(T)) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u6240\u6709\u72b6\u6001\u7684 cnt cnt \u7684\u503c\u3002 \u6700\u540e\u56de\u7b54\u8be2\u95ee\u53ea\u9700\u8981\u67e5\u627e\u67e5\u627e\u503c cnt[t] cnt[t] \uff0c\u5176\u4e2d t t \u4e3a\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u72b6\u6001\u5c31\u662f\u72b6\u6001\u5bf9\u5e94\u7684\u6a21\u5f0f\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7b54\u6848\u5c31\u4e3a 0 0 \u3002\u5355\u6b21\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(P)) O(length(P)) \u3002","title":"\u51fa\u73b0\u6b21\u6570"},{"location":"string/sam/#_19","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\u4e32 T T \uff0c\u591a\u7ec4\u67e5\u8be2\u3002\u6bcf\u6b21\u67e5\u8be2\u5b57\u7b26\u4e32 P P \u5728\u5b57\u7b26\u4e32 T T \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08 P P \u7684\u5f00\u5934\u4f4d\u7f6e\uff09\u3002 \u6211\u4eec\u518d\u6784\u9020\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u3002\u6211\u4eec\u5bf9\u81ea\u52a8\u673a\u4e2d\u7684\u6240\u6709\u72b6\u6001\u9884\u5904\u7406\u4f4d\u7f6e firstpos firstpos \u3002\u5373\uff0c\u5bf9\u6bcf\u4e2a\u72b6\u6001 v v \u6211\u4eec\u60f3\u8981\u627e\u5230\u7b2c\u4e00\u6b21\u51fa\u73b0\u8fd9\u4e2a\u72b6\u6001\u7684\u672b\u7aef\u7684\u4f4d\u7f6e firstpos[v] firstpos[v] \u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u5148\u627e\u5230\u6bcf\u4e2a\u96c6\u5408 endpos endpos \u4e2d\u7684\u6700\u5c0f\u7684\u5143\u7d20\uff08\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u663e\u5f0f\u5730\u7ef4\u62a4\u6240\u6709 endpos endpos \u96c6\u5408\uff09\u3002 \u4e3a\u4e86\u7ef4\u62a4 firstpos firstpos \u8fd9\u4e9b\u4f4d\u7f6e\uff0c\u6211\u4eec\u5c06\u539f\u51fd\u6570\u6269\u5c55\u4e3a sa_extend() \u3002\u5f53\u6211\u4eec\u521b\u5efa\u65b0\u72b6\u6001 cur cur \u65f6\uff0c\u6211\u4eec\u4ee4\uff1a firstpos(cur)=len(cur)-1 firstpos(cur)=len(cur)-1 \uff1b\u5f53\u6211\u4eec\u5c06\u9876\u70b9 q q \u590d\u5236\u5230 clone clone \u65f6\uff0c\u6211\u4eec\u4ee4\uff1a firstpos(clone)=firstpos(q) firstpos(clone)=firstpos(q) \uff08\u56e0\u4e3a\u503c\u7684\u552f\u4e00\u5176\u5b83\u9009\u9879 firstpos(cur) firstpos(cur) \u80af\u5b9a\u592a\u5927\u4e86\uff09\u3002 \u90a3\u4e48\u67e5\u8be2\u7684\u7b54\u6848\u5c31\u662f firstpos(t)-length(P)+1 firstpos(t)-length(P)+1 \uff0c\u5176\u4e2d t t \u4e3a\u5bf9\u5e94\u5b57\u7b26\u4e32 P P \u7684\u72b6\u6001\u3002\u5355\u6b21\u67e5\u8be2\u53ea\u9700\u8981 O(length(P)) O(length(P)) \u7684\u65f6\u95f4\u3002","title":"\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e"},{"location":"string/sam/#_20","text":"\u95ee\u9898\u540c\u4e0a\uff0c\u8fd9\u4e00\u6b21\u9700\u8981\u67e5\u8be2\u6587\u672c\u4e32 T T \u4e2d\u6a21\u5f0f\u4e32\u51fa\u73b0\u7684\u6240\u6709\u4f4d\u7f6e\u3002 \u6211\u4eec\u8fd8\u662f\u4e3a\u6587\u672c\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002\u4e0e\u4e0a\u4e00\u4e2a\u95ee\u9898\u76f8\u4f3c\u5730\uff0c\u6211\u4eec\u4e3a\u6240\u6709\u72b6\u6001\u8ba1\u7b97\u4f4d\u7f6e firstpos firstpos \u3002 \u5982\u679c t t \u4e3a\u5bf9\u5e94\u4e8e\u6a21\u5f0f\u4e32 T T \u7684\u72b6\u6001\uff0c\u663e\u7136 firstpos(t) firstpos(t) \u4e3a\u7b54\u6848\u7684\u4e00\u90e8\u5206\u3002\u9700\u8981\u67e5\u627e\u7684\u5176\u5b83\u4f4d\u7f6e\u600e\u4e48\u529e\uff1f\u6211\u4eec\u4f7f\u7528\u4e86\u542b\u6709\u5b57\u7b26\u4e32 P P \u7684\u81ea\u52a8\u673a\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u54ea\u4e9b\u72b6\u6001\u7eb3\u5165\u81ea\u52a8\u673a\u5462\uff1f\u6240\u6709\u5bf9\u5e94\u4e8e\u4ee5 P P \u4e3a\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u7684\u72b6\u6001\u3002\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u8981\u627e\u5230\u6240\u6709\u53ef\u4ee5\u901a\u8fc7\u540e\u7f00\u94fe\u63a5\u5230\u8fbe\u72b6\u6001 t t \u7684\u72b6\u6001\u3002 \u56e0\u6b64\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u72b6\u6001\u4fdd\u5b58\u4e00\u4e2a\u6307\u5411\u5b83\u7684\u540e\u7f00\u5f15\u7528\u5217\u8868\u3002\u67e5\u8be2\u7684\u7b54\u6848\u5c31\u5305\u542b\u4e86\u5bf9\u4e8e\u6bcf\u4e2a\u6211\u4eec\u80fd\u4ece\u72b6\u6001 t t \u53ea\u4f7f\u7528\u540e\u7f00\u5f15\u7528\u8fdb\u884c DFS \u6216 BFS \u7684\u6240\u6709\u72b6\u6001\u7684 firstpos firstpos \u503c\u3002 \u8fd9\u79cd\u53d8\u901a\u65b9\u6848\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(answer(P)) O(answer(P)) \uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u4f1a\u91cd\u590d\u8bbf\u95ee\u4e00\u4e2a\u72b6\u6001\uff08\u56e0\u4e3a\u5bf9\u4e8e\u4ec5\u6709\u4e00\u4e2a\u540e\u7f00\u94fe\u63a5\u6307\u5411\u4e00\u4e2a\u72b6\u6001\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u4e24\u6761\u4e0d\u540c\u7684\u8def\u5f84\u6307\u5411\u540c\u4e00\u72b6\u6001\uff09\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e24\u4e2a\u53ef\u80fd\u6709\u76f8\u540c endpos endpos \u503c\u7684\u4e0d\u540c\u72b6\u6001\u3002\u5982\u679c\u4e00\u4e2a\u72b6\u6001\u662f\u7531\u53e6\u4e00\u4e2a\u590d\u5236\u800c\u6765\u7684\uff0c\u5219\u8fd9\u79cd\u60c5\u51b5\u4f1a\u53d1\u751f\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u5bf9\u590d\u6742\u5ea6\u5206\u6790\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u72b6\u6001\u81f3\u591a\u88ab\u590d\u5236\u4e00\u6b21\u3002 \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u4ece\u88ab\u590d\u5236\u7684\u8282\u70b9\u8f93\u51fa\u4f4d\u7f6e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u53bb\u9664\u91cd\u590d\u7684\u4f4d\u7f6e\u3002\u4e8b\u5b9e\u4e0a\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\uff0c\u5982\u679c\u7ecf\u8fc7\u88ab\u590d\u5236\u72b6\u6001\u53ef\u4ee5\u5230\u8fbe\uff0c\u5219\u7ecf\u8fc7\u539f\u72b6\u6001\u4e5f\u53ef\u4ee5\u5230\u8fbe\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u6bcf\u4e2a\u72b6\u6001\u8bb0\u5f55\u6807\u8bb0 is_clone \uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u5730\u5ffd\u7565\u6389\u88ab\u590d\u5236\u7684\u72b6\u6001\uff0c\u53ea\u8f93\u51fa\u5176\u5b83\u6240\u6709\u72b6\u6001\u7684 firstpos firstpos \u7684\u503c\u3002 \u4ee5\u4e0b\u662f\u5b9e\u73b0\u7684\u6846\u67b6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct state { ... bool is_clone ; int first_pos ; vector < int > inv_link ; }; // \u5728\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u540e for ( int v = 1 ; v < sz ; v ++ ) { st [ st [ v ]. link ]. inv_link . push_back ( v ); } // \u8f93\u51fa\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e void output_all_occurrences ( int v , int P_length ) { if ( ! st [ v ]. is_clone ) cout << st [ v ]. first_pos - P_length + 1 << endl ; for ( int u : st [ v ]. inv_link ) output_all_occurrences ( u , P_length ); }","title":"\u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e"},{"location":"string/sam/#_21","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \u548c\u4e00\u4e2a\u7279\u5b9a\u7684\u5b57\u7b26\u96c6\uff0c\u6211\u4eec\u8981\u627e\u4e00\u4e2a\u957f\u5ea6\u6700\u77ed\u7684\u6ca1\u6709\u5728 S S \u4e2d\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u5728\u5b57\u7b26\u4e32 S S \u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u505a\u52a8\u6001\u89c4\u5212\u3002 \u4ee4 d[v] d[v] \u4e3a\u8282\u70b9 v v \u7684\u7b54\u6848\uff0c\u5373\uff0c\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\u5b50\u4e32\u7684\u4e00\u90e8\u5206\uff0c\u5f53\u524d\u5728\u72b6\u6001 v v \uff0c\u60f3\u627e\u5230\u4e0d\u8fde\u7eed\u7684\u8f6c\u79fb\u9700\u8981\u6dfb\u52a0\u7684\u6700\u5c0f\u5b57\u7b26\u6570\u91cf\u3002\u8ba1\u7b97 d[v] d[v] \u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u4e0d\u5b58\u5728\u4f7f\u7528\u5b57\u7b26\u96c6\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5b57\u7b26\u7684\u8f6c\u79fb\uff0c\u5219 d[v]=1 d[v]=1 \u3002\u5426\u5219\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u591f\u7684\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u6240\u6709\u8f6c\u79fb\u4e2d\u7684\u6700\u5c0f\u503c\uff1a d[v]=1+\\min_{w(v,\\,w,\\,c)\\in SA}d[w] d[v]=1+\\min_{w(v,\\,w,\\,c)\\in SA}d[w] \u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f d[t_0] d[t_0] \uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u8fc7\u7684\u6570\u7ec4 d[] d[] \u9006\u63a8\u56de\u53bb\u3002","title":"\u6700\u77ed\u7684\u6ca1\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u4e32"},{"location":"string/sam/#_22","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 S S \u548c T T \uff0c\u6c42\u51fa\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c\u516c\u5171\u5b50\u4e32\u5b9a\u4e49\u4e3a\u5728 S S \u548c T T \u4e2d\u90fd\u4f5c\u4e3a\u5b50\u4e32\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u4e32 X X \u3002 \u6211\u4eec\u4e3a\u5b57\u7b26\u4e32 S S \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u6211\u4eec\u73b0\u5728\u5904\u7406\u5b57\u7b26\u4e32 T T \uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u524d\u7f00\u90fd\u5728 S S \u4e2d\u5bfb\u627e\u8fd9\u4e2a\u524d\u7f00\u7684\u6700\u957f\u540e\u7f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32 T T \u4e2d\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u60f3\u8981\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7ed3\u675f\u7684 S S \u548c T T \u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\uff0c \u5f53\u524d\u72b6\u6001 v v \u548c \u5f53\u524d\u957f\u5ea6 l l \u3002\u8fd9\u4e24\u4e2a\u53d8\u91cf\u63cf\u8ff0\u5f53\u524d\u5339\u914d\u7684\u90e8\u5206\uff1a\u5b83\u7684\u957f\u5ea6\u548c\u5b83\u4eec\u5bf9\u5e94\u7684\u72b6\u6001\u3002 \u4e00\u5f00\u59cb v=t_0 v=t_0 \u4e14 l=0 l=0 \uff0c\u5373\uff0c\u5339\u914d\u4e3a\u7a7a\u4e32\u3002 \u73b0\u5728\u6211\u4eec\u6765\u63cf\u8ff0\u5982\u4f55\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 T[i] T[i] \u5e76\u4e3a\u5176\u91cd\u65b0\u8ba1\u7b97\u7b54\u6848\uff1a \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4ece v v \u5230\u5b57\u7b26 T[i] T[i] \u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8f6c\u79fb\u5e76\u8ba9 l l \u81ea\u589e\u4e00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u9700\u8981\u7f29\u77ed\u5f53\u524d\u5339\u914d\u7684\u90e8\u5206\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u540e\u7f00\u94fe\u63a5\u8fdb\u884c\u8f6c\u79fb\uff1a v=link(v) v=link(v) \u4e0e\u6b64\u540c\u65f6\uff0c\u9700\u8981\u7f29\u77ed\u5f53\u524d\u957f\u5ea6\u3002\u663e\u7136\u6211\u4eec\u9700\u8981\u5c06 l l \u8d4b\u503c\u4e3a len(v) len(v) \uff0c\u56e0\u4e3a\u7ecf\u8fc7\u8fd9\u4e2a\u540e\u7f00\u94fe\u63a5\u540e\u6211\u4eec\u5230\u8fbe\u7684\u72b6\u6001\u6240\u5bf9\u5e94\u7684\u6700\u957f\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u5b50\u4e32\u3002 \u5982\u679c\u4ecd\u7136\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e00\u5b57\u7b26\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u7ee7\u7eed\u91cd\u590d\u7ecf\u8fc7\u540e\u7f00\u94fe\u63a5\u5e76\u51cf\u5c0f l l \uff0c\u76f4\u5230\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u8f6c\u79fb\u6216\u5230\u8fbe\u865a\u62df\u72b6\u6001 -1 -1 \uff08\u8fd9\u610f\u5473\u7740\u5b57\u7b26 T[i] T[i] \u6839\u672c\u6ca1\u6709\u5728 S S \u4e2d\u51fa\u73b0\u8fc7\uff0c\u6240\u4ee5\u6211\u4eec\u8bbe\u7f6e v=l=0 v=l=0 \uff09\u3002 \u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u6240\u6709 l l \u7684\u6700\u5927\u503c\u3002 \u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(length(T)) O(length(T)) \uff0c\u56e0\u4e3a\u6bcf\u6b21\u79fb\u52a8\u6211\u4eec\u8981\u4e48\u53ef\u4ee5\u4f7f l l \u589e\u52a0\u4e00\uff0c\u8981\u4e48\u53ef\u4ee5\u5728\u540e\u7f00\u94fe\u63a5\u95f4\u79fb\u52a8\u51e0\u6b21\uff0c\u6bcf\u6b21\u90fd\u51cf\u5c0f l l \u7684\u503c\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 string lcs ( string S , string T ) { sa_init (); for ( int i = 0 ; i < S . size (); i ++ ) sa_extend ( S [ i ]); int v = 0 , l = 0 , best = 0 , bestpos = 0 ; for ( int i = 0 ; i < T . size (); i ++ ) { while ( v && ! st [ v ]. next . count ( T [ i ])) { v = st [ v ]. link ; l = st [ v ]. length ; } if ( st [ v ]. next . count ( T [ i ])) { v = st [ v ]. next [ T [ i ]]; l ++ ; } if ( l > best ) { best = l ; bestpos = i ; } } return t . substr ( bestpos - best + 1 , best ); }","title":"\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32"},{"location":"string/sam/#_23","text":"\u7ed9\u5b9a k k \u4e2a\u5b57\u7b26\u4e32 S_i S_i \u3002\u6211\u4eec\u9700\u8981\u627e\u5230\u5b83\u4eec\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c\u5373\u4f5c\u4e3a\u5b50\u4e32\u51fa\u73b0\u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4e32 X X \u3002 \u6211\u4eec\u5c06\u6240\u6709\u7684\u5b50\u4e32\u8fde\u63a5\u6210\u4e00\u4e2a\u8f83\u957f\u7684\u5b57\u7b26\u4e32 T T \uff0c\u4ee5\u7279\u6b8a\u5b57\u7b26 D_i D_i \u5206\u5f00\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff08\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\uff1a T=S_1+D_1+S_2+D_2+\\cdots+S_k+D_k. T=S_1+D_1+S_2+D_2+\\cdots+S_k+D_k. \u7136\u540e\u4e3a\u5b57\u7b26\u4e32 T T \u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u5728\u81ea\u52a8\u673a\u4e2d\u627e\u5230\u5b58\u5728\u4e8e\u6240\u6709\u5b57\u7b26\u4e32 S_i S_i \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6dfb\u52a0\u7684\u7279\u6b8a\u5b57\u7b26\u5b8c\u6210\u3002\u6ce8\u610f\u5982\u679c S_j S_j \u5305\u542b\u4e86\u4e00\u4e2a\u5b50\u4e32\uff0c\u5219\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u5b58\u5728\u4e00\u6761\u4ece\u5305\u542b\u5b57\u7b26 D_j D_j \u7684\u5b50\u4e32\u800c\u4e0d\u5305\u542b\u4ee5\u5176\u5b83\u5b57\u7b26 D_1,\\,\\ldots,\\,D_{j-1},\\,D_{j+1},\\,\\ldots,\\,D_k D_1,\\,\\ldots,\\,D_{j-1},\\,D_{j+1},\\,\\ldots,\\,D_k \u5f00\u59cb\u7684\u8def\u5f84\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u53ef\u8fbe\u6027\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u5bf9\u4e8e\u81ea\u52a8\u673a\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u548c\u6bcf\u4e2a\u5b57\u7b26 D_i D_i \u662f\u5426\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u6761\u8def\u5f84\u3002\u8fd9\u53ef\u4ee5\u5bb9\u6613\u5730\u901a\u8fc7 DFS \u6216 BFS \u4e0e\u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u72b6\u6001 v v \u7684\u5b57\u7b26\u4e32 longest(v) longest(v) \u4e2d\u5b58\u5728\u6240\u6709\u7279\u6b8a\u5b57\u7b26\u7684\u8def\u5f84\u3002","title":"\u591a\u4e2a\u5b57\u7b26\u4e32\u95f4\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32"},{"location":"string/sam/#_24","text":"SPOJ #7258 SUBLEX HihoCoder #1441 : \u540e\u7f00\u81ea\u52a8\u673a\u4e00 \u00b7 \u57fa\u672c\u6982\u5ff5","title":"\u4f8b\u9898"},{"location":"string/sam/#_25","text":"\u6211\u4eec\u5148\u7ed9\u51fa\u4e0e\u540e\u7f00\u81ea\u52a8\u673a\u6709\u5173\u7684\u6700\u521d\u7684\u4e00\u4e9b\u6587\u732e\uff1a A. Blumer, J. Blumer, A. Ehrenfeucht, D. Haussler, R. McConnell. Linear Size Finite Automata for the Set of All Subwords of a Word. An Outline of Results [1983] A. Blumer, J. Blumer, A. Ehrenfeucht, D. Haussler. The Smallest Automaton Recognizing the Subwords of a Text [1984] Maxime Crochemore. Optimal Factor Transducers [1985] Maxime Crochemore. Transducers and Repetitions [1986] A. Nerode. Linear automaton transformations [1958] \u53e6\u5916\uff0c\u5728\u66f4\u65b0\u7684\u4e00\u4e9b\u8d44\u6e90\u91cc\uff0c\u5728\u5f88\u591a\u5173\u4e8e\u5b57\u7b26\u4e32\u7b97\u6cd5\u7684\u4e66\u4e2d\uff0c\u90fd\u80fd\u627e\u5230\u8fd9\u4e2a\u4e3b\u9898\uff1a Maxime Crochemore, Rytter Wowjcieh. Jewels of Stringology [2002] Bill Smyth. Computing Patterns in Strings [2003] Bill Smith. Methods and algorithms of calculations on lines [2006] \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u8d44\u6599\uff1a \u300a\u540e\u7f00\u81ea\u52a8\u673a\u300b\uff0c\u9648\u7acb\u6770\u3002 \u300a\u540e\u7f00\u81ea\u52a8\u673a\u5728\u5b57\u5178\u6811\u4e0a\u7684\u62d3\u5c55\u300b\uff0c\u5218\u7814\u7ece\u3002 \u300a\u540e\u7f00\u81ea\u52a8\u673a\u53ca\u5176\u5e94\u7528\u300b\uff0c\u5f20\u5929\u626c\u3002 https://www.cnblogs.com/zinthos/p/3899679.html https://codeforces.com/blog/entry/20861 https://zhuanlan.zhihu.com/p/25948077 \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 \u0421\u0443\u0444\u0444\u0438\u043a\u0441\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Suffix Automaton \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002","title":"\u76f8\u5173\u8d44\u6599"},{"location":"string/suffix-tree/","text":"","title":"\u540e\u7f00\u6811"},{"location":"string/trie/","text":"Trie \u00b6 \u5148\u8003\u8651\u600e\u4e48\u5b58\u591a\u4e2a\u4e32 \u4e00\u79cd\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709 |\u2211| |\u2211| \u4e2a\u513f\u5b50\uff0c\u6bcf\u6761\u8fb9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26 \u7a7a\u95f4 O(len) O(len) \uff08\u5982\u679c\u5047\u8bbe |\u2211| |\u2211| \u4e3a\u5e38\u6570\uff09 \u8981\u5224\u65ad\u67d0\u4e2a\u4e32\u662f\u5426\u7b49\u4e8e\u67d0\u4e2a\u6a21\u5f0f\u4e32\uff0c\u53ea\u8981\u5728 Trie \u4e0a\u8d70\u4e00\u904d\uff08\u7ebf\u6027\u7684\uff09 \u5728 Trie \u4e0a KMP \u00b6 \u5b9e\u9645\u4e0a\u8981\u505a\u7684\u4e8b\u60c5\u662f\u6c42\u51fa Trie \u7684\u6bcf\u4e2a\u8282\u70b9\u7684 next next \u503c \u5f53\u7136\uff0c\u8fd9\u91cc\u7684 next next \u4e0d\u518d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6307\u9488 \u2014\u2014 \u5b83\u53ef\u80fd\u6307\u5411\u5176\u4ed6\u5206\u652f\u7684\u8282\u70b9\u3002 \u8fd9\u65f6 next next \u7684\u5b9a\u4e49\uff1a\u6700\u957f\u7684\u7b49\u4e8e\u540c\u957f\u5ea6\u7684\u540e\u7f00\u7684\u4ece\u6839\u5f00\u59cb\u7684\u8def\u5f84\u7684\u957f\u5ea6 \u6c42\u6cd5\u8ddf KMP \u4e2d\u7684\u4e00\u6837\uff0c\u53ea\u662f\u8981\u6539\u6210\u5728 Trie \u4e0a BFS \u590d\u6742\u5ea6\uff1a\u5747\u644a\u5206\u6790\u5931\u6548\u4e86\uff0c\u5176\u5b9e\u53ea\u80fd\u5728\u6bcf\u6761\u94fe\u4e0a\u5747\u644a\u5206\u6790\uff0c\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u4e3a\u6a21\u5f0f\u4e32\u957f\u603b\u548c","title":"\u5b57\u5178\u6811 (Trie)"},{"location":"string/trie/#trie","text":"\u5148\u8003\u8651\u600e\u4e48\u5b58\u591a\u4e2a\u4e32 \u4e00\u79cd\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709 |\u2211| |\u2211| \u4e2a\u513f\u5b50\uff0c\u6bcf\u6761\u8fb9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26 \u7a7a\u95f4 O(len) O(len) \uff08\u5982\u679c\u5047\u8bbe |\u2211| |\u2211| \u4e3a\u5e38\u6570\uff09 \u8981\u5224\u65ad\u67d0\u4e2a\u4e32\u662f\u5426\u7b49\u4e8e\u67d0\u4e2a\u6a21\u5f0f\u4e32\uff0c\u53ea\u8981\u5728 Trie \u4e0a\u8d70\u4e00\u904d\uff08\u7ebf\u6027\u7684\uff09","title":"Trie"},{"location":"string/trie/#trie-kmp","text":"\u5b9e\u9645\u4e0a\u8981\u505a\u7684\u4e8b\u60c5\u662f\u6c42\u51fa Trie \u7684\u6bcf\u4e2a\u8282\u70b9\u7684 next next \u503c \u5f53\u7136\uff0c\u8fd9\u91cc\u7684 next next \u4e0d\u518d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6307\u9488 \u2014\u2014 \u5b83\u53ef\u80fd\u6307\u5411\u5176\u4ed6\u5206\u652f\u7684\u8282\u70b9\u3002 \u8fd9\u65f6 next next \u7684\u5b9a\u4e49\uff1a\u6700\u957f\u7684\u7b49\u4e8e\u540c\u957f\u5ea6\u7684\u540e\u7f00\u7684\u4ece\u6839\u5f00\u59cb\u7684\u8def\u5f84\u7684\u957f\u5ea6 \u6c42\u6cd5\u8ddf KMP \u4e2d\u7684\u4e00\u6837\uff0c\u53ea\u662f\u8981\u6539\u6210\u5728 Trie \u4e0a BFS \u590d\u6742\u5ea6\uff1a\u5747\u644a\u5206\u6790\u5931\u6548\u4e86\uff0c\u5176\u5b9e\u53ea\u80fd\u5728\u6bcf\u6761\u94fe\u4e0a\u5747\u644a\u5206\u6790\uff0c\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u4e3a\u6a21\u5f0f\u4e32\u957f\u603b\u548c","title":"\u5728 Trie \u4e0a KMP"},{"location":"string/z-function/","text":"\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \u3002\u8be5\u5b57\u7b26\u4e32\u7684 Z \u51fd\u6570 \u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c i i \u4e2a\u5143\u7d20\u4e3a\u6ee1\u8db3\u4ece\u4f4d\u7f6e i i \u5f00\u59cb\u4e14\u4e3a s s \u524d\u7f00\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c z[i] z[i] \u662f s s \u548c\u4ece i i \u5f00\u59cb\u7684 s s \u7684\u540e\u7f00\u7684\u6700\u5927\u516c\u5171\u524d\u7f00\u957f\u5ea6\u3002 \u6ce8\u610f \uff1a\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4e0b\u6807\u4ece 0 0 \u5f00\u59cb\uff0c\u5373 s s \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0b\u6807\u4e3a 0 0 \uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0b\u6807\u4e3a n - 1 n - 1 \u3002 Z \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c z[0] z[0] \uff0c\u901a\u5e38\u4e0d\u662f\u826f\u5b9a\u4e49\u7684\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6211\u4eec\u5047\u5b9a\u5b83\u662f 0 0 \uff08\u867d\u7136\u5728\u7b97\u6cd5\u5b9e\u73b0\u4e2d\u8fd9\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff09\u3002 \u56fd\u5916\u4e00\u822c\u5c06\u8ba1\u7b97\u8be5\u6570\u7ec4\u7684\u7b97\u6cd5\u79f0\u4e3a Z Algorithm \uff0c\u800c\u56fd\u5185\u5219\u79f0\u5176\u4e3a \u6269\u5c55 KMP \u3002 \u8fd9\u7bc7\u6587\u7ae0\u5305\u542b\u5728 O(n) O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97 Z \u51fd\u6570\u7684\u7b97\u6cd5\u4ee5\u53ca\u5176\u5404\u79cd\u5e94\u7528\u3002 \u6837\u4f8b \u00b6 \u4e0b\u9762\u82e5\u5e72\u6837\u4f8b\u5c55\u793a\u4e86\u5bf9\u4e8e\u4e0d\u540c\u5b57\u7b26\u4e32\u7684 Z \u51fd\u6570\uff1a Z(\\mathtt{aaaaa}) = [0, 4, 3, 2, 1] Z(\\mathtt{aaaaa}) = [0, 4, 3, 2, 1] Z(\\mathtt{aaabaab}) = [0, 2, 1, 0, 2, 1, 0] Z(\\mathtt{aaabaab}) = [0, 2, 1, 0, 2, 1, 0] Z(\\mathtt{abacaba}) = [0, 0, 1, 0, 3, 0, 1] Z(\\mathtt{abacaba}) = [0, 0, 1, 0, 3, 0, 1] \u6734\u7d20\u7b97\u6cd5 \u00b6 Z \u51fd\u6570\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49\u53ef\u88ab\u8868\u8ff0\u4e3a\u4e0b\u5217\u57fa\u7840\u7684 O(n^2) O(n^2) \u5b9e\u73b0\u3002 1 2 3 4 5 6 7 vector < int > z_function_trivial ( string s ) { int n = ( int ) s . length (); vector < int > z ( n ); for ( int i = 1 ; i < n ; ++ i ) while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) ++ z [ i ]; return z ; } \u6211\u4eec\u505a\u7684\u4ec5\u4ec5\u4e3a\u5faa\u73af\u6bcf\u4e2a\u4f4d\u7f6e i i \uff0c\u5e76\u901a\u8fc7\u4e0b\u8ff0\u505a\u6cd5\u66f4\u65b0\u6bcf\u4e2a z[i] z[i] \uff1a\u4ece z[i] = 0 z[i] = 0 \u5f00\u59cb\uff0c\u53ea\u8981\u6211\u4eec\u6ca1\u6709\u5931\u914d\uff08\u5e76\u4e14\u6ca1\u6709\u5230\u8fbe\u672b\u5c3e\uff09\u5c31\u5c06\u5176\u52a0 1 1 \u3002 \u8bda\u7136\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u9ad8\u6548\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u5c55\u793a\u4e00\u4e2a\u9ad8\u6548\u5b9e\u73b0\u7684\u6784\u9020\u8fc7\u7a0b\u3002 \u8ba1\u7b97 Z \u51fd\u6570\u7684\u9ad8\u6548\u7b97\u6cd5 \u00b6 \u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u9ad8\u6548\u7b97\u6cd5\uff0c\u6211\u4eec\u5c06\u4ee5 i = 1 i = 1 \u5230 n - 1 n - 1 \u7684\u987a\u5e8f\u8ba1\u7b97 z[i] z[i] \uff0c\u4f46\u5728\u8ba1\u7b97\u4e00\u4e2a\u65b0\u503c\u7684\u540c\u65f6\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u5c3d\u6700\u5927\u52aa\u529b\u4f7f\u7528\u4e4b\u524d\u5df2\u7ecf\u8ba1\u7b97\u597d\u7684\u503c\u3002 \u4e3a\u4e86\u7b80\u4fbf\u8d77\u89c1\uff0c\u5b9a\u4e49 \u5339\u914d\u6bb5 \u4e3a\u540c s s \u4e00\u4e2a\u524d\u7f00\u76f8\u540c\u7684\u90a3\u4e9b\u5b50\u4e32\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6240\u6c42 Z \u51fd\u6570\u7684\u7b2c i i \u4e2a\u5143\u7d20 z[i] z[i] \u4e3a\u4ece\u4f4d\u7f6e i i \u5f00\u59cb\u7684\u5339\u914d\u6bb5\u7684\u957f\u5ea6\uff08\u5176\u7ec8\u6b62\u4f4d\u7f6e\u4f4d\u4e8e i + z[i] - 1 i + z[i] - 1 \uff09\u3002 \u4e3a\u4e86\u8fbe\u6210\u76ee\u6807\uff0c\u6211\u4eec\u5c06\u59cb\u7ec8\u4fdd\u6301 [l;r] [l;r] \u4e3a\u6700\u9760\u53f3\u7684\u5339\u914d\u6bb5 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6240\u6709\u5df2\u63a2\u6d4b\u5230\u7684\u5339\u914d\u6bb5\u4e2d\uff0c\u6211\u4eec\u5c06\u4fdd\u6301\u7ed3\u5c3e\u6700\u9760\u53f3\u7684\u90a3\u4e00\u4e2a\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4e0b\u6807 r r \u53ef\u88ab\u8ba4\u4e3a\u662f\u5b57\u7b26\u4e32 s s \u5df2\u88ab\u7b97\u6cd5\u626b\u63cf\u7684\u8fb9\u754c\uff1b\u4efb\u4f55\u8d85\u8fc7\u8be5\u70b9\u7684\u5b57\u7b26\u90fd\u662f\u672a\u77e5\u7684\u3002 \u5047\u8bbe\u5f53\u524d\u4e0b\u6807\u4e3a i i \uff08\u5373\u6211\u4eec\u8981\u8ba1\u7b97\u7684\u4e0b\u4e00\u4e2a Z \u51fd\u6570\u503c\u7684\u4e0b\u6807\uff09\uff0c\u5219\u6709\u4e24\u79cd\u60c5\u51b5\uff1a i > r i > r -- \u5f53\u524d\u4f4d\u7f6e\u5728\u6211\u4eec\u5df2\u5904\u7406\u4f4d\u7f6e \u4e4b\u5916 \u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u4f7f\u7528 \u6734\u7d20\u7b97\u6cd5 \uff08\u5373\u4e00\u4e2a\u4e00\u4e2a\u7684\u6bd4\u8f83\u5b57\u7b26\uff09\u6765\u8ba1\u7b97 z[i] z[i] \u3002\u6ce8\u610f\u5982\u679c\u6700\u540e z[i] > 0 z[i] > 0 \uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6700\u9760\u53f3\u7684\u5339\u914d\u6bb5\u7684\u4e0b\u6807\uff0c\u56e0\u4e3a\u65b0\u7684 r = i + z[i] - 1 r = i + z[i] - 1 \u4e00\u5b9a\u6bd4\u4e4b\u524d\u7684 r r \u4f18\u3002 i \\le r i \\le r -- \u5f53\u524d\u4f4d\u7f6e\u4f4d\u4e8e\u5f53\u524d\u5339\u914d\u6bb5 [l;r] [l;r] \u4e4b\u5185\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u5df2\u8ba1\u7b97\u8fc7\u7684 Z \u51fd\u6570\u503c\u6765 \u201c\u521d\u59cb\u5316\u201d z[i] z[i] \u81f3\u67d0\u503c\uff08\u81f3\u5c11\u6bd4 \u201c\u4ece\u96f6\u5f00\u59cb\u201d \u8981\u597d\uff09\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u67d0\u4e9b\u8f83\u5927\u7684\u503c\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5b50\u4e32 s[l\\dots r] s[l\\dots r] \u548c s[0 \\dots r - l] s[0 \\dots r - l] \u5339\u914d\u3002\u8fd9\u610f\u5473\u7740\u4f5c\u4e3a z[i] z[i] \u7684\u4e00\u4e2a\u521d\u59cb\u8fd1\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u5e94\u4e8e\u6bb5 s[0 \\dots r - l] s[0 \\dots r - l] \u7684\u5df2\u8ba1\u7b97\u8fc7\u7684 Z \u51fd\u6570\u503c\uff0c\u4e5f\u5373 z[i - l] z[i - l] \u3002 \u7136\u800c\uff0c z[i - l] z[i - l] \u53ef\u80fd\u592a\u5927\u4e86\uff1a\u5c06\u5176\u5e94\u7528\u5230\u4f4d\u7f6e i i \u7ed3\u679c\u53ef\u80fd\u8d85\u8fc7\u4e0b\u6807 r r \u3002\u8fd9\u79cd\u505a\u6cd5\u5e76\u4e0d\u5408\u6cd5\uff0c\u539f\u56e0\u5728\u4e8e\u6211\u4eec\u5bf9 r r \u53f3\u4fa7\u7684\u5b57\u7b26\u4e00\u65e0\u6240\u77e5\uff1a\u4ed6\u4eec\u53ef\u80fd\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\u3002 \u6b64\u5904\u7ed9\u51fa\u4e00\u4e2a\u76f8\u4f3c\u573a\u666f\u7684 \u4f8b\u5b50 \uff1a s=\\mathtt{aaaabaa} s=\\mathtt{aaaabaa} \u5f53\u6211\u4eec\u5c1d\u8bd5\u8ba1\u7b97\u672b\u5c3e\u4f4d\u7f6e\uff08 i = 6 i = 6 \uff09\u7684\u503c\u65f6\uff0c\u5f53\u524d\u5339\u914d\u7684\u6bb5\u4e3a [5;6] [5;6] \u3002\u4f4d\u7f6e 6 6 \u4f1a\u5339\u914d\u4f4d\u7f6e 6 - 5 = 1 6 - 5 = 1 \uff0c\u5176 Z \u51fd\u6570\u503c\u4e3a z[1] = 3 z[1] = 3 \u3002\u663e\u7136\uff0c\u6211\u4eec\u4e0d\u80fd\u5c06 z[6] z[6] \u521d\u59cb\u5316\u4e3a 3 3 \uff0c\u56e0\u4e3a\u8fd9\u5b8c\u5168\u4e0d\u5bf9\u3002\u6211\u4eec\u53ef\u4ee5\u521d\u59cb\u5316\u7684\u6700\u5927\u503c\u4e3a 1 1 -- \u56e0\u4e3a\u8fd9\u662f\u4f7f\u6211\u4eec\u4e0d\u8d85\u8fc7\u6bb5 [l;r] [l;r] \u7684\u8fb9\u754c r r \u7684\u6700\u5927\u53ef\u80fd\u53d6\u503c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u7684\u5c06\u4e0b\u5217\u503c\u4f5c\u4e3a z[i] z[i] \u7684\u4e00\u4e2a\u521d\u59cb\u8fd1\u4f3c\uff1a z_0[i] = \\min(r - i + 1, z[i - l]) z_0[i] = \\min(r - i + 1, z[i - l]) \u5f53\u5c06 z[i] z[i] \u521d\u59cb\u5316\u4e3a z_0[i] z_0[i] \u540e\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 \u6734\u7d20\u7b97\u6cd5 \u589e\u52a0 z[i] z[i] \u7684\u503c -- \u56e0\u4e3a\u5b8f\u89c2\u6765\u8bb2\uff0c\u5bf9\u4e8e\u8fb9\u754c r r \u4e4b\u540e\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u65e0\u6cd5\u5f97\u77e5\u6bb5\u662f\u5426\u4f1a\u7ee7\u7eed\u5339\u914d\u8fd8\u662f\u5931\u914d\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6574\u4e2a\u7b97\u6cd5\u88ab\u5212\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff0c\u4ed6\u4eec\u53ea\u5728\u8bbe\u7f6e z[i] z[i] \u7684 \u521d\u59cb\u503c \u65f6\u6709\u6240\u4e0d\u540c\uff1a\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u88ab\u8ba4\u4e3a\u4e3a 0 0 \uff0c\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\u5b83\u7531\u5148\u524d\u5df2\u8ba1\u7b97\u8fc7\u7684\u503c\u786e\u5b9a\uff08\u4f7f\u7528\u524d\u8ff0\u516c\u5f0f\uff09\u3002\u4e4b\u540e\uff0c\u8be5\u7b97\u6cd5\u7684\u4e24\u4e2a\u5206\u652f\u90fd\u88ab\u89c4\u7ea6\u4e3a\u5b9e\u73b0 \u6734\u7d20\u7b97\u6cd5 \u3002\u5f53\u6211\u4eec\u8bbe\u7f6e\u5b8c\u521d\u59cb\u503c\u540e\uff0c\u8be5\u7b97\u6cd5\u5373\u5f00\u59cb\u6267\u884c\u3002 \u8be5\u7b97\u6cd5\u770b\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002\u5c3d\u7ba1\u5728\u6bcf\u8f6e\u8fed\u4ee3\u90fd\u4f1a\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u53d6\u5f97\u4e86\u5de8\u5927\u8fdb\u6b65\uff1a\u83b7\u5f97\u4e86\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u7684\u7b97\u6cd5\u3002\u4e4b\u540e\u6211\u4eec\u4f1a\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002 \u5b9e\u73b0 \u00b6 \u5b9e\u73b0\u76f8\u5bf9\u6765\u8bf4\u5341\u5206\u7b80\u660e\uff1a 1 2 3 4 5 6 7 8 9 10 vector < int > z_function ( string s ) { int n = ( int ) s . length (); vector < int > z ( n ); for ( int i = 1 , l = 0 , r = 0 ; i < n ; ++ i ) { if ( i <= r ) z [ i ] = min ( r - i + 1 , z [ i - l ]); while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) ++ z [ i ]; if ( i + z [ i ] - 1 > r ) l = i , r = i + z [ i ] - 1 ; } return z ; } \u5bf9\u8be5\u5b9e\u73b0\u7684\u6ce8\u91ca \u00b6 \u6574\u4e2a\u89e3\u6cd5\u88ab\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u7ed9\u51fa\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4 -- s s \u7684 Z \u51fd\u6570\u3002 \u6570\u7ec4 z z \u88ab\u521d\u59cb\u5316\u4e3a\u5168 0 0 \u3002\u5f53\u524d\u6700\u53f3\u7684\u5339\u914d\u6bb5\u88ab\u5047\u5b9a\u4e3a [0;0] [0;0] \uff08\u4e00\u4e2a\u6545\u610f\u4e3a\u4e4b\u7684\u4e0d\u5305\u542b\u4efb\u4f55 i i \u7684\u5c0f\u6bb5\uff09\u3002 \u5728\u5faa\u73af\u5185\uff0c\u5bf9\u4e8e i=1\\dots n - 1 i=1\\dots n - 1 \uff0c\u6211\u4eec\u9996\u5148\u786e\u5b9a z[i] z[i] \u7684\u521d\u59cb\u503c -- \u5176\u8981\u4e48\u4fdd\u6301\u4e3a 0 0 \u6216\u8005\u4f7f\u7528\u524d\u8ff0\u516c\u5f0f\u8ba1\u7b97\u3002 \u4e4b\u540e\uff0c\u6734\u7d20\u7b97\u6cd5\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u591a\u7684\u589e\u52a0 z[i] z[i] \u503c\u3002 \u6700\u540e\uff0c\u5982\u679c\u5fc5\u8981\uff08\u5373\u5982\u679c i + z[i] - 1 > r i + z[i] - 1 > r \uff09\uff0c\u6211\u4eec\u66f4\u65b0\u6700\u53f3\u5339\u914d\u6bb5 [l;r] [l;r] \u3002 \u7b97\u6cd5\u7684\u6e10\u8fdb\u884c\u4e3a \u00b6 \u6211\u4eec\u5c06\u8bc1\u660e\u4e0a\u8ff0\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u5173\u4e8e\u5b57\u7b26\u4e32\u957f\u5ea6\u5448\u7ebf\u6027 -- \u5373\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 \u8be5\u8bc1\u660e\u5341\u5206\u7b80\u5355\u3002 \u6211\u4eec\u53ea\u5173\u5fc3\u5185\u5c42 while \u5faa\u73af\uff0c\u56e0\u4e3a\u5176\u4f59\u90e8\u5206\u5728\u4e00\u6b21\u5faa\u73af\u4e2d\u53ea\u662f\u4e00\u5806\u5e38\u6570\u6b21\u64cd\u4f5c\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u603b\u548c\u4e3a O(n) O(n) \u3002 \u6211\u4eec\u5c06\u8bc1\u660e while \u7684 \u6bcf\u6b21\u8fed\u4ee3 \u90fd\u5c06\u589e\u52a0\u5339\u914d\u6bb5\u7684\u53f3\u8fb9\u754c r r \u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u8003\u8651\u7b97\u6cd5\u7684\u6240\u6709\u5206\u652f\uff1a i > r i > r \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u4e48 while \u5faa\u73af\u4e0d\u8fdb\u884c\u4efb\u4f55\u8fed\u4ee3\uff08\u5982\u679c s[0] \\neq s[i] s[0] \\neq s[i] \uff09\uff0c\u8981\u4e48\u5176\u5c06\u4ece\u4f4d\u7f6e i i \u5f00\u59cb\u8fdb\u884c\u82e5\u5e72\u6b21\u8fed\u4ee3\uff0c\u5176\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u5c06\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26\u3002\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u53f3\u8fb9\u754c r r \u5fc5\u5b9a\u88ab\u66f4\u65b0\u3002 \u56e0\u6b64\u6211\u4eec\u8bc1\u660e\u4e86\uff0c\u5f53 i > r i > r \u65f6\uff0c while \u5faa\u73af\u7684\u6bcf\u8f6e\u8fed\u4ee3\u90fd\u4f1a\u4f7f\u65b0\u7684 r r \u589e\u52a0 1 1 \u3002 i \\le r i \\le r \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06 z[i] z[i] \u521d\u59cb\u5316\u4e3a\u7531\u524d\u8ff0\u516c\u5f0f\u7ed9\u51fa\u7684\u67d0\u4e2a\u5177\u4f53 z_0 z_0 \u3002\u5c06 z_0 z_0 \u548c r - i + 1 r - i + 1 \u6bd4\u8f83\uff0c\u53ef\u80fd\u6709\u4e09\u79cd\u60c5\u51b5\uff1a z_0 < r - i + 1 z_0 < r - i + 1 \u6211\u4eec\u8bc1\u660e\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b while \u5faa\u73af\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u8fed\u4ee3\u3002 \u8fd9\u662f\u5341\u5206\u5bb9\u6613\u8bc1\u660e\u7684\uff0c\u6bd4\u5982\u901a\u8fc7\u53cd\u8bc1\u6cd5\uff1a\u5982\u679c while \u5faa\u73af\u8fdb\u884c\u4e86\u81f3\u5c11\u4e00\u6b21\u8fed\u4ee3\uff0c\u8fd9\u610f\u5473\u7740\u521d\u59cb\u8fd1\u4f3c z[i] = z_0 z[i] = z_0 \u662f\u4e0d\u51c6\u786e\u7684\uff08\u5c0f\u4e8e\u5339\u914d\u7684\u5b9e\u9645\u957f\u5ea6\uff09\u3002\u4f46\u662f\u7531\u4e8e s[l\\dots r] s[l\\dots r] \u548c s[0\\dots r - l] s[0\\dots r - l] \u662f\u4e00\u6837\u7684\uff0c\u8fd9\u63a8\u51fa z[i - l] z[i - l] \u7684\u503c\u662f\u9519\u8bef\u7684\uff08\u6bd4\u5176\u8be5\u6709\u7684\u503c\u5c0f\uff09\u3002 \u6240\u4ee5\uff0c\u56e0\u4e3a z[i - l] z[i - l] \u662f\u6b63\u786e\u7684\u4e14\u5176\u503c\u5c0f\u4e8e r - i + 1 r - i + 1 \uff0c\u6545\u8be5\u503c\u540c\u6240\u6c42\u7684 z[i] z[i] \u662f\u76f8\u540c\u7684\u3002 z_0 = r - i + 1 z_0 = r - i + 1 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c while \u5faa\u73af\u53ef\u80fd\u4f1a\u8fdb\u884c\u82e5\u5e72\u6b21\u8fed\u4ee3\u3002\u56e0\u4e3a\u6211\u4eec\u4ece s[r + 1] s[r + 1] \u5f00\u59cb\u6bd4\u8f83\uff0c\u800c\u5176\u4f4d\u7f6e\u5df2\u7ecf\u8d85\u8fc7\u4e86\u533a\u95f4 [l;r] [l;r] \uff0c\u6545\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u4f7f r r \u589e\u52a0\u3002 z_0 > r - i + 1 z_0 > r - i + 1 \u6839\u636e z_0 z_0 \u7684\u5b9a\u4e49\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u5185\u5c42\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u4f7f r r \u5411\u53f3\u79fb\u52a8\u3002\u7531\u4e8e r r \u4e0d\u53ef\u80fd\u8d85\u8fc7 n - 1 n - 1 \uff0c\u8fd9\u610f\u5473\u7740\u5185\u5c42\u5faa\u73af\u81f3\u591a\u8fdb\u884c n - 1 n - 1 \u8f6e\u8fed\u4ee3\u3002 \u56e0\u4e3a\u8be5\u7b97\u6cd5\u7684\u5269\u4f59\u90e8\u5206\u663e\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u6240\u4ee5\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u8ba1\u7b97 Z \u51fd\u6570\u7684\u6574\u4e2a\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u3002 \u5e94\u7528 \u00b6 \u6211\u4eec\u73b0\u5728\u6765\u8003\u8651\u5728\u82e5\u5e72\u5177\u4f53\u60c5\u51b5\u4e0b Z \u51fd\u6570\u7684\u5e94\u7528\u3002 \u8fd9\u4e9b\u5e94\u7528\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u540c \u524d\u7f00\u51fd\u6570 \u7684\u5e94\u7528\u7c7b\u4f3c\u3002 \u67e5\u627e\u5b50\u4e32 \u00b6 \u4e3a\u4e86\u907f\u514d\u6df7\u6dc6\uff0c\u6211\u4eec\u5c06 t t \u79f0\u4f5c \u6587\u672c \uff0c\u5c06 p p \u79f0\u4f5c \u6a21\u5f0f \u3002\u6240\u7ed9\u51fa\u7684\u95ee\u9898\u662f\uff1a\u5bfb\u627e\u5728\u6587\u672c t t \u4e2d\u6a21\u5f0f p p \u7684\u6240\u6709\u51fa\u73b0\uff08occurrence\uff09\u3002 \u4e3a\u4e86\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 s = p + \\diamond + t s = p + \\diamond + t \uff0c\u4e5f\u5373\u6211\u4eec\u5c06 p p \u548c t t \u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u5728\u4e2d\u95f4\u653e\u7f6e\u4e86\u4e00\u4e2a\u5206\u5272\u5b57\u7b26 \\diamond \\diamond \uff08\u6211\u4eec\u5c06\u5982\u6b64\u9009\u53d6 \\diamond \\diamond \u4f7f\u5f97\u5176\u5fc5\u5b9a\u4e0d\u51fa\u73b0\u5728 p p \u548c t t \u4e2d\uff09\u3002 \u9996\u5148\u8ba1\u7b97 s s \u7684 Z \u51fd\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u5728\u533a\u95f4 [0; \\operatorname{length}(t) - 1] [0; \\operatorname{length}(t) - 1] \u4e2d\u7684\u4efb\u610f i i \uff0c\u6211\u4eec\u8003\u8651\u5176\u5bf9\u5e94\u7684\u503c k = z[i + \\operatorname{length}(p) + 1] k = z[i + \\operatorname{length}(p) + 1] \u3002\u5982\u679c k k \u7b49\u4e8e \\operatorname{length}(p) \\operatorname{length}(p) \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053\u6709\u4e00\u4e2a p p \u7684\u51fa\u73b0\u4f4d\u4e8e t t \u7684\u7b2c i i \u4e2a\u4f4d\u7f6e\uff0c\u5426\u5219\u6ca1\u6709 p p \u7684\u51fa\u73b0\u4f4d\u4e8e t t \u7684\u7b2c i i \u4e2a\u4f4d\u7f6e\u3002 \u5176\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u540c\u65f6\u4e5f\u662f\u5176\u7a7a\u95f4\u590d\u6742\u5ea6\uff09\u4e3a O(\\operatorname{length}(t) + \\operatorname{length}(p)) O(\\operatorname{length}(t) + \\operatorname{length}(p)) \u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u8ba1\u7b97 s s \u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u3002 \u6211\u4eec\u5c06\u8fed\u4ee3\u7684\u89e3\u51b3\u8be5\u95ee\u9898\u3002\u4e5f\u5373\uff1a\u5728\u77e5\u9053\u4e86\u5f53\u524d\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u7684\u60c5\u51b5\u4e0b\uff0c\u5728 s s \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u540e\u91cd\u65b0\u8ba1\u7b97\u8be5\u6570\u76ee\u3002 \u4ee4 k k \u4e3a\u5f53\u524d s s \u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u3002\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26 c c \u81f3 s s \u3002\u663e\u7136\uff0c\u4f1a\u6709\u4e00\u4e9b\u65b0\u7684\u5b50\u4e32\u4ee5\u65b0\u7684\u5b57\u7b26 c c \u7ed3\u5c3e\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u90a3\u4e9b\u4ee5\u8be5\u5b57\u7b26\u7ed3\u5c3e\u4e14\u6211\u4eec\u4e4b\u524d\u672a\u66fe\u9047\u5230\u7684\u5b50\u4e32\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32 t = s + c t = s + c \u5e76\u5c06\u5176\u53cd\u8f6c\uff08\u4ee5\u76f8\u53cd\u987a\u5e8f\u4e66\u5199\u5176\u5b57\u7b26\uff09\u3002\u6211\u4eec\u73b0\u5728\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u6709\u591a\u5c11 t t \u7684\u524d\u7f00\u672a\u5728 t t \u7684\u5176\u4f59\u4efb\u4f55\u5730\u65b9\u51fa\u73b0\u3002\u8ba9\u6211\u4eec\u8ba1\u7b97 t t \u7684 Z \u51fd\u6570\u5e76\u627e\u5230\u5176\u6700\u5927\u503c z_{\\max} z_{\\max} \u3002\u663e\u7136\uff0c t t \u7684\u957f\u5ea6\u4e3a z_{\\max} z_{\\max} \u7684\u524d\u7f00\u51fa\u73b0\u5728 t t \u4e2d\u95f4\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u81ea\u7136\u7684\uff0c\u66f4\u77ed\u7684\u524d\u7f00\u4e5f\u51fa\u73b0\u4e86\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u5f53\u5c06\u5b57\u7b26 c c \u6dfb\u52a0\u81f3 s s \u540e\u65b0\u51fa\u73b0\u7684\u5b50\u4e32\u6570\u76ee\u4e3a \\operatorname{length}(t) - z_{\\max} \\operatorname{length}(t) - z_{\\max} \u3002 \u4f5c\u4e3a\u5176\u7ed3\u679c\uff0c\u8be5\u89e3\u6cd5\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5728 O(n) O(n) \u65f6\u95f4\u5185\uff0c\u91cd\u65b0\u8ba1\u7b97\u5728\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u79fb\u9664\u4e00\u4e2a\u5b57\u7b26\uff08\u4ece\u5c3e\u6216\u8005\u5934\uff09\u65f6\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\u3002 \u5b57\u7b26\u4e32\u538b\u7f29 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u627e\u5230\u5176\u6700\u77ed\u7684 \u201c\u538b\u7f29\u201d \u8868\u793a\uff0c\u5373\uff1a\u5bfb\u627e\u4e00\u4e2a\u6700\u77ed\u7684\u5b57\u7b26\u4e32 t t \uff0c\u4f7f\u5f97 s s \u53ef\u4ee5\u88ab t t \u7684\u4e00\u4efd\u6216\u591a\u4efd\u62f7\u8d1d\u7684\u62fc\u63a5\u8868\u793a\u3002 \u5176\u4e2d\u4e00\u79cd\u89e3\u6cd5\u4e3a\uff1a\u8ba1\u7b97 s s \u7684 Z \u51fd\u6570\uff0c\u4ece\u5c0f\u5230\u5927\u5faa\u73af\u6240\u6709\u6ee1\u8db3 i i \u6574\u9664 n n \u7684 i i \u3002\u5728\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3 i + z[i] = n i + z[i] = n \u7684 i i \u65f6\u7ec8\u6b62\u3002\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32 s s \u53ef\u88ab\u538b\u7f29\u4e3a\u957f\u5ea6 i i \u7684\u5b57\u7b26\u4e32\u3002 \u8be5\u4e8b\u5b9e\u7684\u8bc1\u660e\u540c\u5e94\u7528 \u524d\u7f00\u51fd\u6570 \u7684\u89e3\u6cd5\u8bc1\u660e\u4e00\u6837\u3002 \u7ec3\u4e60\u9898\u76ee \u00b6 Codeforces - Password [Difficulty: Easy] UVA # 455 \"Periodic Strings\" [Difficulty: Medium] UVA # 11022 \"String Factoring\" [Difficulty: Medium] UVa 11475 - Extend to Palindrome LA 6439 - Pasti Pas! Codechef - Chef and Strings Codeforces - Prefixes and Suffixes \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 Z-\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0435\u0451 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Z-function and its calculation \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002","title":"Z \u51fd\u6570\uff08\u6269\u5c55 KMP\uff09"},{"location":"string/z-function/#_1","text":"\u4e0b\u9762\u82e5\u5e72\u6837\u4f8b\u5c55\u793a\u4e86\u5bf9\u4e8e\u4e0d\u540c\u5b57\u7b26\u4e32\u7684 Z \u51fd\u6570\uff1a Z(\\mathtt{aaaaa}) = [0, 4, 3, 2, 1] Z(\\mathtt{aaaaa}) = [0, 4, 3, 2, 1] Z(\\mathtt{aaabaab}) = [0, 2, 1, 0, 2, 1, 0] Z(\\mathtt{aaabaab}) = [0, 2, 1, 0, 2, 1, 0] Z(\\mathtt{abacaba}) = [0, 0, 1, 0, 3, 0, 1] Z(\\mathtt{abacaba}) = [0, 0, 1, 0, 3, 0, 1]","title":"\u6837\u4f8b"},{"location":"string/z-function/#_2","text":"Z \u51fd\u6570\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49\u53ef\u88ab\u8868\u8ff0\u4e3a\u4e0b\u5217\u57fa\u7840\u7684 O(n^2) O(n^2) \u5b9e\u73b0\u3002 1 2 3 4 5 6 7 vector < int > z_function_trivial ( string s ) { int n = ( int ) s . length (); vector < int > z ( n ); for ( int i = 1 ; i < n ; ++ i ) while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) ++ z [ i ]; return z ; } \u6211\u4eec\u505a\u7684\u4ec5\u4ec5\u4e3a\u5faa\u73af\u6bcf\u4e2a\u4f4d\u7f6e i i \uff0c\u5e76\u901a\u8fc7\u4e0b\u8ff0\u505a\u6cd5\u66f4\u65b0\u6bcf\u4e2a z[i] z[i] \uff1a\u4ece z[i] = 0 z[i] = 0 \u5f00\u59cb\uff0c\u53ea\u8981\u6211\u4eec\u6ca1\u6709\u5931\u914d\uff08\u5e76\u4e14\u6ca1\u6709\u5230\u8fbe\u672b\u5c3e\uff09\u5c31\u5c06\u5176\u52a0 1 1 \u3002 \u8bda\u7136\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u9ad8\u6548\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u5c55\u793a\u4e00\u4e2a\u9ad8\u6548\u5b9e\u73b0\u7684\u6784\u9020\u8fc7\u7a0b\u3002","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"string/z-function/#z","text":"\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u9ad8\u6548\u7b97\u6cd5\uff0c\u6211\u4eec\u5c06\u4ee5 i = 1 i = 1 \u5230 n - 1 n - 1 \u7684\u987a\u5e8f\u8ba1\u7b97 z[i] z[i] \uff0c\u4f46\u5728\u8ba1\u7b97\u4e00\u4e2a\u65b0\u503c\u7684\u540c\u65f6\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u5c3d\u6700\u5927\u52aa\u529b\u4f7f\u7528\u4e4b\u524d\u5df2\u7ecf\u8ba1\u7b97\u597d\u7684\u503c\u3002 \u4e3a\u4e86\u7b80\u4fbf\u8d77\u89c1\uff0c\u5b9a\u4e49 \u5339\u914d\u6bb5 \u4e3a\u540c s s \u4e00\u4e2a\u524d\u7f00\u76f8\u540c\u7684\u90a3\u4e9b\u5b50\u4e32\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6240\u6c42 Z \u51fd\u6570\u7684\u7b2c i i \u4e2a\u5143\u7d20 z[i] z[i] \u4e3a\u4ece\u4f4d\u7f6e i i \u5f00\u59cb\u7684\u5339\u914d\u6bb5\u7684\u957f\u5ea6\uff08\u5176\u7ec8\u6b62\u4f4d\u7f6e\u4f4d\u4e8e i + z[i] - 1 i + z[i] - 1 \uff09\u3002 \u4e3a\u4e86\u8fbe\u6210\u76ee\u6807\uff0c\u6211\u4eec\u5c06\u59cb\u7ec8\u4fdd\u6301 [l;r] [l;r] \u4e3a\u6700\u9760\u53f3\u7684\u5339\u914d\u6bb5 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6240\u6709\u5df2\u63a2\u6d4b\u5230\u7684\u5339\u914d\u6bb5\u4e2d\uff0c\u6211\u4eec\u5c06\u4fdd\u6301\u7ed3\u5c3e\u6700\u9760\u53f3\u7684\u90a3\u4e00\u4e2a\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4e0b\u6807 r r \u53ef\u88ab\u8ba4\u4e3a\u662f\u5b57\u7b26\u4e32 s s \u5df2\u88ab\u7b97\u6cd5\u626b\u63cf\u7684\u8fb9\u754c\uff1b\u4efb\u4f55\u8d85\u8fc7\u8be5\u70b9\u7684\u5b57\u7b26\u90fd\u662f\u672a\u77e5\u7684\u3002 \u5047\u8bbe\u5f53\u524d\u4e0b\u6807\u4e3a i i \uff08\u5373\u6211\u4eec\u8981\u8ba1\u7b97\u7684\u4e0b\u4e00\u4e2a Z \u51fd\u6570\u503c\u7684\u4e0b\u6807\uff09\uff0c\u5219\u6709\u4e24\u79cd\u60c5\u51b5\uff1a i > r i > r -- \u5f53\u524d\u4f4d\u7f6e\u5728\u6211\u4eec\u5df2\u5904\u7406\u4f4d\u7f6e \u4e4b\u5916 \u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u4f7f\u7528 \u6734\u7d20\u7b97\u6cd5 \uff08\u5373\u4e00\u4e2a\u4e00\u4e2a\u7684\u6bd4\u8f83\u5b57\u7b26\uff09\u6765\u8ba1\u7b97 z[i] z[i] \u3002\u6ce8\u610f\u5982\u679c\u6700\u540e z[i] > 0 z[i] > 0 \uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6700\u9760\u53f3\u7684\u5339\u914d\u6bb5\u7684\u4e0b\u6807\uff0c\u56e0\u4e3a\u65b0\u7684 r = i + z[i] - 1 r = i + z[i] - 1 \u4e00\u5b9a\u6bd4\u4e4b\u524d\u7684 r r \u4f18\u3002 i \\le r i \\le r -- \u5f53\u524d\u4f4d\u7f6e\u4f4d\u4e8e\u5f53\u524d\u5339\u914d\u6bb5 [l;r] [l;r] \u4e4b\u5185\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u5df2\u8ba1\u7b97\u8fc7\u7684 Z \u51fd\u6570\u503c\u6765 \u201c\u521d\u59cb\u5316\u201d z[i] z[i] \u81f3\u67d0\u503c\uff08\u81f3\u5c11\u6bd4 \u201c\u4ece\u96f6\u5f00\u59cb\u201d \u8981\u597d\uff09\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u67d0\u4e9b\u8f83\u5927\u7684\u503c\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5b50\u4e32 s[l\\dots r] s[l\\dots r] \u548c s[0 \\dots r - l] s[0 \\dots r - l] \u5339\u914d\u3002\u8fd9\u610f\u5473\u7740\u4f5c\u4e3a z[i] z[i] \u7684\u4e00\u4e2a\u521d\u59cb\u8fd1\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u5e94\u4e8e\u6bb5 s[0 \\dots r - l] s[0 \\dots r - l] \u7684\u5df2\u8ba1\u7b97\u8fc7\u7684 Z \u51fd\u6570\u503c\uff0c\u4e5f\u5373 z[i - l] z[i - l] \u3002 \u7136\u800c\uff0c z[i - l] z[i - l] \u53ef\u80fd\u592a\u5927\u4e86\uff1a\u5c06\u5176\u5e94\u7528\u5230\u4f4d\u7f6e i i \u7ed3\u679c\u53ef\u80fd\u8d85\u8fc7\u4e0b\u6807 r r \u3002\u8fd9\u79cd\u505a\u6cd5\u5e76\u4e0d\u5408\u6cd5\uff0c\u539f\u56e0\u5728\u4e8e\u6211\u4eec\u5bf9 r r \u53f3\u4fa7\u7684\u5b57\u7b26\u4e00\u65e0\u6240\u77e5\uff1a\u4ed6\u4eec\u53ef\u80fd\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\u3002 \u6b64\u5904\u7ed9\u51fa\u4e00\u4e2a\u76f8\u4f3c\u573a\u666f\u7684 \u4f8b\u5b50 \uff1a s=\\mathtt{aaaabaa} s=\\mathtt{aaaabaa} \u5f53\u6211\u4eec\u5c1d\u8bd5\u8ba1\u7b97\u672b\u5c3e\u4f4d\u7f6e\uff08 i = 6 i = 6 \uff09\u7684\u503c\u65f6\uff0c\u5f53\u524d\u5339\u914d\u7684\u6bb5\u4e3a [5;6] [5;6] \u3002\u4f4d\u7f6e 6 6 \u4f1a\u5339\u914d\u4f4d\u7f6e 6 - 5 = 1 6 - 5 = 1 \uff0c\u5176 Z \u51fd\u6570\u503c\u4e3a z[1] = 3 z[1] = 3 \u3002\u663e\u7136\uff0c\u6211\u4eec\u4e0d\u80fd\u5c06 z[6] z[6] \u521d\u59cb\u5316\u4e3a 3 3 \uff0c\u56e0\u4e3a\u8fd9\u5b8c\u5168\u4e0d\u5bf9\u3002\u6211\u4eec\u53ef\u4ee5\u521d\u59cb\u5316\u7684\u6700\u5927\u503c\u4e3a 1 1 -- \u56e0\u4e3a\u8fd9\u662f\u4f7f\u6211\u4eec\u4e0d\u8d85\u8fc7\u6bb5 [l;r] [l;r] \u7684\u8fb9\u754c r r \u7684\u6700\u5927\u53ef\u80fd\u53d6\u503c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u7684\u5c06\u4e0b\u5217\u503c\u4f5c\u4e3a z[i] z[i] \u7684\u4e00\u4e2a\u521d\u59cb\u8fd1\u4f3c\uff1a z_0[i] = \\min(r - i + 1, z[i - l]) z_0[i] = \\min(r - i + 1, z[i - l]) \u5f53\u5c06 z[i] z[i] \u521d\u59cb\u5316\u4e3a z_0[i] z_0[i] \u540e\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 \u6734\u7d20\u7b97\u6cd5 \u589e\u52a0 z[i] z[i] \u7684\u503c -- \u56e0\u4e3a\u5b8f\u89c2\u6765\u8bb2\uff0c\u5bf9\u4e8e\u8fb9\u754c r r \u4e4b\u540e\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u65e0\u6cd5\u5f97\u77e5\u6bb5\u662f\u5426\u4f1a\u7ee7\u7eed\u5339\u914d\u8fd8\u662f\u5931\u914d\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6574\u4e2a\u7b97\u6cd5\u88ab\u5212\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff0c\u4ed6\u4eec\u53ea\u5728\u8bbe\u7f6e z[i] z[i] \u7684 \u521d\u59cb\u503c \u65f6\u6709\u6240\u4e0d\u540c\uff1a\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u88ab\u8ba4\u4e3a\u4e3a 0 0 \uff0c\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\u5b83\u7531\u5148\u524d\u5df2\u8ba1\u7b97\u8fc7\u7684\u503c\u786e\u5b9a\uff08\u4f7f\u7528\u524d\u8ff0\u516c\u5f0f\uff09\u3002\u4e4b\u540e\uff0c\u8be5\u7b97\u6cd5\u7684\u4e24\u4e2a\u5206\u652f\u90fd\u88ab\u89c4\u7ea6\u4e3a\u5b9e\u73b0 \u6734\u7d20\u7b97\u6cd5 \u3002\u5f53\u6211\u4eec\u8bbe\u7f6e\u5b8c\u521d\u59cb\u503c\u540e\uff0c\u8be5\u7b97\u6cd5\u5373\u5f00\u59cb\u6267\u884c\u3002 \u8be5\u7b97\u6cd5\u770b\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002\u5c3d\u7ba1\u5728\u6bcf\u8f6e\u8fed\u4ee3\u90fd\u4f1a\u8fd0\u884c\u6734\u7d20\u7b97\u6cd5\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u53d6\u5f97\u4e86\u5de8\u5927\u8fdb\u6b65\uff1a\u83b7\u5f97\u4e86\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u7684\u7b97\u6cd5\u3002\u4e4b\u540e\u6211\u4eec\u4f1a\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002","title":"\u8ba1\u7b97 Z \u51fd\u6570\u7684\u9ad8\u6548\u7b97\u6cd5"},{"location":"string/z-function/#_3","text":"\u5b9e\u73b0\u76f8\u5bf9\u6765\u8bf4\u5341\u5206\u7b80\u660e\uff1a 1 2 3 4 5 6 7 8 9 10 vector < int > z_function ( string s ) { int n = ( int ) s . length (); vector < int > z ( n ); for ( int i = 1 , l = 0 , r = 0 ; i < n ; ++ i ) { if ( i <= r ) z [ i ] = min ( r - i + 1 , z [ i - l ]); while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) ++ z [ i ]; if ( i + z [ i ] - 1 > r ) l = i , r = i + z [ i ] - 1 ; } return z ; }","title":"\u5b9e\u73b0"},{"location":"string/z-function/#_4","text":"\u6574\u4e2a\u89e3\u6cd5\u88ab\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u7ed9\u51fa\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4 -- s s \u7684 Z \u51fd\u6570\u3002 \u6570\u7ec4 z z \u88ab\u521d\u59cb\u5316\u4e3a\u5168 0 0 \u3002\u5f53\u524d\u6700\u53f3\u7684\u5339\u914d\u6bb5\u88ab\u5047\u5b9a\u4e3a [0;0] [0;0] \uff08\u4e00\u4e2a\u6545\u610f\u4e3a\u4e4b\u7684\u4e0d\u5305\u542b\u4efb\u4f55 i i \u7684\u5c0f\u6bb5\uff09\u3002 \u5728\u5faa\u73af\u5185\uff0c\u5bf9\u4e8e i=1\\dots n - 1 i=1\\dots n - 1 \uff0c\u6211\u4eec\u9996\u5148\u786e\u5b9a z[i] z[i] \u7684\u521d\u59cb\u503c -- \u5176\u8981\u4e48\u4fdd\u6301\u4e3a 0 0 \u6216\u8005\u4f7f\u7528\u524d\u8ff0\u516c\u5f0f\u8ba1\u7b97\u3002 \u4e4b\u540e\uff0c\u6734\u7d20\u7b97\u6cd5\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u591a\u7684\u589e\u52a0 z[i] z[i] \u503c\u3002 \u6700\u540e\uff0c\u5982\u679c\u5fc5\u8981\uff08\u5373\u5982\u679c i + z[i] - 1 > r i + z[i] - 1 > r \uff09\uff0c\u6211\u4eec\u66f4\u65b0\u6700\u53f3\u5339\u914d\u6bb5 [l;r] [l;r] \u3002","title":"\u5bf9\u8be5\u5b9e\u73b0\u7684\u6ce8\u91ca"},{"location":"string/z-function/#_5","text":"\u6211\u4eec\u5c06\u8bc1\u660e\u4e0a\u8ff0\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u5173\u4e8e\u5b57\u7b26\u4e32\u957f\u5ea6\u5448\u7ebf\u6027 -- \u5373\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 \u8be5\u8bc1\u660e\u5341\u5206\u7b80\u5355\u3002 \u6211\u4eec\u53ea\u5173\u5fc3\u5185\u5c42 while \u5faa\u73af\uff0c\u56e0\u4e3a\u5176\u4f59\u90e8\u5206\u5728\u4e00\u6b21\u5faa\u73af\u4e2d\u53ea\u662f\u4e00\u5806\u5e38\u6570\u6b21\u64cd\u4f5c\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u603b\u548c\u4e3a O(n) O(n) \u3002 \u6211\u4eec\u5c06\u8bc1\u660e while \u7684 \u6bcf\u6b21\u8fed\u4ee3 \u90fd\u5c06\u589e\u52a0\u5339\u914d\u6bb5\u7684\u53f3\u8fb9\u754c r r \u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u8003\u8651\u7b97\u6cd5\u7684\u6240\u6709\u5206\u652f\uff1a i > r i > r \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u4e48 while \u5faa\u73af\u4e0d\u8fdb\u884c\u4efb\u4f55\u8fed\u4ee3\uff08\u5982\u679c s[0] \\neq s[i] s[0] \\neq s[i] \uff09\uff0c\u8981\u4e48\u5176\u5c06\u4ece\u4f4d\u7f6e i i \u5f00\u59cb\u8fdb\u884c\u82e5\u5e72\u6b21\u8fed\u4ee3\uff0c\u5176\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u5c06\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26\u3002\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u53f3\u8fb9\u754c r r \u5fc5\u5b9a\u88ab\u66f4\u65b0\u3002 \u56e0\u6b64\u6211\u4eec\u8bc1\u660e\u4e86\uff0c\u5f53 i > r i > r \u65f6\uff0c while \u5faa\u73af\u7684\u6bcf\u8f6e\u8fed\u4ee3\u90fd\u4f1a\u4f7f\u65b0\u7684 r r \u589e\u52a0 1 1 \u3002 i \\le r i \\le r \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06 z[i] z[i] \u521d\u59cb\u5316\u4e3a\u7531\u524d\u8ff0\u516c\u5f0f\u7ed9\u51fa\u7684\u67d0\u4e2a\u5177\u4f53 z_0 z_0 \u3002\u5c06 z_0 z_0 \u548c r - i + 1 r - i + 1 \u6bd4\u8f83\uff0c\u53ef\u80fd\u6709\u4e09\u79cd\u60c5\u51b5\uff1a z_0 < r - i + 1 z_0 < r - i + 1 \u6211\u4eec\u8bc1\u660e\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b while \u5faa\u73af\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u8fed\u4ee3\u3002 \u8fd9\u662f\u5341\u5206\u5bb9\u6613\u8bc1\u660e\u7684\uff0c\u6bd4\u5982\u901a\u8fc7\u53cd\u8bc1\u6cd5\uff1a\u5982\u679c while \u5faa\u73af\u8fdb\u884c\u4e86\u81f3\u5c11\u4e00\u6b21\u8fed\u4ee3\uff0c\u8fd9\u610f\u5473\u7740\u521d\u59cb\u8fd1\u4f3c z[i] = z_0 z[i] = z_0 \u662f\u4e0d\u51c6\u786e\u7684\uff08\u5c0f\u4e8e\u5339\u914d\u7684\u5b9e\u9645\u957f\u5ea6\uff09\u3002\u4f46\u662f\u7531\u4e8e s[l\\dots r] s[l\\dots r] \u548c s[0\\dots r - l] s[0\\dots r - l] \u662f\u4e00\u6837\u7684\uff0c\u8fd9\u63a8\u51fa z[i - l] z[i - l] \u7684\u503c\u662f\u9519\u8bef\u7684\uff08\u6bd4\u5176\u8be5\u6709\u7684\u503c\u5c0f\uff09\u3002 \u6240\u4ee5\uff0c\u56e0\u4e3a z[i - l] z[i - l] \u662f\u6b63\u786e\u7684\u4e14\u5176\u503c\u5c0f\u4e8e r - i + 1 r - i + 1 \uff0c\u6545\u8be5\u503c\u540c\u6240\u6c42\u7684 z[i] z[i] \u662f\u76f8\u540c\u7684\u3002 z_0 = r - i + 1 z_0 = r - i + 1 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c while \u5faa\u73af\u53ef\u80fd\u4f1a\u8fdb\u884c\u82e5\u5e72\u6b21\u8fed\u4ee3\u3002\u56e0\u4e3a\u6211\u4eec\u4ece s[r + 1] s[r + 1] \u5f00\u59cb\u6bd4\u8f83\uff0c\u800c\u5176\u4f4d\u7f6e\u5df2\u7ecf\u8d85\u8fc7\u4e86\u533a\u95f4 [l;r] [l;r] \uff0c\u6545\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u4f7f r r \u589e\u52a0\u3002 z_0 > r - i + 1 z_0 > r - i + 1 \u6839\u636e z_0 z_0 \u7684\u5b9a\u4e49\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u5185\u5c42\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u4f7f r r \u5411\u53f3\u79fb\u52a8\u3002\u7531\u4e8e r r \u4e0d\u53ef\u80fd\u8d85\u8fc7 n - 1 n - 1 \uff0c\u8fd9\u610f\u5473\u7740\u5185\u5c42\u5faa\u73af\u81f3\u591a\u8fdb\u884c n - 1 n - 1 \u8f6e\u8fed\u4ee3\u3002 \u56e0\u4e3a\u8be5\u7b97\u6cd5\u7684\u5269\u4f59\u90e8\u5206\u663e\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u6240\u4ee5\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u8ba1\u7b97 Z \u51fd\u6570\u7684\u6574\u4e2a\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u3002","title":"\u7b97\u6cd5\u7684\u6e10\u8fdb\u884c\u4e3a"},{"location":"string/z-function/#_6","text":"\u6211\u4eec\u73b0\u5728\u6765\u8003\u8651\u5728\u82e5\u5e72\u5177\u4f53\u60c5\u51b5\u4e0b Z \u51fd\u6570\u7684\u5e94\u7528\u3002 \u8fd9\u4e9b\u5e94\u7528\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u540c \u524d\u7f00\u51fd\u6570 \u7684\u5e94\u7528\u7c7b\u4f3c\u3002","title":"\u5e94\u7528"},{"location":"string/z-function/#_7","text":"\u4e3a\u4e86\u907f\u514d\u6df7\u6dc6\uff0c\u6211\u4eec\u5c06 t t \u79f0\u4f5c \u6587\u672c \uff0c\u5c06 p p \u79f0\u4f5c \u6a21\u5f0f \u3002\u6240\u7ed9\u51fa\u7684\u95ee\u9898\u662f\uff1a\u5bfb\u627e\u5728\u6587\u672c t t \u4e2d\u6a21\u5f0f p p \u7684\u6240\u6709\u51fa\u73b0\uff08occurrence\uff09\u3002 \u4e3a\u4e86\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 s = p + \\diamond + t s = p + \\diamond + t \uff0c\u4e5f\u5373\u6211\u4eec\u5c06 p p \u548c t t \u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u5728\u4e2d\u95f4\u653e\u7f6e\u4e86\u4e00\u4e2a\u5206\u5272\u5b57\u7b26 \\diamond \\diamond \uff08\u6211\u4eec\u5c06\u5982\u6b64\u9009\u53d6 \\diamond \\diamond \u4f7f\u5f97\u5176\u5fc5\u5b9a\u4e0d\u51fa\u73b0\u5728 p p \u548c t t \u4e2d\uff09\u3002 \u9996\u5148\u8ba1\u7b97 s s \u7684 Z \u51fd\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u5728\u533a\u95f4 [0; \\operatorname{length}(t) - 1] [0; \\operatorname{length}(t) - 1] \u4e2d\u7684\u4efb\u610f i i \uff0c\u6211\u4eec\u8003\u8651\u5176\u5bf9\u5e94\u7684\u503c k = z[i + \\operatorname{length}(p) + 1] k = z[i + \\operatorname{length}(p) + 1] \u3002\u5982\u679c k k \u7b49\u4e8e \\operatorname{length}(p) \\operatorname{length}(p) \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053\u6709\u4e00\u4e2a p p \u7684\u51fa\u73b0\u4f4d\u4e8e t t \u7684\u7b2c i i \u4e2a\u4f4d\u7f6e\uff0c\u5426\u5219\u6ca1\u6709 p p \u7684\u51fa\u73b0\u4f4d\u4e8e t t \u7684\u7b2c i i \u4e2a\u4f4d\u7f6e\u3002 \u5176\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u540c\u65f6\u4e5f\u662f\u5176\u7a7a\u95f4\u590d\u6742\u5ea6\uff09\u4e3a O(\\operatorname{length}(t) + \\operatorname{length}(p)) O(\\operatorname{length}(t) + \\operatorname{length}(p)) \u3002","title":"\u67e5\u627e\u5b50\u4e32"},{"location":"string/z-function/#_8","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u8ba1\u7b97 s s \u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u3002 \u6211\u4eec\u5c06\u8fed\u4ee3\u7684\u89e3\u51b3\u8be5\u95ee\u9898\u3002\u4e5f\u5373\uff1a\u5728\u77e5\u9053\u4e86\u5f53\u524d\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee\u7684\u60c5\u51b5\u4e0b\uff0c\u5728 s s \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u540e\u91cd\u65b0\u8ba1\u7b97\u8be5\u6570\u76ee\u3002 \u4ee4 k k \u4e3a\u5f53\u524d s s \u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u3002\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26 c c \u81f3 s s \u3002\u663e\u7136\uff0c\u4f1a\u6709\u4e00\u4e9b\u65b0\u7684\u5b50\u4e32\u4ee5\u65b0\u7684\u5b57\u7b26 c c \u7ed3\u5c3e\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u90a3\u4e9b\u4ee5\u8be5\u5b57\u7b26\u7ed3\u5c3e\u4e14\u6211\u4eec\u4e4b\u524d\u672a\u66fe\u9047\u5230\u7684\u5b50\u4e32\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32 t = s + c t = s + c \u5e76\u5c06\u5176\u53cd\u8f6c\uff08\u4ee5\u76f8\u53cd\u987a\u5e8f\u4e66\u5199\u5176\u5b57\u7b26\uff09\u3002\u6211\u4eec\u73b0\u5728\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u6709\u591a\u5c11 t t \u7684\u524d\u7f00\u672a\u5728 t t \u7684\u5176\u4f59\u4efb\u4f55\u5730\u65b9\u51fa\u73b0\u3002\u8ba9\u6211\u4eec\u8ba1\u7b97 t t \u7684 Z \u51fd\u6570\u5e76\u627e\u5230\u5176\u6700\u5927\u503c z_{\\max} z_{\\max} \u3002\u663e\u7136\uff0c t t \u7684\u957f\u5ea6\u4e3a z_{\\max} z_{\\max} \u7684\u524d\u7f00\u51fa\u73b0\u5728 t t \u4e2d\u95f4\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u81ea\u7136\u7684\uff0c\u66f4\u77ed\u7684\u524d\u7f00\u4e5f\u51fa\u73b0\u4e86\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u5f53\u5c06\u5b57\u7b26 c c \u6dfb\u52a0\u81f3 s s \u540e\u65b0\u51fa\u73b0\u7684\u5b50\u4e32\u6570\u76ee\u4e3a \\operatorname{length}(t) - z_{\\max} \\operatorname{length}(t) - z_{\\max} \u3002 \u4f5c\u4e3a\u5176\u7ed3\u679c\uff0c\u8be5\u89e3\u6cd5\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5728 O(n) O(n) \u65f6\u95f4\u5185\uff0c\u91cd\u65b0\u8ba1\u7b97\u5728\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u79fb\u9664\u4e00\u4e2a\u5b57\u7b26\uff08\u4ece\u5c3e\u6216\u8005\u5934\uff09\u65f6\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\u3002","title":"\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u6570\u76ee"},{"location":"string/z-function/#_9","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u627e\u5230\u5176\u6700\u77ed\u7684 \u201c\u538b\u7f29\u201d \u8868\u793a\uff0c\u5373\uff1a\u5bfb\u627e\u4e00\u4e2a\u6700\u77ed\u7684\u5b57\u7b26\u4e32 t t \uff0c\u4f7f\u5f97 s s \u53ef\u4ee5\u88ab t t \u7684\u4e00\u4efd\u6216\u591a\u4efd\u62f7\u8d1d\u7684\u62fc\u63a5\u8868\u793a\u3002 \u5176\u4e2d\u4e00\u79cd\u89e3\u6cd5\u4e3a\uff1a\u8ba1\u7b97 s s \u7684 Z \u51fd\u6570\uff0c\u4ece\u5c0f\u5230\u5927\u5faa\u73af\u6240\u6709\u6ee1\u8db3 i i \u6574\u9664 n n \u7684 i i \u3002\u5728\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3 i + z[i] = n i + z[i] = n \u7684 i i \u65f6\u7ec8\u6b62\u3002\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32 s s \u53ef\u88ab\u538b\u7f29\u4e3a\u957f\u5ea6 i i \u7684\u5b57\u7b26\u4e32\u3002 \u8be5\u4e8b\u5b9e\u7684\u8bc1\u660e\u540c\u5e94\u7528 \u524d\u7f00\u51fd\u6570 \u7684\u89e3\u6cd5\u8bc1\u660e\u4e00\u6837\u3002","title":"\u5b57\u7b26\u4e32\u538b\u7f29"},{"location":"string/z-function/#_10","text":"Codeforces - Password [Difficulty: Easy] UVA # 455 \"Periodic Strings\" [Difficulty: Medium] UVA # 11022 \"String Factoring\" [Difficulty: Medium] UVa 11475 - Extend to Palindrome LA 6439 - Pasti Pas! Codechef - Chef and Strings Codeforces - Prefixes and Suffixes \u672c\u9875\u9762\u4e3b\u8981\u8bd1\u81ea\u535a\u6587 Z-\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0435\u0451 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u4e0e\u5176\u82f1\u6587\u7ffb\u8bd1\u7248 Z-function and its calculation \u3002\u5176\u4e2d\u4fc4\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a Public Domain + Leave a Link\uff1b\u82f1\u6587\u7248\u7248\u6743\u534f\u8bae\u4e3a CC-BY-SA 4.0\u3002","title":"\u7ec3\u4e60\u9898\u76ee"}]}